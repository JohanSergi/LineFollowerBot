
GRUZIK2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094e0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  080095f0  080095f0  000195f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ab4  08009ab4  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  08009ab4  08009ab4  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009ab4  08009ab4  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ab4  08009ab4  00019ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ab8  08009ab8  00019ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08009abc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000210  08009ccc  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  08009ccc  000204b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102b9  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029f1  00000000  00000000  000304f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00032ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e18  00000000  00000000  00033df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019dac  00000000  00000000  00034c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000123a7  00000000  00000000  0004e9bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000913ba  00000000  00000000  00060d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f211d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051b4  00000000  00000000  000f2170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000210 	.word	0x20000210
 800012c:	00000000 	.word	0x00000000
 8000130:	080095d8 	.word	0x080095d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000214 	.word	0x20000214
 800014c:	080095d8 	.word	0x080095d8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2iz>:
 8001030:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001038:	d30f      	bcc.n	800105a <__aeabi_f2iz+0x2a>
 800103a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d90d      	bls.n	8001060 <__aeabi_f2iz+0x30>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001050:	fa23 f002 	lsr.w	r0, r3, r2
 8001054:	bf18      	it	ne
 8001056:	4240      	negne	r0, r0
 8001058:	4770      	bx	lr
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	4770      	bx	lr
 8001060:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001064:	d101      	bne.n	800106a <__aeabi_f2iz+0x3a>
 8001066:	0242      	lsls	r2, r0, #9
 8001068:	d105      	bne.n	8001076 <__aeabi_f2iz+0x46>
 800106a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800106e:	bf08      	it	eq
 8001070:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001074:	4770      	bx	lr
 8001076:	f04f 0000 	mov.w	r0, #0
 800107a:	4770      	bx	lr

0800107c <SN_UART_Send>:
}

/*Example usage of this function looks like that*/
// Uart_send(&huart2, "data:%d %s %d\r\n",cokolwiek, cos, itd);
void SN_UART_Send(UART_HandleTypeDef *huart, const char *print, ...)
{
 800107c:	b40e      	push	{r1, r2, r3}
 800107e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	466b      	mov	r3, sp
 800108a:	461e      	mov	r6, r3
    int timeout = 100;
 800108c:	2364      	movs	r3, #100	; 0x64
 800108e:	61fb      	str	r3, [r7, #28]

    // Determine the length of the formatted string
    va_list args;
    va_start(args, print);
 8001090:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001094:	60fb      	str	r3, [r7, #12]
    int len = vsnprintf(NULL, 0, print, args);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800109a:	2100      	movs	r1, #0
 800109c:	2000      	movs	r0, #0
 800109e:	f006 f835 	bl	800710c <vsniprintf>
 80010a2:	61b8      	str	r0, [r7, #24]
    va_end(args);

    // Allocate the buffer with the correct length
    char Buffer[len];
 80010a4:	69b9      	ldr	r1, [r7, #24]
 80010a6:	1e4b      	subs	r3, r1, #1
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	460a      	mov	r2, r1
 80010ac:	2300      	movs	r3, #0
 80010ae:	4690      	mov	r8, r2
 80010b0:	4699      	mov	r9, r3
 80010b2:	f04f 0200 	mov.w	r2, #0
 80010b6:	f04f 0300 	mov.w	r3, #0
 80010ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80010be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80010c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80010c6:	460a      	mov	r2, r1
 80010c8:	2300      	movs	r3, #0
 80010ca:	4614      	mov	r4, r2
 80010cc:	461d      	mov	r5, r3
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	f04f 0300 	mov.w	r3, #0
 80010d6:	00eb      	lsls	r3, r5, #3
 80010d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80010dc:	00e2      	lsls	r2, r4, #3
 80010de:	460b      	mov	r3, r1
 80010e0:	3307      	adds	r3, #7
 80010e2:	08db      	lsrs	r3, r3, #3
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	ebad 0d03 	sub.w	sp, sp, r3
 80010ea:	466b      	mov	r3, sp
 80010ec:	3300      	adds	r3, #0
 80010ee:	613b      	str	r3, [r7, #16]

    // Format the string into the buffer
    va_start(args, print);
 80010f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010f4:	60fb      	str	r3, [r7, #12]
    vsnprintf(Buffer, len, print, args);
 80010f6:	69b9      	ldr	r1, [r7, #24]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010fc:	6938      	ldr	r0, [r7, #16]
 80010fe:	f006 f805 	bl	800710c <vsniprintf>
    va_end(args);

    // Transmit the formatted string through UART
    HAL_UART_Transmit(huart, (uint8_t *)Buffer, len, timeout);
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	b29a      	uxth	r2, r3
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	6939      	ldr	r1, [r7, #16]
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f004 fc6e 	bl	80059ec <HAL_UART_Transmit>
 8001110:	46b5      	mov	sp, r6
}
 8001112:	bf00      	nop
 8001114:	3720      	adds	r7, #32
 8001116:	46bd      	mov	sp, r7
 8001118:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800111c:	b003      	add	sp, #12
 800111e:	4770      	bx	lr

08001120 <SN_Find_first>:
/*decode received message*/
int SN_Find_first(const char*message, const char*token)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b0a8      	sub	sp, #160	; 0xa0
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
	char buff[128];
	int token_len = sprintf(buff,token);
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	6839      	ldr	r1, [r7, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f005 ff19 	bl	8006f68 <siprintf>
 8001136:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	int msg_size = sprintf(buff,message);
 800113a:	f107 0308 	add.w	r3, r7, #8
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	4618      	mov	r0, r3
 8001142:	f005 ff11 	bl	8006f68 <siprintf>
 8001146:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	int token_place;
	int true_tokens = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


	for(int i = 0; i <= (msg_size - 1); i++)
 8001150:	2300      	movs	r3, #0
 8001152:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001156:	e042      	b.n	80011de <SN_Find_first+0xbe>
	{
		if(message[i] == token[0])
 8001158:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	781a      	ldrb	r2, [r3, #0]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	429a      	cmp	r2, r3
 8001168:	d134      	bne.n	80011d4 <SN_Find_first+0xb4>
		{
			true_tokens = 1;
 800116a:	2301      	movs	r3, #1
 800116c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			for(int j = 1; j <= (token_len - 1); j++)
 8001170:	2301      	movs	r3, #1
 8001172:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001176:	e019      	b.n	80011ac <SN_Find_first+0x8c>
			{
				if(message[i + j] == token[j])
 8001178:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800117c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001180:	4413      	add	r3, r2
 8001182:	461a      	mov	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4413      	add	r3, r2
 8001188:	781a      	ldrb	r2, [r3, #0]
 800118a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800118e:	6839      	ldr	r1, [r7, #0]
 8001190:	440b      	add	r3, r1
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	429a      	cmp	r2, r3
 8001196:	d104      	bne.n	80011a2 <SN_Find_first+0x82>
				{
					true_tokens++;
 8001198:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800119c:	3301      	adds	r3, #1
 800119e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			for(int j = 1; j <= (token_len - 1); j++)
 80011a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80011a6:	3301      	adds	r3, #1
 80011a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80011ac:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80011b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80011b4:	429a      	cmp	r2, r3
 80011b6:	dcdf      	bgt.n	8001178 <SN_Find_first+0x58>
				}
			}

			if(true_tokens == token_len)
 80011b8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80011bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d104      	bne.n	80011ce <SN_Find_first+0xae>
			{
				token_place = i;
 80011c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80011c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
				break;
 80011cc:	e00d      	b.n	80011ea <SN_Find_first+0xca>
			}
			else
			{
				true_tokens = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	for(int i = 0; i <= (msg_size - 1); i++)
 80011d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80011d8:	3301      	adds	r3, #1
 80011da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80011de:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80011e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80011e6:	429a      	cmp	r2, r3
 80011e8:	dcb6      	bgt.n	8001158 <SN_Find_first+0x38>
			}
		}
 }
 return token_place;
 80011ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	37a0      	adds	r7, #160	; 0xa0
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <SN_Value_In_Message>:
		}
 }
 return token_place;
}
void SN_Value_In_Message(const char*message, int from, int to, char*Value)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b087      	sub	sp, #28
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	60f8      	str	r0, [r7, #12]
 80011fe:	60b9      	str	r1, [r7, #8]
 8001200:	607a      	str	r2, [r7, #4]
 8001202:	603b      	str	r3, [r7, #0]
	int j = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
	for(int i = from; i <= (to - 1); i++)
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	e00d      	b.n	800122a <SN_Value_In_Message+0x34>
	{
		Value[j] = message[i];
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	441a      	add	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	6839      	ldr	r1, [r7, #0]
 8001218:	440b      	add	r3, r1
 800121a:	7812      	ldrb	r2, [r2, #0]
 800121c:	701a      	strb	r2, [r3, #0]
		j++;
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	3301      	adds	r3, #1
 8001222:	617b      	str	r3, [r7, #20]
	for(int i = from; i <= (to - 1); i++)
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	3301      	adds	r3, #1
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	429a      	cmp	r2, r3
 8001230:	dced      	bgt.n	800120e <SN_Value_In_Message+0x18>
	}
}
 8001232:	bf00      	nop
 8001234:	bf00      	nop
 8001236:	371c      	adds	r7, #28
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
	...

08001240 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001250:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <MX_ADC1_Init+0x74>)
 8001252:	4a19      	ldr	r2, [pc, #100]	; (80012b8 <MX_ADC1_Init+0x78>)
 8001254:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001256:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <MX_ADC1_Init+0x74>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800125c:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <MX_ADC1_Init+0x74>)
 800125e:	2200      	movs	r2, #0
 8001260:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <MX_ADC1_Init+0x74>)
 8001264:	2200      	movs	r2, #0
 8001266:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <MX_ADC1_Init+0x74>)
 800126a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800126e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001270:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <MX_ADC1_Init+0x74>)
 8001272:	2200      	movs	r2, #0
 8001274:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001276:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <MX_ADC1_Init+0x74>)
 8001278:	2201      	movs	r2, #1
 800127a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800127c:	480d      	ldr	r0, [pc, #52]	; (80012b4 <MX_ADC1_Init+0x74>)
 800127e:	f001 ff5d 	bl	800313c <HAL_ADC_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001288:	f001 fa88 	bl	800279c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800128c:	2309      	movs	r3, #9
 800128e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001290:	2301      	movs	r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	4619      	mov	r1, r3
 800129c:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_ADC1_Init+0x74>)
 800129e:	f002 f9e5 	bl	800366c <HAL_ADC_ConfigChannel>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80012a8:	f001 fa78 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012ac:	bf00      	nop
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	2000022c 	.word	0x2000022c
 80012b8:	40012400 	.word	0x40012400

080012bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0310 	add.w	r3, r7, #16
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a14      	ldr	r2, [pc, #80]	; (8001328 <HAL_ADC_MspInit+0x6c>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d121      	bne.n	8001320 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012dc:	4b13      	ldr	r3, [pc, #76]	; (800132c <HAL_ADC_MspInit+0x70>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	4a12      	ldr	r2, [pc, #72]	; (800132c <HAL_ADC_MspInit+0x70>)
 80012e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012e6:	6193      	str	r3, [r2, #24]
 80012e8:	4b10      	ldr	r3, [pc, #64]	; (800132c <HAL_ADC_MspInit+0x70>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f4:	4b0d      	ldr	r3, [pc, #52]	; (800132c <HAL_ADC_MspInit+0x70>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	4a0c      	ldr	r2, [pc, #48]	; (800132c <HAL_ADC_MspInit+0x70>)
 80012fa:	f043 0308 	orr.w	r3, r3, #8
 80012fe:	6193      	str	r3, [r2, #24]
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <HAL_ADC_MspInit+0x70>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f003 0308 	and.w	r3, r3, #8
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800130c:	2302      	movs	r3, #2
 800130e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001310:	2303      	movs	r3, #3
 8001312:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	4619      	mov	r1, r3
 800131a:	4805      	ldr	r0, [pc, #20]	; (8001330 <HAL_ADC_MspInit+0x74>)
 800131c:	f002 fcfa 	bl	8003d14 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001320:	bf00      	nop
 8001322:	3720      	adds	r7, #32
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40012400 	.word	0x40012400
 800132c:	40021000 	.word	0x40021000
 8001330:	40010c00 	.word	0x40010c00

08001334 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133a:	f107 0310 	add.w	r3, r7, #16
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001348:	4b3f      	ldr	r3, [pc, #252]	; (8001448 <MX_GPIO_Init+0x114>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	4a3e      	ldr	r2, [pc, #248]	; (8001448 <MX_GPIO_Init+0x114>)
 800134e:	f043 0310 	orr.w	r3, r3, #16
 8001352:	6193      	str	r3, [r2, #24]
 8001354:	4b3c      	ldr	r3, [pc, #240]	; (8001448 <MX_GPIO_Init+0x114>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	f003 0310 	and.w	r3, r3, #16
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001360:	4b39      	ldr	r3, [pc, #228]	; (8001448 <MX_GPIO_Init+0x114>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	4a38      	ldr	r2, [pc, #224]	; (8001448 <MX_GPIO_Init+0x114>)
 8001366:	f043 0320 	orr.w	r3, r3, #32
 800136a:	6193      	str	r3, [r2, #24]
 800136c:	4b36      	ldr	r3, [pc, #216]	; (8001448 <MX_GPIO_Init+0x114>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	f003 0320 	and.w	r3, r3, #32
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001378:	4b33      	ldr	r3, [pc, #204]	; (8001448 <MX_GPIO_Init+0x114>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	4a32      	ldr	r2, [pc, #200]	; (8001448 <MX_GPIO_Init+0x114>)
 800137e:	f043 0304 	orr.w	r3, r3, #4
 8001382:	6193      	str	r3, [r2, #24]
 8001384:	4b30      	ldr	r3, [pc, #192]	; (8001448 <MX_GPIO_Init+0x114>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001390:	4b2d      	ldr	r3, [pc, #180]	; (8001448 <MX_GPIO_Init+0x114>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4a2c      	ldr	r2, [pc, #176]	; (8001448 <MX_GPIO_Init+0x114>)
 8001396:	f043 0308 	orr.w	r3, r3, #8
 800139a:	6193      	str	r3, [r2, #24]
 800139c:	4b2a      	ldr	r3, [pc, #168]	; (8001448 <MX_GPIO_Init+0x114>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f003 0308 	and.w	r3, r3, #8
 80013a4:	603b      	str	r3, [r7, #0]
 80013a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_GPIO_Port, LD_Pin, GPIO_PIN_SET);
 80013a8:	2201      	movs	r2, #1
 80013aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ae:	4827      	ldr	r0, [pc, #156]	; (800144c <MX_GPIO_Init+0x118>)
 80013b0:	f002 fe4b 	bl	800404a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSOR1_Pin|SENSOR2_Pin|SENSOR3_Pin|SENSOR4_Pin
 80013b4:	2200      	movs	r2, #0
 80013b6:	21ff      	movs	r1, #255	; 0xff
 80013b8:	4825      	ldr	r0, [pc, #148]	; (8001450 <MX_GPIO_Init+0x11c>)
 80013ba:	f002 fe46 	bl	800404a <HAL_GPIO_WritePin>
                          |SENSOR5_Pin|SENSOR6_Pin|SENSOR7_Pin|SENSOR8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDON_Pin|BIN1L_Pin|BIN1R_Pin|AIN2L_Pin
 80013be:	2200      	movs	r2, #0
 80013c0:	f24c 0171 	movw	r1, #49265	; 0xc071
 80013c4:	4823      	ldr	r0, [pc, #140]	; (8001454 <MX_GPIO_Init+0x120>)
 80013c6:	f002 fe40 	bl	800404a <HAL_GPIO_WritePin>
                          |AIN1R_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_Pin;
 80013ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2302      	movs	r3, #2
 80013da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD_GPIO_Port, &GPIO_InitStruct);
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	4619      	mov	r1, r3
 80013e2:	481a      	ldr	r0, [pc, #104]	; (800144c <MX_GPIO_Init+0x118>)
 80013e4:	f002 fc96 	bl	8003d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR1_Pin|SENSOR2_Pin|SENSOR3_Pin|SENSOR4_Pin
 80013e8:	23ff      	movs	r3, #255	; 0xff
 80013ea:	613b      	str	r3, [r7, #16]
                          |SENSOR5_Pin|SENSOR6_Pin|SENSOR7_Pin|SENSOR8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013f4:	2303      	movs	r3, #3
 80013f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	f107 0310 	add.w	r3, r7, #16
 80013fc:	4619      	mov	r1, r3
 80013fe:	4814      	ldr	r0, [pc, #80]	; (8001450 <MX_GPIO_Init+0x11c>)
 8001400:	f002 fc88 	bl	8003d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LEDON_Pin|BIN1L_Pin|BIN1R_Pin|AIN2L_Pin
 8001404:	f24c 0331 	movw	r3, #49201	; 0xc031
 8001408:	613b      	str	r3, [r7, #16]
                          |AIN1R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140a:	2301      	movs	r3, #1
 800140c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001412:	2303      	movs	r3, #3
 8001414:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001416:	f107 0310 	add.w	r3, r7, #16
 800141a:	4619      	mov	r1, r3
 800141c:	480d      	ldr	r0, [pc, #52]	; (8001454 <MX_GPIO_Init+0x120>)
 800141e:	f002 fc79 	bl	8003d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001422:	2340      	movs	r3, #64	; 0x40
 8001424:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001426:	2301      	movs	r3, #1
 8001428:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800142e:	2301      	movs	r3, #1
 8001430:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001432:	f107 0310 	add.w	r3, r7, #16
 8001436:	4619      	mov	r1, r3
 8001438:	4806      	ldr	r0, [pc, #24]	; (8001454 <MX_GPIO_Init+0x120>)
 800143a:	f002 fc6b 	bl	8003d14 <HAL_GPIO_Init>

}
 800143e:	bf00      	nop
 8001440:	3720      	adds	r7, #32
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40021000 	.word	0x40021000
 800144c:	40011000 	.word	0x40011000
 8001450:	40010800 	.word	0x40010800
 8001454:	40010c00 	.word	0x40010c00

08001458 <Mode_Change>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char Mode_Change(int number)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	char ret;
	switch(number)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	2b0c      	cmp	r3, #12
 8001466:	d844      	bhi.n	80014f2 <Mode_Change+0x9a>
 8001468:	a201      	add	r2, pc, #4	; (adr r2, 8001470 <Mode_Change+0x18>)
 800146a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800146e:	bf00      	nop
 8001470:	080014a5 	.word	0x080014a5
 8001474:	080014ab 	.word	0x080014ab
 8001478:	080014b1 	.word	0x080014b1
 800147c:	080014b7 	.word	0x080014b7
 8001480:	080014bd 	.word	0x080014bd
 8001484:	080014c3 	.word	0x080014c3
 8001488:	080014c9 	.word	0x080014c9
 800148c:	080014cf 	.word	0x080014cf
 8001490:	080014d5 	.word	0x080014d5
 8001494:	080014db 	.word	0x080014db
 8001498:	080014e1 	.word	0x080014e1
 800149c:	080014e7 	.word	0x080014e7
 80014a0:	080014ed 	.word	0x080014ed
	{
	case 1:
		ret =  'a';
 80014a4:	2361      	movs	r3, #97	; 0x61
 80014a6:	73fb      	strb	r3, [r7, #15]
		break;
 80014a8:	e023      	b.n	80014f2 <Mode_Change+0x9a>
	case 2:
		ret = 'd';
 80014aa:	2364      	movs	r3, #100	; 0x64
 80014ac:	73fb      	strb	r3, [r7, #15]
		break;
 80014ae:	e020      	b.n	80014f2 <Mode_Change+0x9a>
	case 3:
		ret ='b';
 80014b0:	2362      	movs	r3, #98	; 0x62
 80014b2:	73fb      	strb	r3, [r7, #15]
		break;
 80014b4:	e01d      	b.n	80014f2 <Mode_Change+0x9a>
	case 4:
		ret ='e';
 80014b6:	2365      	movs	r3, #101	; 0x65
 80014b8:	73fb      	strb	r3, [r7, #15]
		break;
 80014ba:	e01a      	b.n	80014f2 <Mode_Change+0x9a>
	case 5:
		ret = 'c';
 80014bc:	2363      	movs	r3, #99	; 0x63
 80014be:	73fb      	strb	r3, [r7, #15]
		break;
 80014c0:	e017      	b.n	80014f2 <Mode_Change+0x9a>
	case 6:
		ret = 'f';
 80014c2:	2366      	movs	r3, #102	; 0x66
 80014c4:	73fb      	strb	r3, [r7, #15]
		break;
 80014c6:	e014      	b.n	80014f2 <Mode_Change+0x9a>
	case 7:
		ret ='i';
 80014c8:	2369      	movs	r3, #105	; 0x69
 80014ca:	73fb      	strb	r3, [r7, #15]
		break;
 80014cc:	e011      	b.n	80014f2 <Mode_Change+0x9a>
	case 8:
		ret = 'j';
 80014ce:	236a      	movs	r3, #106	; 0x6a
 80014d0:	73fb      	strb	r3, [r7, #15]
		break;
 80014d2:	e00e      	b.n	80014f2 <Mode_Change+0x9a>
	case 9:
		ret = 'k';
 80014d4:	236b      	movs	r3, #107	; 0x6b
 80014d6:	73fb      	strb	r3, [r7, #15]
		break;
 80014d8:	e00b      	b.n	80014f2 <Mode_Change+0x9a>
	case 10:
		ret ='l';
 80014da:	236c      	movs	r3, #108	; 0x6c
 80014dc:	73fb      	strb	r3, [r7, #15]
		break;
 80014de:	e008      	b.n	80014f2 <Mode_Change+0x9a>
	case 11:
		ret = 'm';
 80014e0:	236d      	movs	r3, #109	; 0x6d
 80014e2:	73fb      	strb	r3, [r7, #15]
		break;
 80014e4:	e005      	b.n	80014f2 <Mode_Change+0x9a>
	case 12:
		ret = 'n';
 80014e6:	236e      	movs	r3, #110	; 0x6e
 80014e8:	73fb      	strb	r3, [r7, #15]
		break;
 80014ea:	e002      	b.n	80014f2 <Mode_Change+0x9a>
	case 13:
		ret ='h';
 80014ec:	2368      	movs	r3, #104	; 0x68
 80014ee:	73fb      	strb	r3, [r7, #15]
		break;
 80014f0:	bf00      	nop
	}
	return ret;
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop

08001500 <Battery_ADC_measurement>:
void Battery_ADC_measurement(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	/*Start ADC*/
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001504:	2201      	movs	r2, #1
 8001506:	2102      	movs	r1, #2
 8001508:	4827      	ldr	r0, [pc, #156]	; (80015a8 <Battery_ADC_measurement+0xa8>)
 800150a:	f002 fd9e 	bl	800404a <HAL_GPIO_WritePin>
	/*Get ADC value*/
	HAL_ADC_Start(&hadc1);
 800150e:	4827      	ldr	r0, [pc, #156]	; (80015ac <Battery_ADC_measurement+0xac>)
 8001510:	f001 feec 	bl	80032ec <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
 8001514:	f04f 31ff 	mov.w	r1, #4294967295
 8001518:	4824      	ldr	r0, [pc, #144]	; (80015ac <Battery_ADC_measurement+0xac>)
 800151a:	f001 ff95 	bl	8003448 <HAL_ADC_PollForConversion>
	raw_battery = HAL_ADC_GetValue(&hadc1);
 800151e:	4823      	ldr	r0, [pc, #140]	; (80015ac <Battery_ADC_measurement+0xac>)
 8001520:	f002 f898 	bl	8003654 <HAL_ADC_GetValue>
 8001524:	4603      	mov	r3, r0
 8001526:	b29a      	uxth	r2, r3
 8001528:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <Battery_ADC_measurement+0xb0>)
 800152a:	801a      	strh	r2, [r3, #0]
	/*Stop ADC*/
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	2102      	movs	r1, #2
 8001530:	481d      	ldr	r0, [pc, #116]	; (80015a8 <Battery_ADC_measurement+0xa8>)
 8001532:	f002 fd8a 	bl	800404a <HAL_GPIO_WritePin>
	//SN_UART_Send(&huart3,"Battery_raw = %hu \r\n ",raw_battery);

	/*Percentages from raw 12bit measurement*/
	if(raw_battery != 0)
 8001536:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <Battery_ADC_measurement+0xb0>)
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d01a      	beq.n	8001574 <Battery_ADC_measurement+0x74>
	{
		if(raw_battery > max_battery)
 800153e:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <Battery_ADC_measurement+0xb0>)
 8001540:	881a      	ldrh	r2, [r3, #0]
 8001542:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <Battery_ADC_measurement+0xb4>)
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d903      	bls.n	8001552 <Battery_ADC_measurement+0x52>
		{
			raw_battery = max_battery;
 800154a:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <Battery_ADC_measurement+0xb4>)
 800154c:	881a      	ldrh	r2, [r3, #0]
 800154e:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <Battery_ADC_measurement+0xb0>)
 8001550:	801a      	strh	r2, [r3, #0]
		}
		battery_procentage_raw = (raw_battery * 100) / max_battery;
 8001552:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <Battery_ADC_measurement+0xb0>)
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	461a      	mov	r2, r3
 8001558:	2364      	movs	r3, #100	; 0x64
 800155a:	fb02 f303 	mul.w	r3, r2, r3
 800155e:	4a15      	ldr	r2, [pc, #84]	; (80015b4 <Battery_ADC_measurement+0xb4>)
 8001560:	8812      	ldrh	r2, [r2, #0]
 8001562:	fb93 f3f2 	sdiv	r3, r3, r2
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fb48 	bl	8000bfc <__aeabi_i2f>
 800156c:	4603      	mov	r3, r0
 800156e:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <Battery_ADC_measurement+0xb8>)
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	e003      	b.n	800157c <Battery_ADC_measurement+0x7c>
	}
	else
	{
		battery_procentage_raw = 0;
 8001574:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <Battery_ADC_measurement+0xb8>)
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
	}
	/*Motor speed*/
	speedlevel = ((100 - battery_procentage_raw) + 100) / 100;
 800157c:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <Battery_ADC_measurement+0xb8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4619      	mov	r1, r3
 8001582:	480e      	ldr	r0, [pc, #56]	; (80015bc <Battery_ADC_measurement+0xbc>)
 8001584:	f7ff fa84 	bl	8000a90 <__aeabi_fsub>
 8001588:	4603      	mov	r3, r0
 800158a:	490c      	ldr	r1, [pc, #48]	; (80015bc <Battery_ADC_measurement+0xbc>)
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fa81 	bl	8000a94 <__addsf3>
 8001592:	4603      	mov	r3, r0
 8001594:	4909      	ldr	r1, [pc, #36]	; (80015bc <Battery_ADC_measurement+0xbc>)
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fc38 	bl	8000e0c <__aeabi_fdiv>
 800159c:	4603      	mov	r3, r0
 800159e:	461a      	mov	r2, r3
 80015a0:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <Battery_ADC_measurement+0xc0>)
 80015a2:	601a      	str	r2, [r3, #0]
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40010c00 	.word	0x40010c00
 80015ac:	2000022c 	.word	0x2000022c
 80015b0:	200002d0 	.word	0x200002d0
 80015b4:	20000030 	.word	0x20000030
 80015b8:	200002d4 	.word	0x200002d4
 80015bc:	42c80000 	.word	0x42c80000
 80015c0:	20000008 	.word	0x20000008

080015c4 <delay_us>:
void delay_us (uint16_t us)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <delay_us+0x2c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2200      	movs	r2, #0
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 80015d6:	bf00      	nop
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <delay_us+0x2c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015de:	88fb      	ldrh	r3, [r7, #6]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d3f9      	bcc.n	80015d8 <delay_us+0x14>
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr
 80015f0:	2000033c 	.word	0x2000033c

080015f4 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0308 	add.w	r3, r7, #8
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800160e:	887b      	ldrh	r3, [r7, #2]
 8001610:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001612:	2301      	movs	r3, #1
 8001614:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2302      	movs	r3, #2
 8001618:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800161a:	f107 0308 	add.w	r3, r7, #8
 800161e:	4619      	mov	r1, r3
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f002 fb77 	bl	8003d14 <HAL_GPIO_Init>
}
 8001626:	bf00      	nop
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	460b      	mov	r3, r1
 8001638:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163a:	f107 0308 	add.w	r3, r7, #8
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001648:	887b      	ldrh	r3, [r7, #2]
 800164a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800164c:	2300      	movs	r3, #0
 800164e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001650:	2301      	movs	r3, #1
 8001652:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001654:	f107 0308 	add.w	r3, r7, #8
 8001658:	4619      	mov	r1, r3
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f002 fb5a 	bl	8003d14 <HAL_GPIO_Init>
}
 8001660:	bf00      	nop
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <motor_control>:


void motor_control (double pos_right, double pos_left)
{
 8001668:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800166c:	b084      	sub	sp, #16
 800166e:	af00      	add	r7, sp, #0
 8001670:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001674:	e9c7 2300 	strd	r2, r3, [r7]
	if (pos_left < 0 )
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	f04f 0300 	mov.w	r3, #0
 8001680:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001684:	f7ff f99a 	bl	80009bc <__aeabi_dcmplt>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d02f      	beq.n	80016ee <motor_control+0x86>
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_2, (int)((ARR*pos_left*-1)*speedlevel));
 800168e:	4b64      	ldr	r3, [pc, #400]	; (8001820 <motor_control+0x1b8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe feb6 	bl	8000404 <__aeabi_i2d>
 8001698:	e9d7 2300 	ldrd	r2, r3, [r7]
 800169c:	f7fe ff1c 	bl	80004d8 <__aeabi_dmul>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4690      	mov	r8, r2
 80016a6:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80016aa:	4b5e      	ldr	r3, [pc, #376]	; (8001824 <motor_control+0x1bc>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe feba 	bl	8000428 <__aeabi_f2d>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4640      	mov	r0, r8
 80016ba:	4649      	mov	r1, r9
 80016bc:	f7fe ff0c 	bl	80004d8 <__aeabi_dmul>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
 80016c8:	f7ff f9b6 	bl	8000a38 <__aeabi_d2iz>
 80016cc:	4602      	mov	r2, r0
 80016ce:	4b56      	ldr	r3, [pc, #344]	; (8001828 <motor_control+0x1c0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80016d4:	2201      	movs	r2, #1
 80016d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016da:	4854      	ldr	r0, [pc, #336]	; (800182c <motor_control+0x1c4>)
 80016dc:	f002 fcb5 	bl	800404a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016e6:	4851      	ldr	r0, [pc, #324]	; (800182c <motor_control+0x1c4>)
 80016e8:	f002 fcaf 	bl	800404a <HAL_GPIO_WritePin>
 80016ec:	e02d      	b.n	800174a <motor_control+0xe2>
	}
	else
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_2, (int)((ARR*pos_left)*speedlevel));
 80016ee:	4b4c      	ldr	r3, [pc, #304]	; (8001820 <motor_control+0x1b8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe fe86 	bl	8000404 <__aeabi_i2d>
 80016f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016fc:	f7fe feec 	bl	80004d8 <__aeabi_dmul>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4690      	mov	r8, r2
 8001706:	4699      	mov	r9, r3
 8001708:	4b46      	ldr	r3, [pc, #280]	; (8001824 <motor_control+0x1bc>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe fe8b 	bl	8000428 <__aeabi_f2d>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4640      	mov	r0, r8
 8001718:	4649      	mov	r1, r9
 800171a:	f7fe fedd 	bl	80004d8 <__aeabi_dmul>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	f7ff f987 	bl	8000a38 <__aeabi_d2iz>
 800172a:	4602      	mov	r2, r0
 800172c:	4b3e      	ldr	r3, [pc, #248]	; (8001828 <motor_control+0x1c0>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001732:	2200      	movs	r2, #0
 8001734:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001738:	483c      	ldr	r0, [pc, #240]	; (800182c <motor_control+0x1c4>)
 800173a:	f002 fc86 	bl	800404a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800173e:	2201      	movs	r2, #1
 8001740:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001744:	4839      	ldr	r0, [pc, #228]	; (800182c <motor_control+0x1c4>)
 8001746:	f002 fc80 	bl	800404a <HAL_GPIO_WritePin>
	}
	if (pos_right < 0 )
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001756:	f7ff f931 	bl	80009bc <__aeabi_dcmplt>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d02d      	beq.n	80017bc <motor_control+0x154>
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_4, (int)((ARR*pos_right*-1)*speedlevel));
 8001760:	4b2f      	ldr	r3, [pc, #188]	; (8001820 <motor_control+0x1b8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe fe4d 	bl	8000404 <__aeabi_i2d>
 800176a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800176e:	f7fe feb3 	bl	80004d8 <__aeabi_dmul>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4614      	mov	r4, r2
 8001778:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800177c:	4b29      	ldr	r3, [pc, #164]	; (8001824 <motor_control+0x1bc>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fe51 	bl	8000428 <__aeabi_f2d>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4620      	mov	r0, r4
 800178c:	4629      	mov	r1, r5
 800178e:	f7fe fea3 	bl	80004d8 <__aeabi_dmul>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	f7ff f94d 	bl	8000a38 <__aeabi_d2iz>
 800179e:	4602      	mov	r2, r0
 80017a0:	4b21      	ldr	r3, [pc, #132]	; (8001828 <motor_control+0x1c0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80017a6:	2201      	movs	r2, #1
 80017a8:	2120      	movs	r1, #32
 80017aa:	4820      	ldr	r0, [pc, #128]	; (800182c <motor_control+0x1c4>)
 80017ac:	f002 fc4d 	bl	800404a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	2110      	movs	r1, #16
 80017b4:	481d      	ldr	r0, [pc, #116]	; (800182c <motor_control+0x1c4>)
 80017b6:	f002 fc48 	bl	800404a <HAL_GPIO_WritePin>
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_4, (int)((ARR*pos_right)*speedlevel));
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
	}
}
 80017ba:	e02b      	b.n	8001814 <motor_control+0x1ac>
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_4, (int)((ARR*pos_right)*speedlevel));
 80017bc:	4b18      	ldr	r3, [pc, #96]	; (8001820 <motor_control+0x1b8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fe1f 	bl	8000404 <__aeabi_i2d>
 80017c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017ca:	f7fe fe85 	bl	80004d8 <__aeabi_dmul>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4614      	mov	r4, r2
 80017d4:	461d      	mov	r5, r3
 80017d6:	4b13      	ldr	r3, [pc, #76]	; (8001824 <motor_control+0x1bc>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe fe24 	bl	8000428 <__aeabi_f2d>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4620      	mov	r0, r4
 80017e6:	4629      	mov	r1, r5
 80017e8:	f7fe fe76 	bl	80004d8 <__aeabi_dmul>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f7ff f920 	bl	8000a38 <__aeabi_d2iz>
 80017f8:	4602      	mov	r2, r0
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <motor_control+0x1c0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001800:	2200      	movs	r2, #0
 8001802:	2120      	movs	r1, #32
 8001804:	4809      	ldr	r0, [pc, #36]	; (800182c <motor_control+0x1c4>)
 8001806:	f002 fc20 	bl	800404a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800180a:	2201      	movs	r2, #1
 800180c:	2110      	movs	r1, #16
 800180e:	4807      	ldr	r0, [pc, #28]	; (800182c <motor_control+0x1c4>)
 8001810:	f002 fc1b 	bl	800404a <HAL_GPIO_WritePin>
}
 8001814:	bf00      	nop
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800181e:	bf00      	nop
 8001820:	2000001c 	.word	0x2000001c
 8001824:	20000008 	.word	0x20000008
 8001828:	200003cc 	.word	0x200003cc
 800182c:	40010c00 	.word	0x40010c00

08001830 <sharp_turn>:


void sharp_turn () {
 8001830:	b5b0      	push	{r4, r5, r7, lr}
 8001832:	af00      	add	r7, sp, #0

	if (last_idle < 25)
 8001834:	4b2c      	ldr	r3, [pc, #176]	; (80018e8 <sharp_turn+0xb8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b18      	cmp	r3, #24
 800183a:	dc29      	bgt.n	8001890 <sharp_turn+0x60>
	{
		if (last_end == 1)
 800183c:	4b2b      	ldr	r3, [pc, #172]	; (80018ec <sharp_turn+0xbc>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d112      	bne.n	800186a <sharp_turn+0x3a>
			motor_control(Sharp_bend_speed_right, Sharp_bend_speed_left);
 8001844:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <sharp_turn+0xc0>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fddb 	bl	8000404 <__aeabi_i2d>
 800184e:	4604      	mov	r4, r0
 8001850:	460d      	mov	r5, r1
 8001852:	4b28      	ldr	r3, [pc, #160]	; (80018f4 <sharp_turn+0xc4>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fdd4 	bl	8000404 <__aeabi_i2d>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4620      	mov	r0, r4
 8001862:	4629      	mov	r1, r5
 8001864:	f7ff ff00 	bl	8001668 <motor_control>
		if (last_end == 1)
			motor_control(Bend_speed_right, Bend_speed_left);
		else
			motor_control(Bend_speed_left, Bend_speed_right);
	}
}
 8001868:	e03b      	b.n	80018e2 <sharp_turn+0xb2>
			motor_control(Sharp_bend_speed_left, Sharp_bend_speed_right);
 800186a:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <sharp_turn+0xc4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fdc8 	bl	8000404 <__aeabi_i2d>
 8001874:	4604      	mov	r4, r0
 8001876:	460d      	mov	r5, r1
 8001878:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <sharp_turn+0xc0>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fdc1 	bl	8000404 <__aeabi_i2d>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4620      	mov	r0, r4
 8001888:	4629      	mov	r1, r5
 800188a:	f7ff feed 	bl	8001668 <motor_control>
}
 800188e:	e028      	b.n	80018e2 <sharp_turn+0xb2>
		if (last_end == 1)
 8001890:	4b16      	ldr	r3, [pc, #88]	; (80018ec <sharp_turn+0xbc>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d112      	bne.n	80018be <sharp_turn+0x8e>
			motor_control(Bend_speed_right, Bend_speed_left);
 8001898:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <sharp_turn+0xc8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe fdb1 	bl	8000404 <__aeabi_i2d>
 80018a2:	4604      	mov	r4, r0
 80018a4:	460d      	mov	r5, r1
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <sharp_turn+0xcc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe fdaa 	bl	8000404 <__aeabi_i2d>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4620      	mov	r0, r4
 80018b6:	4629      	mov	r1, r5
 80018b8:	f7ff fed6 	bl	8001668 <motor_control>
}
 80018bc:	e011      	b.n	80018e2 <sharp_turn+0xb2>
			motor_control(Bend_speed_left, Bend_speed_right);
 80018be:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <sharp_turn+0xcc>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7fe fd9e 	bl	8000404 <__aeabi_i2d>
 80018c8:	4604      	mov	r4, r0
 80018ca:	460d      	mov	r5, r1
 80018cc:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <sharp_turn+0xc8>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fd97 	bl	8000404 <__aeabi_i2d>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4620      	mov	r0, r4
 80018dc:	4629      	mov	r1, r5
 80018de:	f7ff fec3 	bl	8001668 <motor_control>
}
 80018e2:	bf00      	nop
 80018e4:	bdb0      	pop	{r4, r5, r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200002ac 	.word	0x200002ac
 80018ec:	200002a8 	.word	0x200002a8
 80018f0:	20000020 	.word	0x20000020
 80018f4:	20000024 	.word	0x20000024
 80018f8:	20000028 	.word	0x20000028
 80018fc:	2000002c 	.word	0x2000002c

08001900 <QTR8_read>:
int QTR8_read ()
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDON_GPIO_Port, LEDON_Pin, 1);
 8001906:	2201      	movs	r2, #1
 8001908:	2101      	movs	r1, #1
 800190a:	48a2      	ldr	r0, [pc, #648]	; (8001b94 <QTR8_read+0x294>)
 800190c:	f002 fb9d 	bl	800404a <HAL_GPIO_WritePin>

	Set_Pin_Output(SENSOR1_GPIO_Port, SENSOR1_Pin);
 8001910:	2101      	movs	r1, #1
 8001912:	48a1      	ldr	r0, [pc, #644]	; (8001b98 <QTR8_read+0x298>)
 8001914:	f7ff fe6e 	bl	80015f4 <Set_Pin_Output>
	Set_Pin_Output(SENSOR2_GPIO_Port, SENSOR2_Pin);
 8001918:	2102      	movs	r1, #2
 800191a:	489f      	ldr	r0, [pc, #636]	; (8001b98 <QTR8_read+0x298>)
 800191c:	f7ff fe6a 	bl	80015f4 <Set_Pin_Output>
	Set_Pin_Output(SENSOR3_GPIO_Port, SENSOR3_Pin);
 8001920:	2104      	movs	r1, #4
 8001922:	489d      	ldr	r0, [pc, #628]	; (8001b98 <QTR8_read+0x298>)
 8001924:	f7ff fe66 	bl	80015f4 <Set_Pin_Output>
	Set_Pin_Output(SENSOR4_GPIO_Port, SENSOR4_Pin);
 8001928:	2108      	movs	r1, #8
 800192a:	489b      	ldr	r0, [pc, #620]	; (8001b98 <QTR8_read+0x298>)
 800192c:	f7ff fe62 	bl	80015f4 <Set_Pin_Output>
	Set_Pin_Output(SENSOR5_GPIO_Port, SENSOR5_Pin);
 8001930:	2110      	movs	r1, #16
 8001932:	4899      	ldr	r0, [pc, #612]	; (8001b98 <QTR8_read+0x298>)
 8001934:	f7ff fe5e 	bl	80015f4 <Set_Pin_Output>
	Set_Pin_Output(SENSOR6_GPIO_Port, SENSOR6_Pin);
 8001938:	2120      	movs	r1, #32
 800193a:	4897      	ldr	r0, [pc, #604]	; (8001b98 <QTR8_read+0x298>)
 800193c:	f7ff fe5a 	bl	80015f4 <Set_Pin_Output>
	Set_Pin_Output(SENSOR7_GPIO_Port, SENSOR7_Pin);
 8001940:	2140      	movs	r1, #64	; 0x40
 8001942:	4895      	ldr	r0, [pc, #596]	; (8001b98 <QTR8_read+0x298>)
 8001944:	f7ff fe56 	bl	80015f4 <Set_Pin_Output>
	Set_Pin_Output(SENSOR8_GPIO_Port, SENSOR8_Pin);
 8001948:	2180      	movs	r1, #128	; 0x80
 800194a:	4893      	ldr	r0, [pc, #588]	; (8001b98 <QTR8_read+0x298>)
 800194c:	f7ff fe52 	bl	80015f4 <Set_Pin_Output>

	HAL_GPIO_WritePin (SENSOR1_GPIO_Port, SENSOR1_Pin, 1);
 8001950:	2201      	movs	r2, #1
 8001952:	2101      	movs	r1, #1
 8001954:	4890      	ldr	r0, [pc, #576]	; (8001b98 <QTR8_read+0x298>)
 8001956:	f002 fb78 	bl	800404a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR2_GPIO_Port, SENSOR2_Pin, 1);
 800195a:	2201      	movs	r2, #1
 800195c:	2102      	movs	r1, #2
 800195e:	488e      	ldr	r0, [pc, #568]	; (8001b98 <QTR8_read+0x298>)
 8001960:	f002 fb73 	bl	800404a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR3_GPIO_Port, SENSOR3_Pin, 1);
 8001964:	2201      	movs	r2, #1
 8001966:	2104      	movs	r1, #4
 8001968:	488b      	ldr	r0, [pc, #556]	; (8001b98 <QTR8_read+0x298>)
 800196a:	f002 fb6e 	bl	800404a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR4_GPIO_Port, SENSOR4_Pin, 1);
 800196e:	2201      	movs	r2, #1
 8001970:	2108      	movs	r1, #8
 8001972:	4889      	ldr	r0, [pc, #548]	; (8001b98 <QTR8_read+0x298>)
 8001974:	f002 fb69 	bl	800404a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR5_GPIO_Port, SENSOR5_Pin, 1);
 8001978:	2201      	movs	r2, #1
 800197a:	2110      	movs	r1, #16
 800197c:	4886      	ldr	r0, [pc, #536]	; (8001b98 <QTR8_read+0x298>)
 800197e:	f002 fb64 	bl	800404a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR6_GPIO_Port, SENSOR6_Pin, 1);
 8001982:	2201      	movs	r2, #1
 8001984:	2120      	movs	r1, #32
 8001986:	4884      	ldr	r0, [pc, #528]	; (8001b98 <QTR8_read+0x298>)
 8001988:	f002 fb5f 	bl	800404a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR7_GPIO_Port, SENSOR7_Pin, 1);
 800198c:	2201      	movs	r2, #1
 800198e:	2140      	movs	r1, #64	; 0x40
 8001990:	4881      	ldr	r0, [pc, #516]	; (8001b98 <QTR8_read+0x298>)
 8001992:	f002 fb5a 	bl	800404a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR8_GPIO_Port, SENSOR8_Pin, 1);
 8001996:	2201      	movs	r2, #1
 8001998:	2180      	movs	r1, #128	; 0x80
 800199a:	487f      	ldr	r0, [pc, #508]	; (8001b98 <QTR8_read+0x298>)
 800199c:	f002 fb55 	bl	800404a <HAL_GPIO_WritePin>

	delay_us(10);
 80019a0:	200a      	movs	r0, #10
 80019a2:	f7ff fe0f 	bl	80015c4 <delay_us>

	Set_Pin_Input(SENSOR1_GPIO_Port, SENSOR1_Pin);
 80019a6:	2101      	movs	r1, #1
 80019a8:	487b      	ldr	r0, [pc, #492]	; (8001b98 <QTR8_read+0x298>)
 80019aa:	f7ff fe40 	bl	800162e <Set_Pin_Input>
	Set_Pin_Input(SENSOR2_GPIO_Port, SENSOR2_Pin);
 80019ae:	2102      	movs	r1, #2
 80019b0:	4879      	ldr	r0, [pc, #484]	; (8001b98 <QTR8_read+0x298>)
 80019b2:	f7ff fe3c 	bl	800162e <Set_Pin_Input>
	Set_Pin_Input(SENSOR3_GPIO_Port, SENSOR3_Pin);
 80019b6:	2104      	movs	r1, #4
 80019b8:	4877      	ldr	r0, [pc, #476]	; (8001b98 <QTR8_read+0x298>)
 80019ba:	f7ff fe38 	bl	800162e <Set_Pin_Input>
	Set_Pin_Input(SENSOR4_GPIO_Port, SENSOR4_Pin);
 80019be:	2108      	movs	r1, #8
 80019c0:	4875      	ldr	r0, [pc, #468]	; (8001b98 <QTR8_read+0x298>)
 80019c2:	f7ff fe34 	bl	800162e <Set_Pin_Input>
	Set_Pin_Input(SENSOR5_GPIO_Port, SENSOR5_Pin);
 80019c6:	2110      	movs	r1, #16
 80019c8:	4873      	ldr	r0, [pc, #460]	; (8001b98 <QTR8_read+0x298>)
 80019ca:	f7ff fe30 	bl	800162e <Set_Pin_Input>
	Set_Pin_Input(SENSOR6_GPIO_Port, SENSOR6_Pin);
 80019ce:	2120      	movs	r1, #32
 80019d0:	4871      	ldr	r0, [pc, #452]	; (8001b98 <QTR8_read+0x298>)
 80019d2:	f7ff fe2c 	bl	800162e <Set_Pin_Input>
	Set_Pin_Input(SENSOR7_GPIO_Port, SENSOR7_Pin);
 80019d6:	2140      	movs	r1, #64	; 0x40
 80019d8:	486f      	ldr	r0, [pc, #444]	; (8001b98 <QTR8_read+0x298>)
 80019da:	f7ff fe28 	bl	800162e <Set_Pin_Input>
	Set_Pin_Input(SENSOR8_GPIO_Port, SENSOR8_Pin);
 80019de:	2180      	movs	r1, #128	; 0x80
 80019e0:	486d      	ldr	r0, [pc, #436]	; (8001b98 <QTR8_read+0x298>)
 80019e2:	f7ff fe24 	bl	800162e <Set_Pin_Input>

	// Threshold
	 delay_us(4500);
 80019e6:	f241 1094 	movw	r0, #4500	; 0x1194
 80019ea:	f7ff fdeb 	bl	80015c4 <delay_us>

	sensor_read = 0x00000000;
 80019ee:	4b6b      	ldr	r3, [pc, #428]	; (8001b9c <QTR8_read+0x29c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
	int pos = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	607b      	str	r3, [r7, #4]
  int active = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	603b      	str	r3, [r7, #0]

	if (HAL_GPIO_ReadPin(SENSOR1_GPIO_Port, SENSOR1_Pin)) {
 80019fc:	2101      	movs	r1, #1
 80019fe:	4866      	ldr	r0, [pc, #408]	; (8001b98 <QTR8_read+0x298>)
 8001a00:	f002 fb0c 	bl	800401c <HAL_GPIO_ReadPin>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00f      	beq.n	8001a2a <QTR8_read+0x12a>
		sensor_read |= 0x00000001;
 8001a0a:	4b64      	ldr	r3, [pc, #400]	; (8001b9c <QTR8_read+0x29c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	4a62      	ldr	r2, [pc, #392]	; (8001b9c <QTR8_read+0x29c>)
 8001a14:	6013      	str	r3, [r2, #0]
		pos += 1000;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001a1c:	607b      	str	r3, [r7, #4]
    active++;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	3301      	adds	r3, #1
 8001a22:	603b      	str	r3, [r7, #0]
		last_end = 1;
 8001a24:	4b5e      	ldr	r3, [pc, #376]	; (8001ba0 <QTR8_read+0x2a0>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	601a      	str	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(SENSOR2_GPIO_Port, SENSOR2_Pin)) {
 8001a2a:	2102      	movs	r1, #2
 8001a2c:	485a      	ldr	r0, [pc, #360]	; (8001b98 <QTR8_read+0x298>)
 8001a2e:	f002 faf5 	bl	800401c <HAL_GPIO_ReadPin>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00c      	beq.n	8001a52 <QTR8_read+0x152>
		sensor_read |= 0x00000010;
 8001a38:	4b58      	ldr	r3, [pc, #352]	; (8001b9c <QTR8_read+0x29c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f043 0310 	orr.w	r3, r3, #16
 8001a40:	4a56      	ldr	r2, [pc, #344]	; (8001b9c <QTR8_read+0x29c>)
 8001a42:	6013      	str	r3, [r2, #0]
		pos += 2000;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001a4a:	607b      	str	r3, [r7, #4]
    active++;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR3_GPIO_Port, SENSOR3_Pin)) {
 8001a52:	2104      	movs	r1, #4
 8001a54:	4850      	ldr	r0, [pc, #320]	; (8001b98 <QTR8_read+0x298>)
 8001a56:	f002 fae1 	bl	800401c <HAL_GPIO_ReadPin>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00c      	beq.n	8001a7a <QTR8_read+0x17a>
		sensor_read |= 0x00000100;
 8001a60:	4b4e      	ldr	r3, [pc, #312]	; (8001b9c <QTR8_read+0x29c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a68:	4a4c      	ldr	r2, [pc, #304]	; (8001b9c <QTR8_read+0x29c>)
 8001a6a:	6013      	str	r3, [r2, #0]
		pos += 3000;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8001a72:	607b      	str	r3, [r7, #4]
    active++;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	3301      	adds	r3, #1
 8001a78:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR4_GPIO_Port, SENSOR4_Pin)) {
 8001a7a:	2108      	movs	r1, #8
 8001a7c:	4846      	ldr	r0, [pc, #280]	; (8001b98 <QTR8_read+0x298>)
 8001a7e:	f002 facd 	bl	800401c <HAL_GPIO_ReadPin>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00c      	beq.n	8001aa2 <QTR8_read+0x1a2>
		sensor_read |= 0x00001000;
 8001a88:	4b44      	ldr	r3, [pc, #272]	; (8001b9c <QTR8_read+0x29c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a90:	4a42      	ldr	r2, [pc, #264]	; (8001b9c <QTR8_read+0x29c>)
 8001a92:	6013      	str	r3, [r2, #0]
		pos += 4000;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8001a9a:	607b      	str	r3, [r7, #4]
    active++;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR5_GPIO_Port, SENSOR5_Pin)) {
 8001aa2:	2110      	movs	r1, #16
 8001aa4:	483c      	ldr	r0, [pc, #240]	; (8001b98 <QTR8_read+0x298>)
 8001aa6:	f002 fab9 	bl	800401c <HAL_GPIO_ReadPin>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d00d      	beq.n	8001acc <QTR8_read+0x1cc>
		sensor_read |= 0x00010000;
 8001ab0:	4b3a      	ldr	r3, [pc, #232]	; (8001b9c <QTR8_read+0x29c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab8:	4a38      	ldr	r2, [pc, #224]	; (8001b9c <QTR8_read+0x29c>)
 8001aba:	6013      	str	r3, [r2, #0]
		pos += 5000;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8001ac2:	3308      	adds	r3, #8
 8001ac4:	607b      	str	r3, [r7, #4]
    active++;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR6_GPIO_Port, SENSOR6_Pin)) {
 8001acc:	2120      	movs	r1, #32
 8001ace:	4832      	ldr	r0, [pc, #200]	; (8001b98 <QTR8_read+0x298>)
 8001ad0:	f002 faa4 	bl	800401c <HAL_GPIO_ReadPin>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00d      	beq.n	8001af6 <QTR8_read+0x1f6>
		sensor_read |= 0x00100000;
 8001ada:	4b30      	ldr	r3, [pc, #192]	; (8001b9c <QTR8_read+0x29c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ae2:	4a2e      	ldr	r2, [pc, #184]	; (8001b9c <QTR8_read+0x29c>)
 8001ae4:	6013      	str	r3, [r2, #0]
		pos += 6000;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8001aec:	3310      	adds	r3, #16
 8001aee:	607b      	str	r3, [r7, #4]
    active++;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	3301      	adds	r3, #1
 8001af4:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR7_GPIO_Port, SENSOR7_Pin)) {
 8001af6:	2140      	movs	r1, #64	; 0x40
 8001af8:	4827      	ldr	r0, [pc, #156]	; (8001b98 <QTR8_read+0x298>)
 8001afa:	f002 fa8f 	bl	800401c <HAL_GPIO_ReadPin>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00d      	beq.n	8001b20 <QTR8_read+0x220>
		sensor_read |= 0x01000000;
 8001b04:	4b25      	ldr	r3, [pc, #148]	; (8001b9c <QTR8_read+0x29c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b0c:	4a23      	ldr	r2, [pc, #140]	; (8001b9c <QTR8_read+0x29c>)
 8001b0e:	6013      	str	r3, [r2, #0]
		pos += 7000;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f503 53da 	add.w	r3, r3, #6976	; 0x1b40
 8001b16:	3318      	adds	r3, #24
 8001b18:	607b      	str	r3, [r7, #4]
    active++;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR8_GPIO_Port, SENSOR8_Pin)) {
 8001b20:	2180      	movs	r1, #128	; 0x80
 8001b22:	481d      	ldr	r0, [pc, #116]	; (8001b98 <QTR8_read+0x298>)
 8001b24:	f002 fa7a 	bl	800401c <HAL_GPIO_ReadPin>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00f      	beq.n	8001b4e <QTR8_read+0x24e>
		sensor_read |= 0x10000000;
 8001b2e:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <QTR8_read+0x29c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b36:	4a19      	ldr	r2, [pc, #100]	; (8001b9c <QTR8_read+0x29c>)
 8001b38:	6013      	str	r3, [r2, #0]
		pos += 8000;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8001b40:	607b      	str	r3, [r7, #4]
    active++;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	3301      	adds	r3, #1
 8001b46:	603b      	str	r3, [r7, #0]
		last_end = 0;
 8001b48:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <QTR8_read+0x2a0>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
  }

  HAL_GPIO_WritePin(LEDON_GPIO_Port, LEDON_Pin, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2101      	movs	r1, #1
 8001b52:	4810      	ldr	r0, [pc, #64]	; (8001b94 <QTR8_read+0x294>)
 8001b54:	f002 fa79 	bl	800404a <HAL_GPIO_WritePin>

  actives = active;
 8001b58:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <QTR8_read+0x2a4>)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	6013      	str	r3, [r2, #0]
	position = pos/active;
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b66:	4a10      	ldr	r2, [pc, #64]	; (8001ba8 <QTR8_read+0x2a8>)
 8001b68:	6013      	str	r3, [r2, #0]

	if (actives == 0)
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <QTR8_read+0x2a4>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d105      	bne.n	8001b7e <QTR8_read+0x27e>
		last_idle++;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <QTR8_read+0x2ac>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	3301      	adds	r3, #1
 8001b78:	4a0c      	ldr	r2, [pc, #48]	; (8001bac <QTR8_read+0x2ac>)
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	e002      	b.n	8001b84 <QTR8_read+0x284>
	else
		last_idle = 0;
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <QTR8_read+0x2ac>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]

	return pos/active;
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40010c00 	.word	0x40010c00
 8001b98:	40010800 	.word	0x40010800
 8001b9c:	2000025c 	.word	0x2000025c
 8001ba0:	200002a8 	.word	0x200002a8
 8001ba4:	200002b0 	.word	0x200002b0
 8001ba8:	20000260 	.word	0x20000260
 8001bac:	200002ac 	.word	0x200002ac

08001bb0 <forward_brake>:


void forward_brake(int pos_right, int pos_left)
{
 8001bb0:	b5b0      	push	{r4, r5, r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
	if (actives == 0)
 8001bba:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <forward_brake+0x3c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d102      	bne.n	8001bc8 <forward_brake+0x18>
		sharp_turn();
 8001bc2:	f7ff fe35 	bl	8001830 <sharp_turn>
	else
	  motor_control(pos_right, pos_left);
}
 8001bc6:	e00d      	b.n	8001be4 <forward_brake+0x34>
	  motor_control(pos_right, pos_left);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7fe fc1b 	bl	8000404 <__aeabi_i2d>
 8001bce:	4604      	mov	r4, r0
 8001bd0:	460d      	mov	r5, r1
 8001bd2:	6838      	ldr	r0, [r7, #0]
 8001bd4:	f7fe fc16 	bl	8000404 <__aeabi_i2d>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4620      	mov	r0, r4
 8001bde:	4629      	mov	r1, r5
 8001be0:	f7ff fd42 	bl	8001668 <motor_control>
}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bdb0      	pop	{r4, r5, r7, pc}
 8001bec:	200002b0 	.word	0x200002b0

08001bf0 <past_errors>:

void past_errors (int error)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  for (int i = 9; i > 0; i--)
 8001bf8:	2309      	movs	r3, #9
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	e00b      	b.n	8001c16 <past_errors+0x26>
      errors[i] = errors[i-1];
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	4a0a      	ldr	r2, [pc, #40]	; (8001c2c <past_errors+0x3c>)
 8001c04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c08:	4908      	ldr	r1, [pc, #32]	; (8001c2c <past_errors+0x3c>)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int i = 9; i > 0; i--)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	dcf0      	bgt.n	8001bfe <past_errors+0xe>
  errors[0] = error;
 8001c1c:	4a03      	ldr	r2, [pc, #12]	; (8001c2c <past_errors+0x3c>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6013      	str	r3, [r2, #0]
}
 8001c22:	bf00      	nop
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	20000280 	.word	0x20000280

08001c30 <errors_sum>:

int errors_sum (int index, int abs)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  int sum = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < index; i++)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	e01a      	b.n	8001c7a <errors_sum+0x4a>
  {
    if (abs == 1 && errors[i] < 0)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d10d      	bne.n	8001c66 <errors_sum+0x36>
 8001c4a:	4a11      	ldr	r2, [pc, #68]	; (8001c90 <errors_sum+0x60>)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	da07      	bge.n	8001c66 <errors_sum+0x36>
      sum += -errors[i];
 8001c56:	4a0e      	ldr	r2, [pc, #56]	; (8001c90 <errors_sum+0x60>)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	e006      	b.n	8001c74 <errors_sum+0x44>
    else
      sum += errors[i];
 8001c66:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <errors_sum+0x60>)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	4413      	add	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < index; i++)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	3301      	adds	r3, #1
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	dbe0      	blt.n	8001c44 <errors_sum+0x14>
  }
  return sum;
 8001c82:	68fb      	ldr	r3, [r7, #12]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000280 	.word	0x20000280

08001c94 <PID_control>:

void PID_control() {
 8001c94:	b590      	push	{r4, r7, lr}
 8001c96:	b087      	sub	sp, #28
 8001c98:	af00      	add	r7, sp, #0
  uint16_t position = QTR8_read();
 8001c9a:	f7ff fe31 	bl	8001900 <QTR8_read>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	81fb      	strh	r3, [r7, #14]
  int error = 4500 - position;
 8001ca2:	89fb      	ldrh	r3, [r7, #14]
 8001ca4:	f5c3 538c 	rsb	r3, r3, #4480	; 0x1180
 8001ca8:	3314      	adds	r3, #20
 8001caa:	60bb      	str	r3, [r7, #8]
  past_errors(error);
 8001cac:	68b8      	ldr	r0, [r7, #8]
 8001cae:	f7ff ff9f 	bl	8001bf0 <past_errors>

  P = error;
 8001cb2:	4a55      	ldr	r2, [pc, #340]	; (8001e08 <PID_control+0x174>)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	6013      	str	r3, [r2, #0]
  I = errors_sum(5, 0);
 8001cb8:	2100      	movs	r1, #0
 8001cba:	2005      	movs	r0, #5
 8001cbc:	f7ff ffb8 	bl	8001c30 <errors_sum>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	4a52      	ldr	r2, [pc, #328]	; (8001e0c <PID_control+0x178>)
 8001cc4:	6013      	str	r3, [r2, #0]
  D = error - lastError;
 8001cc6:	4b52      	ldr	r3, [pc, #328]	; (8001e10 <PID_control+0x17c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	4a51      	ldr	r2, [pc, #324]	; (8001e14 <PID_control+0x180>)
 8001cd0:	6013      	str	r3, [r2, #0]
  R = errors_sum(5, 1);
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	2005      	movs	r0, #5
 8001cd6:	f7ff ffab 	bl	8001c30 <errors_sum>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	4a4e      	ldr	r2, [pc, #312]	; (8001e18 <PID_control+0x184>)
 8001cde:	6013      	str	r3, [r2, #0]
  lastError = error;
 8001ce0:	4a4b      	ldr	r2, [pc, #300]	; (8001e10 <PID_control+0x17c>)
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	6013      	str	r3, [r2, #0]

  int motorspeed = P*Kp + I*Ki + D*Kd;
 8001ce6:	4b48      	ldr	r3, [pc, #288]	; (8001e08 <PID_control+0x174>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe ff86 	bl	8000bfc <__aeabi_i2f>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	4b4a      	ldr	r3, [pc, #296]	; (8001e1c <PID_control+0x188>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	f7fe ffd3 	bl	8000ca4 <__aeabi_fmul>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	461c      	mov	r4, r3
 8001d02:	4b42      	ldr	r3, [pc, #264]	; (8001e0c <PID_control+0x178>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe ff78 	bl	8000bfc <__aeabi_i2f>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	4b44      	ldr	r3, [pc, #272]	; (8001e20 <PID_control+0x18c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4619      	mov	r1, r3
 8001d14:	4610      	mov	r0, r2
 8001d16:	f7fe ffc5 	bl	8000ca4 <__aeabi_fmul>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4620      	mov	r0, r4
 8001d20:	f7fe feb8 	bl	8000a94 <__addsf3>
 8001d24:	4603      	mov	r3, r0
 8001d26:	461c      	mov	r4, r3
 8001d28:	4b3a      	ldr	r3, [pc, #232]	; (8001e14 <PID_control+0x180>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe ff65 	bl	8000bfc <__aeabi_i2f>
 8001d32:	4602      	mov	r2, r0
 8001d34:	4b3b      	ldr	r3, [pc, #236]	; (8001e24 <PID_control+0x190>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4610      	mov	r0, r2
 8001d3c:	f7fe ffb2 	bl	8000ca4 <__aeabi_fmul>
 8001d40:	4603      	mov	r3, r0
 8001d42:	4619      	mov	r1, r3
 8001d44:	4620      	mov	r0, r4
 8001d46:	f7fe fea5 	bl	8000a94 <__addsf3>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff f96f 	bl	8001030 <__aeabi_f2iz>
 8001d52:	4603      	mov	r3, r0
 8001d54:	607b      	str	r3, [r7, #4]

  int motorspeedl = basespeedl + motorspeed - R*Kr;
 8001d56:	4b34      	ldr	r3, [pc, #208]	; (8001e28 <PID_control+0x194>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe ff4c 	bl	8000bfc <__aeabi_i2f>
 8001d64:	4604      	mov	r4, r0
 8001d66:	4b2c      	ldr	r3, [pc, #176]	; (8001e18 <PID_control+0x184>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe ff46 	bl	8000bfc <__aeabi_i2f>
 8001d70:	4602      	mov	r2, r0
 8001d72:	4b2e      	ldr	r3, [pc, #184]	; (8001e2c <PID_control+0x198>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4619      	mov	r1, r3
 8001d78:	4610      	mov	r0, r2
 8001d7a:	f7fe ff93 	bl	8000ca4 <__aeabi_fmul>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	4619      	mov	r1, r3
 8001d82:	4620      	mov	r0, r4
 8001d84:	f7fe fe84 	bl	8000a90 <__aeabi_fsub>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff f950 	bl	8001030 <__aeabi_f2iz>
 8001d90:	4603      	mov	r3, r0
 8001d92:	617b      	str	r3, [r7, #20]
  int motorspeedr = basespeedr - motorspeed - R*Kr;
 8001d94:	4b26      	ldr	r3, [pc, #152]	; (8001e30 <PID_control+0x19c>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe ff2d 	bl	8000bfc <__aeabi_i2f>
 8001da2:	4604      	mov	r4, r0
 8001da4:	4b1c      	ldr	r3, [pc, #112]	; (8001e18 <PID_control+0x184>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe ff27 	bl	8000bfc <__aeabi_i2f>
 8001dae:	4602      	mov	r2, r0
 8001db0:	4b1e      	ldr	r3, [pc, #120]	; (8001e2c <PID_control+0x198>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4619      	mov	r1, r3
 8001db6:	4610      	mov	r0, r2
 8001db8:	f7fe ff74 	bl	8000ca4 <__aeabi_fmul>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4620      	mov	r0, r4
 8001dc2:	f7fe fe65 	bl	8000a90 <__aeabi_fsub>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff f931 	bl	8001030 <__aeabi_f2iz>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	613b      	str	r3, [r7, #16]

  if (motorspeedl > maxspeedl)
 8001dd2:	4b18      	ldr	r3, [pc, #96]	; (8001e34 <PID_control+0x1a0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	dd02      	ble.n	8001de2 <PID_control+0x14e>
    motorspeedl = maxspeedl;
 8001ddc:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <PID_control+0x1a0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	617b      	str	r3, [r7, #20]
  if (motorspeedr > maxspeedr)
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <PID_control+0x1a4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	dd02      	ble.n	8001df2 <PID_control+0x15e>
    motorspeedr = maxspeedr;
 8001dec:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <PID_control+0x1a4>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	613b      	str	r3, [r7, #16]

  	Battery_ADC_measurement();
 8001df2:	f7ff fb85 	bl	8001500 <Battery_ADC_measurement>
	forward_brake(motorspeedr, motorspeedl);
 8001df6:	6979      	ldr	r1, [r7, #20]
 8001df8:	6938      	ldr	r0, [r7, #16]
 8001dfa:	f7ff fed9 	bl	8001bb0 <forward_brake>
}
 8001dfe:	bf00      	nop
 8001e00:	371c      	adds	r7, #28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd90      	pop	{r4, r7, pc}
 8001e06:	bf00      	nop
 8001e08:	2000026c 	.word	0x2000026c
 8001e0c:	20000270 	.word	0x20000270
 8001e10:	2000027c 	.word	0x2000027c
 8001e14:	20000274 	.word	0x20000274
 8001e18:	20000278 	.word	0x20000278
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	20000264 	.word	0x20000264
 8001e24:	20000004 	.word	0x20000004
 8001e28:	20000018 	.word	0x20000018
 8001e2c:	20000268 	.word	0x20000268
 8001e30:	20000014 	.word	0x20000014
 8001e34:	20000010 	.word	0x20000010
 8001e38:	2000000c 	.word	0x2000000c

08001e3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e40:	f001 f8f6 	bl	8003030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e44:	f000 f860 	bl	8001f08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e48:	f7ff fa74 	bl	8001334 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001e4c:	f000 fdd6 	bl	80029fc <MX_TIM1_Init>
  MX_TIM3_Init();
 8001e50:	f000 fe72 	bl	8002b38 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001e54:	f000 febe 	bl	8002bd4 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001e58:	f000 ffe0 	bl	8002e1c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001e5c:	f001 f808 	bl	8002e70 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001e60:	f7ff f9ee 	bl	8001240 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001e64:	f000 fe1c 	bl	8002aa0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
   HAL_UART_Receive_IT(&huart1,(uint8_t*)RxData,28); //Oczekiwanie na dane z HC-05 i włączenie timerów
 8001e68:	221c      	movs	r2, #28
 8001e6a:	491f      	ldr	r1, [pc, #124]	; (8001ee8 <main+0xac>)
 8001e6c:	481f      	ldr	r0, [pc, #124]	; (8001eec <main+0xb0>)
 8001e6e:	f003 fe40 	bl	8005af2 <HAL_UART_Receive_IT>
   HAL_TIM_Base_Start(&htim1);
 8001e72:	481f      	ldr	r0, [pc, #124]	; (8001ef0 <main+0xb4>)
 8001e74:	f002 fee6 	bl	8004c44 <HAL_TIM_Base_Start>
   HAL_TIM_Base_Start(&htim2);
 8001e78:	481e      	ldr	r0, [pc, #120]	; (8001ef4 <main+0xb8>)
 8001e7a:	f002 fee3 	bl	8004c44 <HAL_TIM_Base_Start>
   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001e7e:	2100      	movs	r1, #0
 8001e80:	481d      	ldr	r0, [pc, #116]	; (8001ef8 <main+0xbc>)
 8001e82:	f002 ffd9 	bl	8004e38 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001e86:	2108      	movs	r1, #8
 8001e88:	481b      	ldr	r0, [pc, #108]	; (8001ef8 <main+0xbc>)
 8001e8a:	f002 ffd5 	bl	8004e38 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001e8e:	210c      	movs	r1, #12
 8001e90:	4819      	ldr	r0, [pc, #100]	; (8001ef8 <main+0xbc>)
 8001e92:	f002 ffd1 	bl	8004e38 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001e96:	2104      	movs	r1, #4
 8001e98:	4817      	ldr	r0, [pc, #92]	; (8001ef8 <main+0xbc>)
 8001e9a:	f002 ffcd 	bl	8004e38 <HAL_TIM_PWM_Start>
   //__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_1, 100);
   __HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_2, 100);
 8001e9e:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <main+0xbc>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2264      	movs	r2, #100	; 0x64
 8001ea4:	639a      	str	r2, [r3, #56]	; 0x38
   __HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_1, 0);
 8001ea6:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <main+0xbc>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	635a      	str	r2, [r3, #52]	; 0x34
   __HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_3, 100);
 8001eae:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <main+0xbc>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2264      	movs	r2, #100	; 0x64
 8001eb4:	63da      	str	r2, [r3, #60]	; 0x3c
   __HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_4, 100);
 8001eb6:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <main+0xbc>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2264      	movs	r2, #100	; 0x64
 8001ebc:	641a      	str	r2, [r3, #64]	; 0x40
   HAL_Delay(2000);
 8001ebe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ec2:	f001 f917 	bl	80030f4 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  PID_control();
 8001ec6:	f7ff fee5 	bl	8001c94 <PID_control>
	  if(battery_procentage_raw < 75)
 8001eca:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <main+0xc0>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	490c      	ldr	r1, [pc, #48]	; (8001f00 <main+0xc4>)
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff f885 	bl	8000fe0 <__aeabi_fcmplt>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d004      	beq.n	8001ee6 <main+0xaa>
	  {
		  /*If battery is low stop robot*/
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001edc:	2200      	movs	r2, #0
 8001ede:	2140      	movs	r1, #64	; 0x40
 8001ee0:	4808      	ldr	r0, [pc, #32]	; (8001f04 <main+0xc8>)
 8001ee2:	f002 f8b2 	bl	800404a <HAL_GPIO_WritePin>
	  PID_control();
 8001ee6:	e7ee      	b.n	8001ec6 <main+0x8a>
 8001ee8:	200002b4 	.word	0x200002b4
 8001eec:	20000414 	.word	0x20000414
 8001ef0:	200002f4 	.word	0x200002f4
 8001ef4:	2000033c 	.word	0x2000033c
 8001ef8:	200003cc 	.word	0x200003cc
 8001efc:	200002d4 	.word	0x200002d4
 8001f00:	42960000 	.word	0x42960000
 8001f04:	40010c00 	.word	0x40010c00

08001f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b094      	sub	sp, #80	; 0x50
 8001f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f12:	2228      	movs	r2, #40	; 0x28
 8001f14:	2100      	movs	r1, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f004 fbbe 	bl	8006698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	609a      	str	r2, [r3, #8]
 8001f36:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f42:	2300      	movs	r3, #0
 8001f44:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f46:	2301      	movs	r3, #1
 8001f48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f54:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f58:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f002 f8a4 	bl	80040ac <HAL_RCC_OscConfig>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001f6a:	f000 fc17 	bl	800279c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f6e:	230f      	movs	r3, #15
 8001f70:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f72:	2302      	movs	r3, #2
 8001f74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f7e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8001f80:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f86:	f107 0314 	add.w	r3, r7, #20
 8001f8a:	2102      	movs	r1, #2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f002 fb0f 	bl	80045b0 <HAL_RCC_ClockConfig>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f98:	f000 fc00 	bl	800279c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fa4:	1d3b      	adds	r3, r7, #4
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f002 fc90 	bl	80048cc <HAL_RCCEx_PeriphCLKConfig>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001fb2:	f000 fbf3 	bl	800279c <Error_Handler>
  }
}
 8001fb6:	bf00      	nop
 8001fb8:	3750      	adds	r7, #80	; 0x50
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fc0:	b5b0      	push	{r4, r5, r7, lr}
 8001fc2:	b08a      	sub	sp, #40	; 0x28
 8001fc4:	af04      	add	r7, sp, #16
 8001fc6:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a11      	ldr	r2, [pc, #68]	; (8002014 <HAL_UART_RxCpltCallback+0x54>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	f040 83b1 	bne.w	8002736 <HAL_UART_RxCpltCallback+0x776>
	{
		if(RxData[0] == 78) // Ascii value of 'N' is 78 (N for NO)              START I STOP
 8001fd4:	4b10      	ldr	r3, [pc, #64]	; (8002018 <HAL_UART_RxCpltCallback+0x58>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b4e      	cmp	r3, #78	; 0x4e
 8001fda:	d10f      	bne.n	8001ffc <HAL_UART_RxCpltCallback+0x3c>
		{

			/*Stop GRUZIK2.0 and turn off the LED*/
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2140      	movs	r1, #64	; 0x40
 8001fe0:	480e      	ldr	r0, [pc, #56]	; (800201c <HAL_UART_RxCpltCallback+0x5c>)
 8001fe2:	f002 f832 	bl	800404a <HAL_GPIO_WritePin>
			//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
			/*Send battery percentage*/
			SN_UART_Send(&huart1, "%.1f" ,battery_procentage_raw);
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <HAL_UART_RxCpltCallback+0x60>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe fa1c 	bl	8000428 <__aeabi_f2d>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	490b      	ldr	r1, [pc, #44]	; (8002024 <HAL_UART_RxCpltCallback+0x64>)
 8001ff6:	480c      	ldr	r0, [pc, #48]	; (8002028 <HAL_UART_RxCpltCallback+0x68>)
 8001ff8:	f7ff f840 	bl	800107c <SN_UART_Send>

		}
		if (RxData[0] == 89) // Ascii value of 'Y' is 89 (Y for YES)
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_UART_RxCpltCallback+0x58>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b59      	cmp	r3, #89	; 0x59
 8002002:	d13e      	bne.n	8002082 <HAL_UART_RxCpltCallback+0xc2>
		{
			/*Time mode*/
			if(Is_time_mode)
 8002004:	4b09      	ldr	r3, [pc, #36]	; (800202c <HAL_UART_RxCpltCallback+0x6c>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d02d      	beq.n	8002068 <HAL_UART_RxCpltCallback+0xa8>
			{
				/*Change mode to mode 2 for Start_time*/
				for(int i = 1; i <= 27 ;i++)
 800200c:	2301      	movs	r3, #1
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	e016      	b.n	8002040 <HAL_UART_RxCpltCallback+0x80>
 8002012:	bf00      	nop
 8002014:	40013800 	.word	0x40013800
 8002018:	200002b4 	.word	0x200002b4
 800201c:	40010c00 	.word	0x40010c00
 8002020:	200002d4 	.word	0x200002d4
 8002024:	080095f0 	.word	0x080095f0
 8002028:	20000414 	.word	0x20000414
 800202c:	200002d8 	.word	0x200002d8
					RxData[i] = 0;
 8002030:	4aa0      	ldr	r2, [pc, #640]	; (80022b4 <HAL_UART_RxCpltCallback+0x2f4>)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	4413      	add	r3, r2
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
				for(int i = 1; i <= 27 ;i++)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3301      	adds	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	2b1b      	cmp	r3, #27
 8002044:	ddf4      	ble.n	8002030 <HAL_UART_RxCpltCallback+0x70>
				RxData[0] = Mode_Change(mode_1);
 8002046:	4b9c      	ldr	r3, [pc, #624]	; (80022b8 <HAL_UART_RxCpltCallback+0x2f8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fa04 	bl	8001458 <Mode_Change>
 8002050:	4603      	mov	r3, r0
 8002052:	461a      	mov	r2, r3
 8002054:	4b97      	ldr	r3, [pc, #604]	; (80022b4 <HAL_UART_RxCpltCallback+0x2f4>)
 8002056:	701a      	strb	r2, [r3, #0]
				HAL_UART_RxCpltCallback(&huart1);
 8002058:	4898      	ldr	r0, [pc, #608]	; (80022bc <HAL_UART_RxCpltCallback+0x2fc>)
 800205a:	f7ff ffb1 	bl	8001fc0 <HAL_UART_RxCpltCallback>

				/*Start waiting for mode change*/
				__HAL_TIM_SET_COUNTER(&htim1,3000);
 800205e:	4b98      	ldr	r3, [pc, #608]	; (80022c0 <HAL_UART_RxCpltCallback+0x300>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002066:	625a      	str	r2, [r3, #36]	; 0x24
			}
			/*Do Battery measurement before start*/
			Battery_ADC_measurement();
 8002068:	f7ff fa4a 	bl	8001500 <Battery_ADC_measurement>
			/*Start GRUZIK2.0 and turn on the LED*/
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800206c:	2201      	movs	r2, #1
 800206e:	2140      	movs	r1, #64	; 0x40
 8002070:	4894      	ldr	r0, [pc, #592]	; (80022c4 <HAL_UART_RxCpltCallback+0x304>)
 8002072:	f001 ffea 	bl	800404a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002076:	2201      	movs	r2, #1
 8002078:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800207c:	4892      	ldr	r0, [pc, #584]	; (80022c8 <HAL_UART_RxCpltCallback+0x308>)
 800207e:	f001 ffe4 	bl	800404a <HAL_GPIO_WritePin>
		}
		/*Terminal communication*/
		if(RxData[0] == 'T')
 8002082:	4b8c      	ldr	r3, [pc, #560]	; (80022b4 <HAL_UART_RxCpltCallback+0x2f4>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b54      	cmp	r3, #84	; 0x54
 8002088:	d104      	bne.n	8002094 <HAL_UART_RxCpltCallback+0xd4>
			if(RxData[2] == 'p')
			{
				SN_Value_In_Message(RxData, SN_Find_first(RxData, "d:"), SN_Find_first(RxData, "end") , char_value);
				Kd= atof(char_value);
			}*/
			HAL_GPIO_TogglePin(LD_GPIO_Port, LD_Pin);
 800208a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800208e:	488e      	ldr	r0, [pc, #568]	; (80022c8 <HAL_UART_RxCpltCallback+0x308>)
 8002090:	f001 fff3 	bl	800407a <HAL_GPIO_TogglePin>
		}
		/*Time mode*/
		if(RxData[0] == 'g')
 8002094:	4b87      	ldr	r3, [pc, #540]	; (80022b4 <HAL_UART_RxCpltCallback+0x2f4>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b67      	cmp	r3, #103	; 0x67
 800209a:	f040 8094 	bne.w	80021c6 <HAL_UART_RxCpltCallback+0x206>
		{
			/*mode 2*/
			SN_Value_In_Message(RxData, SN_Find_first(RxData, "m2:") + 3, SN_Find_first(RxData, "st:"), char_value);
 800209e:	498b      	ldr	r1, [pc, #556]	; (80022cc <HAL_UART_RxCpltCallback+0x30c>)
 80020a0:	4884      	ldr	r0, [pc, #528]	; (80022b4 <HAL_UART_RxCpltCallback+0x2f4>)
 80020a2:	f7ff f83d 	bl	8001120 <SN_Find_first>
 80020a6:	4603      	mov	r3, r0
 80020a8:	1cdc      	adds	r4, r3, #3
 80020aa:	4989      	ldr	r1, [pc, #548]	; (80022d0 <HAL_UART_RxCpltCallback+0x310>)
 80020ac:	4881      	ldr	r0, [pc, #516]	; (80022b4 <HAL_UART_RxCpltCallback+0x2f4>)
 80020ae:	f7ff f837 	bl	8001120 <SN_Find_first>
 80020b2:	4602      	mov	r2, r0
 80020b4:	4b87      	ldr	r3, [pc, #540]	; (80022d4 <HAL_UART_RxCpltCallback+0x314>)
 80020b6:	4621      	mov	r1, r4
 80020b8:	487e      	ldr	r0, [pc, #504]	; (80022b4 <HAL_UART_RxCpltCallback+0x2f4>)
 80020ba:	f7ff f89c 	bl	80011f6 <SN_Value_In_Message>
			mode_2 = atoi(char_value);
 80020be:	4885      	ldr	r0, [pc, #532]	; (80022d4 <HAL_UART_RxCpltCallback+0x314>)
 80020c0:	f004 fabc 	bl	800663c <atoi>
 80020c4:	4603      	mov	r3, r0
 80020c6:	4a84      	ldr	r2, [pc, #528]	; (80022d8 <HAL_UART_RxCpltCallback+0x318>)
 80020c8:	6013      	str	r3, [r2, #0]

			/*mode 1*/
			SN_Value_In_Message(RxData, SN_Find_first(RxData, "m1:") + 3, SN_Find_first(RxData, "m2:"), char_value);
 80020ca:	4984      	ldr	r1, [pc, #528]	; (80022dc <HAL_UART_RxCpltCallback+0x31c>)
 80020cc:	4879      	ldr	r0, [pc, #484]	; (80022b4 <HAL_UART_RxCpltCallback+0x2f4>)
 80020ce:	f7ff f827 	bl	8001120 <SN_Find_first>
 80020d2:	4603      	mov	r3, r0
 80020d4:	1cdc      	adds	r4, r3, #3
 80020d6:	497d      	ldr	r1, [pc, #500]	; (80022cc <HAL_UART_RxCpltCallback+0x30c>)
 80020d8:	4876      	ldr	r0, [pc, #472]	; (80022b4 <HAL_UART_RxCpltCallback+0x2f4>)
 80020da:	f7ff f821 	bl	8001120 <SN_Find_first>
 80020de:	4602      	mov	r2, r0
 80020e0:	4b7c      	ldr	r3, [pc, #496]	; (80022d4 <HAL_UART_RxCpltCallback+0x314>)
 80020e2:	4621      	mov	r1, r4
 80020e4:	4873      	ldr	r0, [pc, #460]	; (80022b4 <HAL_UART_RxCpltCallback+0x2f4>)
 80020e6:	f7ff f886 	bl	80011f6 <SN_Value_In_Message>
			int mode_3 = atoi(char_value);
 80020ea:	487a      	ldr	r0, [pc, #488]	; (80022d4 <HAL_UART_RxCpltCallback+0x314>)
 80020ec:	f004 faa6 	bl	800663c <atoi>
 80020f0:	60f8      	str	r0, [r7, #12]

			/*Start time*/
			SN_Value_In_Message(RxData, SN_Find_first(RxData, "st:") + 3, SN_Find_first(RxData, "ct:"), char_value);
 80020f2:	4977      	ldr	r1, [pc, #476]	; (80022d0 <HAL_UART_RxCpltCallback+0x310>)
 80020f4:	486f      	ldr	r0, [pc, #444]	; (80022b4 <HAL_UART_RxCpltCallback+0x2f4>)
 80020f6:	f7ff f813 	bl	8001120 <SN_Find_first>
 80020fa:	4603      	mov	r3, r0
 80020fc:	1cdc      	adds	r4, r3, #3
 80020fe:	4978      	ldr	r1, [pc, #480]	; (80022e0 <HAL_UART_RxCpltCallback+0x320>)
 8002100:	486c      	ldr	r0, [pc, #432]	; (80022b4 <HAL_UART_RxCpltCallback+0x2f4>)
 8002102:	f7ff f80d 	bl	8001120 <SN_Find_first>
 8002106:	4602      	mov	r2, r0
 8002108:	4b72      	ldr	r3, [pc, #456]	; (80022d4 <HAL_UART_RxCpltCallback+0x314>)
 800210a:	4621      	mov	r1, r4
 800210c:	4869      	ldr	r0, [pc, #420]	; (80022b4 <HAL_UART_RxCpltCallback+0x2f4>)
 800210e:	f7ff f872 	bl	80011f6 <SN_Value_In_Message>
			Start_time = atoi(char_value);
 8002112:	4870      	ldr	r0, [pc, #448]	; (80022d4 <HAL_UART_RxCpltCallback+0x314>)
 8002114:	f004 fa92 	bl	800663c <atoi>
 8002118:	4603      	mov	r3, r0
 800211a:	4a72      	ldr	r2, [pc, #456]	; (80022e4 <HAL_UART_RxCpltCallback+0x324>)
 800211c:	6013      	str	r3, [r2, #0]

			/*mode 1*/
			SN_Value_In_Message(RxData, SN_Find_first(RxData, "ct:") + 3, SN_Find_first(RxData, "E"), char_value);
 800211e:	4970      	ldr	r1, [pc, #448]	; (80022e0 <HAL_UART_RxCpltCallback+0x320>)
 8002120:	4864      	ldr	r0, [pc, #400]	; (80022b4 <HAL_UART_RxCpltCallback+0x2f4>)
 8002122:	f7fe fffd 	bl	8001120 <SN_Find_first>
 8002126:	4603      	mov	r3, r0
 8002128:	1cdc      	adds	r4, r3, #3
 800212a:	496f      	ldr	r1, [pc, #444]	; (80022e8 <HAL_UART_RxCpltCallback+0x328>)
 800212c:	4861      	ldr	r0, [pc, #388]	; (80022b4 <HAL_UART_RxCpltCallback+0x2f4>)
 800212e:	f7fe fff7 	bl	8001120 <SN_Find_first>
 8002132:	4602      	mov	r2, r0
 8002134:	4b67      	ldr	r3, [pc, #412]	; (80022d4 <HAL_UART_RxCpltCallback+0x314>)
 8002136:	4621      	mov	r1, r4
 8002138:	485e      	ldr	r0, [pc, #376]	; (80022b4 <HAL_UART_RxCpltCallback+0x2f4>)
 800213a:	f7ff f85c 	bl	80011f6 <SN_Value_In_Message>
			Change_time = atoi(char_value);
 800213e:	4865      	ldr	r0, [pc, #404]	; (80022d4 <HAL_UART_RxCpltCallback+0x314>)
 8002140:	f004 fa7c 	bl	800663c <atoi>
 8002144:	4603      	mov	r3, r0
 8002146:	4a69      	ldr	r2, [pc, #420]	; (80022ec <HAL_UART_RxCpltCallback+0x32c>)
 8002148:	6013      	str	r3, [r2, #0]

			/*Show data by UART-USB*/
			SN_UART_Send(&huart3, "m1:%d  m2:%d st:%d ct:%d \r \n ", mode_3, mode_2, Start_time, Change_time);
 800214a:	4b63      	ldr	r3, [pc, #396]	; (80022d8 <HAL_UART_RxCpltCallback+0x318>)
 800214c:	6819      	ldr	r1, [r3, #0]
 800214e:	4b65      	ldr	r3, [pc, #404]	; (80022e4 <HAL_UART_RxCpltCallback+0x324>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a66      	ldr	r2, [pc, #408]	; (80022ec <HAL_UART_RxCpltCallback+0x32c>)
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	9201      	str	r2, [sp, #4]
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	460b      	mov	r3, r1
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	4964      	ldr	r1, [pc, #400]	; (80022f0 <HAL_UART_RxCpltCallback+0x330>)
 8002160:	4864      	ldr	r0, [pc, #400]	; (80022f4 <HAL_UART_RxCpltCallback+0x334>)
 8002162:	f7fe ff8b 	bl	800107c <SN_UART_Send>

			/*Check if data read correctly*/
			mode_1 = mode_3;
 8002166:	4a54      	ldr	r2, [pc, #336]	; (80022b8 <HAL_UART_RxCpltCallback+0x2f8>)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6013      	str	r3, [r2, #0]
			if((mode_1 > 13) || (mode_2 > 13))
 800216c:	4b52      	ldr	r3, [pc, #328]	; (80022b8 <HAL_UART_RxCpltCallback+0x2f8>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b0d      	cmp	r3, #13
 8002172:	dc03      	bgt.n	800217c <HAL_UART_RxCpltCallback+0x1bc>
 8002174:	4b58      	ldr	r3, [pc, #352]	; (80022d8 <HAL_UART_RxCpltCallback+0x318>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b0d      	cmp	r3, #13
 800217a:	dd02      	ble.n	8002182 <HAL_UART_RxCpltCallback+0x1c2>
				IS_DATA_OK = false;
 800217c:	4b5e      	ldr	r3, [pc, #376]	; (80022f8 <HAL_UART_RxCpltCallback+0x338>)
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]
			if((Start_time > 40000) || (Change_time > 40000))
 8002182:	4b58      	ldr	r3, [pc, #352]	; (80022e4 <HAL_UART_RxCpltCallback+0x324>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f649 4240 	movw	r2, #40000	; 0x9c40
 800218a:	4293      	cmp	r3, r2
 800218c:	dc05      	bgt.n	800219a <HAL_UART_RxCpltCallback+0x1da>
 800218e:	4b57      	ldr	r3, [pc, #348]	; (80022ec <HAL_UART_RxCpltCallback+0x32c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002196:	4293      	cmp	r3, r2
 8002198:	dd02      	ble.n	80021a0 <HAL_UART_RxCpltCallback+0x1e0>
				IS_DATA_OK = false;
 800219a:	4b57      	ldr	r3, [pc, #348]	; (80022f8 <HAL_UART_RxCpltCallback+0x338>)
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]
			if(IS_DATA_OK)
 80021a0:	4b55      	ldr	r3, [pc, #340]	; (80022f8 <HAL_UART_RxCpltCallback+0x338>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d007      	beq.n	80021b8 <HAL_UART_RxCpltCallback+0x1f8>
			{
				HAL_GPIO_TogglePin(LD_GPIO_Port, LD_Pin);
 80021a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021ac:	4846      	ldr	r0, [pc, #280]	; (80022c8 <HAL_UART_RxCpltCallback+0x308>)
 80021ae:	f001 ff64 	bl	800407a <HAL_GPIO_TogglePin>
				Is_time_mode = 1;
 80021b2:	4b52      	ldr	r3, [pc, #328]	; (80022fc <HAL_UART_RxCpltCallback+0x33c>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	701a      	strb	r2, [r3, #0]
			}
			SN_UART_Send(&huart3,"IS_DATA_OK = %d \r \n ",IS_DATA_OK);
 80021b8:	4b4f      	ldr	r3, [pc, #316]	; (80022f8 <HAL_UART_RxCpltCallback+0x338>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	4950      	ldr	r1, [pc, #320]	; (8002300 <HAL_UART_RxCpltCallback+0x340>)
 80021c0:	484c      	ldr	r0, [pc, #304]	; (80022f4 <HAL_UART_RxCpltCallback+0x334>)
 80021c2:	f7fe ff5b 	bl	800107c <SN_UART_Send>
		}
     	/*LOW mode*/
     	if(RxData[0] == 'a')
 80021c6:	4b3b      	ldr	r3, [pc, #236]	; (80022b4 <HAL_UART_RxCpltCallback+0x2f4>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b61      	cmp	r3, #97	; 0x61
 80021cc:	d122      	bne.n	8002214 <HAL_UART_RxCpltCallback+0x254>
     	{
    	 	 ARR=3;
 80021ce:	4b4d      	ldr	r3, [pc, #308]	; (8002304 <HAL_UART_RxCpltCallback+0x344>)
 80021d0:	2203      	movs	r2, #3
 80021d2:	601a      	str	r2, [r3, #0]
     	 	 basespeedr = 150;
 80021d4:	4b4c      	ldr	r3, [pc, #304]	; (8002308 <HAL_UART_RxCpltCallback+0x348>)
 80021d6:	2296      	movs	r2, #150	; 0x96
 80021d8:	601a      	str	r2, [r3, #0]
     	 	 basespeedl = 150;
 80021da:	4b4c      	ldr	r3, [pc, #304]	; (800230c <HAL_UART_RxCpltCallback+0x34c>)
 80021dc:	2296      	movs	r2, #150	; 0x96
 80021de:	601a      	str	r2, [r3, #0]
     	 	 maxspeedl=130;
 80021e0:	4b4b      	ldr	r3, [pc, #300]	; (8002310 <HAL_UART_RxCpltCallback+0x350>)
 80021e2:	2282      	movs	r2, #130	; 0x82
 80021e4:	601a      	str	r2, [r3, #0]
     	 	 maxspeedr=130;
 80021e6:	4b4b      	ldr	r3, [pc, #300]	; (8002314 <HAL_UART_RxCpltCallback+0x354>)
 80021e8:	2282      	movs	r2, #130	; 0x82
 80021ea:	601a      	str	r2, [r3, #0]
     	 	 Sharp_bend_speed_right=-115;
 80021ec:	4b4a      	ldr	r3, [pc, #296]	; (8002318 <HAL_UART_RxCpltCallback+0x358>)
 80021ee:	f06f 0272 	mvn.w	r2, #114	; 0x72
 80021f2:	601a      	str	r2, [r3, #0]
     	 	 Sharp_bend_speed_left=120;
 80021f4:	4b49      	ldr	r3, [pc, #292]	; (800231c <HAL_UART_RxCpltCallback+0x35c>)
 80021f6:	2278      	movs	r2, #120	; 0x78
 80021f8:	601a      	str	r2, [r3, #0]
     	 	 Bend_speed_right=-76;
 80021fa:	4b49      	ldr	r3, [pc, #292]	; (8002320 <HAL_UART_RxCpltCallback+0x360>)
 80021fc:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8002200:	601a      	str	r2, [r3, #0]
     	 	 Bend_speed_left=125;
 8002202:	4b48      	ldr	r3, [pc, #288]	; (8002324 <HAL_UART_RxCpltCallback+0x364>)
 8002204:	227d      	movs	r2, #125	; 0x7d
 8002206:	601a      	str	r2, [r3, #0]
     	 	 Kp = 0.02;
 8002208:	4b47      	ldr	r3, [pc, #284]	; (8002328 <HAL_UART_RxCpltCallback+0x368>)
 800220a:	4a48      	ldr	r2, [pc, #288]	; (800232c <HAL_UART_RxCpltCallback+0x36c>)
 800220c:	601a      	str	r2, [r3, #0]
     	 	 Kd = 65;
 800220e:	4b48      	ldr	r3, [pc, #288]	; (8002330 <HAL_UART_RxCpltCallback+0x370>)
 8002210:	4a48      	ldr	r2, [pc, #288]	; (8002334 <HAL_UART_RxCpltCallback+0x374>)
 8002212:	601a      	str	r2, [r3, #0]
     	 	//HAL_GPIO_TogglePin(LD_GPIO_Port, LD_Pin);
     	}
     	/*LOW+ mode*/
     	if(RxData[0] == 'd')
 8002214:	4b27      	ldr	r3, [pc, #156]	; (80022b4 <HAL_UART_RxCpltCallback+0x2f4>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b64      	cmp	r3, #100	; 0x64
 800221a:	d122      	bne.n	8002262 <HAL_UART_RxCpltCallback+0x2a2>
     	{
    	 	 ARR=3;
 800221c:	4b39      	ldr	r3, [pc, #228]	; (8002304 <HAL_UART_RxCpltCallback+0x344>)
 800221e:	2203      	movs	r2, #3
 8002220:	601a      	str	r2, [r3, #0]
     	 	 basespeedr = 165;
 8002222:	4b39      	ldr	r3, [pc, #228]	; (8002308 <HAL_UART_RxCpltCallback+0x348>)
 8002224:	22a5      	movs	r2, #165	; 0xa5
 8002226:	601a      	str	r2, [r3, #0]
     	 	 basespeedl = 165;
 8002228:	4b38      	ldr	r3, [pc, #224]	; (800230c <HAL_UART_RxCpltCallback+0x34c>)
 800222a:	22a5      	movs	r2, #165	; 0xa5
 800222c:	601a      	str	r2, [r3, #0]
     	 	 maxspeedl=130;
 800222e:	4b38      	ldr	r3, [pc, #224]	; (8002310 <HAL_UART_RxCpltCallback+0x350>)
 8002230:	2282      	movs	r2, #130	; 0x82
 8002232:	601a      	str	r2, [r3, #0]
     	 	 maxspeedr=130;
 8002234:	4b37      	ldr	r3, [pc, #220]	; (8002314 <HAL_UART_RxCpltCallback+0x354>)
 8002236:	2282      	movs	r2, #130	; 0x82
 8002238:	601a      	str	r2, [r3, #0]
     	 	 Sharp_bend_speed_right=-120;
 800223a:	4b37      	ldr	r3, [pc, #220]	; (8002318 <HAL_UART_RxCpltCallback+0x358>)
 800223c:	f06f 0277 	mvn.w	r2, #119	; 0x77
 8002240:	601a      	str	r2, [r3, #0]
     	 	 Sharp_bend_speed_left=125;
 8002242:	4b36      	ldr	r3, [pc, #216]	; (800231c <HAL_UART_RxCpltCallback+0x35c>)
 8002244:	227d      	movs	r2, #125	; 0x7d
 8002246:	601a      	str	r2, [r3, #0]
     	 	 Bend_speed_right=-76;
 8002248:	4b35      	ldr	r3, [pc, #212]	; (8002320 <HAL_UART_RxCpltCallback+0x360>)
 800224a:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 800224e:	601a      	str	r2, [r3, #0]
     	 	 Bend_speed_left=125;
 8002250:	4b34      	ldr	r3, [pc, #208]	; (8002324 <HAL_UART_RxCpltCallback+0x364>)
 8002252:	227d      	movs	r2, #125	; 0x7d
 8002254:	601a      	str	r2, [r3, #0]
     	 	 Kp = 0.04;
 8002256:	4b34      	ldr	r3, [pc, #208]	; (8002328 <HAL_UART_RxCpltCallback+0x368>)
 8002258:	4a37      	ldr	r2, [pc, #220]	; (8002338 <HAL_UART_RxCpltCallback+0x378>)
 800225a:	601a      	str	r2, [r3, #0]
     	 	 Kd = 75;
 800225c:	4b34      	ldr	r3, [pc, #208]	; (8002330 <HAL_UART_RxCpltCallback+0x370>)
 800225e:	4a37      	ldr	r2, [pc, #220]	; (800233c <HAL_UART_RxCpltCallback+0x37c>)
 8002260:	601a      	str	r2, [r3, #0]
     	}
     	/*Medium mode*/
     	if(RxData[0] == 'b')
 8002262:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <HAL_UART_RxCpltCallback+0x2f4>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b62      	cmp	r3, #98	; 0x62
 8002268:	d16e      	bne.n	8002348 <HAL_UART_RxCpltCallback+0x388>
     	{
    	 	 ARR=3;
 800226a:	4b26      	ldr	r3, [pc, #152]	; (8002304 <HAL_UART_RxCpltCallback+0x344>)
 800226c:	2203      	movs	r2, #3
 800226e:	601a      	str	r2, [r3, #0]
     	 	 basespeedr = 175;
 8002270:	4b25      	ldr	r3, [pc, #148]	; (8002308 <HAL_UART_RxCpltCallback+0x348>)
 8002272:	22af      	movs	r2, #175	; 0xaf
 8002274:	601a      	str	r2, [r3, #0]
     	 	 basespeedl = 175;
 8002276:	4b25      	ldr	r3, [pc, #148]	; (800230c <HAL_UART_RxCpltCallback+0x34c>)
 8002278:	22af      	movs	r2, #175	; 0xaf
 800227a:	601a      	str	r2, [r3, #0]
     	 	 maxspeedl = 135;
 800227c:	4b24      	ldr	r3, [pc, #144]	; (8002310 <HAL_UART_RxCpltCallback+0x350>)
 800227e:	2287      	movs	r2, #135	; 0x87
 8002280:	601a      	str	r2, [r3, #0]
     	 	 maxspeedr = 135;
 8002282:	4b24      	ldr	r3, [pc, #144]	; (8002314 <HAL_UART_RxCpltCallback+0x354>)
 8002284:	2287      	movs	r2, #135	; 0x87
 8002286:	601a      	str	r2, [r3, #0]
     	 	 Sharp_bend_speed_right = -120;
 8002288:	4b23      	ldr	r3, [pc, #140]	; (8002318 <HAL_UART_RxCpltCallback+0x358>)
 800228a:	f06f 0277 	mvn.w	r2, #119	; 0x77
 800228e:	601a      	str	r2, [r3, #0]
     	 	 Sharp_bend_speed_left = 125;
 8002290:	4b22      	ldr	r3, [pc, #136]	; (800231c <HAL_UART_RxCpltCallback+0x35c>)
 8002292:	227d      	movs	r2, #125	; 0x7d
 8002294:	601a      	str	r2, [r3, #0]
     	 	 Bend_speed_right = -76;
 8002296:	4b22      	ldr	r3, [pc, #136]	; (8002320 <HAL_UART_RxCpltCallback+0x360>)
 8002298:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 800229c:	601a      	str	r2, [r3, #0]
     	 	 Bend_speed_left = 125;
 800229e:	4b21      	ldr	r3, [pc, #132]	; (8002324 <HAL_UART_RxCpltCallback+0x364>)
 80022a0:	227d      	movs	r2, #125	; 0x7d
 80022a2:	601a      	str	r2, [r3, #0]
     	 	 Kp = 0.03;
 80022a4:	4b20      	ldr	r3, [pc, #128]	; (8002328 <HAL_UART_RxCpltCallback+0x368>)
 80022a6:	4a26      	ldr	r2, [pc, #152]	; (8002340 <HAL_UART_RxCpltCallback+0x380>)
 80022a8:	601a      	str	r2, [r3, #0]
     	 	 Kd = 70;
 80022aa:	4b21      	ldr	r3, [pc, #132]	; (8002330 <HAL_UART_RxCpltCallback+0x370>)
 80022ac:	4a25      	ldr	r2, [pc, #148]	; (8002344 <HAL_UART_RxCpltCallback+0x384>)
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	e04a      	b.n	8002348 <HAL_UART_RxCpltCallback+0x388>
 80022b2:	bf00      	nop
 80022b4:	200002b4 	.word	0x200002b4
 80022b8:	200002e0 	.word	0x200002e0
 80022bc:	20000414 	.word	0x20000414
 80022c0:	200002f4 	.word	0x200002f4
 80022c4:	40010c00 	.word	0x40010c00
 80022c8:	40011000 	.word	0x40011000
 80022cc:	080095f8 	.word	0x080095f8
 80022d0:	080095fc 	.word	0x080095fc
 80022d4:	200002dc 	.word	0x200002dc
 80022d8:	200002e4 	.word	0x200002e4
 80022dc:	08009600 	.word	0x08009600
 80022e0:	08009604 	.word	0x08009604
 80022e4:	200002e8 	.word	0x200002e8
 80022e8:	08009608 	.word	0x08009608
 80022ec:	200002ec 	.word	0x200002ec
 80022f0:	0800960c 	.word	0x0800960c
 80022f4:	2000045c 	.word	0x2000045c
 80022f8:	20000032 	.word	0x20000032
 80022fc:	200002d8 	.word	0x200002d8
 8002300:	0800962c 	.word	0x0800962c
 8002304:	2000001c 	.word	0x2000001c
 8002308:	20000014 	.word	0x20000014
 800230c:	20000018 	.word	0x20000018
 8002310:	20000010 	.word	0x20000010
 8002314:	2000000c 	.word	0x2000000c
 8002318:	20000020 	.word	0x20000020
 800231c:	20000024 	.word	0x20000024
 8002320:	20000028 	.word	0x20000028
 8002324:	2000002c 	.word	0x2000002c
 8002328:	20000000 	.word	0x20000000
 800232c:	3ca3d70a 	.word	0x3ca3d70a
 8002330:	20000004 	.word	0x20000004
 8002334:	42820000 	.word	0x42820000
 8002338:	3d23d70a 	.word	0x3d23d70a
 800233c:	42960000 	.word	0x42960000
 8002340:	3cf5c28f 	.word	0x3cf5c28f
 8002344:	428c0000 	.word	0x428c0000
     	}
     	/*Medium+ mode*/
     	if(RxData[0] == 'e')
 8002348:	4b95      	ldr	r3, [pc, #596]	; (80025a0 <HAL_UART_RxCpltCallback+0x5e0>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b65      	cmp	r3, #101	; 0x65
 800234e:	d122      	bne.n	8002396 <HAL_UART_RxCpltCallback+0x3d6>
     	{
    	 	 ARR=3;
 8002350:	4b94      	ldr	r3, [pc, #592]	; (80025a4 <HAL_UART_RxCpltCallback+0x5e4>)
 8002352:	2203      	movs	r2, #3
 8002354:	601a      	str	r2, [r3, #0]
     	 	 basespeedr = 190;
 8002356:	4b94      	ldr	r3, [pc, #592]	; (80025a8 <HAL_UART_RxCpltCallback+0x5e8>)
 8002358:	22be      	movs	r2, #190	; 0xbe
 800235a:	601a      	str	r2, [r3, #0]
     	 	 basespeedl = 190;
 800235c:	4b93      	ldr	r3, [pc, #588]	; (80025ac <HAL_UART_RxCpltCallback+0x5ec>)
 800235e:	22be      	movs	r2, #190	; 0xbe
 8002360:	601a      	str	r2, [r3, #0]
     	 	 maxspeedl = 145;
 8002362:	4b93      	ldr	r3, [pc, #588]	; (80025b0 <HAL_UART_RxCpltCallback+0x5f0>)
 8002364:	2291      	movs	r2, #145	; 0x91
 8002366:	601a      	str	r2, [r3, #0]
     	 	 maxspeedr = 145;
 8002368:	4b92      	ldr	r3, [pc, #584]	; (80025b4 <HAL_UART_RxCpltCallback+0x5f4>)
 800236a:	2291      	movs	r2, #145	; 0x91
 800236c:	601a      	str	r2, [r3, #0]
     	 	 Sharp_bend_speed_right = -100;
 800236e:	4b92      	ldr	r3, [pc, #584]	; (80025b8 <HAL_UART_RxCpltCallback+0x5f8>)
 8002370:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8002374:	601a      	str	r2, [r3, #0]
     	 	 Sharp_bend_speed_left = 100;
 8002376:	4b91      	ldr	r3, [pc, #580]	; (80025bc <HAL_UART_RxCpltCallback+0x5fc>)
 8002378:	2264      	movs	r2, #100	; 0x64
 800237a:	601a      	str	r2, [r3, #0]
     	 	 Bend_speed_right = -76;
 800237c:	4b90      	ldr	r3, [pc, #576]	; (80025c0 <HAL_UART_RxCpltCallback+0x600>)
 800237e:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8002382:	601a      	str	r2, [r3, #0]
     	 	 Bend_speed_left = 125;
 8002384:	4b8f      	ldr	r3, [pc, #572]	; (80025c4 <HAL_UART_RxCpltCallback+0x604>)
 8002386:	227d      	movs	r2, #125	; 0x7d
 8002388:	601a      	str	r2, [r3, #0]
     	 	 Kp = 0.03;
 800238a:	4b8f      	ldr	r3, [pc, #572]	; (80025c8 <HAL_UART_RxCpltCallback+0x608>)
 800238c:	4a8f      	ldr	r2, [pc, #572]	; (80025cc <HAL_UART_RxCpltCallback+0x60c>)
 800238e:	601a      	str	r2, [r3, #0]
     	 	 Kd = 70;
 8002390:	4b8f      	ldr	r3, [pc, #572]	; (80025d0 <HAL_UART_RxCpltCallback+0x610>)
 8002392:	4a90      	ldr	r2, [pc, #576]	; (80025d4 <HAL_UART_RxCpltCallback+0x614>)
 8002394:	601a      	str	r2, [r3, #0]
     	}
     	/*HIGH mode*/
     	if(RxData[0] == 'c')
 8002396:	4b82      	ldr	r3, [pc, #520]	; (80025a0 <HAL_UART_RxCpltCallback+0x5e0>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b63      	cmp	r3, #99	; 0x63
 800239c:	d122      	bne.n	80023e4 <HAL_UART_RxCpltCallback+0x424>
     	{
    	 	ARR=3;
 800239e:	4b81      	ldr	r3, [pc, #516]	; (80025a4 <HAL_UART_RxCpltCallback+0x5e4>)
 80023a0:	2203      	movs	r2, #3
 80023a2:	601a      	str	r2, [r3, #0]
     	 	basespeedr = 225;
 80023a4:	4b80      	ldr	r3, [pc, #512]	; (80025a8 <HAL_UART_RxCpltCallback+0x5e8>)
 80023a6:	22e1      	movs	r2, #225	; 0xe1
 80023a8:	601a      	str	r2, [r3, #0]
     	 	basespeedl = 225;
 80023aa:	4b80      	ldr	r3, [pc, #512]	; (80025ac <HAL_UART_RxCpltCallback+0x5ec>)
 80023ac:	22e1      	movs	r2, #225	; 0xe1
 80023ae:	601a      	str	r2, [r3, #0]
     	 	maxspeedl = 150;
 80023b0:	4b7f      	ldr	r3, [pc, #508]	; (80025b0 <HAL_UART_RxCpltCallback+0x5f0>)
 80023b2:	2296      	movs	r2, #150	; 0x96
 80023b4:	601a      	str	r2, [r3, #0]
     	 	maxspeedr = 150;
 80023b6:	4b7f      	ldr	r3, [pc, #508]	; (80025b4 <HAL_UART_RxCpltCallback+0x5f4>)
 80023b8:	2296      	movs	r2, #150	; 0x96
 80023ba:	601a      	str	r2, [r3, #0]
     	 	Sharp_bend_speed_right = -73;
 80023bc:	4b7e      	ldr	r3, [pc, #504]	; (80025b8 <HAL_UART_RxCpltCallback+0x5f8>)
 80023be:	f06f 0248 	mvn.w	r2, #72	; 0x48
 80023c2:	601a      	str	r2, [r3, #0]
     	 	Sharp_bend_speed_left = 78;
 80023c4:	4b7d      	ldr	r3, [pc, #500]	; (80025bc <HAL_UART_RxCpltCallback+0x5fc>)
 80023c6:	224e      	movs	r2, #78	; 0x4e
 80023c8:	601a      	str	r2, [r3, #0]
     	 	Bend_speed_right = -76;
 80023ca:	4b7d      	ldr	r3, [pc, #500]	; (80025c0 <HAL_UART_RxCpltCallback+0x600>)
 80023cc:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 80023d0:	601a      	str	r2, [r3, #0]
     	 	Bend_speed_left = 125;
 80023d2:	4b7c      	ldr	r3, [pc, #496]	; (80025c4 <HAL_UART_RxCpltCallback+0x604>)
 80023d4:	227d      	movs	r2, #125	; 0x7d
 80023d6:	601a      	str	r2, [r3, #0]
     	 	Kp = 0.04;
 80023d8:	4b7b      	ldr	r3, [pc, #492]	; (80025c8 <HAL_UART_RxCpltCallback+0x608>)
 80023da:	4a7f      	ldr	r2, [pc, #508]	; (80025d8 <HAL_UART_RxCpltCallback+0x618>)
 80023dc:	601a      	str	r2, [r3, #0]
     	 	Kd = 75;
 80023de:	4b7c      	ldr	r3, [pc, #496]	; (80025d0 <HAL_UART_RxCpltCallback+0x610>)
 80023e0:	4a7e      	ldr	r2, [pc, #504]	; (80025dc <HAL_UART_RxCpltCallback+0x61c>)
 80023e2:	601a      	str	r2, [r3, #0]
     	}
     	/*HIGH+ mode*/
     	if(RxData[0] == 'f')
 80023e4:	4b6e      	ldr	r3, [pc, #440]	; (80025a0 <HAL_UART_RxCpltCallback+0x5e0>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b66      	cmp	r3, #102	; 0x66
 80023ea:	d122      	bne.n	8002432 <HAL_UART_RxCpltCallback+0x472>
     	{
    	 	ARR=3;
 80023ec:	4b6d      	ldr	r3, [pc, #436]	; (80025a4 <HAL_UART_RxCpltCallback+0x5e4>)
 80023ee:	2203      	movs	r2, #3
 80023f0:	601a      	str	r2, [r3, #0]
    	 	basespeedr = 250;
 80023f2:	4b6d      	ldr	r3, [pc, #436]	; (80025a8 <HAL_UART_RxCpltCallback+0x5e8>)
 80023f4:	22fa      	movs	r2, #250	; 0xfa
 80023f6:	601a      	str	r2, [r3, #0]
    	 	basespeedl = 250;
 80023f8:	4b6c      	ldr	r3, [pc, #432]	; (80025ac <HAL_UART_RxCpltCallback+0x5ec>)
 80023fa:	22fa      	movs	r2, #250	; 0xfa
 80023fc:	601a      	str	r2, [r3, #0]
    	 	maxspeedl=160;
 80023fe:	4b6c      	ldr	r3, [pc, #432]	; (80025b0 <HAL_UART_RxCpltCallback+0x5f0>)
 8002400:	22a0      	movs	r2, #160	; 0xa0
 8002402:	601a      	str	r2, [r3, #0]
    	 	maxspeedr=160;
 8002404:	4b6b      	ldr	r3, [pc, #428]	; (80025b4 <HAL_UART_RxCpltCallback+0x5f4>)
 8002406:	22a0      	movs	r2, #160	; 0xa0
 8002408:	601a      	str	r2, [r3, #0]
    	 	Sharp_bend_speed_right = -65;
 800240a:	4b6b      	ldr	r3, [pc, #428]	; (80025b8 <HAL_UART_RxCpltCallback+0x5f8>)
 800240c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002410:	601a      	str	r2, [r3, #0]
     		Sharp_bend_speed_left = 70;
 8002412:	4b6a      	ldr	r3, [pc, #424]	; (80025bc <HAL_UART_RxCpltCallback+0x5fc>)
 8002414:	2246      	movs	r2, #70	; 0x46
 8002416:	601a      	str	r2, [r3, #0]
     		Bend_speed_right=-76;
 8002418:	4b69      	ldr	r3, [pc, #420]	; (80025c0 <HAL_UART_RxCpltCallback+0x600>)
 800241a:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 800241e:	601a      	str	r2, [r3, #0]
     		Bend_speed_left=125;
 8002420:	4b68      	ldr	r3, [pc, #416]	; (80025c4 <HAL_UART_RxCpltCallback+0x604>)
 8002422:	227d      	movs	r2, #125	; 0x7d
 8002424:	601a      	str	r2, [r3, #0]
     		Kp = 0.04;
 8002426:	4b68      	ldr	r3, [pc, #416]	; (80025c8 <HAL_UART_RxCpltCallback+0x608>)
 8002428:	4a6b      	ldr	r2, [pc, #428]	; (80025d8 <HAL_UART_RxCpltCallback+0x618>)
 800242a:	601a      	str	r2, [r3, #0]
     	 	Kd=75;
 800242c:	4b68      	ldr	r3, [pc, #416]	; (80025d0 <HAL_UART_RxCpltCallback+0x610>)
 800242e:	4a6b      	ldr	r2, [pc, #428]	; (80025dc <HAL_UART_RxCpltCallback+0x61c>)
 8002430:	601a      	str	r2, [r3, #0]
     	}
     	/*TRUBO mode*/
     	if(RxData[0] == 'i')
 8002432:	4b5b      	ldr	r3, [pc, #364]	; (80025a0 <HAL_UART_RxCpltCallback+0x5e0>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b69      	cmp	r3, #105	; 0x69
 8002438:	d124      	bne.n	8002484 <HAL_UART_RxCpltCallback+0x4c4>
     	{
    	 	ARR=3;
 800243a:	4b5a      	ldr	r3, [pc, #360]	; (80025a4 <HAL_UART_RxCpltCallback+0x5e4>)
 800243c:	2203      	movs	r2, #3
 800243e:	601a      	str	r2, [r3, #0]
    	 	basespeedr = 270;
 8002440:	4b59      	ldr	r3, [pc, #356]	; (80025a8 <HAL_UART_RxCpltCallback+0x5e8>)
 8002442:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8002446:	601a      	str	r2, [r3, #0]
    	 	basespeedl = 270;
 8002448:	4b58      	ldr	r3, [pc, #352]	; (80025ac <HAL_UART_RxCpltCallback+0x5ec>)
 800244a:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800244e:	601a      	str	r2, [r3, #0]
    	 	maxspeedl = 150;
 8002450:	4b57      	ldr	r3, [pc, #348]	; (80025b0 <HAL_UART_RxCpltCallback+0x5f0>)
 8002452:	2296      	movs	r2, #150	; 0x96
 8002454:	601a      	str	r2, [r3, #0]
    	 	maxspeedr = 150;
 8002456:	4b57      	ldr	r3, [pc, #348]	; (80025b4 <HAL_UART_RxCpltCallback+0x5f4>)
 8002458:	2296      	movs	r2, #150	; 0x96
 800245a:	601a      	str	r2, [r3, #0]
    	 	Sharp_bend_speed_right = -65;
 800245c:	4b56      	ldr	r3, [pc, #344]	; (80025b8 <HAL_UART_RxCpltCallback+0x5f8>)
 800245e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002462:	601a      	str	r2, [r3, #0]
    	 	Sharp_bend_speed_left = 70;
 8002464:	4b55      	ldr	r3, [pc, #340]	; (80025bc <HAL_UART_RxCpltCallback+0x5fc>)
 8002466:	2246      	movs	r2, #70	; 0x46
 8002468:	601a      	str	r2, [r3, #0]
    	 	Bend_speed_right = -76;
 800246a:	4b55      	ldr	r3, [pc, #340]	; (80025c0 <HAL_UART_RxCpltCallback+0x600>)
 800246c:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8002470:	601a      	str	r2, [r3, #0]
    	 	Bend_speed_left = 130;
 8002472:	4b54      	ldr	r3, [pc, #336]	; (80025c4 <HAL_UART_RxCpltCallback+0x604>)
 8002474:	2282      	movs	r2, #130	; 0x82
 8002476:	601a      	str	r2, [r3, #0]
    	 	Kp = 0.045;
 8002478:	4b53      	ldr	r3, [pc, #332]	; (80025c8 <HAL_UART_RxCpltCallback+0x608>)
 800247a:	4a59      	ldr	r2, [pc, #356]	; (80025e0 <HAL_UART_RxCpltCallback+0x620>)
 800247c:	601a      	str	r2, [r3, #0]
    	 	Kd = 75;
 800247e:	4b54      	ldr	r3, [pc, #336]	; (80025d0 <HAL_UART_RxCpltCallback+0x610>)
 8002480:	4a56      	ldr	r2, [pc, #344]	; (80025dc <HAL_UART_RxCpltCallback+0x61c>)
 8002482:	601a      	str	r2, [r3, #0]
     	}
     	/*TRUBO+ mode*/
     	if(RxData[0] == 'j')
 8002484:	4b46      	ldr	r3, [pc, #280]	; (80025a0 <HAL_UART_RxCpltCallback+0x5e0>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b6a      	cmp	r3, #106	; 0x6a
 800248a:	d124      	bne.n	80024d6 <HAL_UART_RxCpltCallback+0x516>
     	{
     	    ARR=3;
 800248c:	4b45      	ldr	r3, [pc, #276]	; (80025a4 <HAL_UART_RxCpltCallback+0x5e4>)
 800248e:	2203      	movs	r2, #3
 8002490:	601a      	str	r2, [r3, #0]
     	    basespeedr = 295;
 8002492:	4b45      	ldr	r3, [pc, #276]	; (80025a8 <HAL_UART_RxCpltCallback+0x5e8>)
 8002494:	f240 1227 	movw	r2, #295	; 0x127
 8002498:	601a      	str	r2, [r3, #0]
     	    basespeedl = 295;
 800249a:	4b44      	ldr	r3, [pc, #272]	; (80025ac <HAL_UART_RxCpltCallback+0x5ec>)
 800249c:	f240 1227 	movw	r2, #295	; 0x127
 80024a0:	601a      	str	r2, [r3, #0]
     	    maxspeedl = 165;
 80024a2:	4b43      	ldr	r3, [pc, #268]	; (80025b0 <HAL_UART_RxCpltCallback+0x5f0>)
 80024a4:	22a5      	movs	r2, #165	; 0xa5
 80024a6:	601a      	str	r2, [r3, #0]
     	    maxspeedr = 165;
 80024a8:	4b42      	ldr	r3, [pc, #264]	; (80025b4 <HAL_UART_RxCpltCallback+0x5f4>)
 80024aa:	22a5      	movs	r2, #165	; 0xa5
 80024ac:	601a      	str	r2, [r3, #0]
     	    Sharp_bend_speed_right = -70;
 80024ae:	4b42      	ldr	r3, [pc, #264]	; (80025b8 <HAL_UART_RxCpltCallback+0x5f8>)
 80024b0:	f06f 0245 	mvn.w	r2, #69	; 0x45
 80024b4:	601a      	str	r2, [r3, #0]
     	    Sharp_bend_speed_left = 73;
 80024b6:	4b41      	ldr	r3, [pc, #260]	; (80025bc <HAL_UART_RxCpltCallback+0x5fc>)
 80024b8:	2249      	movs	r2, #73	; 0x49
 80024ba:	601a      	str	r2, [r3, #0]
     	    Bend_speed_right = -76;
 80024bc:	4b40      	ldr	r3, [pc, #256]	; (80025c0 <HAL_UART_RxCpltCallback+0x600>)
 80024be:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 80024c2:	601a      	str	r2, [r3, #0]
     	    Bend_speed_left = 130;
 80024c4:	4b3f      	ldr	r3, [pc, #252]	; (80025c4 <HAL_UART_RxCpltCallback+0x604>)
 80024c6:	2282      	movs	r2, #130	; 0x82
 80024c8:	601a      	str	r2, [r3, #0]
     	    Kp = 0.05;
 80024ca:	4b3f      	ldr	r3, [pc, #252]	; (80025c8 <HAL_UART_RxCpltCallback+0x608>)
 80024cc:	4a45      	ldr	r2, [pc, #276]	; (80025e4 <HAL_UART_RxCpltCallback+0x624>)
 80024ce:	601a      	str	r2, [r3, #0]
     	    Kd = 80;
 80024d0:	4b3f      	ldr	r3, [pc, #252]	; (80025d0 <HAL_UART_RxCpltCallback+0x610>)
 80024d2:	4a45      	ldr	r2, [pc, #276]	; (80025e8 <HAL_UART_RxCpltCallback+0x628>)
 80024d4:	601a      	str	r2, [r3, #0]
     	}
     	/*ULTRA mode*/
     	if(RxData[0] == 'k')
 80024d6:	4b32      	ldr	r3, [pc, #200]	; (80025a0 <HAL_UART_RxCpltCallback+0x5e0>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b6b      	cmp	r3, #107	; 0x6b
 80024dc:	d124      	bne.n	8002528 <HAL_UART_RxCpltCallback+0x568>
     	{
     	    ARR=3;
 80024de:	4b31      	ldr	r3, [pc, #196]	; (80025a4 <HAL_UART_RxCpltCallback+0x5e4>)
 80024e0:	2203      	movs	r2, #3
 80024e2:	601a      	str	r2, [r3, #0]
     	    basespeedr = 315;
 80024e4:	4b30      	ldr	r3, [pc, #192]	; (80025a8 <HAL_UART_RxCpltCallback+0x5e8>)
 80024e6:	f240 123b 	movw	r2, #315	; 0x13b
 80024ea:	601a      	str	r2, [r3, #0]
     	    basespeedl = 315;
 80024ec:	4b2f      	ldr	r3, [pc, #188]	; (80025ac <HAL_UART_RxCpltCallback+0x5ec>)
 80024ee:	f240 123b 	movw	r2, #315	; 0x13b
 80024f2:	601a      	str	r2, [r3, #0]
     	    maxspeedl = 168;//170
 80024f4:	4b2e      	ldr	r3, [pc, #184]	; (80025b0 <HAL_UART_RxCpltCallback+0x5f0>)
 80024f6:	22a8      	movs	r2, #168	; 0xa8
 80024f8:	601a      	str	r2, [r3, #0]
     	    maxspeedr = 168;
 80024fa:	4b2e      	ldr	r3, [pc, #184]	; (80025b4 <HAL_UART_RxCpltCallback+0x5f4>)
 80024fc:	22a8      	movs	r2, #168	; 0xa8
 80024fe:	601a      	str	r2, [r3, #0]
     	    Sharp_bend_speed_right = -70;//70;
 8002500:	4b2d      	ldr	r3, [pc, #180]	; (80025b8 <HAL_UART_RxCpltCallback+0x5f8>)
 8002502:	f06f 0245 	mvn.w	r2, #69	; 0x45
 8002506:	601a      	str	r2, [r3, #0]
     	    Sharp_bend_speed_left = 73;//73
 8002508:	4b2c      	ldr	r3, [pc, #176]	; (80025bc <HAL_UART_RxCpltCallback+0x5fc>)
 800250a:	2249      	movs	r2, #73	; 0x49
 800250c:	601a      	str	r2, [r3, #0]
     	    Bend_speed_right = -76;
 800250e:	4b2c      	ldr	r3, [pc, #176]	; (80025c0 <HAL_UART_RxCpltCallback+0x600>)
 8002510:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8002514:	601a      	str	r2, [r3, #0]
     	    Bend_speed_left = 128;
 8002516:	4b2b      	ldr	r3, [pc, #172]	; (80025c4 <HAL_UART_RxCpltCallback+0x604>)
 8002518:	2280      	movs	r2, #128	; 0x80
 800251a:	601a      	str	r2, [r3, #0]
     	    Kp = 0.067;//0.07
 800251c:	4b2a      	ldr	r3, [pc, #168]	; (80025c8 <HAL_UART_RxCpltCallback+0x608>)
 800251e:	4a33      	ldr	r2, [pc, #204]	; (80025ec <HAL_UART_RxCpltCallback+0x62c>)
 8002520:	601a      	str	r2, [r3, #0]
     	    Kd = 95;//95
 8002522:	4b2b      	ldr	r3, [pc, #172]	; (80025d0 <HAL_UART_RxCpltCallback+0x610>)
 8002524:	4a32      	ldr	r2, [pc, #200]	; (80025f0 <HAL_UART_RxCpltCallback+0x630>)
 8002526:	601a      	str	r2, [r3, #0]
     	 }
     	 /*ULTRA+ mode*/
     	 if(RxData[0] == 'l')
 8002528:	4b1d      	ldr	r3, [pc, #116]	; (80025a0 <HAL_UART_RxCpltCallback+0x5e0>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b6c      	cmp	r3, #108	; 0x6c
 800252e:	d122      	bne.n	8002576 <HAL_UART_RxCpltCallback+0x5b6>
     	 {
     	     ARR=4;
 8002530:	4b1c      	ldr	r3, [pc, #112]	; (80025a4 <HAL_UART_RxCpltCallback+0x5e4>)
 8002532:	2204      	movs	r2, #4
 8002534:	601a      	str	r2, [r3, #0]
     	     basespeedr = 102;
 8002536:	4b1c      	ldr	r3, [pc, #112]	; (80025a8 <HAL_UART_RxCpltCallback+0x5e8>)
 8002538:	2266      	movs	r2, #102	; 0x66
 800253a:	601a      	str	r2, [r3, #0]
     	     basespeedl = 102;
 800253c:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <HAL_UART_RxCpltCallback+0x5ec>)
 800253e:	2266      	movs	r2, #102	; 0x66
 8002540:	601a      	str	r2, [r3, #0]
     	     maxspeedl = 155;//170
 8002542:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <HAL_UART_RxCpltCallback+0x5f0>)
 8002544:	229b      	movs	r2, #155	; 0x9b
 8002546:	601a      	str	r2, [r3, #0]
     	     maxspeedr = 155;
 8002548:	4b1a      	ldr	r3, [pc, #104]	; (80025b4 <HAL_UART_RxCpltCallback+0x5f4>)
 800254a:	229b      	movs	r2, #155	; 0x9b
 800254c:	601a      	str	r2, [r3, #0]
     	     Sharp_bend_speed_right = -90;//70;
 800254e:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <HAL_UART_RxCpltCallback+0x5f8>)
 8002550:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8002554:	601a      	str	r2, [r3, #0]
     	     Sharp_bend_speed_left = 185;//73
 8002556:	4b19      	ldr	r3, [pc, #100]	; (80025bc <HAL_UART_RxCpltCallback+0x5fc>)
 8002558:	22b9      	movs	r2, #185	; 0xb9
 800255a:	601a      	str	r2, [r3, #0]
     	     Bend_speed_right = -50;
 800255c:	4b18      	ldr	r3, [pc, #96]	; (80025c0 <HAL_UART_RxCpltCallback+0x600>)
 800255e:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8002562:	601a      	str	r2, [r3, #0]
     	     Bend_speed_left = 100;
 8002564:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <HAL_UART_RxCpltCallback+0x604>)
 8002566:	2264      	movs	r2, #100	; 0x64
 8002568:	601a      	str	r2, [r3, #0]
     	     Kp = 0.02;//0.027
 800256a:	4b17      	ldr	r3, [pc, #92]	; (80025c8 <HAL_UART_RxCpltCallback+0x608>)
 800256c:	4a21      	ldr	r2, [pc, #132]	; (80025f4 <HAL_UART_RxCpltCallback+0x634>)
 800256e:	601a      	str	r2, [r3, #0]
     	     Kd = 350;//75
 8002570:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <HAL_UART_RxCpltCallback+0x610>)
 8002572:	4a21      	ldr	r2, [pc, #132]	; (80025f8 <HAL_UART_RxCpltCallback+0x638>)
 8002574:	601a      	str	r2, [r3, #0]
     	  }
     	  /*EXTREME mode*/
     	  if(RxData[0] == 'm')
 8002576:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <HAL_UART_RxCpltCallback+0x5e0>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b6d      	cmp	r3, #109	; 0x6d
 800257c:	d152      	bne.n	8002624 <HAL_UART_RxCpltCallback+0x664>
     	  {
     	     ARR=4;
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <HAL_UART_RxCpltCallback+0x5e4>)
 8002580:	2204      	movs	r2, #4
 8002582:	601a      	str	r2, [r3, #0]
     	     basespeedr = 102;
 8002584:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <HAL_UART_RxCpltCallback+0x5e8>)
 8002586:	2266      	movs	r2, #102	; 0x66
 8002588:	601a      	str	r2, [r3, #0]
     	     basespeedl = 102;
 800258a:	4b08      	ldr	r3, [pc, #32]	; (80025ac <HAL_UART_RxCpltCallback+0x5ec>)
 800258c:	2266      	movs	r2, #102	; 0x66
 800258e:	601a      	str	r2, [r3, #0]
     	     maxspeedl = 155;//170
 8002590:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <HAL_UART_RxCpltCallback+0x5f0>)
 8002592:	229b      	movs	r2, #155	; 0x9b
 8002594:	601a      	str	r2, [r3, #0]
     	     maxspeedr = 155;
 8002596:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <HAL_UART_RxCpltCallback+0x5f4>)
 8002598:	229b      	movs	r2, #155	; 0x9b
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	e02e      	b.n	80025fc <HAL_UART_RxCpltCallback+0x63c>
 800259e:	bf00      	nop
 80025a0:	200002b4 	.word	0x200002b4
 80025a4:	2000001c 	.word	0x2000001c
 80025a8:	20000014 	.word	0x20000014
 80025ac:	20000018 	.word	0x20000018
 80025b0:	20000010 	.word	0x20000010
 80025b4:	2000000c 	.word	0x2000000c
 80025b8:	20000020 	.word	0x20000020
 80025bc:	20000024 	.word	0x20000024
 80025c0:	20000028 	.word	0x20000028
 80025c4:	2000002c 	.word	0x2000002c
 80025c8:	20000000 	.word	0x20000000
 80025cc:	3cf5c28f 	.word	0x3cf5c28f
 80025d0:	20000004 	.word	0x20000004
 80025d4:	428c0000 	.word	0x428c0000
 80025d8:	3d23d70a 	.word	0x3d23d70a
 80025dc:	42960000 	.word	0x42960000
 80025e0:	3d3851ec 	.word	0x3d3851ec
 80025e4:	3d4ccccd 	.word	0x3d4ccccd
 80025e8:	42a00000 	.word	0x42a00000
 80025ec:	3d89374c 	.word	0x3d89374c
 80025f0:	42be0000 	.word	0x42be0000
 80025f4:	3ca3d70a 	.word	0x3ca3d70a
 80025f8:	43af0000 	.word	0x43af0000
     	     Sharp_bend_speed_right = -90;//70;
 80025fc:	4b50      	ldr	r3, [pc, #320]	; (8002740 <HAL_UART_RxCpltCallback+0x780>)
 80025fe:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8002602:	601a      	str	r2, [r3, #0]
     	     Sharp_bend_speed_left = 185;//73
 8002604:	4b4f      	ldr	r3, [pc, #316]	; (8002744 <HAL_UART_RxCpltCallback+0x784>)
 8002606:	22b9      	movs	r2, #185	; 0xb9
 8002608:	601a      	str	r2, [r3, #0]
     	     Bend_speed_right = -50;
 800260a:	4b4f      	ldr	r3, [pc, #316]	; (8002748 <HAL_UART_RxCpltCallback+0x788>)
 800260c:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8002610:	601a      	str	r2, [r3, #0]
     	     Bend_speed_left = 100;
 8002612:	4b4e      	ldr	r3, [pc, #312]	; (800274c <HAL_UART_RxCpltCallback+0x78c>)
 8002614:	2264      	movs	r2, #100	; 0x64
 8002616:	601a      	str	r2, [r3, #0]
     	     Kp = 0.02;//0.027
 8002618:	4b4d      	ldr	r3, [pc, #308]	; (8002750 <HAL_UART_RxCpltCallback+0x790>)
 800261a:	4a4e      	ldr	r2, [pc, #312]	; (8002754 <HAL_UART_RxCpltCallback+0x794>)
 800261c:	601a      	str	r2, [r3, #0]
     	     Kd = 350;//75
 800261e:	4b4e      	ldr	r3, [pc, #312]	; (8002758 <HAL_UART_RxCpltCallback+0x798>)
 8002620:	4a4e      	ldr	r2, [pc, #312]	; (800275c <HAL_UART_RxCpltCallback+0x79c>)
 8002622:	601a      	str	r2, [r3, #0]
     	  }
     	  /*EXTREME+ mode*/
     	  if(RxData[0] == 'n')
 8002624:	4b4e      	ldr	r3, [pc, #312]	; (8002760 <HAL_UART_RxCpltCallback+0x7a0>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b6e      	cmp	r3, #110	; 0x6e
 800262a:	d122      	bne.n	8002672 <HAL_UART_RxCpltCallback+0x6b2>
     	  {
     	     ARR=4;
 800262c:	4b4d      	ldr	r3, [pc, #308]	; (8002764 <HAL_UART_RxCpltCallback+0x7a4>)
 800262e:	2204      	movs	r2, #4
 8002630:	601a      	str	r2, [r3, #0]
     	     basespeedr = 102;
 8002632:	4b4d      	ldr	r3, [pc, #308]	; (8002768 <HAL_UART_RxCpltCallback+0x7a8>)
 8002634:	2266      	movs	r2, #102	; 0x66
 8002636:	601a      	str	r2, [r3, #0]
     	     basespeedl = 102;
 8002638:	4b4c      	ldr	r3, [pc, #304]	; (800276c <HAL_UART_RxCpltCallback+0x7ac>)
 800263a:	2266      	movs	r2, #102	; 0x66
 800263c:	601a      	str	r2, [r3, #0]
     	     maxspeedl = 155;//170
 800263e:	4b4c      	ldr	r3, [pc, #304]	; (8002770 <HAL_UART_RxCpltCallback+0x7b0>)
 8002640:	229b      	movs	r2, #155	; 0x9b
 8002642:	601a      	str	r2, [r3, #0]
     	     maxspeedr = 155;
 8002644:	4b4b      	ldr	r3, [pc, #300]	; (8002774 <HAL_UART_RxCpltCallback+0x7b4>)
 8002646:	229b      	movs	r2, #155	; 0x9b
 8002648:	601a      	str	r2, [r3, #0]
     	     Sharp_bend_speed_right = -90;//70;
 800264a:	4b3d      	ldr	r3, [pc, #244]	; (8002740 <HAL_UART_RxCpltCallback+0x780>)
 800264c:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8002650:	601a      	str	r2, [r3, #0]
     	     Sharp_bend_speed_left = 185;//73
 8002652:	4b3c      	ldr	r3, [pc, #240]	; (8002744 <HAL_UART_RxCpltCallback+0x784>)
 8002654:	22b9      	movs	r2, #185	; 0xb9
 8002656:	601a      	str	r2, [r3, #0]
     	     Bend_speed_right = -50;
 8002658:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <HAL_UART_RxCpltCallback+0x788>)
 800265a:	f06f 0231 	mvn.w	r2, #49	; 0x31
 800265e:	601a      	str	r2, [r3, #0]
     	     Bend_speed_left = 100;
 8002660:	4b3a      	ldr	r3, [pc, #232]	; (800274c <HAL_UART_RxCpltCallback+0x78c>)
 8002662:	2264      	movs	r2, #100	; 0x64
 8002664:	601a      	str	r2, [r3, #0]
     	     Kp = 0.02;//0.027
 8002666:	4b3a      	ldr	r3, [pc, #232]	; (8002750 <HAL_UART_RxCpltCallback+0x790>)
 8002668:	4a3a      	ldr	r2, [pc, #232]	; (8002754 <HAL_UART_RxCpltCallback+0x794>)
 800266a:	601a      	str	r2, [r3, #0]
     	     Kd = 350;//75
 800266c:	4b3a      	ldr	r3, [pc, #232]	; (8002758 <HAL_UART_RxCpltCallback+0x798>)
 800266e:	4a3b      	ldr	r2, [pc, #236]	; (800275c <HAL_UART_RxCpltCallback+0x79c>)
 8002670:	601a      	str	r2, [r3, #0]
     	  }
     	  /*SPECIAL mode*/
     	  if(RxData[0] == 'h')
 8002672:	4b3b      	ldr	r3, [pc, #236]	; (8002760 <HAL_UART_RxCpltCallback+0x7a0>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b68      	cmp	r3, #104	; 0x68
 8002678:	d122      	bne.n	80026c0 <HAL_UART_RxCpltCallback+0x700>
     	  {
     	     ARR=4;
 800267a:	4b3a      	ldr	r3, [pc, #232]	; (8002764 <HAL_UART_RxCpltCallback+0x7a4>)
 800267c:	2204      	movs	r2, #4
 800267e:	601a      	str	r2, [r3, #0]
     	     basespeedr = 107;
 8002680:	4b39      	ldr	r3, [pc, #228]	; (8002768 <HAL_UART_RxCpltCallback+0x7a8>)
 8002682:	226b      	movs	r2, #107	; 0x6b
 8002684:	601a      	str	r2, [r3, #0]
     	     basespeedl = 107;
 8002686:	4b39      	ldr	r3, [pc, #228]	; (800276c <HAL_UART_RxCpltCallback+0x7ac>)
 8002688:	226b      	movs	r2, #107	; 0x6b
 800268a:	601a      	str	r2, [r3, #0]
     	     maxspeedl = 159;//170
 800268c:	4b38      	ldr	r3, [pc, #224]	; (8002770 <HAL_UART_RxCpltCallback+0x7b0>)
 800268e:	229f      	movs	r2, #159	; 0x9f
 8002690:	601a      	str	r2, [r3, #0]
     	     maxspeedr = 159;
 8002692:	4b38      	ldr	r3, [pc, #224]	; (8002774 <HAL_UART_RxCpltCallback+0x7b4>)
 8002694:	229f      	movs	r2, #159	; 0x9f
 8002696:	601a      	str	r2, [r3, #0]
     	     Sharp_bend_speed_right = -90;//70;
 8002698:	4b29      	ldr	r3, [pc, #164]	; (8002740 <HAL_UART_RxCpltCallback+0x780>)
 800269a:	f06f 0259 	mvn.w	r2, #89	; 0x59
 800269e:	601a      	str	r2, [r3, #0]
     	     Sharp_bend_speed_left = 185;//73
 80026a0:	4b28      	ldr	r3, [pc, #160]	; (8002744 <HAL_UART_RxCpltCallback+0x784>)
 80026a2:	22b9      	movs	r2, #185	; 0xb9
 80026a4:	601a      	str	r2, [r3, #0]
     	     Bend_speed_right = -50;
 80026a6:	4b28      	ldr	r3, [pc, #160]	; (8002748 <HAL_UART_RxCpltCallback+0x788>)
 80026a8:	f06f 0231 	mvn.w	r2, #49	; 0x31
 80026ac:	601a      	str	r2, [r3, #0]
     	     Bend_speed_left = 100;
 80026ae:	4b27      	ldr	r3, [pc, #156]	; (800274c <HAL_UART_RxCpltCallback+0x78c>)
 80026b0:	2264      	movs	r2, #100	; 0x64
 80026b2:	601a      	str	r2, [r3, #0]
     	     Kp = 0.02;//0.07
 80026b4:	4b26      	ldr	r3, [pc, #152]	; (8002750 <HAL_UART_RxCpltCallback+0x790>)
 80026b6:	4a27      	ldr	r2, [pc, #156]	; (8002754 <HAL_UART_RxCpltCallback+0x794>)
 80026b8:	601a      	str	r2, [r3, #0]
     	     Kd = 350;//95
 80026ba:	4b27      	ldr	r3, [pc, #156]	; (8002758 <HAL_UART_RxCpltCallback+0x798>)
 80026bc:	4a27      	ldr	r2, [pc, #156]	; (800275c <HAL_UART_RxCpltCallback+0x79c>)
 80026be:	601a      	str	r2, [r3, #0]
     	    //HAL_GPIO_TogglePin(LD_GPIO_Port, LD_Pin);
     	  }
     	/*Send some data through UART3-USB terminal*/
     	Battery_ADC_measurement();
 80026c0:	f7fe ff1e 	bl	8001500 <Battery_ADC_measurement>

     	/*Print received data to UART-USB*/
     	SN_UART_Send(&huart3,"rxData: { ",(uint8_t*)RxData);
 80026c4:	4a26      	ldr	r2, [pc, #152]	; (8002760 <HAL_UART_RxCpltCallback+0x7a0>)
 80026c6:	492c      	ldr	r1, [pc, #176]	; (8002778 <HAL_UART_RxCpltCallback+0x7b8>)
 80026c8:	482c      	ldr	r0, [pc, #176]	; (800277c <HAL_UART_RxCpltCallback+0x7bc>)
 80026ca:	f7fe fcd7 	bl	800107c <SN_UART_Send>
     	for(int i = 0; i <= 27 ;i++)
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	e00b      	b.n	80026ec <HAL_UART_RxCpltCallback+0x72c>
     		SN_UART_Send(&huart3,"%c ",RxData[i]);
 80026d4:	4a22      	ldr	r2, [pc, #136]	; (8002760 <HAL_UART_RxCpltCallback+0x7a0>)
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4413      	add	r3, r2
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	461a      	mov	r2, r3
 80026de:	4928      	ldr	r1, [pc, #160]	; (8002780 <HAL_UART_RxCpltCallback+0x7c0>)
 80026e0:	4826      	ldr	r0, [pc, #152]	; (800277c <HAL_UART_RxCpltCallback+0x7bc>)
 80026e2:	f7fe fccb 	bl	800107c <SN_UART_Send>
     	for(int i = 0; i <= 27 ;i++)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	3301      	adds	r3, #1
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	2b1b      	cmp	r3, #27
 80026f0:	ddf0      	ble.n	80026d4 <HAL_UART_RxCpltCallback+0x714>
     	SN_UART_Send(&huart3,"} \r \n ");
 80026f2:	4924      	ldr	r1, [pc, #144]	; (8002784 <HAL_UART_RxCpltCallback+0x7c4>)
 80026f4:	4821      	ldr	r0, [pc, #132]	; (800277c <HAL_UART_RxCpltCallback+0x7bc>)
 80026f6:	f7fe fcc1 	bl	800107c <SN_UART_Send>

    	SN_UART_Send(&huart3,"speedlevel = %.1f \r \n battery: %.1f \r \n raw= %d \r \n ",speedlevel,battery_procentage_raw,raw_battery);
 80026fa:	4b23      	ldr	r3, [pc, #140]	; (8002788 <HAL_UART_RxCpltCallback+0x7c8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fd fe92 	bl	8000428 <__aeabi_f2d>
 8002704:	4604      	mov	r4, r0
 8002706:	460d      	mov	r5, r1
 8002708:	4b20      	ldr	r3, [pc, #128]	; (800278c <HAL_UART_RxCpltCallback+0x7cc>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7fd fe8b 	bl	8000428 <__aeabi_f2d>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	491e      	ldr	r1, [pc, #120]	; (8002790 <HAL_UART_RxCpltCallback+0x7d0>)
 8002718:	8809      	ldrh	r1, [r1, #0]
 800271a:	9102      	str	r1, [sp, #8]
 800271c:	e9cd 2300 	strd	r2, r3, [sp]
 8002720:	4622      	mov	r2, r4
 8002722:	462b      	mov	r3, r5
 8002724:	491b      	ldr	r1, [pc, #108]	; (8002794 <HAL_UART_RxCpltCallback+0x7d4>)
 8002726:	4815      	ldr	r0, [pc, #84]	; (800277c <HAL_UART_RxCpltCallback+0x7bc>)
 8002728:	f7fe fca8 	bl	800107c <SN_UART_Send>
    	/*Begin receiving*/
    	HAL_UART_Receive_IT(&huart1,(uint8_t*)RxData,28);
 800272c:	221c      	movs	r2, #28
 800272e:	490c      	ldr	r1, [pc, #48]	; (8002760 <HAL_UART_RxCpltCallback+0x7a0>)
 8002730:	4819      	ldr	r0, [pc, #100]	; (8002798 <HAL_UART_RxCpltCallback+0x7d8>)
 8002732:	f003 f9de 	bl	8005af2 <HAL_UART_Receive_IT>
	}
}
 8002736:	bf00      	nop
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bdb0      	pop	{r4, r5, r7, pc}
 800273e:	bf00      	nop
 8002740:	20000020 	.word	0x20000020
 8002744:	20000024 	.word	0x20000024
 8002748:	20000028 	.word	0x20000028
 800274c:	2000002c 	.word	0x2000002c
 8002750:	20000000 	.word	0x20000000
 8002754:	3ca3d70a 	.word	0x3ca3d70a
 8002758:	20000004 	.word	0x20000004
 800275c:	43af0000 	.word	0x43af0000
 8002760:	200002b4 	.word	0x200002b4
 8002764:	2000001c 	.word	0x2000001c
 8002768:	20000014 	.word	0x20000014
 800276c:	20000018 	.word	0x20000018
 8002770:	20000010 	.word	0x20000010
 8002774:	2000000c 	.word	0x2000000c
 8002778:	08009644 	.word	0x08009644
 800277c:	2000045c 	.word	0x2000045c
 8002780:	08009650 	.word	0x08009650
 8002784:	08009654 	.word	0x08009654
 8002788:	20000008 	.word	0x20000008
 800278c:	200002d4 	.word	0x200002d4
 8002790:	200002d0 	.word	0x200002d0
 8002794:	0800965c 	.word	0x0800965c
 8002798:	20000414 	.word	0x20000414

0800279c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027a0:	b672      	cpsid	i
}
 80027a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027a4:	e7fe      	b.n	80027a4 <Error_Handler+0x8>
	...

080027a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80027ae:	4b15      	ldr	r3, [pc, #84]	; (8002804 <HAL_MspInit+0x5c>)
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	4a14      	ldr	r2, [pc, #80]	; (8002804 <HAL_MspInit+0x5c>)
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	6193      	str	r3, [r2, #24]
 80027ba:	4b12      	ldr	r3, [pc, #72]	; (8002804 <HAL_MspInit+0x5c>)
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027c6:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <HAL_MspInit+0x5c>)
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	4a0e      	ldr	r2, [pc, #56]	; (8002804 <HAL_MspInit+0x5c>)
 80027cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d0:	61d3      	str	r3, [r2, #28]
 80027d2:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <HAL_MspInit+0x5c>)
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027da:	607b      	str	r3, [r7, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027de:	4b0a      	ldr	r3, [pc, #40]	; (8002808 <HAL_MspInit+0x60>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	4a04      	ldr	r2, [pc, #16]	; (8002808 <HAL_MspInit+0x60>)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027fa:	bf00      	nop
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr
 8002804:	40021000 	.word	0x40021000
 8002808:	40010000 	.word	0x40010000

0800280c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002810:	e7fe      	b.n	8002810 <NMI_Handler+0x4>

08002812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002812:	b480      	push	{r7}
 8002814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002816:	e7fe      	b.n	8002816 <HardFault_Handler+0x4>

08002818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800281c:	e7fe      	b.n	800281c <MemManage_Handler+0x4>

0800281e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800281e:	b480      	push	{r7}
 8002820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002822:	e7fe      	b.n	8002822 <BusFault_Handler+0x4>

08002824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002828:	e7fe      	b.n	8002828 <UsageFault_Handler+0x4>

0800282a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800282a:	b480      	push	{r7}
 800282c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr

08002836 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002836:	b480      	push	{r7}
 8002838:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr

08002842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002842:	b480      	push	{r7}
 8002844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr

0800284e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002852:	f000 fc33 	bl	80030bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
	...

0800285c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002860:	4802      	ldr	r0, [pc, #8]	; (800286c <USART1_IRQHandler+0x10>)
 8002862:	f003 f96b 	bl	8005b3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000414 	.word	0x20000414

08002870 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return 1;
 8002874:	2301      	movs	r3, #1
}
 8002876:	4618      	mov	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <_kill>:

int _kill(int pid, int sig)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002888:	f003 fedc 	bl	8006644 <__errno>
 800288c:	4603      	mov	r3, r0
 800288e:	2216      	movs	r2, #22
 8002890:	601a      	str	r2, [r3, #0]
  return -1;
 8002892:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <_exit>:

void _exit (int status)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b082      	sub	sp, #8
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028a6:	f04f 31ff 	mov.w	r1, #4294967295
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7ff ffe7 	bl	800287e <_kill>
  while (1) {}    /* Make sure we hang here */
 80028b0:	e7fe      	b.n	80028b0 <_exit+0x12>

080028b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b086      	sub	sp, #24
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	e00a      	b.n	80028da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028c4:	f3af 8000 	nop.w
 80028c8:	4601      	mov	r1, r0
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	60ba      	str	r2, [r7, #8]
 80028d0:	b2ca      	uxtb	r2, r1
 80028d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	3301      	adds	r3, #1
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	429a      	cmp	r2, r3
 80028e0:	dbf0      	blt.n	80028c4 <_read+0x12>
  }

  return len;
 80028e2:	687b      	ldr	r3, [r7, #4]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	e009      	b.n	8002912 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	60ba      	str	r2, [r7, #8]
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	3301      	adds	r3, #1
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	429a      	cmp	r2, r3
 8002918:	dbf1      	blt.n	80028fe <_write+0x12>
  }
  return len;
 800291a:	687b      	ldr	r3, [r7, #4]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <_close>:

int _close(int file)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800292c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002930:	4618      	mov	r0, r3
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr

0800293a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
 8002942:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800294a:	605a      	str	r2, [r3, #4]
  return 0;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr

08002958 <_isatty>:

int _isatty(int file)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002960:	2301      	movs	r3, #1
}
 8002962:	4618      	mov	r0, r3
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800298c:	4a14      	ldr	r2, [pc, #80]	; (80029e0 <_sbrk+0x5c>)
 800298e:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <_sbrk+0x60>)
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002998:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <_sbrk+0x64>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d102      	bne.n	80029a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029a0:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <_sbrk+0x64>)
 80029a2:	4a12      	ldr	r2, [pc, #72]	; (80029ec <_sbrk+0x68>)
 80029a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029a6:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <_sbrk+0x64>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4413      	add	r3, r2
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d207      	bcs.n	80029c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029b4:	f003 fe46 	bl	8006644 <__errno>
 80029b8:	4603      	mov	r3, r0
 80029ba:	220c      	movs	r2, #12
 80029bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029be:	f04f 33ff 	mov.w	r3, #4294967295
 80029c2:	e009      	b.n	80029d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029c4:	4b08      	ldr	r3, [pc, #32]	; (80029e8 <_sbrk+0x64>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029ca:	4b07      	ldr	r3, [pc, #28]	; (80029e8 <_sbrk+0x64>)
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4413      	add	r3, r2
 80029d2:	4a05      	ldr	r2, [pc, #20]	; (80029e8 <_sbrk+0x64>)
 80029d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029d6:	68fb      	ldr	r3, [r7, #12]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20005000 	.word	0x20005000
 80029e4:	00000400 	.word	0x00000400
 80029e8:	200002f0 	.word	0x200002f0
 80029ec:	200004b8 	.word	0x200004b8

080029f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a02:	f107 0308 	add.w	r3, r7, #8
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	605a      	str	r2, [r3, #4]
 8002a0c:	609a      	str	r2, [r3, #8]
 8002a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a10:	463b      	mov	r3, r7
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a18:	4b1f      	ldr	r3, [pc, #124]	; (8002a98 <MX_TIM1_Init+0x9c>)
 8002a1a:	4a20      	ldr	r2, [pc, #128]	; (8002a9c <MX_TIM1_Init+0xa0>)
 8002a1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9000-1;
 8002a1e:	4b1e      	ldr	r3, [pc, #120]	; (8002a98 <MX_TIM1_Init+0x9c>)
 8002a20:	f242 3227 	movw	r2, #8999	; 0x2327
 8002a24:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002a26:	4b1c      	ldr	r3, [pc, #112]	; (8002a98 <MX_TIM1_Init+0x9c>)
 8002a28:	2210      	movs	r2, #16
 8002a2a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002a2c:	4b1a      	ldr	r3, [pc, #104]	; (8002a98 <MX_TIM1_Init+0x9c>)
 8002a2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a32:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a34:	4b18      	ldr	r3, [pc, #96]	; (8002a98 <MX_TIM1_Init+0x9c>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a3a:	4b17      	ldr	r3, [pc, #92]	; (8002a98 <MX_TIM1_Init+0x9c>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a40:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <MX_TIM1_Init+0x9c>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a46:	4814      	ldr	r0, [pc, #80]	; (8002a98 <MX_TIM1_Init+0x9c>)
 8002a48:	f002 f8ac 	bl	8004ba4 <HAL_TIM_Base_Init>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002a52:	f7ff fea3 	bl	800279c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a5c:	f107 0308 	add.w	r3, r7, #8
 8002a60:	4619      	mov	r1, r3
 8002a62:	480d      	ldr	r0, [pc, #52]	; (8002a98 <MX_TIM1_Init+0x9c>)
 8002a64:	f002 fba8 	bl	80051b8 <HAL_TIM_ConfigClockSource>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002a6e:	f7ff fe95 	bl	800279c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a72:	2300      	movs	r3, #0
 8002a74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a76:	2300      	movs	r3, #0
 8002a78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a7a:	463b      	mov	r3, r7
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4806      	ldr	r0, [pc, #24]	; (8002a98 <MX_TIM1_Init+0x9c>)
 8002a80:	f002 ff06 	bl	8005890 <HAL_TIMEx_MasterConfigSynchronization>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002a8a:	f7ff fe87 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002a8e:	bf00      	nop
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	200002f4 	.word	0x200002f4
 8002a9c:	40012c00 	.word	0x40012c00

08002aa0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aa6:	f107 0308 	add.w	r3, r7, #8
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	605a      	str	r2, [r3, #4]
 8002ab0:	609a      	str	r2, [r3, #8]
 8002ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ab4:	463b      	mov	r3, r7
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002abc:	4b1d      	ldr	r3, [pc, #116]	; (8002b34 <MX_TIM2_Init+0x94>)
 8002abe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ac2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8002ac4:	4b1b      	ldr	r3, [pc, #108]	; (8002b34 <MX_TIM2_Init+0x94>)
 8002ac6:	2247      	movs	r2, #71	; 0x47
 8002ac8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aca:	4b1a      	ldr	r3, [pc, #104]	; (8002b34 <MX_TIM2_Init+0x94>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002ad0:	4b18      	ldr	r3, [pc, #96]	; (8002b34 <MX_TIM2_Init+0x94>)
 8002ad2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ad6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ad8:	4b16      	ldr	r3, [pc, #88]	; (8002b34 <MX_TIM2_Init+0x94>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ade:	4b15      	ldr	r3, [pc, #84]	; (8002b34 <MX_TIM2_Init+0x94>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ae4:	4813      	ldr	r0, [pc, #76]	; (8002b34 <MX_TIM2_Init+0x94>)
 8002ae6:	f002 f85d 	bl	8004ba4 <HAL_TIM_Base_Init>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002af0:	f7ff fe54 	bl	800279c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002af8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002afa:	f107 0308 	add.w	r3, r7, #8
 8002afe:	4619      	mov	r1, r3
 8002b00:	480c      	ldr	r0, [pc, #48]	; (8002b34 <MX_TIM2_Init+0x94>)
 8002b02:	f002 fb59 	bl	80051b8 <HAL_TIM_ConfigClockSource>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002b0c:	f7ff fe46 	bl	800279c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b10:	2300      	movs	r3, #0
 8002b12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b14:	2300      	movs	r3, #0
 8002b16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b18:	463b      	mov	r3, r7
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4805      	ldr	r0, [pc, #20]	; (8002b34 <MX_TIM2_Init+0x94>)
 8002b1e:	f002 feb7 	bl	8005890 <HAL_TIMEx_MasterConfigSynchronization>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002b28:	f7ff fe38 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b2c:	bf00      	nop
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	2000033c 	.word	0x2000033c

08002b38 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b3e:	f107 0308 	add.w	r3, r7, #8
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	605a      	str	r2, [r3, #4]
 8002b48:	609a      	str	r2, [r3, #8]
 8002b4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b4c:	463b      	mov	r3, r7
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b54:	4b1d      	ldr	r3, [pc, #116]	; (8002bcc <MX_TIM3_Init+0x94>)
 8002b56:	4a1e      	ldr	r2, [pc, #120]	; (8002bd0 <MX_TIM3_Init+0x98>)
 8002b58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002b5a:	4b1c      	ldr	r3, [pc, #112]	; (8002bcc <MX_TIM3_Init+0x94>)
 8002b5c:	2247      	movs	r2, #71	; 0x47
 8002b5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b60:	4b1a      	ldr	r3, [pc, #104]	; (8002bcc <MX_TIM3_Init+0x94>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002b66:	4b19      	ldr	r3, [pc, #100]	; (8002bcc <MX_TIM3_Init+0x94>)
 8002b68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b6c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b6e:	4b17      	ldr	r3, [pc, #92]	; (8002bcc <MX_TIM3_Init+0x94>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b74:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <MX_TIM3_Init+0x94>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b7a:	4814      	ldr	r0, [pc, #80]	; (8002bcc <MX_TIM3_Init+0x94>)
 8002b7c:	f002 f812 	bl	8004ba4 <HAL_TIM_Base_Init>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002b86:	f7ff fe09 	bl	800279c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b90:	f107 0308 	add.w	r3, r7, #8
 8002b94:	4619      	mov	r1, r3
 8002b96:	480d      	ldr	r0, [pc, #52]	; (8002bcc <MX_TIM3_Init+0x94>)
 8002b98:	f002 fb0e 	bl	80051b8 <HAL_TIM_ConfigClockSource>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002ba2:	f7ff fdfb 	bl	800279c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002baa:	2300      	movs	r3, #0
 8002bac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bae:	463b      	mov	r3, r7
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4806      	ldr	r0, [pc, #24]	; (8002bcc <MX_TIM3_Init+0x94>)
 8002bb4:	f002 fe6c 	bl	8005890 <HAL_TIMEx_MasterConfigSynchronization>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002bbe:	f7ff fded 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002bc2:	bf00      	nop
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000384 	.word	0x20000384
 8002bd0:	40000400 	.word	0x40000400

08002bd4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08e      	sub	sp, #56	; 0x38
 8002bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	605a      	str	r2, [r3, #4]
 8002be4:	609a      	str	r2, [r3, #8]
 8002be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002be8:	f107 0320 	add.w	r3, r7, #32
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bf2:	1d3b      	adds	r3, r7, #4
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	611a      	str	r2, [r3, #16]
 8002c00:	615a      	str	r2, [r3, #20]
 8002c02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c04:	4b3d      	ldr	r3, [pc, #244]	; (8002cfc <MX_TIM4_Init+0x128>)
 8002c06:	4a3e      	ldr	r2, [pc, #248]	; (8002d00 <MX_TIM4_Init+0x12c>)
 8002c08:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8002c0a:	4b3c      	ldr	r3, [pc, #240]	; (8002cfc <MX_TIM4_Init+0x128>)
 8002c0c:	224f      	movs	r2, #79	; 0x4f
 8002c0e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c10:	4b3a      	ldr	r3, [pc, #232]	; (8002cfc <MX_TIM4_Init+0x128>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002c16:	4b39      	ldr	r3, [pc, #228]	; (8002cfc <MX_TIM4_Init+0x128>)
 8002c18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c1c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c1e:	4b37      	ldr	r3, [pc, #220]	; (8002cfc <MX_TIM4_Init+0x128>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c24:	4b35      	ldr	r3, [pc, #212]	; (8002cfc <MX_TIM4_Init+0x128>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002c2a:	4834      	ldr	r0, [pc, #208]	; (8002cfc <MX_TIM4_Init+0x128>)
 8002c2c:	f001 ffba 	bl	8004ba4 <HAL_TIM_Base_Init>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002c36:	f7ff fdb1 	bl	800279c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002c40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c44:	4619      	mov	r1, r3
 8002c46:	482d      	ldr	r0, [pc, #180]	; (8002cfc <MX_TIM4_Init+0x128>)
 8002c48:	f002 fab6 	bl	80051b8 <HAL_TIM_ConfigClockSource>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002c52:	f7ff fda3 	bl	800279c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002c56:	4829      	ldr	r0, [pc, #164]	; (8002cfc <MX_TIM4_Init+0x128>)
 8002c58:	f002 f896 	bl	8004d88 <HAL_TIM_PWM_Init>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002c62:	f7ff fd9b 	bl	800279c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8002c66:	4825      	ldr	r0, [pc, #148]	; (8002cfc <MX_TIM4_Init+0x128>)
 8002c68:	f002 f836 	bl	8004cd8 <HAL_TIM_OC_Init>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8002c72:	f7ff fd93 	bl	800279c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c76:	2300      	movs	r3, #0
 8002c78:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c7e:	f107 0320 	add.w	r3, r7, #32
 8002c82:	4619      	mov	r1, r3
 8002c84:	481d      	ldr	r0, [pc, #116]	; (8002cfc <MX_TIM4_Init+0x128>)
 8002c86:	f002 fe03 	bl	8005890 <HAL_TIMEx_MasterConfigSynchronization>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8002c90:	f7ff fd84 	bl	800279c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c94:	2360      	movs	r3, #96	; 0x60
 8002c96:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ca4:	1d3b      	adds	r3, r7, #4
 8002ca6:	2204      	movs	r2, #4
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4814      	ldr	r0, [pc, #80]	; (8002cfc <MX_TIM4_Init+0x128>)
 8002cac:	f002 f9c2 	bl	8005034 <HAL_TIM_PWM_ConfigChannel>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 8002cb6:	f7ff fd71 	bl	800279c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002cbe:	1d3b      	adds	r3, r7, #4
 8002cc0:	2208      	movs	r2, #8
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	480d      	ldr	r0, [pc, #52]	; (8002cfc <MX_TIM4_Init+0x128>)
 8002cc6:	f002 f959 	bl	8004f7c <HAL_TIM_OC_ConfigChannel>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 8002cd0:	f7ff fd64 	bl	800279c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cd4:	2360      	movs	r3, #96	; 0x60
 8002cd6:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002cd8:	1d3b      	adds	r3, r7, #4
 8002cda:	220c      	movs	r2, #12
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4807      	ldr	r0, [pc, #28]	; (8002cfc <MX_TIM4_Init+0x128>)
 8002ce0:	f002 f9a8 	bl	8005034 <HAL_TIM_PWM_ConfigChannel>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8002cea:	f7ff fd57 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002cee:	4803      	ldr	r0, [pc, #12]	; (8002cfc <MX_TIM4_Init+0x128>)
 8002cf0:	f000 f860 	bl	8002db4 <HAL_TIM_MspPostInit>

}
 8002cf4:	bf00      	nop
 8002cf6:	3738      	adds	r7, #56	; 0x38
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	200003cc 	.word	0x200003cc
 8002d00:	40000800 	.word	0x40000800

08002d04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a24      	ldr	r2, [pc, #144]	; (8002da4 <HAL_TIM_Base_MspInit+0xa0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d10c      	bne.n	8002d30 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d16:	4b24      	ldr	r3, [pc, #144]	; (8002da8 <HAL_TIM_Base_MspInit+0xa4>)
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	4a23      	ldr	r2, [pc, #140]	; (8002da8 <HAL_TIM_Base_MspInit+0xa4>)
 8002d1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d20:	6193      	str	r3, [r2, #24]
 8002d22:	4b21      	ldr	r3, [pc, #132]	; (8002da8 <HAL_TIM_Base_MspInit+0xa4>)
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002d2e:	e034      	b.n	8002d9a <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM2)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d38:	d10c      	bne.n	8002d54 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d3a:	4b1b      	ldr	r3, [pc, #108]	; (8002da8 <HAL_TIM_Base_MspInit+0xa4>)
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	4a1a      	ldr	r2, [pc, #104]	; (8002da8 <HAL_TIM_Base_MspInit+0xa4>)
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	61d3      	str	r3, [r2, #28]
 8002d46:	4b18      	ldr	r3, [pc, #96]	; (8002da8 <HAL_TIM_Base_MspInit+0xa4>)
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	613b      	str	r3, [r7, #16]
 8002d50:	693b      	ldr	r3, [r7, #16]
}
 8002d52:	e022      	b.n	8002d9a <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM3)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a14      	ldr	r2, [pc, #80]	; (8002dac <HAL_TIM_Base_MspInit+0xa8>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d10c      	bne.n	8002d78 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d5e:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <HAL_TIM_Base_MspInit+0xa4>)
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	4a11      	ldr	r2, [pc, #68]	; (8002da8 <HAL_TIM_Base_MspInit+0xa4>)
 8002d64:	f043 0302 	orr.w	r3, r3, #2
 8002d68:	61d3      	str	r3, [r2, #28]
 8002d6a:	4b0f      	ldr	r3, [pc, #60]	; (8002da8 <HAL_TIM_Base_MspInit+0xa4>)
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
}
 8002d76:	e010      	b.n	8002d9a <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM4)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a0c      	ldr	r2, [pc, #48]	; (8002db0 <HAL_TIM_Base_MspInit+0xac>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d10b      	bne.n	8002d9a <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d82:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <HAL_TIM_Base_MspInit+0xa4>)
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	4a08      	ldr	r2, [pc, #32]	; (8002da8 <HAL_TIM_Base_MspInit+0xa4>)
 8002d88:	f043 0304 	orr.w	r3, r3, #4
 8002d8c:	61d3      	str	r3, [r2, #28]
 8002d8e:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <HAL_TIM_Base_MspInit+0xa4>)
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	68bb      	ldr	r3, [r7, #8]
}
 8002d9a:	bf00      	nop
 8002d9c:	371c      	adds	r7, #28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr
 8002da4:	40012c00 	.word	0x40012c00
 8002da8:	40021000 	.word	0x40021000
 8002dac:	40000400 	.word	0x40000400
 8002db0:	40000800 	.word	0x40000800

08002db4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dbc:	f107 0310 	add.w	r3, r7, #16
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a10      	ldr	r2, [pc, #64]	; (8002e10 <HAL_TIM_MspPostInit+0x5c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d118      	bne.n	8002e06 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dd4:	4b0f      	ldr	r3, [pc, #60]	; (8002e14 <HAL_TIM_MspPostInit+0x60>)
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	4a0e      	ldr	r2, [pc, #56]	; (8002e14 <HAL_TIM_MspPostInit+0x60>)
 8002dda:	f043 0308 	orr.w	r3, r3, #8
 8002dde:	6193      	str	r3, [r2, #24]
 8002de0:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <HAL_TIM_MspPostInit+0x60>)
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002dec:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002df0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df2:	2302      	movs	r3, #2
 8002df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df6:	2302      	movs	r3, #2
 8002df8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dfa:	f107 0310 	add.w	r3, r7, #16
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4805      	ldr	r0, [pc, #20]	; (8002e18 <HAL_TIM_MspPostInit+0x64>)
 8002e02:	f000 ff87 	bl	8003d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002e06:	bf00      	nop
 8002e08:	3720      	adds	r7, #32
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40000800 	.word	0x40000800
 8002e14:	40021000 	.word	0x40021000
 8002e18:	40010c00 	.word	0x40010c00

08002e1c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e20:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <MX_USART1_UART_Init+0x4c>)
 8002e22:	4a12      	ldr	r2, [pc, #72]	; (8002e6c <MX_USART1_UART_Init+0x50>)
 8002e24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002e26:	4b10      	ldr	r3, [pc, #64]	; (8002e68 <MX_USART1_UART_Init+0x4c>)
 8002e28:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e2e:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <MX_USART1_UART_Init+0x4c>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e34:	4b0c      	ldr	r3, [pc, #48]	; (8002e68 <MX_USART1_UART_Init+0x4c>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e3a:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <MX_USART1_UART_Init+0x4c>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e40:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <MX_USART1_UART_Init+0x4c>)
 8002e42:	220c      	movs	r2, #12
 8002e44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e46:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <MX_USART1_UART_Init+0x4c>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <MX_USART1_UART_Init+0x4c>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e52:	4805      	ldr	r0, [pc, #20]	; (8002e68 <MX_USART1_UART_Init+0x4c>)
 8002e54:	f002 fd7a 	bl	800594c <HAL_UART_Init>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002e5e:	f7ff fc9d 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e62:	bf00      	nop
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000414 	.word	0x20000414
 8002e6c:	40013800 	.word	0x40013800

08002e70 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e74:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <MX_USART3_UART_Init+0x4c>)
 8002e76:	4a12      	ldr	r2, [pc, #72]	; (8002ec0 <MX_USART3_UART_Init+0x50>)
 8002e78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002e7a:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <MX_USART3_UART_Init+0x4c>)
 8002e7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e82:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <MX_USART3_UART_Init+0x4c>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e88:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <MX_USART3_UART_Init+0x4c>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e8e:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <MX_USART3_UART_Init+0x4c>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e94:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <MX_USART3_UART_Init+0x4c>)
 8002e96:	220c      	movs	r2, #12
 8002e98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e9a:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <MX_USART3_UART_Init+0x4c>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ea0:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <MX_USART3_UART_Init+0x4c>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ea6:	4805      	ldr	r0, [pc, #20]	; (8002ebc <MX_USART3_UART_Init+0x4c>)
 8002ea8:	f002 fd50 	bl	800594c <HAL_UART_Init>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002eb2:	f7ff fc73 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	2000045c 	.word	0x2000045c
 8002ec0:	40004800 	.word	0x40004800

08002ec4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08a      	sub	sp, #40	; 0x28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ecc:	f107 0318 	add.w	r3, r7, #24
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	609a      	str	r2, [r3, #8]
 8002ed8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a3c      	ldr	r2, [pc, #240]	; (8002fd0 <HAL_UART_MspInit+0x10c>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d13a      	bne.n	8002f5a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ee4:	4b3b      	ldr	r3, [pc, #236]	; (8002fd4 <HAL_UART_MspInit+0x110>)
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	4a3a      	ldr	r2, [pc, #232]	; (8002fd4 <HAL_UART_MspInit+0x110>)
 8002eea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eee:	6193      	str	r3, [r2, #24]
 8002ef0:	4b38      	ldr	r3, [pc, #224]	; (8002fd4 <HAL_UART_MspInit+0x110>)
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ef8:	617b      	str	r3, [r7, #20]
 8002efa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efc:	4b35      	ldr	r3, [pc, #212]	; (8002fd4 <HAL_UART_MspInit+0x110>)
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	4a34      	ldr	r2, [pc, #208]	; (8002fd4 <HAL_UART_MspInit+0x110>)
 8002f02:	f043 0304 	orr.w	r3, r3, #4
 8002f06:	6193      	str	r3, [r2, #24]
 8002f08:	4b32      	ldr	r3, [pc, #200]	; (8002fd4 <HAL_UART_MspInit+0x110>)
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	613b      	str	r3, [r7, #16]
 8002f12:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f22:	f107 0318 	add.w	r3, r7, #24
 8002f26:	4619      	mov	r1, r3
 8002f28:	482b      	ldr	r0, [pc, #172]	; (8002fd8 <HAL_UART_MspInit+0x114>)
 8002f2a:	f000 fef3 	bl	8003d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f34:	2300      	movs	r3, #0
 8002f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f3c:	f107 0318 	add.w	r3, r7, #24
 8002f40:	4619      	mov	r1, r3
 8002f42:	4825      	ldr	r0, [pc, #148]	; (8002fd8 <HAL_UART_MspInit+0x114>)
 8002f44:	f000 fee6 	bl	8003d14 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	2025      	movs	r0, #37	; 0x25
 8002f4e:	f000 fdf8 	bl	8003b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f52:	2025      	movs	r0, #37	; 0x25
 8002f54:	f000 fe11 	bl	8003b7a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002f58:	e036      	b.n	8002fc8 <HAL_UART_MspInit+0x104>
  else if(uartHandle->Instance==USART3)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a1f      	ldr	r2, [pc, #124]	; (8002fdc <HAL_UART_MspInit+0x118>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d131      	bne.n	8002fc8 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f64:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <HAL_UART_MspInit+0x110>)
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	4a1a      	ldr	r2, [pc, #104]	; (8002fd4 <HAL_UART_MspInit+0x110>)
 8002f6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f6e:	61d3      	str	r3, [r2, #28]
 8002f70:	4b18      	ldr	r3, [pc, #96]	; (8002fd4 <HAL_UART_MspInit+0x110>)
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f7c:	4b15      	ldr	r3, [pc, #84]	; (8002fd4 <HAL_UART_MspInit+0x110>)
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	4a14      	ldr	r2, [pc, #80]	; (8002fd4 <HAL_UART_MspInit+0x110>)
 8002f82:	f043 0308 	orr.w	r3, r3, #8
 8002f86:	6193      	str	r3, [r2, #24]
 8002f88:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <HAL_UART_MspInit+0x110>)
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	60bb      	str	r3, [r7, #8]
 8002f92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fa2:	f107 0318 	add.w	r3, r7, #24
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	480d      	ldr	r0, [pc, #52]	; (8002fe0 <HAL_UART_MspInit+0x11c>)
 8002faa:	f000 feb3 	bl	8003d14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002fae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fbc:	f107 0318 	add.w	r3, r7, #24
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4807      	ldr	r0, [pc, #28]	; (8002fe0 <HAL_UART_MspInit+0x11c>)
 8002fc4:	f000 fea6 	bl	8003d14 <HAL_GPIO_Init>
}
 8002fc8:	bf00      	nop
 8002fca:	3728      	adds	r7, #40	; 0x28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40013800 	.word	0x40013800
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	40010800 	.word	0x40010800
 8002fdc:	40004800 	.word	0x40004800
 8002fe0:	40010c00 	.word	0x40010c00

08002fe4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002fe4:	f7ff fd04 	bl	80029f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fe8:	480b      	ldr	r0, [pc, #44]	; (8003018 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002fea:	490c      	ldr	r1, [pc, #48]	; (800301c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002fec:	4a0c      	ldr	r2, [pc, #48]	; (8003020 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ff0:	e002      	b.n	8002ff8 <LoopCopyDataInit>

08002ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ff6:	3304      	adds	r3, #4

08002ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ffc:	d3f9      	bcc.n	8002ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ffe:	4a09      	ldr	r2, [pc, #36]	; (8003024 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003000:	4c09      	ldr	r4, [pc, #36]	; (8003028 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003004:	e001      	b.n	800300a <LoopFillZerobss>

08003006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003008:	3204      	adds	r2, #4

0800300a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800300a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800300c:	d3fb      	bcc.n	8003006 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800300e:	f003 fb1f 	bl	8006650 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003012:	f7fe ff13 	bl	8001e3c <main>
  bx lr
 8003016:	4770      	bx	lr
  ldr r0, =_sdata
 8003018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800301c:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8003020:	08009abc 	.word	0x08009abc
  ldr r2, =_sbss
 8003024:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8003028:	200004b8 	.word	0x200004b8

0800302c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800302c:	e7fe      	b.n	800302c <ADC1_2_IRQHandler>
	...

08003030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003034:	4b08      	ldr	r3, [pc, #32]	; (8003058 <HAL_Init+0x28>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a07      	ldr	r2, [pc, #28]	; (8003058 <HAL_Init+0x28>)
 800303a:	f043 0310 	orr.w	r3, r3, #16
 800303e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003040:	2003      	movs	r0, #3
 8003042:	f000 fd73 	bl	8003b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003046:	200f      	movs	r0, #15
 8003048:	f000 f808 	bl	800305c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800304c:	f7ff fbac 	bl	80027a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40022000 	.word	0x40022000

0800305c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003064:	4b12      	ldr	r3, [pc, #72]	; (80030b0 <HAL_InitTick+0x54>)
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	4b12      	ldr	r3, [pc, #72]	; (80030b4 <HAL_InitTick+0x58>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	4619      	mov	r1, r3
 800306e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003072:	fbb3 f3f1 	udiv	r3, r3, r1
 8003076:	fbb2 f3f3 	udiv	r3, r2, r3
 800307a:	4618      	mov	r0, r3
 800307c:	f000 fd8b 	bl	8003b96 <HAL_SYSTICK_Config>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e00e      	b.n	80030a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b0f      	cmp	r3, #15
 800308e:	d80a      	bhi.n	80030a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003090:	2200      	movs	r2, #0
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	f04f 30ff 	mov.w	r0, #4294967295
 8003098:	f000 fd53 	bl	8003b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800309c:	4a06      	ldr	r2, [pc, #24]	; (80030b8 <HAL_InitTick+0x5c>)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	e000      	b.n	80030a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	20000034 	.word	0x20000034
 80030b4:	2000003c 	.word	0x2000003c
 80030b8:	20000038 	.word	0x20000038

080030bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030c0:	4b05      	ldr	r3, [pc, #20]	; (80030d8 <HAL_IncTick+0x1c>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	461a      	mov	r2, r3
 80030c6:	4b05      	ldr	r3, [pc, #20]	; (80030dc <HAL_IncTick+0x20>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4413      	add	r3, r2
 80030cc:	4a03      	ldr	r2, [pc, #12]	; (80030dc <HAL_IncTick+0x20>)
 80030ce:	6013      	str	r3, [r2, #0]
}
 80030d0:	bf00      	nop
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr
 80030d8:	2000003c 	.word	0x2000003c
 80030dc:	200004a4 	.word	0x200004a4

080030e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  return uwTick;
 80030e4:	4b02      	ldr	r3, [pc, #8]	; (80030f0 <HAL_GetTick+0x10>)
 80030e6:	681b      	ldr	r3, [r3, #0]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr
 80030f0:	200004a4 	.word	0x200004a4

080030f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030fc:	f7ff fff0 	bl	80030e0 <HAL_GetTick>
 8003100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310c:	d005      	beq.n	800311a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800310e:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <HAL_Delay+0x44>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	4413      	add	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800311a:	bf00      	nop
 800311c:	f7ff ffe0 	bl	80030e0 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	429a      	cmp	r2, r3
 800312a:	d8f7      	bhi.n	800311c <HAL_Delay+0x28>
  {
  }
}
 800312c:	bf00      	nop
 800312e:	bf00      	nop
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	2000003c 	.word	0x2000003c

0800313c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003144:	2300      	movs	r3, #0
 8003146:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003148:	2300      	movs	r3, #0
 800314a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e0be      	b.n	80032dc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003168:	2b00      	cmp	r3, #0
 800316a:	d109      	bne.n	8003180 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7fe f89e 	bl	80012bc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 fbc5 	bl	8003910 <ADC_ConversionStop_Disable>
 8003186:	4603      	mov	r3, r0
 8003188:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318e:	f003 0310 	and.w	r3, r3, #16
 8003192:	2b00      	cmp	r3, #0
 8003194:	f040 8099 	bne.w	80032ca <HAL_ADC_Init+0x18e>
 8003198:	7dfb      	ldrb	r3, [r7, #23]
 800319a:	2b00      	cmp	r3, #0
 800319c:	f040 8095 	bne.w	80032ca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031a8:	f023 0302 	bic.w	r3, r3, #2
 80031ac:	f043 0202 	orr.w	r2, r3, #2
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80031bc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	7b1b      	ldrb	r3, [r3, #12]
 80031c2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80031c4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d4:	d003      	beq.n	80031de <HAL_ADC_Init+0xa2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d102      	bne.n	80031e4 <HAL_ADC_Init+0xa8>
 80031de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031e2:	e000      	b.n	80031e6 <HAL_ADC_Init+0xaa>
 80031e4:	2300      	movs	r3, #0
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	7d1b      	ldrb	r3, [r3, #20]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d119      	bne.n	8003228 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	7b1b      	ldrb	r3, [r3, #12]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d109      	bne.n	8003210 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	3b01      	subs	r3, #1
 8003202:	035a      	lsls	r2, r3, #13
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	4313      	orrs	r3, r2
 8003208:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	e00b      	b.n	8003228 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003214:	f043 0220 	orr.w	r2, r3, #32
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	f043 0201 	orr.w	r2, r3, #1
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	430a      	orrs	r2, r1
 800323a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <HAL_ADC_Init+0x1a8>)
 8003244:	4013      	ands	r3, r2
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6812      	ldr	r2, [r2, #0]
 800324a:	68b9      	ldr	r1, [r7, #8]
 800324c:	430b      	orrs	r3, r1
 800324e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003258:	d003      	beq.n	8003262 <HAL_ADC_Init+0x126>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d104      	bne.n	800326c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	3b01      	subs	r3, #1
 8003268:	051b      	lsls	r3, r3, #20
 800326a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003272:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	430a      	orrs	r2, r1
 800327e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	4b18      	ldr	r3, [pc, #96]	; (80032e8 <HAL_ADC_Init+0x1ac>)
 8003288:	4013      	ands	r3, r2
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	429a      	cmp	r2, r3
 800328e:	d10b      	bne.n	80032a8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329a:	f023 0303 	bic.w	r3, r3, #3
 800329e:	f043 0201 	orr.w	r2, r3, #1
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80032a6:	e018      	b.n	80032da <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ac:	f023 0312 	bic.w	r3, r3, #18
 80032b0:	f043 0210 	orr.w	r2, r3, #16
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032bc:	f043 0201 	orr.w	r2, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80032c8:	e007      	b.n	80032da <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ce:	f043 0210 	orr.w	r2, r3, #16
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80032da:	7dfb      	ldrb	r3, [r7, #23]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	ffe1f7fd 	.word	0xffe1f7fd
 80032e8:	ff1f0efe 	.word	0xff1f0efe

080032ec <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032f4:	2300      	movs	r3, #0
 80032f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_ADC_Start+0x1a>
 8003302:	2302      	movs	r3, #2
 8003304:	e098      	b.n	8003438 <HAL_ADC_Start+0x14c>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 faa4 	bl	800385c <ADC_Enable>
 8003314:	4603      	mov	r3, r0
 8003316:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003318:	7bfb      	ldrb	r3, [r7, #15]
 800331a:	2b00      	cmp	r3, #0
 800331c:	f040 8087 	bne.w	800342e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003328:	f023 0301 	bic.w	r3, r3, #1
 800332c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a41      	ldr	r2, [pc, #260]	; (8003440 <HAL_ADC_Start+0x154>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d105      	bne.n	800334a <HAL_ADC_Start+0x5e>
 800333e:	4b41      	ldr	r3, [pc, #260]	; (8003444 <HAL_ADC_Start+0x158>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d115      	bne.n	8003376 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003360:	2b00      	cmp	r3, #0
 8003362:	d026      	beq.n	80033b2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003368:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800336c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003374:	e01d      	b.n	80033b2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a2f      	ldr	r2, [pc, #188]	; (8003444 <HAL_ADC_Start+0x158>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d004      	beq.n	8003396 <HAL_ADC_Start+0xaa>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a2b      	ldr	r2, [pc, #172]	; (8003440 <HAL_ADC_Start+0x154>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d10d      	bne.n	80033b2 <HAL_ADC_Start+0xc6>
 8003396:	4b2b      	ldr	r3, [pc, #172]	; (8003444 <HAL_ADC_Start+0x158>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d007      	beq.n	80033b2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d006      	beq.n	80033cc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	f023 0206 	bic.w	r2, r3, #6
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80033ca:	e002      	b.n	80033d2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f06f 0202 	mvn.w	r2, #2
 80033e2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80033ee:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80033f2:	d113      	bne.n	800341c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80033f8:	4a11      	ldr	r2, [pc, #68]	; (8003440 <HAL_ADC_Start+0x154>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d105      	bne.n	800340a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80033fe:	4b11      	ldr	r3, [pc, #68]	; (8003444 <HAL_ADC_Start+0x158>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003406:	2b00      	cmp	r3, #0
 8003408:	d108      	bne.n	800341c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003418:	609a      	str	r2, [r3, #8]
 800341a:	e00c      	b.n	8003436 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800342a:	609a      	str	r2, [r3, #8]
 800342c:	e003      	b.n	8003436 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003436:	7bfb      	ldrb	r3, [r7, #15]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40012800 	.word	0x40012800
 8003444:	40012400 	.word	0x40012400

08003448 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003448:	b590      	push	{r4, r7, lr}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003452:	2300      	movs	r3, #0
 8003454:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800345e:	f7ff fe3f 	bl	80030e0 <HAL_GetTick>
 8003462:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00b      	beq.n	800348a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003476:	f043 0220 	orr.w	r2, r3, #32
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e0d3      	b.n	8003632 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003494:	2b00      	cmp	r3, #0
 8003496:	d131      	bne.n	80034fc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d12a      	bne.n	80034fc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80034a6:	e021      	b.n	80034ec <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ae:	d01d      	beq.n	80034ec <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d007      	beq.n	80034c6 <HAL_ADC_PollForConversion+0x7e>
 80034b6:	f7ff fe13 	bl	80030e0 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d212      	bcs.n	80034ec <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10b      	bne.n	80034ec <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	f043 0204 	orr.w	r2, r3, #4
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e0a2      	b.n	8003632 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0d6      	beq.n	80034a8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80034fa:	e070      	b.n	80035de <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80034fc:	4b4f      	ldr	r3, [pc, #316]	; (800363c <HAL_ADC_PollForConversion+0x1f4>)
 80034fe:	681c      	ldr	r4, [r3, #0]
 8003500:	2002      	movs	r0, #2
 8003502:	f001 fa99 	bl	8004a38 <HAL_RCCEx_GetPeriphCLKFreq>
 8003506:	4603      	mov	r3, r0
 8003508:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6919      	ldr	r1, [r3, #16]
 8003512:	4b4b      	ldr	r3, [pc, #300]	; (8003640 <HAL_ADC_PollForConversion+0x1f8>)
 8003514:	400b      	ands	r3, r1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d118      	bne.n	800354c <HAL_ADC_PollForConversion+0x104>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68d9      	ldr	r1, [r3, #12]
 8003520:	4b48      	ldr	r3, [pc, #288]	; (8003644 <HAL_ADC_PollForConversion+0x1fc>)
 8003522:	400b      	ands	r3, r1
 8003524:	2b00      	cmp	r3, #0
 8003526:	d111      	bne.n	800354c <HAL_ADC_PollForConversion+0x104>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6919      	ldr	r1, [r3, #16]
 800352e:	4b46      	ldr	r3, [pc, #280]	; (8003648 <HAL_ADC_PollForConversion+0x200>)
 8003530:	400b      	ands	r3, r1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d108      	bne.n	8003548 <HAL_ADC_PollForConversion+0x100>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68d9      	ldr	r1, [r3, #12]
 800353c:	4b43      	ldr	r3, [pc, #268]	; (800364c <HAL_ADC_PollForConversion+0x204>)
 800353e:	400b      	ands	r3, r1
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_ADC_PollForConversion+0x100>
 8003544:	2314      	movs	r3, #20
 8003546:	e020      	b.n	800358a <HAL_ADC_PollForConversion+0x142>
 8003548:	2329      	movs	r3, #41	; 0x29
 800354a:	e01e      	b.n	800358a <HAL_ADC_PollForConversion+0x142>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6919      	ldr	r1, [r3, #16]
 8003552:	4b3d      	ldr	r3, [pc, #244]	; (8003648 <HAL_ADC_PollForConversion+0x200>)
 8003554:	400b      	ands	r3, r1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d106      	bne.n	8003568 <HAL_ADC_PollForConversion+0x120>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68d9      	ldr	r1, [r3, #12]
 8003560:	4b3a      	ldr	r3, [pc, #232]	; (800364c <HAL_ADC_PollForConversion+0x204>)
 8003562:	400b      	ands	r3, r1
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00d      	beq.n	8003584 <HAL_ADC_PollForConversion+0x13c>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6919      	ldr	r1, [r3, #16]
 800356e:	4b38      	ldr	r3, [pc, #224]	; (8003650 <HAL_ADC_PollForConversion+0x208>)
 8003570:	400b      	ands	r3, r1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d108      	bne.n	8003588 <HAL_ADC_PollForConversion+0x140>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68d9      	ldr	r1, [r3, #12]
 800357c:	4b34      	ldr	r3, [pc, #208]	; (8003650 <HAL_ADC_PollForConversion+0x208>)
 800357e:	400b      	ands	r3, r1
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_ADC_PollForConversion+0x140>
 8003584:	2354      	movs	r3, #84	; 0x54
 8003586:	e000      	b.n	800358a <HAL_ADC_PollForConversion+0x142>
 8003588:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800358a:	fb02 f303 	mul.w	r3, r2, r3
 800358e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003590:	e021      	b.n	80035d6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003598:	d01a      	beq.n	80035d0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d007      	beq.n	80035b0 <HAL_ADC_PollForConversion+0x168>
 80035a0:	f7ff fd9e 	bl	80030e0 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d20f      	bcs.n	80035d0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d90b      	bls.n	80035d0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035bc:	f043 0204 	orr.w	r2, r3, #4
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e030      	b.n	8003632 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	3301      	adds	r3, #1
 80035d4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d8d9      	bhi.n	8003592 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f06f 0212 	mvn.w	r2, #18
 80035e6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80035fe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003602:	d115      	bne.n	8003630 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003608:	2b00      	cmp	r3, #0
 800360a:	d111      	bne.n	8003630 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003610:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d105      	bne.n	8003630 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003628:	f043 0201 	orr.w	r2, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	371c      	adds	r7, #28
 8003636:	46bd      	mov	sp, r7
 8003638:	bd90      	pop	{r4, r7, pc}
 800363a:	bf00      	nop
 800363c:	20000034 	.word	0x20000034
 8003640:	24924924 	.word	0x24924924
 8003644:	00924924 	.word	0x00924924
 8003648:	12492492 	.word	0x12492492
 800364c:	00492492 	.word	0x00492492
 8003650:	00249249 	.word	0x00249249

08003654 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr

0800366c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_ADC_ConfigChannel+0x20>
 8003688:	2302      	movs	r3, #2
 800368a:	e0dc      	b.n	8003846 <HAL_ADC_ConfigChannel+0x1da>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2b06      	cmp	r3, #6
 800369a:	d81c      	bhi.n	80036d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	3b05      	subs	r3, #5
 80036ae:	221f      	movs	r2, #31
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	4019      	ands	r1, r3
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	6818      	ldr	r0, [r3, #0]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	3b05      	subs	r3, #5
 80036c8:	fa00 f203 	lsl.w	r2, r0, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	635a      	str	r2, [r3, #52]	; 0x34
 80036d4:	e03c      	b.n	8003750 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b0c      	cmp	r3, #12
 80036dc:	d81c      	bhi.n	8003718 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	4613      	mov	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	3b23      	subs	r3, #35	; 0x23
 80036f0:	221f      	movs	r2, #31
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43db      	mvns	r3, r3
 80036f8:	4019      	ands	r1, r3
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	6818      	ldr	r0, [r3, #0]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	3b23      	subs	r3, #35	; 0x23
 800370a:	fa00 f203 	lsl.w	r2, r0, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	631a      	str	r2, [r3, #48]	; 0x30
 8003716:	e01b      	b.n	8003750 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	4613      	mov	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	3b41      	subs	r3, #65	; 0x41
 800372a:	221f      	movs	r2, #31
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	43db      	mvns	r3, r3
 8003732:	4019      	ands	r1, r3
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	6818      	ldr	r0, [r3, #0]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	3b41      	subs	r3, #65	; 0x41
 8003744:	fa00 f203 	lsl.w	r2, r0, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2b09      	cmp	r3, #9
 8003756:	d91c      	bls.n	8003792 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68d9      	ldr	r1, [r3, #12]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	4613      	mov	r3, r2
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	4413      	add	r3, r2
 8003768:	3b1e      	subs	r3, #30
 800376a:	2207      	movs	r2, #7
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	43db      	mvns	r3, r3
 8003772:	4019      	ands	r1, r3
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	6898      	ldr	r0, [r3, #8]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	4613      	mov	r3, r2
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	4413      	add	r3, r2
 8003782:	3b1e      	subs	r3, #30
 8003784:	fa00 f203 	lsl.w	r2, r0, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	60da      	str	r2, [r3, #12]
 8003790:	e019      	b.n	80037c6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6919      	ldr	r1, [r3, #16]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	4613      	mov	r3, r2
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	4413      	add	r3, r2
 80037a2:	2207      	movs	r2, #7
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	43db      	mvns	r3, r3
 80037aa:	4019      	ands	r1, r3
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	6898      	ldr	r0, [r3, #8]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	4613      	mov	r3, r2
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	4413      	add	r3, r2
 80037ba:	fa00 f203 	lsl.w	r2, r0, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b10      	cmp	r3, #16
 80037cc:	d003      	beq.n	80037d6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80037d2:	2b11      	cmp	r3, #17
 80037d4:	d132      	bne.n	800383c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a1d      	ldr	r2, [pc, #116]	; (8003850 <HAL_ADC_ConfigChannel+0x1e4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d125      	bne.n	800382c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d126      	bne.n	800383c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80037fc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b10      	cmp	r3, #16
 8003804:	d11a      	bne.n	800383c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003806:	4b13      	ldr	r3, [pc, #76]	; (8003854 <HAL_ADC_ConfigChannel+0x1e8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a13      	ldr	r2, [pc, #76]	; (8003858 <HAL_ADC_ConfigChannel+0x1ec>)
 800380c:	fba2 2303 	umull	r2, r3, r2, r3
 8003810:	0c9a      	lsrs	r2, r3, #18
 8003812:	4613      	mov	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800381c:	e002      	b.n	8003824 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	3b01      	subs	r3, #1
 8003822:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f9      	bne.n	800381e <HAL_ADC_ConfigChannel+0x1b2>
 800382a:	e007      	b.n	800383c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003830:	f043 0220 	orr.w	r2, r3, #32
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003844:	7bfb      	ldrb	r3, [r7, #15]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr
 8003850:	40012400 	.word	0x40012400
 8003854:	20000034 	.word	0x20000034
 8003858:	431bde83 	.word	0x431bde83

0800385c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003864:	2300      	movs	r3, #0
 8003866:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003868:	2300      	movs	r3, #0
 800386a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b01      	cmp	r3, #1
 8003878:	d040      	beq.n	80038fc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f042 0201 	orr.w	r2, r2, #1
 8003888:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800388a:	4b1f      	ldr	r3, [pc, #124]	; (8003908 <ADC_Enable+0xac>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a1f      	ldr	r2, [pc, #124]	; (800390c <ADC_Enable+0xb0>)
 8003890:	fba2 2303 	umull	r2, r3, r2, r3
 8003894:	0c9b      	lsrs	r3, r3, #18
 8003896:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003898:	e002      	b.n	80038a0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	3b01      	subs	r3, #1
 800389e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1f9      	bne.n	800389a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038a6:	f7ff fc1b 	bl	80030e0 <HAL_GetTick>
 80038aa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80038ac:	e01f      	b.n	80038ee <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038ae:	f7ff fc17 	bl	80030e0 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d918      	bls.n	80038ee <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d011      	beq.n	80038ee <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ce:	f043 0210 	orr.w	r2, r3, #16
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038da:	f043 0201 	orr.w	r2, r3, #1
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e007      	b.n	80038fe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d1d8      	bne.n	80038ae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	20000034 	.word	0x20000034
 800390c:	431bde83 	.word	0x431bde83

08003910 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b01      	cmp	r3, #1
 8003928:	d12e      	bne.n	8003988 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0201 	bic.w	r2, r2, #1
 8003938:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800393a:	f7ff fbd1 	bl	80030e0 <HAL_GetTick>
 800393e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003940:	e01b      	b.n	800397a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003942:	f7ff fbcd 	bl	80030e0 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d914      	bls.n	800397a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b01      	cmp	r3, #1
 800395c:	d10d      	bne.n	800397a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003962:	f043 0210 	orr.w	r2, r3, #16
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396e:	f043 0201 	orr.w	r2, r3, #1
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e007      	b.n	800398a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b01      	cmp	r3, #1
 8003986:	d0dc      	beq.n	8003942 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039a4:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <__NVIC_SetPriorityGrouping+0x44>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039b0:	4013      	ands	r3, r2
 80039b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039c6:	4a04      	ldr	r2, [pc, #16]	; (80039d8 <__NVIC_SetPriorityGrouping+0x44>)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	60d3      	str	r3, [r2, #12]
}
 80039cc:	bf00      	nop
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	e000ed00 	.word	0xe000ed00

080039dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039e0:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <__NVIC_GetPriorityGrouping+0x18>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	0a1b      	lsrs	r3, r3, #8
 80039e6:	f003 0307 	and.w	r3, r3, #7
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bc80      	pop	{r7}
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	e000ed00 	.word	0xe000ed00

080039f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	db0b      	blt.n	8003a22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a0a:	79fb      	ldrb	r3, [r7, #7]
 8003a0c:	f003 021f 	and.w	r2, r3, #31
 8003a10:	4906      	ldr	r1, [pc, #24]	; (8003a2c <__NVIC_EnableIRQ+0x34>)
 8003a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a16:	095b      	lsrs	r3, r3, #5
 8003a18:	2001      	movs	r0, #1
 8003a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bc80      	pop	{r7}
 8003a2a:	4770      	bx	lr
 8003a2c:	e000e100 	.word	0xe000e100

08003a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	4603      	mov	r3, r0
 8003a38:	6039      	str	r1, [r7, #0]
 8003a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	db0a      	blt.n	8003a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	490c      	ldr	r1, [pc, #48]	; (8003a7c <__NVIC_SetPriority+0x4c>)
 8003a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4e:	0112      	lsls	r2, r2, #4
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	440b      	add	r3, r1
 8003a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a58:	e00a      	b.n	8003a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	4908      	ldr	r1, [pc, #32]	; (8003a80 <__NVIC_SetPriority+0x50>)
 8003a60:	79fb      	ldrb	r3, [r7, #7]
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	3b04      	subs	r3, #4
 8003a68:	0112      	lsls	r2, r2, #4
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	761a      	strb	r2, [r3, #24]
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bc80      	pop	{r7}
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	e000e100 	.word	0xe000e100
 8003a80:	e000ed00 	.word	0xe000ed00

08003a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b089      	sub	sp, #36	; 0x24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f1c3 0307 	rsb	r3, r3, #7
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	bf28      	it	cs
 8003aa2:	2304      	movcs	r3, #4
 8003aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	2b06      	cmp	r3, #6
 8003aac:	d902      	bls.n	8003ab4 <NVIC_EncodePriority+0x30>
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	3b03      	subs	r3, #3
 8003ab2:	e000      	b.n	8003ab6 <NVIC_EncodePriority+0x32>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	43da      	mvns	r2, r3
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	401a      	ands	r2, r3
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003acc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad6:	43d9      	mvns	r1, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003adc:	4313      	orrs	r3, r2
         );
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3724      	adds	r7, #36	; 0x24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr

08003ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3b01      	subs	r3, #1
 8003af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003af8:	d301      	bcc.n	8003afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003afa:	2301      	movs	r3, #1
 8003afc:	e00f      	b.n	8003b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003afe:	4a0a      	ldr	r2, [pc, #40]	; (8003b28 <SysTick_Config+0x40>)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b06:	210f      	movs	r1, #15
 8003b08:	f04f 30ff 	mov.w	r0, #4294967295
 8003b0c:	f7ff ff90 	bl	8003a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b10:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <SysTick_Config+0x40>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b16:	4b04      	ldr	r3, [pc, #16]	; (8003b28 <SysTick_Config+0x40>)
 8003b18:	2207      	movs	r2, #7
 8003b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	e000e010 	.word	0xe000e010

08003b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7ff ff2d 	bl	8003994 <__NVIC_SetPriorityGrouping>
}
 8003b3a:	bf00      	nop
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b086      	sub	sp, #24
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	4603      	mov	r3, r0
 8003b4a:	60b9      	str	r1, [r7, #8]
 8003b4c:	607a      	str	r2, [r7, #4]
 8003b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b54:	f7ff ff42 	bl	80039dc <__NVIC_GetPriorityGrouping>
 8003b58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	68b9      	ldr	r1, [r7, #8]
 8003b5e:	6978      	ldr	r0, [r7, #20]
 8003b60:	f7ff ff90 	bl	8003a84 <NVIC_EncodePriority>
 8003b64:	4602      	mov	r2, r0
 8003b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff ff5f 	bl	8003a30 <__NVIC_SetPriority>
}
 8003b72:	bf00      	nop
 8003b74:	3718      	adds	r7, #24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b082      	sub	sp, #8
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	4603      	mov	r3, r0
 8003b82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff ff35 	bl	80039f8 <__NVIC_EnableIRQ>
}
 8003b8e:	bf00      	nop
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b082      	sub	sp, #8
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7ff ffa2 	bl	8003ae8 <SysTick_Config>
 8003ba4:	4603      	mov	r3, r0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b085      	sub	sp, #20
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d008      	beq.n	8003bd8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2204      	movs	r2, #4
 8003bca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e020      	b.n	8003c1a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 020e 	bic.w	r2, r2, #14
 8003be6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0201 	bic.w	r2, r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c00:	2101      	movs	r1, #1
 8003c02:	fa01 f202 	lsl.w	r2, r1, r2
 8003c06:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr

08003c24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d005      	beq.n	8003c48 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2204      	movs	r2, #4
 8003c40:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	73fb      	strb	r3, [r7, #15]
 8003c46:	e051      	b.n	8003cec <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 020e 	bic.w	r2, r2, #14
 8003c56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0201 	bic.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a22      	ldr	r2, [pc, #136]	; (8003cf8 <HAL_DMA_Abort_IT+0xd4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d029      	beq.n	8003cc6 <HAL_DMA_Abort_IT+0xa2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a21      	ldr	r2, [pc, #132]	; (8003cfc <HAL_DMA_Abort_IT+0xd8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d022      	beq.n	8003cc2 <HAL_DMA_Abort_IT+0x9e>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a1f      	ldr	r2, [pc, #124]	; (8003d00 <HAL_DMA_Abort_IT+0xdc>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d01a      	beq.n	8003cbc <HAL_DMA_Abort_IT+0x98>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a1e      	ldr	r2, [pc, #120]	; (8003d04 <HAL_DMA_Abort_IT+0xe0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d012      	beq.n	8003cb6 <HAL_DMA_Abort_IT+0x92>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a1c      	ldr	r2, [pc, #112]	; (8003d08 <HAL_DMA_Abort_IT+0xe4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00a      	beq.n	8003cb0 <HAL_DMA_Abort_IT+0x8c>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a1b      	ldr	r2, [pc, #108]	; (8003d0c <HAL_DMA_Abort_IT+0xe8>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d102      	bne.n	8003caa <HAL_DMA_Abort_IT+0x86>
 8003ca4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003ca8:	e00e      	b.n	8003cc8 <HAL_DMA_Abort_IT+0xa4>
 8003caa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cae:	e00b      	b.n	8003cc8 <HAL_DMA_Abort_IT+0xa4>
 8003cb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cb4:	e008      	b.n	8003cc8 <HAL_DMA_Abort_IT+0xa4>
 8003cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cba:	e005      	b.n	8003cc8 <HAL_DMA_Abort_IT+0xa4>
 8003cbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cc0:	e002      	b.n	8003cc8 <HAL_DMA_Abort_IT+0xa4>
 8003cc2:	2310      	movs	r3, #16
 8003cc4:	e000      	b.n	8003cc8 <HAL_DMA_Abort_IT+0xa4>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	4a11      	ldr	r2, [pc, #68]	; (8003d10 <HAL_DMA_Abort_IT+0xec>)
 8003cca:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d003      	beq.n	8003cec <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	4798      	blx	r3
    } 
  }
  return status;
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40020008 	.word	0x40020008
 8003cfc:	4002001c 	.word	0x4002001c
 8003d00:	40020030 	.word	0x40020030
 8003d04:	40020044 	.word	0x40020044
 8003d08:	40020058 	.word	0x40020058
 8003d0c:	4002006c 	.word	0x4002006c
 8003d10:	40020000 	.word	0x40020000

08003d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b08b      	sub	sp, #44	; 0x2c
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003d22:	2300      	movs	r3, #0
 8003d24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d26:	e169      	b.n	8003ffc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003d28:	2201      	movs	r2, #1
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	69fa      	ldr	r2, [r7, #28]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	f040 8158 	bne.w	8003ff6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	4a9a      	ldr	r2, [pc, #616]	; (8003fb4 <HAL_GPIO_Init+0x2a0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d05e      	beq.n	8003e0e <HAL_GPIO_Init+0xfa>
 8003d50:	4a98      	ldr	r2, [pc, #608]	; (8003fb4 <HAL_GPIO_Init+0x2a0>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d875      	bhi.n	8003e42 <HAL_GPIO_Init+0x12e>
 8003d56:	4a98      	ldr	r2, [pc, #608]	; (8003fb8 <HAL_GPIO_Init+0x2a4>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d058      	beq.n	8003e0e <HAL_GPIO_Init+0xfa>
 8003d5c:	4a96      	ldr	r2, [pc, #600]	; (8003fb8 <HAL_GPIO_Init+0x2a4>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d86f      	bhi.n	8003e42 <HAL_GPIO_Init+0x12e>
 8003d62:	4a96      	ldr	r2, [pc, #600]	; (8003fbc <HAL_GPIO_Init+0x2a8>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d052      	beq.n	8003e0e <HAL_GPIO_Init+0xfa>
 8003d68:	4a94      	ldr	r2, [pc, #592]	; (8003fbc <HAL_GPIO_Init+0x2a8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d869      	bhi.n	8003e42 <HAL_GPIO_Init+0x12e>
 8003d6e:	4a94      	ldr	r2, [pc, #592]	; (8003fc0 <HAL_GPIO_Init+0x2ac>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d04c      	beq.n	8003e0e <HAL_GPIO_Init+0xfa>
 8003d74:	4a92      	ldr	r2, [pc, #584]	; (8003fc0 <HAL_GPIO_Init+0x2ac>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d863      	bhi.n	8003e42 <HAL_GPIO_Init+0x12e>
 8003d7a:	4a92      	ldr	r2, [pc, #584]	; (8003fc4 <HAL_GPIO_Init+0x2b0>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d046      	beq.n	8003e0e <HAL_GPIO_Init+0xfa>
 8003d80:	4a90      	ldr	r2, [pc, #576]	; (8003fc4 <HAL_GPIO_Init+0x2b0>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d85d      	bhi.n	8003e42 <HAL_GPIO_Init+0x12e>
 8003d86:	2b12      	cmp	r3, #18
 8003d88:	d82a      	bhi.n	8003de0 <HAL_GPIO_Init+0xcc>
 8003d8a:	2b12      	cmp	r3, #18
 8003d8c:	d859      	bhi.n	8003e42 <HAL_GPIO_Init+0x12e>
 8003d8e:	a201      	add	r2, pc, #4	; (adr r2, 8003d94 <HAL_GPIO_Init+0x80>)
 8003d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d94:	08003e0f 	.word	0x08003e0f
 8003d98:	08003de9 	.word	0x08003de9
 8003d9c:	08003dfb 	.word	0x08003dfb
 8003da0:	08003e3d 	.word	0x08003e3d
 8003da4:	08003e43 	.word	0x08003e43
 8003da8:	08003e43 	.word	0x08003e43
 8003dac:	08003e43 	.word	0x08003e43
 8003db0:	08003e43 	.word	0x08003e43
 8003db4:	08003e43 	.word	0x08003e43
 8003db8:	08003e43 	.word	0x08003e43
 8003dbc:	08003e43 	.word	0x08003e43
 8003dc0:	08003e43 	.word	0x08003e43
 8003dc4:	08003e43 	.word	0x08003e43
 8003dc8:	08003e43 	.word	0x08003e43
 8003dcc:	08003e43 	.word	0x08003e43
 8003dd0:	08003e43 	.word	0x08003e43
 8003dd4:	08003e43 	.word	0x08003e43
 8003dd8:	08003df1 	.word	0x08003df1
 8003ddc:	08003e05 	.word	0x08003e05
 8003de0:	4a79      	ldr	r2, [pc, #484]	; (8003fc8 <HAL_GPIO_Init+0x2b4>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d013      	beq.n	8003e0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003de6:	e02c      	b.n	8003e42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	623b      	str	r3, [r7, #32]
          break;
 8003dee:	e029      	b.n	8003e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	3304      	adds	r3, #4
 8003df6:	623b      	str	r3, [r7, #32]
          break;
 8003df8:	e024      	b.n	8003e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	3308      	adds	r3, #8
 8003e00:	623b      	str	r3, [r7, #32]
          break;
 8003e02:	e01f      	b.n	8003e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	330c      	adds	r3, #12
 8003e0a:	623b      	str	r3, [r7, #32]
          break;
 8003e0c:	e01a      	b.n	8003e44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d102      	bne.n	8003e1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003e16:	2304      	movs	r3, #4
 8003e18:	623b      	str	r3, [r7, #32]
          break;
 8003e1a:	e013      	b.n	8003e44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d105      	bne.n	8003e30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e24:	2308      	movs	r3, #8
 8003e26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	69fa      	ldr	r2, [r7, #28]
 8003e2c:	611a      	str	r2, [r3, #16]
          break;
 8003e2e:	e009      	b.n	8003e44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e30:	2308      	movs	r3, #8
 8003e32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69fa      	ldr	r2, [r7, #28]
 8003e38:	615a      	str	r2, [r3, #20]
          break;
 8003e3a:	e003      	b.n	8003e44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	623b      	str	r3, [r7, #32]
          break;
 8003e40:	e000      	b.n	8003e44 <HAL_GPIO_Init+0x130>
          break;
 8003e42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	2bff      	cmp	r3, #255	; 0xff
 8003e48:	d801      	bhi.n	8003e4e <HAL_GPIO_Init+0x13a>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	e001      	b.n	8003e52 <HAL_GPIO_Init+0x13e>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	3304      	adds	r3, #4
 8003e52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	2bff      	cmp	r3, #255	; 0xff
 8003e58:	d802      	bhi.n	8003e60 <HAL_GPIO_Init+0x14c>
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	e002      	b.n	8003e66 <HAL_GPIO_Init+0x152>
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	3b08      	subs	r3, #8
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	210f      	movs	r1, #15
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	fa01 f303 	lsl.w	r3, r1, r3
 8003e74:	43db      	mvns	r3, r3
 8003e76:	401a      	ands	r2, r3
 8003e78:	6a39      	ldr	r1, [r7, #32]
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e80:	431a      	orrs	r2, r3
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 80b1 	beq.w	8003ff6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e94:	4b4d      	ldr	r3, [pc, #308]	; (8003fcc <HAL_GPIO_Init+0x2b8>)
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	4a4c      	ldr	r2, [pc, #304]	; (8003fcc <HAL_GPIO_Init+0x2b8>)
 8003e9a:	f043 0301 	orr.w	r3, r3, #1
 8003e9e:	6193      	str	r3, [r2, #24]
 8003ea0:	4b4a      	ldr	r3, [pc, #296]	; (8003fcc <HAL_GPIO_Init+0x2b8>)
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003eac:	4a48      	ldr	r2, [pc, #288]	; (8003fd0 <HAL_GPIO_Init+0x2bc>)
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	089b      	lsrs	r3, r3, #2
 8003eb2:	3302      	adds	r3, #2
 8003eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	f003 0303 	and.w	r3, r3, #3
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	220f      	movs	r2, #15
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a40      	ldr	r2, [pc, #256]	; (8003fd4 <HAL_GPIO_Init+0x2c0>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d013      	beq.n	8003f00 <HAL_GPIO_Init+0x1ec>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a3f      	ldr	r2, [pc, #252]	; (8003fd8 <HAL_GPIO_Init+0x2c4>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d00d      	beq.n	8003efc <HAL_GPIO_Init+0x1e8>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a3e      	ldr	r2, [pc, #248]	; (8003fdc <HAL_GPIO_Init+0x2c8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d007      	beq.n	8003ef8 <HAL_GPIO_Init+0x1e4>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a3d      	ldr	r2, [pc, #244]	; (8003fe0 <HAL_GPIO_Init+0x2cc>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d101      	bne.n	8003ef4 <HAL_GPIO_Init+0x1e0>
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e006      	b.n	8003f02 <HAL_GPIO_Init+0x1ee>
 8003ef4:	2304      	movs	r3, #4
 8003ef6:	e004      	b.n	8003f02 <HAL_GPIO_Init+0x1ee>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e002      	b.n	8003f02 <HAL_GPIO_Init+0x1ee>
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <HAL_GPIO_Init+0x1ee>
 8003f00:	2300      	movs	r3, #0
 8003f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f04:	f002 0203 	and.w	r2, r2, #3
 8003f08:	0092      	lsls	r2, r2, #2
 8003f0a:	4093      	lsls	r3, r2
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003f12:	492f      	ldr	r1, [pc, #188]	; (8003fd0 <HAL_GPIO_Init+0x2bc>)
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	089b      	lsrs	r3, r3, #2
 8003f18:	3302      	adds	r3, #2
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d006      	beq.n	8003f3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003f2c:	4b2d      	ldr	r3, [pc, #180]	; (8003fe4 <HAL_GPIO_Init+0x2d0>)
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	492c      	ldr	r1, [pc, #176]	; (8003fe4 <HAL_GPIO_Init+0x2d0>)
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	608b      	str	r3, [r1, #8]
 8003f38:	e006      	b.n	8003f48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003f3a:	4b2a      	ldr	r3, [pc, #168]	; (8003fe4 <HAL_GPIO_Init+0x2d0>)
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	43db      	mvns	r3, r3
 8003f42:	4928      	ldr	r1, [pc, #160]	; (8003fe4 <HAL_GPIO_Init+0x2d0>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d006      	beq.n	8003f62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f54:	4b23      	ldr	r3, [pc, #140]	; (8003fe4 <HAL_GPIO_Init+0x2d0>)
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	4922      	ldr	r1, [pc, #136]	; (8003fe4 <HAL_GPIO_Init+0x2d0>)
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60cb      	str	r3, [r1, #12]
 8003f60:	e006      	b.n	8003f70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f62:	4b20      	ldr	r3, [pc, #128]	; (8003fe4 <HAL_GPIO_Init+0x2d0>)
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	491e      	ldr	r1, [pc, #120]	; (8003fe4 <HAL_GPIO_Init+0x2d0>)
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d006      	beq.n	8003f8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003f7c:	4b19      	ldr	r3, [pc, #100]	; (8003fe4 <HAL_GPIO_Init+0x2d0>)
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	4918      	ldr	r1, [pc, #96]	; (8003fe4 <HAL_GPIO_Init+0x2d0>)
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	604b      	str	r3, [r1, #4]
 8003f88:	e006      	b.n	8003f98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f8a:	4b16      	ldr	r3, [pc, #88]	; (8003fe4 <HAL_GPIO_Init+0x2d0>)
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	43db      	mvns	r3, r3
 8003f92:	4914      	ldr	r1, [pc, #80]	; (8003fe4 <HAL_GPIO_Init+0x2d0>)
 8003f94:	4013      	ands	r3, r2
 8003f96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d021      	beq.n	8003fe8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003fa4:	4b0f      	ldr	r3, [pc, #60]	; (8003fe4 <HAL_GPIO_Init+0x2d0>)
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	490e      	ldr	r1, [pc, #56]	; (8003fe4 <HAL_GPIO_Init+0x2d0>)
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	600b      	str	r3, [r1, #0]
 8003fb0:	e021      	b.n	8003ff6 <HAL_GPIO_Init+0x2e2>
 8003fb2:	bf00      	nop
 8003fb4:	10320000 	.word	0x10320000
 8003fb8:	10310000 	.word	0x10310000
 8003fbc:	10220000 	.word	0x10220000
 8003fc0:	10210000 	.word	0x10210000
 8003fc4:	10120000 	.word	0x10120000
 8003fc8:	10110000 	.word	0x10110000
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	40010000 	.word	0x40010000
 8003fd4:	40010800 	.word	0x40010800
 8003fd8:	40010c00 	.word	0x40010c00
 8003fdc:	40011000 	.word	0x40011000
 8003fe0:	40011400 	.word	0x40011400
 8003fe4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003fe8:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <HAL_GPIO_Init+0x304>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	4909      	ldr	r1, [pc, #36]	; (8004018 <HAL_GPIO_Init+0x304>)
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	fa22 f303 	lsr.w	r3, r2, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	f47f ae8e 	bne.w	8003d28 <HAL_GPIO_Init+0x14>
  }
}
 800400c:	bf00      	nop
 800400e:	bf00      	nop
 8004010:	372c      	adds	r7, #44	; 0x2c
 8004012:	46bd      	mov	sp, r7
 8004014:	bc80      	pop	{r7}
 8004016:	4770      	bx	lr
 8004018:	40010400 	.word	0x40010400

0800401c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	887b      	ldrh	r3, [r7, #2]
 800402e:	4013      	ands	r3, r2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d002      	beq.n	800403a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004034:	2301      	movs	r3, #1
 8004036:	73fb      	strb	r3, [r7, #15]
 8004038:	e001      	b.n	800403e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800403a:	2300      	movs	r3, #0
 800403c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800403e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004040:	4618      	mov	r0, r3
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr

0800404a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	460b      	mov	r3, r1
 8004054:	807b      	strh	r3, [r7, #2]
 8004056:	4613      	mov	r3, r2
 8004058:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800405a:	787b      	ldrb	r3, [r7, #1]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004060:	887a      	ldrh	r2, [r7, #2]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004066:	e003      	b.n	8004070 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004068:	887b      	ldrh	r3, [r7, #2]
 800406a:	041a      	lsls	r2, r3, #16
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	611a      	str	r2, [r3, #16]
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	bc80      	pop	{r7}
 8004078:	4770      	bx	lr

0800407a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800407a:	b480      	push	{r7}
 800407c:	b085      	sub	sp, #20
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
 8004082:	460b      	mov	r3, r1
 8004084:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800408c:	887a      	ldrh	r2, [r7, #2]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4013      	ands	r3, r2
 8004092:	041a      	lsls	r2, r3, #16
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	43d9      	mvns	r1, r3
 8004098:	887b      	ldrh	r3, [r7, #2]
 800409a:	400b      	ands	r3, r1
 800409c:	431a      	orrs	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	611a      	str	r2, [r3, #16]
}
 80040a2:	bf00      	nop
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bc80      	pop	{r7}
 80040aa:	4770      	bx	lr

080040ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e272      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 8087 	beq.w	80041da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040cc:	4b92      	ldr	r3, [pc, #584]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f003 030c 	and.w	r3, r3, #12
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d00c      	beq.n	80040f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80040d8:	4b8f      	ldr	r3, [pc, #572]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f003 030c 	and.w	r3, r3, #12
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d112      	bne.n	800410a <HAL_RCC_OscConfig+0x5e>
 80040e4:	4b8c      	ldr	r3, [pc, #560]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f0:	d10b      	bne.n	800410a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f2:	4b89      	ldr	r3, [pc, #548]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d06c      	beq.n	80041d8 <HAL_RCC_OscConfig+0x12c>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d168      	bne.n	80041d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e24c      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004112:	d106      	bne.n	8004122 <HAL_RCC_OscConfig+0x76>
 8004114:	4b80      	ldr	r3, [pc, #512]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a7f      	ldr	r2, [pc, #508]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 800411a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	e02e      	b.n	8004180 <HAL_RCC_OscConfig+0xd4>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10c      	bne.n	8004144 <HAL_RCC_OscConfig+0x98>
 800412a:	4b7b      	ldr	r3, [pc, #492]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a7a      	ldr	r2, [pc, #488]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 8004130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	4b78      	ldr	r3, [pc, #480]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a77      	ldr	r2, [pc, #476]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 800413c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	e01d      	b.n	8004180 <HAL_RCC_OscConfig+0xd4>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800414c:	d10c      	bne.n	8004168 <HAL_RCC_OscConfig+0xbc>
 800414e:	4b72      	ldr	r3, [pc, #456]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a71      	ldr	r2, [pc, #452]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 8004154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004158:	6013      	str	r3, [r2, #0]
 800415a:	4b6f      	ldr	r3, [pc, #444]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a6e      	ldr	r2, [pc, #440]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 8004160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	e00b      	b.n	8004180 <HAL_RCC_OscConfig+0xd4>
 8004168:	4b6b      	ldr	r3, [pc, #428]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a6a      	ldr	r2, [pc, #424]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 800416e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	4b68      	ldr	r3, [pc, #416]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a67      	ldr	r2, [pc, #412]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 800417a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800417e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d013      	beq.n	80041b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004188:	f7fe ffaa 	bl	80030e0 <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004190:	f7fe ffa6 	bl	80030e0 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b64      	cmp	r3, #100	; 0x64
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e200      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a2:	4b5d      	ldr	r3, [pc, #372]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0f0      	beq.n	8004190 <HAL_RCC_OscConfig+0xe4>
 80041ae:	e014      	b.n	80041da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b0:	f7fe ff96 	bl	80030e0 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041b8:	f7fe ff92 	bl	80030e0 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b64      	cmp	r3, #100	; 0x64
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e1ec      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ca:	4b53      	ldr	r3, [pc, #332]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f0      	bne.n	80041b8 <HAL_RCC_OscConfig+0x10c>
 80041d6:	e000      	b.n	80041da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d063      	beq.n	80042ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041e6:	4b4c      	ldr	r3, [pc, #304]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f003 030c 	and.w	r3, r3, #12
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00b      	beq.n	800420a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80041f2:	4b49      	ldr	r3, [pc, #292]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f003 030c 	and.w	r3, r3, #12
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d11c      	bne.n	8004238 <HAL_RCC_OscConfig+0x18c>
 80041fe:	4b46      	ldr	r3, [pc, #280]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d116      	bne.n	8004238 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800420a:	4b43      	ldr	r3, [pc, #268]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d005      	beq.n	8004222 <HAL_RCC_OscConfig+0x176>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d001      	beq.n	8004222 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e1c0      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004222:	4b3d      	ldr	r3, [pc, #244]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	4939      	ldr	r1, [pc, #228]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 8004232:	4313      	orrs	r3, r2
 8004234:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004236:	e03a      	b.n	80042ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d020      	beq.n	8004282 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004240:	4b36      	ldr	r3, [pc, #216]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004242:	2201      	movs	r2, #1
 8004244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004246:	f7fe ff4b 	bl	80030e0 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800424e:	f7fe ff47 	bl	80030e0 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e1a1      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004260:	4b2d      	ldr	r3, [pc, #180]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0f0      	beq.n	800424e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800426c:	4b2a      	ldr	r3, [pc, #168]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	4927      	ldr	r1, [pc, #156]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 800427c:	4313      	orrs	r3, r2
 800427e:	600b      	str	r3, [r1, #0]
 8004280:	e015      	b.n	80042ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004282:	4b26      	ldr	r3, [pc, #152]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004288:	f7fe ff2a 	bl	80030e0 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004290:	f7fe ff26 	bl	80030e0 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e180      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042a2:	4b1d      	ldr	r3, [pc, #116]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0308 	and.w	r3, r3, #8
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d03a      	beq.n	8004330 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d019      	beq.n	80042f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042c2:	4b17      	ldr	r3, [pc, #92]	; (8004320 <HAL_RCC_OscConfig+0x274>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c8:	f7fe ff0a 	bl	80030e0 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042d0:	f7fe ff06 	bl	80030e0 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e160      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042e2:	4b0d      	ldr	r3, [pc, #52]	; (8004318 <HAL_RCC_OscConfig+0x26c>)
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0f0      	beq.n	80042d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80042ee:	2001      	movs	r0, #1
 80042f0:	f000 face 	bl	8004890 <RCC_Delay>
 80042f4:	e01c      	b.n	8004330 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042f6:	4b0a      	ldr	r3, [pc, #40]	; (8004320 <HAL_RCC_OscConfig+0x274>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042fc:	f7fe fef0 	bl	80030e0 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004302:	e00f      	b.n	8004324 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004304:	f7fe feec 	bl	80030e0 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d908      	bls.n	8004324 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e146      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>
 8004316:	bf00      	nop
 8004318:	40021000 	.word	0x40021000
 800431c:	42420000 	.word	0x42420000
 8004320:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004324:	4b92      	ldr	r3, [pc, #584]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1e9      	bne.n	8004304 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 80a6 	beq.w	800448a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800433e:	2300      	movs	r3, #0
 8004340:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004342:	4b8b      	ldr	r3, [pc, #556]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10d      	bne.n	800436a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800434e:	4b88      	ldr	r3, [pc, #544]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	4a87      	ldr	r2, [pc, #540]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 8004354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004358:	61d3      	str	r3, [r2, #28]
 800435a:	4b85      	ldr	r3, [pc, #532]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004362:	60bb      	str	r3, [r7, #8]
 8004364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004366:	2301      	movs	r3, #1
 8004368:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800436a:	4b82      	ldr	r3, [pc, #520]	; (8004574 <HAL_RCC_OscConfig+0x4c8>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004372:	2b00      	cmp	r3, #0
 8004374:	d118      	bne.n	80043a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004376:	4b7f      	ldr	r3, [pc, #508]	; (8004574 <HAL_RCC_OscConfig+0x4c8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a7e      	ldr	r2, [pc, #504]	; (8004574 <HAL_RCC_OscConfig+0x4c8>)
 800437c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004382:	f7fe fead 	bl	80030e0 <HAL_GetTick>
 8004386:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004388:	e008      	b.n	800439c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800438a:	f7fe fea9 	bl	80030e0 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b64      	cmp	r3, #100	; 0x64
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e103      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800439c:	4b75      	ldr	r3, [pc, #468]	; (8004574 <HAL_RCC_OscConfig+0x4c8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0f0      	beq.n	800438a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d106      	bne.n	80043be <HAL_RCC_OscConfig+0x312>
 80043b0:	4b6f      	ldr	r3, [pc, #444]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	4a6e      	ldr	r2, [pc, #440]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 80043b6:	f043 0301 	orr.w	r3, r3, #1
 80043ba:	6213      	str	r3, [r2, #32]
 80043bc:	e02d      	b.n	800441a <HAL_RCC_OscConfig+0x36e>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10c      	bne.n	80043e0 <HAL_RCC_OscConfig+0x334>
 80043c6:	4b6a      	ldr	r3, [pc, #424]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	4a69      	ldr	r2, [pc, #420]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 80043cc:	f023 0301 	bic.w	r3, r3, #1
 80043d0:	6213      	str	r3, [r2, #32]
 80043d2:	4b67      	ldr	r3, [pc, #412]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	4a66      	ldr	r2, [pc, #408]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 80043d8:	f023 0304 	bic.w	r3, r3, #4
 80043dc:	6213      	str	r3, [r2, #32]
 80043de:	e01c      	b.n	800441a <HAL_RCC_OscConfig+0x36e>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	2b05      	cmp	r3, #5
 80043e6:	d10c      	bne.n	8004402 <HAL_RCC_OscConfig+0x356>
 80043e8:	4b61      	ldr	r3, [pc, #388]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	4a60      	ldr	r2, [pc, #384]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 80043ee:	f043 0304 	orr.w	r3, r3, #4
 80043f2:	6213      	str	r3, [r2, #32]
 80043f4:	4b5e      	ldr	r3, [pc, #376]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	4a5d      	ldr	r2, [pc, #372]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 80043fa:	f043 0301 	orr.w	r3, r3, #1
 80043fe:	6213      	str	r3, [r2, #32]
 8004400:	e00b      	b.n	800441a <HAL_RCC_OscConfig+0x36e>
 8004402:	4b5b      	ldr	r3, [pc, #364]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	4a5a      	ldr	r2, [pc, #360]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 8004408:	f023 0301 	bic.w	r3, r3, #1
 800440c:	6213      	str	r3, [r2, #32]
 800440e:	4b58      	ldr	r3, [pc, #352]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	4a57      	ldr	r2, [pc, #348]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 8004414:	f023 0304 	bic.w	r3, r3, #4
 8004418:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d015      	beq.n	800444e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004422:	f7fe fe5d 	bl	80030e0 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004428:	e00a      	b.n	8004440 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800442a:	f7fe fe59 	bl	80030e0 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	f241 3288 	movw	r2, #5000	; 0x1388
 8004438:	4293      	cmp	r3, r2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e0b1      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004440:	4b4b      	ldr	r3, [pc, #300]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0ee      	beq.n	800442a <HAL_RCC_OscConfig+0x37e>
 800444c:	e014      	b.n	8004478 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800444e:	f7fe fe47 	bl	80030e0 <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004454:	e00a      	b.n	800446c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004456:	f7fe fe43 	bl	80030e0 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	f241 3288 	movw	r2, #5000	; 0x1388
 8004464:	4293      	cmp	r3, r2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e09b      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800446c:	4b40      	ldr	r3, [pc, #256]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1ee      	bne.n	8004456 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004478:	7dfb      	ldrb	r3, [r7, #23]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d105      	bne.n	800448a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800447e:	4b3c      	ldr	r3, [pc, #240]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	4a3b      	ldr	r2, [pc, #236]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 8004484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004488:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 8087 	beq.w	80045a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004494:	4b36      	ldr	r3, [pc, #216]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f003 030c 	and.w	r3, r3, #12
 800449c:	2b08      	cmp	r3, #8
 800449e:	d061      	beq.n	8004564 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	69db      	ldr	r3, [r3, #28]
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d146      	bne.n	8004536 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a8:	4b33      	ldr	r3, [pc, #204]	; (8004578 <HAL_RCC_OscConfig+0x4cc>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ae:	f7fe fe17 	bl	80030e0 <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044b4:	e008      	b.n	80044c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b6:	f7fe fe13 	bl	80030e0 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e06d      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044c8:	4b29      	ldr	r3, [pc, #164]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1f0      	bne.n	80044b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044dc:	d108      	bne.n	80044f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80044de:	4b24      	ldr	r3, [pc, #144]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	4921      	ldr	r1, [pc, #132]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044f0:	4b1f      	ldr	r3, [pc, #124]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a19      	ldr	r1, [r3, #32]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	430b      	orrs	r3, r1
 8004502:	491b      	ldr	r1, [pc, #108]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 8004504:	4313      	orrs	r3, r2
 8004506:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004508:	4b1b      	ldr	r3, [pc, #108]	; (8004578 <HAL_RCC_OscConfig+0x4cc>)
 800450a:	2201      	movs	r2, #1
 800450c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450e:	f7fe fde7 	bl	80030e0 <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004516:	f7fe fde3 	bl	80030e0 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e03d      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004528:	4b11      	ldr	r3, [pc, #68]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0f0      	beq.n	8004516 <HAL_RCC_OscConfig+0x46a>
 8004534:	e035      	b.n	80045a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004536:	4b10      	ldr	r3, [pc, #64]	; (8004578 <HAL_RCC_OscConfig+0x4cc>)
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453c:	f7fe fdd0 	bl	80030e0 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004544:	f7fe fdcc 	bl	80030e0 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e026      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004556:	4b06      	ldr	r3, [pc, #24]	; (8004570 <HAL_RCC_OscConfig+0x4c4>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f0      	bne.n	8004544 <HAL_RCC_OscConfig+0x498>
 8004562:	e01e      	b.n	80045a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	69db      	ldr	r3, [r3, #28]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d107      	bne.n	800457c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e019      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>
 8004570:	40021000 	.word	0x40021000
 8004574:	40007000 	.word	0x40007000
 8004578:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800457c:	4b0b      	ldr	r3, [pc, #44]	; (80045ac <HAL_RCC_OscConfig+0x500>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	429a      	cmp	r2, r3
 800458e:	d106      	bne.n	800459e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800459a:	429a      	cmp	r2, r3
 800459c:	d001      	beq.n	80045a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	40021000 	.word	0x40021000

080045b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e0d0      	b.n	8004766 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045c4:	4b6a      	ldr	r3, [pc, #424]	; (8004770 <HAL_RCC_ClockConfig+0x1c0>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d910      	bls.n	80045f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d2:	4b67      	ldr	r3, [pc, #412]	; (8004770 <HAL_RCC_ClockConfig+0x1c0>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f023 0207 	bic.w	r2, r3, #7
 80045da:	4965      	ldr	r1, [pc, #404]	; (8004770 <HAL_RCC_ClockConfig+0x1c0>)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	4313      	orrs	r3, r2
 80045e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e2:	4b63      	ldr	r3, [pc, #396]	; (8004770 <HAL_RCC_ClockConfig+0x1c0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d001      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e0b8      	b.n	8004766 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d020      	beq.n	8004642 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	d005      	beq.n	8004618 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800460c:	4b59      	ldr	r3, [pc, #356]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	4a58      	ldr	r2, [pc, #352]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 8004612:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004616:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0308 	and.w	r3, r3, #8
 8004620:	2b00      	cmp	r3, #0
 8004622:	d005      	beq.n	8004630 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004624:	4b53      	ldr	r3, [pc, #332]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	4a52      	ldr	r2, [pc, #328]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 800462a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800462e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004630:	4b50      	ldr	r3, [pc, #320]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	494d      	ldr	r1, [pc, #308]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 800463e:	4313      	orrs	r3, r2
 8004640:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d040      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d107      	bne.n	8004666 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004656:	4b47      	ldr	r3, [pc, #284]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d115      	bne.n	800468e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e07f      	b.n	8004766 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d107      	bne.n	800467e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800466e:	4b41      	ldr	r3, [pc, #260]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d109      	bne.n	800468e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e073      	b.n	8004766 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800467e:	4b3d      	ldr	r3, [pc, #244]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e06b      	b.n	8004766 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800468e:	4b39      	ldr	r3, [pc, #228]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f023 0203 	bic.w	r2, r3, #3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	4936      	ldr	r1, [pc, #216]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 800469c:	4313      	orrs	r3, r2
 800469e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046a0:	f7fe fd1e 	bl	80030e0 <HAL_GetTick>
 80046a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046a6:	e00a      	b.n	80046be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046a8:	f7fe fd1a 	bl	80030e0 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e053      	b.n	8004766 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046be:	4b2d      	ldr	r3, [pc, #180]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f003 020c 	and.w	r2, r3, #12
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d1eb      	bne.n	80046a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046d0:	4b27      	ldr	r3, [pc, #156]	; (8004770 <HAL_RCC_ClockConfig+0x1c0>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d210      	bcs.n	8004700 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046de:	4b24      	ldr	r3, [pc, #144]	; (8004770 <HAL_RCC_ClockConfig+0x1c0>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f023 0207 	bic.w	r2, r3, #7
 80046e6:	4922      	ldr	r1, [pc, #136]	; (8004770 <HAL_RCC_ClockConfig+0x1c0>)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ee:	4b20      	ldr	r3, [pc, #128]	; (8004770 <HAL_RCC_ClockConfig+0x1c0>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0307 	and.w	r3, r3, #7
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d001      	beq.n	8004700 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e032      	b.n	8004766 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b00      	cmp	r3, #0
 800470a:	d008      	beq.n	800471e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800470c:	4b19      	ldr	r3, [pc, #100]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	4916      	ldr	r1, [pc, #88]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 800471a:	4313      	orrs	r3, r2
 800471c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	2b00      	cmp	r3, #0
 8004728:	d009      	beq.n	800473e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800472a:	4b12      	ldr	r3, [pc, #72]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	490e      	ldr	r1, [pc, #56]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 800473a:	4313      	orrs	r3, r2
 800473c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800473e:	f000 f821 	bl	8004784 <HAL_RCC_GetSysClockFreq>
 8004742:	4602      	mov	r2, r0
 8004744:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <HAL_RCC_ClockConfig+0x1c4>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	091b      	lsrs	r3, r3, #4
 800474a:	f003 030f 	and.w	r3, r3, #15
 800474e:	490a      	ldr	r1, [pc, #40]	; (8004778 <HAL_RCC_ClockConfig+0x1c8>)
 8004750:	5ccb      	ldrb	r3, [r1, r3]
 8004752:	fa22 f303 	lsr.w	r3, r2, r3
 8004756:	4a09      	ldr	r2, [pc, #36]	; (800477c <HAL_RCC_ClockConfig+0x1cc>)
 8004758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800475a:	4b09      	ldr	r3, [pc, #36]	; (8004780 <HAL_RCC_ClockConfig+0x1d0>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4618      	mov	r0, r3
 8004760:	f7fe fc7c 	bl	800305c <HAL_InitTick>

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	40022000 	.word	0x40022000
 8004774:	40021000 	.word	0x40021000
 8004778:	08009694 	.word	0x08009694
 800477c:	20000034 	.word	0x20000034
 8004780:	20000038 	.word	0x20000038

08004784 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004784:	b480      	push	{r7}
 8004786:	b087      	sub	sp, #28
 8004788:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	60fb      	str	r3, [r7, #12]
 800478e:	2300      	movs	r3, #0
 8004790:	60bb      	str	r3, [r7, #8]
 8004792:	2300      	movs	r3, #0
 8004794:	617b      	str	r3, [r7, #20]
 8004796:	2300      	movs	r3, #0
 8004798:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800479e:	4b1e      	ldr	r3, [pc, #120]	; (8004818 <HAL_RCC_GetSysClockFreq+0x94>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f003 030c 	and.w	r3, r3, #12
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d002      	beq.n	80047b4 <HAL_RCC_GetSysClockFreq+0x30>
 80047ae:	2b08      	cmp	r3, #8
 80047b0:	d003      	beq.n	80047ba <HAL_RCC_GetSysClockFreq+0x36>
 80047b2:	e027      	b.n	8004804 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047b4:	4b19      	ldr	r3, [pc, #100]	; (800481c <HAL_RCC_GetSysClockFreq+0x98>)
 80047b6:	613b      	str	r3, [r7, #16]
      break;
 80047b8:	e027      	b.n	800480a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	0c9b      	lsrs	r3, r3, #18
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	4a17      	ldr	r2, [pc, #92]	; (8004820 <HAL_RCC_GetSysClockFreq+0x9c>)
 80047c4:	5cd3      	ldrb	r3, [r2, r3]
 80047c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d010      	beq.n	80047f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80047d2:	4b11      	ldr	r3, [pc, #68]	; (8004818 <HAL_RCC_GetSysClockFreq+0x94>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	0c5b      	lsrs	r3, r3, #17
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	4a11      	ldr	r2, [pc, #68]	; (8004824 <HAL_RCC_GetSysClockFreq+0xa0>)
 80047de:	5cd3      	ldrb	r3, [r2, r3]
 80047e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a0d      	ldr	r2, [pc, #52]	; (800481c <HAL_RCC_GetSysClockFreq+0x98>)
 80047e6:	fb03 f202 	mul.w	r2, r3, r2
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f0:	617b      	str	r3, [r7, #20]
 80047f2:	e004      	b.n	80047fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a0c      	ldr	r2, [pc, #48]	; (8004828 <HAL_RCC_GetSysClockFreq+0xa4>)
 80047f8:	fb02 f303 	mul.w	r3, r2, r3
 80047fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	613b      	str	r3, [r7, #16]
      break;
 8004802:	e002      	b.n	800480a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004804:	4b05      	ldr	r3, [pc, #20]	; (800481c <HAL_RCC_GetSysClockFreq+0x98>)
 8004806:	613b      	str	r3, [r7, #16]
      break;
 8004808:	bf00      	nop
    }
  }
  return sysclockfreq;
 800480a:	693b      	ldr	r3, [r7, #16]
}
 800480c:	4618      	mov	r0, r3
 800480e:	371c      	adds	r7, #28
 8004810:	46bd      	mov	sp, r7
 8004812:	bc80      	pop	{r7}
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40021000 	.word	0x40021000
 800481c:	007a1200 	.word	0x007a1200
 8004820:	080096ac 	.word	0x080096ac
 8004824:	080096bc 	.word	0x080096bc
 8004828:	003d0900 	.word	0x003d0900

0800482c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004830:	4b02      	ldr	r3, [pc, #8]	; (800483c <HAL_RCC_GetHCLKFreq+0x10>)
 8004832:	681b      	ldr	r3, [r3, #0]
}
 8004834:	4618      	mov	r0, r3
 8004836:	46bd      	mov	sp, r7
 8004838:	bc80      	pop	{r7}
 800483a:	4770      	bx	lr
 800483c:	20000034 	.word	0x20000034

08004840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004844:	f7ff fff2 	bl	800482c <HAL_RCC_GetHCLKFreq>
 8004848:	4602      	mov	r2, r0
 800484a:	4b05      	ldr	r3, [pc, #20]	; (8004860 <HAL_RCC_GetPCLK1Freq+0x20>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	0a1b      	lsrs	r3, r3, #8
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	4903      	ldr	r1, [pc, #12]	; (8004864 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004856:	5ccb      	ldrb	r3, [r1, r3]
 8004858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800485c:	4618      	mov	r0, r3
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40021000 	.word	0x40021000
 8004864:	080096a4 	.word	0x080096a4

08004868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800486c:	f7ff ffde 	bl	800482c <HAL_RCC_GetHCLKFreq>
 8004870:	4602      	mov	r2, r0
 8004872:	4b05      	ldr	r3, [pc, #20]	; (8004888 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	0adb      	lsrs	r3, r3, #11
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	4903      	ldr	r1, [pc, #12]	; (800488c <HAL_RCC_GetPCLK2Freq+0x24>)
 800487e:	5ccb      	ldrb	r3, [r1, r3]
 8004880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004884:	4618      	mov	r0, r3
 8004886:	bd80      	pop	{r7, pc}
 8004888:	40021000 	.word	0x40021000
 800488c:	080096a4 	.word	0x080096a4

08004890 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004898:	4b0a      	ldr	r3, [pc, #40]	; (80048c4 <RCC_Delay+0x34>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a0a      	ldr	r2, [pc, #40]	; (80048c8 <RCC_Delay+0x38>)
 800489e:	fba2 2303 	umull	r2, r3, r2, r3
 80048a2:	0a5b      	lsrs	r3, r3, #9
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	fb02 f303 	mul.w	r3, r2, r3
 80048aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80048ac:	bf00      	nop
  }
  while (Delay --);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	1e5a      	subs	r2, r3, #1
 80048b2:	60fa      	str	r2, [r7, #12]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1f9      	bne.n	80048ac <RCC_Delay+0x1c>
}
 80048b8:	bf00      	nop
 80048ba:	bf00      	nop
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	bc80      	pop	{r7}
 80048c2:	4770      	bx	lr
 80048c4:	20000034 	.word	0x20000034
 80048c8:	10624dd3 	.word	0x10624dd3

080048cc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	613b      	str	r3, [r7, #16]
 80048d8:	2300      	movs	r3, #0
 80048da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d07d      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80048e8:	2300      	movs	r3, #0
 80048ea:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ec:	4b4f      	ldr	r3, [pc, #316]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10d      	bne.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048f8:	4b4c      	ldr	r3, [pc, #304]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	4a4b      	ldr	r2, [pc, #300]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004902:	61d3      	str	r3, [r2, #28]
 8004904:	4b49      	ldr	r3, [pc, #292]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004906:	69db      	ldr	r3, [r3, #28]
 8004908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800490c:	60bb      	str	r3, [r7, #8]
 800490e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004910:	2301      	movs	r3, #1
 8004912:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004914:	4b46      	ldr	r3, [pc, #280]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491c:	2b00      	cmp	r3, #0
 800491e:	d118      	bne.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004920:	4b43      	ldr	r3, [pc, #268]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a42      	ldr	r2, [pc, #264]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800492a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800492c:	f7fe fbd8 	bl	80030e0 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004932:	e008      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004934:	f7fe fbd4 	bl	80030e0 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b64      	cmp	r3, #100	; 0x64
 8004940:	d901      	bls.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e06d      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004946:	4b3a      	ldr	r3, [pc, #232]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0f0      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004952:	4b36      	ldr	r3, [pc, #216]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800495a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d02e      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	429a      	cmp	r2, r3
 800496e:	d027      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004970:	4b2e      	ldr	r3, [pc, #184]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004978:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800497a:	4b2e      	ldr	r3, [pc, #184]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800497c:	2201      	movs	r2, #1
 800497e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004980:	4b2c      	ldr	r3, [pc, #176]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004986:	4a29      	ldr	r2, [pc, #164]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d014      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004996:	f7fe fba3 	bl	80030e0 <HAL_GetTick>
 800499a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800499c:	e00a      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800499e:	f7fe fb9f 	bl	80030e0 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e036      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b4:	4b1d      	ldr	r3, [pc, #116]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0ee      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049c0:	4b1a      	ldr	r3, [pc, #104]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	4917      	ldr	r1, [pc, #92]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80049d2:	7dfb      	ldrb	r3, [r7, #23]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d105      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049d8:	4b14      	ldr	r3, [pc, #80]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	4a13      	ldr	r2, [pc, #76]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d008      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049f0:	4b0e      	ldr	r3, [pc, #56]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	490b      	ldr	r1, [pc, #44]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0310 	and.w	r3, r3, #16
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d008      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a0e:	4b07      	ldr	r3, [pc, #28]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	4904      	ldr	r1, [pc, #16]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	40007000 	.word	0x40007000
 8004a34:	42420440 	.word	0x42420440

08004a38 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	617b      	str	r3, [r7, #20]
 8004a44:	2300      	movs	r3, #0
 8004a46:	61fb      	str	r3, [r7, #28]
 8004a48:	2300      	movs	r3, #0
 8004a4a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	2300      	movs	r3, #0
 8004a52:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b10      	cmp	r3, #16
 8004a58:	d00a      	beq.n	8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b10      	cmp	r3, #16
 8004a5e:	f200 808a 	bhi.w	8004b76 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d045      	beq.n	8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d075      	beq.n	8004b5a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004a6e:	e082      	b.n	8004b76 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004a70:	4b46      	ldr	r3, [pc, #280]	; (8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004a76:	4b45      	ldr	r3, [pc, #276]	; (8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d07b      	beq.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	0c9b      	lsrs	r3, r3, #18
 8004a86:	f003 030f 	and.w	r3, r3, #15
 8004a8a:	4a41      	ldr	r2, [pc, #260]	; (8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004a8c:	5cd3      	ldrb	r3, [r2, r3]
 8004a8e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d015      	beq.n	8004ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a9a:	4b3c      	ldr	r3, [pc, #240]	; (8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	0c5b      	lsrs	r3, r3, #17
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	4a3b      	ldr	r2, [pc, #236]	; (8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004aa6:	5cd3      	ldrb	r3, [r2, r3]
 8004aa8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00d      	beq.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004ab4:	4a38      	ldr	r2, [pc, #224]	; (8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	fb02 f303 	mul.w	r3, r2, r3
 8004ac2:	61fb      	str	r3, [r7, #28]
 8004ac4:	e004      	b.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	4a34      	ldr	r2, [pc, #208]	; (8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004aca:	fb02 f303 	mul.w	r3, r2, r3
 8004ace:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004ad0:	4b2e      	ldr	r3, [pc, #184]	; (8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ad8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004adc:	d102      	bne.n	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	61bb      	str	r3, [r7, #24]
      break;
 8004ae2:	e04a      	b.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	4a2d      	ldr	r2, [pc, #180]	; (8004ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004aea:	fba2 2303 	umull	r2, r3, r2, r3
 8004aee:	085b      	lsrs	r3, r3, #1
 8004af0:	61bb      	str	r3, [r7, #24]
      break;
 8004af2:	e042      	b.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004af4:	4b25      	ldr	r3, [pc, #148]	; (8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b04:	d108      	bne.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004b10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b14:	61bb      	str	r3, [r7, #24]
 8004b16:	e01f      	b.n	8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b22:	d109      	bne.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004b24:	4b19      	ldr	r3, [pc, #100]	; (8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004b30:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004b34:	61bb      	str	r3, [r7, #24]
 8004b36:	e00f      	b.n	8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b42:	d11c      	bne.n	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004b44:	4b11      	ldr	r3, [pc, #68]	; (8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d016      	beq.n	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004b50:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004b54:	61bb      	str	r3, [r7, #24]
      break;
 8004b56:	e012      	b.n	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004b58:	e011      	b.n	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004b5a:	f7ff fe85 	bl	8004868 <HAL_RCC_GetPCLK2Freq>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	4b0a      	ldr	r3, [pc, #40]	; (8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	0b9b      	lsrs	r3, r3, #14
 8004b66:	f003 0303 	and.w	r3, r3, #3
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b72:	61bb      	str	r3, [r7, #24]
      break;
 8004b74:	e004      	b.n	8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004b76:	bf00      	nop
 8004b78:	e002      	b.n	8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004b7a:	bf00      	nop
 8004b7c:	e000      	b.n	8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004b7e:	bf00      	nop
    }
  }
  return (frequency);
 8004b80:	69bb      	ldr	r3, [r7, #24]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3720      	adds	r7, #32
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	40021000 	.word	0x40021000
 8004b90:	080096c0 	.word	0x080096c0
 8004b94:	080096d0 	.word	0x080096d0
 8004b98:	007a1200 	.word	0x007a1200
 8004b9c:	003d0900 	.word	0x003d0900
 8004ba0:	aaaaaaab 	.word	0xaaaaaaab

08004ba4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e041      	b.n	8004c3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d106      	bne.n	8004bd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7fe f89a 	bl	8002d04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3304      	adds	r3, #4
 8004be0:	4619      	mov	r1, r3
 8004be2:	4610      	mov	r0, r2
 8004be4:	f000 fbb0 	bl	8005348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
	...

08004c44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d001      	beq.n	8004c5c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e032      	b.n	8004cc2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a18      	ldr	r2, [pc, #96]	; (8004ccc <HAL_TIM_Base_Start+0x88>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d00e      	beq.n	8004c8c <HAL_TIM_Base_Start+0x48>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c76:	d009      	beq.n	8004c8c <HAL_TIM_Base_Start+0x48>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a14      	ldr	r2, [pc, #80]	; (8004cd0 <HAL_TIM_Base_Start+0x8c>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d004      	beq.n	8004c8c <HAL_TIM_Base_Start+0x48>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a13      	ldr	r2, [pc, #76]	; (8004cd4 <HAL_TIM_Base_Start+0x90>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d111      	bne.n	8004cb0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 0307 	and.w	r3, r3, #7
 8004c96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2b06      	cmp	r3, #6
 8004c9c:	d010      	beq.n	8004cc0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f042 0201 	orr.w	r2, r2, #1
 8004cac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cae:	e007      	b.n	8004cc0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0201 	orr.w	r2, r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bc80      	pop	{r7}
 8004cca:	4770      	bx	lr
 8004ccc:	40012c00 	.word	0x40012c00
 8004cd0:	40000400 	.word	0x40000400
 8004cd4:	40000800 	.word	0x40000800

08004cd8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e041      	b.n	8004d6e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f839 	bl	8004d76 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3304      	adds	r3, #4
 8004d14:	4619      	mov	r1, r3
 8004d16:	4610      	mov	r0, r2
 8004d18:	f000 fb16 	bl	8005348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004d7e:	bf00      	nop
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bc80      	pop	{r7}
 8004d86:	4770      	bx	lr

08004d88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e041      	b.n	8004e1e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d106      	bne.n	8004db4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f839 	bl	8004e26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	f000 fabe 	bl	8005348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e2e:	bf00      	nop
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bc80      	pop	{r7}
 8004e36:	4770      	bx	lr

08004e38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d109      	bne.n	8004e5c <HAL_TIM_PWM_Start+0x24>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	bf14      	ite	ne
 8004e54:	2301      	movne	r3, #1
 8004e56:	2300      	moveq	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	e022      	b.n	8004ea2 <HAL_TIM_PWM_Start+0x6a>
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d109      	bne.n	8004e76 <HAL_TIM_PWM_Start+0x3e>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	bf14      	ite	ne
 8004e6e:	2301      	movne	r3, #1
 8004e70:	2300      	moveq	r3, #0
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	e015      	b.n	8004ea2 <HAL_TIM_PWM_Start+0x6a>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d109      	bne.n	8004e90 <HAL_TIM_PWM_Start+0x58>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	bf14      	ite	ne
 8004e88:	2301      	movne	r3, #1
 8004e8a:	2300      	moveq	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	e008      	b.n	8004ea2 <HAL_TIM_PWM_Start+0x6a>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	bf14      	ite	ne
 8004e9c:	2301      	movne	r3, #1
 8004e9e:	2300      	moveq	r3, #0
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e05e      	b.n	8004f68 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d104      	bne.n	8004eba <HAL_TIM_PWM_Start+0x82>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eb8:	e013      	b.n	8004ee2 <HAL_TIM_PWM_Start+0xaa>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b04      	cmp	r3, #4
 8004ebe:	d104      	bne.n	8004eca <HAL_TIM_PWM_Start+0x92>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ec8:	e00b      	b.n	8004ee2 <HAL_TIM_PWM_Start+0xaa>
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d104      	bne.n	8004eda <HAL_TIM_PWM_Start+0xa2>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ed8:	e003      	b.n	8004ee2 <HAL_TIM_PWM_Start+0xaa>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2202      	movs	r2, #2
 8004ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	6839      	ldr	r1, [r7, #0]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fcac 	bl	8005848 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a1e      	ldr	r2, [pc, #120]	; (8004f70 <HAL_TIM_PWM_Start+0x138>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d107      	bne.n	8004f0a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a18      	ldr	r2, [pc, #96]	; (8004f70 <HAL_TIM_PWM_Start+0x138>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d00e      	beq.n	8004f32 <HAL_TIM_PWM_Start+0xfa>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f1c:	d009      	beq.n	8004f32 <HAL_TIM_PWM_Start+0xfa>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a14      	ldr	r2, [pc, #80]	; (8004f74 <HAL_TIM_PWM_Start+0x13c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d004      	beq.n	8004f32 <HAL_TIM_PWM_Start+0xfa>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a12      	ldr	r2, [pc, #72]	; (8004f78 <HAL_TIM_PWM_Start+0x140>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d111      	bne.n	8004f56 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f003 0307 	and.w	r3, r3, #7
 8004f3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2b06      	cmp	r3, #6
 8004f42:	d010      	beq.n	8004f66 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0201 	orr.w	r2, r2, #1
 8004f52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f54:	e007      	b.n	8004f66 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f042 0201 	orr.w	r2, r2, #1
 8004f64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40012c00 	.word	0x40012c00
 8004f74:	40000400 	.word	0x40000400
 8004f78:	40000800 	.word	0x40000800

08004f7c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d101      	bne.n	8004f9a <HAL_TIM_OC_ConfigChannel+0x1e>
 8004f96:	2302      	movs	r3, #2
 8004f98:	e048      	b.n	800502c <HAL_TIM_OC_ConfigChannel+0xb0>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b0c      	cmp	r3, #12
 8004fa6:	d839      	bhi.n	800501c <HAL_TIM_OC_ConfigChannel+0xa0>
 8004fa8:	a201      	add	r2, pc, #4	; (adr r2, 8004fb0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fae:	bf00      	nop
 8004fb0:	08004fe5 	.word	0x08004fe5
 8004fb4:	0800501d 	.word	0x0800501d
 8004fb8:	0800501d 	.word	0x0800501d
 8004fbc:	0800501d 	.word	0x0800501d
 8004fc0:	08004ff3 	.word	0x08004ff3
 8004fc4:	0800501d 	.word	0x0800501d
 8004fc8:	0800501d 	.word	0x0800501d
 8004fcc:	0800501d 	.word	0x0800501d
 8004fd0:	08005001 	.word	0x08005001
 8004fd4:	0800501d 	.word	0x0800501d
 8004fd8:	0800501d 	.word	0x0800501d
 8004fdc:	0800501d 	.word	0x0800501d
 8004fe0:	0800500f 	.word	0x0800500f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68b9      	ldr	r1, [r7, #8]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 fa0e 	bl	800540c <TIM_OC1_SetConfig>
      break;
 8004ff0:	e017      	b.n	8005022 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68b9      	ldr	r1, [r7, #8]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f000 fa6d 	bl	80054d8 <TIM_OC2_SetConfig>
      break;
 8004ffe:	e010      	b.n	8005022 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68b9      	ldr	r1, [r7, #8]
 8005006:	4618      	mov	r0, r3
 8005008:	f000 fad0 	bl	80055ac <TIM_OC3_SetConfig>
      break;
 800500c:	e009      	b.n	8005022 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68b9      	ldr	r1, [r7, #8]
 8005014:	4618      	mov	r0, r3
 8005016:	f000 fb33 	bl	8005680 <TIM_OC4_SetConfig>
      break;
 800501a:	e002      	b.n	8005022 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	75fb      	strb	r3, [r7, #23]
      break;
 8005020:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800502a:	7dfb      	ldrb	r3, [r7, #23]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3718      	adds	r7, #24
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005040:	2300      	movs	r3, #0
 8005042:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800504a:	2b01      	cmp	r3, #1
 800504c:	d101      	bne.n	8005052 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800504e:	2302      	movs	r3, #2
 8005050:	e0ae      	b.n	80051b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b0c      	cmp	r3, #12
 800505e:	f200 809f 	bhi.w	80051a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005062:	a201      	add	r2, pc, #4	; (adr r2, 8005068 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005068:	0800509d 	.word	0x0800509d
 800506c:	080051a1 	.word	0x080051a1
 8005070:	080051a1 	.word	0x080051a1
 8005074:	080051a1 	.word	0x080051a1
 8005078:	080050dd 	.word	0x080050dd
 800507c:	080051a1 	.word	0x080051a1
 8005080:	080051a1 	.word	0x080051a1
 8005084:	080051a1 	.word	0x080051a1
 8005088:	0800511f 	.word	0x0800511f
 800508c:	080051a1 	.word	0x080051a1
 8005090:	080051a1 	.word	0x080051a1
 8005094:	080051a1 	.word	0x080051a1
 8005098:	0800515f 	.word	0x0800515f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68b9      	ldr	r1, [r7, #8]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 f9b2 	bl	800540c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699a      	ldr	r2, [r3, #24]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0208 	orr.w	r2, r2, #8
 80050b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699a      	ldr	r2, [r3, #24]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 0204 	bic.w	r2, r2, #4
 80050c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6999      	ldr	r1, [r3, #24]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	691a      	ldr	r2, [r3, #16]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	619a      	str	r2, [r3, #24]
      break;
 80050da:	e064      	b.n	80051a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68b9      	ldr	r1, [r7, #8]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 f9f8 	bl	80054d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699a      	ldr	r2, [r3, #24]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	699a      	ldr	r2, [r3, #24]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6999      	ldr	r1, [r3, #24]
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	021a      	lsls	r2, r3, #8
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	619a      	str	r2, [r3, #24]
      break;
 800511c:	e043      	b.n	80051a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68b9      	ldr	r1, [r7, #8]
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fa41 	bl	80055ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69da      	ldr	r2, [r3, #28]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f042 0208 	orr.w	r2, r2, #8
 8005138:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	69da      	ldr	r2, [r3, #28]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0204 	bic.w	r2, r2, #4
 8005148:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	69d9      	ldr	r1, [r3, #28]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	691a      	ldr	r2, [r3, #16]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	430a      	orrs	r2, r1
 800515a:	61da      	str	r2, [r3, #28]
      break;
 800515c:	e023      	b.n	80051a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68b9      	ldr	r1, [r7, #8]
 8005164:	4618      	mov	r0, r3
 8005166:	f000 fa8b 	bl	8005680 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69da      	ldr	r2, [r3, #28]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69da      	ldr	r2, [r3, #28]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	69d9      	ldr	r1, [r3, #28]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	021a      	lsls	r2, r3, #8
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	61da      	str	r2, [r3, #28]
      break;
 800519e:	e002      	b.n	80051a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	75fb      	strb	r3, [r7, #23]
      break;
 80051a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3718      	adds	r7, #24
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051c2:	2300      	movs	r3, #0
 80051c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d101      	bne.n	80051d4 <HAL_TIM_ConfigClockSource+0x1c>
 80051d0:	2302      	movs	r3, #2
 80051d2:	e0b4      	b.n	800533e <HAL_TIM_ConfigClockSource+0x186>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800520c:	d03e      	beq.n	800528c <HAL_TIM_ConfigClockSource+0xd4>
 800520e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005212:	f200 8087 	bhi.w	8005324 <HAL_TIM_ConfigClockSource+0x16c>
 8005216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800521a:	f000 8086 	beq.w	800532a <HAL_TIM_ConfigClockSource+0x172>
 800521e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005222:	d87f      	bhi.n	8005324 <HAL_TIM_ConfigClockSource+0x16c>
 8005224:	2b70      	cmp	r3, #112	; 0x70
 8005226:	d01a      	beq.n	800525e <HAL_TIM_ConfigClockSource+0xa6>
 8005228:	2b70      	cmp	r3, #112	; 0x70
 800522a:	d87b      	bhi.n	8005324 <HAL_TIM_ConfigClockSource+0x16c>
 800522c:	2b60      	cmp	r3, #96	; 0x60
 800522e:	d050      	beq.n	80052d2 <HAL_TIM_ConfigClockSource+0x11a>
 8005230:	2b60      	cmp	r3, #96	; 0x60
 8005232:	d877      	bhi.n	8005324 <HAL_TIM_ConfigClockSource+0x16c>
 8005234:	2b50      	cmp	r3, #80	; 0x50
 8005236:	d03c      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0xfa>
 8005238:	2b50      	cmp	r3, #80	; 0x50
 800523a:	d873      	bhi.n	8005324 <HAL_TIM_ConfigClockSource+0x16c>
 800523c:	2b40      	cmp	r3, #64	; 0x40
 800523e:	d058      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x13a>
 8005240:	2b40      	cmp	r3, #64	; 0x40
 8005242:	d86f      	bhi.n	8005324 <HAL_TIM_ConfigClockSource+0x16c>
 8005244:	2b30      	cmp	r3, #48	; 0x30
 8005246:	d064      	beq.n	8005312 <HAL_TIM_ConfigClockSource+0x15a>
 8005248:	2b30      	cmp	r3, #48	; 0x30
 800524a:	d86b      	bhi.n	8005324 <HAL_TIM_ConfigClockSource+0x16c>
 800524c:	2b20      	cmp	r3, #32
 800524e:	d060      	beq.n	8005312 <HAL_TIM_ConfigClockSource+0x15a>
 8005250:	2b20      	cmp	r3, #32
 8005252:	d867      	bhi.n	8005324 <HAL_TIM_ConfigClockSource+0x16c>
 8005254:	2b00      	cmp	r3, #0
 8005256:	d05c      	beq.n	8005312 <HAL_TIM_ConfigClockSource+0x15a>
 8005258:	2b10      	cmp	r3, #16
 800525a:	d05a      	beq.n	8005312 <HAL_TIM_ConfigClockSource+0x15a>
 800525c:	e062      	b.n	8005324 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6818      	ldr	r0, [r3, #0]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	6899      	ldr	r1, [r3, #8]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	f000 facc 	bl	800580a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005280:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	609a      	str	r2, [r3, #8]
      break;
 800528a:	e04f      	b.n	800532c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6818      	ldr	r0, [r3, #0]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	6899      	ldr	r1, [r3, #8]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f000 fab5 	bl	800580a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689a      	ldr	r2, [r3, #8]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052ae:	609a      	str	r2, [r3, #8]
      break;
 80052b0:	e03c      	b.n	800532c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6818      	ldr	r0, [r3, #0]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	6859      	ldr	r1, [r3, #4]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	461a      	mov	r2, r3
 80052c0:	f000 fa2c 	bl	800571c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2150      	movs	r1, #80	; 0x50
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 fa83 	bl	80057d6 <TIM_ITRx_SetConfig>
      break;
 80052d0:	e02c      	b.n	800532c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6818      	ldr	r0, [r3, #0]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	6859      	ldr	r1, [r3, #4]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	461a      	mov	r2, r3
 80052e0:	f000 fa4a 	bl	8005778 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2160      	movs	r1, #96	; 0x60
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 fa73 	bl	80057d6 <TIM_ITRx_SetConfig>
      break;
 80052f0:	e01c      	b.n	800532c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6818      	ldr	r0, [r3, #0]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	6859      	ldr	r1, [r3, #4]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	461a      	mov	r2, r3
 8005300:	f000 fa0c 	bl	800571c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2140      	movs	r1, #64	; 0x40
 800530a:	4618      	mov	r0, r3
 800530c:	f000 fa63 	bl	80057d6 <TIM_ITRx_SetConfig>
      break;
 8005310:	e00c      	b.n	800532c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4619      	mov	r1, r3
 800531c:	4610      	mov	r0, r2
 800531e:	f000 fa5a 	bl	80057d6 <TIM_ITRx_SetConfig>
      break;
 8005322:	e003      	b.n	800532c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	73fb      	strb	r3, [r7, #15]
      break;
 8005328:	e000      	b.n	800532c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800532a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800533c:	7bfb      	ldrb	r3, [r7, #15]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a29      	ldr	r2, [pc, #164]	; (8005400 <TIM_Base_SetConfig+0xb8>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d00b      	beq.n	8005378 <TIM_Base_SetConfig+0x30>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005366:	d007      	beq.n	8005378 <TIM_Base_SetConfig+0x30>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a26      	ldr	r2, [pc, #152]	; (8005404 <TIM_Base_SetConfig+0xbc>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d003      	beq.n	8005378 <TIM_Base_SetConfig+0x30>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a25      	ldr	r2, [pc, #148]	; (8005408 <TIM_Base_SetConfig+0xc0>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d108      	bne.n	800538a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a1c      	ldr	r2, [pc, #112]	; (8005400 <TIM_Base_SetConfig+0xb8>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d00b      	beq.n	80053aa <TIM_Base_SetConfig+0x62>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005398:	d007      	beq.n	80053aa <TIM_Base_SetConfig+0x62>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a19      	ldr	r2, [pc, #100]	; (8005404 <TIM_Base_SetConfig+0xbc>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d003      	beq.n	80053aa <TIM_Base_SetConfig+0x62>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a18      	ldr	r2, [pc, #96]	; (8005408 <TIM_Base_SetConfig+0xc0>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d108      	bne.n	80053bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	689a      	ldr	r2, [r3, #8]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a07      	ldr	r2, [pc, #28]	; (8005400 <TIM_Base_SetConfig+0xb8>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d103      	bne.n	80053f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	691a      	ldr	r2, [r3, #16]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	615a      	str	r2, [r3, #20]
}
 80053f6:	bf00      	nop
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bc80      	pop	{r7}
 80053fe:	4770      	bx	lr
 8005400:	40012c00 	.word	0x40012c00
 8005404:	40000400 	.word	0x40000400
 8005408:	40000800 	.word	0x40000800

0800540c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800540c:	b480      	push	{r7}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	f023 0201 	bic.w	r2, r3, #1
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f023 0303 	bic.w	r3, r3, #3
 8005442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f023 0302 	bic.w	r3, r3, #2
 8005454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	4313      	orrs	r3, r2
 800545e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a1c      	ldr	r2, [pc, #112]	; (80054d4 <TIM_OC1_SetConfig+0xc8>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d10c      	bne.n	8005482 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f023 0308 	bic.w	r3, r3, #8
 800546e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	4313      	orrs	r3, r2
 8005478:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f023 0304 	bic.w	r3, r3, #4
 8005480:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a13      	ldr	r2, [pc, #76]	; (80054d4 <TIM_OC1_SetConfig+0xc8>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d111      	bne.n	80054ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005490:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005498:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	621a      	str	r2, [r3, #32]
}
 80054c8:	bf00      	nop
 80054ca:	371c      	adds	r7, #28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bc80      	pop	{r7}
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	40012c00 	.word	0x40012c00

080054d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	f023 0210 	bic.w	r2, r3, #16
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800550e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	021b      	lsls	r3, r3, #8
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	4313      	orrs	r3, r2
 800551a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f023 0320 	bic.w	r3, r3, #32
 8005522:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	011b      	lsls	r3, r3, #4
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	4313      	orrs	r3, r2
 800552e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a1d      	ldr	r2, [pc, #116]	; (80055a8 <TIM_OC2_SetConfig+0xd0>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d10d      	bne.n	8005554 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800553e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	011b      	lsls	r3, r3, #4
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	4313      	orrs	r3, r2
 800554a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005552:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a14      	ldr	r2, [pc, #80]	; (80055a8 <TIM_OC2_SetConfig+0xd0>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d113      	bne.n	8005584 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005562:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800556a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	4313      	orrs	r3, r2
 8005576:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	4313      	orrs	r3, r2
 8005582:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	621a      	str	r2, [r3, #32]
}
 800559e:	bf00      	nop
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bc80      	pop	{r7}
 80055a6:	4770      	bx	lr
 80055a8:	40012c00 	.word	0x40012c00

080055ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f023 0303 	bic.w	r3, r3, #3
 80055e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	021b      	lsls	r3, r3, #8
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a1d      	ldr	r2, [pc, #116]	; (800567c <TIM_OC3_SetConfig+0xd0>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d10d      	bne.n	8005626 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005610:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	021b      	lsls	r3, r3, #8
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	4313      	orrs	r3, r2
 800561c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005624:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a14      	ldr	r2, [pc, #80]	; (800567c <TIM_OC3_SetConfig+0xd0>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d113      	bne.n	8005656 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800563c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	011b      	lsls	r3, r3, #4
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	4313      	orrs	r3, r2
 8005648:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	011b      	lsls	r3, r3, #4
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	4313      	orrs	r3, r2
 8005654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	621a      	str	r2, [r3, #32]
}
 8005670:	bf00      	nop
 8005672:	371c      	adds	r7, #28
 8005674:	46bd      	mov	sp, r7
 8005676:	bc80      	pop	{r7}
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	40012c00 	.word	0x40012c00

08005680 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	021b      	lsls	r3, r3, #8
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	031b      	lsls	r3, r3, #12
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a0f      	ldr	r2, [pc, #60]	; (8005718 <TIM_OC4_SetConfig+0x98>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d109      	bne.n	80056f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	019b      	lsls	r3, r3, #6
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	621a      	str	r2, [r3, #32]
}
 800570e:	bf00      	nop
 8005710:	371c      	adds	r7, #28
 8005712:	46bd      	mov	sp, r7
 8005714:	bc80      	pop	{r7}
 8005716:	4770      	bx	lr
 8005718:	40012c00 	.word	0x40012c00

0800571c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	f023 0201 	bic.w	r2, r3, #1
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	011b      	lsls	r3, r3, #4
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	4313      	orrs	r3, r2
 8005750:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f023 030a 	bic.w	r3, r3, #10
 8005758:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	4313      	orrs	r3, r2
 8005760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	621a      	str	r2, [r3, #32]
}
 800576e:	bf00      	nop
 8005770:	371c      	adds	r7, #28
 8005772:	46bd      	mov	sp, r7
 8005774:	bc80      	pop	{r7}
 8005776:	4770      	bx	lr

08005778 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	f023 0210 	bic.w	r2, r3, #16
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	031b      	lsls	r3, r3, #12
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	011b      	lsls	r3, r3, #4
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	4313      	orrs	r3, r2
 80057be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	621a      	str	r2, [r3, #32]
}
 80057cc:	bf00      	nop
 80057ce:	371c      	adds	r7, #28
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bc80      	pop	{r7}
 80057d4:	4770      	bx	lr

080057d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b085      	sub	sp, #20
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	f043 0307 	orr.w	r3, r3, #7
 80057f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	609a      	str	r2, [r3, #8]
}
 8005800:	bf00      	nop
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	bc80      	pop	{r7}
 8005808:	4770      	bx	lr

0800580a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800580a:	b480      	push	{r7}
 800580c:	b087      	sub	sp, #28
 800580e:	af00      	add	r7, sp, #0
 8005810:	60f8      	str	r0, [r7, #12]
 8005812:	60b9      	str	r1, [r7, #8]
 8005814:	607a      	str	r2, [r7, #4]
 8005816:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005824:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	021a      	lsls	r2, r3, #8
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	431a      	orrs	r2, r3
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	4313      	orrs	r3, r2
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	4313      	orrs	r3, r2
 8005836:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	609a      	str	r2, [r3, #8]
}
 800583e:	bf00      	nop
 8005840:	371c      	adds	r7, #28
 8005842:	46bd      	mov	sp, r7
 8005844:	bc80      	pop	{r7}
 8005846:	4770      	bx	lr

08005848 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005848:	b480      	push	{r7}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	f003 031f 	and.w	r3, r3, #31
 800585a:	2201      	movs	r2, #1
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6a1a      	ldr	r2, [r3, #32]
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	43db      	mvns	r3, r3
 800586a:	401a      	ands	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6a1a      	ldr	r2, [r3, #32]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f003 031f 	and.w	r3, r3, #31
 800587a:	6879      	ldr	r1, [r7, #4]
 800587c:	fa01 f303 	lsl.w	r3, r1, r3
 8005880:	431a      	orrs	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	621a      	str	r2, [r3, #32]
}
 8005886:	bf00      	nop
 8005888:	371c      	adds	r7, #28
 800588a:	46bd      	mov	sp, r7
 800588c:	bc80      	pop	{r7}
 800588e:	4770      	bx	lr

08005890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d101      	bne.n	80058a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058a4:	2302      	movs	r3, #2
 80058a6:	e046      	b.n	8005936 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a16      	ldr	r2, [pc, #88]	; (8005940 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d00e      	beq.n	800590a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f4:	d009      	beq.n	800590a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a12      	ldr	r2, [pc, #72]	; (8005944 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d004      	beq.n	800590a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a10      	ldr	r2, [pc, #64]	; (8005948 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d10c      	bne.n	8005924 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005910:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	4313      	orrs	r3, r2
 800591a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	bc80      	pop	{r7}
 800593e:	4770      	bx	lr
 8005940:	40012c00 	.word	0x40012c00
 8005944:	40000400 	.word	0x40000400
 8005948:	40000800 	.word	0x40000800

0800594c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e042      	b.n	80059e4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d106      	bne.n	8005978 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7fd faa6 	bl	8002ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2224      	movs	r2, #36	; 0x24
 800597c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68da      	ldr	r2, [r3, #12]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800598e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 fdc5 	bl	8006520 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	691a      	ldr	r2, [r3, #16]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	695a      	ldr	r2, [r3, #20]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2220      	movs	r2, #32
 80059d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2220      	movs	r2, #32
 80059d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b08a      	sub	sp, #40	; 0x28
 80059f0:	af02      	add	r7, sp, #8
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	603b      	str	r3, [r7, #0]
 80059f8:	4613      	mov	r3, r2
 80059fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b20      	cmp	r3, #32
 8005a0a:	d16d      	bne.n	8005ae8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <HAL_UART_Transmit+0x2c>
 8005a12:	88fb      	ldrh	r3, [r7, #6]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e066      	b.n	8005aea <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2221      	movs	r2, #33	; 0x21
 8005a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a2a:	f7fd fb59 	bl	80030e0 <HAL_GetTick>
 8005a2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	88fa      	ldrh	r2, [r7, #6]
 8005a34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	88fa      	ldrh	r2, [r7, #6]
 8005a3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a44:	d108      	bne.n	8005a58 <HAL_UART_Transmit+0x6c>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d104      	bne.n	8005a58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	61bb      	str	r3, [r7, #24]
 8005a56:	e003      	b.n	8005a60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a60:	e02a      	b.n	8005ab8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	2180      	movs	r1, #128	; 0x80
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 fb14 	bl	800609a <UART_WaitOnFlagUntilTimeout>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e036      	b.n	8005aea <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10b      	bne.n	8005a9a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	461a      	mov	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	3302      	adds	r3, #2
 8005a96:	61bb      	str	r3, [r7, #24]
 8005a98:	e007      	b.n	8005aaa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	781a      	ldrb	r2, [r3, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1cf      	bne.n	8005a62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	2140      	movs	r1, #64	; 0x40
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f000 fae4 	bl	800609a <UART_WaitOnFlagUntilTimeout>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d001      	beq.n	8005adc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e006      	b.n	8005aea <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	e000      	b.n	8005aea <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005ae8:	2302      	movs	r3, #2
  }
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3720      	adds	r7, #32
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b084      	sub	sp, #16
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	60f8      	str	r0, [r7, #12]
 8005afa:	60b9      	str	r1, [r7, #8]
 8005afc:	4613      	mov	r3, r2
 8005afe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b20      	cmp	r3, #32
 8005b0a:	d112      	bne.n	8005b32 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d002      	beq.n	8005b18 <HAL_UART_Receive_IT+0x26>
 8005b12:	88fb      	ldrh	r3, [r7, #6]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e00b      	b.n	8005b34 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005b22:	88fb      	ldrh	r3, [r7, #6]
 8005b24:	461a      	mov	r2, r3
 8005b26:	68b9      	ldr	r1, [r7, #8]
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f000 fb24 	bl	8006176 <UART_Start_Receive_IT>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	e000      	b.n	8005b34 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005b32:	2302      	movs	r3, #2
  }
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b0ba      	sub	sp, #232	; 0xe8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005b62:	2300      	movs	r3, #0
 8005b64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b72:	f003 030f 	and.w	r3, r3, #15
 8005b76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005b7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10f      	bne.n	8005ba2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b86:	f003 0320 	and.w	r3, r3, #32
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d009      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x66>
 8005b8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b92:	f003 0320 	and.w	r3, r3, #32
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fc01 	bl	80063a2 <UART_Receive_IT>
      return;
 8005ba0:	e25b      	b.n	800605a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005ba2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f000 80de 	beq.w	8005d68 <HAL_UART_IRQHandler+0x22c>
 8005bac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d106      	bne.n	8005bc6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bbc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 80d1 	beq.w	8005d68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00b      	beq.n	8005bea <HAL_UART_IRQHandler+0xae>
 8005bd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d005      	beq.n	8005bea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be2:	f043 0201 	orr.w	r2, r3, #1
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bee:	f003 0304 	and.w	r3, r3, #4
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00b      	beq.n	8005c0e <HAL_UART_IRQHandler+0xd2>
 8005bf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d005      	beq.n	8005c0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c06:	f043 0202 	orr.w	r2, r3, #2
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00b      	beq.n	8005c32 <HAL_UART_IRQHandler+0xf6>
 8005c1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d005      	beq.n	8005c32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2a:	f043 0204 	orr.w	r2, r3, #4
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c36:	f003 0308 	and.w	r3, r3, #8
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d011      	beq.n	8005c62 <HAL_UART_IRQHandler+0x126>
 8005c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c42:	f003 0320 	and.w	r3, r3, #32
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d105      	bne.n	8005c56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d005      	beq.n	8005c62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c5a:	f043 0208 	orr.w	r2, r3, #8
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f000 81f2 	beq.w	8006050 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c70:	f003 0320 	and.w	r3, r3, #32
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d008      	beq.n	8005c8a <HAL_UART_IRQHandler+0x14e>
 8005c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c7c:	f003 0320 	and.w	r3, r3, #32
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d002      	beq.n	8005c8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 fb8c 	bl	80063a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	bf14      	ite	ne
 8005c98:	2301      	movne	r3, #1
 8005c9a:	2300      	moveq	r3, #0
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca6:	f003 0308 	and.w	r3, r3, #8
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d103      	bne.n	8005cb6 <HAL_UART_IRQHandler+0x17a>
 8005cae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d04f      	beq.n	8005d56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 fa96 	bl	80061e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d041      	beq.n	8005d4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	3314      	adds	r3, #20
 8005cd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cd8:	e853 3f00 	ldrex	r3, [r3]
 8005cdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ce0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ce4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ce8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3314      	adds	r3, #20
 8005cf2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005cf6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005cfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d06:	e841 2300 	strex	r3, r2, [r1]
 8005d0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1d9      	bne.n	8005cca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d013      	beq.n	8005d46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d22:	4a7e      	ldr	r2, [pc, #504]	; (8005f1c <HAL_UART_IRQHandler+0x3e0>)
 8005d24:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7fd ff7a 	bl	8003c24 <HAL_DMA_Abort_IT>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d016      	beq.n	8005d64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d40:	4610      	mov	r0, r2
 8005d42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d44:	e00e      	b.n	8005d64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f993 	bl	8006072 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d4c:	e00a      	b.n	8005d64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f98f 	bl	8006072 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d54:	e006      	b.n	8005d64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f98b 	bl	8006072 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005d62:	e175      	b.n	8006050 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d64:	bf00      	nop
    return;
 8005d66:	e173      	b.n	8006050 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	f040 814f 	bne.w	8006010 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d76:	f003 0310 	and.w	r3, r3, #16
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f000 8148 	beq.w	8006010 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d84:	f003 0310 	and.w	r3, r3, #16
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f000 8141 	beq.w	8006010 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60bb      	str	r3, [r7, #8]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	60bb      	str	r3, [r7, #8]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	60bb      	str	r3, [r7, #8]
 8005da2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f000 80b6 	beq.w	8005f20 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005dc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 8145 	beq.w	8006054 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005dce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	f080 813e 	bcs.w	8006054 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dde:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	2b20      	cmp	r3, #32
 8005de8:	f000 8088 	beq.w	8005efc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	330c      	adds	r3, #12
 8005df2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005dfa:	e853 3f00 	ldrex	r3, [r3]
 8005dfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	330c      	adds	r3, #12
 8005e14:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e18:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e20:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e24:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e28:	e841 2300 	strex	r3, r2, [r1]
 8005e2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1d9      	bne.n	8005dec <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	3314      	adds	r3, #20
 8005e3e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e42:	e853 3f00 	ldrex	r3, [r3]
 8005e46:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e4a:	f023 0301 	bic.w	r3, r3, #1
 8005e4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	3314      	adds	r3, #20
 8005e58:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e5c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e60:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e62:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e64:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e68:	e841 2300 	strex	r3, r2, [r1]
 8005e6c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1e1      	bne.n	8005e38 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	3314      	adds	r3, #20
 8005e7a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e7e:	e853 3f00 	ldrex	r3, [r3]
 8005e82:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	3314      	adds	r3, #20
 8005e94:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e98:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ea0:	e841 2300 	strex	r3, r2, [r1]
 8005ea4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ea6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1e3      	bne.n	8005e74 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	330c      	adds	r3, #12
 8005ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ec4:	e853 3f00 	ldrex	r3, [r3]
 8005ec8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ecc:	f023 0310 	bic.w	r3, r3, #16
 8005ed0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	330c      	adds	r3, #12
 8005eda:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005ede:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ee0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ee4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ee6:	e841 2300 	strex	r3, r2, [r1]
 8005eea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1e3      	bne.n	8005eba <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fd fe59 	bl	8003bae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	4619      	mov	r1, r3
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f8b6 	bl	8006084 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f18:	e09c      	b.n	8006054 <HAL_UART_IRQHandler+0x518>
 8005f1a:	bf00      	nop
 8005f1c:	080062ad 	.word	0x080062ad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f000 808e 	beq.w	8006058 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005f3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f000 8089 	beq.w	8006058 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	330c      	adds	r3, #12
 8005f4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f50:	e853 3f00 	ldrex	r3, [r3]
 8005f54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	330c      	adds	r3, #12
 8005f66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005f6a:	647a      	str	r2, [r7, #68]	; 0x44
 8005f6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f72:	e841 2300 	strex	r3, r2, [r1]
 8005f76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1e3      	bne.n	8005f46 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3314      	adds	r3, #20
 8005f84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f88:	e853 3f00 	ldrex	r3, [r3]
 8005f8c:	623b      	str	r3, [r7, #32]
   return(result);
 8005f8e:	6a3b      	ldr	r3, [r7, #32]
 8005f90:	f023 0301 	bic.w	r3, r3, #1
 8005f94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	3314      	adds	r3, #20
 8005f9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005fa2:	633a      	str	r2, [r7, #48]	; 0x30
 8005fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005faa:	e841 2300 	strex	r3, r2, [r1]
 8005fae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1e3      	bne.n	8005f7e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2220      	movs	r2, #32
 8005fba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	330c      	adds	r3, #12
 8005fca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	e853 3f00 	ldrex	r3, [r3]
 8005fd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f023 0310 	bic.w	r3, r3, #16
 8005fda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	330c      	adds	r3, #12
 8005fe4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005fe8:	61fa      	str	r2, [r7, #28]
 8005fea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fec:	69b9      	ldr	r1, [r7, #24]
 8005fee:	69fa      	ldr	r2, [r7, #28]
 8005ff0:	e841 2300 	strex	r3, r2, [r1]
 8005ff4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1e3      	bne.n	8005fc4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2202      	movs	r2, #2
 8006000:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006002:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006006:	4619      	mov	r1, r3
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f83b 	bl	8006084 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800600e:	e023      	b.n	8006058 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006018:	2b00      	cmp	r3, #0
 800601a:	d009      	beq.n	8006030 <HAL_UART_IRQHandler+0x4f4>
 800601c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006024:	2b00      	cmp	r3, #0
 8006026:	d003      	beq.n	8006030 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 f953 	bl	80062d4 <UART_Transmit_IT>
    return;
 800602e:	e014      	b.n	800605a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00e      	beq.n	800605a <HAL_UART_IRQHandler+0x51e>
 800603c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006044:	2b00      	cmp	r3, #0
 8006046:	d008      	beq.n	800605a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f992 	bl	8006372 <UART_EndTransmit_IT>
    return;
 800604e:	e004      	b.n	800605a <HAL_UART_IRQHandler+0x51e>
    return;
 8006050:	bf00      	nop
 8006052:	e002      	b.n	800605a <HAL_UART_IRQHandler+0x51e>
      return;
 8006054:	bf00      	nop
 8006056:	e000      	b.n	800605a <HAL_UART_IRQHandler+0x51e>
      return;
 8006058:	bf00      	nop
  }
}
 800605a:	37e8      	adds	r7, #232	; 0xe8
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	bc80      	pop	{r7}
 8006070:	4770      	bx	lr

08006072 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006072:	b480      	push	{r7}
 8006074:	b083      	sub	sp, #12
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800607a:	bf00      	nop
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	bc80      	pop	{r7}
 8006082:	4770      	bx	lr

08006084 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	460b      	mov	r3, r1
 800608e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	bc80      	pop	{r7}
 8006098:	4770      	bx	lr

0800609a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b090      	sub	sp, #64	; 0x40
 800609e:	af00      	add	r7, sp, #0
 80060a0:	60f8      	str	r0, [r7, #12]
 80060a2:	60b9      	str	r1, [r7, #8]
 80060a4:	603b      	str	r3, [r7, #0]
 80060a6:	4613      	mov	r3, r2
 80060a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060aa:	e050      	b.n	800614e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b2:	d04c      	beq.n	800614e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80060b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d007      	beq.n	80060ca <UART_WaitOnFlagUntilTimeout+0x30>
 80060ba:	f7fd f811 	bl	80030e0 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d241      	bcs.n	800614e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	330c      	adds	r3, #12
 80060d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d4:	e853 3f00 	ldrex	r3, [r3]
 80060d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	330c      	adds	r3, #12
 80060e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060ea:	637a      	str	r2, [r7, #52]	; 0x34
 80060ec:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060f2:	e841 2300 	strex	r3, r2, [r1]
 80060f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1e5      	bne.n	80060ca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3314      	adds	r3, #20
 8006104:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	e853 3f00 	ldrex	r3, [r3]
 800610c:	613b      	str	r3, [r7, #16]
   return(result);
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f023 0301 	bic.w	r3, r3, #1
 8006114:	63bb      	str	r3, [r7, #56]	; 0x38
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	3314      	adds	r3, #20
 800611c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800611e:	623a      	str	r2, [r7, #32]
 8006120:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006122:	69f9      	ldr	r1, [r7, #28]
 8006124:	6a3a      	ldr	r2, [r7, #32]
 8006126:	e841 2300 	strex	r3, r2, [r1]
 800612a:	61bb      	str	r3, [r7, #24]
   return(result);
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1e5      	bne.n	80060fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2220      	movs	r2, #32
 8006136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2220      	movs	r2, #32
 800613e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e00f      	b.n	800616e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	4013      	ands	r3, r2
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	429a      	cmp	r2, r3
 800615c:	bf0c      	ite	eq
 800615e:	2301      	moveq	r3, #1
 8006160:	2300      	movne	r3, #0
 8006162:	b2db      	uxtb	r3, r3
 8006164:	461a      	mov	r2, r3
 8006166:	79fb      	ldrb	r3, [r7, #7]
 8006168:	429a      	cmp	r2, r3
 800616a:	d09f      	beq.n	80060ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3740      	adds	r7, #64	; 0x40
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006176:	b480      	push	{r7}
 8006178:	b085      	sub	sp, #20
 800617a:	af00      	add	r7, sp, #0
 800617c:	60f8      	str	r0, [r7, #12]
 800617e:	60b9      	str	r1, [r7, #8]
 8006180:	4613      	mov	r3, r2
 8006182:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	88fa      	ldrh	r2, [r7, #6]
 800618e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	88fa      	ldrh	r2, [r7, #6]
 8006194:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2222      	movs	r2, #34	; 0x22
 80061a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d007      	beq.n	80061bc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68da      	ldr	r2, [r3, #12]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061ba:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	695a      	ldr	r2, [r3, #20]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f042 0201 	orr.w	r2, r2, #1
 80061ca:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f042 0220 	orr.w	r2, r2, #32
 80061da:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bc80      	pop	{r7}
 80061e6:	4770      	bx	lr

080061e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b095      	sub	sp, #84	; 0x54
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	330c      	adds	r3, #12
 80061f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061fa:	e853 3f00 	ldrex	r3, [r3]
 80061fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006202:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	330c      	adds	r3, #12
 800620e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006210:	643a      	str	r2, [r7, #64]	; 0x40
 8006212:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006214:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006216:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006218:	e841 2300 	strex	r3, r2, [r1]
 800621c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800621e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1e5      	bne.n	80061f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3314      	adds	r3, #20
 800622a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	e853 3f00 	ldrex	r3, [r3]
 8006232:	61fb      	str	r3, [r7, #28]
   return(result);
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	f023 0301 	bic.w	r3, r3, #1
 800623a:	64bb      	str	r3, [r7, #72]	; 0x48
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	3314      	adds	r3, #20
 8006242:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006244:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006246:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006248:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800624a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800624c:	e841 2300 	strex	r3, r2, [r1]
 8006250:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1e5      	bne.n	8006224 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625c:	2b01      	cmp	r3, #1
 800625e:	d119      	bne.n	8006294 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	330c      	adds	r3, #12
 8006266:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	e853 3f00 	ldrex	r3, [r3]
 800626e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f023 0310 	bic.w	r3, r3, #16
 8006276:	647b      	str	r3, [r7, #68]	; 0x44
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	330c      	adds	r3, #12
 800627e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006280:	61ba      	str	r2, [r7, #24]
 8006282:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006284:	6979      	ldr	r1, [r7, #20]
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	e841 2300 	strex	r3, r2, [r1]
 800628c:	613b      	str	r3, [r7, #16]
   return(result);
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1e5      	bne.n	8006260 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2220      	movs	r2, #32
 8006298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80062a2:	bf00      	nop
 80062a4:	3754      	adds	r7, #84	; 0x54
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bc80      	pop	{r7}
 80062aa:	4770      	bx	lr

080062ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f7ff fed3 	bl	8006072 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062cc:	bf00      	nop
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b21      	cmp	r3, #33	; 0x21
 80062e6:	d13e      	bne.n	8006366 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f0:	d114      	bne.n	800631c <UART_Transmit_IT+0x48>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d110      	bne.n	800631c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	881b      	ldrh	r3, [r3, #0]
 8006304:	461a      	mov	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800630e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	1c9a      	adds	r2, r3, #2
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	621a      	str	r2, [r3, #32]
 800631a:	e008      	b.n	800632e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	1c59      	adds	r1, r3, #1
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	6211      	str	r1, [r2, #32]
 8006326:	781a      	ldrb	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006332:	b29b      	uxth	r3, r3
 8006334:	3b01      	subs	r3, #1
 8006336:	b29b      	uxth	r3, r3
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	4619      	mov	r1, r3
 800633c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10f      	bne.n	8006362 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68da      	ldr	r2, [r3, #12]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006350:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68da      	ldr	r2, [r3, #12]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006360:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006362:	2300      	movs	r3, #0
 8006364:	e000      	b.n	8006368 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006366:	2302      	movs	r3, #2
  }
}
 8006368:	4618      	mov	r0, r3
 800636a:	3714      	adds	r7, #20
 800636c:	46bd      	mov	sp, r7
 800636e:	bc80      	pop	{r7}
 8006370:	4770      	bx	lr

08006372 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b082      	sub	sp, #8
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68da      	ldr	r2, [r3, #12]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006388:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2220      	movs	r2, #32
 800638e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7ff fe64 	bl	8006060 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b08c      	sub	sp, #48	; 0x30
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b22      	cmp	r3, #34	; 0x22
 80063b4:	f040 80ae 	bne.w	8006514 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063c0:	d117      	bne.n	80063f2 <UART_Receive_IT+0x50>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d113      	bne.n	80063f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80063ca:	2300      	movs	r3, #0
 80063cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	b29b      	uxth	r3, r3
 80063dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ea:	1c9a      	adds	r2, r3, #2
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	629a      	str	r2, [r3, #40]	; 0x28
 80063f0:	e026      	b.n	8006440 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80063f8:	2300      	movs	r3, #0
 80063fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006404:	d007      	beq.n	8006416 <UART_Receive_IT+0x74>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10a      	bne.n	8006424 <UART_Receive_IT+0x82>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d106      	bne.n	8006424 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	b2da      	uxtb	r2, r3
 800641e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006420:	701a      	strb	r2, [r3, #0]
 8006422:	e008      	b.n	8006436 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	b2db      	uxtb	r3, r3
 800642c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006430:	b2da      	uxtb	r2, r3
 8006432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006434:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643a:	1c5a      	adds	r2, r3, #1
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006444:	b29b      	uxth	r3, r3
 8006446:	3b01      	subs	r3, #1
 8006448:	b29b      	uxth	r3, r3
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	4619      	mov	r1, r3
 800644e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006450:	2b00      	cmp	r3, #0
 8006452:	d15d      	bne.n	8006510 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68da      	ldr	r2, [r3, #12]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 0220 	bic.w	r2, r2, #32
 8006462:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68da      	ldr	r2, [r3, #12]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006472:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	695a      	ldr	r2, [r3, #20]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 0201 	bic.w	r2, r2, #1
 8006482:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2220      	movs	r2, #32
 8006488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006496:	2b01      	cmp	r3, #1
 8006498:	d135      	bne.n	8006506 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	330c      	adds	r3, #12
 80064a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	e853 3f00 	ldrex	r3, [r3]
 80064ae:	613b      	str	r3, [r7, #16]
   return(result);
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	f023 0310 	bic.w	r3, r3, #16
 80064b6:	627b      	str	r3, [r7, #36]	; 0x24
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	330c      	adds	r3, #12
 80064be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064c0:	623a      	str	r2, [r7, #32]
 80064c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c4:	69f9      	ldr	r1, [r7, #28]
 80064c6:	6a3a      	ldr	r2, [r7, #32]
 80064c8:	e841 2300 	strex	r3, r2, [r1]
 80064cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1e5      	bne.n	80064a0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0310 	and.w	r3, r3, #16
 80064de:	2b10      	cmp	r3, #16
 80064e0:	d10a      	bne.n	80064f8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064e2:	2300      	movs	r3, #0
 80064e4:	60fb      	str	r3, [r7, #12]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	60fb      	str	r3, [r7, #12]
 80064f6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064fc:	4619      	mov	r1, r3
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7ff fdc0 	bl	8006084 <HAL_UARTEx_RxEventCallback>
 8006504:	e002      	b.n	800650c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7fb fd5a 	bl	8001fc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800650c:	2300      	movs	r3, #0
 800650e:	e002      	b.n	8006516 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006510:	2300      	movs	r3, #0
 8006512:	e000      	b.n	8006516 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006514:	2302      	movs	r3, #2
  }
}
 8006516:	4618      	mov	r0, r3
 8006518:	3730      	adds	r7, #48	; 0x30
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
	...

08006520 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68da      	ldr	r2, [r3, #12]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	430a      	orrs	r2, r1
 800653c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	689a      	ldr	r2, [r3, #8]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	431a      	orrs	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	4313      	orrs	r3, r2
 800654e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800655a:	f023 030c 	bic.w	r3, r3, #12
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	6812      	ldr	r2, [r2, #0]
 8006562:	68b9      	ldr	r1, [r7, #8]
 8006564:	430b      	orrs	r3, r1
 8006566:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	699a      	ldr	r2, [r3, #24]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	430a      	orrs	r2, r1
 800657c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a2c      	ldr	r2, [pc, #176]	; (8006634 <UART_SetConfig+0x114>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d103      	bne.n	8006590 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006588:	f7fe f96e 	bl	8004868 <HAL_RCC_GetPCLK2Freq>
 800658c:	60f8      	str	r0, [r7, #12]
 800658e:	e002      	b.n	8006596 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006590:	f7fe f956 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 8006594:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	4613      	mov	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4413      	add	r3, r2
 800659e:	009a      	lsls	r2, r3, #2
 80065a0:	441a      	add	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ac:	4a22      	ldr	r2, [pc, #136]	; (8006638 <UART_SetConfig+0x118>)
 80065ae:	fba2 2303 	umull	r2, r3, r2, r3
 80065b2:	095b      	lsrs	r3, r3, #5
 80065b4:	0119      	lsls	r1, r3, #4
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	4613      	mov	r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	009a      	lsls	r2, r3, #2
 80065c0:	441a      	add	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80065cc:	4b1a      	ldr	r3, [pc, #104]	; (8006638 <UART_SetConfig+0x118>)
 80065ce:	fba3 0302 	umull	r0, r3, r3, r2
 80065d2:	095b      	lsrs	r3, r3, #5
 80065d4:	2064      	movs	r0, #100	; 0x64
 80065d6:	fb00 f303 	mul.w	r3, r0, r3
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	011b      	lsls	r3, r3, #4
 80065de:	3332      	adds	r3, #50	; 0x32
 80065e0:	4a15      	ldr	r2, [pc, #84]	; (8006638 <UART_SetConfig+0x118>)
 80065e2:	fba2 2303 	umull	r2, r3, r2, r3
 80065e6:	095b      	lsrs	r3, r3, #5
 80065e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065ec:	4419      	add	r1, r3
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	4613      	mov	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	009a      	lsls	r2, r3, #2
 80065f8:	441a      	add	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	fbb2 f2f3 	udiv	r2, r2, r3
 8006604:	4b0c      	ldr	r3, [pc, #48]	; (8006638 <UART_SetConfig+0x118>)
 8006606:	fba3 0302 	umull	r0, r3, r3, r2
 800660a:	095b      	lsrs	r3, r3, #5
 800660c:	2064      	movs	r0, #100	; 0x64
 800660e:	fb00 f303 	mul.w	r3, r0, r3
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	011b      	lsls	r3, r3, #4
 8006616:	3332      	adds	r3, #50	; 0x32
 8006618:	4a07      	ldr	r2, [pc, #28]	; (8006638 <UART_SetConfig+0x118>)
 800661a:	fba2 2303 	umull	r2, r3, r2, r3
 800661e:	095b      	lsrs	r3, r3, #5
 8006620:	f003 020f 	and.w	r2, r3, #15
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	440a      	add	r2, r1
 800662a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800662c:	bf00      	nop
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	40013800 	.word	0x40013800
 8006638:	51eb851f 	.word	0x51eb851f

0800663c <atoi>:
 800663c:	220a      	movs	r2, #10
 800663e:	2100      	movs	r1, #0
 8006640:	f000 bd2e 	b.w	80070a0 <strtol>

08006644 <__errno>:
 8006644:	4b01      	ldr	r3, [pc, #4]	; (800664c <__errno+0x8>)
 8006646:	6818      	ldr	r0, [r3, #0]
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	20000040 	.word	0x20000040

08006650 <__libc_init_array>:
 8006650:	b570      	push	{r4, r5, r6, lr}
 8006652:	2600      	movs	r6, #0
 8006654:	4d0c      	ldr	r5, [pc, #48]	; (8006688 <__libc_init_array+0x38>)
 8006656:	4c0d      	ldr	r4, [pc, #52]	; (800668c <__libc_init_array+0x3c>)
 8006658:	1b64      	subs	r4, r4, r5
 800665a:	10a4      	asrs	r4, r4, #2
 800665c:	42a6      	cmp	r6, r4
 800665e:	d109      	bne.n	8006674 <__libc_init_array+0x24>
 8006660:	f002 ffba 	bl	80095d8 <_init>
 8006664:	2600      	movs	r6, #0
 8006666:	4d0a      	ldr	r5, [pc, #40]	; (8006690 <__libc_init_array+0x40>)
 8006668:	4c0a      	ldr	r4, [pc, #40]	; (8006694 <__libc_init_array+0x44>)
 800666a:	1b64      	subs	r4, r4, r5
 800666c:	10a4      	asrs	r4, r4, #2
 800666e:	42a6      	cmp	r6, r4
 8006670:	d105      	bne.n	800667e <__libc_init_array+0x2e>
 8006672:	bd70      	pop	{r4, r5, r6, pc}
 8006674:	f855 3b04 	ldr.w	r3, [r5], #4
 8006678:	4798      	blx	r3
 800667a:	3601      	adds	r6, #1
 800667c:	e7ee      	b.n	800665c <__libc_init_array+0xc>
 800667e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006682:	4798      	blx	r3
 8006684:	3601      	adds	r6, #1
 8006686:	e7f2      	b.n	800666e <__libc_init_array+0x1e>
 8006688:	08009ab4 	.word	0x08009ab4
 800668c:	08009ab4 	.word	0x08009ab4
 8006690:	08009ab4 	.word	0x08009ab4
 8006694:	08009ab8 	.word	0x08009ab8

08006698 <memset>:
 8006698:	4603      	mov	r3, r0
 800669a:	4402      	add	r2, r0
 800669c:	4293      	cmp	r3, r2
 800669e:	d100      	bne.n	80066a2 <memset+0xa>
 80066a0:	4770      	bx	lr
 80066a2:	f803 1b01 	strb.w	r1, [r3], #1
 80066a6:	e7f9      	b.n	800669c <memset+0x4>

080066a8 <__cvt>:
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066ae:	461f      	mov	r7, r3
 80066b0:	bfbb      	ittet	lt
 80066b2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80066b6:	461f      	movlt	r7, r3
 80066b8:	2300      	movge	r3, #0
 80066ba:	232d      	movlt	r3, #45	; 0x2d
 80066bc:	b088      	sub	sp, #32
 80066be:	4614      	mov	r4, r2
 80066c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066c2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80066c4:	7013      	strb	r3, [r2, #0]
 80066c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80066c8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80066cc:	f023 0820 	bic.w	r8, r3, #32
 80066d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80066d4:	d005      	beq.n	80066e2 <__cvt+0x3a>
 80066d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80066da:	d100      	bne.n	80066de <__cvt+0x36>
 80066dc:	3501      	adds	r5, #1
 80066de:	2302      	movs	r3, #2
 80066e0:	e000      	b.n	80066e4 <__cvt+0x3c>
 80066e2:	2303      	movs	r3, #3
 80066e4:	aa07      	add	r2, sp, #28
 80066e6:	9204      	str	r2, [sp, #16]
 80066e8:	aa06      	add	r2, sp, #24
 80066ea:	e9cd a202 	strd	sl, r2, [sp, #8]
 80066ee:	e9cd 3500 	strd	r3, r5, [sp]
 80066f2:	4622      	mov	r2, r4
 80066f4:	463b      	mov	r3, r7
 80066f6:	f000 fda3 	bl	8007240 <_dtoa_r>
 80066fa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80066fe:	4606      	mov	r6, r0
 8006700:	d102      	bne.n	8006708 <__cvt+0x60>
 8006702:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006704:	07db      	lsls	r3, r3, #31
 8006706:	d522      	bpl.n	800674e <__cvt+0xa6>
 8006708:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800670c:	eb06 0905 	add.w	r9, r6, r5
 8006710:	d110      	bne.n	8006734 <__cvt+0x8c>
 8006712:	7833      	ldrb	r3, [r6, #0]
 8006714:	2b30      	cmp	r3, #48	; 0x30
 8006716:	d10a      	bne.n	800672e <__cvt+0x86>
 8006718:	2200      	movs	r2, #0
 800671a:	2300      	movs	r3, #0
 800671c:	4620      	mov	r0, r4
 800671e:	4639      	mov	r1, r7
 8006720:	f7fa f942 	bl	80009a8 <__aeabi_dcmpeq>
 8006724:	b918      	cbnz	r0, 800672e <__cvt+0x86>
 8006726:	f1c5 0501 	rsb	r5, r5, #1
 800672a:	f8ca 5000 	str.w	r5, [sl]
 800672e:	f8da 3000 	ldr.w	r3, [sl]
 8006732:	4499      	add	r9, r3
 8006734:	2200      	movs	r2, #0
 8006736:	2300      	movs	r3, #0
 8006738:	4620      	mov	r0, r4
 800673a:	4639      	mov	r1, r7
 800673c:	f7fa f934 	bl	80009a8 <__aeabi_dcmpeq>
 8006740:	b108      	cbz	r0, 8006746 <__cvt+0x9e>
 8006742:	f8cd 901c 	str.w	r9, [sp, #28]
 8006746:	2230      	movs	r2, #48	; 0x30
 8006748:	9b07      	ldr	r3, [sp, #28]
 800674a:	454b      	cmp	r3, r9
 800674c:	d307      	bcc.n	800675e <__cvt+0xb6>
 800674e:	4630      	mov	r0, r6
 8006750:	9b07      	ldr	r3, [sp, #28]
 8006752:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006754:	1b9b      	subs	r3, r3, r6
 8006756:	6013      	str	r3, [r2, #0]
 8006758:	b008      	add	sp, #32
 800675a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800675e:	1c59      	adds	r1, r3, #1
 8006760:	9107      	str	r1, [sp, #28]
 8006762:	701a      	strb	r2, [r3, #0]
 8006764:	e7f0      	b.n	8006748 <__cvt+0xa0>

08006766 <__exponent>:
 8006766:	4603      	mov	r3, r0
 8006768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800676a:	2900      	cmp	r1, #0
 800676c:	f803 2b02 	strb.w	r2, [r3], #2
 8006770:	bfb6      	itet	lt
 8006772:	222d      	movlt	r2, #45	; 0x2d
 8006774:	222b      	movge	r2, #43	; 0x2b
 8006776:	4249      	neglt	r1, r1
 8006778:	2909      	cmp	r1, #9
 800677a:	7042      	strb	r2, [r0, #1]
 800677c:	dd2b      	ble.n	80067d6 <__exponent+0x70>
 800677e:	f10d 0407 	add.w	r4, sp, #7
 8006782:	46a4      	mov	ip, r4
 8006784:	270a      	movs	r7, #10
 8006786:	fb91 f6f7 	sdiv	r6, r1, r7
 800678a:	460a      	mov	r2, r1
 800678c:	46a6      	mov	lr, r4
 800678e:	fb07 1516 	mls	r5, r7, r6, r1
 8006792:	2a63      	cmp	r2, #99	; 0x63
 8006794:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006798:	4631      	mov	r1, r6
 800679a:	f104 34ff 	add.w	r4, r4, #4294967295
 800679e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80067a2:	dcf0      	bgt.n	8006786 <__exponent+0x20>
 80067a4:	3130      	adds	r1, #48	; 0x30
 80067a6:	f1ae 0502 	sub.w	r5, lr, #2
 80067aa:	f804 1c01 	strb.w	r1, [r4, #-1]
 80067ae:	4629      	mov	r1, r5
 80067b0:	1c44      	adds	r4, r0, #1
 80067b2:	4561      	cmp	r1, ip
 80067b4:	d30a      	bcc.n	80067cc <__exponent+0x66>
 80067b6:	f10d 0209 	add.w	r2, sp, #9
 80067ba:	eba2 020e 	sub.w	r2, r2, lr
 80067be:	4565      	cmp	r5, ip
 80067c0:	bf88      	it	hi
 80067c2:	2200      	movhi	r2, #0
 80067c4:	4413      	add	r3, r2
 80067c6:	1a18      	subs	r0, r3, r0
 80067c8:	b003      	add	sp, #12
 80067ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067d0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80067d4:	e7ed      	b.n	80067b2 <__exponent+0x4c>
 80067d6:	2330      	movs	r3, #48	; 0x30
 80067d8:	3130      	adds	r1, #48	; 0x30
 80067da:	7083      	strb	r3, [r0, #2]
 80067dc:	70c1      	strb	r1, [r0, #3]
 80067de:	1d03      	adds	r3, r0, #4
 80067e0:	e7f1      	b.n	80067c6 <__exponent+0x60>
	...

080067e4 <_printf_float>:
 80067e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e8:	b091      	sub	sp, #68	; 0x44
 80067ea:	460c      	mov	r4, r1
 80067ec:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80067f0:	4616      	mov	r6, r2
 80067f2:	461f      	mov	r7, r3
 80067f4:	4605      	mov	r5, r0
 80067f6:	f001 fb11 	bl	8007e1c <_localeconv_r>
 80067fa:	6803      	ldr	r3, [r0, #0]
 80067fc:	4618      	mov	r0, r3
 80067fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006800:	f7f9 fca6 	bl	8000150 <strlen>
 8006804:	2300      	movs	r3, #0
 8006806:	930e      	str	r3, [sp, #56]	; 0x38
 8006808:	f8d8 3000 	ldr.w	r3, [r8]
 800680c:	900a      	str	r0, [sp, #40]	; 0x28
 800680e:	3307      	adds	r3, #7
 8006810:	f023 0307 	bic.w	r3, r3, #7
 8006814:	f103 0208 	add.w	r2, r3, #8
 8006818:	f894 9018 	ldrb.w	r9, [r4, #24]
 800681c:	f8d4 b000 	ldr.w	fp, [r4]
 8006820:	f8c8 2000 	str.w	r2, [r8]
 8006824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006828:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800682c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006830:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006834:	930b      	str	r3, [sp, #44]	; 0x2c
 8006836:	f04f 32ff 	mov.w	r2, #4294967295
 800683a:	4640      	mov	r0, r8
 800683c:	4b9c      	ldr	r3, [pc, #624]	; (8006ab0 <_printf_float+0x2cc>)
 800683e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006840:	f7fa f8e4 	bl	8000a0c <__aeabi_dcmpun>
 8006844:	bb70      	cbnz	r0, 80068a4 <_printf_float+0xc0>
 8006846:	f04f 32ff 	mov.w	r2, #4294967295
 800684a:	4640      	mov	r0, r8
 800684c:	4b98      	ldr	r3, [pc, #608]	; (8006ab0 <_printf_float+0x2cc>)
 800684e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006850:	f7fa f8be 	bl	80009d0 <__aeabi_dcmple>
 8006854:	bb30      	cbnz	r0, 80068a4 <_printf_float+0xc0>
 8006856:	2200      	movs	r2, #0
 8006858:	2300      	movs	r3, #0
 800685a:	4640      	mov	r0, r8
 800685c:	4651      	mov	r1, sl
 800685e:	f7fa f8ad 	bl	80009bc <__aeabi_dcmplt>
 8006862:	b110      	cbz	r0, 800686a <_printf_float+0x86>
 8006864:	232d      	movs	r3, #45	; 0x2d
 8006866:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800686a:	4b92      	ldr	r3, [pc, #584]	; (8006ab4 <_printf_float+0x2d0>)
 800686c:	4892      	ldr	r0, [pc, #584]	; (8006ab8 <_printf_float+0x2d4>)
 800686e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006872:	bf94      	ite	ls
 8006874:	4698      	movls	r8, r3
 8006876:	4680      	movhi	r8, r0
 8006878:	2303      	movs	r3, #3
 800687a:	f04f 0a00 	mov.w	sl, #0
 800687e:	6123      	str	r3, [r4, #16]
 8006880:	f02b 0304 	bic.w	r3, fp, #4
 8006884:	6023      	str	r3, [r4, #0]
 8006886:	4633      	mov	r3, r6
 8006888:	4621      	mov	r1, r4
 800688a:	4628      	mov	r0, r5
 800688c:	9700      	str	r7, [sp, #0]
 800688e:	aa0f      	add	r2, sp, #60	; 0x3c
 8006890:	f000 f9d4 	bl	8006c3c <_printf_common>
 8006894:	3001      	adds	r0, #1
 8006896:	f040 8090 	bne.w	80069ba <_printf_float+0x1d6>
 800689a:	f04f 30ff 	mov.w	r0, #4294967295
 800689e:	b011      	add	sp, #68	; 0x44
 80068a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068a4:	4642      	mov	r2, r8
 80068a6:	4653      	mov	r3, sl
 80068a8:	4640      	mov	r0, r8
 80068aa:	4651      	mov	r1, sl
 80068ac:	f7fa f8ae 	bl	8000a0c <__aeabi_dcmpun>
 80068b0:	b148      	cbz	r0, 80068c6 <_printf_float+0xe2>
 80068b2:	f1ba 0f00 	cmp.w	sl, #0
 80068b6:	bfb8      	it	lt
 80068b8:	232d      	movlt	r3, #45	; 0x2d
 80068ba:	4880      	ldr	r0, [pc, #512]	; (8006abc <_printf_float+0x2d8>)
 80068bc:	bfb8      	it	lt
 80068be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80068c2:	4b7f      	ldr	r3, [pc, #508]	; (8006ac0 <_printf_float+0x2dc>)
 80068c4:	e7d3      	b.n	800686e <_printf_float+0x8a>
 80068c6:	6863      	ldr	r3, [r4, #4]
 80068c8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80068cc:	1c5a      	adds	r2, r3, #1
 80068ce:	d142      	bne.n	8006956 <_printf_float+0x172>
 80068d0:	2306      	movs	r3, #6
 80068d2:	6063      	str	r3, [r4, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	9206      	str	r2, [sp, #24]
 80068d8:	aa0e      	add	r2, sp, #56	; 0x38
 80068da:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80068de:	aa0d      	add	r2, sp, #52	; 0x34
 80068e0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80068e4:	9203      	str	r2, [sp, #12]
 80068e6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80068ea:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80068ee:	6023      	str	r3, [r4, #0]
 80068f0:	6863      	ldr	r3, [r4, #4]
 80068f2:	4642      	mov	r2, r8
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	4628      	mov	r0, r5
 80068f8:	4653      	mov	r3, sl
 80068fa:	910b      	str	r1, [sp, #44]	; 0x2c
 80068fc:	f7ff fed4 	bl	80066a8 <__cvt>
 8006900:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006902:	4680      	mov	r8, r0
 8006904:	2947      	cmp	r1, #71	; 0x47
 8006906:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006908:	d108      	bne.n	800691c <_printf_float+0x138>
 800690a:	1cc8      	adds	r0, r1, #3
 800690c:	db02      	blt.n	8006914 <_printf_float+0x130>
 800690e:	6863      	ldr	r3, [r4, #4]
 8006910:	4299      	cmp	r1, r3
 8006912:	dd40      	ble.n	8006996 <_printf_float+0x1b2>
 8006914:	f1a9 0902 	sub.w	r9, r9, #2
 8006918:	fa5f f989 	uxtb.w	r9, r9
 800691c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006920:	d81f      	bhi.n	8006962 <_printf_float+0x17e>
 8006922:	464a      	mov	r2, r9
 8006924:	3901      	subs	r1, #1
 8006926:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800692a:	910d      	str	r1, [sp, #52]	; 0x34
 800692c:	f7ff ff1b 	bl	8006766 <__exponent>
 8006930:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006932:	4682      	mov	sl, r0
 8006934:	1813      	adds	r3, r2, r0
 8006936:	2a01      	cmp	r2, #1
 8006938:	6123      	str	r3, [r4, #16]
 800693a:	dc02      	bgt.n	8006942 <_printf_float+0x15e>
 800693c:	6822      	ldr	r2, [r4, #0]
 800693e:	07d2      	lsls	r2, r2, #31
 8006940:	d501      	bpl.n	8006946 <_printf_float+0x162>
 8006942:	3301      	adds	r3, #1
 8006944:	6123      	str	r3, [r4, #16]
 8006946:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800694a:	2b00      	cmp	r3, #0
 800694c:	d09b      	beq.n	8006886 <_printf_float+0xa2>
 800694e:	232d      	movs	r3, #45	; 0x2d
 8006950:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006954:	e797      	b.n	8006886 <_printf_float+0xa2>
 8006956:	2947      	cmp	r1, #71	; 0x47
 8006958:	d1bc      	bne.n	80068d4 <_printf_float+0xf0>
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1ba      	bne.n	80068d4 <_printf_float+0xf0>
 800695e:	2301      	movs	r3, #1
 8006960:	e7b7      	b.n	80068d2 <_printf_float+0xee>
 8006962:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006966:	d118      	bne.n	800699a <_printf_float+0x1b6>
 8006968:	2900      	cmp	r1, #0
 800696a:	6863      	ldr	r3, [r4, #4]
 800696c:	dd0b      	ble.n	8006986 <_printf_float+0x1a2>
 800696e:	6121      	str	r1, [r4, #16]
 8006970:	b913      	cbnz	r3, 8006978 <_printf_float+0x194>
 8006972:	6822      	ldr	r2, [r4, #0]
 8006974:	07d0      	lsls	r0, r2, #31
 8006976:	d502      	bpl.n	800697e <_printf_float+0x19a>
 8006978:	3301      	adds	r3, #1
 800697a:	440b      	add	r3, r1
 800697c:	6123      	str	r3, [r4, #16]
 800697e:	f04f 0a00 	mov.w	sl, #0
 8006982:	65a1      	str	r1, [r4, #88]	; 0x58
 8006984:	e7df      	b.n	8006946 <_printf_float+0x162>
 8006986:	b913      	cbnz	r3, 800698e <_printf_float+0x1aa>
 8006988:	6822      	ldr	r2, [r4, #0]
 800698a:	07d2      	lsls	r2, r2, #31
 800698c:	d501      	bpl.n	8006992 <_printf_float+0x1ae>
 800698e:	3302      	adds	r3, #2
 8006990:	e7f4      	b.n	800697c <_printf_float+0x198>
 8006992:	2301      	movs	r3, #1
 8006994:	e7f2      	b.n	800697c <_printf_float+0x198>
 8006996:	f04f 0967 	mov.w	r9, #103	; 0x67
 800699a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800699c:	4299      	cmp	r1, r3
 800699e:	db05      	blt.n	80069ac <_printf_float+0x1c8>
 80069a0:	6823      	ldr	r3, [r4, #0]
 80069a2:	6121      	str	r1, [r4, #16]
 80069a4:	07d8      	lsls	r0, r3, #31
 80069a6:	d5ea      	bpl.n	800697e <_printf_float+0x19a>
 80069a8:	1c4b      	adds	r3, r1, #1
 80069aa:	e7e7      	b.n	800697c <_printf_float+0x198>
 80069ac:	2900      	cmp	r1, #0
 80069ae:	bfcc      	ite	gt
 80069b0:	2201      	movgt	r2, #1
 80069b2:	f1c1 0202 	rsble	r2, r1, #2
 80069b6:	4413      	add	r3, r2
 80069b8:	e7e0      	b.n	800697c <_printf_float+0x198>
 80069ba:	6823      	ldr	r3, [r4, #0]
 80069bc:	055a      	lsls	r2, r3, #21
 80069be:	d407      	bmi.n	80069d0 <_printf_float+0x1ec>
 80069c0:	6923      	ldr	r3, [r4, #16]
 80069c2:	4642      	mov	r2, r8
 80069c4:	4631      	mov	r1, r6
 80069c6:	4628      	mov	r0, r5
 80069c8:	47b8      	blx	r7
 80069ca:	3001      	adds	r0, #1
 80069cc:	d12b      	bne.n	8006a26 <_printf_float+0x242>
 80069ce:	e764      	b.n	800689a <_printf_float+0xb6>
 80069d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80069d4:	f240 80dd 	bls.w	8006b92 <_printf_float+0x3ae>
 80069d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80069dc:	2200      	movs	r2, #0
 80069de:	2300      	movs	r3, #0
 80069e0:	f7f9 ffe2 	bl	80009a8 <__aeabi_dcmpeq>
 80069e4:	2800      	cmp	r0, #0
 80069e6:	d033      	beq.n	8006a50 <_printf_float+0x26c>
 80069e8:	2301      	movs	r3, #1
 80069ea:	4631      	mov	r1, r6
 80069ec:	4628      	mov	r0, r5
 80069ee:	4a35      	ldr	r2, [pc, #212]	; (8006ac4 <_printf_float+0x2e0>)
 80069f0:	47b8      	blx	r7
 80069f2:	3001      	adds	r0, #1
 80069f4:	f43f af51 	beq.w	800689a <_printf_float+0xb6>
 80069f8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80069fc:	429a      	cmp	r2, r3
 80069fe:	db02      	blt.n	8006a06 <_printf_float+0x222>
 8006a00:	6823      	ldr	r3, [r4, #0]
 8006a02:	07d8      	lsls	r0, r3, #31
 8006a04:	d50f      	bpl.n	8006a26 <_printf_float+0x242>
 8006a06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a0a:	4631      	mov	r1, r6
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	47b8      	blx	r7
 8006a10:	3001      	adds	r0, #1
 8006a12:	f43f af42 	beq.w	800689a <_printf_float+0xb6>
 8006a16:	f04f 0800 	mov.w	r8, #0
 8006a1a:	f104 091a 	add.w	r9, r4, #26
 8006a1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a20:	3b01      	subs	r3, #1
 8006a22:	4543      	cmp	r3, r8
 8006a24:	dc09      	bgt.n	8006a3a <_printf_float+0x256>
 8006a26:	6823      	ldr	r3, [r4, #0]
 8006a28:	079b      	lsls	r3, r3, #30
 8006a2a:	f100 8102 	bmi.w	8006c32 <_printf_float+0x44e>
 8006a2e:	68e0      	ldr	r0, [r4, #12]
 8006a30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a32:	4298      	cmp	r0, r3
 8006a34:	bfb8      	it	lt
 8006a36:	4618      	movlt	r0, r3
 8006a38:	e731      	b.n	800689e <_printf_float+0xba>
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	464a      	mov	r2, r9
 8006a3e:	4631      	mov	r1, r6
 8006a40:	4628      	mov	r0, r5
 8006a42:	47b8      	blx	r7
 8006a44:	3001      	adds	r0, #1
 8006a46:	f43f af28 	beq.w	800689a <_printf_float+0xb6>
 8006a4a:	f108 0801 	add.w	r8, r8, #1
 8006a4e:	e7e6      	b.n	8006a1e <_printf_float+0x23a>
 8006a50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	dc38      	bgt.n	8006ac8 <_printf_float+0x2e4>
 8006a56:	2301      	movs	r3, #1
 8006a58:	4631      	mov	r1, r6
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	4a19      	ldr	r2, [pc, #100]	; (8006ac4 <_printf_float+0x2e0>)
 8006a5e:	47b8      	blx	r7
 8006a60:	3001      	adds	r0, #1
 8006a62:	f43f af1a 	beq.w	800689a <_printf_float+0xb6>
 8006a66:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	d102      	bne.n	8006a74 <_printf_float+0x290>
 8006a6e:	6823      	ldr	r3, [r4, #0]
 8006a70:	07d9      	lsls	r1, r3, #31
 8006a72:	d5d8      	bpl.n	8006a26 <_printf_float+0x242>
 8006a74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a78:	4631      	mov	r1, r6
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	47b8      	blx	r7
 8006a7e:	3001      	adds	r0, #1
 8006a80:	f43f af0b 	beq.w	800689a <_printf_float+0xb6>
 8006a84:	f04f 0900 	mov.w	r9, #0
 8006a88:	f104 0a1a 	add.w	sl, r4, #26
 8006a8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a8e:	425b      	negs	r3, r3
 8006a90:	454b      	cmp	r3, r9
 8006a92:	dc01      	bgt.n	8006a98 <_printf_float+0x2b4>
 8006a94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a96:	e794      	b.n	80069c2 <_printf_float+0x1de>
 8006a98:	2301      	movs	r3, #1
 8006a9a:	4652      	mov	r2, sl
 8006a9c:	4631      	mov	r1, r6
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	47b8      	blx	r7
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	f43f aef9 	beq.w	800689a <_printf_float+0xb6>
 8006aa8:	f109 0901 	add.w	r9, r9, #1
 8006aac:	e7ee      	b.n	8006a8c <_printf_float+0x2a8>
 8006aae:	bf00      	nop
 8006ab0:	7fefffff 	.word	0x7fefffff
 8006ab4:	080096d8 	.word	0x080096d8
 8006ab8:	080096dc 	.word	0x080096dc
 8006abc:	080096e4 	.word	0x080096e4
 8006ac0:	080096e0 	.word	0x080096e0
 8006ac4:	080096e8 	.word	0x080096e8
 8006ac8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006aca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006acc:	429a      	cmp	r2, r3
 8006ace:	bfa8      	it	ge
 8006ad0:	461a      	movge	r2, r3
 8006ad2:	2a00      	cmp	r2, #0
 8006ad4:	4691      	mov	r9, r2
 8006ad6:	dc37      	bgt.n	8006b48 <_printf_float+0x364>
 8006ad8:	f04f 0b00 	mov.w	fp, #0
 8006adc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ae0:	f104 021a 	add.w	r2, r4, #26
 8006ae4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006ae8:	ebaa 0309 	sub.w	r3, sl, r9
 8006aec:	455b      	cmp	r3, fp
 8006aee:	dc33      	bgt.n	8006b58 <_printf_float+0x374>
 8006af0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006af4:	429a      	cmp	r2, r3
 8006af6:	db3b      	blt.n	8006b70 <_printf_float+0x38c>
 8006af8:	6823      	ldr	r3, [r4, #0]
 8006afa:	07da      	lsls	r2, r3, #31
 8006afc:	d438      	bmi.n	8006b70 <_printf_float+0x38c>
 8006afe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b00:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006b02:	eba3 020a 	sub.w	r2, r3, sl
 8006b06:	eba3 0901 	sub.w	r9, r3, r1
 8006b0a:	4591      	cmp	r9, r2
 8006b0c:	bfa8      	it	ge
 8006b0e:	4691      	movge	r9, r2
 8006b10:	f1b9 0f00 	cmp.w	r9, #0
 8006b14:	dc34      	bgt.n	8006b80 <_printf_float+0x39c>
 8006b16:	f04f 0800 	mov.w	r8, #0
 8006b1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b1e:	f104 0a1a 	add.w	sl, r4, #26
 8006b22:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006b26:	1a9b      	subs	r3, r3, r2
 8006b28:	eba3 0309 	sub.w	r3, r3, r9
 8006b2c:	4543      	cmp	r3, r8
 8006b2e:	f77f af7a 	ble.w	8006a26 <_printf_float+0x242>
 8006b32:	2301      	movs	r3, #1
 8006b34:	4652      	mov	r2, sl
 8006b36:	4631      	mov	r1, r6
 8006b38:	4628      	mov	r0, r5
 8006b3a:	47b8      	blx	r7
 8006b3c:	3001      	adds	r0, #1
 8006b3e:	f43f aeac 	beq.w	800689a <_printf_float+0xb6>
 8006b42:	f108 0801 	add.w	r8, r8, #1
 8006b46:	e7ec      	b.n	8006b22 <_printf_float+0x33e>
 8006b48:	4613      	mov	r3, r2
 8006b4a:	4631      	mov	r1, r6
 8006b4c:	4642      	mov	r2, r8
 8006b4e:	4628      	mov	r0, r5
 8006b50:	47b8      	blx	r7
 8006b52:	3001      	adds	r0, #1
 8006b54:	d1c0      	bne.n	8006ad8 <_printf_float+0x2f4>
 8006b56:	e6a0      	b.n	800689a <_printf_float+0xb6>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	4631      	mov	r1, r6
 8006b5c:	4628      	mov	r0, r5
 8006b5e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006b60:	47b8      	blx	r7
 8006b62:	3001      	adds	r0, #1
 8006b64:	f43f ae99 	beq.w	800689a <_printf_float+0xb6>
 8006b68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b6a:	f10b 0b01 	add.w	fp, fp, #1
 8006b6e:	e7b9      	b.n	8006ae4 <_printf_float+0x300>
 8006b70:	4631      	mov	r1, r6
 8006b72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b76:	4628      	mov	r0, r5
 8006b78:	47b8      	blx	r7
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	d1bf      	bne.n	8006afe <_printf_float+0x31a>
 8006b7e:	e68c      	b.n	800689a <_printf_float+0xb6>
 8006b80:	464b      	mov	r3, r9
 8006b82:	4631      	mov	r1, r6
 8006b84:	4628      	mov	r0, r5
 8006b86:	eb08 020a 	add.w	r2, r8, sl
 8006b8a:	47b8      	blx	r7
 8006b8c:	3001      	adds	r0, #1
 8006b8e:	d1c2      	bne.n	8006b16 <_printf_float+0x332>
 8006b90:	e683      	b.n	800689a <_printf_float+0xb6>
 8006b92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b94:	2a01      	cmp	r2, #1
 8006b96:	dc01      	bgt.n	8006b9c <_printf_float+0x3b8>
 8006b98:	07db      	lsls	r3, r3, #31
 8006b9a:	d537      	bpl.n	8006c0c <_printf_float+0x428>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	4642      	mov	r2, r8
 8006ba0:	4631      	mov	r1, r6
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	47b8      	blx	r7
 8006ba6:	3001      	adds	r0, #1
 8006ba8:	f43f ae77 	beq.w	800689a <_printf_float+0xb6>
 8006bac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bb0:	4631      	mov	r1, r6
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	47b8      	blx	r7
 8006bb6:	3001      	adds	r0, #1
 8006bb8:	f43f ae6f 	beq.w	800689a <_printf_float+0xb6>
 8006bbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	f7f9 fef0 	bl	80009a8 <__aeabi_dcmpeq>
 8006bc8:	b9d8      	cbnz	r0, 8006c02 <_printf_float+0x41e>
 8006bca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bcc:	f108 0201 	add.w	r2, r8, #1
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	4631      	mov	r1, r6
 8006bd4:	4628      	mov	r0, r5
 8006bd6:	47b8      	blx	r7
 8006bd8:	3001      	adds	r0, #1
 8006bda:	d10e      	bne.n	8006bfa <_printf_float+0x416>
 8006bdc:	e65d      	b.n	800689a <_printf_float+0xb6>
 8006bde:	2301      	movs	r3, #1
 8006be0:	464a      	mov	r2, r9
 8006be2:	4631      	mov	r1, r6
 8006be4:	4628      	mov	r0, r5
 8006be6:	47b8      	blx	r7
 8006be8:	3001      	adds	r0, #1
 8006bea:	f43f ae56 	beq.w	800689a <_printf_float+0xb6>
 8006bee:	f108 0801 	add.w	r8, r8, #1
 8006bf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	4543      	cmp	r3, r8
 8006bf8:	dcf1      	bgt.n	8006bde <_printf_float+0x3fa>
 8006bfa:	4653      	mov	r3, sl
 8006bfc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006c00:	e6e0      	b.n	80069c4 <_printf_float+0x1e0>
 8006c02:	f04f 0800 	mov.w	r8, #0
 8006c06:	f104 091a 	add.w	r9, r4, #26
 8006c0a:	e7f2      	b.n	8006bf2 <_printf_float+0x40e>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	4642      	mov	r2, r8
 8006c10:	e7df      	b.n	8006bd2 <_printf_float+0x3ee>
 8006c12:	2301      	movs	r3, #1
 8006c14:	464a      	mov	r2, r9
 8006c16:	4631      	mov	r1, r6
 8006c18:	4628      	mov	r0, r5
 8006c1a:	47b8      	blx	r7
 8006c1c:	3001      	adds	r0, #1
 8006c1e:	f43f ae3c 	beq.w	800689a <_printf_float+0xb6>
 8006c22:	f108 0801 	add.w	r8, r8, #1
 8006c26:	68e3      	ldr	r3, [r4, #12]
 8006c28:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006c2a:	1a5b      	subs	r3, r3, r1
 8006c2c:	4543      	cmp	r3, r8
 8006c2e:	dcf0      	bgt.n	8006c12 <_printf_float+0x42e>
 8006c30:	e6fd      	b.n	8006a2e <_printf_float+0x24a>
 8006c32:	f04f 0800 	mov.w	r8, #0
 8006c36:	f104 0919 	add.w	r9, r4, #25
 8006c3a:	e7f4      	b.n	8006c26 <_printf_float+0x442>

08006c3c <_printf_common>:
 8006c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c40:	4616      	mov	r6, r2
 8006c42:	4699      	mov	r9, r3
 8006c44:	688a      	ldr	r2, [r1, #8]
 8006c46:	690b      	ldr	r3, [r1, #16]
 8006c48:	4607      	mov	r7, r0
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	bfb8      	it	lt
 8006c4e:	4613      	movlt	r3, r2
 8006c50:	6033      	str	r3, [r6, #0]
 8006c52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c56:	460c      	mov	r4, r1
 8006c58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c5c:	b10a      	cbz	r2, 8006c62 <_printf_common+0x26>
 8006c5e:	3301      	adds	r3, #1
 8006c60:	6033      	str	r3, [r6, #0]
 8006c62:	6823      	ldr	r3, [r4, #0]
 8006c64:	0699      	lsls	r1, r3, #26
 8006c66:	bf42      	ittt	mi
 8006c68:	6833      	ldrmi	r3, [r6, #0]
 8006c6a:	3302      	addmi	r3, #2
 8006c6c:	6033      	strmi	r3, [r6, #0]
 8006c6e:	6825      	ldr	r5, [r4, #0]
 8006c70:	f015 0506 	ands.w	r5, r5, #6
 8006c74:	d106      	bne.n	8006c84 <_printf_common+0x48>
 8006c76:	f104 0a19 	add.w	sl, r4, #25
 8006c7a:	68e3      	ldr	r3, [r4, #12]
 8006c7c:	6832      	ldr	r2, [r6, #0]
 8006c7e:	1a9b      	subs	r3, r3, r2
 8006c80:	42ab      	cmp	r3, r5
 8006c82:	dc28      	bgt.n	8006cd6 <_printf_common+0x9a>
 8006c84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c88:	1e13      	subs	r3, r2, #0
 8006c8a:	6822      	ldr	r2, [r4, #0]
 8006c8c:	bf18      	it	ne
 8006c8e:	2301      	movne	r3, #1
 8006c90:	0692      	lsls	r2, r2, #26
 8006c92:	d42d      	bmi.n	8006cf0 <_printf_common+0xb4>
 8006c94:	4649      	mov	r1, r9
 8006c96:	4638      	mov	r0, r7
 8006c98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c9c:	47c0      	blx	r8
 8006c9e:	3001      	adds	r0, #1
 8006ca0:	d020      	beq.n	8006ce4 <_printf_common+0xa8>
 8006ca2:	6823      	ldr	r3, [r4, #0]
 8006ca4:	68e5      	ldr	r5, [r4, #12]
 8006ca6:	f003 0306 	and.w	r3, r3, #6
 8006caa:	2b04      	cmp	r3, #4
 8006cac:	bf18      	it	ne
 8006cae:	2500      	movne	r5, #0
 8006cb0:	6832      	ldr	r2, [r6, #0]
 8006cb2:	f04f 0600 	mov.w	r6, #0
 8006cb6:	68a3      	ldr	r3, [r4, #8]
 8006cb8:	bf08      	it	eq
 8006cba:	1aad      	subeq	r5, r5, r2
 8006cbc:	6922      	ldr	r2, [r4, #16]
 8006cbe:	bf08      	it	eq
 8006cc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	bfc4      	itt	gt
 8006cc8:	1a9b      	subgt	r3, r3, r2
 8006cca:	18ed      	addgt	r5, r5, r3
 8006ccc:	341a      	adds	r4, #26
 8006cce:	42b5      	cmp	r5, r6
 8006cd0:	d11a      	bne.n	8006d08 <_printf_common+0xcc>
 8006cd2:	2000      	movs	r0, #0
 8006cd4:	e008      	b.n	8006ce8 <_printf_common+0xac>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	4652      	mov	r2, sl
 8006cda:	4649      	mov	r1, r9
 8006cdc:	4638      	mov	r0, r7
 8006cde:	47c0      	blx	r8
 8006ce0:	3001      	adds	r0, #1
 8006ce2:	d103      	bne.n	8006cec <_printf_common+0xb0>
 8006ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cec:	3501      	adds	r5, #1
 8006cee:	e7c4      	b.n	8006c7a <_printf_common+0x3e>
 8006cf0:	2030      	movs	r0, #48	; 0x30
 8006cf2:	18e1      	adds	r1, r4, r3
 8006cf4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006cf8:	1c5a      	adds	r2, r3, #1
 8006cfa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006cfe:	4422      	add	r2, r4
 8006d00:	3302      	adds	r3, #2
 8006d02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d06:	e7c5      	b.n	8006c94 <_printf_common+0x58>
 8006d08:	2301      	movs	r3, #1
 8006d0a:	4622      	mov	r2, r4
 8006d0c:	4649      	mov	r1, r9
 8006d0e:	4638      	mov	r0, r7
 8006d10:	47c0      	blx	r8
 8006d12:	3001      	adds	r0, #1
 8006d14:	d0e6      	beq.n	8006ce4 <_printf_common+0xa8>
 8006d16:	3601      	adds	r6, #1
 8006d18:	e7d9      	b.n	8006cce <_printf_common+0x92>
	...

08006d1c <_printf_i>:
 8006d1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d20:	7e0f      	ldrb	r7, [r1, #24]
 8006d22:	4691      	mov	r9, r2
 8006d24:	2f78      	cmp	r7, #120	; 0x78
 8006d26:	4680      	mov	r8, r0
 8006d28:	460c      	mov	r4, r1
 8006d2a:	469a      	mov	sl, r3
 8006d2c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d32:	d807      	bhi.n	8006d44 <_printf_i+0x28>
 8006d34:	2f62      	cmp	r7, #98	; 0x62
 8006d36:	d80a      	bhi.n	8006d4e <_printf_i+0x32>
 8006d38:	2f00      	cmp	r7, #0
 8006d3a:	f000 80d9 	beq.w	8006ef0 <_printf_i+0x1d4>
 8006d3e:	2f58      	cmp	r7, #88	; 0x58
 8006d40:	f000 80a4 	beq.w	8006e8c <_printf_i+0x170>
 8006d44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d4c:	e03a      	b.n	8006dc4 <_printf_i+0xa8>
 8006d4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d52:	2b15      	cmp	r3, #21
 8006d54:	d8f6      	bhi.n	8006d44 <_printf_i+0x28>
 8006d56:	a101      	add	r1, pc, #4	; (adr r1, 8006d5c <_printf_i+0x40>)
 8006d58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d5c:	08006db5 	.word	0x08006db5
 8006d60:	08006dc9 	.word	0x08006dc9
 8006d64:	08006d45 	.word	0x08006d45
 8006d68:	08006d45 	.word	0x08006d45
 8006d6c:	08006d45 	.word	0x08006d45
 8006d70:	08006d45 	.word	0x08006d45
 8006d74:	08006dc9 	.word	0x08006dc9
 8006d78:	08006d45 	.word	0x08006d45
 8006d7c:	08006d45 	.word	0x08006d45
 8006d80:	08006d45 	.word	0x08006d45
 8006d84:	08006d45 	.word	0x08006d45
 8006d88:	08006ed7 	.word	0x08006ed7
 8006d8c:	08006df9 	.word	0x08006df9
 8006d90:	08006eb9 	.word	0x08006eb9
 8006d94:	08006d45 	.word	0x08006d45
 8006d98:	08006d45 	.word	0x08006d45
 8006d9c:	08006ef9 	.word	0x08006ef9
 8006da0:	08006d45 	.word	0x08006d45
 8006da4:	08006df9 	.word	0x08006df9
 8006da8:	08006d45 	.word	0x08006d45
 8006dac:	08006d45 	.word	0x08006d45
 8006db0:	08006ec1 	.word	0x08006ec1
 8006db4:	682b      	ldr	r3, [r5, #0]
 8006db6:	1d1a      	adds	r2, r3, #4
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	602a      	str	r2, [r5, #0]
 8006dbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e0a4      	b.n	8006f12 <_printf_i+0x1f6>
 8006dc8:	6820      	ldr	r0, [r4, #0]
 8006dca:	6829      	ldr	r1, [r5, #0]
 8006dcc:	0606      	lsls	r6, r0, #24
 8006dce:	f101 0304 	add.w	r3, r1, #4
 8006dd2:	d50a      	bpl.n	8006dea <_printf_i+0xce>
 8006dd4:	680e      	ldr	r6, [r1, #0]
 8006dd6:	602b      	str	r3, [r5, #0]
 8006dd8:	2e00      	cmp	r6, #0
 8006dda:	da03      	bge.n	8006de4 <_printf_i+0xc8>
 8006ddc:	232d      	movs	r3, #45	; 0x2d
 8006dde:	4276      	negs	r6, r6
 8006de0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006de4:	230a      	movs	r3, #10
 8006de6:	485e      	ldr	r0, [pc, #376]	; (8006f60 <_printf_i+0x244>)
 8006de8:	e019      	b.n	8006e1e <_printf_i+0x102>
 8006dea:	680e      	ldr	r6, [r1, #0]
 8006dec:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006df0:	602b      	str	r3, [r5, #0]
 8006df2:	bf18      	it	ne
 8006df4:	b236      	sxthne	r6, r6
 8006df6:	e7ef      	b.n	8006dd8 <_printf_i+0xbc>
 8006df8:	682b      	ldr	r3, [r5, #0]
 8006dfa:	6820      	ldr	r0, [r4, #0]
 8006dfc:	1d19      	adds	r1, r3, #4
 8006dfe:	6029      	str	r1, [r5, #0]
 8006e00:	0601      	lsls	r1, r0, #24
 8006e02:	d501      	bpl.n	8006e08 <_printf_i+0xec>
 8006e04:	681e      	ldr	r6, [r3, #0]
 8006e06:	e002      	b.n	8006e0e <_printf_i+0xf2>
 8006e08:	0646      	lsls	r6, r0, #25
 8006e0a:	d5fb      	bpl.n	8006e04 <_printf_i+0xe8>
 8006e0c:	881e      	ldrh	r6, [r3, #0]
 8006e0e:	2f6f      	cmp	r7, #111	; 0x6f
 8006e10:	bf0c      	ite	eq
 8006e12:	2308      	moveq	r3, #8
 8006e14:	230a      	movne	r3, #10
 8006e16:	4852      	ldr	r0, [pc, #328]	; (8006f60 <_printf_i+0x244>)
 8006e18:	2100      	movs	r1, #0
 8006e1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e1e:	6865      	ldr	r5, [r4, #4]
 8006e20:	2d00      	cmp	r5, #0
 8006e22:	bfa8      	it	ge
 8006e24:	6821      	ldrge	r1, [r4, #0]
 8006e26:	60a5      	str	r5, [r4, #8]
 8006e28:	bfa4      	itt	ge
 8006e2a:	f021 0104 	bicge.w	r1, r1, #4
 8006e2e:	6021      	strge	r1, [r4, #0]
 8006e30:	b90e      	cbnz	r6, 8006e36 <_printf_i+0x11a>
 8006e32:	2d00      	cmp	r5, #0
 8006e34:	d04d      	beq.n	8006ed2 <_printf_i+0x1b6>
 8006e36:	4615      	mov	r5, r2
 8006e38:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e3c:	fb03 6711 	mls	r7, r3, r1, r6
 8006e40:	5dc7      	ldrb	r7, [r0, r7]
 8006e42:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e46:	4637      	mov	r7, r6
 8006e48:	42bb      	cmp	r3, r7
 8006e4a:	460e      	mov	r6, r1
 8006e4c:	d9f4      	bls.n	8006e38 <_printf_i+0x11c>
 8006e4e:	2b08      	cmp	r3, #8
 8006e50:	d10b      	bne.n	8006e6a <_printf_i+0x14e>
 8006e52:	6823      	ldr	r3, [r4, #0]
 8006e54:	07de      	lsls	r6, r3, #31
 8006e56:	d508      	bpl.n	8006e6a <_printf_i+0x14e>
 8006e58:	6923      	ldr	r3, [r4, #16]
 8006e5a:	6861      	ldr	r1, [r4, #4]
 8006e5c:	4299      	cmp	r1, r3
 8006e5e:	bfde      	ittt	le
 8006e60:	2330      	movle	r3, #48	; 0x30
 8006e62:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e66:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e6a:	1b52      	subs	r2, r2, r5
 8006e6c:	6122      	str	r2, [r4, #16]
 8006e6e:	464b      	mov	r3, r9
 8006e70:	4621      	mov	r1, r4
 8006e72:	4640      	mov	r0, r8
 8006e74:	f8cd a000 	str.w	sl, [sp]
 8006e78:	aa03      	add	r2, sp, #12
 8006e7a:	f7ff fedf 	bl	8006c3c <_printf_common>
 8006e7e:	3001      	adds	r0, #1
 8006e80:	d14c      	bne.n	8006f1c <_printf_i+0x200>
 8006e82:	f04f 30ff 	mov.w	r0, #4294967295
 8006e86:	b004      	add	sp, #16
 8006e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e8c:	4834      	ldr	r0, [pc, #208]	; (8006f60 <_printf_i+0x244>)
 8006e8e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006e92:	6829      	ldr	r1, [r5, #0]
 8006e94:	6823      	ldr	r3, [r4, #0]
 8006e96:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e9a:	6029      	str	r1, [r5, #0]
 8006e9c:	061d      	lsls	r5, r3, #24
 8006e9e:	d514      	bpl.n	8006eca <_printf_i+0x1ae>
 8006ea0:	07df      	lsls	r7, r3, #31
 8006ea2:	bf44      	itt	mi
 8006ea4:	f043 0320 	orrmi.w	r3, r3, #32
 8006ea8:	6023      	strmi	r3, [r4, #0]
 8006eaa:	b91e      	cbnz	r6, 8006eb4 <_printf_i+0x198>
 8006eac:	6823      	ldr	r3, [r4, #0]
 8006eae:	f023 0320 	bic.w	r3, r3, #32
 8006eb2:	6023      	str	r3, [r4, #0]
 8006eb4:	2310      	movs	r3, #16
 8006eb6:	e7af      	b.n	8006e18 <_printf_i+0xfc>
 8006eb8:	6823      	ldr	r3, [r4, #0]
 8006eba:	f043 0320 	orr.w	r3, r3, #32
 8006ebe:	6023      	str	r3, [r4, #0]
 8006ec0:	2378      	movs	r3, #120	; 0x78
 8006ec2:	4828      	ldr	r0, [pc, #160]	; (8006f64 <_printf_i+0x248>)
 8006ec4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ec8:	e7e3      	b.n	8006e92 <_printf_i+0x176>
 8006eca:	0659      	lsls	r1, r3, #25
 8006ecc:	bf48      	it	mi
 8006ece:	b2b6      	uxthmi	r6, r6
 8006ed0:	e7e6      	b.n	8006ea0 <_printf_i+0x184>
 8006ed2:	4615      	mov	r5, r2
 8006ed4:	e7bb      	b.n	8006e4e <_printf_i+0x132>
 8006ed6:	682b      	ldr	r3, [r5, #0]
 8006ed8:	6826      	ldr	r6, [r4, #0]
 8006eda:	1d18      	adds	r0, r3, #4
 8006edc:	6961      	ldr	r1, [r4, #20]
 8006ede:	6028      	str	r0, [r5, #0]
 8006ee0:	0635      	lsls	r5, r6, #24
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	d501      	bpl.n	8006eea <_printf_i+0x1ce>
 8006ee6:	6019      	str	r1, [r3, #0]
 8006ee8:	e002      	b.n	8006ef0 <_printf_i+0x1d4>
 8006eea:	0670      	lsls	r0, r6, #25
 8006eec:	d5fb      	bpl.n	8006ee6 <_printf_i+0x1ca>
 8006eee:	8019      	strh	r1, [r3, #0]
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	4615      	mov	r5, r2
 8006ef4:	6123      	str	r3, [r4, #16]
 8006ef6:	e7ba      	b.n	8006e6e <_printf_i+0x152>
 8006ef8:	682b      	ldr	r3, [r5, #0]
 8006efa:	2100      	movs	r1, #0
 8006efc:	1d1a      	adds	r2, r3, #4
 8006efe:	602a      	str	r2, [r5, #0]
 8006f00:	681d      	ldr	r5, [r3, #0]
 8006f02:	6862      	ldr	r2, [r4, #4]
 8006f04:	4628      	mov	r0, r5
 8006f06:	f000 ff95 	bl	8007e34 <memchr>
 8006f0a:	b108      	cbz	r0, 8006f10 <_printf_i+0x1f4>
 8006f0c:	1b40      	subs	r0, r0, r5
 8006f0e:	6060      	str	r0, [r4, #4]
 8006f10:	6863      	ldr	r3, [r4, #4]
 8006f12:	6123      	str	r3, [r4, #16]
 8006f14:	2300      	movs	r3, #0
 8006f16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f1a:	e7a8      	b.n	8006e6e <_printf_i+0x152>
 8006f1c:	462a      	mov	r2, r5
 8006f1e:	4649      	mov	r1, r9
 8006f20:	4640      	mov	r0, r8
 8006f22:	6923      	ldr	r3, [r4, #16]
 8006f24:	47d0      	blx	sl
 8006f26:	3001      	adds	r0, #1
 8006f28:	d0ab      	beq.n	8006e82 <_printf_i+0x166>
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	079b      	lsls	r3, r3, #30
 8006f2e:	d413      	bmi.n	8006f58 <_printf_i+0x23c>
 8006f30:	68e0      	ldr	r0, [r4, #12]
 8006f32:	9b03      	ldr	r3, [sp, #12]
 8006f34:	4298      	cmp	r0, r3
 8006f36:	bfb8      	it	lt
 8006f38:	4618      	movlt	r0, r3
 8006f3a:	e7a4      	b.n	8006e86 <_printf_i+0x16a>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	4632      	mov	r2, r6
 8006f40:	4649      	mov	r1, r9
 8006f42:	4640      	mov	r0, r8
 8006f44:	47d0      	blx	sl
 8006f46:	3001      	adds	r0, #1
 8006f48:	d09b      	beq.n	8006e82 <_printf_i+0x166>
 8006f4a:	3501      	adds	r5, #1
 8006f4c:	68e3      	ldr	r3, [r4, #12]
 8006f4e:	9903      	ldr	r1, [sp, #12]
 8006f50:	1a5b      	subs	r3, r3, r1
 8006f52:	42ab      	cmp	r3, r5
 8006f54:	dcf2      	bgt.n	8006f3c <_printf_i+0x220>
 8006f56:	e7eb      	b.n	8006f30 <_printf_i+0x214>
 8006f58:	2500      	movs	r5, #0
 8006f5a:	f104 0619 	add.w	r6, r4, #25
 8006f5e:	e7f5      	b.n	8006f4c <_printf_i+0x230>
 8006f60:	080096ea 	.word	0x080096ea
 8006f64:	080096fb 	.word	0x080096fb

08006f68 <siprintf>:
 8006f68:	b40e      	push	{r1, r2, r3}
 8006f6a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f6e:	b500      	push	{lr}
 8006f70:	b09c      	sub	sp, #112	; 0x70
 8006f72:	ab1d      	add	r3, sp, #116	; 0x74
 8006f74:	9002      	str	r0, [sp, #8]
 8006f76:	9006      	str	r0, [sp, #24]
 8006f78:	9107      	str	r1, [sp, #28]
 8006f7a:	9104      	str	r1, [sp, #16]
 8006f7c:	4808      	ldr	r0, [pc, #32]	; (8006fa0 <siprintf+0x38>)
 8006f7e:	4909      	ldr	r1, [pc, #36]	; (8006fa4 <siprintf+0x3c>)
 8006f80:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f84:	9105      	str	r1, [sp, #20]
 8006f86:	6800      	ldr	r0, [r0, #0]
 8006f88:	a902      	add	r1, sp, #8
 8006f8a:	9301      	str	r3, [sp, #4]
 8006f8c:	f001 fc3c 	bl	8008808 <_svfiprintf_r>
 8006f90:	2200      	movs	r2, #0
 8006f92:	9b02      	ldr	r3, [sp, #8]
 8006f94:	701a      	strb	r2, [r3, #0]
 8006f96:	b01c      	add	sp, #112	; 0x70
 8006f98:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f9c:	b003      	add	sp, #12
 8006f9e:	4770      	bx	lr
 8006fa0:	20000040 	.word	0x20000040
 8006fa4:	ffff0208 	.word	0xffff0208

08006fa8 <_strtol_l.constprop.0>:
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fae:	4680      	mov	r8, r0
 8006fb0:	d001      	beq.n	8006fb6 <_strtol_l.constprop.0+0xe>
 8006fb2:	2b24      	cmp	r3, #36	; 0x24
 8006fb4:	d906      	bls.n	8006fc4 <_strtol_l.constprop.0+0x1c>
 8006fb6:	f7ff fb45 	bl	8006644 <__errno>
 8006fba:	2316      	movs	r3, #22
 8006fbc:	6003      	str	r3, [r0, #0]
 8006fbe:	2000      	movs	r0, #0
 8006fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc4:	460d      	mov	r5, r1
 8006fc6:	4f35      	ldr	r7, [pc, #212]	; (800709c <_strtol_l.constprop.0+0xf4>)
 8006fc8:	4628      	mov	r0, r5
 8006fca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006fce:	5de6      	ldrb	r6, [r4, r7]
 8006fd0:	f016 0608 	ands.w	r6, r6, #8
 8006fd4:	d1f8      	bne.n	8006fc8 <_strtol_l.constprop.0+0x20>
 8006fd6:	2c2d      	cmp	r4, #45	; 0x2d
 8006fd8:	d12f      	bne.n	800703a <_strtol_l.constprop.0+0x92>
 8006fda:	2601      	movs	r6, #1
 8006fdc:	782c      	ldrb	r4, [r5, #0]
 8006fde:	1c85      	adds	r5, r0, #2
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d057      	beq.n	8007094 <_strtol_l.constprop.0+0xec>
 8006fe4:	2b10      	cmp	r3, #16
 8006fe6:	d109      	bne.n	8006ffc <_strtol_l.constprop.0+0x54>
 8006fe8:	2c30      	cmp	r4, #48	; 0x30
 8006fea:	d107      	bne.n	8006ffc <_strtol_l.constprop.0+0x54>
 8006fec:	7828      	ldrb	r0, [r5, #0]
 8006fee:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006ff2:	2858      	cmp	r0, #88	; 0x58
 8006ff4:	d149      	bne.n	800708a <_strtol_l.constprop.0+0xe2>
 8006ff6:	2310      	movs	r3, #16
 8006ff8:	786c      	ldrb	r4, [r5, #1]
 8006ffa:	3502      	adds	r5, #2
 8006ffc:	2700      	movs	r7, #0
 8006ffe:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8007002:	f10e 3eff 	add.w	lr, lr, #4294967295
 8007006:	fbbe f9f3 	udiv	r9, lr, r3
 800700a:	4638      	mov	r0, r7
 800700c:	fb03 ea19 	mls	sl, r3, r9, lr
 8007010:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007014:	f1bc 0f09 	cmp.w	ip, #9
 8007018:	d814      	bhi.n	8007044 <_strtol_l.constprop.0+0x9c>
 800701a:	4664      	mov	r4, ip
 800701c:	42a3      	cmp	r3, r4
 800701e:	dd22      	ble.n	8007066 <_strtol_l.constprop.0+0xbe>
 8007020:	2f00      	cmp	r7, #0
 8007022:	db1d      	blt.n	8007060 <_strtol_l.constprop.0+0xb8>
 8007024:	4581      	cmp	r9, r0
 8007026:	d31b      	bcc.n	8007060 <_strtol_l.constprop.0+0xb8>
 8007028:	d101      	bne.n	800702e <_strtol_l.constprop.0+0x86>
 800702a:	45a2      	cmp	sl, r4
 800702c:	db18      	blt.n	8007060 <_strtol_l.constprop.0+0xb8>
 800702e:	2701      	movs	r7, #1
 8007030:	fb00 4003 	mla	r0, r0, r3, r4
 8007034:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007038:	e7ea      	b.n	8007010 <_strtol_l.constprop.0+0x68>
 800703a:	2c2b      	cmp	r4, #43	; 0x2b
 800703c:	bf04      	itt	eq
 800703e:	782c      	ldrbeq	r4, [r5, #0]
 8007040:	1c85      	addeq	r5, r0, #2
 8007042:	e7cd      	b.n	8006fe0 <_strtol_l.constprop.0+0x38>
 8007044:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007048:	f1bc 0f19 	cmp.w	ip, #25
 800704c:	d801      	bhi.n	8007052 <_strtol_l.constprop.0+0xaa>
 800704e:	3c37      	subs	r4, #55	; 0x37
 8007050:	e7e4      	b.n	800701c <_strtol_l.constprop.0+0x74>
 8007052:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007056:	f1bc 0f19 	cmp.w	ip, #25
 800705a:	d804      	bhi.n	8007066 <_strtol_l.constprop.0+0xbe>
 800705c:	3c57      	subs	r4, #87	; 0x57
 800705e:	e7dd      	b.n	800701c <_strtol_l.constprop.0+0x74>
 8007060:	f04f 37ff 	mov.w	r7, #4294967295
 8007064:	e7e6      	b.n	8007034 <_strtol_l.constprop.0+0x8c>
 8007066:	2f00      	cmp	r7, #0
 8007068:	da07      	bge.n	800707a <_strtol_l.constprop.0+0xd2>
 800706a:	2322      	movs	r3, #34	; 0x22
 800706c:	4670      	mov	r0, lr
 800706e:	f8c8 3000 	str.w	r3, [r8]
 8007072:	2a00      	cmp	r2, #0
 8007074:	d0a4      	beq.n	8006fc0 <_strtol_l.constprop.0+0x18>
 8007076:	1e69      	subs	r1, r5, #1
 8007078:	e005      	b.n	8007086 <_strtol_l.constprop.0+0xde>
 800707a:	b106      	cbz	r6, 800707e <_strtol_l.constprop.0+0xd6>
 800707c:	4240      	negs	r0, r0
 800707e:	2a00      	cmp	r2, #0
 8007080:	d09e      	beq.n	8006fc0 <_strtol_l.constprop.0+0x18>
 8007082:	2f00      	cmp	r7, #0
 8007084:	d1f7      	bne.n	8007076 <_strtol_l.constprop.0+0xce>
 8007086:	6011      	str	r1, [r2, #0]
 8007088:	e79a      	b.n	8006fc0 <_strtol_l.constprop.0+0x18>
 800708a:	2430      	movs	r4, #48	; 0x30
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1b5      	bne.n	8006ffc <_strtol_l.constprop.0+0x54>
 8007090:	2308      	movs	r3, #8
 8007092:	e7b3      	b.n	8006ffc <_strtol_l.constprop.0+0x54>
 8007094:	2c30      	cmp	r4, #48	; 0x30
 8007096:	d0a9      	beq.n	8006fec <_strtol_l.constprop.0+0x44>
 8007098:	230a      	movs	r3, #10
 800709a:	e7af      	b.n	8006ffc <_strtol_l.constprop.0+0x54>
 800709c:	0800970d 	.word	0x0800970d

080070a0 <strtol>:
 80070a0:	4613      	mov	r3, r2
 80070a2:	460a      	mov	r2, r1
 80070a4:	4601      	mov	r1, r0
 80070a6:	4802      	ldr	r0, [pc, #8]	; (80070b0 <strtol+0x10>)
 80070a8:	6800      	ldr	r0, [r0, #0]
 80070aa:	f7ff bf7d 	b.w	8006fa8 <_strtol_l.constprop.0>
 80070ae:	bf00      	nop
 80070b0:	20000040 	.word	0x20000040

080070b4 <_vsniprintf_r>:
 80070b4:	b530      	push	{r4, r5, lr}
 80070b6:	4614      	mov	r4, r2
 80070b8:	2c00      	cmp	r4, #0
 80070ba:	4605      	mov	r5, r0
 80070bc:	461a      	mov	r2, r3
 80070be:	b09b      	sub	sp, #108	; 0x6c
 80070c0:	da05      	bge.n	80070ce <_vsniprintf_r+0x1a>
 80070c2:	238b      	movs	r3, #139	; 0x8b
 80070c4:	6003      	str	r3, [r0, #0]
 80070c6:	f04f 30ff 	mov.w	r0, #4294967295
 80070ca:	b01b      	add	sp, #108	; 0x6c
 80070cc:	bd30      	pop	{r4, r5, pc}
 80070ce:	f44f 7302 	mov.w	r3, #520	; 0x208
 80070d2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80070d6:	bf0c      	ite	eq
 80070d8:	4623      	moveq	r3, r4
 80070da:	f104 33ff 	addne.w	r3, r4, #4294967295
 80070de:	9302      	str	r3, [sp, #8]
 80070e0:	9305      	str	r3, [sp, #20]
 80070e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80070e6:	9100      	str	r1, [sp, #0]
 80070e8:	9104      	str	r1, [sp, #16]
 80070ea:	f8ad 300e 	strh.w	r3, [sp, #14]
 80070ee:	4669      	mov	r1, sp
 80070f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80070f2:	f001 fb89 	bl	8008808 <_svfiprintf_r>
 80070f6:	1c43      	adds	r3, r0, #1
 80070f8:	bfbc      	itt	lt
 80070fa:	238b      	movlt	r3, #139	; 0x8b
 80070fc:	602b      	strlt	r3, [r5, #0]
 80070fe:	2c00      	cmp	r4, #0
 8007100:	d0e3      	beq.n	80070ca <_vsniprintf_r+0x16>
 8007102:	2200      	movs	r2, #0
 8007104:	9b00      	ldr	r3, [sp, #0]
 8007106:	701a      	strb	r2, [r3, #0]
 8007108:	e7df      	b.n	80070ca <_vsniprintf_r+0x16>
	...

0800710c <vsniprintf>:
 800710c:	b507      	push	{r0, r1, r2, lr}
 800710e:	9300      	str	r3, [sp, #0]
 8007110:	4613      	mov	r3, r2
 8007112:	460a      	mov	r2, r1
 8007114:	4601      	mov	r1, r0
 8007116:	4803      	ldr	r0, [pc, #12]	; (8007124 <vsniprintf+0x18>)
 8007118:	6800      	ldr	r0, [r0, #0]
 800711a:	f7ff ffcb 	bl	80070b4 <_vsniprintf_r>
 800711e:	b003      	add	sp, #12
 8007120:	f85d fb04 	ldr.w	pc, [sp], #4
 8007124:	20000040 	.word	0x20000040

08007128 <quorem>:
 8007128:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712c:	6903      	ldr	r3, [r0, #16]
 800712e:	690c      	ldr	r4, [r1, #16]
 8007130:	4607      	mov	r7, r0
 8007132:	42a3      	cmp	r3, r4
 8007134:	f2c0 8082 	blt.w	800723c <quorem+0x114>
 8007138:	3c01      	subs	r4, #1
 800713a:	f100 0514 	add.w	r5, r0, #20
 800713e:	f101 0814 	add.w	r8, r1, #20
 8007142:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007146:	9301      	str	r3, [sp, #4]
 8007148:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800714c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007150:	3301      	adds	r3, #1
 8007152:	429a      	cmp	r2, r3
 8007154:	fbb2 f6f3 	udiv	r6, r2, r3
 8007158:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800715c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007160:	d331      	bcc.n	80071c6 <quorem+0x9e>
 8007162:	f04f 0e00 	mov.w	lr, #0
 8007166:	4640      	mov	r0, r8
 8007168:	46ac      	mov	ip, r5
 800716a:	46f2      	mov	sl, lr
 800716c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007170:	b293      	uxth	r3, r2
 8007172:	fb06 e303 	mla	r3, r6, r3, lr
 8007176:	0c12      	lsrs	r2, r2, #16
 8007178:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800717c:	b29b      	uxth	r3, r3
 800717e:	fb06 e202 	mla	r2, r6, r2, lr
 8007182:	ebaa 0303 	sub.w	r3, sl, r3
 8007186:	f8dc a000 	ldr.w	sl, [ip]
 800718a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800718e:	fa1f fa8a 	uxth.w	sl, sl
 8007192:	4453      	add	r3, sl
 8007194:	f8dc a000 	ldr.w	sl, [ip]
 8007198:	b292      	uxth	r2, r2
 800719a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800719e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071a8:	4581      	cmp	r9, r0
 80071aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80071ae:	f84c 3b04 	str.w	r3, [ip], #4
 80071b2:	d2db      	bcs.n	800716c <quorem+0x44>
 80071b4:	f855 300b 	ldr.w	r3, [r5, fp]
 80071b8:	b92b      	cbnz	r3, 80071c6 <quorem+0x9e>
 80071ba:	9b01      	ldr	r3, [sp, #4]
 80071bc:	3b04      	subs	r3, #4
 80071be:	429d      	cmp	r5, r3
 80071c0:	461a      	mov	r2, r3
 80071c2:	d32f      	bcc.n	8007224 <quorem+0xfc>
 80071c4:	613c      	str	r4, [r7, #16]
 80071c6:	4638      	mov	r0, r7
 80071c8:	f001 f8ce 	bl	8008368 <__mcmp>
 80071cc:	2800      	cmp	r0, #0
 80071ce:	db25      	blt.n	800721c <quorem+0xf4>
 80071d0:	4628      	mov	r0, r5
 80071d2:	f04f 0c00 	mov.w	ip, #0
 80071d6:	3601      	adds	r6, #1
 80071d8:	f858 1b04 	ldr.w	r1, [r8], #4
 80071dc:	f8d0 e000 	ldr.w	lr, [r0]
 80071e0:	b28b      	uxth	r3, r1
 80071e2:	ebac 0303 	sub.w	r3, ip, r3
 80071e6:	fa1f f28e 	uxth.w	r2, lr
 80071ea:	4413      	add	r3, r2
 80071ec:	0c0a      	lsrs	r2, r1, #16
 80071ee:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80071f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071fc:	45c1      	cmp	r9, r8
 80071fe:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007202:	f840 3b04 	str.w	r3, [r0], #4
 8007206:	d2e7      	bcs.n	80071d8 <quorem+0xb0>
 8007208:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800720c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007210:	b922      	cbnz	r2, 800721c <quorem+0xf4>
 8007212:	3b04      	subs	r3, #4
 8007214:	429d      	cmp	r5, r3
 8007216:	461a      	mov	r2, r3
 8007218:	d30a      	bcc.n	8007230 <quorem+0x108>
 800721a:	613c      	str	r4, [r7, #16]
 800721c:	4630      	mov	r0, r6
 800721e:	b003      	add	sp, #12
 8007220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007224:	6812      	ldr	r2, [r2, #0]
 8007226:	3b04      	subs	r3, #4
 8007228:	2a00      	cmp	r2, #0
 800722a:	d1cb      	bne.n	80071c4 <quorem+0x9c>
 800722c:	3c01      	subs	r4, #1
 800722e:	e7c6      	b.n	80071be <quorem+0x96>
 8007230:	6812      	ldr	r2, [r2, #0]
 8007232:	3b04      	subs	r3, #4
 8007234:	2a00      	cmp	r2, #0
 8007236:	d1f0      	bne.n	800721a <quorem+0xf2>
 8007238:	3c01      	subs	r4, #1
 800723a:	e7eb      	b.n	8007214 <quorem+0xec>
 800723c:	2000      	movs	r0, #0
 800723e:	e7ee      	b.n	800721e <quorem+0xf6>

08007240 <_dtoa_r>:
 8007240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007244:	4616      	mov	r6, r2
 8007246:	461f      	mov	r7, r3
 8007248:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800724a:	b099      	sub	sp, #100	; 0x64
 800724c:	4605      	mov	r5, r0
 800724e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007252:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007256:	b974      	cbnz	r4, 8007276 <_dtoa_r+0x36>
 8007258:	2010      	movs	r0, #16
 800725a:	f000 fde3 	bl	8007e24 <malloc>
 800725e:	4602      	mov	r2, r0
 8007260:	6268      	str	r0, [r5, #36]	; 0x24
 8007262:	b920      	cbnz	r0, 800726e <_dtoa_r+0x2e>
 8007264:	21ea      	movs	r1, #234	; 0xea
 8007266:	4ba8      	ldr	r3, [pc, #672]	; (8007508 <_dtoa_r+0x2c8>)
 8007268:	48a8      	ldr	r0, [pc, #672]	; (800750c <_dtoa_r+0x2cc>)
 800726a:	f001 fbdd 	bl	8008a28 <__assert_func>
 800726e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007272:	6004      	str	r4, [r0, #0]
 8007274:	60c4      	str	r4, [r0, #12]
 8007276:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007278:	6819      	ldr	r1, [r3, #0]
 800727a:	b151      	cbz	r1, 8007292 <_dtoa_r+0x52>
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	2301      	movs	r3, #1
 8007280:	4093      	lsls	r3, r2
 8007282:	604a      	str	r2, [r1, #4]
 8007284:	608b      	str	r3, [r1, #8]
 8007286:	4628      	mov	r0, r5
 8007288:	f000 fe30 	bl	8007eec <_Bfree>
 800728c:	2200      	movs	r2, #0
 800728e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007290:	601a      	str	r2, [r3, #0]
 8007292:	1e3b      	subs	r3, r7, #0
 8007294:	bfaf      	iteee	ge
 8007296:	2300      	movge	r3, #0
 8007298:	2201      	movlt	r2, #1
 800729a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800729e:	9305      	strlt	r3, [sp, #20]
 80072a0:	bfa8      	it	ge
 80072a2:	f8c8 3000 	strge.w	r3, [r8]
 80072a6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80072aa:	4b99      	ldr	r3, [pc, #612]	; (8007510 <_dtoa_r+0x2d0>)
 80072ac:	bfb8      	it	lt
 80072ae:	f8c8 2000 	strlt.w	r2, [r8]
 80072b2:	ea33 0309 	bics.w	r3, r3, r9
 80072b6:	d119      	bne.n	80072ec <_dtoa_r+0xac>
 80072b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80072bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80072be:	6013      	str	r3, [r2, #0]
 80072c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072c4:	4333      	orrs	r3, r6
 80072c6:	f000 857f 	beq.w	8007dc8 <_dtoa_r+0xb88>
 80072ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80072cc:	b953      	cbnz	r3, 80072e4 <_dtoa_r+0xa4>
 80072ce:	4b91      	ldr	r3, [pc, #580]	; (8007514 <_dtoa_r+0x2d4>)
 80072d0:	e022      	b.n	8007318 <_dtoa_r+0xd8>
 80072d2:	4b91      	ldr	r3, [pc, #580]	; (8007518 <_dtoa_r+0x2d8>)
 80072d4:	9303      	str	r3, [sp, #12]
 80072d6:	3308      	adds	r3, #8
 80072d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80072da:	6013      	str	r3, [r2, #0]
 80072dc:	9803      	ldr	r0, [sp, #12]
 80072de:	b019      	add	sp, #100	; 0x64
 80072e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072e4:	4b8b      	ldr	r3, [pc, #556]	; (8007514 <_dtoa_r+0x2d4>)
 80072e6:	9303      	str	r3, [sp, #12]
 80072e8:	3303      	adds	r3, #3
 80072ea:	e7f5      	b.n	80072d8 <_dtoa_r+0x98>
 80072ec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80072f0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80072f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80072f8:	2200      	movs	r2, #0
 80072fa:	2300      	movs	r3, #0
 80072fc:	f7f9 fb54 	bl	80009a8 <__aeabi_dcmpeq>
 8007300:	4680      	mov	r8, r0
 8007302:	b158      	cbz	r0, 800731c <_dtoa_r+0xdc>
 8007304:	2301      	movs	r3, #1
 8007306:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007308:	6013      	str	r3, [r2, #0]
 800730a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800730c:	2b00      	cmp	r3, #0
 800730e:	f000 8558 	beq.w	8007dc2 <_dtoa_r+0xb82>
 8007312:	4882      	ldr	r0, [pc, #520]	; (800751c <_dtoa_r+0x2dc>)
 8007314:	6018      	str	r0, [r3, #0]
 8007316:	1e43      	subs	r3, r0, #1
 8007318:	9303      	str	r3, [sp, #12]
 800731a:	e7df      	b.n	80072dc <_dtoa_r+0x9c>
 800731c:	ab16      	add	r3, sp, #88	; 0x58
 800731e:	9301      	str	r3, [sp, #4]
 8007320:	ab17      	add	r3, sp, #92	; 0x5c
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	4628      	mov	r0, r5
 8007326:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800732a:	f001 f8c5 	bl	80084b8 <__d2b>
 800732e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007332:	4683      	mov	fp, r0
 8007334:	2c00      	cmp	r4, #0
 8007336:	d07f      	beq.n	8007438 <_dtoa_r+0x1f8>
 8007338:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800733c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800733e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007342:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007346:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800734a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800734e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007352:	2200      	movs	r2, #0
 8007354:	4b72      	ldr	r3, [pc, #456]	; (8007520 <_dtoa_r+0x2e0>)
 8007356:	f7f8 ff07 	bl	8000168 <__aeabi_dsub>
 800735a:	a365      	add	r3, pc, #404	; (adr r3, 80074f0 <_dtoa_r+0x2b0>)
 800735c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007360:	f7f9 f8ba 	bl	80004d8 <__aeabi_dmul>
 8007364:	a364      	add	r3, pc, #400	; (adr r3, 80074f8 <_dtoa_r+0x2b8>)
 8007366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736a:	f7f8 feff 	bl	800016c <__adddf3>
 800736e:	4606      	mov	r6, r0
 8007370:	4620      	mov	r0, r4
 8007372:	460f      	mov	r7, r1
 8007374:	f7f9 f846 	bl	8000404 <__aeabi_i2d>
 8007378:	a361      	add	r3, pc, #388	; (adr r3, 8007500 <_dtoa_r+0x2c0>)
 800737a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737e:	f7f9 f8ab 	bl	80004d8 <__aeabi_dmul>
 8007382:	4602      	mov	r2, r0
 8007384:	460b      	mov	r3, r1
 8007386:	4630      	mov	r0, r6
 8007388:	4639      	mov	r1, r7
 800738a:	f7f8 feef 	bl	800016c <__adddf3>
 800738e:	4606      	mov	r6, r0
 8007390:	460f      	mov	r7, r1
 8007392:	f7f9 fb51 	bl	8000a38 <__aeabi_d2iz>
 8007396:	2200      	movs	r2, #0
 8007398:	4682      	mov	sl, r0
 800739a:	2300      	movs	r3, #0
 800739c:	4630      	mov	r0, r6
 800739e:	4639      	mov	r1, r7
 80073a0:	f7f9 fb0c 	bl	80009bc <__aeabi_dcmplt>
 80073a4:	b148      	cbz	r0, 80073ba <_dtoa_r+0x17a>
 80073a6:	4650      	mov	r0, sl
 80073a8:	f7f9 f82c 	bl	8000404 <__aeabi_i2d>
 80073ac:	4632      	mov	r2, r6
 80073ae:	463b      	mov	r3, r7
 80073b0:	f7f9 fafa 	bl	80009a8 <__aeabi_dcmpeq>
 80073b4:	b908      	cbnz	r0, 80073ba <_dtoa_r+0x17a>
 80073b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073ba:	f1ba 0f16 	cmp.w	sl, #22
 80073be:	d858      	bhi.n	8007472 <_dtoa_r+0x232>
 80073c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073c4:	4b57      	ldr	r3, [pc, #348]	; (8007524 <_dtoa_r+0x2e4>)
 80073c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80073ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ce:	f7f9 faf5 	bl	80009bc <__aeabi_dcmplt>
 80073d2:	2800      	cmp	r0, #0
 80073d4:	d04f      	beq.n	8007476 <_dtoa_r+0x236>
 80073d6:	2300      	movs	r3, #0
 80073d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80073de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80073e0:	1b1c      	subs	r4, r3, r4
 80073e2:	1e63      	subs	r3, r4, #1
 80073e4:	9309      	str	r3, [sp, #36]	; 0x24
 80073e6:	bf49      	itett	mi
 80073e8:	f1c4 0301 	rsbmi	r3, r4, #1
 80073ec:	2300      	movpl	r3, #0
 80073ee:	9306      	strmi	r3, [sp, #24]
 80073f0:	2300      	movmi	r3, #0
 80073f2:	bf54      	ite	pl
 80073f4:	9306      	strpl	r3, [sp, #24]
 80073f6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80073f8:	f1ba 0f00 	cmp.w	sl, #0
 80073fc:	db3d      	blt.n	800747a <_dtoa_r+0x23a>
 80073fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007400:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007404:	4453      	add	r3, sl
 8007406:	9309      	str	r3, [sp, #36]	; 0x24
 8007408:	2300      	movs	r3, #0
 800740a:	930a      	str	r3, [sp, #40]	; 0x28
 800740c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800740e:	2b09      	cmp	r3, #9
 8007410:	f200 808c 	bhi.w	800752c <_dtoa_r+0x2ec>
 8007414:	2b05      	cmp	r3, #5
 8007416:	bfc4      	itt	gt
 8007418:	3b04      	subgt	r3, #4
 800741a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800741c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800741e:	bfc8      	it	gt
 8007420:	2400      	movgt	r4, #0
 8007422:	f1a3 0302 	sub.w	r3, r3, #2
 8007426:	bfd8      	it	le
 8007428:	2401      	movle	r4, #1
 800742a:	2b03      	cmp	r3, #3
 800742c:	f200 808a 	bhi.w	8007544 <_dtoa_r+0x304>
 8007430:	e8df f003 	tbb	[pc, r3]
 8007434:	5b4d4f2d 	.word	0x5b4d4f2d
 8007438:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800743c:	441c      	add	r4, r3
 800743e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007442:	2b20      	cmp	r3, #32
 8007444:	bfc3      	ittte	gt
 8007446:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800744a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800744e:	fa09 f303 	lslgt.w	r3, r9, r3
 8007452:	f1c3 0320 	rsble	r3, r3, #32
 8007456:	bfc6      	itte	gt
 8007458:	fa26 f000 	lsrgt.w	r0, r6, r0
 800745c:	4318      	orrgt	r0, r3
 800745e:	fa06 f003 	lslle.w	r0, r6, r3
 8007462:	f7f8 ffbf 	bl	80003e4 <__aeabi_ui2d>
 8007466:	2301      	movs	r3, #1
 8007468:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800746c:	3c01      	subs	r4, #1
 800746e:	9313      	str	r3, [sp, #76]	; 0x4c
 8007470:	e76f      	b.n	8007352 <_dtoa_r+0x112>
 8007472:	2301      	movs	r3, #1
 8007474:	e7b2      	b.n	80073dc <_dtoa_r+0x19c>
 8007476:	900f      	str	r0, [sp, #60]	; 0x3c
 8007478:	e7b1      	b.n	80073de <_dtoa_r+0x19e>
 800747a:	9b06      	ldr	r3, [sp, #24]
 800747c:	eba3 030a 	sub.w	r3, r3, sl
 8007480:	9306      	str	r3, [sp, #24]
 8007482:	f1ca 0300 	rsb	r3, sl, #0
 8007486:	930a      	str	r3, [sp, #40]	; 0x28
 8007488:	2300      	movs	r3, #0
 800748a:	930e      	str	r3, [sp, #56]	; 0x38
 800748c:	e7be      	b.n	800740c <_dtoa_r+0x1cc>
 800748e:	2300      	movs	r3, #0
 8007490:	930b      	str	r3, [sp, #44]	; 0x2c
 8007492:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007494:	2b00      	cmp	r3, #0
 8007496:	dc58      	bgt.n	800754a <_dtoa_r+0x30a>
 8007498:	f04f 0901 	mov.w	r9, #1
 800749c:	464b      	mov	r3, r9
 800749e:	f8cd 9020 	str.w	r9, [sp, #32]
 80074a2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80074a6:	2200      	movs	r2, #0
 80074a8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80074aa:	6042      	str	r2, [r0, #4]
 80074ac:	2204      	movs	r2, #4
 80074ae:	f102 0614 	add.w	r6, r2, #20
 80074b2:	429e      	cmp	r6, r3
 80074b4:	6841      	ldr	r1, [r0, #4]
 80074b6:	d94e      	bls.n	8007556 <_dtoa_r+0x316>
 80074b8:	4628      	mov	r0, r5
 80074ba:	f000 fcd7 	bl	8007e6c <_Balloc>
 80074be:	9003      	str	r0, [sp, #12]
 80074c0:	2800      	cmp	r0, #0
 80074c2:	d14c      	bne.n	800755e <_dtoa_r+0x31e>
 80074c4:	4602      	mov	r2, r0
 80074c6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80074ca:	4b17      	ldr	r3, [pc, #92]	; (8007528 <_dtoa_r+0x2e8>)
 80074cc:	e6cc      	b.n	8007268 <_dtoa_r+0x28>
 80074ce:	2301      	movs	r3, #1
 80074d0:	e7de      	b.n	8007490 <_dtoa_r+0x250>
 80074d2:	2300      	movs	r3, #0
 80074d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80074d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074d8:	eb0a 0903 	add.w	r9, sl, r3
 80074dc:	f109 0301 	add.w	r3, r9, #1
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	9308      	str	r3, [sp, #32]
 80074e4:	bfb8      	it	lt
 80074e6:	2301      	movlt	r3, #1
 80074e8:	e7dd      	b.n	80074a6 <_dtoa_r+0x266>
 80074ea:	2301      	movs	r3, #1
 80074ec:	e7f2      	b.n	80074d4 <_dtoa_r+0x294>
 80074ee:	bf00      	nop
 80074f0:	636f4361 	.word	0x636f4361
 80074f4:	3fd287a7 	.word	0x3fd287a7
 80074f8:	8b60c8b3 	.word	0x8b60c8b3
 80074fc:	3fc68a28 	.word	0x3fc68a28
 8007500:	509f79fb 	.word	0x509f79fb
 8007504:	3fd34413 	.word	0x3fd34413
 8007508:	0800981a 	.word	0x0800981a
 800750c:	08009831 	.word	0x08009831
 8007510:	7ff00000 	.word	0x7ff00000
 8007514:	08009816 	.word	0x08009816
 8007518:	0800980d 	.word	0x0800980d
 800751c:	080096e9 	.word	0x080096e9
 8007520:	3ff80000 	.word	0x3ff80000
 8007524:	08009928 	.word	0x08009928
 8007528:	0800988c 	.word	0x0800988c
 800752c:	2401      	movs	r4, #1
 800752e:	2300      	movs	r3, #0
 8007530:	940b      	str	r4, [sp, #44]	; 0x2c
 8007532:	9322      	str	r3, [sp, #136]	; 0x88
 8007534:	f04f 39ff 	mov.w	r9, #4294967295
 8007538:	2200      	movs	r2, #0
 800753a:	2312      	movs	r3, #18
 800753c:	f8cd 9020 	str.w	r9, [sp, #32]
 8007540:	9223      	str	r2, [sp, #140]	; 0x8c
 8007542:	e7b0      	b.n	80074a6 <_dtoa_r+0x266>
 8007544:	2301      	movs	r3, #1
 8007546:	930b      	str	r3, [sp, #44]	; 0x2c
 8007548:	e7f4      	b.n	8007534 <_dtoa_r+0x2f4>
 800754a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800754e:	464b      	mov	r3, r9
 8007550:	f8cd 9020 	str.w	r9, [sp, #32]
 8007554:	e7a7      	b.n	80074a6 <_dtoa_r+0x266>
 8007556:	3101      	adds	r1, #1
 8007558:	6041      	str	r1, [r0, #4]
 800755a:	0052      	lsls	r2, r2, #1
 800755c:	e7a7      	b.n	80074ae <_dtoa_r+0x26e>
 800755e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007560:	9a03      	ldr	r2, [sp, #12]
 8007562:	601a      	str	r2, [r3, #0]
 8007564:	9b08      	ldr	r3, [sp, #32]
 8007566:	2b0e      	cmp	r3, #14
 8007568:	f200 80a8 	bhi.w	80076bc <_dtoa_r+0x47c>
 800756c:	2c00      	cmp	r4, #0
 800756e:	f000 80a5 	beq.w	80076bc <_dtoa_r+0x47c>
 8007572:	f1ba 0f00 	cmp.w	sl, #0
 8007576:	dd34      	ble.n	80075e2 <_dtoa_r+0x3a2>
 8007578:	4a9a      	ldr	r2, [pc, #616]	; (80077e4 <_dtoa_r+0x5a4>)
 800757a:	f00a 030f 	and.w	r3, sl, #15
 800757e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007582:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007586:	e9d3 3400 	ldrd	r3, r4, [r3]
 800758a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800758e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8007592:	d016      	beq.n	80075c2 <_dtoa_r+0x382>
 8007594:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007598:	4b93      	ldr	r3, [pc, #588]	; (80077e8 <_dtoa_r+0x5a8>)
 800759a:	2703      	movs	r7, #3
 800759c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80075a0:	f7f9 f8c4 	bl	800072c <__aeabi_ddiv>
 80075a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075a8:	f004 040f 	and.w	r4, r4, #15
 80075ac:	4e8e      	ldr	r6, [pc, #568]	; (80077e8 <_dtoa_r+0x5a8>)
 80075ae:	b954      	cbnz	r4, 80075c6 <_dtoa_r+0x386>
 80075b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80075b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075b8:	f7f9 f8b8 	bl	800072c <__aeabi_ddiv>
 80075bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075c0:	e029      	b.n	8007616 <_dtoa_r+0x3d6>
 80075c2:	2702      	movs	r7, #2
 80075c4:	e7f2      	b.n	80075ac <_dtoa_r+0x36c>
 80075c6:	07e1      	lsls	r1, r4, #31
 80075c8:	d508      	bpl.n	80075dc <_dtoa_r+0x39c>
 80075ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80075ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 80075d2:	f7f8 ff81 	bl	80004d8 <__aeabi_dmul>
 80075d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80075da:	3701      	adds	r7, #1
 80075dc:	1064      	asrs	r4, r4, #1
 80075de:	3608      	adds	r6, #8
 80075e0:	e7e5      	b.n	80075ae <_dtoa_r+0x36e>
 80075e2:	f000 80a5 	beq.w	8007730 <_dtoa_r+0x4f0>
 80075e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80075ea:	f1ca 0400 	rsb	r4, sl, #0
 80075ee:	4b7d      	ldr	r3, [pc, #500]	; (80077e4 <_dtoa_r+0x5a4>)
 80075f0:	f004 020f 	and.w	r2, r4, #15
 80075f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fc:	f7f8 ff6c 	bl	80004d8 <__aeabi_dmul>
 8007600:	2702      	movs	r7, #2
 8007602:	2300      	movs	r3, #0
 8007604:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007608:	4e77      	ldr	r6, [pc, #476]	; (80077e8 <_dtoa_r+0x5a8>)
 800760a:	1124      	asrs	r4, r4, #4
 800760c:	2c00      	cmp	r4, #0
 800760e:	f040 8084 	bne.w	800771a <_dtoa_r+0x4da>
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1d2      	bne.n	80075bc <_dtoa_r+0x37c>
 8007616:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007618:	2b00      	cmp	r3, #0
 800761a:	f000 808b 	beq.w	8007734 <_dtoa_r+0x4f4>
 800761e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007622:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007626:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800762a:	2200      	movs	r2, #0
 800762c:	4b6f      	ldr	r3, [pc, #444]	; (80077ec <_dtoa_r+0x5ac>)
 800762e:	f7f9 f9c5 	bl	80009bc <__aeabi_dcmplt>
 8007632:	2800      	cmp	r0, #0
 8007634:	d07e      	beq.n	8007734 <_dtoa_r+0x4f4>
 8007636:	9b08      	ldr	r3, [sp, #32]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d07b      	beq.n	8007734 <_dtoa_r+0x4f4>
 800763c:	f1b9 0f00 	cmp.w	r9, #0
 8007640:	dd38      	ble.n	80076b4 <_dtoa_r+0x474>
 8007642:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007646:	2200      	movs	r2, #0
 8007648:	4b69      	ldr	r3, [pc, #420]	; (80077f0 <_dtoa_r+0x5b0>)
 800764a:	f7f8 ff45 	bl	80004d8 <__aeabi_dmul>
 800764e:	464c      	mov	r4, r9
 8007650:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007654:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007658:	3701      	adds	r7, #1
 800765a:	4638      	mov	r0, r7
 800765c:	f7f8 fed2 	bl	8000404 <__aeabi_i2d>
 8007660:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007664:	f7f8 ff38 	bl	80004d8 <__aeabi_dmul>
 8007668:	2200      	movs	r2, #0
 800766a:	4b62      	ldr	r3, [pc, #392]	; (80077f4 <_dtoa_r+0x5b4>)
 800766c:	f7f8 fd7e 	bl	800016c <__adddf3>
 8007670:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007674:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007678:	9611      	str	r6, [sp, #68]	; 0x44
 800767a:	2c00      	cmp	r4, #0
 800767c:	d15d      	bne.n	800773a <_dtoa_r+0x4fa>
 800767e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007682:	2200      	movs	r2, #0
 8007684:	4b5c      	ldr	r3, [pc, #368]	; (80077f8 <_dtoa_r+0x5b8>)
 8007686:	f7f8 fd6f 	bl	8000168 <__aeabi_dsub>
 800768a:	4602      	mov	r2, r0
 800768c:	460b      	mov	r3, r1
 800768e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007692:	4633      	mov	r3, r6
 8007694:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007696:	f7f9 f9af 	bl	80009f8 <__aeabi_dcmpgt>
 800769a:	2800      	cmp	r0, #0
 800769c:	f040 829c 	bne.w	8007bd8 <_dtoa_r+0x998>
 80076a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80076a6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80076aa:	f7f9 f987 	bl	80009bc <__aeabi_dcmplt>
 80076ae:	2800      	cmp	r0, #0
 80076b0:	f040 8290 	bne.w	8007bd4 <_dtoa_r+0x994>
 80076b4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80076b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80076bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076be:	2b00      	cmp	r3, #0
 80076c0:	f2c0 8152 	blt.w	8007968 <_dtoa_r+0x728>
 80076c4:	f1ba 0f0e 	cmp.w	sl, #14
 80076c8:	f300 814e 	bgt.w	8007968 <_dtoa_r+0x728>
 80076cc:	4b45      	ldr	r3, [pc, #276]	; (80077e4 <_dtoa_r+0x5a4>)
 80076ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80076d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80076d6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80076da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f280 80db 	bge.w	8007898 <_dtoa_r+0x658>
 80076e2:	9b08      	ldr	r3, [sp, #32]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f300 80d7 	bgt.w	8007898 <_dtoa_r+0x658>
 80076ea:	f040 8272 	bne.w	8007bd2 <_dtoa_r+0x992>
 80076ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076f2:	2200      	movs	r2, #0
 80076f4:	4b40      	ldr	r3, [pc, #256]	; (80077f8 <_dtoa_r+0x5b8>)
 80076f6:	f7f8 feef 	bl	80004d8 <__aeabi_dmul>
 80076fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076fe:	f7f9 f971 	bl	80009e4 <__aeabi_dcmpge>
 8007702:	9c08      	ldr	r4, [sp, #32]
 8007704:	4626      	mov	r6, r4
 8007706:	2800      	cmp	r0, #0
 8007708:	f040 8248 	bne.w	8007b9c <_dtoa_r+0x95c>
 800770c:	2331      	movs	r3, #49	; 0x31
 800770e:	9f03      	ldr	r7, [sp, #12]
 8007710:	f10a 0a01 	add.w	sl, sl, #1
 8007714:	f807 3b01 	strb.w	r3, [r7], #1
 8007718:	e244      	b.n	8007ba4 <_dtoa_r+0x964>
 800771a:	07e2      	lsls	r2, r4, #31
 800771c:	d505      	bpl.n	800772a <_dtoa_r+0x4ea>
 800771e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007722:	f7f8 fed9 	bl	80004d8 <__aeabi_dmul>
 8007726:	2301      	movs	r3, #1
 8007728:	3701      	adds	r7, #1
 800772a:	1064      	asrs	r4, r4, #1
 800772c:	3608      	adds	r6, #8
 800772e:	e76d      	b.n	800760c <_dtoa_r+0x3cc>
 8007730:	2702      	movs	r7, #2
 8007732:	e770      	b.n	8007616 <_dtoa_r+0x3d6>
 8007734:	46d0      	mov	r8, sl
 8007736:	9c08      	ldr	r4, [sp, #32]
 8007738:	e78f      	b.n	800765a <_dtoa_r+0x41a>
 800773a:	9903      	ldr	r1, [sp, #12]
 800773c:	4b29      	ldr	r3, [pc, #164]	; (80077e4 <_dtoa_r+0x5a4>)
 800773e:	4421      	add	r1, r4
 8007740:	9112      	str	r1, [sp, #72]	; 0x48
 8007742:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007744:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007748:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800774c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007750:	2900      	cmp	r1, #0
 8007752:	d055      	beq.n	8007800 <_dtoa_r+0x5c0>
 8007754:	2000      	movs	r0, #0
 8007756:	4929      	ldr	r1, [pc, #164]	; (80077fc <_dtoa_r+0x5bc>)
 8007758:	f7f8 ffe8 	bl	800072c <__aeabi_ddiv>
 800775c:	463b      	mov	r3, r7
 800775e:	4632      	mov	r2, r6
 8007760:	f7f8 fd02 	bl	8000168 <__aeabi_dsub>
 8007764:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007768:	9f03      	ldr	r7, [sp, #12]
 800776a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800776e:	f7f9 f963 	bl	8000a38 <__aeabi_d2iz>
 8007772:	4604      	mov	r4, r0
 8007774:	f7f8 fe46 	bl	8000404 <__aeabi_i2d>
 8007778:	4602      	mov	r2, r0
 800777a:	460b      	mov	r3, r1
 800777c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007780:	f7f8 fcf2 	bl	8000168 <__aeabi_dsub>
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	3430      	adds	r4, #48	; 0x30
 800778a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800778e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007792:	f807 4b01 	strb.w	r4, [r7], #1
 8007796:	f7f9 f911 	bl	80009bc <__aeabi_dcmplt>
 800779a:	2800      	cmp	r0, #0
 800779c:	d174      	bne.n	8007888 <_dtoa_r+0x648>
 800779e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077a2:	2000      	movs	r0, #0
 80077a4:	4911      	ldr	r1, [pc, #68]	; (80077ec <_dtoa_r+0x5ac>)
 80077a6:	f7f8 fcdf 	bl	8000168 <__aeabi_dsub>
 80077aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80077ae:	f7f9 f905 	bl	80009bc <__aeabi_dcmplt>
 80077b2:	2800      	cmp	r0, #0
 80077b4:	f040 80b7 	bne.w	8007926 <_dtoa_r+0x6e6>
 80077b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077ba:	429f      	cmp	r7, r3
 80077bc:	f43f af7a 	beq.w	80076b4 <_dtoa_r+0x474>
 80077c0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80077c4:	2200      	movs	r2, #0
 80077c6:	4b0a      	ldr	r3, [pc, #40]	; (80077f0 <_dtoa_r+0x5b0>)
 80077c8:	f7f8 fe86 	bl	80004d8 <__aeabi_dmul>
 80077cc:	2200      	movs	r2, #0
 80077ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80077d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077d6:	4b06      	ldr	r3, [pc, #24]	; (80077f0 <_dtoa_r+0x5b0>)
 80077d8:	f7f8 fe7e 	bl	80004d8 <__aeabi_dmul>
 80077dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077e0:	e7c3      	b.n	800776a <_dtoa_r+0x52a>
 80077e2:	bf00      	nop
 80077e4:	08009928 	.word	0x08009928
 80077e8:	08009900 	.word	0x08009900
 80077ec:	3ff00000 	.word	0x3ff00000
 80077f0:	40240000 	.word	0x40240000
 80077f4:	401c0000 	.word	0x401c0000
 80077f8:	40140000 	.word	0x40140000
 80077fc:	3fe00000 	.word	0x3fe00000
 8007800:	4630      	mov	r0, r6
 8007802:	4639      	mov	r1, r7
 8007804:	f7f8 fe68 	bl	80004d8 <__aeabi_dmul>
 8007808:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800780a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800780e:	9c03      	ldr	r4, [sp, #12]
 8007810:	9314      	str	r3, [sp, #80]	; 0x50
 8007812:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007816:	f7f9 f90f 	bl	8000a38 <__aeabi_d2iz>
 800781a:	9015      	str	r0, [sp, #84]	; 0x54
 800781c:	f7f8 fdf2 	bl	8000404 <__aeabi_i2d>
 8007820:	4602      	mov	r2, r0
 8007822:	460b      	mov	r3, r1
 8007824:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007828:	f7f8 fc9e 	bl	8000168 <__aeabi_dsub>
 800782c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800782e:	4606      	mov	r6, r0
 8007830:	3330      	adds	r3, #48	; 0x30
 8007832:	f804 3b01 	strb.w	r3, [r4], #1
 8007836:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007838:	460f      	mov	r7, r1
 800783a:	429c      	cmp	r4, r3
 800783c:	f04f 0200 	mov.w	r2, #0
 8007840:	d124      	bne.n	800788c <_dtoa_r+0x64c>
 8007842:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007846:	4bb0      	ldr	r3, [pc, #704]	; (8007b08 <_dtoa_r+0x8c8>)
 8007848:	f7f8 fc90 	bl	800016c <__adddf3>
 800784c:	4602      	mov	r2, r0
 800784e:	460b      	mov	r3, r1
 8007850:	4630      	mov	r0, r6
 8007852:	4639      	mov	r1, r7
 8007854:	f7f9 f8d0 	bl	80009f8 <__aeabi_dcmpgt>
 8007858:	2800      	cmp	r0, #0
 800785a:	d163      	bne.n	8007924 <_dtoa_r+0x6e4>
 800785c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007860:	2000      	movs	r0, #0
 8007862:	49a9      	ldr	r1, [pc, #676]	; (8007b08 <_dtoa_r+0x8c8>)
 8007864:	f7f8 fc80 	bl	8000168 <__aeabi_dsub>
 8007868:	4602      	mov	r2, r0
 800786a:	460b      	mov	r3, r1
 800786c:	4630      	mov	r0, r6
 800786e:	4639      	mov	r1, r7
 8007870:	f7f9 f8a4 	bl	80009bc <__aeabi_dcmplt>
 8007874:	2800      	cmp	r0, #0
 8007876:	f43f af1d 	beq.w	80076b4 <_dtoa_r+0x474>
 800787a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800787c:	1e7b      	subs	r3, r7, #1
 800787e:	9314      	str	r3, [sp, #80]	; 0x50
 8007880:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007884:	2b30      	cmp	r3, #48	; 0x30
 8007886:	d0f8      	beq.n	800787a <_dtoa_r+0x63a>
 8007888:	46c2      	mov	sl, r8
 800788a:	e03b      	b.n	8007904 <_dtoa_r+0x6c4>
 800788c:	4b9f      	ldr	r3, [pc, #636]	; (8007b0c <_dtoa_r+0x8cc>)
 800788e:	f7f8 fe23 	bl	80004d8 <__aeabi_dmul>
 8007892:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007896:	e7bc      	b.n	8007812 <_dtoa_r+0x5d2>
 8007898:	9f03      	ldr	r7, [sp, #12]
 800789a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800789e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078a2:	4640      	mov	r0, r8
 80078a4:	4649      	mov	r1, r9
 80078a6:	f7f8 ff41 	bl	800072c <__aeabi_ddiv>
 80078aa:	f7f9 f8c5 	bl	8000a38 <__aeabi_d2iz>
 80078ae:	4604      	mov	r4, r0
 80078b0:	f7f8 fda8 	bl	8000404 <__aeabi_i2d>
 80078b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078b8:	f7f8 fe0e 	bl	80004d8 <__aeabi_dmul>
 80078bc:	4602      	mov	r2, r0
 80078be:	460b      	mov	r3, r1
 80078c0:	4640      	mov	r0, r8
 80078c2:	4649      	mov	r1, r9
 80078c4:	f7f8 fc50 	bl	8000168 <__aeabi_dsub>
 80078c8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80078cc:	f807 6b01 	strb.w	r6, [r7], #1
 80078d0:	9e03      	ldr	r6, [sp, #12]
 80078d2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80078d6:	1bbe      	subs	r6, r7, r6
 80078d8:	45b4      	cmp	ip, r6
 80078da:	4602      	mov	r2, r0
 80078dc:	460b      	mov	r3, r1
 80078de:	d136      	bne.n	800794e <_dtoa_r+0x70e>
 80078e0:	f7f8 fc44 	bl	800016c <__adddf3>
 80078e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078e8:	4680      	mov	r8, r0
 80078ea:	4689      	mov	r9, r1
 80078ec:	f7f9 f884 	bl	80009f8 <__aeabi_dcmpgt>
 80078f0:	bb58      	cbnz	r0, 800794a <_dtoa_r+0x70a>
 80078f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078f6:	4640      	mov	r0, r8
 80078f8:	4649      	mov	r1, r9
 80078fa:	f7f9 f855 	bl	80009a8 <__aeabi_dcmpeq>
 80078fe:	b108      	cbz	r0, 8007904 <_dtoa_r+0x6c4>
 8007900:	07e1      	lsls	r1, r4, #31
 8007902:	d422      	bmi.n	800794a <_dtoa_r+0x70a>
 8007904:	4628      	mov	r0, r5
 8007906:	4659      	mov	r1, fp
 8007908:	f000 faf0 	bl	8007eec <_Bfree>
 800790c:	2300      	movs	r3, #0
 800790e:	703b      	strb	r3, [r7, #0]
 8007910:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007912:	f10a 0001 	add.w	r0, sl, #1
 8007916:	6018      	str	r0, [r3, #0]
 8007918:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800791a:	2b00      	cmp	r3, #0
 800791c:	f43f acde 	beq.w	80072dc <_dtoa_r+0x9c>
 8007920:	601f      	str	r7, [r3, #0]
 8007922:	e4db      	b.n	80072dc <_dtoa_r+0x9c>
 8007924:	4627      	mov	r7, r4
 8007926:	463b      	mov	r3, r7
 8007928:	461f      	mov	r7, r3
 800792a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800792e:	2a39      	cmp	r2, #57	; 0x39
 8007930:	d107      	bne.n	8007942 <_dtoa_r+0x702>
 8007932:	9a03      	ldr	r2, [sp, #12]
 8007934:	429a      	cmp	r2, r3
 8007936:	d1f7      	bne.n	8007928 <_dtoa_r+0x6e8>
 8007938:	2230      	movs	r2, #48	; 0x30
 800793a:	9903      	ldr	r1, [sp, #12]
 800793c:	f108 0801 	add.w	r8, r8, #1
 8007940:	700a      	strb	r2, [r1, #0]
 8007942:	781a      	ldrb	r2, [r3, #0]
 8007944:	3201      	adds	r2, #1
 8007946:	701a      	strb	r2, [r3, #0]
 8007948:	e79e      	b.n	8007888 <_dtoa_r+0x648>
 800794a:	46d0      	mov	r8, sl
 800794c:	e7eb      	b.n	8007926 <_dtoa_r+0x6e6>
 800794e:	2200      	movs	r2, #0
 8007950:	4b6e      	ldr	r3, [pc, #440]	; (8007b0c <_dtoa_r+0x8cc>)
 8007952:	f7f8 fdc1 	bl	80004d8 <__aeabi_dmul>
 8007956:	2200      	movs	r2, #0
 8007958:	2300      	movs	r3, #0
 800795a:	4680      	mov	r8, r0
 800795c:	4689      	mov	r9, r1
 800795e:	f7f9 f823 	bl	80009a8 <__aeabi_dcmpeq>
 8007962:	2800      	cmp	r0, #0
 8007964:	d09b      	beq.n	800789e <_dtoa_r+0x65e>
 8007966:	e7cd      	b.n	8007904 <_dtoa_r+0x6c4>
 8007968:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800796a:	2a00      	cmp	r2, #0
 800796c:	f000 80d0 	beq.w	8007b10 <_dtoa_r+0x8d0>
 8007970:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007972:	2a01      	cmp	r2, #1
 8007974:	f300 80ae 	bgt.w	8007ad4 <_dtoa_r+0x894>
 8007978:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800797a:	2a00      	cmp	r2, #0
 800797c:	f000 80a6 	beq.w	8007acc <_dtoa_r+0x88c>
 8007980:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007984:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007986:	9f06      	ldr	r7, [sp, #24]
 8007988:	9a06      	ldr	r2, [sp, #24]
 800798a:	2101      	movs	r1, #1
 800798c:	441a      	add	r2, r3
 800798e:	9206      	str	r2, [sp, #24]
 8007990:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007992:	4628      	mov	r0, r5
 8007994:	441a      	add	r2, r3
 8007996:	9209      	str	r2, [sp, #36]	; 0x24
 8007998:	f000 fb5e 	bl	8008058 <__i2b>
 800799c:	4606      	mov	r6, r0
 800799e:	2f00      	cmp	r7, #0
 80079a0:	dd0c      	ble.n	80079bc <_dtoa_r+0x77c>
 80079a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	dd09      	ble.n	80079bc <_dtoa_r+0x77c>
 80079a8:	42bb      	cmp	r3, r7
 80079aa:	bfa8      	it	ge
 80079ac:	463b      	movge	r3, r7
 80079ae:	9a06      	ldr	r2, [sp, #24]
 80079b0:	1aff      	subs	r7, r7, r3
 80079b2:	1ad2      	subs	r2, r2, r3
 80079b4:	9206      	str	r2, [sp, #24]
 80079b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	9309      	str	r3, [sp, #36]	; 0x24
 80079bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079be:	b1f3      	cbz	r3, 80079fe <_dtoa_r+0x7be>
 80079c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f000 80a8 	beq.w	8007b18 <_dtoa_r+0x8d8>
 80079c8:	2c00      	cmp	r4, #0
 80079ca:	dd10      	ble.n	80079ee <_dtoa_r+0x7ae>
 80079cc:	4631      	mov	r1, r6
 80079ce:	4622      	mov	r2, r4
 80079d0:	4628      	mov	r0, r5
 80079d2:	f000 fbff 	bl	80081d4 <__pow5mult>
 80079d6:	465a      	mov	r2, fp
 80079d8:	4601      	mov	r1, r0
 80079da:	4606      	mov	r6, r0
 80079dc:	4628      	mov	r0, r5
 80079de:	f000 fb51 	bl	8008084 <__multiply>
 80079e2:	4680      	mov	r8, r0
 80079e4:	4659      	mov	r1, fp
 80079e6:	4628      	mov	r0, r5
 80079e8:	f000 fa80 	bl	8007eec <_Bfree>
 80079ec:	46c3      	mov	fp, r8
 80079ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079f0:	1b1a      	subs	r2, r3, r4
 80079f2:	d004      	beq.n	80079fe <_dtoa_r+0x7be>
 80079f4:	4659      	mov	r1, fp
 80079f6:	4628      	mov	r0, r5
 80079f8:	f000 fbec 	bl	80081d4 <__pow5mult>
 80079fc:	4683      	mov	fp, r0
 80079fe:	2101      	movs	r1, #1
 8007a00:	4628      	mov	r0, r5
 8007a02:	f000 fb29 	bl	8008058 <__i2b>
 8007a06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a08:	4604      	mov	r4, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f340 8086 	ble.w	8007b1c <_dtoa_r+0x8dc>
 8007a10:	461a      	mov	r2, r3
 8007a12:	4601      	mov	r1, r0
 8007a14:	4628      	mov	r0, r5
 8007a16:	f000 fbdd 	bl	80081d4 <__pow5mult>
 8007a1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a1c:	4604      	mov	r4, r0
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	dd7f      	ble.n	8007b22 <_dtoa_r+0x8e2>
 8007a22:	f04f 0800 	mov.w	r8, #0
 8007a26:	6923      	ldr	r3, [r4, #16]
 8007a28:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a2c:	6918      	ldr	r0, [r3, #16]
 8007a2e:	f000 fac5 	bl	8007fbc <__hi0bits>
 8007a32:	f1c0 0020 	rsb	r0, r0, #32
 8007a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a38:	4418      	add	r0, r3
 8007a3a:	f010 001f 	ands.w	r0, r0, #31
 8007a3e:	f000 8092 	beq.w	8007b66 <_dtoa_r+0x926>
 8007a42:	f1c0 0320 	rsb	r3, r0, #32
 8007a46:	2b04      	cmp	r3, #4
 8007a48:	f340 808a 	ble.w	8007b60 <_dtoa_r+0x920>
 8007a4c:	f1c0 001c 	rsb	r0, r0, #28
 8007a50:	9b06      	ldr	r3, [sp, #24]
 8007a52:	4407      	add	r7, r0
 8007a54:	4403      	add	r3, r0
 8007a56:	9306      	str	r3, [sp, #24]
 8007a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a5a:	4403      	add	r3, r0
 8007a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a5e:	9b06      	ldr	r3, [sp, #24]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	dd05      	ble.n	8007a70 <_dtoa_r+0x830>
 8007a64:	4659      	mov	r1, fp
 8007a66:	461a      	mov	r2, r3
 8007a68:	4628      	mov	r0, r5
 8007a6a:	f000 fc0d 	bl	8008288 <__lshift>
 8007a6e:	4683      	mov	fp, r0
 8007a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	dd05      	ble.n	8007a82 <_dtoa_r+0x842>
 8007a76:	4621      	mov	r1, r4
 8007a78:	461a      	mov	r2, r3
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	f000 fc04 	bl	8008288 <__lshift>
 8007a80:	4604      	mov	r4, r0
 8007a82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d070      	beq.n	8007b6a <_dtoa_r+0x92a>
 8007a88:	4621      	mov	r1, r4
 8007a8a:	4658      	mov	r0, fp
 8007a8c:	f000 fc6c 	bl	8008368 <__mcmp>
 8007a90:	2800      	cmp	r0, #0
 8007a92:	da6a      	bge.n	8007b6a <_dtoa_r+0x92a>
 8007a94:	2300      	movs	r3, #0
 8007a96:	4659      	mov	r1, fp
 8007a98:	220a      	movs	r2, #10
 8007a9a:	4628      	mov	r0, r5
 8007a9c:	f000 fa48 	bl	8007f30 <__multadd>
 8007aa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007aa2:	4683      	mov	fp, r0
 8007aa4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f000 8194 	beq.w	8007dd6 <_dtoa_r+0xb96>
 8007aae:	4631      	mov	r1, r6
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	220a      	movs	r2, #10
 8007ab4:	4628      	mov	r0, r5
 8007ab6:	f000 fa3b 	bl	8007f30 <__multadd>
 8007aba:	f1b9 0f00 	cmp.w	r9, #0
 8007abe:	4606      	mov	r6, r0
 8007ac0:	f300 8093 	bgt.w	8007bea <_dtoa_r+0x9aa>
 8007ac4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	dc57      	bgt.n	8007b7a <_dtoa_r+0x93a>
 8007aca:	e08e      	b.n	8007bea <_dtoa_r+0x9aa>
 8007acc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007ace:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007ad2:	e757      	b.n	8007984 <_dtoa_r+0x744>
 8007ad4:	9b08      	ldr	r3, [sp, #32]
 8007ad6:	1e5c      	subs	r4, r3, #1
 8007ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ada:	42a3      	cmp	r3, r4
 8007adc:	bfb7      	itett	lt
 8007ade:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007ae0:	1b1c      	subge	r4, r3, r4
 8007ae2:	1ae2      	sublt	r2, r4, r3
 8007ae4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007ae6:	bfbe      	ittt	lt
 8007ae8:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007aea:	189b      	addlt	r3, r3, r2
 8007aec:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007aee:	9b08      	ldr	r3, [sp, #32]
 8007af0:	bfb8      	it	lt
 8007af2:	2400      	movlt	r4, #0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	bfbb      	ittet	lt
 8007af8:	9b06      	ldrlt	r3, [sp, #24]
 8007afa:	9a08      	ldrlt	r2, [sp, #32]
 8007afc:	9f06      	ldrge	r7, [sp, #24]
 8007afe:	1a9f      	sublt	r7, r3, r2
 8007b00:	bfac      	ite	ge
 8007b02:	9b08      	ldrge	r3, [sp, #32]
 8007b04:	2300      	movlt	r3, #0
 8007b06:	e73f      	b.n	8007988 <_dtoa_r+0x748>
 8007b08:	3fe00000 	.word	0x3fe00000
 8007b0c:	40240000 	.word	0x40240000
 8007b10:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007b12:	9f06      	ldr	r7, [sp, #24]
 8007b14:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007b16:	e742      	b.n	800799e <_dtoa_r+0x75e>
 8007b18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b1a:	e76b      	b.n	80079f4 <_dtoa_r+0x7b4>
 8007b1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	dc19      	bgt.n	8007b56 <_dtoa_r+0x916>
 8007b22:	9b04      	ldr	r3, [sp, #16]
 8007b24:	b9bb      	cbnz	r3, 8007b56 <_dtoa_r+0x916>
 8007b26:	9b05      	ldr	r3, [sp, #20]
 8007b28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b2c:	b99b      	cbnz	r3, 8007b56 <_dtoa_r+0x916>
 8007b2e:	9b05      	ldr	r3, [sp, #20]
 8007b30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b34:	0d1b      	lsrs	r3, r3, #20
 8007b36:	051b      	lsls	r3, r3, #20
 8007b38:	b183      	cbz	r3, 8007b5c <_dtoa_r+0x91c>
 8007b3a:	f04f 0801 	mov.w	r8, #1
 8007b3e:	9b06      	ldr	r3, [sp, #24]
 8007b40:	3301      	adds	r3, #1
 8007b42:	9306      	str	r3, [sp, #24]
 8007b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b46:	3301      	adds	r3, #1
 8007b48:	9309      	str	r3, [sp, #36]	; 0x24
 8007b4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f47f af6a 	bne.w	8007a26 <_dtoa_r+0x7e6>
 8007b52:	2001      	movs	r0, #1
 8007b54:	e76f      	b.n	8007a36 <_dtoa_r+0x7f6>
 8007b56:	f04f 0800 	mov.w	r8, #0
 8007b5a:	e7f6      	b.n	8007b4a <_dtoa_r+0x90a>
 8007b5c:	4698      	mov	r8, r3
 8007b5e:	e7f4      	b.n	8007b4a <_dtoa_r+0x90a>
 8007b60:	f43f af7d 	beq.w	8007a5e <_dtoa_r+0x81e>
 8007b64:	4618      	mov	r0, r3
 8007b66:	301c      	adds	r0, #28
 8007b68:	e772      	b.n	8007a50 <_dtoa_r+0x810>
 8007b6a:	9b08      	ldr	r3, [sp, #32]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	dc36      	bgt.n	8007bde <_dtoa_r+0x99e>
 8007b70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	dd33      	ble.n	8007bde <_dtoa_r+0x99e>
 8007b76:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b7a:	f1b9 0f00 	cmp.w	r9, #0
 8007b7e:	d10d      	bne.n	8007b9c <_dtoa_r+0x95c>
 8007b80:	4621      	mov	r1, r4
 8007b82:	464b      	mov	r3, r9
 8007b84:	2205      	movs	r2, #5
 8007b86:	4628      	mov	r0, r5
 8007b88:	f000 f9d2 	bl	8007f30 <__multadd>
 8007b8c:	4601      	mov	r1, r0
 8007b8e:	4604      	mov	r4, r0
 8007b90:	4658      	mov	r0, fp
 8007b92:	f000 fbe9 	bl	8008368 <__mcmp>
 8007b96:	2800      	cmp	r0, #0
 8007b98:	f73f adb8 	bgt.w	800770c <_dtoa_r+0x4cc>
 8007b9c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b9e:	9f03      	ldr	r7, [sp, #12]
 8007ba0:	ea6f 0a03 	mvn.w	sl, r3
 8007ba4:	f04f 0800 	mov.w	r8, #0
 8007ba8:	4621      	mov	r1, r4
 8007baa:	4628      	mov	r0, r5
 8007bac:	f000 f99e 	bl	8007eec <_Bfree>
 8007bb0:	2e00      	cmp	r6, #0
 8007bb2:	f43f aea7 	beq.w	8007904 <_dtoa_r+0x6c4>
 8007bb6:	f1b8 0f00 	cmp.w	r8, #0
 8007bba:	d005      	beq.n	8007bc8 <_dtoa_r+0x988>
 8007bbc:	45b0      	cmp	r8, r6
 8007bbe:	d003      	beq.n	8007bc8 <_dtoa_r+0x988>
 8007bc0:	4641      	mov	r1, r8
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	f000 f992 	bl	8007eec <_Bfree>
 8007bc8:	4631      	mov	r1, r6
 8007bca:	4628      	mov	r0, r5
 8007bcc:	f000 f98e 	bl	8007eec <_Bfree>
 8007bd0:	e698      	b.n	8007904 <_dtoa_r+0x6c4>
 8007bd2:	2400      	movs	r4, #0
 8007bd4:	4626      	mov	r6, r4
 8007bd6:	e7e1      	b.n	8007b9c <_dtoa_r+0x95c>
 8007bd8:	46c2      	mov	sl, r8
 8007bda:	4626      	mov	r6, r4
 8007bdc:	e596      	b.n	800770c <_dtoa_r+0x4cc>
 8007bde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007be0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f000 80fd 	beq.w	8007de4 <_dtoa_r+0xba4>
 8007bea:	2f00      	cmp	r7, #0
 8007bec:	dd05      	ble.n	8007bfa <_dtoa_r+0x9ba>
 8007bee:	4631      	mov	r1, r6
 8007bf0:	463a      	mov	r2, r7
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	f000 fb48 	bl	8008288 <__lshift>
 8007bf8:	4606      	mov	r6, r0
 8007bfa:	f1b8 0f00 	cmp.w	r8, #0
 8007bfe:	d05c      	beq.n	8007cba <_dtoa_r+0xa7a>
 8007c00:	4628      	mov	r0, r5
 8007c02:	6871      	ldr	r1, [r6, #4]
 8007c04:	f000 f932 	bl	8007e6c <_Balloc>
 8007c08:	4607      	mov	r7, r0
 8007c0a:	b928      	cbnz	r0, 8007c18 <_dtoa_r+0x9d8>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007c12:	4b7f      	ldr	r3, [pc, #508]	; (8007e10 <_dtoa_r+0xbd0>)
 8007c14:	f7ff bb28 	b.w	8007268 <_dtoa_r+0x28>
 8007c18:	6932      	ldr	r2, [r6, #16]
 8007c1a:	f106 010c 	add.w	r1, r6, #12
 8007c1e:	3202      	adds	r2, #2
 8007c20:	0092      	lsls	r2, r2, #2
 8007c22:	300c      	adds	r0, #12
 8007c24:	f000 f914 	bl	8007e50 <memcpy>
 8007c28:	2201      	movs	r2, #1
 8007c2a:	4639      	mov	r1, r7
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	f000 fb2b 	bl	8008288 <__lshift>
 8007c32:	46b0      	mov	r8, r6
 8007c34:	4606      	mov	r6, r0
 8007c36:	9b03      	ldr	r3, [sp, #12]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	9308      	str	r3, [sp, #32]
 8007c3c:	9b03      	ldr	r3, [sp, #12]
 8007c3e:	444b      	add	r3, r9
 8007c40:	930a      	str	r3, [sp, #40]	; 0x28
 8007c42:	9b04      	ldr	r3, [sp, #16]
 8007c44:	f003 0301 	and.w	r3, r3, #1
 8007c48:	9309      	str	r3, [sp, #36]	; 0x24
 8007c4a:	9b08      	ldr	r3, [sp, #32]
 8007c4c:	4621      	mov	r1, r4
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	4658      	mov	r0, fp
 8007c52:	9304      	str	r3, [sp, #16]
 8007c54:	f7ff fa68 	bl	8007128 <quorem>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	4641      	mov	r1, r8
 8007c5c:	3330      	adds	r3, #48	; 0x30
 8007c5e:	9006      	str	r0, [sp, #24]
 8007c60:	4658      	mov	r0, fp
 8007c62:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c64:	f000 fb80 	bl	8008368 <__mcmp>
 8007c68:	4632      	mov	r2, r6
 8007c6a:	4681      	mov	r9, r0
 8007c6c:	4621      	mov	r1, r4
 8007c6e:	4628      	mov	r0, r5
 8007c70:	f000 fb96 	bl	80083a0 <__mdiff>
 8007c74:	68c2      	ldr	r2, [r0, #12]
 8007c76:	4607      	mov	r7, r0
 8007c78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c7a:	bb02      	cbnz	r2, 8007cbe <_dtoa_r+0xa7e>
 8007c7c:	4601      	mov	r1, r0
 8007c7e:	4658      	mov	r0, fp
 8007c80:	f000 fb72 	bl	8008368 <__mcmp>
 8007c84:	4602      	mov	r2, r0
 8007c86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c88:	4639      	mov	r1, r7
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007c90:	f000 f92c 	bl	8007eec <_Bfree>
 8007c94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c98:	9f08      	ldr	r7, [sp, #32]
 8007c9a:	ea43 0102 	orr.w	r1, r3, r2
 8007c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ca0:	430b      	orrs	r3, r1
 8007ca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ca4:	d10d      	bne.n	8007cc2 <_dtoa_r+0xa82>
 8007ca6:	2b39      	cmp	r3, #57	; 0x39
 8007ca8:	d029      	beq.n	8007cfe <_dtoa_r+0xabe>
 8007caa:	f1b9 0f00 	cmp.w	r9, #0
 8007cae:	dd01      	ble.n	8007cb4 <_dtoa_r+0xa74>
 8007cb0:	9b06      	ldr	r3, [sp, #24]
 8007cb2:	3331      	adds	r3, #49	; 0x31
 8007cb4:	9a04      	ldr	r2, [sp, #16]
 8007cb6:	7013      	strb	r3, [r2, #0]
 8007cb8:	e776      	b.n	8007ba8 <_dtoa_r+0x968>
 8007cba:	4630      	mov	r0, r6
 8007cbc:	e7b9      	b.n	8007c32 <_dtoa_r+0x9f2>
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	e7e2      	b.n	8007c88 <_dtoa_r+0xa48>
 8007cc2:	f1b9 0f00 	cmp.w	r9, #0
 8007cc6:	db06      	blt.n	8007cd6 <_dtoa_r+0xa96>
 8007cc8:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007cca:	ea41 0909 	orr.w	r9, r1, r9
 8007cce:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cd0:	ea59 0101 	orrs.w	r1, r9, r1
 8007cd4:	d120      	bne.n	8007d18 <_dtoa_r+0xad8>
 8007cd6:	2a00      	cmp	r2, #0
 8007cd8:	ddec      	ble.n	8007cb4 <_dtoa_r+0xa74>
 8007cda:	4659      	mov	r1, fp
 8007cdc:	2201      	movs	r2, #1
 8007cde:	4628      	mov	r0, r5
 8007ce0:	9308      	str	r3, [sp, #32]
 8007ce2:	f000 fad1 	bl	8008288 <__lshift>
 8007ce6:	4621      	mov	r1, r4
 8007ce8:	4683      	mov	fp, r0
 8007cea:	f000 fb3d 	bl	8008368 <__mcmp>
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	9b08      	ldr	r3, [sp, #32]
 8007cf2:	dc02      	bgt.n	8007cfa <_dtoa_r+0xaba>
 8007cf4:	d1de      	bne.n	8007cb4 <_dtoa_r+0xa74>
 8007cf6:	07da      	lsls	r2, r3, #31
 8007cf8:	d5dc      	bpl.n	8007cb4 <_dtoa_r+0xa74>
 8007cfa:	2b39      	cmp	r3, #57	; 0x39
 8007cfc:	d1d8      	bne.n	8007cb0 <_dtoa_r+0xa70>
 8007cfe:	2339      	movs	r3, #57	; 0x39
 8007d00:	9a04      	ldr	r2, [sp, #16]
 8007d02:	7013      	strb	r3, [r2, #0]
 8007d04:	463b      	mov	r3, r7
 8007d06:	461f      	mov	r7, r3
 8007d08:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	2a39      	cmp	r2, #57	; 0x39
 8007d10:	d050      	beq.n	8007db4 <_dtoa_r+0xb74>
 8007d12:	3201      	adds	r2, #1
 8007d14:	701a      	strb	r2, [r3, #0]
 8007d16:	e747      	b.n	8007ba8 <_dtoa_r+0x968>
 8007d18:	2a00      	cmp	r2, #0
 8007d1a:	dd03      	ble.n	8007d24 <_dtoa_r+0xae4>
 8007d1c:	2b39      	cmp	r3, #57	; 0x39
 8007d1e:	d0ee      	beq.n	8007cfe <_dtoa_r+0xabe>
 8007d20:	3301      	adds	r3, #1
 8007d22:	e7c7      	b.n	8007cb4 <_dtoa_r+0xa74>
 8007d24:	9a08      	ldr	r2, [sp, #32]
 8007d26:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007d28:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007d2c:	428a      	cmp	r2, r1
 8007d2e:	d02a      	beq.n	8007d86 <_dtoa_r+0xb46>
 8007d30:	4659      	mov	r1, fp
 8007d32:	2300      	movs	r3, #0
 8007d34:	220a      	movs	r2, #10
 8007d36:	4628      	mov	r0, r5
 8007d38:	f000 f8fa 	bl	8007f30 <__multadd>
 8007d3c:	45b0      	cmp	r8, r6
 8007d3e:	4683      	mov	fp, r0
 8007d40:	f04f 0300 	mov.w	r3, #0
 8007d44:	f04f 020a 	mov.w	r2, #10
 8007d48:	4641      	mov	r1, r8
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	d107      	bne.n	8007d5e <_dtoa_r+0xb1e>
 8007d4e:	f000 f8ef 	bl	8007f30 <__multadd>
 8007d52:	4680      	mov	r8, r0
 8007d54:	4606      	mov	r6, r0
 8007d56:	9b08      	ldr	r3, [sp, #32]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	9308      	str	r3, [sp, #32]
 8007d5c:	e775      	b.n	8007c4a <_dtoa_r+0xa0a>
 8007d5e:	f000 f8e7 	bl	8007f30 <__multadd>
 8007d62:	4631      	mov	r1, r6
 8007d64:	4680      	mov	r8, r0
 8007d66:	2300      	movs	r3, #0
 8007d68:	220a      	movs	r2, #10
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	f000 f8e0 	bl	8007f30 <__multadd>
 8007d70:	4606      	mov	r6, r0
 8007d72:	e7f0      	b.n	8007d56 <_dtoa_r+0xb16>
 8007d74:	f1b9 0f00 	cmp.w	r9, #0
 8007d78:	bfcc      	ite	gt
 8007d7a:	464f      	movgt	r7, r9
 8007d7c:	2701      	movle	r7, #1
 8007d7e:	f04f 0800 	mov.w	r8, #0
 8007d82:	9a03      	ldr	r2, [sp, #12]
 8007d84:	4417      	add	r7, r2
 8007d86:	4659      	mov	r1, fp
 8007d88:	2201      	movs	r2, #1
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	9308      	str	r3, [sp, #32]
 8007d8e:	f000 fa7b 	bl	8008288 <__lshift>
 8007d92:	4621      	mov	r1, r4
 8007d94:	4683      	mov	fp, r0
 8007d96:	f000 fae7 	bl	8008368 <__mcmp>
 8007d9a:	2800      	cmp	r0, #0
 8007d9c:	dcb2      	bgt.n	8007d04 <_dtoa_r+0xac4>
 8007d9e:	d102      	bne.n	8007da6 <_dtoa_r+0xb66>
 8007da0:	9b08      	ldr	r3, [sp, #32]
 8007da2:	07db      	lsls	r3, r3, #31
 8007da4:	d4ae      	bmi.n	8007d04 <_dtoa_r+0xac4>
 8007da6:	463b      	mov	r3, r7
 8007da8:	461f      	mov	r7, r3
 8007daa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dae:	2a30      	cmp	r2, #48	; 0x30
 8007db0:	d0fa      	beq.n	8007da8 <_dtoa_r+0xb68>
 8007db2:	e6f9      	b.n	8007ba8 <_dtoa_r+0x968>
 8007db4:	9a03      	ldr	r2, [sp, #12]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d1a5      	bne.n	8007d06 <_dtoa_r+0xac6>
 8007dba:	2331      	movs	r3, #49	; 0x31
 8007dbc:	f10a 0a01 	add.w	sl, sl, #1
 8007dc0:	e779      	b.n	8007cb6 <_dtoa_r+0xa76>
 8007dc2:	4b14      	ldr	r3, [pc, #80]	; (8007e14 <_dtoa_r+0xbd4>)
 8007dc4:	f7ff baa8 	b.w	8007318 <_dtoa_r+0xd8>
 8007dc8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f47f aa81 	bne.w	80072d2 <_dtoa_r+0x92>
 8007dd0:	4b11      	ldr	r3, [pc, #68]	; (8007e18 <_dtoa_r+0xbd8>)
 8007dd2:	f7ff baa1 	b.w	8007318 <_dtoa_r+0xd8>
 8007dd6:	f1b9 0f00 	cmp.w	r9, #0
 8007dda:	dc03      	bgt.n	8007de4 <_dtoa_r+0xba4>
 8007ddc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	f73f aecb 	bgt.w	8007b7a <_dtoa_r+0x93a>
 8007de4:	9f03      	ldr	r7, [sp, #12]
 8007de6:	4621      	mov	r1, r4
 8007de8:	4658      	mov	r0, fp
 8007dea:	f7ff f99d 	bl	8007128 <quorem>
 8007dee:	9a03      	ldr	r2, [sp, #12]
 8007df0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007df4:	f807 3b01 	strb.w	r3, [r7], #1
 8007df8:	1aba      	subs	r2, r7, r2
 8007dfa:	4591      	cmp	r9, r2
 8007dfc:	ddba      	ble.n	8007d74 <_dtoa_r+0xb34>
 8007dfe:	4659      	mov	r1, fp
 8007e00:	2300      	movs	r3, #0
 8007e02:	220a      	movs	r2, #10
 8007e04:	4628      	mov	r0, r5
 8007e06:	f000 f893 	bl	8007f30 <__multadd>
 8007e0a:	4683      	mov	fp, r0
 8007e0c:	e7eb      	b.n	8007de6 <_dtoa_r+0xba6>
 8007e0e:	bf00      	nop
 8007e10:	0800988c 	.word	0x0800988c
 8007e14:	080096e8 	.word	0x080096e8
 8007e18:	0800980d 	.word	0x0800980d

08007e1c <_localeconv_r>:
 8007e1c:	4800      	ldr	r0, [pc, #0]	; (8007e20 <_localeconv_r+0x4>)
 8007e1e:	4770      	bx	lr
 8007e20:	20000194 	.word	0x20000194

08007e24 <malloc>:
 8007e24:	4b02      	ldr	r3, [pc, #8]	; (8007e30 <malloc+0xc>)
 8007e26:	4601      	mov	r1, r0
 8007e28:	6818      	ldr	r0, [r3, #0]
 8007e2a:	f000 bc1d 	b.w	8008668 <_malloc_r>
 8007e2e:	bf00      	nop
 8007e30:	20000040 	.word	0x20000040

08007e34 <memchr>:
 8007e34:	4603      	mov	r3, r0
 8007e36:	b510      	push	{r4, lr}
 8007e38:	b2c9      	uxtb	r1, r1
 8007e3a:	4402      	add	r2, r0
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	4618      	mov	r0, r3
 8007e40:	d101      	bne.n	8007e46 <memchr+0x12>
 8007e42:	2000      	movs	r0, #0
 8007e44:	e003      	b.n	8007e4e <memchr+0x1a>
 8007e46:	7804      	ldrb	r4, [r0, #0]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	428c      	cmp	r4, r1
 8007e4c:	d1f6      	bne.n	8007e3c <memchr+0x8>
 8007e4e:	bd10      	pop	{r4, pc}

08007e50 <memcpy>:
 8007e50:	440a      	add	r2, r1
 8007e52:	4291      	cmp	r1, r2
 8007e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e58:	d100      	bne.n	8007e5c <memcpy+0xc>
 8007e5a:	4770      	bx	lr
 8007e5c:	b510      	push	{r4, lr}
 8007e5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e62:	4291      	cmp	r1, r2
 8007e64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e68:	d1f9      	bne.n	8007e5e <memcpy+0xe>
 8007e6a:	bd10      	pop	{r4, pc}

08007e6c <_Balloc>:
 8007e6c:	b570      	push	{r4, r5, r6, lr}
 8007e6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e70:	4604      	mov	r4, r0
 8007e72:	460d      	mov	r5, r1
 8007e74:	b976      	cbnz	r6, 8007e94 <_Balloc+0x28>
 8007e76:	2010      	movs	r0, #16
 8007e78:	f7ff ffd4 	bl	8007e24 <malloc>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	6260      	str	r0, [r4, #36]	; 0x24
 8007e80:	b920      	cbnz	r0, 8007e8c <_Balloc+0x20>
 8007e82:	2166      	movs	r1, #102	; 0x66
 8007e84:	4b17      	ldr	r3, [pc, #92]	; (8007ee4 <_Balloc+0x78>)
 8007e86:	4818      	ldr	r0, [pc, #96]	; (8007ee8 <_Balloc+0x7c>)
 8007e88:	f000 fdce 	bl	8008a28 <__assert_func>
 8007e8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e90:	6006      	str	r6, [r0, #0]
 8007e92:	60c6      	str	r6, [r0, #12]
 8007e94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007e96:	68f3      	ldr	r3, [r6, #12]
 8007e98:	b183      	cbz	r3, 8007ebc <_Balloc+0x50>
 8007e9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ea2:	b9b8      	cbnz	r0, 8007ed4 <_Balloc+0x68>
 8007ea4:	2101      	movs	r1, #1
 8007ea6:	fa01 f605 	lsl.w	r6, r1, r5
 8007eaa:	1d72      	adds	r2, r6, #5
 8007eac:	4620      	mov	r0, r4
 8007eae:	0092      	lsls	r2, r2, #2
 8007eb0:	f000 fb5e 	bl	8008570 <_calloc_r>
 8007eb4:	b160      	cbz	r0, 8007ed0 <_Balloc+0x64>
 8007eb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007eba:	e00e      	b.n	8007eda <_Balloc+0x6e>
 8007ebc:	2221      	movs	r2, #33	; 0x21
 8007ebe:	2104      	movs	r1, #4
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f000 fb55 	bl	8008570 <_calloc_r>
 8007ec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ec8:	60f0      	str	r0, [r6, #12]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d1e4      	bne.n	8007e9a <_Balloc+0x2e>
 8007ed0:	2000      	movs	r0, #0
 8007ed2:	bd70      	pop	{r4, r5, r6, pc}
 8007ed4:	6802      	ldr	r2, [r0, #0]
 8007ed6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007eda:	2300      	movs	r3, #0
 8007edc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ee0:	e7f7      	b.n	8007ed2 <_Balloc+0x66>
 8007ee2:	bf00      	nop
 8007ee4:	0800981a 	.word	0x0800981a
 8007ee8:	0800989d 	.word	0x0800989d

08007eec <_Bfree>:
 8007eec:	b570      	push	{r4, r5, r6, lr}
 8007eee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ef0:	4605      	mov	r5, r0
 8007ef2:	460c      	mov	r4, r1
 8007ef4:	b976      	cbnz	r6, 8007f14 <_Bfree+0x28>
 8007ef6:	2010      	movs	r0, #16
 8007ef8:	f7ff ff94 	bl	8007e24 <malloc>
 8007efc:	4602      	mov	r2, r0
 8007efe:	6268      	str	r0, [r5, #36]	; 0x24
 8007f00:	b920      	cbnz	r0, 8007f0c <_Bfree+0x20>
 8007f02:	218a      	movs	r1, #138	; 0x8a
 8007f04:	4b08      	ldr	r3, [pc, #32]	; (8007f28 <_Bfree+0x3c>)
 8007f06:	4809      	ldr	r0, [pc, #36]	; (8007f2c <_Bfree+0x40>)
 8007f08:	f000 fd8e 	bl	8008a28 <__assert_func>
 8007f0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f10:	6006      	str	r6, [r0, #0]
 8007f12:	60c6      	str	r6, [r0, #12]
 8007f14:	b13c      	cbz	r4, 8007f26 <_Bfree+0x3a>
 8007f16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f18:	6862      	ldr	r2, [r4, #4]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f20:	6021      	str	r1, [r4, #0]
 8007f22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f26:	bd70      	pop	{r4, r5, r6, pc}
 8007f28:	0800981a 	.word	0x0800981a
 8007f2c:	0800989d 	.word	0x0800989d

08007f30 <__multadd>:
 8007f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f34:	4607      	mov	r7, r0
 8007f36:	460c      	mov	r4, r1
 8007f38:	461e      	mov	r6, r3
 8007f3a:	2000      	movs	r0, #0
 8007f3c:	690d      	ldr	r5, [r1, #16]
 8007f3e:	f101 0c14 	add.w	ip, r1, #20
 8007f42:	f8dc 3000 	ldr.w	r3, [ip]
 8007f46:	3001      	adds	r0, #1
 8007f48:	b299      	uxth	r1, r3
 8007f4a:	fb02 6101 	mla	r1, r2, r1, r6
 8007f4e:	0c1e      	lsrs	r6, r3, #16
 8007f50:	0c0b      	lsrs	r3, r1, #16
 8007f52:	fb02 3306 	mla	r3, r2, r6, r3
 8007f56:	b289      	uxth	r1, r1
 8007f58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007f5c:	4285      	cmp	r5, r0
 8007f5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007f62:	f84c 1b04 	str.w	r1, [ip], #4
 8007f66:	dcec      	bgt.n	8007f42 <__multadd+0x12>
 8007f68:	b30e      	cbz	r6, 8007fae <__multadd+0x7e>
 8007f6a:	68a3      	ldr	r3, [r4, #8]
 8007f6c:	42ab      	cmp	r3, r5
 8007f6e:	dc19      	bgt.n	8007fa4 <__multadd+0x74>
 8007f70:	6861      	ldr	r1, [r4, #4]
 8007f72:	4638      	mov	r0, r7
 8007f74:	3101      	adds	r1, #1
 8007f76:	f7ff ff79 	bl	8007e6c <_Balloc>
 8007f7a:	4680      	mov	r8, r0
 8007f7c:	b928      	cbnz	r0, 8007f8a <__multadd+0x5a>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	21b5      	movs	r1, #181	; 0xb5
 8007f82:	4b0c      	ldr	r3, [pc, #48]	; (8007fb4 <__multadd+0x84>)
 8007f84:	480c      	ldr	r0, [pc, #48]	; (8007fb8 <__multadd+0x88>)
 8007f86:	f000 fd4f 	bl	8008a28 <__assert_func>
 8007f8a:	6922      	ldr	r2, [r4, #16]
 8007f8c:	f104 010c 	add.w	r1, r4, #12
 8007f90:	3202      	adds	r2, #2
 8007f92:	0092      	lsls	r2, r2, #2
 8007f94:	300c      	adds	r0, #12
 8007f96:	f7ff ff5b 	bl	8007e50 <memcpy>
 8007f9a:	4621      	mov	r1, r4
 8007f9c:	4638      	mov	r0, r7
 8007f9e:	f7ff ffa5 	bl	8007eec <_Bfree>
 8007fa2:	4644      	mov	r4, r8
 8007fa4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007fa8:	3501      	adds	r5, #1
 8007faa:	615e      	str	r6, [r3, #20]
 8007fac:	6125      	str	r5, [r4, #16]
 8007fae:	4620      	mov	r0, r4
 8007fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fb4:	0800988c 	.word	0x0800988c
 8007fb8:	0800989d 	.word	0x0800989d

08007fbc <__hi0bits>:
 8007fbc:	0c02      	lsrs	r2, r0, #16
 8007fbe:	0412      	lsls	r2, r2, #16
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	b9ca      	cbnz	r2, 8007ff8 <__hi0bits+0x3c>
 8007fc4:	0403      	lsls	r3, r0, #16
 8007fc6:	2010      	movs	r0, #16
 8007fc8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007fcc:	bf04      	itt	eq
 8007fce:	021b      	lsleq	r3, r3, #8
 8007fd0:	3008      	addeq	r0, #8
 8007fd2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007fd6:	bf04      	itt	eq
 8007fd8:	011b      	lsleq	r3, r3, #4
 8007fda:	3004      	addeq	r0, #4
 8007fdc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007fe0:	bf04      	itt	eq
 8007fe2:	009b      	lsleq	r3, r3, #2
 8007fe4:	3002      	addeq	r0, #2
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	db05      	blt.n	8007ff6 <__hi0bits+0x3a>
 8007fea:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007fee:	f100 0001 	add.w	r0, r0, #1
 8007ff2:	bf08      	it	eq
 8007ff4:	2020      	moveq	r0, #32
 8007ff6:	4770      	bx	lr
 8007ff8:	2000      	movs	r0, #0
 8007ffa:	e7e5      	b.n	8007fc8 <__hi0bits+0xc>

08007ffc <__lo0bits>:
 8007ffc:	6803      	ldr	r3, [r0, #0]
 8007ffe:	4602      	mov	r2, r0
 8008000:	f013 0007 	ands.w	r0, r3, #7
 8008004:	d00b      	beq.n	800801e <__lo0bits+0x22>
 8008006:	07d9      	lsls	r1, r3, #31
 8008008:	d421      	bmi.n	800804e <__lo0bits+0x52>
 800800a:	0798      	lsls	r0, r3, #30
 800800c:	bf49      	itett	mi
 800800e:	085b      	lsrmi	r3, r3, #1
 8008010:	089b      	lsrpl	r3, r3, #2
 8008012:	2001      	movmi	r0, #1
 8008014:	6013      	strmi	r3, [r2, #0]
 8008016:	bf5c      	itt	pl
 8008018:	2002      	movpl	r0, #2
 800801a:	6013      	strpl	r3, [r2, #0]
 800801c:	4770      	bx	lr
 800801e:	b299      	uxth	r1, r3
 8008020:	b909      	cbnz	r1, 8008026 <__lo0bits+0x2a>
 8008022:	2010      	movs	r0, #16
 8008024:	0c1b      	lsrs	r3, r3, #16
 8008026:	b2d9      	uxtb	r1, r3
 8008028:	b909      	cbnz	r1, 800802e <__lo0bits+0x32>
 800802a:	3008      	adds	r0, #8
 800802c:	0a1b      	lsrs	r3, r3, #8
 800802e:	0719      	lsls	r1, r3, #28
 8008030:	bf04      	itt	eq
 8008032:	091b      	lsreq	r3, r3, #4
 8008034:	3004      	addeq	r0, #4
 8008036:	0799      	lsls	r1, r3, #30
 8008038:	bf04      	itt	eq
 800803a:	089b      	lsreq	r3, r3, #2
 800803c:	3002      	addeq	r0, #2
 800803e:	07d9      	lsls	r1, r3, #31
 8008040:	d403      	bmi.n	800804a <__lo0bits+0x4e>
 8008042:	085b      	lsrs	r3, r3, #1
 8008044:	f100 0001 	add.w	r0, r0, #1
 8008048:	d003      	beq.n	8008052 <__lo0bits+0x56>
 800804a:	6013      	str	r3, [r2, #0]
 800804c:	4770      	bx	lr
 800804e:	2000      	movs	r0, #0
 8008050:	4770      	bx	lr
 8008052:	2020      	movs	r0, #32
 8008054:	4770      	bx	lr
	...

08008058 <__i2b>:
 8008058:	b510      	push	{r4, lr}
 800805a:	460c      	mov	r4, r1
 800805c:	2101      	movs	r1, #1
 800805e:	f7ff ff05 	bl	8007e6c <_Balloc>
 8008062:	4602      	mov	r2, r0
 8008064:	b928      	cbnz	r0, 8008072 <__i2b+0x1a>
 8008066:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800806a:	4b04      	ldr	r3, [pc, #16]	; (800807c <__i2b+0x24>)
 800806c:	4804      	ldr	r0, [pc, #16]	; (8008080 <__i2b+0x28>)
 800806e:	f000 fcdb 	bl	8008a28 <__assert_func>
 8008072:	2301      	movs	r3, #1
 8008074:	6144      	str	r4, [r0, #20]
 8008076:	6103      	str	r3, [r0, #16]
 8008078:	bd10      	pop	{r4, pc}
 800807a:	bf00      	nop
 800807c:	0800988c 	.word	0x0800988c
 8008080:	0800989d 	.word	0x0800989d

08008084 <__multiply>:
 8008084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008088:	4691      	mov	r9, r2
 800808a:	690a      	ldr	r2, [r1, #16]
 800808c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008090:	460c      	mov	r4, r1
 8008092:	429a      	cmp	r2, r3
 8008094:	bfbe      	ittt	lt
 8008096:	460b      	movlt	r3, r1
 8008098:	464c      	movlt	r4, r9
 800809a:	4699      	movlt	r9, r3
 800809c:	6927      	ldr	r7, [r4, #16]
 800809e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80080a2:	68a3      	ldr	r3, [r4, #8]
 80080a4:	6861      	ldr	r1, [r4, #4]
 80080a6:	eb07 060a 	add.w	r6, r7, sl
 80080aa:	42b3      	cmp	r3, r6
 80080ac:	b085      	sub	sp, #20
 80080ae:	bfb8      	it	lt
 80080b0:	3101      	addlt	r1, #1
 80080b2:	f7ff fedb 	bl	8007e6c <_Balloc>
 80080b6:	b930      	cbnz	r0, 80080c6 <__multiply+0x42>
 80080b8:	4602      	mov	r2, r0
 80080ba:	f240 115d 	movw	r1, #349	; 0x15d
 80080be:	4b43      	ldr	r3, [pc, #268]	; (80081cc <__multiply+0x148>)
 80080c0:	4843      	ldr	r0, [pc, #268]	; (80081d0 <__multiply+0x14c>)
 80080c2:	f000 fcb1 	bl	8008a28 <__assert_func>
 80080c6:	f100 0514 	add.w	r5, r0, #20
 80080ca:	462b      	mov	r3, r5
 80080cc:	2200      	movs	r2, #0
 80080ce:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80080d2:	4543      	cmp	r3, r8
 80080d4:	d321      	bcc.n	800811a <__multiply+0x96>
 80080d6:	f104 0314 	add.w	r3, r4, #20
 80080da:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80080de:	f109 0314 	add.w	r3, r9, #20
 80080e2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80080e6:	9202      	str	r2, [sp, #8]
 80080e8:	1b3a      	subs	r2, r7, r4
 80080ea:	3a15      	subs	r2, #21
 80080ec:	f022 0203 	bic.w	r2, r2, #3
 80080f0:	3204      	adds	r2, #4
 80080f2:	f104 0115 	add.w	r1, r4, #21
 80080f6:	428f      	cmp	r7, r1
 80080f8:	bf38      	it	cc
 80080fa:	2204      	movcc	r2, #4
 80080fc:	9201      	str	r2, [sp, #4]
 80080fe:	9a02      	ldr	r2, [sp, #8]
 8008100:	9303      	str	r3, [sp, #12]
 8008102:	429a      	cmp	r2, r3
 8008104:	d80c      	bhi.n	8008120 <__multiply+0x9c>
 8008106:	2e00      	cmp	r6, #0
 8008108:	dd03      	ble.n	8008112 <__multiply+0x8e>
 800810a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800810e:	2b00      	cmp	r3, #0
 8008110:	d059      	beq.n	80081c6 <__multiply+0x142>
 8008112:	6106      	str	r6, [r0, #16]
 8008114:	b005      	add	sp, #20
 8008116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800811a:	f843 2b04 	str.w	r2, [r3], #4
 800811e:	e7d8      	b.n	80080d2 <__multiply+0x4e>
 8008120:	f8b3 a000 	ldrh.w	sl, [r3]
 8008124:	f1ba 0f00 	cmp.w	sl, #0
 8008128:	d023      	beq.n	8008172 <__multiply+0xee>
 800812a:	46a9      	mov	r9, r5
 800812c:	f04f 0c00 	mov.w	ip, #0
 8008130:	f104 0e14 	add.w	lr, r4, #20
 8008134:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008138:	f8d9 1000 	ldr.w	r1, [r9]
 800813c:	fa1f fb82 	uxth.w	fp, r2
 8008140:	b289      	uxth	r1, r1
 8008142:	fb0a 110b 	mla	r1, sl, fp, r1
 8008146:	4461      	add	r1, ip
 8008148:	f8d9 c000 	ldr.w	ip, [r9]
 800814c:	0c12      	lsrs	r2, r2, #16
 800814e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008152:	fb0a c202 	mla	r2, sl, r2, ip
 8008156:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800815a:	b289      	uxth	r1, r1
 800815c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008160:	4577      	cmp	r7, lr
 8008162:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008166:	f849 1b04 	str.w	r1, [r9], #4
 800816a:	d8e3      	bhi.n	8008134 <__multiply+0xb0>
 800816c:	9a01      	ldr	r2, [sp, #4]
 800816e:	f845 c002 	str.w	ip, [r5, r2]
 8008172:	9a03      	ldr	r2, [sp, #12]
 8008174:	3304      	adds	r3, #4
 8008176:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800817a:	f1b9 0f00 	cmp.w	r9, #0
 800817e:	d020      	beq.n	80081c2 <__multiply+0x13e>
 8008180:	46ae      	mov	lr, r5
 8008182:	f04f 0a00 	mov.w	sl, #0
 8008186:	6829      	ldr	r1, [r5, #0]
 8008188:	f104 0c14 	add.w	ip, r4, #20
 800818c:	f8bc b000 	ldrh.w	fp, [ip]
 8008190:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008194:	b289      	uxth	r1, r1
 8008196:	fb09 220b 	mla	r2, r9, fp, r2
 800819a:	4492      	add	sl, r2
 800819c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80081a0:	f84e 1b04 	str.w	r1, [lr], #4
 80081a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80081a8:	f8be 1000 	ldrh.w	r1, [lr]
 80081ac:	0c12      	lsrs	r2, r2, #16
 80081ae:	fb09 1102 	mla	r1, r9, r2, r1
 80081b2:	4567      	cmp	r7, ip
 80081b4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80081b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80081bc:	d8e6      	bhi.n	800818c <__multiply+0x108>
 80081be:	9a01      	ldr	r2, [sp, #4]
 80081c0:	50a9      	str	r1, [r5, r2]
 80081c2:	3504      	adds	r5, #4
 80081c4:	e79b      	b.n	80080fe <__multiply+0x7a>
 80081c6:	3e01      	subs	r6, #1
 80081c8:	e79d      	b.n	8008106 <__multiply+0x82>
 80081ca:	bf00      	nop
 80081cc:	0800988c 	.word	0x0800988c
 80081d0:	0800989d 	.word	0x0800989d

080081d4 <__pow5mult>:
 80081d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081d8:	4615      	mov	r5, r2
 80081da:	f012 0203 	ands.w	r2, r2, #3
 80081de:	4606      	mov	r6, r0
 80081e0:	460f      	mov	r7, r1
 80081e2:	d007      	beq.n	80081f4 <__pow5mult+0x20>
 80081e4:	4c25      	ldr	r4, [pc, #148]	; (800827c <__pow5mult+0xa8>)
 80081e6:	3a01      	subs	r2, #1
 80081e8:	2300      	movs	r3, #0
 80081ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80081ee:	f7ff fe9f 	bl	8007f30 <__multadd>
 80081f2:	4607      	mov	r7, r0
 80081f4:	10ad      	asrs	r5, r5, #2
 80081f6:	d03d      	beq.n	8008274 <__pow5mult+0xa0>
 80081f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80081fa:	b97c      	cbnz	r4, 800821c <__pow5mult+0x48>
 80081fc:	2010      	movs	r0, #16
 80081fe:	f7ff fe11 	bl	8007e24 <malloc>
 8008202:	4602      	mov	r2, r0
 8008204:	6270      	str	r0, [r6, #36]	; 0x24
 8008206:	b928      	cbnz	r0, 8008214 <__pow5mult+0x40>
 8008208:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800820c:	4b1c      	ldr	r3, [pc, #112]	; (8008280 <__pow5mult+0xac>)
 800820e:	481d      	ldr	r0, [pc, #116]	; (8008284 <__pow5mult+0xb0>)
 8008210:	f000 fc0a 	bl	8008a28 <__assert_func>
 8008214:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008218:	6004      	str	r4, [r0, #0]
 800821a:	60c4      	str	r4, [r0, #12]
 800821c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008220:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008224:	b94c      	cbnz	r4, 800823a <__pow5mult+0x66>
 8008226:	f240 2171 	movw	r1, #625	; 0x271
 800822a:	4630      	mov	r0, r6
 800822c:	f7ff ff14 	bl	8008058 <__i2b>
 8008230:	2300      	movs	r3, #0
 8008232:	4604      	mov	r4, r0
 8008234:	f8c8 0008 	str.w	r0, [r8, #8]
 8008238:	6003      	str	r3, [r0, #0]
 800823a:	f04f 0900 	mov.w	r9, #0
 800823e:	07eb      	lsls	r3, r5, #31
 8008240:	d50a      	bpl.n	8008258 <__pow5mult+0x84>
 8008242:	4639      	mov	r1, r7
 8008244:	4622      	mov	r2, r4
 8008246:	4630      	mov	r0, r6
 8008248:	f7ff ff1c 	bl	8008084 <__multiply>
 800824c:	4680      	mov	r8, r0
 800824e:	4639      	mov	r1, r7
 8008250:	4630      	mov	r0, r6
 8008252:	f7ff fe4b 	bl	8007eec <_Bfree>
 8008256:	4647      	mov	r7, r8
 8008258:	106d      	asrs	r5, r5, #1
 800825a:	d00b      	beq.n	8008274 <__pow5mult+0xa0>
 800825c:	6820      	ldr	r0, [r4, #0]
 800825e:	b938      	cbnz	r0, 8008270 <__pow5mult+0x9c>
 8008260:	4622      	mov	r2, r4
 8008262:	4621      	mov	r1, r4
 8008264:	4630      	mov	r0, r6
 8008266:	f7ff ff0d 	bl	8008084 <__multiply>
 800826a:	6020      	str	r0, [r4, #0]
 800826c:	f8c0 9000 	str.w	r9, [r0]
 8008270:	4604      	mov	r4, r0
 8008272:	e7e4      	b.n	800823e <__pow5mult+0x6a>
 8008274:	4638      	mov	r0, r7
 8008276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800827a:	bf00      	nop
 800827c:	080099f0 	.word	0x080099f0
 8008280:	0800981a 	.word	0x0800981a
 8008284:	0800989d 	.word	0x0800989d

08008288 <__lshift>:
 8008288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800828c:	460c      	mov	r4, r1
 800828e:	4607      	mov	r7, r0
 8008290:	4691      	mov	r9, r2
 8008292:	6923      	ldr	r3, [r4, #16]
 8008294:	6849      	ldr	r1, [r1, #4]
 8008296:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800829a:	68a3      	ldr	r3, [r4, #8]
 800829c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80082a0:	f108 0601 	add.w	r6, r8, #1
 80082a4:	42b3      	cmp	r3, r6
 80082a6:	db0b      	blt.n	80082c0 <__lshift+0x38>
 80082a8:	4638      	mov	r0, r7
 80082aa:	f7ff fddf 	bl	8007e6c <_Balloc>
 80082ae:	4605      	mov	r5, r0
 80082b0:	b948      	cbnz	r0, 80082c6 <__lshift+0x3e>
 80082b2:	4602      	mov	r2, r0
 80082b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80082b8:	4b29      	ldr	r3, [pc, #164]	; (8008360 <__lshift+0xd8>)
 80082ba:	482a      	ldr	r0, [pc, #168]	; (8008364 <__lshift+0xdc>)
 80082bc:	f000 fbb4 	bl	8008a28 <__assert_func>
 80082c0:	3101      	adds	r1, #1
 80082c2:	005b      	lsls	r3, r3, #1
 80082c4:	e7ee      	b.n	80082a4 <__lshift+0x1c>
 80082c6:	2300      	movs	r3, #0
 80082c8:	f100 0114 	add.w	r1, r0, #20
 80082cc:	f100 0210 	add.w	r2, r0, #16
 80082d0:	4618      	mov	r0, r3
 80082d2:	4553      	cmp	r3, sl
 80082d4:	db37      	blt.n	8008346 <__lshift+0xbe>
 80082d6:	6920      	ldr	r0, [r4, #16]
 80082d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80082dc:	f104 0314 	add.w	r3, r4, #20
 80082e0:	f019 091f 	ands.w	r9, r9, #31
 80082e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80082e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80082ec:	d02f      	beq.n	800834e <__lshift+0xc6>
 80082ee:	468a      	mov	sl, r1
 80082f0:	f04f 0c00 	mov.w	ip, #0
 80082f4:	f1c9 0e20 	rsb	lr, r9, #32
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	fa02 f209 	lsl.w	r2, r2, r9
 80082fe:	ea42 020c 	orr.w	r2, r2, ip
 8008302:	f84a 2b04 	str.w	r2, [sl], #4
 8008306:	f853 2b04 	ldr.w	r2, [r3], #4
 800830a:	4298      	cmp	r0, r3
 800830c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008310:	d8f2      	bhi.n	80082f8 <__lshift+0x70>
 8008312:	1b03      	subs	r3, r0, r4
 8008314:	3b15      	subs	r3, #21
 8008316:	f023 0303 	bic.w	r3, r3, #3
 800831a:	3304      	adds	r3, #4
 800831c:	f104 0215 	add.w	r2, r4, #21
 8008320:	4290      	cmp	r0, r2
 8008322:	bf38      	it	cc
 8008324:	2304      	movcc	r3, #4
 8008326:	f841 c003 	str.w	ip, [r1, r3]
 800832a:	f1bc 0f00 	cmp.w	ip, #0
 800832e:	d001      	beq.n	8008334 <__lshift+0xac>
 8008330:	f108 0602 	add.w	r6, r8, #2
 8008334:	3e01      	subs	r6, #1
 8008336:	4638      	mov	r0, r7
 8008338:	4621      	mov	r1, r4
 800833a:	612e      	str	r6, [r5, #16]
 800833c:	f7ff fdd6 	bl	8007eec <_Bfree>
 8008340:	4628      	mov	r0, r5
 8008342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008346:	f842 0f04 	str.w	r0, [r2, #4]!
 800834a:	3301      	adds	r3, #1
 800834c:	e7c1      	b.n	80082d2 <__lshift+0x4a>
 800834e:	3904      	subs	r1, #4
 8008350:	f853 2b04 	ldr.w	r2, [r3], #4
 8008354:	4298      	cmp	r0, r3
 8008356:	f841 2f04 	str.w	r2, [r1, #4]!
 800835a:	d8f9      	bhi.n	8008350 <__lshift+0xc8>
 800835c:	e7ea      	b.n	8008334 <__lshift+0xac>
 800835e:	bf00      	nop
 8008360:	0800988c 	.word	0x0800988c
 8008364:	0800989d 	.word	0x0800989d

08008368 <__mcmp>:
 8008368:	4603      	mov	r3, r0
 800836a:	690a      	ldr	r2, [r1, #16]
 800836c:	6900      	ldr	r0, [r0, #16]
 800836e:	b530      	push	{r4, r5, lr}
 8008370:	1a80      	subs	r0, r0, r2
 8008372:	d10d      	bne.n	8008390 <__mcmp+0x28>
 8008374:	3314      	adds	r3, #20
 8008376:	3114      	adds	r1, #20
 8008378:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800837c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008380:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008384:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008388:	4295      	cmp	r5, r2
 800838a:	d002      	beq.n	8008392 <__mcmp+0x2a>
 800838c:	d304      	bcc.n	8008398 <__mcmp+0x30>
 800838e:	2001      	movs	r0, #1
 8008390:	bd30      	pop	{r4, r5, pc}
 8008392:	42a3      	cmp	r3, r4
 8008394:	d3f4      	bcc.n	8008380 <__mcmp+0x18>
 8008396:	e7fb      	b.n	8008390 <__mcmp+0x28>
 8008398:	f04f 30ff 	mov.w	r0, #4294967295
 800839c:	e7f8      	b.n	8008390 <__mcmp+0x28>
	...

080083a0 <__mdiff>:
 80083a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a4:	460d      	mov	r5, r1
 80083a6:	4607      	mov	r7, r0
 80083a8:	4611      	mov	r1, r2
 80083aa:	4628      	mov	r0, r5
 80083ac:	4614      	mov	r4, r2
 80083ae:	f7ff ffdb 	bl	8008368 <__mcmp>
 80083b2:	1e06      	subs	r6, r0, #0
 80083b4:	d111      	bne.n	80083da <__mdiff+0x3a>
 80083b6:	4631      	mov	r1, r6
 80083b8:	4638      	mov	r0, r7
 80083ba:	f7ff fd57 	bl	8007e6c <_Balloc>
 80083be:	4602      	mov	r2, r0
 80083c0:	b928      	cbnz	r0, 80083ce <__mdiff+0x2e>
 80083c2:	f240 2132 	movw	r1, #562	; 0x232
 80083c6:	4b3a      	ldr	r3, [pc, #232]	; (80084b0 <__mdiff+0x110>)
 80083c8:	483a      	ldr	r0, [pc, #232]	; (80084b4 <__mdiff+0x114>)
 80083ca:	f000 fb2d 	bl	8008a28 <__assert_func>
 80083ce:	2301      	movs	r3, #1
 80083d0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80083d4:	4610      	mov	r0, r2
 80083d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083da:	bfa4      	itt	ge
 80083dc:	4623      	movge	r3, r4
 80083de:	462c      	movge	r4, r5
 80083e0:	4638      	mov	r0, r7
 80083e2:	6861      	ldr	r1, [r4, #4]
 80083e4:	bfa6      	itte	ge
 80083e6:	461d      	movge	r5, r3
 80083e8:	2600      	movge	r6, #0
 80083ea:	2601      	movlt	r6, #1
 80083ec:	f7ff fd3e 	bl	8007e6c <_Balloc>
 80083f0:	4602      	mov	r2, r0
 80083f2:	b918      	cbnz	r0, 80083fc <__mdiff+0x5c>
 80083f4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80083f8:	4b2d      	ldr	r3, [pc, #180]	; (80084b0 <__mdiff+0x110>)
 80083fa:	e7e5      	b.n	80083c8 <__mdiff+0x28>
 80083fc:	f102 0814 	add.w	r8, r2, #20
 8008400:	46c2      	mov	sl, r8
 8008402:	f04f 0c00 	mov.w	ip, #0
 8008406:	6927      	ldr	r7, [r4, #16]
 8008408:	60c6      	str	r6, [r0, #12]
 800840a:	692e      	ldr	r6, [r5, #16]
 800840c:	f104 0014 	add.w	r0, r4, #20
 8008410:	f105 0914 	add.w	r9, r5, #20
 8008414:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008418:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800841c:	3410      	adds	r4, #16
 800841e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008422:	f859 3b04 	ldr.w	r3, [r9], #4
 8008426:	fa1f f18b 	uxth.w	r1, fp
 800842a:	448c      	add	ip, r1
 800842c:	b299      	uxth	r1, r3
 800842e:	0c1b      	lsrs	r3, r3, #16
 8008430:	ebac 0101 	sub.w	r1, ip, r1
 8008434:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008438:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800843c:	b289      	uxth	r1, r1
 800843e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008442:	454e      	cmp	r6, r9
 8008444:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008448:	f84a 3b04 	str.w	r3, [sl], #4
 800844c:	d8e7      	bhi.n	800841e <__mdiff+0x7e>
 800844e:	1b73      	subs	r3, r6, r5
 8008450:	3b15      	subs	r3, #21
 8008452:	f023 0303 	bic.w	r3, r3, #3
 8008456:	3515      	adds	r5, #21
 8008458:	3304      	adds	r3, #4
 800845a:	42ae      	cmp	r6, r5
 800845c:	bf38      	it	cc
 800845e:	2304      	movcc	r3, #4
 8008460:	4418      	add	r0, r3
 8008462:	4443      	add	r3, r8
 8008464:	461e      	mov	r6, r3
 8008466:	4605      	mov	r5, r0
 8008468:	4575      	cmp	r5, lr
 800846a:	d30e      	bcc.n	800848a <__mdiff+0xea>
 800846c:	f10e 0103 	add.w	r1, lr, #3
 8008470:	1a09      	subs	r1, r1, r0
 8008472:	f021 0103 	bic.w	r1, r1, #3
 8008476:	3803      	subs	r0, #3
 8008478:	4586      	cmp	lr, r0
 800847a:	bf38      	it	cc
 800847c:	2100      	movcc	r1, #0
 800847e:	4419      	add	r1, r3
 8008480:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008484:	b18b      	cbz	r3, 80084aa <__mdiff+0x10a>
 8008486:	6117      	str	r7, [r2, #16]
 8008488:	e7a4      	b.n	80083d4 <__mdiff+0x34>
 800848a:	f855 8b04 	ldr.w	r8, [r5], #4
 800848e:	fa1f f188 	uxth.w	r1, r8
 8008492:	4461      	add	r1, ip
 8008494:	140c      	asrs	r4, r1, #16
 8008496:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800849a:	b289      	uxth	r1, r1
 800849c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80084a0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80084a4:	f846 1b04 	str.w	r1, [r6], #4
 80084a8:	e7de      	b.n	8008468 <__mdiff+0xc8>
 80084aa:	3f01      	subs	r7, #1
 80084ac:	e7e8      	b.n	8008480 <__mdiff+0xe0>
 80084ae:	bf00      	nop
 80084b0:	0800988c 	.word	0x0800988c
 80084b4:	0800989d 	.word	0x0800989d

080084b8 <__d2b>:
 80084b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80084bc:	2101      	movs	r1, #1
 80084be:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80084c2:	4690      	mov	r8, r2
 80084c4:	461d      	mov	r5, r3
 80084c6:	f7ff fcd1 	bl	8007e6c <_Balloc>
 80084ca:	4604      	mov	r4, r0
 80084cc:	b930      	cbnz	r0, 80084dc <__d2b+0x24>
 80084ce:	4602      	mov	r2, r0
 80084d0:	f240 310a 	movw	r1, #778	; 0x30a
 80084d4:	4b24      	ldr	r3, [pc, #144]	; (8008568 <__d2b+0xb0>)
 80084d6:	4825      	ldr	r0, [pc, #148]	; (800856c <__d2b+0xb4>)
 80084d8:	f000 faa6 	bl	8008a28 <__assert_func>
 80084dc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80084e0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80084e4:	bb2d      	cbnz	r5, 8008532 <__d2b+0x7a>
 80084e6:	9301      	str	r3, [sp, #4]
 80084e8:	f1b8 0300 	subs.w	r3, r8, #0
 80084ec:	d026      	beq.n	800853c <__d2b+0x84>
 80084ee:	4668      	mov	r0, sp
 80084f0:	9300      	str	r3, [sp, #0]
 80084f2:	f7ff fd83 	bl	8007ffc <__lo0bits>
 80084f6:	9900      	ldr	r1, [sp, #0]
 80084f8:	b1f0      	cbz	r0, 8008538 <__d2b+0x80>
 80084fa:	9a01      	ldr	r2, [sp, #4]
 80084fc:	f1c0 0320 	rsb	r3, r0, #32
 8008500:	fa02 f303 	lsl.w	r3, r2, r3
 8008504:	430b      	orrs	r3, r1
 8008506:	40c2      	lsrs	r2, r0
 8008508:	6163      	str	r3, [r4, #20]
 800850a:	9201      	str	r2, [sp, #4]
 800850c:	9b01      	ldr	r3, [sp, #4]
 800850e:	2b00      	cmp	r3, #0
 8008510:	bf14      	ite	ne
 8008512:	2102      	movne	r1, #2
 8008514:	2101      	moveq	r1, #1
 8008516:	61a3      	str	r3, [r4, #24]
 8008518:	6121      	str	r1, [r4, #16]
 800851a:	b1c5      	cbz	r5, 800854e <__d2b+0x96>
 800851c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008520:	4405      	add	r5, r0
 8008522:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008526:	603d      	str	r5, [r7, #0]
 8008528:	6030      	str	r0, [r6, #0]
 800852a:	4620      	mov	r0, r4
 800852c:	b002      	add	sp, #8
 800852e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008532:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008536:	e7d6      	b.n	80084e6 <__d2b+0x2e>
 8008538:	6161      	str	r1, [r4, #20]
 800853a:	e7e7      	b.n	800850c <__d2b+0x54>
 800853c:	a801      	add	r0, sp, #4
 800853e:	f7ff fd5d 	bl	8007ffc <__lo0bits>
 8008542:	2101      	movs	r1, #1
 8008544:	9b01      	ldr	r3, [sp, #4]
 8008546:	6121      	str	r1, [r4, #16]
 8008548:	6163      	str	r3, [r4, #20]
 800854a:	3020      	adds	r0, #32
 800854c:	e7e5      	b.n	800851a <__d2b+0x62>
 800854e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008552:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008556:	6038      	str	r0, [r7, #0]
 8008558:	6918      	ldr	r0, [r3, #16]
 800855a:	f7ff fd2f 	bl	8007fbc <__hi0bits>
 800855e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008562:	6031      	str	r1, [r6, #0]
 8008564:	e7e1      	b.n	800852a <__d2b+0x72>
 8008566:	bf00      	nop
 8008568:	0800988c 	.word	0x0800988c
 800856c:	0800989d 	.word	0x0800989d

08008570 <_calloc_r>:
 8008570:	b570      	push	{r4, r5, r6, lr}
 8008572:	fba1 5402 	umull	r5, r4, r1, r2
 8008576:	b934      	cbnz	r4, 8008586 <_calloc_r+0x16>
 8008578:	4629      	mov	r1, r5
 800857a:	f000 f875 	bl	8008668 <_malloc_r>
 800857e:	4606      	mov	r6, r0
 8008580:	b928      	cbnz	r0, 800858e <_calloc_r+0x1e>
 8008582:	4630      	mov	r0, r6
 8008584:	bd70      	pop	{r4, r5, r6, pc}
 8008586:	220c      	movs	r2, #12
 8008588:	2600      	movs	r6, #0
 800858a:	6002      	str	r2, [r0, #0]
 800858c:	e7f9      	b.n	8008582 <_calloc_r+0x12>
 800858e:	462a      	mov	r2, r5
 8008590:	4621      	mov	r1, r4
 8008592:	f7fe f881 	bl	8006698 <memset>
 8008596:	e7f4      	b.n	8008582 <_calloc_r+0x12>

08008598 <_free_r>:
 8008598:	b538      	push	{r3, r4, r5, lr}
 800859a:	4605      	mov	r5, r0
 800859c:	2900      	cmp	r1, #0
 800859e:	d040      	beq.n	8008622 <_free_r+0x8a>
 80085a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085a4:	1f0c      	subs	r4, r1, #4
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	bfb8      	it	lt
 80085aa:	18e4      	addlt	r4, r4, r3
 80085ac:	f000 fa98 	bl	8008ae0 <__malloc_lock>
 80085b0:	4a1c      	ldr	r2, [pc, #112]	; (8008624 <_free_r+0x8c>)
 80085b2:	6813      	ldr	r3, [r2, #0]
 80085b4:	b933      	cbnz	r3, 80085c4 <_free_r+0x2c>
 80085b6:	6063      	str	r3, [r4, #4]
 80085b8:	6014      	str	r4, [r2, #0]
 80085ba:	4628      	mov	r0, r5
 80085bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085c0:	f000 ba94 	b.w	8008aec <__malloc_unlock>
 80085c4:	42a3      	cmp	r3, r4
 80085c6:	d908      	bls.n	80085da <_free_r+0x42>
 80085c8:	6820      	ldr	r0, [r4, #0]
 80085ca:	1821      	adds	r1, r4, r0
 80085cc:	428b      	cmp	r3, r1
 80085ce:	bf01      	itttt	eq
 80085d0:	6819      	ldreq	r1, [r3, #0]
 80085d2:	685b      	ldreq	r3, [r3, #4]
 80085d4:	1809      	addeq	r1, r1, r0
 80085d6:	6021      	streq	r1, [r4, #0]
 80085d8:	e7ed      	b.n	80085b6 <_free_r+0x1e>
 80085da:	461a      	mov	r2, r3
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	b10b      	cbz	r3, 80085e4 <_free_r+0x4c>
 80085e0:	42a3      	cmp	r3, r4
 80085e2:	d9fa      	bls.n	80085da <_free_r+0x42>
 80085e4:	6811      	ldr	r1, [r2, #0]
 80085e6:	1850      	adds	r0, r2, r1
 80085e8:	42a0      	cmp	r0, r4
 80085ea:	d10b      	bne.n	8008604 <_free_r+0x6c>
 80085ec:	6820      	ldr	r0, [r4, #0]
 80085ee:	4401      	add	r1, r0
 80085f0:	1850      	adds	r0, r2, r1
 80085f2:	4283      	cmp	r3, r0
 80085f4:	6011      	str	r1, [r2, #0]
 80085f6:	d1e0      	bne.n	80085ba <_free_r+0x22>
 80085f8:	6818      	ldr	r0, [r3, #0]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	4401      	add	r1, r0
 80085fe:	6011      	str	r1, [r2, #0]
 8008600:	6053      	str	r3, [r2, #4]
 8008602:	e7da      	b.n	80085ba <_free_r+0x22>
 8008604:	d902      	bls.n	800860c <_free_r+0x74>
 8008606:	230c      	movs	r3, #12
 8008608:	602b      	str	r3, [r5, #0]
 800860a:	e7d6      	b.n	80085ba <_free_r+0x22>
 800860c:	6820      	ldr	r0, [r4, #0]
 800860e:	1821      	adds	r1, r4, r0
 8008610:	428b      	cmp	r3, r1
 8008612:	bf01      	itttt	eq
 8008614:	6819      	ldreq	r1, [r3, #0]
 8008616:	685b      	ldreq	r3, [r3, #4]
 8008618:	1809      	addeq	r1, r1, r0
 800861a:	6021      	streq	r1, [r4, #0]
 800861c:	6063      	str	r3, [r4, #4]
 800861e:	6054      	str	r4, [r2, #4]
 8008620:	e7cb      	b.n	80085ba <_free_r+0x22>
 8008622:	bd38      	pop	{r3, r4, r5, pc}
 8008624:	200004a8 	.word	0x200004a8

08008628 <sbrk_aligned>:
 8008628:	b570      	push	{r4, r5, r6, lr}
 800862a:	4e0e      	ldr	r6, [pc, #56]	; (8008664 <sbrk_aligned+0x3c>)
 800862c:	460c      	mov	r4, r1
 800862e:	6831      	ldr	r1, [r6, #0]
 8008630:	4605      	mov	r5, r0
 8008632:	b911      	cbnz	r1, 800863a <sbrk_aligned+0x12>
 8008634:	f000 f9e8 	bl	8008a08 <_sbrk_r>
 8008638:	6030      	str	r0, [r6, #0]
 800863a:	4621      	mov	r1, r4
 800863c:	4628      	mov	r0, r5
 800863e:	f000 f9e3 	bl	8008a08 <_sbrk_r>
 8008642:	1c43      	adds	r3, r0, #1
 8008644:	d00a      	beq.n	800865c <sbrk_aligned+0x34>
 8008646:	1cc4      	adds	r4, r0, #3
 8008648:	f024 0403 	bic.w	r4, r4, #3
 800864c:	42a0      	cmp	r0, r4
 800864e:	d007      	beq.n	8008660 <sbrk_aligned+0x38>
 8008650:	1a21      	subs	r1, r4, r0
 8008652:	4628      	mov	r0, r5
 8008654:	f000 f9d8 	bl	8008a08 <_sbrk_r>
 8008658:	3001      	adds	r0, #1
 800865a:	d101      	bne.n	8008660 <sbrk_aligned+0x38>
 800865c:	f04f 34ff 	mov.w	r4, #4294967295
 8008660:	4620      	mov	r0, r4
 8008662:	bd70      	pop	{r4, r5, r6, pc}
 8008664:	200004ac 	.word	0x200004ac

08008668 <_malloc_r>:
 8008668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800866c:	1ccd      	adds	r5, r1, #3
 800866e:	f025 0503 	bic.w	r5, r5, #3
 8008672:	3508      	adds	r5, #8
 8008674:	2d0c      	cmp	r5, #12
 8008676:	bf38      	it	cc
 8008678:	250c      	movcc	r5, #12
 800867a:	2d00      	cmp	r5, #0
 800867c:	4607      	mov	r7, r0
 800867e:	db01      	blt.n	8008684 <_malloc_r+0x1c>
 8008680:	42a9      	cmp	r1, r5
 8008682:	d905      	bls.n	8008690 <_malloc_r+0x28>
 8008684:	230c      	movs	r3, #12
 8008686:	2600      	movs	r6, #0
 8008688:	603b      	str	r3, [r7, #0]
 800868a:	4630      	mov	r0, r6
 800868c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008690:	4e2e      	ldr	r6, [pc, #184]	; (800874c <_malloc_r+0xe4>)
 8008692:	f000 fa25 	bl	8008ae0 <__malloc_lock>
 8008696:	6833      	ldr	r3, [r6, #0]
 8008698:	461c      	mov	r4, r3
 800869a:	bb34      	cbnz	r4, 80086ea <_malloc_r+0x82>
 800869c:	4629      	mov	r1, r5
 800869e:	4638      	mov	r0, r7
 80086a0:	f7ff ffc2 	bl	8008628 <sbrk_aligned>
 80086a4:	1c43      	adds	r3, r0, #1
 80086a6:	4604      	mov	r4, r0
 80086a8:	d14d      	bne.n	8008746 <_malloc_r+0xde>
 80086aa:	6834      	ldr	r4, [r6, #0]
 80086ac:	4626      	mov	r6, r4
 80086ae:	2e00      	cmp	r6, #0
 80086b0:	d140      	bne.n	8008734 <_malloc_r+0xcc>
 80086b2:	6823      	ldr	r3, [r4, #0]
 80086b4:	4631      	mov	r1, r6
 80086b6:	4638      	mov	r0, r7
 80086b8:	eb04 0803 	add.w	r8, r4, r3
 80086bc:	f000 f9a4 	bl	8008a08 <_sbrk_r>
 80086c0:	4580      	cmp	r8, r0
 80086c2:	d13a      	bne.n	800873a <_malloc_r+0xd2>
 80086c4:	6821      	ldr	r1, [r4, #0]
 80086c6:	3503      	adds	r5, #3
 80086c8:	1a6d      	subs	r5, r5, r1
 80086ca:	f025 0503 	bic.w	r5, r5, #3
 80086ce:	3508      	adds	r5, #8
 80086d0:	2d0c      	cmp	r5, #12
 80086d2:	bf38      	it	cc
 80086d4:	250c      	movcc	r5, #12
 80086d6:	4638      	mov	r0, r7
 80086d8:	4629      	mov	r1, r5
 80086da:	f7ff ffa5 	bl	8008628 <sbrk_aligned>
 80086de:	3001      	adds	r0, #1
 80086e0:	d02b      	beq.n	800873a <_malloc_r+0xd2>
 80086e2:	6823      	ldr	r3, [r4, #0]
 80086e4:	442b      	add	r3, r5
 80086e6:	6023      	str	r3, [r4, #0]
 80086e8:	e00e      	b.n	8008708 <_malloc_r+0xa0>
 80086ea:	6822      	ldr	r2, [r4, #0]
 80086ec:	1b52      	subs	r2, r2, r5
 80086ee:	d41e      	bmi.n	800872e <_malloc_r+0xc6>
 80086f0:	2a0b      	cmp	r2, #11
 80086f2:	d916      	bls.n	8008722 <_malloc_r+0xba>
 80086f4:	1961      	adds	r1, r4, r5
 80086f6:	42a3      	cmp	r3, r4
 80086f8:	6025      	str	r5, [r4, #0]
 80086fa:	bf18      	it	ne
 80086fc:	6059      	strne	r1, [r3, #4]
 80086fe:	6863      	ldr	r3, [r4, #4]
 8008700:	bf08      	it	eq
 8008702:	6031      	streq	r1, [r6, #0]
 8008704:	5162      	str	r2, [r4, r5]
 8008706:	604b      	str	r3, [r1, #4]
 8008708:	4638      	mov	r0, r7
 800870a:	f104 060b 	add.w	r6, r4, #11
 800870e:	f000 f9ed 	bl	8008aec <__malloc_unlock>
 8008712:	f026 0607 	bic.w	r6, r6, #7
 8008716:	1d23      	adds	r3, r4, #4
 8008718:	1af2      	subs	r2, r6, r3
 800871a:	d0b6      	beq.n	800868a <_malloc_r+0x22>
 800871c:	1b9b      	subs	r3, r3, r6
 800871e:	50a3      	str	r3, [r4, r2]
 8008720:	e7b3      	b.n	800868a <_malloc_r+0x22>
 8008722:	6862      	ldr	r2, [r4, #4]
 8008724:	42a3      	cmp	r3, r4
 8008726:	bf0c      	ite	eq
 8008728:	6032      	streq	r2, [r6, #0]
 800872a:	605a      	strne	r2, [r3, #4]
 800872c:	e7ec      	b.n	8008708 <_malloc_r+0xa0>
 800872e:	4623      	mov	r3, r4
 8008730:	6864      	ldr	r4, [r4, #4]
 8008732:	e7b2      	b.n	800869a <_malloc_r+0x32>
 8008734:	4634      	mov	r4, r6
 8008736:	6876      	ldr	r6, [r6, #4]
 8008738:	e7b9      	b.n	80086ae <_malloc_r+0x46>
 800873a:	230c      	movs	r3, #12
 800873c:	4638      	mov	r0, r7
 800873e:	603b      	str	r3, [r7, #0]
 8008740:	f000 f9d4 	bl	8008aec <__malloc_unlock>
 8008744:	e7a1      	b.n	800868a <_malloc_r+0x22>
 8008746:	6025      	str	r5, [r4, #0]
 8008748:	e7de      	b.n	8008708 <_malloc_r+0xa0>
 800874a:	bf00      	nop
 800874c:	200004a8 	.word	0x200004a8

08008750 <__ssputs_r>:
 8008750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008754:	688e      	ldr	r6, [r1, #8]
 8008756:	4682      	mov	sl, r0
 8008758:	429e      	cmp	r6, r3
 800875a:	460c      	mov	r4, r1
 800875c:	4690      	mov	r8, r2
 800875e:	461f      	mov	r7, r3
 8008760:	d838      	bhi.n	80087d4 <__ssputs_r+0x84>
 8008762:	898a      	ldrh	r2, [r1, #12]
 8008764:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008768:	d032      	beq.n	80087d0 <__ssputs_r+0x80>
 800876a:	6825      	ldr	r5, [r4, #0]
 800876c:	6909      	ldr	r1, [r1, #16]
 800876e:	3301      	adds	r3, #1
 8008770:	eba5 0901 	sub.w	r9, r5, r1
 8008774:	6965      	ldr	r5, [r4, #20]
 8008776:	444b      	add	r3, r9
 8008778:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800877c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008780:	106d      	asrs	r5, r5, #1
 8008782:	429d      	cmp	r5, r3
 8008784:	bf38      	it	cc
 8008786:	461d      	movcc	r5, r3
 8008788:	0553      	lsls	r3, r2, #21
 800878a:	d531      	bpl.n	80087f0 <__ssputs_r+0xa0>
 800878c:	4629      	mov	r1, r5
 800878e:	f7ff ff6b 	bl	8008668 <_malloc_r>
 8008792:	4606      	mov	r6, r0
 8008794:	b950      	cbnz	r0, 80087ac <__ssputs_r+0x5c>
 8008796:	230c      	movs	r3, #12
 8008798:	f04f 30ff 	mov.w	r0, #4294967295
 800879c:	f8ca 3000 	str.w	r3, [sl]
 80087a0:	89a3      	ldrh	r3, [r4, #12]
 80087a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087a6:	81a3      	strh	r3, [r4, #12]
 80087a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ac:	464a      	mov	r2, r9
 80087ae:	6921      	ldr	r1, [r4, #16]
 80087b0:	f7ff fb4e 	bl	8007e50 <memcpy>
 80087b4:	89a3      	ldrh	r3, [r4, #12]
 80087b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80087ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087be:	81a3      	strh	r3, [r4, #12]
 80087c0:	6126      	str	r6, [r4, #16]
 80087c2:	444e      	add	r6, r9
 80087c4:	6026      	str	r6, [r4, #0]
 80087c6:	463e      	mov	r6, r7
 80087c8:	6165      	str	r5, [r4, #20]
 80087ca:	eba5 0509 	sub.w	r5, r5, r9
 80087ce:	60a5      	str	r5, [r4, #8]
 80087d0:	42be      	cmp	r6, r7
 80087d2:	d900      	bls.n	80087d6 <__ssputs_r+0x86>
 80087d4:	463e      	mov	r6, r7
 80087d6:	4632      	mov	r2, r6
 80087d8:	4641      	mov	r1, r8
 80087da:	6820      	ldr	r0, [r4, #0]
 80087dc:	f000 f966 	bl	8008aac <memmove>
 80087e0:	68a3      	ldr	r3, [r4, #8]
 80087e2:	2000      	movs	r0, #0
 80087e4:	1b9b      	subs	r3, r3, r6
 80087e6:	60a3      	str	r3, [r4, #8]
 80087e8:	6823      	ldr	r3, [r4, #0]
 80087ea:	4433      	add	r3, r6
 80087ec:	6023      	str	r3, [r4, #0]
 80087ee:	e7db      	b.n	80087a8 <__ssputs_r+0x58>
 80087f0:	462a      	mov	r2, r5
 80087f2:	f000 f981 	bl	8008af8 <_realloc_r>
 80087f6:	4606      	mov	r6, r0
 80087f8:	2800      	cmp	r0, #0
 80087fa:	d1e1      	bne.n	80087c0 <__ssputs_r+0x70>
 80087fc:	4650      	mov	r0, sl
 80087fe:	6921      	ldr	r1, [r4, #16]
 8008800:	f7ff feca 	bl	8008598 <_free_r>
 8008804:	e7c7      	b.n	8008796 <__ssputs_r+0x46>
	...

08008808 <_svfiprintf_r>:
 8008808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800880c:	4698      	mov	r8, r3
 800880e:	898b      	ldrh	r3, [r1, #12]
 8008810:	4607      	mov	r7, r0
 8008812:	061b      	lsls	r3, r3, #24
 8008814:	460d      	mov	r5, r1
 8008816:	4614      	mov	r4, r2
 8008818:	b09d      	sub	sp, #116	; 0x74
 800881a:	d50e      	bpl.n	800883a <_svfiprintf_r+0x32>
 800881c:	690b      	ldr	r3, [r1, #16]
 800881e:	b963      	cbnz	r3, 800883a <_svfiprintf_r+0x32>
 8008820:	2140      	movs	r1, #64	; 0x40
 8008822:	f7ff ff21 	bl	8008668 <_malloc_r>
 8008826:	6028      	str	r0, [r5, #0]
 8008828:	6128      	str	r0, [r5, #16]
 800882a:	b920      	cbnz	r0, 8008836 <_svfiprintf_r+0x2e>
 800882c:	230c      	movs	r3, #12
 800882e:	603b      	str	r3, [r7, #0]
 8008830:	f04f 30ff 	mov.w	r0, #4294967295
 8008834:	e0d1      	b.n	80089da <_svfiprintf_r+0x1d2>
 8008836:	2340      	movs	r3, #64	; 0x40
 8008838:	616b      	str	r3, [r5, #20]
 800883a:	2300      	movs	r3, #0
 800883c:	9309      	str	r3, [sp, #36]	; 0x24
 800883e:	2320      	movs	r3, #32
 8008840:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008844:	2330      	movs	r3, #48	; 0x30
 8008846:	f04f 0901 	mov.w	r9, #1
 800884a:	f8cd 800c 	str.w	r8, [sp, #12]
 800884e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80089f4 <_svfiprintf_r+0x1ec>
 8008852:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008856:	4623      	mov	r3, r4
 8008858:	469a      	mov	sl, r3
 800885a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800885e:	b10a      	cbz	r2, 8008864 <_svfiprintf_r+0x5c>
 8008860:	2a25      	cmp	r2, #37	; 0x25
 8008862:	d1f9      	bne.n	8008858 <_svfiprintf_r+0x50>
 8008864:	ebba 0b04 	subs.w	fp, sl, r4
 8008868:	d00b      	beq.n	8008882 <_svfiprintf_r+0x7a>
 800886a:	465b      	mov	r3, fp
 800886c:	4622      	mov	r2, r4
 800886e:	4629      	mov	r1, r5
 8008870:	4638      	mov	r0, r7
 8008872:	f7ff ff6d 	bl	8008750 <__ssputs_r>
 8008876:	3001      	adds	r0, #1
 8008878:	f000 80aa 	beq.w	80089d0 <_svfiprintf_r+0x1c8>
 800887c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800887e:	445a      	add	r2, fp
 8008880:	9209      	str	r2, [sp, #36]	; 0x24
 8008882:	f89a 3000 	ldrb.w	r3, [sl]
 8008886:	2b00      	cmp	r3, #0
 8008888:	f000 80a2 	beq.w	80089d0 <_svfiprintf_r+0x1c8>
 800888c:	2300      	movs	r3, #0
 800888e:	f04f 32ff 	mov.w	r2, #4294967295
 8008892:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008896:	f10a 0a01 	add.w	sl, sl, #1
 800889a:	9304      	str	r3, [sp, #16]
 800889c:	9307      	str	r3, [sp, #28]
 800889e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088a2:	931a      	str	r3, [sp, #104]	; 0x68
 80088a4:	4654      	mov	r4, sl
 80088a6:	2205      	movs	r2, #5
 80088a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ac:	4851      	ldr	r0, [pc, #324]	; (80089f4 <_svfiprintf_r+0x1ec>)
 80088ae:	f7ff fac1 	bl	8007e34 <memchr>
 80088b2:	9a04      	ldr	r2, [sp, #16]
 80088b4:	b9d8      	cbnz	r0, 80088ee <_svfiprintf_r+0xe6>
 80088b6:	06d0      	lsls	r0, r2, #27
 80088b8:	bf44      	itt	mi
 80088ba:	2320      	movmi	r3, #32
 80088bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088c0:	0711      	lsls	r1, r2, #28
 80088c2:	bf44      	itt	mi
 80088c4:	232b      	movmi	r3, #43	; 0x2b
 80088c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088ca:	f89a 3000 	ldrb.w	r3, [sl]
 80088ce:	2b2a      	cmp	r3, #42	; 0x2a
 80088d0:	d015      	beq.n	80088fe <_svfiprintf_r+0xf6>
 80088d2:	4654      	mov	r4, sl
 80088d4:	2000      	movs	r0, #0
 80088d6:	f04f 0c0a 	mov.w	ip, #10
 80088da:	9a07      	ldr	r2, [sp, #28]
 80088dc:	4621      	mov	r1, r4
 80088de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088e2:	3b30      	subs	r3, #48	; 0x30
 80088e4:	2b09      	cmp	r3, #9
 80088e6:	d94e      	bls.n	8008986 <_svfiprintf_r+0x17e>
 80088e8:	b1b0      	cbz	r0, 8008918 <_svfiprintf_r+0x110>
 80088ea:	9207      	str	r2, [sp, #28]
 80088ec:	e014      	b.n	8008918 <_svfiprintf_r+0x110>
 80088ee:	eba0 0308 	sub.w	r3, r0, r8
 80088f2:	fa09 f303 	lsl.w	r3, r9, r3
 80088f6:	4313      	orrs	r3, r2
 80088f8:	46a2      	mov	sl, r4
 80088fa:	9304      	str	r3, [sp, #16]
 80088fc:	e7d2      	b.n	80088a4 <_svfiprintf_r+0x9c>
 80088fe:	9b03      	ldr	r3, [sp, #12]
 8008900:	1d19      	adds	r1, r3, #4
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	9103      	str	r1, [sp, #12]
 8008906:	2b00      	cmp	r3, #0
 8008908:	bfbb      	ittet	lt
 800890a:	425b      	neglt	r3, r3
 800890c:	f042 0202 	orrlt.w	r2, r2, #2
 8008910:	9307      	strge	r3, [sp, #28]
 8008912:	9307      	strlt	r3, [sp, #28]
 8008914:	bfb8      	it	lt
 8008916:	9204      	strlt	r2, [sp, #16]
 8008918:	7823      	ldrb	r3, [r4, #0]
 800891a:	2b2e      	cmp	r3, #46	; 0x2e
 800891c:	d10c      	bne.n	8008938 <_svfiprintf_r+0x130>
 800891e:	7863      	ldrb	r3, [r4, #1]
 8008920:	2b2a      	cmp	r3, #42	; 0x2a
 8008922:	d135      	bne.n	8008990 <_svfiprintf_r+0x188>
 8008924:	9b03      	ldr	r3, [sp, #12]
 8008926:	3402      	adds	r4, #2
 8008928:	1d1a      	adds	r2, r3, #4
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	9203      	str	r2, [sp, #12]
 800892e:	2b00      	cmp	r3, #0
 8008930:	bfb8      	it	lt
 8008932:	f04f 33ff 	movlt.w	r3, #4294967295
 8008936:	9305      	str	r3, [sp, #20]
 8008938:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80089f8 <_svfiprintf_r+0x1f0>
 800893c:	2203      	movs	r2, #3
 800893e:	4650      	mov	r0, sl
 8008940:	7821      	ldrb	r1, [r4, #0]
 8008942:	f7ff fa77 	bl	8007e34 <memchr>
 8008946:	b140      	cbz	r0, 800895a <_svfiprintf_r+0x152>
 8008948:	2340      	movs	r3, #64	; 0x40
 800894a:	eba0 000a 	sub.w	r0, r0, sl
 800894e:	fa03 f000 	lsl.w	r0, r3, r0
 8008952:	9b04      	ldr	r3, [sp, #16]
 8008954:	3401      	adds	r4, #1
 8008956:	4303      	orrs	r3, r0
 8008958:	9304      	str	r3, [sp, #16]
 800895a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800895e:	2206      	movs	r2, #6
 8008960:	4826      	ldr	r0, [pc, #152]	; (80089fc <_svfiprintf_r+0x1f4>)
 8008962:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008966:	f7ff fa65 	bl	8007e34 <memchr>
 800896a:	2800      	cmp	r0, #0
 800896c:	d038      	beq.n	80089e0 <_svfiprintf_r+0x1d8>
 800896e:	4b24      	ldr	r3, [pc, #144]	; (8008a00 <_svfiprintf_r+0x1f8>)
 8008970:	bb1b      	cbnz	r3, 80089ba <_svfiprintf_r+0x1b2>
 8008972:	9b03      	ldr	r3, [sp, #12]
 8008974:	3307      	adds	r3, #7
 8008976:	f023 0307 	bic.w	r3, r3, #7
 800897a:	3308      	adds	r3, #8
 800897c:	9303      	str	r3, [sp, #12]
 800897e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008980:	4433      	add	r3, r6
 8008982:	9309      	str	r3, [sp, #36]	; 0x24
 8008984:	e767      	b.n	8008856 <_svfiprintf_r+0x4e>
 8008986:	460c      	mov	r4, r1
 8008988:	2001      	movs	r0, #1
 800898a:	fb0c 3202 	mla	r2, ip, r2, r3
 800898e:	e7a5      	b.n	80088dc <_svfiprintf_r+0xd4>
 8008990:	2300      	movs	r3, #0
 8008992:	f04f 0c0a 	mov.w	ip, #10
 8008996:	4619      	mov	r1, r3
 8008998:	3401      	adds	r4, #1
 800899a:	9305      	str	r3, [sp, #20]
 800899c:	4620      	mov	r0, r4
 800899e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089a2:	3a30      	subs	r2, #48	; 0x30
 80089a4:	2a09      	cmp	r2, #9
 80089a6:	d903      	bls.n	80089b0 <_svfiprintf_r+0x1a8>
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d0c5      	beq.n	8008938 <_svfiprintf_r+0x130>
 80089ac:	9105      	str	r1, [sp, #20]
 80089ae:	e7c3      	b.n	8008938 <_svfiprintf_r+0x130>
 80089b0:	4604      	mov	r4, r0
 80089b2:	2301      	movs	r3, #1
 80089b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80089b8:	e7f0      	b.n	800899c <_svfiprintf_r+0x194>
 80089ba:	ab03      	add	r3, sp, #12
 80089bc:	9300      	str	r3, [sp, #0]
 80089be:	462a      	mov	r2, r5
 80089c0:	4638      	mov	r0, r7
 80089c2:	4b10      	ldr	r3, [pc, #64]	; (8008a04 <_svfiprintf_r+0x1fc>)
 80089c4:	a904      	add	r1, sp, #16
 80089c6:	f7fd ff0d 	bl	80067e4 <_printf_float>
 80089ca:	1c42      	adds	r2, r0, #1
 80089cc:	4606      	mov	r6, r0
 80089ce:	d1d6      	bne.n	800897e <_svfiprintf_r+0x176>
 80089d0:	89ab      	ldrh	r3, [r5, #12]
 80089d2:	065b      	lsls	r3, r3, #25
 80089d4:	f53f af2c 	bmi.w	8008830 <_svfiprintf_r+0x28>
 80089d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089da:	b01d      	add	sp, #116	; 0x74
 80089dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e0:	ab03      	add	r3, sp, #12
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	462a      	mov	r2, r5
 80089e6:	4638      	mov	r0, r7
 80089e8:	4b06      	ldr	r3, [pc, #24]	; (8008a04 <_svfiprintf_r+0x1fc>)
 80089ea:	a904      	add	r1, sp, #16
 80089ec:	f7fe f996 	bl	8006d1c <_printf_i>
 80089f0:	e7eb      	b.n	80089ca <_svfiprintf_r+0x1c2>
 80089f2:	bf00      	nop
 80089f4:	080099fc 	.word	0x080099fc
 80089f8:	08009a02 	.word	0x08009a02
 80089fc:	08009a06 	.word	0x08009a06
 8008a00:	080067e5 	.word	0x080067e5
 8008a04:	08008751 	.word	0x08008751

08008a08 <_sbrk_r>:
 8008a08:	b538      	push	{r3, r4, r5, lr}
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	4d05      	ldr	r5, [pc, #20]	; (8008a24 <_sbrk_r+0x1c>)
 8008a0e:	4604      	mov	r4, r0
 8008a10:	4608      	mov	r0, r1
 8008a12:	602b      	str	r3, [r5, #0]
 8008a14:	f7f9 ffb6 	bl	8002984 <_sbrk>
 8008a18:	1c43      	adds	r3, r0, #1
 8008a1a:	d102      	bne.n	8008a22 <_sbrk_r+0x1a>
 8008a1c:	682b      	ldr	r3, [r5, #0]
 8008a1e:	b103      	cbz	r3, 8008a22 <_sbrk_r+0x1a>
 8008a20:	6023      	str	r3, [r4, #0]
 8008a22:	bd38      	pop	{r3, r4, r5, pc}
 8008a24:	200004b0 	.word	0x200004b0

08008a28 <__assert_func>:
 8008a28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a2a:	4614      	mov	r4, r2
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	4b09      	ldr	r3, [pc, #36]	; (8008a54 <__assert_func+0x2c>)
 8008a30:	4605      	mov	r5, r0
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	68d8      	ldr	r0, [r3, #12]
 8008a36:	b14c      	cbz	r4, 8008a4c <__assert_func+0x24>
 8008a38:	4b07      	ldr	r3, [pc, #28]	; (8008a58 <__assert_func+0x30>)
 8008a3a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a3e:	9100      	str	r1, [sp, #0]
 8008a40:	462b      	mov	r3, r5
 8008a42:	4906      	ldr	r1, [pc, #24]	; (8008a5c <__assert_func+0x34>)
 8008a44:	f000 f80e 	bl	8008a64 <fiprintf>
 8008a48:	f000 faaa 	bl	8008fa0 <abort>
 8008a4c:	4b04      	ldr	r3, [pc, #16]	; (8008a60 <__assert_func+0x38>)
 8008a4e:	461c      	mov	r4, r3
 8008a50:	e7f3      	b.n	8008a3a <__assert_func+0x12>
 8008a52:	bf00      	nop
 8008a54:	20000040 	.word	0x20000040
 8008a58:	08009a0d 	.word	0x08009a0d
 8008a5c:	08009a1a 	.word	0x08009a1a
 8008a60:	08009a48 	.word	0x08009a48

08008a64 <fiprintf>:
 8008a64:	b40e      	push	{r1, r2, r3}
 8008a66:	b503      	push	{r0, r1, lr}
 8008a68:	4601      	mov	r1, r0
 8008a6a:	ab03      	add	r3, sp, #12
 8008a6c:	4805      	ldr	r0, [pc, #20]	; (8008a84 <fiprintf+0x20>)
 8008a6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a72:	6800      	ldr	r0, [r0, #0]
 8008a74:	9301      	str	r3, [sp, #4]
 8008a76:	f000 f895 	bl	8008ba4 <_vfiprintf_r>
 8008a7a:	b002      	add	sp, #8
 8008a7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a80:	b003      	add	sp, #12
 8008a82:	4770      	bx	lr
 8008a84:	20000040 	.word	0x20000040

08008a88 <__ascii_mbtowc>:
 8008a88:	b082      	sub	sp, #8
 8008a8a:	b901      	cbnz	r1, 8008a8e <__ascii_mbtowc+0x6>
 8008a8c:	a901      	add	r1, sp, #4
 8008a8e:	b142      	cbz	r2, 8008aa2 <__ascii_mbtowc+0x1a>
 8008a90:	b14b      	cbz	r3, 8008aa6 <__ascii_mbtowc+0x1e>
 8008a92:	7813      	ldrb	r3, [r2, #0]
 8008a94:	600b      	str	r3, [r1, #0]
 8008a96:	7812      	ldrb	r2, [r2, #0]
 8008a98:	1e10      	subs	r0, r2, #0
 8008a9a:	bf18      	it	ne
 8008a9c:	2001      	movne	r0, #1
 8008a9e:	b002      	add	sp, #8
 8008aa0:	4770      	bx	lr
 8008aa2:	4610      	mov	r0, r2
 8008aa4:	e7fb      	b.n	8008a9e <__ascii_mbtowc+0x16>
 8008aa6:	f06f 0001 	mvn.w	r0, #1
 8008aaa:	e7f8      	b.n	8008a9e <__ascii_mbtowc+0x16>

08008aac <memmove>:
 8008aac:	4288      	cmp	r0, r1
 8008aae:	b510      	push	{r4, lr}
 8008ab0:	eb01 0402 	add.w	r4, r1, r2
 8008ab4:	d902      	bls.n	8008abc <memmove+0x10>
 8008ab6:	4284      	cmp	r4, r0
 8008ab8:	4623      	mov	r3, r4
 8008aba:	d807      	bhi.n	8008acc <memmove+0x20>
 8008abc:	1e43      	subs	r3, r0, #1
 8008abe:	42a1      	cmp	r1, r4
 8008ac0:	d008      	beq.n	8008ad4 <memmove+0x28>
 8008ac2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ac6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008aca:	e7f8      	b.n	8008abe <memmove+0x12>
 8008acc:	4601      	mov	r1, r0
 8008ace:	4402      	add	r2, r0
 8008ad0:	428a      	cmp	r2, r1
 8008ad2:	d100      	bne.n	8008ad6 <memmove+0x2a>
 8008ad4:	bd10      	pop	{r4, pc}
 8008ad6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ada:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ade:	e7f7      	b.n	8008ad0 <memmove+0x24>

08008ae0 <__malloc_lock>:
 8008ae0:	4801      	ldr	r0, [pc, #4]	; (8008ae8 <__malloc_lock+0x8>)
 8008ae2:	f000 bc19 	b.w	8009318 <__retarget_lock_acquire_recursive>
 8008ae6:	bf00      	nop
 8008ae8:	200004b4 	.word	0x200004b4

08008aec <__malloc_unlock>:
 8008aec:	4801      	ldr	r0, [pc, #4]	; (8008af4 <__malloc_unlock+0x8>)
 8008aee:	f000 bc14 	b.w	800931a <__retarget_lock_release_recursive>
 8008af2:	bf00      	nop
 8008af4:	200004b4 	.word	0x200004b4

08008af8 <_realloc_r>:
 8008af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008afc:	4680      	mov	r8, r0
 8008afe:	4614      	mov	r4, r2
 8008b00:	460e      	mov	r6, r1
 8008b02:	b921      	cbnz	r1, 8008b0e <_realloc_r+0x16>
 8008b04:	4611      	mov	r1, r2
 8008b06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b0a:	f7ff bdad 	b.w	8008668 <_malloc_r>
 8008b0e:	b92a      	cbnz	r2, 8008b1c <_realloc_r+0x24>
 8008b10:	f7ff fd42 	bl	8008598 <_free_r>
 8008b14:	4625      	mov	r5, r4
 8008b16:	4628      	mov	r0, r5
 8008b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b1c:	f000 fc64 	bl	80093e8 <_malloc_usable_size_r>
 8008b20:	4284      	cmp	r4, r0
 8008b22:	4607      	mov	r7, r0
 8008b24:	d802      	bhi.n	8008b2c <_realloc_r+0x34>
 8008b26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b2a:	d812      	bhi.n	8008b52 <_realloc_r+0x5a>
 8008b2c:	4621      	mov	r1, r4
 8008b2e:	4640      	mov	r0, r8
 8008b30:	f7ff fd9a 	bl	8008668 <_malloc_r>
 8008b34:	4605      	mov	r5, r0
 8008b36:	2800      	cmp	r0, #0
 8008b38:	d0ed      	beq.n	8008b16 <_realloc_r+0x1e>
 8008b3a:	42bc      	cmp	r4, r7
 8008b3c:	4622      	mov	r2, r4
 8008b3e:	4631      	mov	r1, r6
 8008b40:	bf28      	it	cs
 8008b42:	463a      	movcs	r2, r7
 8008b44:	f7ff f984 	bl	8007e50 <memcpy>
 8008b48:	4631      	mov	r1, r6
 8008b4a:	4640      	mov	r0, r8
 8008b4c:	f7ff fd24 	bl	8008598 <_free_r>
 8008b50:	e7e1      	b.n	8008b16 <_realloc_r+0x1e>
 8008b52:	4635      	mov	r5, r6
 8008b54:	e7df      	b.n	8008b16 <_realloc_r+0x1e>

08008b56 <__sfputc_r>:
 8008b56:	6893      	ldr	r3, [r2, #8]
 8008b58:	b410      	push	{r4}
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	6093      	str	r3, [r2, #8]
 8008b60:	da07      	bge.n	8008b72 <__sfputc_r+0x1c>
 8008b62:	6994      	ldr	r4, [r2, #24]
 8008b64:	42a3      	cmp	r3, r4
 8008b66:	db01      	blt.n	8008b6c <__sfputc_r+0x16>
 8008b68:	290a      	cmp	r1, #10
 8008b6a:	d102      	bne.n	8008b72 <__sfputc_r+0x1c>
 8008b6c:	bc10      	pop	{r4}
 8008b6e:	f000 b949 	b.w	8008e04 <__swbuf_r>
 8008b72:	6813      	ldr	r3, [r2, #0]
 8008b74:	1c58      	adds	r0, r3, #1
 8008b76:	6010      	str	r0, [r2, #0]
 8008b78:	7019      	strb	r1, [r3, #0]
 8008b7a:	4608      	mov	r0, r1
 8008b7c:	bc10      	pop	{r4}
 8008b7e:	4770      	bx	lr

08008b80 <__sfputs_r>:
 8008b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b82:	4606      	mov	r6, r0
 8008b84:	460f      	mov	r7, r1
 8008b86:	4614      	mov	r4, r2
 8008b88:	18d5      	adds	r5, r2, r3
 8008b8a:	42ac      	cmp	r4, r5
 8008b8c:	d101      	bne.n	8008b92 <__sfputs_r+0x12>
 8008b8e:	2000      	movs	r0, #0
 8008b90:	e007      	b.n	8008ba2 <__sfputs_r+0x22>
 8008b92:	463a      	mov	r2, r7
 8008b94:	4630      	mov	r0, r6
 8008b96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b9a:	f7ff ffdc 	bl	8008b56 <__sfputc_r>
 8008b9e:	1c43      	adds	r3, r0, #1
 8008ba0:	d1f3      	bne.n	8008b8a <__sfputs_r+0xa>
 8008ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ba4 <_vfiprintf_r>:
 8008ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba8:	460d      	mov	r5, r1
 8008baa:	4614      	mov	r4, r2
 8008bac:	4698      	mov	r8, r3
 8008bae:	4606      	mov	r6, r0
 8008bb0:	b09d      	sub	sp, #116	; 0x74
 8008bb2:	b118      	cbz	r0, 8008bbc <_vfiprintf_r+0x18>
 8008bb4:	6983      	ldr	r3, [r0, #24]
 8008bb6:	b90b      	cbnz	r3, 8008bbc <_vfiprintf_r+0x18>
 8008bb8:	f000 fb10 	bl	80091dc <__sinit>
 8008bbc:	4b89      	ldr	r3, [pc, #548]	; (8008de4 <_vfiprintf_r+0x240>)
 8008bbe:	429d      	cmp	r5, r3
 8008bc0:	d11b      	bne.n	8008bfa <_vfiprintf_r+0x56>
 8008bc2:	6875      	ldr	r5, [r6, #4]
 8008bc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bc6:	07d9      	lsls	r1, r3, #31
 8008bc8:	d405      	bmi.n	8008bd6 <_vfiprintf_r+0x32>
 8008bca:	89ab      	ldrh	r3, [r5, #12]
 8008bcc:	059a      	lsls	r2, r3, #22
 8008bce:	d402      	bmi.n	8008bd6 <_vfiprintf_r+0x32>
 8008bd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bd2:	f000 fba1 	bl	8009318 <__retarget_lock_acquire_recursive>
 8008bd6:	89ab      	ldrh	r3, [r5, #12]
 8008bd8:	071b      	lsls	r3, r3, #28
 8008bda:	d501      	bpl.n	8008be0 <_vfiprintf_r+0x3c>
 8008bdc:	692b      	ldr	r3, [r5, #16]
 8008bde:	b9eb      	cbnz	r3, 8008c1c <_vfiprintf_r+0x78>
 8008be0:	4629      	mov	r1, r5
 8008be2:	4630      	mov	r0, r6
 8008be4:	f000 f96e 	bl	8008ec4 <__swsetup_r>
 8008be8:	b1c0      	cbz	r0, 8008c1c <_vfiprintf_r+0x78>
 8008bea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bec:	07dc      	lsls	r4, r3, #31
 8008bee:	d50e      	bpl.n	8008c0e <_vfiprintf_r+0x6a>
 8008bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf4:	b01d      	add	sp, #116	; 0x74
 8008bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bfa:	4b7b      	ldr	r3, [pc, #492]	; (8008de8 <_vfiprintf_r+0x244>)
 8008bfc:	429d      	cmp	r5, r3
 8008bfe:	d101      	bne.n	8008c04 <_vfiprintf_r+0x60>
 8008c00:	68b5      	ldr	r5, [r6, #8]
 8008c02:	e7df      	b.n	8008bc4 <_vfiprintf_r+0x20>
 8008c04:	4b79      	ldr	r3, [pc, #484]	; (8008dec <_vfiprintf_r+0x248>)
 8008c06:	429d      	cmp	r5, r3
 8008c08:	bf08      	it	eq
 8008c0a:	68f5      	ldreq	r5, [r6, #12]
 8008c0c:	e7da      	b.n	8008bc4 <_vfiprintf_r+0x20>
 8008c0e:	89ab      	ldrh	r3, [r5, #12]
 8008c10:	0598      	lsls	r0, r3, #22
 8008c12:	d4ed      	bmi.n	8008bf0 <_vfiprintf_r+0x4c>
 8008c14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c16:	f000 fb80 	bl	800931a <__retarget_lock_release_recursive>
 8008c1a:	e7e9      	b.n	8008bf0 <_vfiprintf_r+0x4c>
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c20:	2320      	movs	r3, #32
 8008c22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c26:	2330      	movs	r3, #48	; 0x30
 8008c28:	f04f 0901 	mov.w	r9, #1
 8008c2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c30:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008df0 <_vfiprintf_r+0x24c>
 8008c34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c38:	4623      	mov	r3, r4
 8008c3a:	469a      	mov	sl, r3
 8008c3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c40:	b10a      	cbz	r2, 8008c46 <_vfiprintf_r+0xa2>
 8008c42:	2a25      	cmp	r2, #37	; 0x25
 8008c44:	d1f9      	bne.n	8008c3a <_vfiprintf_r+0x96>
 8008c46:	ebba 0b04 	subs.w	fp, sl, r4
 8008c4a:	d00b      	beq.n	8008c64 <_vfiprintf_r+0xc0>
 8008c4c:	465b      	mov	r3, fp
 8008c4e:	4622      	mov	r2, r4
 8008c50:	4629      	mov	r1, r5
 8008c52:	4630      	mov	r0, r6
 8008c54:	f7ff ff94 	bl	8008b80 <__sfputs_r>
 8008c58:	3001      	adds	r0, #1
 8008c5a:	f000 80aa 	beq.w	8008db2 <_vfiprintf_r+0x20e>
 8008c5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c60:	445a      	add	r2, fp
 8008c62:	9209      	str	r2, [sp, #36]	; 0x24
 8008c64:	f89a 3000 	ldrb.w	r3, [sl]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f000 80a2 	beq.w	8008db2 <_vfiprintf_r+0x20e>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	f04f 32ff 	mov.w	r2, #4294967295
 8008c74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c78:	f10a 0a01 	add.w	sl, sl, #1
 8008c7c:	9304      	str	r3, [sp, #16]
 8008c7e:	9307      	str	r3, [sp, #28]
 8008c80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c84:	931a      	str	r3, [sp, #104]	; 0x68
 8008c86:	4654      	mov	r4, sl
 8008c88:	2205      	movs	r2, #5
 8008c8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c8e:	4858      	ldr	r0, [pc, #352]	; (8008df0 <_vfiprintf_r+0x24c>)
 8008c90:	f7ff f8d0 	bl	8007e34 <memchr>
 8008c94:	9a04      	ldr	r2, [sp, #16]
 8008c96:	b9d8      	cbnz	r0, 8008cd0 <_vfiprintf_r+0x12c>
 8008c98:	06d1      	lsls	r1, r2, #27
 8008c9a:	bf44      	itt	mi
 8008c9c:	2320      	movmi	r3, #32
 8008c9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ca2:	0713      	lsls	r3, r2, #28
 8008ca4:	bf44      	itt	mi
 8008ca6:	232b      	movmi	r3, #43	; 0x2b
 8008ca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cac:	f89a 3000 	ldrb.w	r3, [sl]
 8008cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8008cb2:	d015      	beq.n	8008ce0 <_vfiprintf_r+0x13c>
 8008cb4:	4654      	mov	r4, sl
 8008cb6:	2000      	movs	r0, #0
 8008cb8:	f04f 0c0a 	mov.w	ip, #10
 8008cbc:	9a07      	ldr	r2, [sp, #28]
 8008cbe:	4621      	mov	r1, r4
 8008cc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cc4:	3b30      	subs	r3, #48	; 0x30
 8008cc6:	2b09      	cmp	r3, #9
 8008cc8:	d94e      	bls.n	8008d68 <_vfiprintf_r+0x1c4>
 8008cca:	b1b0      	cbz	r0, 8008cfa <_vfiprintf_r+0x156>
 8008ccc:	9207      	str	r2, [sp, #28]
 8008cce:	e014      	b.n	8008cfa <_vfiprintf_r+0x156>
 8008cd0:	eba0 0308 	sub.w	r3, r0, r8
 8008cd4:	fa09 f303 	lsl.w	r3, r9, r3
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	46a2      	mov	sl, r4
 8008cdc:	9304      	str	r3, [sp, #16]
 8008cde:	e7d2      	b.n	8008c86 <_vfiprintf_r+0xe2>
 8008ce0:	9b03      	ldr	r3, [sp, #12]
 8008ce2:	1d19      	adds	r1, r3, #4
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	9103      	str	r1, [sp, #12]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	bfbb      	ittet	lt
 8008cec:	425b      	neglt	r3, r3
 8008cee:	f042 0202 	orrlt.w	r2, r2, #2
 8008cf2:	9307      	strge	r3, [sp, #28]
 8008cf4:	9307      	strlt	r3, [sp, #28]
 8008cf6:	bfb8      	it	lt
 8008cf8:	9204      	strlt	r2, [sp, #16]
 8008cfa:	7823      	ldrb	r3, [r4, #0]
 8008cfc:	2b2e      	cmp	r3, #46	; 0x2e
 8008cfe:	d10c      	bne.n	8008d1a <_vfiprintf_r+0x176>
 8008d00:	7863      	ldrb	r3, [r4, #1]
 8008d02:	2b2a      	cmp	r3, #42	; 0x2a
 8008d04:	d135      	bne.n	8008d72 <_vfiprintf_r+0x1ce>
 8008d06:	9b03      	ldr	r3, [sp, #12]
 8008d08:	3402      	adds	r4, #2
 8008d0a:	1d1a      	adds	r2, r3, #4
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	9203      	str	r2, [sp, #12]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	bfb8      	it	lt
 8008d14:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d18:	9305      	str	r3, [sp, #20]
 8008d1a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008df4 <_vfiprintf_r+0x250>
 8008d1e:	2203      	movs	r2, #3
 8008d20:	4650      	mov	r0, sl
 8008d22:	7821      	ldrb	r1, [r4, #0]
 8008d24:	f7ff f886 	bl	8007e34 <memchr>
 8008d28:	b140      	cbz	r0, 8008d3c <_vfiprintf_r+0x198>
 8008d2a:	2340      	movs	r3, #64	; 0x40
 8008d2c:	eba0 000a 	sub.w	r0, r0, sl
 8008d30:	fa03 f000 	lsl.w	r0, r3, r0
 8008d34:	9b04      	ldr	r3, [sp, #16]
 8008d36:	3401      	adds	r4, #1
 8008d38:	4303      	orrs	r3, r0
 8008d3a:	9304      	str	r3, [sp, #16]
 8008d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d40:	2206      	movs	r2, #6
 8008d42:	482d      	ldr	r0, [pc, #180]	; (8008df8 <_vfiprintf_r+0x254>)
 8008d44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d48:	f7ff f874 	bl	8007e34 <memchr>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	d03f      	beq.n	8008dd0 <_vfiprintf_r+0x22c>
 8008d50:	4b2a      	ldr	r3, [pc, #168]	; (8008dfc <_vfiprintf_r+0x258>)
 8008d52:	bb1b      	cbnz	r3, 8008d9c <_vfiprintf_r+0x1f8>
 8008d54:	9b03      	ldr	r3, [sp, #12]
 8008d56:	3307      	adds	r3, #7
 8008d58:	f023 0307 	bic.w	r3, r3, #7
 8008d5c:	3308      	adds	r3, #8
 8008d5e:	9303      	str	r3, [sp, #12]
 8008d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d62:	443b      	add	r3, r7
 8008d64:	9309      	str	r3, [sp, #36]	; 0x24
 8008d66:	e767      	b.n	8008c38 <_vfiprintf_r+0x94>
 8008d68:	460c      	mov	r4, r1
 8008d6a:	2001      	movs	r0, #1
 8008d6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d70:	e7a5      	b.n	8008cbe <_vfiprintf_r+0x11a>
 8008d72:	2300      	movs	r3, #0
 8008d74:	f04f 0c0a 	mov.w	ip, #10
 8008d78:	4619      	mov	r1, r3
 8008d7a:	3401      	adds	r4, #1
 8008d7c:	9305      	str	r3, [sp, #20]
 8008d7e:	4620      	mov	r0, r4
 8008d80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d84:	3a30      	subs	r2, #48	; 0x30
 8008d86:	2a09      	cmp	r2, #9
 8008d88:	d903      	bls.n	8008d92 <_vfiprintf_r+0x1ee>
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d0c5      	beq.n	8008d1a <_vfiprintf_r+0x176>
 8008d8e:	9105      	str	r1, [sp, #20]
 8008d90:	e7c3      	b.n	8008d1a <_vfiprintf_r+0x176>
 8008d92:	4604      	mov	r4, r0
 8008d94:	2301      	movs	r3, #1
 8008d96:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d9a:	e7f0      	b.n	8008d7e <_vfiprintf_r+0x1da>
 8008d9c:	ab03      	add	r3, sp, #12
 8008d9e:	9300      	str	r3, [sp, #0]
 8008da0:	462a      	mov	r2, r5
 8008da2:	4630      	mov	r0, r6
 8008da4:	4b16      	ldr	r3, [pc, #88]	; (8008e00 <_vfiprintf_r+0x25c>)
 8008da6:	a904      	add	r1, sp, #16
 8008da8:	f7fd fd1c 	bl	80067e4 <_printf_float>
 8008dac:	4607      	mov	r7, r0
 8008dae:	1c78      	adds	r0, r7, #1
 8008db0:	d1d6      	bne.n	8008d60 <_vfiprintf_r+0x1bc>
 8008db2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008db4:	07d9      	lsls	r1, r3, #31
 8008db6:	d405      	bmi.n	8008dc4 <_vfiprintf_r+0x220>
 8008db8:	89ab      	ldrh	r3, [r5, #12]
 8008dba:	059a      	lsls	r2, r3, #22
 8008dbc:	d402      	bmi.n	8008dc4 <_vfiprintf_r+0x220>
 8008dbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dc0:	f000 faab 	bl	800931a <__retarget_lock_release_recursive>
 8008dc4:	89ab      	ldrh	r3, [r5, #12]
 8008dc6:	065b      	lsls	r3, r3, #25
 8008dc8:	f53f af12 	bmi.w	8008bf0 <_vfiprintf_r+0x4c>
 8008dcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dce:	e711      	b.n	8008bf4 <_vfiprintf_r+0x50>
 8008dd0:	ab03      	add	r3, sp, #12
 8008dd2:	9300      	str	r3, [sp, #0]
 8008dd4:	462a      	mov	r2, r5
 8008dd6:	4630      	mov	r0, r6
 8008dd8:	4b09      	ldr	r3, [pc, #36]	; (8008e00 <_vfiprintf_r+0x25c>)
 8008dda:	a904      	add	r1, sp, #16
 8008ddc:	f7fd ff9e 	bl	8006d1c <_printf_i>
 8008de0:	e7e4      	b.n	8008dac <_vfiprintf_r+0x208>
 8008de2:	bf00      	nop
 8008de4:	08009a74 	.word	0x08009a74
 8008de8:	08009a94 	.word	0x08009a94
 8008dec:	08009a54 	.word	0x08009a54
 8008df0:	080099fc 	.word	0x080099fc
 8008df4:	08009a02 	.word	0x08009a02
 8008df8:	08009a06 	.word	0x08009a06
 8008dfc:	080067e5 	.word	0x080067e5
 8008e00:	08008b81 	.word	0x08008b81

08008e04 <__swbuf_r>:
 8008e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e06:	460e      	mov	r6, r1
 8008e08:	4614      	mov	r4, r2
 8008e0a:	4605      	mov	r5, r0
 8008e0c:	b118      	cbz	r0, 8008e16 <__swbuf_r+0x12>
 8008e0e:	6983      	ldr	r3, [r0, #24]
 8008e10:	b90b      	cbnz	r3, 8008e16 <__swbuf_r+0x12>
 8008e12:	f000 f9e3 	bl	80091dc <__sinit>
 8008e16:	4b21      	ldr	r3, [pc, #132]	; (8008e9c <__swbuf_r+0x98>)
 8008e18:	429c      	cmp	r4, r3
 8008e1a:	d12b      	bne.n	8008e74 <__swbuf_r+0x70>
 8008e1c:	686c      	ldr	r4, [r5, #4]
 8008e1e:	69a3      	ldr	r3, [r4, #24]
 8008e20:	60a3      	str	r3, [r4, #8]
 8008e22:	89a3      	ldrh	r3, [r4, #12]
 8008e24:	071a      	lsls	r2, r3, #28
 8008e26:	d52f      	bpl.n	8008e88 <__swbuf_r+0x84>
 8008e28:	6923      	ldr	r3, [r4, #16]
 8008e2a:	b36b      	cbz	r3, 8008e88 <__swbuf_r+0x84>
 8008e2c:	6923      	ldr	r3, [r4, #16]
 8008e2e:	6820      	ldr	r0, [r4, #0]
 8008e30:	b2f6      	uxtb	r6, r6
 8008e32:	1ac0      	subs	r0, r0, r3
 8008e34:	6963      	ldr	r3, [r4, #20]
 8008e36:	4637      	mov	r7, r6
 8008e38:	4283      	cmp	r3, r0
 8008e3a:	dc04      	bgt.n	8008e46 <__swbuf_r+0x42>
 8008e3c:	4621      	mov	r1, r4
 8008e3e:	4628      	mov	r0, r5
 8008e40:	f000 f938 	bl	80090b4 <_fflush_r>
 8008e44:	bb30      	cbnz	r0, 8008e94 <__swbuf_r+0x90>
 8008e46:	68a3      	ldr	r3, [r4, #8]
 8008e48:	3001      	adds	r0, #1
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	60a3      	str	r3, [r4, #8]
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	1c5a      	adds	r2, r3, #1
 8008e52:	6022      	str	r2, [r4, #0]
 8008e54:	701e      	strb	r6, [r3, #0]
 8008e56:	6963      	ldr	r3, [r4, #20]
 8008e58:	4283      	cmp	r3, r0
 8008e5a:	d004      	beq.n	8008e66 <__swbuf_r+0x62>
 8008e5c:	89a3      	ldrh	r3, [r4, #12]
 8008e5e:	07db      	lsls	r3, r3, #31
 8008e60:	d506      	bpl.n	8008e70 <__swbuf_r+0x6c>
 8008e62:	2e0a      	cmp	r6, #10
 8008e64:	d104      	bne.n	8008e70 <__swbuf_r+0x6c>
 8008e66:	4621      	mov	r1, r4
 8008e68:	4628      	mov	r0, r5
 8008e6a:	f000 f923 	bl	80090b4 <_fflush_r>
 8008e6e:	b988      	cbnz	r0, 8008e94 <__swbuf_r+0x90>
 8008e70:	4638      	mov	r0, r7
 8008e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e74:	4b0a      	ldr	r3, [pc, #40]	; (8008ea0 <__swbuf_r+0x9c>)
 8008e76:	429c      	cmp	r4, r3
 8008e78:	d101      	bne.n	8008e7e <__swbuf_r+0x7a>
 8008e7a:	68ac      	ldr	r4, [r5, #8]
 8008e7c:	e7cf      	b.n	8008e1e <__swbuf_r+0x1a>
 8008e7e:	4b09      	ldr	r3, [pc, #36]	; (8008ea4 <__swbuf_r+0xa0>)
 8008e80:	429c      	cmp	r4, r3
 8008e82:	bf08      	it	eq
 8008e84:	68ec      	ldreq	r4, [r5, #12]
 8008e86:	e7ca      	b.n	8008e1e <__swbuf_r+0x1a>
 8008e88:	4621      	mov	r1, r4
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	f000 f81a 	bl	8008ec4 <__swsetup_r>
 8008e90:	2800      	cmp	r0, #0
 8008e92:	d0cb      	beq.n	8008e2c <__swbuf_r+0x28>
 8008e94:	f04f 37ff 	mov.w	r7, #4294967295
 8008e98:	e7ea      	b.n	8008e70 <__swbuf_r+0x6c>
 8008e9a:	bf00      	nop
 8008e9c:	08009a74 	.word	0x08009a74
 8008ea0:	08009a94 	.word	0x08009a94
 8008ea4:	08009a54 	.word	0x08009a54

08008ea8 <__ascii_wctomb>:
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	4608      	mov	r0, r1
 8008eac:	b141      	cbz	r1, 8008ec0 <__ascii_wctomb+0x18>
 8008eae:	2aff      	cmp	r2, #255	; 0xff
 8008eb0:	d904      	bls.n	8008ebc <__ascii_wctomb+0x14>
 8008eb2:	228a      	movs	r2, #138	; 0x8a
 8008eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb8:	601a      	str	r2, [r3, #0]
 8008eba:	4770      	bx	lr
 8008ebc:	2001      	movs	r0, #1
 8008ebe:	700a      	strb	r2, [r1, #0]
 8008ec0:	4770      	bx	lr
	...

08008ec4 <__swsetup_r>:
 8008ec4:	4b32      	ldr	r3, [pc, #200]	; (8008f90 <__swsetup_r+0xcc>)
 8008ec6:	b570      	push	{r4, r5, r6, lr}
 8008ec8:	681d      	ldr	r5, [r3, #0]
 8008eca:	4606      	mov	r6, r0
 8008ecc:	460c      	mov	r4, r1
 8008ece:	b125      	cbz	r5, 8008eda <__swsetup_r+0x16>
 8008ed0:	69ab      	ldr	r3, [r5, #24]
 8008ed2:	b913      	cbnz	r3, 8008eda <__swsetup_r+0x16>
 8008ed4:	4628      	mov	r0, r5
 8008ed6:	f000 f981 	bl	80091dc <__sinit>
 8008eda:	4b2e      	ldr	r3, [pc, #184]	; (8008f94 <__swsetup_r+0xd0>)
 8008edc:	429c      	cmp	r4, r3
 8008ede:	d10f      	bne.n	8008f00 <__swsetup_r+0x3c>
 8008ee0:	686c      	ldr	r4, [r5, #4]
 8008ee2:	89a3      	ldrh	r3, [r4, #12]
 8008ee4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ee8:	0719      	lsls	r1, r3, #28
 8008eea:	d42c      	bmi.n	8008f46 <__swsetup_r+0x82>
 8008eec:	06dd      	lsls	r5, r3, #27
 8008eee:	d411      	bmi.n	8008f14 <__swsetup_r+0x50>
 8008ef0:	2309      	movs	r3, #9
 8008ef2:	6033      	str	r3, [r6, #0]
 8008ef4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8008efc:	81a3      	strh	r3, [r4, #12]
 8008efe:	e03e      	b.n	8008f7e <__swsetup_r+0xba>
 8008f00:	4b25      	ldr	r3, [pc, #148]	; (8008f98 <__swsetup_r+0xd4>)
 8008f02:	429c      	cmp	r4, r3
 8008f04:	d101      	bne.n	8008f0a <__swsetup_r+0x46>
 8008f06:	68ac      	ldr	r4, [r5, #8]
 8008f08:	e7eb      	b.n	8008ee2 <__swsetup_r+0x1e>
 8008f0a:	4b24      	ldr	r3, [pc, #144]	; (8008f9c <__swsetup_r+0xd8>)
 8008f0c:	429c      	cmp	r4, r3
 8008f0e:	bf08      	it	eq
 8008f10:	68ec      	ldreq	r4, [r5, #12]
 8008f12:	e7e6      	b.n	8008ee2 <__swsetup_r+0x1e>
 8008f14:	0758      	lsls	r0, r3, #29
 8008f16:	d512      	bpl.n	8008f3e <__swsetup_r+0x7a>
 8008f18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f1a:	b141      	cbz	r1, 8008f2e <__swsetup_r+0x6a>
 8008f1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f20:	4299      	cmp	r1, r3
 8008f22:	d002      	beq.n	8008f2a <__swsetup_r+0x66>
 8008f24:	4630      	mov	r0, r6
 8008f26:	f7ff fb37 	bl	8008598 <_free_r>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	6363      	str	r3, [r4, #52]	; 0x34
 8008f2e:	89a3      	ldrh	r3, [r4, #12]
 8008f30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f34:	81a3      	strh	r3, [r4, #12]
 8008f36:	2300      	movs	r3, #0
 8008f38:	6063      	str	r3, [r4, #4]
 8008f3a:	6923      	ldr	r3, [r4, #16]
 8008f3c:	6023      	str	r3, [r4, #0]
 8008f3e:	89a3      	ldrh	r3, [r4, #12]
 8008f40:	f043 0308 	orr.w	r3, r3, #8
 8008f44:	81a3      	strh	r3, [r4, #12]
 8008f46:	6923      	ldr	r3, [r4, #16]
 8008f48:	b94b      	cbnz	r3, 8008f5e <__swsetup_r+0x9a>
 8008f4a:	89a3      	ldrh	r3, [r4, #12]
 8008f4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f54:	d003      	beq.n	8008f5e <__swsetup_r+0x9a>
 8008f56:	4621      	mov	r1, r4
 8008f58:	4630      	mov	r0, r6
 8008f5a:	f000 fa05 	bl	8009368 <__smakebuf_r>
 8008f5e:	89a0      	ldrh	r0, [r4, #12]
 8008f60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f64:	f010 0301 	ands.w	r3, r0, #1
 8008f68:	d00a      	beq.n	8008f80 <__swsetup_r+0xbc>
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	60a3      	str	r3, [r4, #8]
 8008f6e:	6963      	ldr	r3, [r4, #20]
 8008f70:	425b      	negs	r3, r3
 8008f72:	61a3      	str	r3, [r4, #24]
 8008f74:	6923      	ldr	r3, [r4, #16]
 8008f76:	b943      	cbnz	r3, 8008f8a <__swsetup_r+0xc6>
 8008f78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f7c:	d1ba      	bne.n	8008ef4 <__swsetup_r+0x30>
 8008f7e:	bd70      	pop	{r4, r5, r6, pc}
 8008f80:	0781      	lsls	r1, r0, #30
 8008f82:	bf58      	it	pl
 8008f84:	6963      	ldrpl	r3, [r4, #20]
 8008f86:	60a3      	str	r3, [r4, #8]
 8008f88:	e7f4      	b.n	8008f74 <__swsetup_r+0xb0>
 8008f8a:	2000      	movs	r0, #0
 8008f8c:	e7f7      	b.n	8008f7e <__swsetup_r+0xba>
 8008f8e:	bf00      	nop
 8008f90:	20000040 	.word	0x20000040
 8008f94:	08009a74 	.word	0x08009a74
 8008f98:	08009a94 	.word	0x08009a94
 8008f9c:	08009a54 	.word	0x08009a54

08008fa0 <abort>:
 8008fa0:	2006      	movs	r0, #6
 8008fa2:	b508      	push	{r3, lr}
 8008fa4:	f000 fa50 	bl	8009448 <raise>
 8008fa8:	2001      	movs	r0, #1
 8008faa:	f7f9 fc78 	bl	800289e <_exit>
	...

08008fb0 <__sflush_r>:
 8008fb0:	898a      	ldrh	r2, [r1, #12]
 8008fb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb4:	4605      	mov	r5, r0
 8008fb6:	0710      	lsls	r0, r2, #28
 8008fb8:	460c      	mov	r4, r1
 8008fba:	d457      	bmi.n	800906c <__sflush_r+0xbc>
 8008fbc:	684b      	ldr	r3, [r1, #4]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	dc04      	bgt.n	8008fcc <__sflush_r+0x1c>
 8008fc2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	dc01      	bgt.n	8008fcc <__sflush_r+0x1c>
 8008fc8:	2000      	movs	r0, #0
 8008fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fce:	2e00      	cmp	r6, #0
 8008fd0:	d0fa      	beq.n	8008fc8 <__sflush_r+0x18>
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008fd8:	682f      	ldr	r7, [r5, #0]
 8008fda:	602b      	str	r3, [r5, #0]
 8008fdc:	d032      	beq.n	8009044 <__sflush_r+0x94>
 8008fde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008fe0:	89a3      	ldrh	r3, [r4, #12]
 8008fe2:	075a      	lsls	r2, r3, #29
 8008fe4:	d505      	bpl.n	8008ff2 <__sflush_r+0x42>
 8008fe6:	6863      	ldr	r3, [r4, #4]
 8008fe8:	1ac0      	subs	r0, r0, r3
 8008fea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008fec:	b10b      	cbz	r3, 8008ff2 <__sflush_r+0x42>
 8008fee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ff0:	1ac0      	subs	r0, r0, r3
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	6a21      	ldr	r1, [r4, #32]
 8008ffc:	47b0      	blx	r6
 8008ffe:	1c43      	adds	r3, r0, #1
 8009000:	89a3      	ldrh	r3, [r4, #12]
 8009002:	d106      	bne.n	8009012 <__sflush_r+0x62>
 8009004:	6829      	ldr	r1, [r5, #0]
 8009006:	291d      	cmp	r1, #29
 8009008:	d82c      	bhi.n	8009064 <__sflush_r+0xb4>
 800900a:	4a29      	ldr	r2, [pc, #164]	; (80090b0 <__sflush_r+0x100>)
 800900c:	40ca      	lsrs	r2, r1
 800900e:	07d6      	lsls	r6, r2, #31
 8009010:	d528      	bpl.n	8009064 <__sflush_r+0xb4>
 8009012:	2200      	movs	r2, #0
 8009014:	6062      	str	r2, [r4, #4]
 8009016:	6922      	ldr	r2, [r4, #16]
 8009018:	04d9      	lsls	r1, r3, #19
 800901a:	6022      	str	r2, [r4, #0]
 800901c:	d504      	bpl.n	8009028 <__sflush_r+0x78>
 800901e:	1c42      	adds	r2, r0, #1
 8009020:	d101      	bne.n	8009026 <__sflush_r+0x76>
 8009022:	682b      	ldr	r3, [r5, #0]
 8009024:	b903      	cbnz	r3, 8009028 <__sflush_r+0x78>
 8009026:	6560      	str	r0, [r4, #84]	; 0x54
 8009028:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800902a:	602f      	str	r7, [r5, #0]
 800902c:	2900      	cmp	r1, #0
 800902e:	d0cb      	beq.n	8008fc8 <__sflush_r+0x18>
 8009030:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009034:	4299      	cmp	r1, r3
 8009036:	d002      	beq.n	800903e <__sflush_r+0x8e>
 8009038:	4628      	mov	r0, r5
 800903a:	f7ff faad 	bl	8008598 <_free_r>
 800903e:	2000      	movs	r0, #0
 8009040:	6360      	str	r0, [r4, #52]	; 0x34
 8009042:	e7c2      	b.n	8008fca <__sflush_r+0x1a>
 8009044:	6a21      	ldr	r1, [r4, #32]
 8009046:	2301      	movs	r3, #1
 8009048:	4628      	mov	r0, r5
 800904a:	47b0      	blx	r6
 800904c:	1c41      	adds	r1, r0, #1
 800904e:	d1c7      	bne.n	8008fe0 <__sflush_r+0x30>
 8009050:	682b      	ldr	r3, [r5, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d0c4      	beq.n	8008fe0 <__sflush_r+0x30>
 8009056:	2b1d      	cmp	r3, #29
 8009058:	d001      	beq.n	800905e <__sflush_r+0xae>
 800905a:	2b16      	cmp	r3, #22
 800905c:	d101      	bne.n	8009062 <__sflush_r+0xb2>
 800905e:	602f      	str	r7, [r5, #0]
 8009060:	e7b2      	b.n	8008fc8 <__sflush_r+0x18>
 8009062:	89a3      	ldrh	r3, [r4, #12]
 8009064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009068:	81a3      	strh	r3, [r4, #12]
 800906a:	e7ae      	b.n	8008fca <__sflush_r+0x1a>
 800906c:	690f      	ldr	r7, [r1, #16]
 800906e:	2f00      	cmp	r7, #0
 8009070:	d0aa      	beq.n	8008fc8 <__sflush_r+0x18>
 8009072:	0793      	lsls	r3, r2, #30
 8009074:	bf18      	it	ne
 8009076:	2300      	movne	r3, #0
 8009078:	680e      	ldr	r6, [r1, #0]
 800907a:	bf08      	it	eq
 800907c:	694b      	ldreq	r3, [r1, #20]
 800907e:	1bf6      	subs	r6, r6, r7
 8009080:	600f      	str	r7, [r1, #0]
 8009082:	608b      	str	r3, [r1, #8]
 8009084:	2e00      	cmp	r6, #0
 8009086:	dd9f      	ble.n	8008fc8 <__sflush_r+0x18>
 8009088:	4633      	mov	r3, r6
 800908a:	463a      	mov	r2, r7
 800908c:	4628      	mov	r0, r5
 800908e:	6a21      	ldr	r1, [r4, #32]
 8009090:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009094:	47e0      	blx	ip
 8009096:	2800      	cmp	r0, #0
 8009098:	dc06      	bgt.n	80090a8 <__sflush_r+0xf8>
 800909a:	89a3      	ldrh	r3, [r4, #12]
 800909c:	f04f 30ff 	mov.w	r0, #4294967295
 80090a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090a4:	81a3      	strh	r3, [r4, #12]
 80090a6:	e790      	b.n	8008fca <__sflush_r+0x1a>
 80090a8:	4407      	add	r7, r0
 80090aa:	1a36      	subs	r6, r6, r0
 80090ac:	e7ea      	b.n	8009084 <__sflush_r+0xd4>
 80090ae:	bf00      	nop
 80090b0:	20400001 	.word	0x20400001

080090b4 <_fflush_r>:
 80090b4:	b538      	push	{r3, r4, r5, lr}
 80090b6:	690b      	ldr	r3, [r1, #16]
 80090b8:	4605      	mov	r5, r0
 80090ba:	460c      	mov	r4, r1
 80090bc:	b913      	cbnz	r3, 80090c4 <_fflush_r+0x10>
 80090be:	2500      	movs	r5, #0
 80090c0:	4628      	mov	r0, r5
 80090c2:	bd38      	pop	{r3, r4, r5, pc}
 80090c4:	b118      	cbz	r0, 80090ce <_fflush_r+0x1a>
 80090c6:	6983      	ldr	r3, [r0, #24]
 80090c8:	b90b      	cbnz	r3, 80090ce <_fflush_r+0x1a>
 80090ca:	f000 f887 	bl	80091dc <__sinit>
 80090ce:	4b14      	ldr	r3, [pc, #80]	; (8009120 <_fflush_r+0x6c>)
 80090d0:	429c      	cmp	r4, r3
 80090d2:	d11b      	bne.n	800910c <_fflush_r+0x58>
 80090d4:	686c      	ldr	r4, [r5, #4]
 80090d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d0ef      	beq.n	80090be <_fflush_r+0xa>
 80090de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80090e0:	07d0      	lsls	r0, r2, #31
 80090e2:	d404      	bmi.n	80090ee <_fflush_r+0x3a>
 80090e4:	0599      	lsls	r1, r3, #22
 80090e6:	d402      	bmi.n	80090ee <_fflush_r+0x3a>
 80090e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090ea:	f000 f915 	bl	8009318 <__retarget_lock_acquire_recursive>
 80090ee:	4628      	mov	r0, r5
 80090f0:	4621      	mov	r1, r4
 80090f2:	f7ff ff5d 	bl	8008fb0 <__sflush_r>
 80090f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090f8:	4605      	mov	r5, r0
 80090fa:	07da      	lsls	r2, r3, #31
 80090fc:	d4e0      	bmi.n	80090c0 <_fflush_r+0xc>
 80090fe:	89a3      	ldrh	r3, [r4, #12]
 8009100:	059b      	lsls	r3, r3, #22
 8009102:	d4dd      	bmi.n	80090c0 <_fflush_r+0xc>
 8009104:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009106:	f000 f908 	bl	800931a <__retarget_lock_release_recursive>
 800910a:	e7d9      	b.n	80090c0 <_fflush_r+0xc>
 800910c:	4b05      	ldr	r3, [pc, #20]	; (8009124 <_fflush_r+0x70>)
 800910e:	429c      	cmp	r4, r3
 8009110:	d101      	bne.n	8009116 <_fflush_r+0x62>
 8009112:	68ac      	ldr	r4, [r5, #8]
 8009114:	e7df      	b.n	80090d6 <_fflush_r+0x22>
 8009116:	4b04      	ldr	r3, [pc, #16]	; (8009128 <_fflush_r+0x74>)
 8009118:	429c      	cmp	r4, r3
 800911a:	bf08      	it	eq
 800911c:	68ec      	ldreq	r4, [r5, #12]
 800911e:	e7da      	b.n	80090d6 <_fflush_r+0x22>
 8009120:	08009a74 	.word	0x08009a74
 8009124:	08009a94 	.word	0x08009a94
 8009128:	08009a54 	.word	0x08009a54

0800912c <std>:
 800912c:	2300      	movs	r3, #0
 800912e:	b510      	push	{r4, lr}
 8009130:	4604      	mov	r4, r0
 8009132:	e9c0 3300 	strd	r3, r3, [r0]
 8009136:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800913a:	6083      	str	r3, [r0, #8]
 800913c:	8181      	strh	r1, [r0, #12]
 800913e:	6643      	str	r3, [r0, #100]	; 0x64
 8009140:	81c2      	strh	r2, [r0, #14]
 8009142:	6183      	str	r3, [r0, #24]
 8009144:	4619      	mov	r1, r3
 8009146:	2208      	movs	r2, #8
 8009148:	305c      	adds	r0, #92	; 0x5c
 800914a:	f7fd faa5 	bl	8006698 <memset>
 800914e:	4b05      	ldr	r3, [pc, #20]	; (8009164 <std+0x38>)
 8009150:	6224      	str	r4, [r4, #32]
 8009152:	6263      	str	r3, [r4, #36]	; 0x24
 8009154:	4b04      	ldr	r3, [pc, #16]	; (8009168 <std+0x3c>)
 8009156:	62a3      	str	r3, [r4, #40]	; 0x28
 8009158:	4b04      	ldr	r3, [pc, #16]	; (800916c <std+0x40>)
 800915a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800915c:	4b04      	ldr	r3, [pc, #16]	; (8009170 <std+0x44>)
 800915e:	6323      	str	r3, [r4, #48]	; 0x30
 8009160:	bd10      	pop	{r4, pc}
 8009162:	bf00      	nop
 8009164:	08009481 	.word	0x08009481
 8009168:	080094a3 	.word	0x080094a3
 800916c:	080094db 	.word	0x080094db
 8009170:	080094ff 	.word	0x080094ff

08009174 <_cleanup_r>:
 8009174:	4901      	ldr	r1, [pc, #4]	; (800917c <_cleanup_r+0x8>)
 8009176:	f000 b8af 	b.w	80092d8 <_fwalk_reent>
 800917a:	bf00      	nop
 800917c:	080090b5 	.word	0x080090b5

08009180 <__sfmoreglue>:
 8009180:	2268      	movs	r2, #104	; 0x68
 8009182:	b570      	push	{r4, r5, r6, lr}
 8009184:	1e4d      	subs	r5, r1, #1
 8009186:	4355      	muls	r5, r2
 8009188:	460e      	mov	r6, r1
 800918a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800918e:	f7ff fa6b 	bl	8008668 <_malloc_r>
 8009192:	4604      	mov	r4, r0
 8009194:	b140      	cbz	r0, 80091a8 <__sfmoreglue+0x28>
 8009196:	2100      	movs	r1, #0
 8009198:	e9c0 1600 	strd	r1, r6, [r0]
 800919c:	300c      	adds	r0, #12
 800919e:	60a0      	str	r0, [r4, #8]
 80091a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80091a4:	f7fd fa78 	bl	8006698 <memset>
 80091a8:	4620      	mov	r0, r4
 80091aa:	bd70      	pop	{r4, r5, r6, pc}

080091ac <__sfp_lock_acquire>:
 80091ac:	4801      	ldr	r0, [pc, #4]	; (80091b4 <__sfp_lock_acquire+0x8>)
 80091ae:	f000 b8b3 	b.w	8009318 <__retarget_lock_acquire_recursive>
 80091b2:	bf00      	nop
 80091b4:	200004b5 	.word	0x200004b5

080091b8 <__sfp_lock_release>:
 80091b8:	4801      	ldr	r0, [pc, #4]	; (80091c0 <__sfp_lock_release+0x8>)
 80091ba:	f000 b8ae 	b.w	800931a <__retarget_lock_release_recursive>
 80091be:	bf00      	nop
 80091c0:	200004b5 	.word	0x200004b5

080091c4 <__sinit_lock_acquire>:
 80091c4:	4801      	ldr	r0, [pc, #4]	; (80091cc <__sinit_lock_acquire+0x8>)
 80091c6:	f000 b8a7 	b.w	8009318 <__retarget_lock_acquire_recursive>
 80091ca:	bf00      	nop
 80091cc:	200004b6 	.word	0x200004b6

080091d0 <__sinit_lock_release>:
 80091d0:	4801      	ldr	r0, [pc, #4]	; (80091d8 <__sinit_lock_release+0x8>)
 80091d2:	f000 b8a2 	b.w	800931a <__retarget_lock_release_recursive>
 80091d6:	bf00      	nop
 80091d8:	200004b6 	.word	0x200004b6

080091dc <__sinit>:
 80091dc:	b510      	push	{r4, lr}
 80091de:	4604      	mov	r4, r0
 80091e0:	f7ff fff0 	bl	80091c4 <__sinit_lock_acquire>
 80091e4:	69a3      	ldr	r3, [r4, #24]
 80091e6:	b11b      	cbz	r3, 80091f0 <__sinit+0x14>
 80091e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091ec:	f7ff bff0 	b.w	80091d0 <__sinit_lock_release>
 80091f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80091f4:	6523      	str	r3, [r4, #80]	; 0x50
 80091f6:	4b13      	ldr	r3, [pc, #76]	; (8009244 <__sinit+0x68>)
 80091f8:	4a13      	ldr	r2, [pc, #76]	; (8009248 <__sinit+0x6c>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80091fe:	42a3      	cmp	r3, r4
 8009200:	bf08      	it	eq
 8009202:	2301      	moveq	r3, #1
 8009204:	4620      	mov	r0, r4
 8009206:	bf08      	it	eq
 8009208:	61a3      	streq	r3, [r4, #24]
 800920a:	f000 f81f 	bl	800924c <__sfp>
 800920e:	6060      	str	r0, [r4, #4]
 8009210:	4620      	mov	r0, r4
 8009212:	f000 f81b 	bl	800924c <__sfp>
 8009216:	60a0      	str	r0, [r4, #8]
 8009218:	4620      	mov	r0, r4
 800921a:	f000 f817 	bl	800924c <__sfp>
 800921e:	2200      	movs	r2, #0
 8009220:	2104      	movs	r1, #4
 8009222:	60e0      	str	r0, [r4, #12]
 8009224:	6860      	ldr	r0, [r4, #4]
 8009226:	f7ff ff81 	bl	800912c <std>
 800922a:	2201      	movs	r2, #1
 800922c:	2109      	movs	r1, #9
 800922e:	68a0      	ldr	r0, [r4, #8]
 8009230:	f7ff ff7c 	bl	800912c <std>
 8009234:	2202      	movs	r2, #2
 8009236:	2112      	movs	r1, #18
 8009238:	68e0      	ldr	r0, [r4, #12]
 800923a:	f7ff ff77 	bl	800912c <std>
 800923e:	2301      	movs	r3, #1
 8009240:	61a3      	str	r3, [r4, #24]
 8009242:	e7d1      	b.n	80091e8 <__sinit+0xc>
 8009244:	080096d4 	.word	0x080096d4
 8009248:	08009175 	.word	0x08009175

0800924c <__sfp>:
 800924c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800924e:	4607      	mov	r7, r0
 8009250:	f7ff ffac 	bl	80091ac <__sfp_lock_acquire>
 8009254:	4b1e      	ldr	r3, [pc, #120]	; (80092d0 <__sfp+0x84>)
 8009256:	681e      	ldr	r6, [r3, #0]
 8009258:	69b3      	ldr	r3, [r6, #24]
 800925a:	b913      	cbnz	r3, 8009262 <__sfp+0x16>
 800925c:	4630      	mov	r0, r6
 800925e:	f7ff ffbd 	bl	80091dc <__sinit>
 8009262:	3648      	adds	r6, #72	; 0x48
 8009264:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009268:	3b01      	subs	r3, #1
 800926a:	d503      	bpl.n	8009274 <__sfp+0x28>
 800926c:	6833      	ldr	r3, [r6, #0]
 800926e:	b30b      	cbz	r3, 80092b4 <__sfp+0x68>
 8009270:	6836      	ldr	r6, [r6, #0]
 8009272:	e7f7      	b.n	8009264 <__sfp+0x18>
 8009274:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009278:	b9d5      	cbnz	r5, 80092b0 <__sfp+0x64>
 800927a:	4b16      	ldr	r3, [pc, #88]	; (80092d4 <__sfp+0x88>)
 800927c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009280:	60e3      	str	r3, [r4, #12]
 8009282:	6665      	str	r5, [r4, #100]	; 0x64
 8009284:	f000 f847 	bl	8009316 <__retarget_lock_init_recursive>
 8009288:	f7ff ff96 	bl	80091b8 <__sfp_lock_release>
 800928c:	2208      	movs	r2, #8
 800928e:	4629      	mov	r1, r5
 8009290:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009294:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009298:	6025      	str	r5, [r4, #0]
 800929a:	61a5      	str	r5, [r4, #24]
 800929c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80092a0:	f7fd f9fa 	bl	8006698 <memset>
 80092a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80092a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80092ac:	4620      	mov	r0, r4
 80092ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092b0:	3468      	adds	r4, #104	; 0x68
 80092b2:	e7d9      	b.n	8009268 <__sfp+0x1c>
 80092b4:	2104      	movs	r1, #4
 80092b6:	4638      	mov	r0, r7
 80092b8:	f7ff ff62 	bl	8009180 <__sfmoreglue>
 80092bc:	4604      	mov	r4, r0
 80092be:	6030      	str	r0, [r6, #0]
 80092c0:	2800      	cmp	r0, #0
 80092c2:	d1d5      	bne.n	8009270 <__sfp+0x24>
 80092c4:	f7ff ff78 	bl	80091b8 <__sfp_lock_release>
 80092c8:	230c      	movs	r3, #12
 80092ca:	603b      	str	r3, [r7, #0]
 80092cc:	e7ee      	b.n	80092ac <__sfp+0x60>
 80092ce:	bf00      	nop
 80092d0:	080096d4 	.word	0x080096d4
 80092d4:	ffff0001 	.word	0xffff0001

080092d8 <_fwalk_reent>:
 80092d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092dc:	4606      	mov	r6, r0
 80092de:	4688      	mov	r8, r1
 80092e0:	2700      	movs	r7, #0
 80092e2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80092e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092ea:	f1b9 0901 	subs.w	r9, r9, #1
 80092ee:	d505      	bpl.n	80092fc <_fwalk_reent+0x24>
 80092f0:	6824      	ldr	r4, [r4, #0]
 80092f2:	2c00      	cmp	r4, #0
 80092f4:	d1f7      	bne.n	80092e6 <_fwalk_reent+0xe>
 80092f6:	4638      	mov	r0, r7
 80092f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092fc:	89ab      	ldrh	r3, [r5, #12]
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d907      	bls.n	8009312 <_fwalk_reent+0x3a>
 8009302:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009306:	3301      	adds	r3, #1
 8009308:	d003      	beq.n	8009312 <_fwalk_reent+0x3a>
 800930a:	4629      	mov	r1, r5
 800930c:	4630      	mov	r0, r6
 800930e:	47c0      	blx	r8
 8009310:	4307      	orrs	r7, r0
 8009312:	3568      	adds	r5, #104	; 0x68
 8009314:	e7e9      	b.n	80092ea <_fwalk_reent+0x12>

08009316 <__retarget_lock_init_recursive>:
 8009316:	4770      	bx	lr

08009318 <__retarget_lock_acquire_recursive>:
 8009318:	4770      	bx	lr

0800931a <__retarget_lock_release_recursive>:
 800931a:	4770      	bx	lr

0800931c <__swhatbuf_r>:
 800931c:	b570      	push	{r4, r5, r6, lr}
 800931e:	460e      	mov	r6, r1
 8009320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009324:	4614      	mov	r4, r2
 8009326:	2900      	cmp	r1, #0
 8009328:	461d      	mov	r5, r3
 800932a:	b096      	sub	sp, #88	; 0x58
 800932c:	da08      	bge.n	8009340 <__swhatbuf_r+0x24>
 800932e:	2200      	movs	r2, #0
 8009330:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009334:	602a      	str	r2, [r5, #0]
 8009336:	061a      	lsls	r2, r3, #24
 8009338:	d410      	bmi.n	800935c <__swhatbuf_r+0x40>
 800933a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800933e:	e00e      	b.n	800935e <__swhatbuf_r+0x42>
 8009340:	466a      	mov	r2, sp
 8009342:	f000 f903 	bl	800954c <_fstat_r>
 8009346:	2800      	cmp	r0, #0
 8009348:	dbf1      	blt.n	800932e <__swhatbuf_r+0x12>
 800934a:	9a01      	ldr	r2, [sp, #4]
 800934c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009350:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009354:	425a      	negs	r2, r3
 8009356:	415a      	adcs	r2, r3
 8009358:	602a      	str	r2, [r5, #0]
 800935a:	e7ee      	b.n	800933a <__swhatbuf_r+0x1e>
 800935c:	2340      	movs	r3, #64	; 0x40
 800935e:	2000      	movs	r0, #0
 8009360:	6023      	str	r3, [r4, #0]
 8009362:	b016      	add	sp, #88	; 0x58
 8009364:	bd70      	pop	{r4, r5, r6, pc}
	...

08009368 <__smakebuf_r>:
 8009368:	898b      	ldrh	r3, [r1, #12]
 800936a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800936c:	079d      	lsls	r5, r3, #30
 800936e:	4606      	mov	r6, r0
 8009370:	460c      	mov	r4, r1
 8009372:	d507      	bpl.n	8009384 <__smakebuf_r+0x1c>
 8009374:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009378:	6023      	str	r3, [r4, #0]
 800937a:	6123      	str	r3, [r4, #16]
 800937c:	2301      	movs	r3, #1
 800937e:	6163      	str	r3, [r4, #20]
 8009380:	b002      	add	sp, #8
 8009382:	bd70      	pop	{r4, r5, r6, pc}
 8009384:	466a      	mov	r2, sp
 8009386:	ab01      	add	r3, sp, #4
 8009388:	f7ff ffc8 	bl	800931c <__swhatbuf_r>
 800938c:	9900      	ldr	r1, [sp, #0]
 800938e:	4605      	mov	r5, r0
 8009390:	4630      	mov	r0, r6
 8009392:	f7ff f969 	bl	8008668 <_malloc_r>
 8009396:	b948      	cbnz	r0, 80093ac <__smakebuf_r+0x44>
 8009398:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800939c:	059a      	lsls	r2, r3, #22
 800939e:	d4ef      	bmi.n	8009380 <__smakebuf_r+0x18>
 80093a0:	f023 0303 	bic.w	r3, r3, #3
 80093a4:	f043 0302 	orr.w	r3, r3, #2
 80093a8:	81a3      	strh	r3, [r4, #12]
 80093aa:	e7e3      	b.n	8009374 <__smakebuf_r+0xc>
 80093ac:	4b0d      	ldr	r3, [pc, #52]	; (80093e4 <__smakebuf_r+0x7c>)
 80093ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80093b0:	89a3      	ldrh	r3, [r4, #12]
 80093b2:	6020      	str	r0, [r4, #0]
 80093b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093b8:	81a3      	strh	r3, [r4, #12]
 80093ba:	9b00      	ldr	r3, [sp, #0]
 80093bc:	6120      	str	r0, [r4, #16]
 80093be:	6163      	str	r3, [r4, #20]
 80093c0:	9b01      	ldr	r3, [sp, #4]
 80093c2:	b15b      	cbz	r3, 80093dc <__smakebuf_r+0x74>
 80093c4:	4630      	mov	r0, r6
 80093c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093ca:	f000 f8d1 	bl	8009570 <_isatty_r>
 80093ce:	b128      	cbz	r0, 80093dc <__smakebuf_r+0x74>
 80093d0:	89a3      	ldrh	r3, [r4, #12]
 80093d2:	f023 0303 	bic.w	r3, r3, #3
 80093d6:	f043 0301 	orr.w	r3, r3, #1
 80093da:	81a3      	strh	r3, [r4, #12]
 80093dc:	89a0      	ldrh	r0, [r4, #12]
 80093de:	4305      	orrs	r5, r0
 80093e0:	81a5      	strh	r5, [r4, #12]
 80093e2:	e7cd      	b.n	8009380 <__smakebuf_r+0x18>
 80093e4:	08009175 	.word	0x08009175

080093e8 <_malloc_usable_size_r>:
 80093e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093ec:	1f18      	subs	r0, r3, #4
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	bfbc      	itt	lt
 80093f2:	580b      	ldrlt	r3, [r1, r0]
 80093f4:	18c0      	addlt	r0, r0, r3
 80093f6:	4770      	bx	lr

080093f8 <_raise_r>:
 80093f8:	291f      	cmp	r1, #31
 80093fa:	b538      	push	{r3, r4, r5, lr}
 80093fc:	4604      	mov	r4, r0
 80093fe:	460d      	mov	r5, r1
 8009400:	d904      	bls.n	800940c <_raise_r+0x14>
 8009402:	2316      	movs	r3, #22
 8009404:	6003      	str	r3, [r0, #0]
 8009406:	f04f 30ff 	mov.w	r0, #4294967295
 800940a:	bd38      	pop	{r3, r4, r5, pc}
 800940c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800940e:	b112      	cbz	r2, 8009416 <_raise_r+0x1e>
 8009410:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009414:	b94b      	cbnz	r3, 800942a <_raise_r+0x32>
 8009416:	4620      	mov	r0, r4
 8009418:	f000 f830 	bl	800947c <_getpid_r>
 800941c:	462a      	mov	r2, r5
 800941e:	4601      	mov	r1, r0
 8009420:	4620      	mov	r0, r4
 8009422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009426:	f000 b817 	b.w	8009458 <_kill_r>
 800942a:	2b01      	cmp	r3, #1
 800942c:	d00a      	beq.n	8009444 <_raise_r+0x4c>
 800942e:	1c59      	adds	r1, r3, #1
 8009430:	d103      	bne.n	800943a <_raise_r+0x42>
 8009432:	2316      	movs	r3, #22
 8009434:	6003      	str	r3, [r0, #0]
 8009436:	2001      	movs	r0, #1
 8009438:	e7e7      	b.n	800940a <_raise_r+0x12>
 800943a:	2400      	movs	r4, #0
 800943c:	4628      	mov	r0, r5
 800943e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009442:	4798      	blx	r3
 8009444:	2000      	movs	r0, #0
 8009446:	e7e0      	b.n	800940a <_raise_r+0x12>

08009448 <raise>:
 8009448:	4b02      	ldr	r3, [pc, #8]	; (8009454 <raise+0xc>)
 800944a:	4601      	mov	r1, r0
 800944c:	6818      	ldr	r0, [r3, #0]
 800944e:	f7ff bfd3 	b.w	80093f8 <_raise_r>
 8009452:	bf00      	nop
 8009454:	20000040 	.word	0x20000040

08009458 <_kill_r>:
 8009458:	b538      	push	{r3, r4, r5, lr}
 800945a:	2300      	movs	r3, #0
 800945c:	4d06      	ldr	r5, [pc, #24]	; (8009478 <_kill_r+0x20>)
 800945e:	4604      	mov	r4, r0
 8009460:	4608      	mov	r0, r1
 8009462:	4611      	mov	r1, r2
 8009464:	602b      	str	r3, [r5, #0]
 8009466:	f7f9 fa0a 	bl	800287e <_kill>
 800946a:	1c43      	adds	r3, r0, #1
 800946c:	d102      	bne.n	8009474 <_kill_r+0x1c>
 800946e:	682b      	ldr	r3, [r5, #0]
 8009470:	b103      	cbz	r3, 8009474 <_kill_r+0x1c>
 8009472:	6023      	str	r3, [r4, #0]
 8009474:	bd38      	pop	{r3, r4, r5, pc}
 8009476:	bf00      	nop
 8009478:	200004b0 	.word	0x200004b0

0800947c <_getpid_r>:
 800947c:	f7f9 b9f8 	b.w	8002870 <_getpid>

08009480 <__sread>:
 8009480:	b510      	push	{r4, lr}
 8009482:	460c      	mov	r4, r1
 8009484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009488:	f000 f894 	bl	80095b4 <_read_r>
 800948c:	2800      	cmp	r0, #0
 800948e:	bfab      	itete	ge
 8009490:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009492:	89a3      	ldrhlt	r3, [r4, #12]
 8009494:	181b      	addge	r3, r3, r0
 8009496:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800949a:	bfac      	ite	ge
 800949c:	6563      	strge	r3, [r4, #84]	; 0x54
 800949e:	81a3      	strhlt	r3, [r4, #12]
 80094a0:	bd10      	pop	{r4, pc}

080094a2 <__swrite>:
 80094a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094a6:	461f      	mov	r7, r3
 80094a8:	898b      	ldrh	r3, [r1, #12]
 80094aa:	4605      	mov	r5, r0
 80094ac:	05db      	lsls	r3, r3, #23
 80094ae:	460c      	mov	r4, r1
 80094b0:	4616      	mov	r6, r2
 80094b2:	d505      	bpl.n	80094c0 <__swrite+0x1e>
 80094b4:	2302      	movs	r3, #2
 80094b6:	2200      	movs	r2, #0
 80094b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094bc:	f000 f868 	bl	8009590 <_lseek_r>
 80094c0:	89a3      	ldrh	r3, [r4, #12]
 80094c2:	4632      	mov	r2, r6
 80094c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094c8:	81a3      	strh	r3, [r4, #12]
 80094ca:	4628      	mov	r0, r5
 80094cc:	463b      	mov	r3, r7
 80094ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094d6:	f000 b817 	b.w	8009508 <_write_r>

080094da <__sseek>:
 80094da:	b510      	push	{r4, lr}
 80094dc:	460c      	mov	r4, r1
 80094de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094e2:	f000 f855 	bl	8009590 <_lseek_r>
 80094e6:	1c43      	adds	r3, r0, #1
 80094e8:	89a3      	ldrh	r3, [r4, #12]
 80094ea:	bf15      	itete	ne
 80094ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80094ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094f6:	81a3      	strheq	r3, [r4, #12]
 80094f8:	bf18      	it	ne
 80094fa:	81a3      	strhne	r3, [r4, #12]
 80094fc:	bd10      	pop	{r4, pc}

080094fe <__sclose>:
 80094fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009502:	f000 b813 	b.w	800952c <_close_r>
	...

08009508 <_write_r>:
 8009508:	b538      	push	{r3, r4, r5, lr}
 800950a:	4604      	mov	r4, r0
 800950c:	4608      	mov	r0, r1
 800950e:	4611      	mov	r1, r2
 8009510:	2200      	movs	r2, #0
 8009512:	4d05      	ldr	r5, [pc, #20]	; (8009528 <_write_r+0x20>)
 8009514:	602a      	str	r2, [r5, #0]
 8009516:	461a      	mov	r2, r3
 8009518:	f7f9 f9e8 	bl	80028ec <_write>
 800951c:	1c43      	adds	r3, r0, #1
 800951e:	d102      	bne.n	8009526 <_write_r+0x1e>
 8009520:	682b      	ldr	r3, [r5, #0]
 8009522:	b103      	cbz	r3, 8009526 <_write_r+0x1e>
 8009524:	6023      	str	r3, [r4, #0]
 8009526:	bd38      	pop	{r3, r4, r5, pc}
 8009528:	200004b0 	.word	0x200004b0

0800952c <_close_r>:
 800952c:	b538      	push	{r3, r4, r5, lr}
 800952e:	2300      	movs	r3, #0
 8009530:	4d05      	ldr	r5, [pc, #20]	; (8009548 <_close_r+0x1c>)
 8009532:	4604      	mov	r4, r0
 8009534:	4608      	mov	r0, r1
 8009536:	602b      	str	r3, [r5, #0]
 8009538:	f7f9 f9f4 	bl	8002924 <_close>
 800953c:	1c43      	adds	r3, r0, #1
 800953e:	d102      	bne.n	8009546 <_close_r+0x1a>
 8009540:	682b      	ldr	r3, [r5, #0]
 8009542:	b103      	cbz	r3, 8009546 <_close_r+0x1a>
 8009544:	6023      	str	r3, [r4, #0]
 8009546:	bd38      	pop	{r3, r4, r5, pc}
 8009548:	200004b0 	.word	0x200004b0

0800954c <_fstat_r>:
 800954c:	b538      	push	{r3, r4, r5, lr}
 800954e:	2300      	movs	r3, #0
 8009550:	4d06      	ldr	r5, [pc, #24]	; (800956c <_fstat_r+0x20>)
 8009552:	4604      	mov	r4, r0
 8009554:	4608      	mov	r0, r1
 8009556:	4611      	mov	r1, r2
 8009558:	602b      	str	r3, [r5, #0]
 800955a:	f7f9 f9ee 	bl	800293a <_fstat>
 800955e:	1c43      	adds	r3, r0, #1
 8009560:	d102      	bne.n	8009568 <_fstat_r+0x1c>
 8009562:	682b      	ldr	r3, [r5, #0]
 8009564:	b103      	cbz	r3, 8009568 <_fstat_r+0x1c>
 8009566:	6023      	str	r3, [r4, #0]
 8009568:	bd38      	pop	{r3, r4, r5, pc}
 800956a:	bf00      	nop
 800956c:	200004b0 	.word	0x200004b0

08009570 <_isatty_r>:
 8009570:	b538      	push	{r3, r4, r5, lr}
 8009572:	2300      	movs	r3, #0
 8009574:	4d05      	ldr	r5, [pc, #20]	; (800958c <_isatty_r+0x1c>)
 8009576:	4604      	mov	r4, r0
 8009578:	4608      	mov	r0, r1
 800957a:	602b      	str	r3, [r5, #0]
 800957c:	f7f9 f9ec 	bl	8002958 <_isatty>
 8009580:	1c43      	adds	r3, r0, #1
 8009582:	d102      	bne.n	800958a <_isatty_r+0x1a>
 8009584:	682b      	ldr	r3, [r5, #0]
 8009586:	b103      	cbz	r3, 800958a <_isatty_r+0x1a>
 8009588:	6023      	str	r3, [r4, #0]
 800958a:	bd38      	pop	{r3, r4, r5, pc}
 800958c:	200004b0 	.word	0x200004b0

08009590 <_lseek_r>:
 8009590:	b538      	push	{r3, r4, r5, lr}
 8009592:	4604      	mov	r4, r0
 8009594:	4608      	mov	r0, r1
 8009596:	4611      	mov	r1, r2
 8009598:	2200      	movs	r2, #0
 800959a:	4d05      	ldr	r5, [pc, #20]	; (80095b0 <_lseek_r+0x20>)
 800959c:	602a      	str	r2, [r5, #0]
 800959e:	461a      	mov	r2, r3
 80095a0:	f7f9 f9e4 	bl	800296c <_lseek>
 80095a4:	1c43      	adds	r3, r0, #1
 80095a6:	d102      	bne.n	80095ae <_lseek_r+0x1e>
 80095a8:	682b      	ldr	r3, [r5, #0]
 80095aa:	b103      	cbz	r3, 80095ae <_lseek_r+0x1e>
 80095ac:	6023      	str	r3, [r4, #0]
 80095ae:	bd38      	pop	{r3, r4, r5, pc}
 80095b0:	200004b0 	.word	0x200004b0

080095b4 <_read_r>:
 80095b4:	b538      	push	{r3, r4, r5, lr}
 80095b6:	4604      	mov	r4, r0
 80095b8:	4608      	mov	r0, r1
 80095ba:	4611      	mov	r1, r2
 80095bc:	2200      	movs	r2, #0
 80095be:	4d05      	ldr	r5, [pc, #20]	; (80095d4 <_read_r+0x20>)
 80095c0:	602a      	str	r2, [r5, #0]
 80095c2:	461a      	mov	r2, r3
 80095c4:	f7f9 f975 	bl	80028b2 <_read>
 80095c8:	1c43      	adds	r3, r0, #1
 80095ca:	d102      	bne.n	80095d2 <_read_r+0x1e>
 80095cc:	682b      	ldr	r3, [r5, #0]
 80095ce:	b103      	cbz	r3, 80095d2 <_read_r+0x1e>
 80095d0:	6023      	str	r3, [r4, #0]
 80095d2:	bd38      	pop	{r3, r4, r5, pc}
 80095d4:	200004b0 	.word	0x200004b0

080095d8 <_init>:
 80095d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095da:	bf00      	nop
 80095dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095de:	bc08      	pop	{r3}
 80095e0:	469e      	mov	lr, r3
 80095e2:	4770      	bx	lr

080095e4 <_fini>:
 80095e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e6:	bf00      	nop
 80095e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ea:	bc08      	pop	{r3}
 80095ec:	469e      	mov	lr, r3
 80095ee:	4770      	bx	lr
