
GRUZIK2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ea8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08008fb8  08008fb8  00018fb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800941c  0800941c  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  0800941c  0800941c  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800941c  0800941c  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800941c  0800941c  0001941c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009420  08009420  00019420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08009424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000210  08009634  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  08009634  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001006b  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000296e  00000000  00000000  000302a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  00032c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e00  00000000  00000000  00033b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019da0  00000000  00000000  00034910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120fe  00000000  00000000  0004e6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000912f1  00000000  00000000  000607ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1a9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050d8  00000000  00000000  000f1af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000210 	.word	0x20000210
 800012c:	00000000 	.word	0x00000000
 8000130:	08008fa0 	.word	0x08008fa0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000214 	.word	0x20000214
 800014c:	08008fa0 	.word	0x08008fa0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2iz>:
 8001030:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001038:	d30f      	bcc.n	800105a <__aeabi_f2iz+0x2a>
 800103a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d90d      	bls.n	8001060 <__aeabi_f2iz+0x30>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001050:	fa23 f002 	lsr.w	r0, r3, r2
 8001054:	bf18      	it	ne
 8001056:	4240      	negne	r0, r0
 8001058:	4770      	bx	lr
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	4770      	bx	lr
 8001060:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001064:	d101      	bne.n	800106a <__aeabi_f2iz+0x3a>
 8001066:	0242      	lsls	r2, r0, #9
 8001068:	d105      	bne.n	8001076 <__aeabi_f2iz+0x46>
 800106a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800106e:	bf08      	it	eq
 8001070:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001074:	4770      	bx	lr
 8001076:	f04f 0000 	mov.w	r0, #0
 800107a:	4770      	bx	lr

0800107c <SN_UART_Send>:
}

/*Example usage of this function looks like that*/
// Uart_send(&huart2, "data:%d %s %d\r\n",cokolwiek, cos, itd);
void SN_UART_Send(UART_HandleTypeDef *huart, const char *print, ...)
{
 800107c:	b40e      	push	{r1, r2, r3}
 800107e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	466b      	mov	r3, sp
 800108a:	461e      	mov	r6, r3
    int timeout = 100;
 800108c:	2364      	movs	r3, #100	; 0x64
 800108e:	61fb      	str	r3, [r7, #28]

    // Determine the length of the formatted string
    va_list args;
    va_start(args, print);
 8001090:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001094:	60fb      	str	r3, [r7, #12]
    int len = vsnprintf(NULL, 0, print, args);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800109a:	2100      	movs	r1, #0
 800109c:	2000      	movs	r0, #0
 800109e:	f005 fd17 	bl	8006ad0 <vsniprintf>
 80010a2:	61b8      	str	r0, [r7, #24]
    va_end(args);

    // Allocate the buffer with the correct length
    char Buffer[len];
 80010a4:	69b9      	ldr	r1, [r7, #24]
 80010a6:	1e4b      	subs	r3, r1, #1
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	460a      	mov	r2, r1
 80010ac:	2300      	movs	r3, #0
 80010ae:	4690      	mov	r8, r2
 80010b0:	4699      	mov	r9, r3
 80010b2:	f04f 0200 	mov.w	r2, #0
 80010b6:	f04f 0300 	mov.w	r3, #0
 80010ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80010be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80010c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80010c6:	460a      	mov	r2, r1
 80010c8:	2300      	movs	r3, #0
 80010ca:	4614      	mov	r4, r2
 80010cc:	461d      	mov	r5, r3
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	f04f 0300 	mov.w	r3, #0
 80010d6:	00eb      	lsls	r3, r5, #3
 80010d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80010dc:	00e2      	lsls	r2, r4, #3
 80010de:	460b      	mov	r3, r1
 80010e0:	3307      	adds	r3, #7
 80010e2:	08db      	lsrs	r3, r3, #3
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	ebad 0d03 	sub.w	sp, sp, r3
 80010ea:	466b      	mov	r3, sp
 80010ec:	3300      	adds	r3, #0
 80010ee:	613b      	str	r3, [r7, #16]

    // Format the string into the buffer
    va_start(args, print);
 80010f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010f4:	60fb      	str	r3, [r7, #12]
    vsnprintf(Buffer, len, print, args);
 80010f6:	69b9      	ldr	r1, [r7, #24]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010fc:	6938      	ldr	r0, [r7, #16]
 80010fe:	f005 fce7 	bl	8006ad0 <vsniprintf>
    va_end(args);

    // Transmit the formatted string through UART
    HAL_UART_Transmit(huart, (uint8_t *)Buffer, len, timeout);
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	b29a      	uxth	r2, r3
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	6939      	ldr	r1, [r7, #16]
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f004 f970 	bl	80053f0 <HAL_UART_Transmit>
 8001110:	46b5      	mov	sp, r6
}
 8001112:	bf00      	nop
 8001114:	3720      	adds	r7, #32
 8001116:	46bd      	mov	sp, r7
 8001118:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800111c:	b003      	add	sp, #12
 800111e:	4770      	bx	lr

08001120 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001130:	4b18      	ldr	r3, [pc, #96]	; (8001194 <MX_ADC1_Init+0x74>)
 8001132:	4a19      	ldr	r2, [pc, #100]	; (8001198 <MX_ADC1_Init+0x78>)
 8001134:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001136:	4b17      	ldr	r3, [pc, #92]	; (8001194 <MX_ADC1_Init+0x74>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800113c:	4b15      	ldr	r3, [pc, #84]	; (8001194 <MX_ADC1_Init+0x74>)
 800113e:	2200      	movs	r2, #0
 8001140:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <MX_ADC1_Init+0x74>)
 8001144:	2200      	movs	r2, #0
 8001146:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <MX_ADC1_Init+0x74>)
 800114a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800114e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001150:	4b10      	ldr	r3, [pc, #64]	; (8001194 <MX_ADC1_Init+0x74>)
 8001152:	2200      	movs	r2, #0
 8001154:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <MX_ADC1_Init+0x74>)
 8001158:	2201      	movs	r2, #1
 800115a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800115c:	480d      	ldr	r0, [pc, #52]	; (8001194 <MX_ADC1_Init+0x74>)
 800115e:	f001 fd07 	bl	8002b70 <HAL_ADC_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001168:	f001 f892 	bl	8002290 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800116c:	2309      	movs	r3, #9
 800116e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001170:	2301      	movs	r3, #1
 8001172:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_ADC1_Init+0x74>)
 800117e:	f001 ff8f 	bl	80030a0 <HAL_ADC_ConfigChannel>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001188:	f001 f882 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	2000022c 	.word	0x2000022c
 8001198:	40012400 	.word	0x40012400

0800119c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0310 	add.w	r3, r7, #16
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a14      	ldr	r2, [pc, #80]	; (8001208 <HAL_ADC_MspInit+0x6c>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d121      	bne.n	8001200 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <HAL_ADC_MspInit+0x70>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a12      	ldr	r2, [pc, #72]	; (800120c <HAL_ADC_MspInit+0x70>)
 80011c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011c6:	6193      	str	r3, [r2, #24]
 80011c8:	4b10      	ldr	r3, [pc, #64]	; (800120c <HAL_ADC_MspInit+0x70>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d4:	4b0d      	ldr	r3, [pc, #52]	; (800120c <HAL_ADC_MspInit+0x70>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a0c      	ldr	r2, [pc, #48]	; (800120c <HAL_ADC_MspInit+0x70>)
 80011da:	f043 0308 	orr.w	r3, r3, #8
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <HAL_ADC_MspInit+0x70>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f003 0308 	and.w	r3, r3, #8
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011ec:	2302      	movs	r3, #2
 80011ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f0:	2303      	movs	r3, #3
 80011f2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	4619      	mov	r1, r3
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <HAL_ADC_MspInit+0x74>)
 80011fc:	f002 faa4 	bl	8003748 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001200:	bf00      	nop
 8001202:	3720      	adds	r7, #32
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40012400 	.word	0x40012400
 800120c:	40021000 	.word	0x40021000
 8001210:	40010c00 	.word	0x40010c00

08001214 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121a:	f107 0310 	add.w	r3, r7, #16
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001228:	4b3f      	ldr	r3, [pc, #252]	; (8001328 <MX_GPIO_Init+0x114>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	4a3e      	ldr	r2, [pc, #248]	; (8001328 <MX_GPIO_Init+0x114>)
 800122e:	f043 0310 	orr.w	r3, r3, #16
 8001232:	6193      	str	r3, [r2, #24]
 8001234:	4b3c      	ldr	r3, [pc, #240]	; (8001328 <MX_GPIO_Init+0x114>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	f003 0310 	and.w	r3, r3, #16
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001240:	4b39      	ldr	r3, [pc, #228]	; (8001328 <MX_GPIO_Init+0x114>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	4a38      	ldr	r2, [pc, #224]	; (8001328 <MX_GPIO_Init+0x114>)
 8001246:	f043 0320 	orr.w	r3, r3, #32
 800124a:	6193      	str	r3, [r2, #24]
 800124c:	4b36      	ldr	r3, [pc, #216]	; (8001328 <MX_GPIO_Init+0x114>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	f003 0320 	and.w	r3, r3, #32
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001258:	4b33      	ldr	r3, [pc, #204]	; (8001328 <MX_GPIO_Init+0x114>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a32      	ldr	r2, [pc, #200]	; (8001328 <MX_GPIO_Init+0x114>)
 800125e:	f043 0304 	orr.w	r3, r3, #4
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b30      	ldr	r3, [pc, #192]	; (8001328 <MX_GPIO_Init+0x114>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001270:	4b2d      	ldr	r3, [pc, #180]	; (8001328 <MX_GPIO_Init+0x114>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	4a2c      	ldr	r2, [pc, #176]	; (8001328 <MX_GPIO_Init+0x114>)
 8001276:	f043 0308 	orr.w	r3, r3, #8
 800127a:	6193      	str	r3, [r2, #24]
 800127c:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <MX_GPIO_Init+0x114>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f003 0308 	and.w	r3, r3, #8
 8001284:	603b      	str	r3, [r7, #0]
 8001286:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_GPIO_Port, LD_Pin, GPIO_PIN_SET);
 8001288:	2201      	movs	r2, #1
 800128a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800128e:	4827      	ldr	r0, [pc, #156]	; (800132c <MX_GPIO_Init+0x118>)
 8001290:	f002 fbf5 	bl	8003a7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSOR1_Pin|SENSOR2_Pin|SENSOR3_Pin|SENSOR4_Pin
 8001294:	2200      	movs	r2, #0
 8001296:	21ff      	movs	r1, #255	; 0xff
 8001298:	4825      	ldr	r0, [pc, #148]	; (8001330 <MX_GPIO_Init+0x11c>)
 800129a:	f002 fbf0 	bl	8003a7e <HAL_GPIO_WritePin>
                          |SENSOR5_Pin|SENSOR6_Pin|SENSOR7_Pin|SENSOR8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDON_Pin|BIN1L_Pin|BIN1R_Pin|AIN2L_Pin
 800129e:	2200      	movs	r2, #0
 80012a0:	f24c 0171 	movw	r1, #49265	; 0xc071
 80012a4:	4823      	ldr	r0, [pc, #140]	; (8001334 <MX_GPIO_Init+0x120>)
 80012a6:	f002 fbea 	bl	8003a7e <HAL_GPIO_WritePin>
                          |AIN1R_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_Pin;
 80012aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2302      	movs	r3, #2
 80012ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD_GPIO_Port, &GPIO_InitStruct);
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	4619      	mov	r1, r3
 80012c2:	481a      	ldr	r0, [pc, #104]	; (800132c <MX_GPIO_Init+0x118>)
 80012c4:	f002 fa40 	bl	8003748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR1_Pin|SENSOR2_Pin|SENSOR3_Pin|SENSOR4_Pin
 80012c8:	23ff      	movs	r3, #255	; 0xff
 80012ca:	613b      	str	r3, [r7, #16]
                          |SENSOR5_Pin|SENSOR6_Pin|SENSOR7_Pin|SENSOR8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d4:	2303      	movs	r3, #3
 80012d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f107 0310 	add.w	r3, r7, #16
 80012dc:	4619      	mov	r1, r3
 80012de:	4814      	ldr	r0, [pc, #80]	; (8001330 <MX_GPIO_Init+0x11c>)
 80012e0:	f002 fa32 	bl	8003748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LEDON_Pin|BIN1L_Pin|BIN1R_Pin|AIN2L_Pin
 80012e4:	f24c 0331 	movw	r3, #49201	; 0xc031
 80012e8:	613b      	str	r3, [r7, #16]
                          |AIN1R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f2:	2303      	movs	r3, #3
 80012f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	4619      	mov	r1, r3
 80012fc:	480d      	ldr	r0, [pc, #52]	; (8001334 <MX_GPIO_Init+0x120>)
 80012fe:	f002 fa23 	bl	8003748 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001302:	2340      	movs	r3, #64	; 0x40
 8001304:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001306:	2301      	movs	r3, #1
 8001308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800130e:	2301      	movs	r3, #1
 8001310:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001312:	f107 0310 	add.w	r3, r7, #16
 8001316:	4619      	mov	r1, r3
 8001318:	4806      	ldr	r0, [pc, #24]	; (8001334 <MX_GPIO_Init+0x120>)
 800131a:	f002 fa15 	bl	8003748 <HAL_GPIO_Init>

}
 800131e:	bf00      	nop
 8001320:	3720      	adds	r7, #32
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40021000 	.word	0x40021000
 800132c:	40011000 	.word	0x40011000
 8001330:	40010800 	.word	0x40010800
 8001334:	40010c00 	.word	0x40010c00

08001338 <Battery_ADC_measurement>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Battery_ADC_measurement(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	/*Start ADC*/
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800133c:	2201      	movs	r2, #1
 800133e:	2102      	movs	r1, #2
 8001340:	4827      	ldr	r0, [pc, #156]	; (80013e0 <Battery_ADC_measurement+0xa8>)
 8001342:	f002 fb9c 	bl	8003a7e <HAL_GPIO_WritePin>
	/*Get ADC value*/
	HAL_ADC_Start(&hadc1);
 8001346:	4827      	ldr	r0, [pc, #156]	; (80013e4 <Battery_ADC_measurement+0xac>)
 8001348:	f001 fcea 	bl	8002d20 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
 800134c:	f04f 31ff 	mov.w	r1, #4294967295
 8001350:	4824      	ldr	r0, [pc, #144]	; (80013e4 <Battery_ADC_measurement+0xac>)
 8001352:	f001 fd93 	bl	8002e7c <HAL_ADC_PollForConversion>
	raw_battery = HAL_ADC_GetValue(&hadc1);
 8001356:	4823      	ldr	r0, [pc, #140]	; (80013e4 <Battery_ADC_measurement+0xac>)
 8001358:	f001 fe96 	bl	8003088 <HAL_ADC_GetValue>
 800135c:	4603      	mov	r3, r0
 800135e:	b29a      	uxth	r2, r3
 8001360:	4b21      	ldr	r3, [pc, #132]	; (80013e8 <Battery_ADC_measurement+0xb0>)
 8001362:	801a      	strh	r2, [r3, #0]
	/*Stop ADC*/
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001364:	2200      	movs	r2, #0
 8001366:	2102      	movs	r1, #2
 8001368:	481d      	ldr	r0, [pc, #116]	; (80013e0 <Battery_ADC_measurement+0xa8>)
 800136a:	f002 fb88 	bl	8003a7e <HAL_GPIO_WritePin>
	//SN_UART_Send(&huart3,"Battery_raw = %hu \r\n ",raw_battery);

	/*Percentages from raw 12bit measurement*/
	if(raw_battery != 0)
 800136e:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <Battery_ADC_measurement+0xb0>)
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d01a      	beq.n	80013ac <Battery_ADC_measurement+0x74>
	{
		battery_procentage_raw = (raw_battery * 100) / max_battery;
 8001376:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <Battery_ADC_measurement+0xb0>)
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	461a      	mov	r2, r3
 800137c:	2364      	movs	r3, #100	; 0x64
 800137e:	fb02 f303 	mul.w	r3, r2, r3
 8001382:	4a1a      	ldr	r2, [pc, #104]	; (80013ec <Battery_ADC_measurement+0xb4>)
 8001384:	8812      	ldrh	r2, [r2, #0]
 8001386:	fb93 f3f2 	sdiv	r3, r3, r2
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fc36 	bl	8000bfc <__aeabi_i2f>
 8001390:	4603      	mov	r3, r0
 8001392:	4a17      	ldr	r2, [pc, #92]	; (80013f0 <Battery_ADC_measurement+0xb8>)
 8001394:	6013      	str	r3, [r2, #0]
		if(raw_battery > max_battery)
 8001396:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <Battery_ADC_measurement+0xb0>)
 8001398:	881a      	ldrh	r2, [r3, #0]
 800139a:	4b14      	ldr	r3, [pc, #80]	; (80013ec <Battery_ADC_measurement+0xb4>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d908      	bls.n	80013b4 <Battery_ADC_measurement+0x7c>
		{
			raw_battery = max_battery;
 80013a2:	4b12      	ldr	r3, [pc, #72]	; (80013ec <Battery_ADC_measurement+0xb4>)
 80013a4:	881a      	ldrh	r2, [r3, #0]
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <Battery_ADC_measurement+0xb0>)
 80013a8:	801a      	strh	r2, [r3, #0]
 80013aa:	e003      	b.n	80013b4 <Battery_ADC_measurement+0x7c>
		}
	}
	else
	{
		battery_procentage_raw = 0;
 80013ac:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <Battery_ADC_measurement+0xb8>)
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
	}
	/*Motor speed*/
	speedlevel = ((100 - battery_procentage_raw) + 100) / 100;
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <Battery_ADC_measurement+0xb8>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4619      	mov	r1, r3
 80013ba:	480e      	ldr	r0, [pc, #56]	; (80013f4 <Battery_ADC_measurement+0xbc>)
 80013bc:	f7ff fb68 	bl	8000a90 <__aeabi_fsub>
 80013c0:	4603      	mov	r3, r0
 80013c2:	490c      	ldr	r1, [pc, #48]	; (80013f4 <Battery_ADC_measurement+0xbc>)
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fb65 	bl	8000a94 <__addsf3>
 80013ca:	4603      	mov	r3, r0
 80013cc:	4909      	ldr	r1, [pc, #36]	; (80013f4 <Battery_ADC_measurement+0xbc>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fd1c 	bl	8000e0c <__aeabi_fdiv>
 80013d4:	4603      	mov	r3, r0
 80013d6:	461a      	mov	r2, r3
 80013d8:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <Battery_ADC_measurement+0xc0>)
 80013da:	601a      	str	r2, [r3, #0]
}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40010c00 	.word	0x40010c00
 80013e4:	2000022c 	.word	0x2000022c
 80013e8:	200002c0 	.word	0x200002c0
 80013ec:	20000030 	.word	0x20000030
 80013f0:	200002c4 	.word	0x200002c4
 80013f4:	42c80000 	.word	0x42c80000
 80013f8:	20000018 	.word	0x20000018

080013fc <delay_us>:
void delay_us (uint16_t us)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <delay_us+0x2c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2200      	movs	r2, #0
 800140c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 800140e:	bf00      	nop
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <delay_us+0x2c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001416:	88fb      	ldrh	r3, [r7, #6]
 8001418:	429a      	cmp	r2, r3
 800141a:	d3f9      	bcc.n	8001410 <delay_us+0x14>
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	200002cc 	.word	0x200002cc

0800142c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001446:	887b      	ldrh	r3, [r7, #2]
 8001448:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144a:	2301      	movs	r3, #1
 800144c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2302      	movs	r3, #2
 8001450:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001452:	f107 0308 	add.w	r3, r7, #8
 8001456:	4619      	mov	r1, r3
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f002 f975 	bl	8003748 <HAL_GPIO_Init>
}
 800145e:	bf00      	nop
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	460b      	mov	r3, r1
 8001470:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001472:	f107 0308 	add.w	r3, r7, #8
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001480:	887b      	ldrh	r3, [r7, #2]
 8001482:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001488:	2301      	movs	r3, #1
 800148a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800148c:	f107 0308 	add.w	r3, r7, #8
 8001490:	4619      	mov	r1, r3
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f002 f958 	bl	8003748 <HAL_GPIO_Init>
}
 8001498:	bf00      	nop
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <motor_control>:


void motor_control (double pos_right, double pos_left)
{
 80014a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014a4:	b084      	sub	sp, #16
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80014ac:	e9c7 2300 	strd	r2, r3, [r7]
	if (pos_left < 0 )
 80014b0:	f04f 0200 	mov.w	r2, #0
 80014b4:	f04f 0300 	mov.w	r3, #0
 80014b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014bc:	f7ff fa7e 	bl	80009bc <__aeabi_dcmplt>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d02f      	beq.n	8001526 <motor_control+0x86>
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_2, (int)((ARR*pos_left*-1)*speedlevel));
 80014c6:	4b64      	ldr	r3, [pc, #400]	; (8001658 <motor_control+0x1b8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7fe ff9a 	bl	8000404 <__aeabi_i2d>
 80014d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014d4:	f7ff f800 	bl	80004d8 <__aeabi_dmul>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4690      	mov	r8, r2
 80014de:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80014e2:	4b5e      	ldr	r3, [pc, #376]	; (800165c <motor_control+0x1bc>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7fe ff9e 	bl	8000428 <__aeabi_f2d>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4640      	mov	r0, r8
 80014f2:	4649      	mov	r1, r9
 80014f4:	f7fe fff0 	bl	80004d8 <__aeabi_dmul>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4610      	mov	r0, r2
 80014fe:	4619      	mov	r1, r3
 8001500:	f7ff fa9a 	bl	8000a38 <__aeabi_d2iz>
 8001504:	4602      	mov	r2, r0
 8001506:	4b56      	ldr	r3, [pc, #344]	; (8001660 <motor_control+0x1c0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800150c:	2201      	movs	r2, #1
 800150e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001512:	4854      	ldr	r0, [pc, #336]	; (8001664 <motor_control+0x1c4>)
 8001514:	f002 fab3 	bl	8003a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001518:	2200      	movs	r2, #0
 800151a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800151e:	4851      	ldr	r0, [pc, #324]	; (8001664 <motor_control+0x1c4>)
 8001520:	f002 faad 	bl	8003a7e <HAL_GPIO_WritePin>
 8001524:	e02d      	b.n	8001582 <motor_control+0xe2>
	}
	else
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_2, (int)((ARR*pos_left)*speedlevel));
 8001526:	4b4c      	ldr	r3, [pc, #304]	; (8001658 <motor_control+0x1b8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe ff6a 	bl	8000404 <__aeabi_i2d>
 8001530:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001534:	f7fe ffd0 	bl	80004d8 <__aeabi_dmul>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4690      	mov	r8, r2
 800153e:	4699      	mov	r9, r3
 8001540:	4b46      	ldr	r3, [pc, #280]	; (800165c <motor_control+0x1bc>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f7fe ff6f 	bl	8000428 <__aeabi_f2d>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4640      	mov	r0, r8
 8001550:	4649      	mov	r1, r9
 8001552:	f7fe ffc1 	bl	80004d8 <__aeabi_dmul>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	f7ff fa6b 	bl	8000a38 <__aeabi_d2iz>
 8001562:	4602      	mov	r2, r0
 8001564:	4b3e      	ldr	r3, [pc, #248]	; (8001660 <motor_control+0x1c0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001570:	483c      	ldr	r0, [pc, #240]	; (8001664 <motor_control+0x1c4>)
 8001572:	f002 fa84 	bl	8003a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001576:	2201      	movs	r2, #1
 8001578:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800157c:	4839      	ldr	r0, [pc, #228]	; (8001664 <motor_control+0x1c4>)
 800157e:	f002 fa7e 	bl	8003a7e <HAL_GPIO_WritePin>
	}
	if (pos_right < 0 )
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	f04f 0300 	mov.w	r3, #0
 800158a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800158e:	f7ff fa15 	bl	80009bc <__aeabi_dcmplt>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d02d      	beq.n	80015f4 <motor_control+0x154>
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_4, (int)((ARR*pos_right*-1)*speedlevel));
 8001598:	4b2f      	ldr	r3, [pc, #188]	; (8001658 <motor_control+0x1b8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe ff31 	bl	8000404 <__aeabi_i2d>
 80015a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015a6:	f7fe ff97 	bl	80004d8 <__aeabi_dmul>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4614      	mov	r4, r2
 80015b0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80015b4:	4b29      	ldr	r3, [pc, #164]	; (800165c <motor_control+0x1bc>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe ff35 	bl	8000428 <__aeabi_f2d>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4620      	mov	r0, r4
 80015c4:	4629      	mov	r1, r5
 80015c6:	f7fe ff87 	bl	80004d8 <__aeabi_dmul>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4610      	mov	r0, r2
 80015d0:	4619      	mov	r1, r3
 80015d2:	f7ff fa31 	bl	8000a38 <__aeabi_d2iz>
 80015d6:	4602      	mov	r2, r0
 80015d8:	4b21      	ldr	r3, [pc, #132]	; (8001660 <motor_control+0x1c0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80015de:	2201      	movs	r2, #1
 80015e0:	2120      	movs	r1, #32
 80015e2:	4820      	ldr	r0, [pc, #128]	; (8001664 <motor_control+0x1c4>)
 80015e4:	f002 fa4b 	bl	8003a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2110      	movs	r1, #16
 80015ec:	481d      	ldr	r0, [pc, #116]	; (8001664 <motor_control+0x1c4>)
 80015ee:	f002 fa46 	bl	8003a7e <HAL_GPIO_WritePin>
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_4, (int)((ARR*pos_right)*speedlevel));
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
	}
}
 80015f2:	e02b      	b.n	800164c <motor_control+0x1ac>
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_4, (int)((ARR*pos_right)*speedlevel));
 80015f4:	4b18      	ldr	r3, [pc, #96]	; (8001658 <motor_control+0x1b8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe ff03 	bl	8000404 <__aeabi_i2d>
 80015fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001602:	f7fe ff69 	bl	80004d8 <__aeabi_dmul>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4614      	mov	r4, r2
 800160c:	461d      	mov	r5, r3
 800160e:	4b13      	ldr	r3, [pc, #76]	; (800165c <motor_control+0x1bc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ff08 	bl	8000428 <__aeabi_f2d>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4620      	mov	r0, r4
 800161e:	4629      	mov	r1, r5
 8001620:	f7fe ff5a 	bl	80004d8 <__aeabi_dmul>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4610      	mov	r0, r2
 800162a:	4619      	mov	r1, r3
 800162c:	f7ff fa04 	bl	8000a38 <__aeabi_d2iz>
 8001630:	4602      	mov	r2, r0
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <motor_control+0x1c0>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001638:	2200      	movs	r2, #0
 800163a:	2120      	movs	r1, #32
 800163c:	4809      	ldr	r0, [pc, #36]	; (8001664 <motor_control+0x1c4>)
 800163e:	f002 fa1e 	bl	8003a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001642:	2201      	movs	r2, #1
 8001644:	2110      	movs	r1, #16
 8001646:	4807      	ldr	r0, [pc, #28]	; (8001664 <motor_control+0x1c4>)
 8001648:	f002 fa19 	bl	8003a7e <HAL_GPIO_WritePin>
}
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001656:	bf00      	nop
 8001658:	2000002c 	.word	0x2000002c
 800165c:	20000018 	.word	0x20000018
 8001660:	2000035c 	.word	0x2000035c
 8001664:	40010c00 	.word	0x40010c00

08001668 <sharp_turn>:


void sharp_turn () {
 8001668:	b5b0      	push	{r4, r5, r7, lr}
 800166a:	af00      	add	r7, sp, #0

	if (last_idle < 25)
 800166c:	4b2c      	ldr	r3, [pc, #176]	; (8001720 <sharp_turn+0xb8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b18      	cmp	r3, #24
 8001672:	dc29      	bgt.n	80016c8 <sharp_turn+0x60>
	{
		if (last_end == 1)
 8001674:	4b2b      	ldr	r3, [pc, #172]	; (8001724 <sharp_turn+0xbc>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d112      	bne.n	80016a2 <sharp_turn+0x3a>
			motor_control(pr11, pr12);
 800167c:	4b2a      	ldr	r3, [pc, #168]	; (8001728 <sharp_turn+0xc0>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe febf 	bl	8000404 <__aeabi_i2d>
 8001686:	4604      	mov	r4, r0
 8001688:	460d      	mov	r5, r1
 800168a:	4b28      	ldr	r3, [pc, #160]	; (800172c <sharp_turn+0xc4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe feb8 	bl	8000404 <__aeabi_i2d>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4620      	mov	r0, r4
 800169a:	4629      	mov	r1, r5
 800169c:	f7ff ff00 	bl	80014a0 <motor_control>
		if (last_end == 1)
			motor_control(pr21, pr22);
		else
			motor_control(pr22, pr21);
	}
}
 80016a0:	e03b      	b.n	800171a <sharp_turn+0xb2>
			motor_control(pr12, pr11);
 80016a2:	4b22      	ldr	r3, [pc, #136]	; (800172c <sharp_turn+0xc4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe feac 	bl	8000404 <__aeabi_i2d>
 80016ac:	4604      	mov	r4, r0
 80016ae:	460d      	mov	r5, r1
 80016b0:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <sharp_turn+0xc0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe fea5 	bl	8000404 <__aeabi_i2d>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4620      	mov	r0, r4
 80016c0:	4629      	mov	r1, r5
 80016c2:	f7ff feed 	bl	80014a0 <motor_control>
}
 80016c6:	e028      	b.n	800171a <sharp_turn+0xb2>
		if (last_end == 1)
 80016c8:	4b16      	ldr	r3, [pc, #88]	; (8001724 <sharp_turn+0xbc>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d112      	bne.n	80016f6 <sharp_turn+0x8e>
			motor_control(pr21, pr22);
 80016d0:	4b17      	ldr	r3, [pc, #92]	; (8001730 <sharp_turn+0xc8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe fe95 	bl	8000404 <__aeabi_i2d>
 80016da:	4604      	mov	r4, r0
 80016dc:	460d      	mov	r5, r1
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <sharp_turn+0xcc>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe fe8e 	bl	8000404 <__aeabi_i2d>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4620      	mov	r0, r4
 80016ee:	4629      	mov	r1, r5
 80016f0:	f7ff fed6 	bl	80014a0 <motor_control>
}
 80016f4:	e011      	b.n	800171a <sharp_turn+0xb2>
			motor_control(pr22, pr21);
 80016f6:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <sharp_turn+0xcc>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe fe82 	bl	8000404 <__aeabi_i2d>
 8001700:	4604      	mov	r4, r0
 8001702:	460d      	mov	r5, r1
 8001704:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <sharp_turn+0xc8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe fe7b 	bl	8000404 <__aeabi_i2d>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4620      	mov	r0, r4
 8001714:	4629      	mov	r1, r5
 8001716:	f7ff fec3 	bl	80014a0 <motor_control>
}
 800171a:	bf00      	nop
 800171c:	bdb0      	pop	{r4, r5, r7, pc}
 800171e:	bf00      	nop
 8001720:	200002ac 	.word	0x200002ac
 8001724:	200002a8 	.word	0x200002a8
 8001728:	20000008 	.word	0x20000008
 800172c:	2000000c 	.word	0x2000000c
 8001730:	20000010 	.word	0x20000010
 8001734:	20000014 	.word	0x20000014

08001738 <QTR8_read>:
int QTR8_read ()
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDON_GPIO_Port, LEDON_Pin, 1);
 800173e:	2201      	movs	r2, #1
 8001740:	2101      	movs	r1, #1
 8001742:	48a2      	ldr	r0, [pc, #648]	; (80019cc <QTR8_read+0x294>)
 8001744:	f002 f99b 	bl	8003a7e <HAL_GPIO_WritePin>

	Set_Pin_Output(SENSOR1_GPIO_Port, SENSOR1_Pin);
 8001748:	2101      	movs	r1, #1
 800174a:	48a1      	ldr	r0, [pc, #644]	; (80019d0 <QTR8_read+0x298>)
 800174c:	f7ff fe6e 	bl	800142c <Set_Pin_Output>
	Set_Pin_Output(SENSOR2_GPIO_Port, SENSOR2_Pin);
 8001750:	2102      	movs	r1, #2
 8001752:	489f      	ldr	r0, [pc, #636]	; (80019d0 <QTR8_read+0x298>)
 8001754:	f7ff fe6a 	bl	800142c <Set_Pin_Output>
	Set_Pin_Output(SENSOR3_GPIO_Port, SENSOR3_Pin);
 8001758:	2104      	movs	r1, #4
 800175a:	489d      	ldr	r0, [pc, #628]	; (80019d0 <QTR8_read+0x298>)
 800175c:	f7ff fe66 	bl	800142c <Set_Pin_Output>
	Set_Pin_Output(SENSOR4_GPIO_Port, SENSOR4_Pin);
 8001760:	2108      	movs	r1, #8
 8001762:	489b      	ldr	r0, [pc, #620]	; (80019d0 <QTR8_read+0x298>)
 8001764:	f7ff fe62 	bl	800142c <Set_Pin_Output>
	Set_Pin_Output(SENSOR5_GPIO_Port, SENSOR5_Pin);
 8001768:	2110      	movs	r1, #16
 800176a:	4899      	ldr	r0, [pc, #612]	; (80019d0 <QTR8_read+0x298>)
 800176c:	f7ff fe5e 	bl	800142c <Set_Pin_Output>
	Set_Pin_Output(SENSOR6_GPIO_Port, SENSOR6_Pin);
 8001770:	2120      	movs	r1, #32
 8001772:	4897      	ldr	r0, [pc, #604]	; (80019d0 <QTR8_read+0x298>)
 8001774:	f7ff fe5a 	bl	800142c <Set_Pin_Output>
	Set_Pin_Output(SENSOR7_GPIO_Port, SENSOR7_Pin);
 8001778:	2140      	movs	r1, #64	; 0x40
 800177a:	4895      	ldr	r0, [pc, #596]	; (80019d0 <QTR8_read+0x298>)
 800177c:	f7ff fe56 	bl	800142c <Set_Pin_Output>
	Set_Pin_Output(SENSOR8_GPIO_Port, SENSOR8_Pin);
 8001780:	2180      	movs	r1, #128	; 0x80
 8001782:	4893      	ldr	r0, [pc, #588]	; (80019d0 <QTR8_read+0x298>)
 8001784:	f7ff fe52 	bl	800142c <Set_Pin_Output>

	HAL_GPIO_WritePin (SENSOR1_GPIO_Port, SENSOR1_Pin, 1);
 8001788:	2201      	movs	r2, #1
 800178a:	2101      	movs	r1, #1
 800178c:	4890      	ldr	r0, [pc, #576]	; (80019d0 <QTR8_read+0x298>)
 800178e:	f002 f976 	bl	8003a7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR2_GPIO_Port, SENSOR2_Pin, 1);
 8001792:	2201      	movs	r2, #1
 8001794:	2102      	movs	r1, #2
 8001796:	488e      	ldr	r0, [pc, #568]	; (80019d0 <QTR8_read+0x298>)
 8001798:	f002 f971 	bl	8003a7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR3_GPIO_Port, SENSOR3_Pin, 1);
 800179c:	2201      	movs	r2, #1
 800179e:	2104      	movs	r1, #4
 80017a0:	488b      	ldr	r0, [pc, #556]	; (80019d0 <QTR8_read+0x298>)
 80017a2:	f002 f96c 	bl	8003a7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR4_GPIO_Port, SENSOR4_Pin, 1);
 80017a6:	2201      	movs	r2, #1
 80017a8:	2108      	movs	r1, #8
 80017aa:	4889      	ldr	r0, [pc, #548]	; (80019d0 <QTR8_read+0x298>)
 80017ac:	f002 f967 	bl	8003a7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR5_GPIO_Port, SENSOR5_Pin, 1);
 80017b0:	2201      	movs	r2, #1
 80017b2:	2110      	movs	r1, #16
 80017b4:	4886      	ldr	r0, [pc, #536]	; (80019d0 <QTR8_read+0x298>)
 80017b6:	f002 f962 	bl	8003a7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR6_GPIO_Port, SENSOR6_Pin, 1);
 80017ba:	2201      	movs	r2, #1
 80017bc:	2120      	movs	r1, #32
 80017be:	4884      	ldr	r0, [pc, #528]	; (80019d0 <QTR8_read+0x298>)
 80017c0:	f002 f95d 	bl	8003a7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR7_GPIO_Port, SENSOR7_Pin, 1);
 80017c4:	2201      	movs	r2, #1
 80017c6:	2140      	movs	r1, #64	; 0x40
 80017c8:	4881      	ldr	r0, [pc, #516]	; (80019d0 <QTR8_read+0x298>)
 80017ca:	f002 f958 	bl	8003a7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR8_GPIO_Port, SENSOR8_Pin, 1);
 80017ce:	2201      	movs	r2, #1
 80017d0:	2180      	movs	r1, #128	; 0x80
 80017d2:	487f      	ldr	r0, [pc, #508]	; (80019d0 <QTR8_read+0x298>)
 80017d4:	f002 f953 	bl	8003a7e <HAL_GPIO_WritePin>

	delay_us(10);
 80017d8:	200a      	movs	r0, #10
 80017da:	f7ff fe0f 	bl	80013fc <delay_us>

	Set_Pin_Input(SENSOR1_GPIO_Port, SENSOR1_Pin);
 80017de:	2101      	movs	r1, #1
 80017e0:	487b      	ldr	r0, [pc, #492]	; (80019d0 <QTR8_read+0x298>)
 80017e2:	f7ff fe40 	bl	8001466 <Set_Pin_Input>
	Set_Pin_Input(SENSOR2_GPIO_Port, SENSOR2_Pin);
 80017e6:	2102      	movs	r1, #2
 80017e8:	4879      	ldr	r0, [pc, #484]	; (80019d0 <QTR8_read+0x298>)
 80017ea:	f7ff fe3c 	bl	8001466 <Set_Pin_Input>
	Set_Pin_Input(SENSOR3_GPIO_Port, SENSOR3_Pin);
 80017ee:	2104      	movs	r1, #4
 80017f0:	4877      	ldr	r0, [pc, #476]	; (80019d0 <QTR8_read+0x298>)
 80017f2:	f7ff fe38 	bl	8001466 <Set_Pin_Input>
	Set_Pin_Input(SENSOR4_GPIO_Port, SENSOR4_Pin);
 80017f6:	2108      	movs	r1, #8
 80017f8:	4875      	ldr	r0, [pc, #468]	; (80019d0 <QTR8_read+0x298>)
 80017fa:	f7ff fe34 	bl	8001466 <Set_Pin_Input>
	Set_Pin_Input(SENSOR5_GPIO_Port, SENSOR5_Pin);
 80017fe:	2110      	movs	r1, #16
 8001800:	4873      	ldr	r0, [pc, #460]	; (80019d0 <QTR8_read+0x298>)
 8001802:	f7ff fe30 	bl	8001466 <Set_Pin_Input>
	Set_Pin_Input(SENSOR6_GPIO_Port, SENSOR6_Pin);
 8001806:	2120      	movs	r1, #32
 8001808:	4871      	ldr	r0, [pc, #452]	; (80019d0 <QTR8_read+0x298>)
 800180a:	f7ff fe2c 	bl	8001466 <Set_Pin_Input>
	Set_Pin_Input(SENSOR7_GPIO_Port, SENSOR7_Pin);
 800180e:	2140      	movs	r1, #64	; 0x40
 8001810:	486f      	ldr	r0, [pc, #444]	; (80019d0 <QTR8_read+0x298>)
 8001812:	f7ff fe28 	bl	8001466 <Set_Pin_Input>
	Set_Pin_Input(SENSOR8_GPIO_Port, SENSOR8_Pin);
 8001816:	2180      	movs	r1, #128	; 0x80
 8001818:	486d      	ldr	r0, [pc, #436]	; (80019d0 <QTR8_read+0x298>)
 800181a:	f7ff fe24 	bl	8001466 <Set_Pin_Input>

	// Threshold
	 delay_us(4500);
 800181e:	f241 1094 	movw	r0, #4500	; 0x1194
 8001822:	f7ff fdeb 	bl	80013fc <delay_us>

	sensor_read = 0x00000000;
 8001826:	4b6b      	ldr	r3, [pc, #428]	; (80019d4 <QTR8_read+0x29c>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
	int pos = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	607b      	str	r3, [r7, #4]
  int active = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	603b      	str	r3, [r7, #0]

	if (HAL_GPIO_ReadPin(SENSOR1_GPIO_Port, SENSOR1_Pin)) {
 8001834:	2101      	movs	r1, #1
 8001836:	4866      	ldr	r0, [pc, #408]	; (80019d0 <QTR8_read+0x298>)
 8001838:	f002 f90a 	bl	8003a50 <HAL_GPIO_ReadPin>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00f      	beq.n	8001862 <QTR8_read+0x12a>
		sensor_read |= 0x00000001;
 8001842:	4b64      	ldr	r3, [pc, #400]	; (80019d4 <QTR8_read+0x29c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	4a62      	ldr	r2, [pc, #392]	; (80019d4 <QTR8_read+0x29c>)
 800184c:	6013      	str	r3, [r2, #0]
		pos += 1000;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001854:	607b      	str	r3, [r7, #4]
    active++;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	3301      	adds	r3, #1
 800185a:	603b      	str	r3, [r7, #0]
		last_end = 1;
 800185c:	4b5e      	ldr	r3, [pc, #376]	; (80019d8 <QTR8_read+0x2a0>)
 800185e:	2201      	movs	r2, #1
 8001860:	601a      	str	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(SENSOR2_GPIO_Port, SENSOR2_Pin)) {
 8001862:	2102      	movs	r1, #2
 8001864:	485a      	ldr	r0, [pc, #360]	; (80019d0 <QTR8_read+0x298>)
 8001866:	f002 f8f3 	bl	8003a50 <HAL_GPIO_ReadPin>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00c      	beq.n	800188a <QTR8_read+0x152>
		sensor_read |= 0x00000010;
 8001870:	4b58      	ldr	r3, [pc, #352]	; (80019d4 <QTR8_read+0x29c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f043 0310 	orr.w	r3, r3, #16
 8001878:	4a56      	ldr	r2, [pc, #344]	; (80019d4 <QTR8_read+0x29c>)
 800187a:	6013      	str	r3, [r2, #0]
		pos += 2000;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001882:	607b      	str	r3, [r7, #4]
    active++;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	3301      	adds	r3, #1
 8001888:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR3_GPIO_Port, SENSOR3_Pin)) {
 800188a:	2104      	movs	r1, #4
 800188c:	4850      	ldr	r0, [pc, #320]	; (80019d0 <QTR8_read+0x298>)
 800188e:	f002 f8df 	bl	8003a50 <HAL_GPIO_ReadPin>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00c      	beq.n	80018b2 <QTR8_read+0x17a>
		sensor_read |= 0x00000100;
 8001898:	4b4e      	ldr	r3, [pc, #312]	; (80019d4 <QTR8_read+0x29c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a0:	4a4c      	ldr	r2, [pc, #304]	; (80019d4 <QTR8_read+0x29c>)
 80018a2:	6013      	str	r3, [r2, #0]
		pos += 3000;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80018aa:	607b      	str	r3, [r7, #4]
    active++;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	3301      	adds	r3, #1
 80018b0:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR4_GPIO_Port, SENSOR4_Pin)) {
 80018b2:	2108      	movs	r1, #8
 80018b4:	4846      	ldr	r0, [pc, #280]	; (80019d0 <QTR8_read+0x298>)
 80018b6:	f002 f8cb 	bl	8003a50 <HAL_GPIO_ReadPin>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00c      	beq.n	80018da <QTR8_read+0x1a2>
		sensor_read |= 0x00001000;
 80018c0:	4b44      	ldr	r3, [pc, #272]	; (80019d4 <QTR8_read+0x29c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018c8:	4a42      	ldr	r2, [pc, #264]	; (80019d4 <QTR8_read+0x29c>)
 80018ca:	6013      	str	r3, [r2, #0]
		pos += 4000;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 80018d2:	607b      	str	r3, [r7, #4]
    active++;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	3301      	adds	r3, #1
 80018d8:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR5_GPIO_Port, SENSOR5_Pin)) {
 80018da:	2110      	movs	r1, #16
 80018dc:	483c      	ldr	r0, [pc, #240]	; (80019d0 <QTR8_read+0x298>)
 80018de:	f002 f8b7 	bl	8003a50 <HAL_GPIO_ReadPin>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00d      	beq.n	8001904 <QTR8_read+0x1cc>
		sensor_read |= 0x00010000;
 80018e8:	4b3a      	ldr	r3, [pc, #232]	; (80019d4 <QTR8_read+0x29c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f0:	4a38      	ldr	r2, [pc, #224]	; (80019d4 <QTR8_read+0x29c>)
 80018f2:	6013      	str	r3, [r2, #0]
		pos += 5000;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80018fa:	3308      	adds	r3, #8
 80018fc:	607b      	str	r3, [r7, #4]
    active++;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	3301      	adds	r3, #1
 8001902:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR6_GPIO_Port, SENSOR6_Pin)) {
 8001904:	2120      	movs	r1, #32
 8001906:	4832      	ldr	r0, [pc, #200]	; (80019d0 <QTR8_read+0x298>)
 8001908:	f002 f8a2 	bl	8003a50 <HAL_GPIO_ReadPin>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00d      	beq.n	800192e <QTR8_read+0x1f6>
		sensor_read |= 0x00100000;
 8001912:	4b30      	ldr	r3, [pc, #192]	; (80019d4 <QTR8_read+0x29c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800191a:	4a2e      	ldr	r2, [pc, #184]	; (80019d4 <QTR8_read+0x29c>)
 800191c:	6013      	str	r3, [r2, #0]
		pos += 6000;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8001924:	3310      	adds	r3, #16
 8001926:	607b      	str	r3, [r7, #4]
    active++;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	3301      	adds	r3, #1
 800192c:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR7_GPIO_Port, SENSOR7_Pin)) {
 800192e:	2140      	movs	r1, #64	; 0x40
 8001930:	4827      	ldr	r0, [pc, #156]	; (80019d0 <QTR8_read+0x298>)
 8001932:	f002 f88d 	bl	8003a50 <HAL_GPIO_ReadPin>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d00d      	beq.n	8001958 <QTR8_read+0x220>
		sensor_read |= 0x01000000;
 800193c:	4b25      	ldr	r3, [pc, #148]	; (80019d4 <QTR8_read+0x29c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001944:	4a23      	ldr	r2, [pc, #140]	; (80019d4 <QTR8_read+0x29c>)
 8001946:	6013      	str	r3, [r2, #0]
		pos += 7000;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f503 53da 	add.w	r3, r3, #6976	; 0x1b40
 800194e:	3318      	adds	r3, #24
 8001950:	607b      	str	r3, [r7, #4]
    active++;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	3301      	adds	r3, #1
 8001956:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR8_GPIO_Port, SENSOR8_Pin)) {
 8001958:	2180      	movs	r1, #128	; 0x80
 800195a:	481d      	ldr	r0, [pc, #116]	; (80019d0 <QTR8_read+0x298>)
 800195c:	f002 f878 	bl	8003a50 <HAL_GPIO_ReadPin>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00f      	beq.n	8001986 <QTR8_read+0x24e>
		sensor_read |= 0x10000000;
 8001966:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <QTR8_read+0x29c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196e:	4a19      	ldr	r2, [pc, #100]	; (80019d4 <QTR8_read+0x29c>)
 8001970:	6013      	str	r3, [r2, #0]
		pos += 8000;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8001978:	607b      	str	r3, [r7, #4]
    active++;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	3301      	adds	r3, #1
 800197e:	603b      	str	r3, [r7, #0]
		last_end = 0;
 8001980:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <QTR8_read+0x2a0>)
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
  }

  HAL_GPIO_WritePin(LEDON_GPIO_Port, LEDON_Pin, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	2101      	movs	r1, #1
 800198a:	4810      	ldr	r0, [pc, #64]	; (80019cc <QTR8_read+0x294>)
 800198c:	f002 f877 	bl	8003a7e <HAL_GPIO_WritePin>

  actives = active;
 8001990:	4a12      	ldr	r2, [pc, #72]	; (80019dc <QTR8_read+0x2a4>)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	6013      	str	r3, [r2, #0]
	position = pos/active;
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	fb92 f3f3 	sdiv	r3, r2, r3
 800199e:	4a10      	ldr	r2, [pc, #64]	; (80019e0 <QTR8_read+0x2a8>)
 80019a0:	6013      	str	r3, [r2, #0]

	if (actives == 0)
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <QTR8_read+0x2a4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d105      	bne.n	80019b6 <QTR8_read+0x27e>
		last_idle++;
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <QTR8_read+0x2ac>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	3301      	adds	r3, #1
 80019b0:	4a0c      	ldr	r2, [pc, #48]	; (80019e4 <QTR8_read+0x2ac>)
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	e002      	b.n	80019bc <QTR8_read+0x284>
	else
		last_idle = 0;
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <QTR8_read+0x2ac>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]

	return pos/active;
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	fb92 f3f3 	sdiv	r3, r2, r3
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40010c00 	.word	0x40010c00
 80019d0:	40010800 	.word	0x40010800
 80019d4:	2000025c 	.word	0x2000025c
 80019d8:	200002a8 	.word	0x200002a8
 80019dc:	200002b8 	.word	0x200002b8
 80019e0:	20000260 	.word	0x20000260
 80019e4:	200002ac 	.word	0x200002ac

080019e8 <forward_brake>:


void forward_brake(int pos_right, int pos_left)
{
 80019e8:	b5b0      	push	{r4, r5, r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
	if (actives == 0)
 80019f2:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <forward_brake+0x3c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d102      	bne.n	8001a00 <forward_brake+0x18>
		sharp_turn();
 80019fa:	f7ff fe35 	bl	8001668 <sharp_turn>
	else
	  motor_control(pos_right, pos_left);
}
 80019fe:	e00d      	b.n	8001a1c <forward_brake+0x34>
	  motor_control(pos_right, pos_left);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7fe fcff 	bl	8000404 <__aeabi_i2d>
 8001a06:	4604      	mov	r4, r0
 8001a08:	460d      	mov	r5, r1
 8001a0a:	6838      	ldr	r0, [r7, #0]
 8001a0c:	f7fe fcfa 	bl	8000404 <__aeabi_i2d>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4620      	mov	r0, r4
 8001a16:	4629      	mov	r1, r5
 8001a18:	f7ff fd42 	bl	80014a0 <motor_control>
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bdb0      	pop	{r4, r5, r7, pc}
 8001a24:	200002b8 	.word	0x200002b8

08001a28 <past_errors>:

void past_errors (int error)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  for (int i = 9; i > 0; i--)
 8001a30:	2309      	movs	r3, #9
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	e00b      	b.n	8001a4e <past_errors+0x26>
      errors[i] = errors[i-1];
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <past_errors+0x3c>)
 8001a3c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a40:	4908      	ldr	r1, [pc, #32]	; (8001a64 <past_errors+0x3c>)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int i = 9; i > 0; i--)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	dcf0      	bgt.n	8001a36 <past_errors+0xe>
  errors[0] = error;
 8001a54:	4a03      	ldr	r2, [pc, #12]	; (8001a64 <past_errors+0x3c>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6013      	str	r3, [r2, #0]
}
 8001a5a:	bf00      	nop
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	20000280 	.word	0x20000280

08001a68 <errors_sum>:

int errors_sum (int index, int abs)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  int sum = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < index; i++)
 8001a76:	2300      	movs	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	e01a      	b.n	8001ab2 <errors_sum+0x4a>
  {
    if (abs == 1 && errors[i] < 0)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d10d      	bne.n	8001a9e <errors_sum+0x36>
 8001a82:	4a11      	ldr	r2, [pc, #68]	; (8001ac8 <errors_sum+0x60>)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	da07      	bge.n	8001a9e <errors_sum+0x36>
      sum += -errors[i];
 8001a8e:	4a0e      	ldr	r2, [pc, #56]	; (8001ac8 <errors_sum+0x60>)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	e006      	b.n	8001aac <errors_sum+0x44>
    else
      sum += errors[i];
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <errors_sum+0x60>)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < index; i++)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	dbe0      	blt.n	8001a7c <errors_sum+0x14>
  }
  return sum;
 8001aba:	68fb      	ldr	r3, [r7, #12]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000280 	.word	0x20000280

08001acc <PID_control>:

void PID_control() {
 8001acc:	b590      	push	{r4, r7, lr}
 8001ace:	b087      	sub	sp, #28
 8001ad0:	af00      	add	r7, sp, #0
  uint16_t position = QTR8_read();
 8001ad2:	f7ff fe31 	bl	8001738 <QTR8_read>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	81fb      	strh	r3, [r7, #14]
  int error = 4500 - position;
 8001ada:	89fb      	ldrh	r3, [r7, #14]
 8001adc:	f5c3 538c 	rsb	r3, r3, #4480	; 0x1180
 8001ae0:	3314      	adds	r3, #20
 8001ae2:	60bb      	str	r3, [r7, #8]
  past_errors(error);
 8001ae4:	68b8      	ldr	r0, [r7, #8]
 8001ae6:	f7ff ff9f 	bl	8001a28 <past_errors>

  P = error;
 8001aea:	4a55      	ldr	r2, [pc, #340]	; (8001c40 <PID_control+0x174>)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	6013      	str	r3, [r2, #0]
  I = errors_sum(5, 0);
 8001af0:	2100      	movs	r1, #0
 8001af2:	2005      	movs	r0, #5
 8001af4:	f7ff ffb8 	bl	8001a68 <errors_sum>
 8001af8:	4603      	mov	r3, r0
 8001afa:	4a52      	ldr	r2, [pc, #328]	; (8001c44 <PID_control+0x178>)
 8001afc:	6013      	str	r3, [r2, #0]
  D = error - lastError;
 8001afe:	4b52      	ldr	r3, [pc, #328]	; (8001c48 <PID_control+0x17c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	4a51      	ldr	r2, [pc, #324]	; (8001c4c <PID_control+0x180>)
 8001b08:	6013      	str	r3, [r2, #0]
  R = errors_sum(5, 1);
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	2005      	movs	r0, #5
 8001b0e:	f7ff ffab 	bl	8001a68 <errors_sum>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4a4e      	ldr	r2, [pc, #312]	; (8001c50 <PID_control+0x184>)
 8001b16:	6013      	str	r3, [r2, #0]
  lastError = error;
 8001b18:	4a4b      	ldr	r2, [pc, #300]	; (8001c48 <PID_control+0x17c>)
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	6013      	str	r3, [r2, #0]

  int motorspeed = P*Kp + I*Ki + D*Kd;
 8001b1e:	4b48      	ldr	r3, [pc, #288]	; (8001c40 <PID_control+0x174>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff f86a 	bl	8000bfc <__aeabi_i2f>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	4b4a      	ldr	r3, [pc, #296]	; (8001c54 <PID_control+0x188>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4610      	mov	r0, r2
 8001b32:	f7ff f8b7 	bl	8000ca4 <__aeabi_fmul>
 8001b36:	4603      	mov	r3, r0
 8001b38:	461c      	mov	r4, r3
 8001b3a:	4b42      	ldr	r3, [pc, #264]	; (8001c44 <PID_control+0x178>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff f85c 	bl	8000bfc <__aeabi_i2f>
 8001b44:	4602      	mov	r2, r0
 8001b46:	4b44      	ldr	r3, [pc, #272]	; (8001c58 <PID_control+0x18c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	f7ff f8a9 	bl	8000ca4 <__aeabi_fmul>
 8001b52:	4603      	mov	r3, r0
 8001b54:	4619      	mov	r1, r3
 8001b56:	4620      	mov	r0, r4
 8001b58:	f7fe ff9c 	bl	8000a94 <__addsf3>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	461c      	mov	r4, r3
 8001b60:	4b3a      	ldr	r3, [pc, #232]	; (8001c4c <PID_control+0x180>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff f849 	bl	8000bfc <__aeabi_i2f>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	4b3b      	ldr	r3, [pc, #236]	; (8001c5c <PID_control+0x190>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4619      	mov	r1, r3
 8001b72:	4610      	mov	r0, r2
 8001b74:	f7ff f896 	bl	8000ca4 <__aeabi_fmul>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	f7fe ff89 	bl	8000a94 <__addsf3>
 8001b82:	4603      	mov	r3, r0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fa53 	bl	8001030 <__aeabi_f2iz>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	607b      	str	r3, [r7, #4]

  int motorspeedl = basespeedl + motorspeed - R*Kr;
 8001b8e:	4b34      	ldr	r3, [pc, #208]	; (8001c60 <PID_control+0x194>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff f830 	bl	8000bfc <__aeabi_i2f>
 8001b9c:	4604      	mov	r4, r0
 8001b9e:	4b2c      	ldr	r3, [pc, #176]	; (8001c50 <PID_control+0x184>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff f82a 	bl	8000bfc <__aeabi_i2f>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	4b2e      	ldr	r3, [pc, #184]	; (8001c64 <PID_control+0x198>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	f7ff f877 	bl	8000ca4 <__aeabi_fmul>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4620      	mov	r0, r4
 8001bbc:	f7fe ff68 	bl	8000a90 <__aeabi_fsub>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fa34 	bl	8001030 <__aeabi_f2iz>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	617b      	str	r3, [r7, #20]
  int motorspeedr = basespeedr - motorspeed - R*Kr;
 8001bcc:	4b26      	ldr	r3, [pc, #152]	; (8001c68 <PID_control+0x19c>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff f811 	bl	8000bfc <__aeabi_i2f>
 8001bda:	4604      	mov	r4, r0
 8001bdc:	4b1c      	ldr	r3, [pc, #112]	; (8001c50 <PID_control+0x184>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff f80b 	bl	8000bfc <__aeabi_i2f>
 8001be6:	4602      	mov	r2, r0
 8001be8:	4b1e      	ldr	r3, [pc, #120]	; (8001c64 <PID_control+0x198>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4619      	mov	r1, r3
 8001bee:	4610      	mov	r0, r2
 8001bf0:	f7ff f858 	bl	8000ca4 <__aeabi_fmul>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4620      	mov	r0, r4
 8001bfa:	f7fe ff49 	bl	8000a90 <__aeabi_fsub>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fa15 	bl	8001030 <__aeabi_f2iz>
 8001c06:	4603      	mov	r3, r0
 8001c08:	613b      	str	r3, [r7, #16]

  if (motorspeedl > maxspeedl)
 8001c0a:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <PID_control+0x1a0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	dd02      	ble.n	8001c1a <PID_control+0x14e>
    motorspeedl = maxspeedl;
 8001c14:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <PID_control+0x1a0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	617b      	str	r3, [r7, #20]
  if (motorspeedr > maxspeedr)
 8001c1a:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <PID_control+0x1a4>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	dd02      	ble.n	8001c2a <PID_control+0x15e>
    motorspeedr = maxspeedr;
 8001c24:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <PID_control+0x1a4>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	613b      	str	r3, [r7, #16]

  	Battery_ADC_measurement();
 8001c2a:	f7ff fb85 	bl	8001338 <Battery_ADC_measurement>
	forward_brake(motorspeedr, motorspeedl);
 8001c2e:	6979      	ldr	r1, [r7, #20]
 8001c30:	6938      	ldr	r0, [r7, #16]
 8001c32:	f7ff fed9 	bl	80019e8 <forward_brake>
}
 8001c36:	bf00      	nop
 8001c38:	371c      	adds	r7, #28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd90      	pop	{r4, r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	2000026c 	.word	0x2000026c
 8001c44:	20000270 	.word	0x20000270
 8001c48:	2000027c 	.word	0x2000027c
 8001c4c:	20000274 	.word	0x20000274
 8001c50:	20000278 	.word	0x20000278
 8001c54:	20000000 	.word	0x20000000
 8001c58:	20000264 	.word	0x20000264
 8001c5c:	20000004 	.word	0x20000004
 8001c60:	20000028 	.word	0x20000028
 8001c64:	20000268 	.word	0x20000268
 8001c68:	20000024 	.word	0x20000024
 8001c6c:	20000020 	.word	0x20000020
 8001c70:	2000001c 	.word	0x2000001c

08001c74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c78:	f000 fef4 	bl	8002a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c7c:	f000 f85a 	bl	8001d34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c80:	f7ff fac8 	bl	8001214 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001c84:	f000 fc34 	bl	80024f0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001c88:	f000 fc82 	bl	8002590 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001c8c:	f000 fcce 	bl	800262c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001c90:	f000 fdde 	bl	8002850 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001c94:	f000 fe06 	bl	80028a4 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001c98:	f7ff fa42 	bl	8001120 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
   HAL_UART_Receive_IT(&huart1,(uint8_t*)rxData,5); //Oczekiwanie na dane z HC-05 i włączenie timerów
 8001c9c:	2205      	movs	r2, #5
 8001c9e:	491e      	ldr	r1, [pc, #120]	; (8001d18 <main+0xa4>)
 8001ca0:	481e      	ldr	r0, [pc, #120]	; (8001d1c <main+0xa8>)
 8001ca2:	f003 fc28 	bl	80054f6 <HAL_UART_Receive_IT>
   HAL_TIM_Base_Start(&htim1);
 8001ca6:	481e      	ldr	r0, [pc, #120]	; (8001d20 <main+0xac>)
 8001ca8:	f002 fcce 	bl	8004648 <HAL_TIM_Base_Start>
   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001cac:	2100      	movs	r1, #0
 8001cae:	481d      	ldr	r0, [pc, #116]	; (8001d24 <main+0xb0>)
 8001cb0:	f002 fdc4 	bl	800483c <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001cb4:	2108      	movs	r1, #8
 8001cb6:	481b      	ldr	r0, [pc, #108]	; (8001d24 <main+0xb0>)
 8001cb8:	f002 fdc0 	bl	800483c <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001cbc:	210c      	movs	r1, #12
 8001cbe:	4819      	ldr	r0, [pc, #100]	; (8001d24 <main+0xb0>)
 8001cc0:	f002 fdbc 	bl	800483c <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001cc4:	2104      	movs	r1, #4
 8001cc6:	4817      	ldr	r0, [pc, #92]	; (8001d24 <main+0xb0>)
 8001cc8:	f002 fdb8 	bl	800483c <HAL_TIM_PWM_Start>
   //__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_1, 100);
   __HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_2, 100);
 8001ccc:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <main+0xb0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2264      	movs	r2, #100	; 0x64
 8001cd2:	639a      	str	r2, [r3, #56]	; 0x38
   __HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_1, 0);
 8001cd4:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <main+0xb0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	635a      	str	r2, [r3, #52]	; 0x34
   __HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_3, 100);
 8001cdc:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <main+0xb0>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2264      	movs	r2, #100	; 0x64
 8001ce2:	63da      	str	r2, [r3, #60]	; 0x3c
   __HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_4, 100);
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <main+0xb0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2264      	movs	r2, #100	; 0x64
 8001cea:	641a      	str	r2, [r3, #64]	; 0x40
   HAL_Delay(2000);
 8001cec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001cf0:	f000 ff1a 	bl	8002b28 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  PID_control();
 8001cf4:	f7ff feea 	bl	8001acc <PID_control>
	  if(battery_procentage_raw < 85)
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <main+0xb4>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	490b      	ldr	r1, [pc, #44]	; (8001d2c <main+0xb8>)
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff f96e 	bl	8000fe0 <__aeabi_fcmplt>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d004      	beq.n	8001d14 <main+0xa0>
	  {
		  /*If battery is low stop robot*/
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2140      	movs	r1, #64	; 0x40
 8001d0e:	4808      	ldr	r0, [pc, #32]	; (8001d30 <main+0xbc>)
 8001d10:	f001 feb5 	bl	8003a7e <HAL_GPIO_WritePin>
	  PID_control();
 8001d14:	e7ee      	b.n	8001cf4 <main+0x80>
 8001d16:	bf00      	nop
 8001d18:	200002b0 	.word	0x200002b0
 8001d1c:	200003a4 	.word	0x200003a4
 8001d20:	200002cc 	.word	0x200002cc
 8001d24:	2000035c 	.word	0x2000035c
 8001d28:	200002c4 	.word	0x200002c4
 8001d2c:	42aa0000 	.word	0x42aa0000
 8001d30:	40010c00 	.word	0x40010c00

08001d34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b094      	sub	sp, #80	; 0x50
 8001d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d3e:	2228      	movs	r2, #40	; 0x28
 8001d40:	2100      	movs	r1, #0
 8001d42:	4618      	mov	r0, r3
 8001d44:	f004 f9aa 	bl	800609c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d58:	1d3b      	adds	r3, r7, #4
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	609a      	str	r2, [r3, #8]
 8001d62:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d64:	2301      	movs	r3, #1
 8001d66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d72:	2301      	movs	r3, #1
 8001d74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d76:	2302      	movs	r3, #2
 8001d78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d80:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001d84:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f001 fe90 	bl	8003ab0 <HAL_RCC_OscConfig>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001d96:	f000 fa7b 	bl	8002290 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d9a:	230f      	movs	r3, #15
 8001d9c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001daa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dac:	2300      	movs	r3, #0
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	2102      	movs	r1, #2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f002 f8fc 	bl	8003fb4 <HAL_RCC_ClockConfig>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001dc2:	f000 fa65 	bl	8002290 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dce:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dd0:	1d3b      	adds	r3, r7, #4
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f002 fa7c 	bl	80042d0 <HAL_RCCEx_PeriphCLKConfig>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001dde:	f000 fa57 	bl	8002290 <Error_Handler>
  }
}
 8001de2:	bf00      	nop
 8001de4:	3750      	adds	r7, #80	; 0x50
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
	...

08001dec <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001dec:	b5b0      	push	{r4, r5, r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af04      	add	r7, sp, #16
 8001df2:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a98      	ldr	r2, [pc, #608]	; (800205c <HAL_UART_RxCpltCallback+0x270>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	f040 821c 	bne.w	8002238 <HAL_UART_RxCpltCallback+0x44c>
	{
		liczba = atoi(rxData);
 8001e00:	4897      	ldr	r0, [pc, #604]	; (8002060 <HAL_UART_RxCpltCallback+0x274>)
 8001e02:	f004 f91d 	bl	8006040 <atoi>
 8001e06:	4603      	mov	r3, r0
 8001e08:	4a96      	ldr	r2, [pc, #600]	; (8002064 <HAL_UART_RxCpltCallback+0x278>)
 8001e0a:	6013      	str	r3, [r2, #0]
		if(rxData[0]==78) // Ascii value of 'N' is 78 (N for NO)              START I STOP
 8001e0c:	4b94      	ldr	r3, [pc, #592]	; (8002060 <HAL_UART_RxCpltCallback+0x274>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b4e      	cmp	r3, #78	; 0x4e
 8001e12:	d10a      	bne.n	8001e2a <HAL_UART_RxCpltCallback+0x3e>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001e14:	2200      	movs	r2, #0
 8001e16:	2140      	movs	r1, #64	; 0x40
 8001e18:	4893      	ldr	r0, [pc, #588]	; (8002068 <HAL_UART_RxCpltCallback+0x27c>)
 8001e1a:	f001 fe30 	bl	8003a7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e24:	4891      	ldr	r0, [pc, #580]	; (800206c <HAL_UART_RxCpltCallback+0x280>)
 8001e26:	f001 fe2a 	bl	8003a7e <HAL_GPIO_WritePin>
		}
		if (rxData[0]==89) // Ascii value of 'Y' is 89 (Y for YES)
 8001e2a:	4b8d      	ldr	r3, [pc, #564]	; (8002060 <HAL_UART_RxCpltCallback+0x274>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b59      	cmp	r3, #89	; 0x59
 8001e30:	d10c      	bne.n	8001e4c <HAL_UART_RxCpltCallback+0x60>
		{
			Battery_ADC_measurement();
 8001e32:	f7ff fa81 	bl	8001338 <Battery_ADC_measurement>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001e36:	2201      	movs	r2, #1
 8001e38:	2140      	movs	r1, #64	; 0x40
 8001e3a:	488b      	ldr	r0, [pc, #556]	; (8002068 <HAL_UART_RxCpltCallback+0x27c>)
 8001e3c:	f001 fe1f 	bl	8003a7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001e40:	2201      	movs	r2, #1
 8001e42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e46:	4889      	ldr	r0, [pc, #548]	; (800206c <HAL_UART_RxCpltCallback+0x280>)
 8001e48:	f001 fe19 	bl	8003a7e <HAL_GPIO_WritePin>
		}
    ////////////////////////////////////////////////////////              MAPY DO ROBOTA
    if(rxData[0]==83){ //S==83 SZYBKI//WARIATUŃCIO SKONCZONY
 8001e4c:	4b84      	ldr	r3, [pc, #528]	; (8002060 <HAL_UART_RxCpltCallback+0x274>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b53      	cmp	r3, #83	; 0x53
 8001e52:	d11e      	bne.n	8001e92 <HAL_UART_RxCpltCallback+0xa6>
    ARR=3;
 8001e54:	4b86      	ldr	r3, [pc, #536]	; (8002070 <HAL_UART_RxCpltCallback+0x284>)
 8001e56:	2203      	movs	r2, #3
 8001e58:	601a      	str	r2, [r3, #0]
    basespeedr = 100;
 8001e5a:	4b86      	ldr	r3, [pc, #536]	; (8002074 <HAL_UART_RxCpltCallback+0x288>)
 8001e5c:	2264      	movs	r2, #100	; 0x64
 8001e5e:	601a      	str	r2, [r3, #0]
    basespeedl = 100;
 8001e60:	4b85      	ldr	r3, [pc, #532]	; (8002078 <HAL_UART_RxCpltCallback+0x28c>)
 8001e62:	2264      	movs	r2, #100	; 0x64
 8001e64:	601a      	str	r2, [r3, #0]
    maxspeedl=100;
 8001e66:	4b85      	ldr	r3, [pc, #532]	; (800207c <HAL_UART_RxCpltCallback+0x290>)
 8001e68:	2264      	movs	r2, #100	; 0x64
 8001e6a:	601a      	str	r2, [r3, #0]
    maxspeedr=100;
 8001e6c:	4b84      	ldr	r3, [pc, #528]	; (8002080 <HAL_UART_RxCpltCallback+0x294>)
 8001e6e:	2264      	movs	r2, #100	; 0x64
 8001e70:	601a      	str	r2, [r3, #0]
    pr11=-160;
 8001e72:	4b84      	ldr	r3, [pc, #528]	; (8002084 <HAL_UART_RxCpltCallback+0x298>)
 8001e74:	f06f 029f 	mvn.w	r2, #159	; 0x9f
 8001e78:	601a      	str	r2, [r3, #0]
    pr12=160;
 8001e7a:	4b83      	ldr	r3, [pc, #524]	; (8002088 <HAL_UART_RxCpltCallback+0x29c>)
 8001e7c:	22a0      	movs	r2, #160	; 0xa0
 8001e7e:	601a      	str	r2, [r3, #0]
    pr21=0;//-150
 8001e80:	4b82      	ldr	r3, [pc, #520]	; (800208c <HAL_UART_RxCpltCallback+0x2a0>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
    pr22=120;
 8001e86:	4b82      	ldr	r3, [pc, #520]	; (8002090 <HAL_UART_RxCpltCallback+0x2a4>)
 8001e88:	2278      	movs	r2, #120	; 0x78
 8001e8a:	601a      	str	r2, [r3, #0]
    Kd=350;
 8001e8c:	4b81      	ldr	r3, [pc, #516]	; (8002094 <HAL_UART_RxCpltCallback+0x2a8>)
 8001e8e:	4a82      	ldr	r2, [pc, #520]	; (8002098 <HAL_UART_RxCpltCallback+0x2ac>)
 8001e90:	601a      	str	r2, [r3, #0]
    }
    /////////////////////////////////////////////////////////
    if(rxData[0]==68){ //D==68 DOKLADNY UKOŃCZONY
 8001e92:	4b73      	ldr	r3, [pc, #460]	; (8002060 <HAL_UART_RxCpltCallback+0x274>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b44      	cmp	r3, #68	; 0x44
 8001e98:	d11e      	bne.n	8001ed8 <HAL_UART_RxCpltCallback+0xec>
    ARR=3;
 8001e9a:	4b75      	ldr	r3, [pc, #468]	; (8002070 <HAL_UART_RxCpltCallback+0x284>)
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	601a      	str	r2, [r3, #0]
    basespeedr = 90;
 8001ea0:	4b74      	ldr	r3, [pc, #464]	; (8002074 <HAL_UART_RxCpltCallback+0x288>)
 8001ea2:	225a      	movs	r2, #90	; 0x5a
 8001ea4:	601a      	str	r2, [r3, #0]
    basespeedl = 90;
 8001ea6:	4b74      	ldr	r3, [pc, #464]	; (8002078 <HAL_UART_RxCpltCallback+0x28c>)
 8001ea8:	225a      	movs	r2, #90	; 0x5a
 8001eaa:	601a      	str	r2, [r3, #0]
    maxspeedl=90;
 8001eac:	4b73      	ldr	r3, [pc, #460]	; (800207c <HAL_UART_RxCpltCallback+0x290>)
 8001eae:	225a      	movs	r2, #90	; 0x5a
 8001eb0:	601a      	str	r2, [r3, #0]
    maxspeedr=90;
 8001eb2:	4b73      	ldr	r3, [pc, #460]	; (8002080 <HAL_UART_RxCpltCallback+0x294>)
 8001eb4:	225a      	movs	r2, #90	; 0x5a
 8001eb6:	601a      	str	r2, [r3, #0]
    pr11=-160;
 8001eb8:	4b72      	ldr	r3, [pc, #456]	; (8002084 <HAL_UART_RxCpltCallback+0x298>)
 8001eba:	f06f 029f 	mvn.w	r2, #159	; 0x9f
 8001ebe:	601a      	str	r2, [r3, #0]
    pr12=160;
 8001ec0:	4b71      	ldr	r3, [pc, #452]	; (8002088 <HAL_UART_RxCpltCallback+0x29c>)
 8001ec2:	22a0      	movs	r2, #160	; 0xa0
 8001ec4:	601a      	str	r2, [r3, #0]
    pr21=0;//-50
 8001ec6:	4b71      	ldr	r3, [pc, #452]	; (800208c <HAL_UART_RxCpltCallback+0x2a0>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
    pr22=120;
 8001ecc:	4b70      	ldr	r3, [pc, #448]	; (8002090 <HAL_UART_RxCpltCallback+0x2a4>)
 8001ece:	2278      	movs	r2, #120	; 0x78
 8001ed0:	601a      	str	r2, [r3, #0]
    Kd=350;
 8001ed2:	4b70      	ldr	r3, [pc, #448]	; (8002094 <HAL_UART_RxCpltCallback+0x2a8>)
 8001ed4:	4a70      	ldr	r2, [pc, #448]	; (8002098 <HAL_UART_RxCpltCallback+0x2ac>)
 8001ed6:	601a      	str	r2, [r3, #0]
    }
    ////////////////////////////////////////////////////////
    if(rxData[0]==67){ //c==67 DZIKUS
 8001ed8:	4b61      	ldr	r3, [pc, #388]	; (8002060 <HAL_UART_RxCpltCallback+0x274>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b43      	cmp	r3, #67	; 0x43
 8001ede:	d11f      	bne.n	8001f20 <HAL_UART_RxCpltCallback+0x134>
    ARR=3;
 8001ee0:	4b63      	ldr	r3, [pc, #396]	; (8002070 <HAL_UART_RxCpltCallback+0x284>)
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	601a      	str	r2, [r3, #0]
    basespeedr = 140;
 8001ee6:	4b63      	ldr	r3, [pc, #396]	; (8002074 <HAL_UART_RxCpltCallback+0x288>)
 8001ee8:	228c      	movs	r2, #140	; 0x8c
 8001eea:	601a      	str	r2, [r3, #0]
    basespeedl = 140;
 8001eec:	4b62      	ldr	r3, [pc, #392]	; (8002078 <HAL_UART_RxCpltCallback+0x28c>)
 8001eee:	228c      	movs	r2, #140	; 0x8c
 8001ef0:	601a      	str	r2, [r3, #0]
    maxspeedl=140;
 8001ef2:	4b62      	ldr	r3, [pc, #392]	; (800207c <HAL_UART_RxCpltCallback+0x290>)
 8001ef4:	228c      	movs	r2, #140	; 0x8c
 8001ef6:	601a      	str	r2, [r3, #0]
    maxspeedr=140;
 8001ef8:	4b61      	ldr	r3, [pc, #388]	; (8002080 <HAL_UART_RxCpltCallback+0x294>)
 8001efa:	228c      	movs	r2, #140	; 0x8c
 8001efc:	601a      	str	r2, [r3, #0]
    pr11=-175;
 8001efe:	4b61      	ldr	r3, [pc, #388]	; (8002084 <HAL_UART_RxCpltCallback+0x298>)
 8001f00:	f06f 02ae 	mvn.w	r2, #174	; 0xae
 8001f04:	601a      	str	r2, [r3, #0]
    pr12=175;
 8001f06:	4b60      	ldr	r3, [pc, #384]	; (8002088 <HAL_UART_RxCpltCallback+0x29c>)
 8001f08:	22af      	movs	r2, #175	; 0xaf
 8001f0a:	601a      	str	r2, [r3, #0]
    pr21=-80;//-150
 8001f0c:	4b5f      	ldr	r3, [pc, #380]	; (800208c <HAL_UART_RxCpltCallback+0x2a0>)
 8001f0e:	f06f 024f 	mvn.w	r2, #79	; 0x4f
 8001f12:	601a      	str	r2, [r3, #0]
    pr22=130;
 8001f14:	4b5e      	ldr	r3, [pc, #376]	; (8002090 <HAL_UART_RxCpltCallback+0x2a4>)
 8001f16:	2282      	movs	r2, #130	; 0x82
 8001f18:	601a      	str	r2, [r3, #0]
    Kd=350;
 8001f1a:	4b5e      	ldr	r3, [pc, #376]	; (8002094 <HAL_UART_RxCpltCallback+0x2a8>)
 8001f1c:	4a5e      	ldr	r2, [pc, #376]	; (8002098 <HAL_UART_RxCpltCallback+0x2ac>)
 8001f1e:	601a      	str	r2, [r3, #0]
    }
    ////////////////////////////////////////////////////////
    if(rxData[0]==69){ //E==69 IDK EKSPERYMENTALNY
 8001f20:	4b4f      	ldr	r3, [pc, #316]	; (8002060 <HAL_UART_RxCpltCallback+0x274>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b45      	cmp	r3, #69	; 0x45
 8001f26:	d11f      	bne.n	8001f68 <HAL_UART_RxCpltCallback+0x17c>
    ARR=3;
 8001f28:	4b51      	ldr	r3, [pc, #324]	; (8002070 <HAL_UART_RxCpltCallback+0x284>)
 8001f2a:	2203      	movs	r2, #3
 8001f2c:	601a      	str	r2, [r3, #0]
    basespeedr = 150;
 8001f2e:	4b51      	ldr	r3, [pc, #324]	; (8002074 <HAL_UART_RxCpltCallback+0x288>)
 8001f30:	2296      	movs	r2, #150	; 0x96
 8001f32:	601a      	str	r2, [r3, #0]
    basespeedl = 150;
 8001f34:	4b50      	ldr	r3, [pc, #320]	; (8002078 <HAL_UART_RxCpltCallback+0x28c>)
 8001f36:	2296      	movs	r2, #150	; 0x96
 8001f38:	601a      	str	r2, [r3, #0]
    maxspeedl=155;
 8001f3a:	4b50      	ldr	r3, [pc, #320]	; (800207c <HAL_UART_RxCpltCallback+0x290>)
 8001f3c:	229b      	movs	r2, #155	; 0x9b
 8001f3e:	601a      	str	r2, [r3, #0]
    maxspeedr=155;
 8001f40:	4b4f      	ldr	r3, [pc, #316]	; (8002080 <HAL_UART_RxCpltCallback+0x294>)
 8001f42:	229b      	movs	r2, #155	; 0x9b
 8001f44:	601a      	str	r2, [r3, #0]
    pr11=-176;
 8001f46:	4b4f      	ldr	r3, [pc, #316]	; (8002084 <HAL_UART_RxCpltCallback+0x298>)
 8001f48:	f06f 02af 	mvn.w	r2, #175	; 0xaf
 8001f4c:	601a      	str	r2, [r3, #0]
    pr12=176;
 8001f4e:	4b4e      	ldr	r3, [pc, #312]	; (8002088 <HAL_UART_RxCpltCallback+0x29c>)
 8001f50:	22b0      	movs	r2, #176	; 0xb0
 8001f52:	601a      	str	r2, [r3, #0]
    pr21=-80;
 8001f54:	4b4d      	ldr	r3, [pc, #308]	; (800208c <HAL_UART_RxCpltCallback+0x2a0>)
 8001f56:	f06f 024f 	mvn.w	r2, #79	; 0x4f
 8001f5a:	601a      	str	r2, [r3, #0]
    pr22=130;
 8001f5c:	4b4c      	ldr	r3, [pc, #304]	; (8002090 <HAL_UART_RxCpltCallback+0x2a4>)
 8001f5e:	2282      	movs	r2, #130	; 0x82
 8001f60:	601a      	str	r2, [r3, #0]
    Kd=350;
 8001f62:	4b4c      	ldr	r3, [pc, #304]	; (8002094 <HAL_UART_RxCpltCallback+0x2a8>)
 8001f64:	4a4c      	ldr	r2, [pc, #304]	; (8002098 <HAL_UART_RxCpltCallback+0x2ac>)
 8001f66:	601a      	str	r2, [r3, #0]
    }
    ////////////////////////////////////////////////////////
    if(rxData[0]=='T'){ // 90 sredni / na asci trzeba T
 8001f68:	4b3d      	ldr	r3, [pc, #244]	; (8002060 <HAL_UART_RxCpltCallback+0x274>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b54      	cmp	r3, #84	; 0x54
 8001f6e:	d11f      	bne.n	8001fb0 <HAL_UART_RxCpltCallback+0x1c4>
    ARR=3;
 8001f70:	4b3f      	ldr	r3, [pc, #252]	; (8002070 <HAL_UART_RxCpltCallback+0x284>)
 8001f72:	2203      	movs	r2, #3
 8001f74:	601a      	str	r2, [r3, #0]
    basespeedr = 134;
 8001f76:	4b3f      	ldr	r3, [pc, #252]	; (8002074 <HAL_UART_RxCpltCallback+0x288>)
 8001f78:	2286      	movs	r2, #134	; 0x86
 8001f7a:	601a      	str	r2, [r3, #0]
    basespeedl = 134;
 8001f7c:	4b3e      	ldr	r3, [pc, #248]	; (8002078 <HAL_UART_RxCpltCallback+0x28c>)
 8001f7e:	2286      	movs	r2, #134	; 0x86
 8001f80:	601a      	str	r2, [r3, #0]
    maxspeedl=134;
 8001f82:	4b3e      	ldr	r3, [pc, #248]	; (800207c <HAL_UART_RxCpltCallback+0x290>)
 8001f84:	2286      	movs	r2, #134	; 0x86
 8001f86:	601a      	str	r2, [r3, #0]
    maxspeedr=134;
 8001f88:	4b3d      	ldr	r3, [pc, #244]	; (8002080 <HAL_UART_RxCpltCallback+0x294>)
 8001f8a:	2286      	movs	r2, #134	; 0x86
 8001f8c:	601a      	str	r2, [r3, #0]
    pr11=-169;
 8001f8e:	4b3d      	ldr	r3, [pc, #244]	; (8002084 <HAL_UART_RxCpltCallback+0x298>)
 8001f90:	f06f 02a8 	mvn.w	r2, #168	; 0xa8
 8001f94:	601a      	str	r2, [r3, #0]
    pr12=169;
 8001f96:	4b3c      	ldr	r3, [pc, #240]	; (8002088 <HAL_UART_RxCpltCallback+0x29c>)
 8001f98:	22a9      	movs	r2, #169	; 0xa9
 8001f9a:	601a      	str	r2, [r3, #0]
    pr21=-76;
 8001f9c:	4b3b      	ldr	r3, [pc, #236]	; (800208c <HAL_UART_RxCpltCallback+0x2a0>)
 8001f9e:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8001fa2:	601a      	str	r2, [r3, #0]
    pr22=125;
 8001fa4:	4b3a      	ldr	r3, [pc, #232]	; (8002090 <HAL_UART_RxCpltCallback+0x2a4>)
 8001fa6:	227d      	movs	r2, #125	; 0x7d
 8001fa8:	601a      	str	r2, [r3, #0]
    Kd=290;
 8001faa:	4b3a      	ldr	r3, [pc, #232]	; (8002094 <HAL_UART_RxCpltCallback+0x2a8>)
 8001fac:	4a3b      	ldr	r2, [pc, #236]	; (800209c <HAL_UART_RxCpltCallback+0x2b0>)
 8001fae:	601a      	str	r2, [r3, #0]
    }
   ////////////////////////////////////////////////////////
    if(rxData[0]=='H'){ // 90 FAST   /na asci trzeba H
 8001fb0:	4b2b      	ldr	r3, [pc, #172]	; (8002060 <HAL_UART_RxCpltCallback+0x274>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b48      	cmp	r3, #72	; 0x48
 8001fb6:	d11f      	bne.n	8001ff8 <HAL_UART_RxCpltCallback+0x20c>
    ARR=3;
 8001fb8:	4b2d      	ldr	r3, [pc, #180]	; (8002070 <HAL_UART_RxCpltCallback+0x284>)
 8001fba:	2203      	movs	r2, #3
 8001fbc:	601a      	str	r2, [r3, #0]
    basespeedr = 150;
 8001fbe:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <HAL_UART_RxCpltCallback+0x288>)
 8001fc0:	2296      	movs	r2, #150	; 0x96
 8001fc2:	601a      	str	r2, [r3, #0]
    basespeedl = 150;
 8001fc4:	4b2c      	ldr	r3, [pc, #176]	; (8002078 <HAL_UART_RxCpltCallback+0x28c>)
 8001fc6:	2296      	movs	r2, #150	; 0x96
 8001fc8:	601a      	str	r2, [r3, #0]
    maxspeedl=155;
 8001fca:	4b2c      	ldr	r3, [pc, #176]	; (800207c <HAL_UART_RxCpltCallback+0x290>)
 8001fcc:	229b      	movs	r2, #155	; 0x9b
 8001fce:	601a      	str	r2, [r3, #0]
    maxspeedr=155;
 8001fd0:	4b2b      	ldr	r3, [pc, #172]	; (8002080 <HAL_UART_RxCpltCallback+0x294>)
 8001fd2:	229b      	movs	r2, #155	; 0x9b
 8001fd4:	601a      	str	r2, [r3, #0]
    pr11=-176;
 8001fd6:	4b2b      	ldr	r3, [pc, #172]	; (8002084 <HAL_UART_RxCpltCallback+0x298>)
 8001fd8:	f06f 02af 	mvn.w	r2, #175	; 0xaf
 8001fdc:	601a      	str	r2, [r3, #0]
    pr12=176;
 8001fde:	4b2a      	ldr	r3, [pc, #168]	; (8002088 <HAL_UART_RxCpltCallback+0x29c>)
 8001fe0:	22b0      	movs	r2, #176	; 0xb0
 8001fe2:	601a      	str	r2, [r3, #0]
    pr21=-80;
 8001fe4:	4b29      	ldr	r3, [pc, #164]	; (800208c <HAL_UART_RxCpltCallback+0x2a0>)
 8001fe6:	f06f 024f 	mvn.w	r2, #79	; 0x4f
 8001fea:	601a      	str	r2, [r3, #0]
    pr22=130;
 8001fec:	4b28      	ldr	r3, [pc, #160]	; (8002090 <HAL_UART_RxCpltCallback+0x2a4>)
 8001fee:	2282      	movs	r2, #130	; 0x82
 8001ff0:	601a      	str	r2, [r3, #0]
    Kd=290;          ////-teraz edytujemy te wartosci tylko a jak to nie pomoze to lipton
 8001ff2:	4b28      	ldr	r3, [pc, #160]	; (8002094 <HAL_UART_RxCpltCallback+0x2a8>)
 8001ff4:	4a29      	ldr	r2, [pc, #164]	; (800209c <HAL_UART_RxCpltCallback+0x2b0>)
 8001ff6:	601a      	str	r2, [r3, #0]
    }
    ////////////////////////////////////////////////////////
    if(rxData[0]=='L'){ // LAST
 8001ff8:	4b19      	ldr	r3, [pc, #100]	; (8002060 <HAL_UART_RxCpltCallback+0x274>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b4c      	cmp	r3, #76	; 0x4c
 8001ffe:	d11f      	bne.n	8002040 <HAL_UART_RxCpltCallback+0x254>
    ARR=3;
 8002000:	4b1b      	ldr	r3, [pc, #108]	; (8002070 <HAL_UART_RxCpltCallback+0x284>)
 8002002:	2203      	movs	r2, #3
 8002004:	601a      	str	r2, [r3, #0]
    basespeedr = 160;
 8002006:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <HAL_UART_RxCpltCallback+0x288>)
 8002008:	22a0      	movs	r2, #160	; 0xa0
 800200a:	601a      	str	r2, [r3, #0]
    basespeedl = 160;
 800200c:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <HAL_UART_RxCpltCallback+0x28c>)
 800200e:	22a0      	movs	r2, #160	; 0xa0
 8002010:	601a      	str	r2, [r3, #0]
    maxspeedl=160;
 8002012:	4b1a      	ldr	r3, [pc, #104]	; (800207c <HAL_UART_RxCpltCallback+0x290>)
 8002014:	22a0      	movs	r2, #160	; 0xa0
 8002016:	601a      	str	r2, [r3, #0]
    maxspeedr=160;
 8002018:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_UART_RxCpltCallback+0x294>)
 800201a:	22a0      	movs	r2, #160	; 0xa0
 800201c:	601a      	str	r2, [r3, #0]
    pr11=-176;
 800201e:	4b19      	ldr	r3, [pc, #100]	; (8002084 <HAL_UART_RxCpltCallback+0x298>)
 8002020:	f06f 02af 	mvn.w	r2, #175	; 0xaf
 8002024:	601a      	str	r2, [r3, #0]
    pr12=176;
 8002026:	4b18      	ldr	r3, [pc, #96]	; (8002088 <HAL_UART_RxCpltCallback+0x29c>)
 8002028:	22b0      	movs	r2, #176	; 0xb0
 800202a:	601a      	str	r2, [r3, #0]
    pr21=-80;
 800202c:	4b17      	ldr	r3, [pc, #92]	; (800208c <HAL_UART_RxCpltCallback+0x2a0>)
 800202e:	f06f 024f 	mvn.w	r2, #79	; 0x4f
 8002032:	601a      	str	r2, [r3, #0]
    pr22=130;
 8002034:	4b16      	ldr	r3, [pc, #88]	; (8002090 <HAL_UART_RxCpltCallback+0x2a4>)
 8002036:	2282      	movs	r2, #130	; 0x82
 8002038:	601a      	str	r2, [r3, #0]
    Kd=290;          ////-teraz edytujemy te wartosci tylko a jak to nie pomoze to lipton
 800203a:	4b16      	ldr	r3, [pc, #88]	; (8002094 <HAL_UART_RxCpltCallback+0x2a8>)
 800203c:	4a17      	ldr	r2, [pc, #92]	; (800209c <HAL_UART_RxCpltCallback+0x2b0>)
 800203e:	601a      	str	r2, [r3, #0]
    }
    ////////////////////////////////////////////////////////
     if(rxData[0]=='R'){ //DRAG_RACE
 8002040:	4b07      	ldr	r3, [pc, #28]	; (8002060 <HAL_UART_RxCpltCallback+0x274>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b52      	cmp	r3, #82	; 0x52
 8002046:	d142      	bne.n	80020ce <HAL_UART_RxCpltCallback+0x2e2>
     ARR=6;
 8002048:	4b09      	ldr	r3, [pc, #36]	; (8002070 <HAL_UART_RxCpltCallback+0x284>)
 800204a:	2206      	movs	r2, #6
 800204c:	601a      	str	r2, [r3, #0]
     basespeedr = 160;
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <HAL_UART_RxCpltCallback+0x288>)
 8002050:	22a0      	movs	r2, #160	; 0xa0
 8002052:	601a      	str	r2, [r3, #0]
     basespeedl = 160;
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <HAL_UART_RxCpltCallback+0x28c>)
 8002056:	22a0      	movs	r2, #160	; 0xa0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	e021      	b.n	80020a0 <HAL_UART_RxCpltCallback+0x2b4>
 800205c:	40013800 	.word	0x40013800
 8002060:	200002b0 	.word	0x200002b0
 8002064:	200002bc 	.word	0x200002bc
 8002068:	40010c00 	.word	0x40010c00
 800206c:	40011000 	.word	0x40011000
 8002070:	2000002c 	.word	0x2000002c
 8002074:	20000024 	.word	0x20000024
 8002078:	20000028 	.word	0x20000028
 800207c:	20000020 	.word	0x20000020
 8002080:	2000001c 	.word	0x2000001c
 8002084:	20000008 	.word	0x20000008
 8002088:	2000000c 	.word	0x2000000c
 800208c:	20000010 	.word	0x20000010
 8002090:	20000014 	.word	0x20000014
 8002094:	20000004 	.word	0x20000004
 8002098:	43af0000 	.word	0x43af0000
 800209c:	43910000 	.word	0x43910000
     maxspeedl=160;
 80020a0:	4b67      	ldr	r3, [pc, #412]	; (8002240 <HAL_UART_RxCpltCallback+0x454>)
 80020a2:	22a0      	movs	r2, #160	; 0xa0
 80020a4:	601a      	str	r2, [r3, #0]
     maxspeedr=160;
 80020a6:	4b67      	ldr	r3, [pc, #412]	; (8002244 <HAL_UART_RxCpltCallback+0x458>)
 80020a8:	22a0      	movs	r2, #160	; 0xa0
 80020aa:	601a      	str	r2, [r3, #0]
     pr11=-176;
 80020ac:	4b66      	ldr	r3, [pc, #408]	; (8002248 <HAL_UART_RxCpltCallback+0x45c>)
 80020ae:	f06f 02af 	mvn.w	r2, #175	; 0xaf
 80020b2:	601a      	str	r2, [r3, #0]
     pr12=176;
 80020b4:	4b65      	ldr	r3, [pc, #404]	; (800224c <HAL_UART_RxCpltCallback+0x460>)
 80020b6:	22b0      	movs	r2, #176	; 0xb0
 80020b8:	601a      	str	r2, [r3, #0]
     pr21=-80;
 80020ba:	4b65      	ldr	r3, [pc, #404]	; (8002250 <HAL_UART_RxCpltCallback+0x464>)
 80020bc:	f06f 024f 	mvn.w	r2, #79	; 0x4f
 80020c0:	601a      	str	r2, [r3, #0]
     pr22=130;
 80020c2:	4b64      	ldr	r3, [pc, #400]	; (8002254 <HAL_UART_RxCpltCallback+0x468>)
 80020c4:	2282      	movs	r2, #130	; 0x82
 80020c6:	601a      	str	r2, [r3, #0]
     Kd=200;          ////-teraz edytujemy te wartosci tylko a jak to nie pomoze to lipton
 80020c8:	4b63      	ldr	r3, [pc, #396]	; (8002258 <HAL_UART_RxCpltCallback+0x46c>)
 80020ca:	4a64      	ldr	r2, [pc, #400]	; (800225c <HAL_UART_RxCpltCallback+0x470>)
 80020cc:	601a      	str	r2, [r3, #0]
     }
    ///////////////////////////////////////////////////////
     if(rxData[0]=='a'){ //koła nr1 "WH-slow"
 80020ce:	4b64      	ldr	r3, [pc, #400]	; (8002260 <HAL_UART_RxCpltCallback+0x474>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b61      	cmp	r3, #97	; 0x61
 80020d4:	d11f      	bne.n	8002116 <HAL_UART_RxCpltCallback+0x32a>
     ARR=3;
 80020d6:	4b63      	ldr	r3, [pc, #396]	; (8002264 <HAL_UART_RxCpltCallback+0x478>)
 80020d8:	2203      	movs	r2, #3
 80020da:	601a      	str	r2, [r3, #0]
     basespeedr = 169;
 80020dc:	4b62      	ldr	r3, [pc, #392]	; (8002268 <HAL_UART_RxCpltCallback+0x47c>)
 80020de:	22a9      	movs	r2, #169	; 0xa9
 80020e0:	601a      	str	r2, [r3, #0]
     basespeedl = 169;
 80020e2:	4b62      	ldr	r3, [pc, #392]	; (800226c <HAL_UART_RxCpltCallback+0x480>)
 80020e4:	22a9      	movs	r2, #169	; 0xa9
 80020e6:	601a      	str	r2, [r3, #0]
     maxspeedl=174;
 80020e8:	4b55      	ldr	r3, [pc, #340]	; (8002240 <HAL_UART_RxCpltCallback+0x454>)
 80020ea:	22ae      	movs	r2, #174	; 0xae
 80020ec:	601a      	str	r2, [r3, #0]
     maxspeedr=174;
 80020ee:	4b55      	ldr	r3, [pc, #340]	; (8002244 <HAL_UART_RxCpltCallback+0x458>)
 80020f0:	22ae      	movs	r2, #174	; 0xae
 80020f2:	601a      	str	r2, [r3, #0]
     pr11=-169;
 80020f4:	4b54      	ldr	r3, [pc, #336]	; (8002248 <HAL_UART_RxCpltCallback+0x45c>)
 80020f6:	f06f 02a8 	mvn.w	r2, #168	; 0xa8
 80020fa:	601a      	str	r2, [r3, #0]
     pr12=169;
 80020fc:	4b53      	ldr	r3, [pc, #332]	; (800224c <HAL_UART_RxCpltCallback+0x460>)
 80020fe:	22a9      	movs	r2, #169	; 0xa9
 8002100:	601a      	str	r2, [r3, #0]
     pr21=-76;
 8002102:	4b53      	ldr	r3, [pc, #332]	; (8002250 <HAL_UART_RxCpltCallback+0x464>)
 8002104:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8002108:	601a      	str	r2, [r3, #0]
     pr22=125;
 800210a:	4b52      	ldr	r3, [pc, #328]	; (8002254 <HAL_UART_RxCpltCallback+0x468>)
 800210c:	227d      	movs	r2, #125	; 0x7d
 800210e:	601a      	str	r2, [r3, #0]
     Kd=290;
 8002110:	4b51      	ldr	r3, [pc, #324]	; (8002258 <HAL_UART_RxCpltCallback+0x46c>)
 8002112:	4a57      	ldr	r2, [pc, #348]	; (8002270 <HAL_UART_RxCpltCallback+0x484>)
 8002114:	601a      	str	r2, [r3, #0]
     }
     ////////////////////////////////////////////////////////
     if(rxData[0]=='b'){ //koła nr2 "WH-medium"
 8002116:	4b52      	ldr	r3, [pc, #328]	; (8002260 <HAL_UART_RxCpltCallback+0x474>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b62      	cmp	r3, #98	; 0x62
 800211c:	d11f      	bne.n	800215e <HAL_UART_RxCpltCallback+0x372>
     ARR=3;
 800211e:	4b51      	ldr	r3, [pc, #324]	; (8002264 <HAL_UART_RxCpltCallback+0x478>)
 8002120:	2203      	movs	r2, #3
 8002122:	601a      	str	r2, [r3, #0]
     basespeedr = 174;
 8002124:	4b50      	ldr	r3, [pc, #320]	; (8002268 <HAL_UART_RxCpltCallback+0x47c>)
 8002126:	22ae      	movs	r2, #174	; 0xae
 8002128:	601a      	str	r2, [r3, #0]
     basespeedl = 174;
 800212a:	4b50      	ldr	r3, [pc, #320]	; (800226c <HAL_UART_RxCpltCallback+0x480>)
 800212c:	22ae      	movs	r2, #174	; 0xae
 800212e:	601a      	str	r2, [r3, #0]
     maxspeedl=183;
 8002130:	4b43      	ldr	r3, [pc, #268]	; (8002240 <HAL_UART_RxCpltCallback+0x454>)
 8002132:	22b7      	movs	r2, #183	; 0xb7
 8002134:	601a      	str	r2, [r3, #0]
     maxspeedr=183;
 8002136:	4b43      	ldr	r3, [pc, #268]	; (8002244 <HAL_UART_RxCpltCallback+0x458>)
 8002138:	22b7      	movs	r2, #183	; 0xb7
 800213a:	601a      	str	r2, [r3, #0]
     pr11=-169;
 800213c:	4b42      	ldr	r3, [pc, #264]	; (8002248 <HAL_UART_RxCpltCallback+0x45c>)
 800213e:	f06f 02a8 	mvn.w	r2, #168	; 0xa8
 8002142:	601a      	str	r2, [r3, #0]
     pr12=169;
 8002144:	4b41      	ldr	r3, [pc, #260]	; (800224c <HAL_UART_RxCpltCallback+0x460>)
 8002146:	22a9      	movs	r2, #169	; 0xa9
 8002148:	601a      	str	r2, [r3, #0]
     pr21=-76;
 800214a:	4b41      	ldr	r3, [pc, #260]	; (8002250 <HAL_UART_RxCpltCallback+0x464>)
 800214c:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8002150:	601a      	str	r2, [r3, #0]
     pr22=125;
 8002152:	4b40      	ldr	r3, [pc, #256]	; (8002254 <HAL_UART_RxCpltCallback+0x468>)
 8002154:	227d      	movs	r2, #125	; 0x7d
 8002156:	601a      	str	r2, [r3, #0]
     Kd=290;
 8002158:	4b3f      	ldr	r3, [pc, #252]	; (8002258 <HAL_UART_RxCpltCallback+0x46c>)
 800215a:	4a45      	ldr	r2, [pc, #276]	; (8002270 <HAL_UART_RxCpltCallback+0x484>)
 800215c:	601a      	str	r2, [r3, #0]
     }
     ////////////////////////////////////////////////////////
     if(rxData[0]=='c'){ ////koła nr1 "WH-fast"
 800215e:	4b40      	ldr	r3, [pc, #256]	; (8002260 <HAL_UART_RxCpltCallback+0x474>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b63      	cmp	r3, #99	; 0x63
 8002164:	d11f      	bne.n	80021a6 <HAL_UART_RxCpltCallback+0x3ba>
     ARR=3;
 8002166:	4b3f      	ldr	r3, [pc, #252]	; (8002264 <HAL_UART_RxCpltCallback+0x478>)
 8002168:	2203      	movs	r2, #3
 800216a:	601a      	str	r2, [r3, #0]
     basespeedr = 193;
 800216c:	4b3e      	ldr	r3, [pc, #248]	; (8002268 <HAL_UART_RxCpltCallback+0x47c>)
 800216e:	22c1      	movs	r2, #193	; 0xc1
 8002170:	601a      	str	r2, [r3, #0]
     basespeedl = 193;
 8002172:	4b3e      	ldr	r3, [pc, #248]	; (800226c <HAL_UART_RxCpltCallback+0x480>)
 8002174:	22c1      	movs	r2, #193	; 0xc1
 8002176:	601a      	str	r2, [r3, #0]
     maxspeedl=203;
 8002178:	4b31      	ldr	r3, [pc, #196]	; (8002240 <HAL_UART_RxCpltCallback+0x454>)
 800217a:	22cb      	movs	r2, #203	; 0xcb
 800217c:	601a      	str	r2, [r3, #0]
     maxspeedr=203;
 800217e:	4b31      	ldr	r3, [pc, #196]	; (8002244 <HAL_UART_RxCpltCallback+0x458>)
 8002180:	22cb      	movs	r2, #203	; 0xcb
 8002182:	601a      	str	r2, [r3, #0]
     pr11=-169;
 8002184:	4b30      	ldr	r3, [pc, #192]	; (8002248 <HAL_UART_RxCpltCallback+0x45c>)
 8002186:	f06f 02a8 	mvn.w	r2, #168	; 0xa8
 800218a:	601a      	str	r2, [r3, #0]
     pr12=169;
 800218c:	4b2f      	ldr	r3, [pc, #188]	; (800224c <HAL_UART_RxCpltCallback+0x460>)
 800218e:	22a9      	movs	r2, #169	; 0xa9
 8002190:	601a      	str	r2, [r3, #0]
     pr21=-76;
 8002192:	4b2f      	ldr	r3, [pc, #188]	; (8002250 <HAL_UART_RxCpltCallback+0x464>)
 8002194:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8002198:	601a      	str	r2, [r3, #0]
     pr22=125;
 800219a:	4b2e      	ldr	r3, [pc, #184]	; (8002254 <HAL_UART_RxCpltCallback+0x468>)
 800219c:	227d      	movs	r2, #125	; 0x7d
 800219e:	601a      	str	r2, [r3, #0]
     Kd=290;
 80021a0:	4b2d      	ldr	r3, [pc, #180]	; (8002258 <HAL_UART_RxCpltCallback+0x46c>)
 80021a2:	4a33      	ldr	r2, [pc, #204]	; (8002270 <HAL_UART_RxCpltCallback+0x484>)
 80021a4:	601a      	str	r2, [r3, #0]
     }
     ////////////////////////////////////////////////////////
     if(rxData[0]=='d'){ //koła nr1 "WH-turbo"
 80021a6:	4b2e      	ldr	r3, [pc, #184]	; (8002260 <HAL_UART_RxCpltCallback+0x474>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b64      	cmp	r3, #100	; 0x64
 80021ac:	d11f      	bne.n	80021ee <HAL_UART_RxCpltCallback+0x402>
     ARR=3;
 80021ae:	4b2d      	ldr	r3, [pc, #180]	; (8002264 <HAL_UART_RxCpltCallback+0x478>)
 80021b0:	2203      	movs	r2, #3
 80021b2:	601a      	str	r2, [r3, #0]
     basespeedr = 203;
 80021b4:	4b2c      	ldr	r3, [pc, #176]	; (8002268 <HAL_UART_RxCpltCallback+0x47c>)
 80021b6:	22cb      	movs	r2, #203	; 0xcb
 80021b8:	601a      	str	r2, [r3, #0]
     basespeedl = 203;
 80021ba:	4b2c      	ldr	r3, [pc, #176]	; (800226c <HAL_UART_RxCpltCallback+0x480>)
 80021bc:	22cb      	movs	r2, #203	; 0xcb
 80021be:	601a      	str	r2, [r3, #0]
     maxspeedl=212;
 80021c0:	4b1f      	ldr	r3, [pc, #124]	; (8002240 <HAL_UART_RxCpltCallback+0x454>)
 80021c2:	22d4      	movs	r2, #212	; 0xd4
 80021c4:	601a      	str	r2, [r3, #0]
     maxspeedr=212;
 80021c6:	4b1f      	ldr	r3, [pc, #124]	; (8002244 <HAL_UART_RxCpltCallback+0x458>)
 80021c8:	22d4      	movs	r2, #212	; 0xd4
 80021ca:	601a      	str	r2, [r3, #0]
     pr11=-169;//-176
 80021cc:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <HAL_UART_RxCpltCallback+0x45c>)
 80021ce:	f06f 02a8 	mvn.w	r2, #168	; 0xa8
 80021d2:	601a      	str	r2, [r3, #0]
     pr12=169;//176
 80021d4:	4b1d      	ldr	r3, [pc, #116]	; (800224c <HAL_UART_RxCpltCallback+0x460>)
 80021d6:	22a9      	movs	r2, #169	; 0xa9
 80021d8:	601a      	str	r2, [r3, #0]
     pr21=-76;//-80
 80021da:	4b1d      	ldr	r3, [pc, #116]	; (8002250 <HAL_UART_RxCpltCallback+0x464>)
 80021dc:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 80021e0:	601a      	str	r2, [r3, #0]
     pr22=125;//130
 80021e2:	4b1c      	ldr	r3, [pc, #112]	; (8002254 <HAL_UART_RxCpltCallback+0x468>)
 80021e4:	227d      	movs	r2, #125	; 0x7d
 80021e6:	601a      	str	r2, [r3, #0]
     Kd=290;
 80021e8:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <HAL_UART_RxCpltCallback+0x46c>)
 80021ea:	4a21      	ldr	r2, [pc, #132]	; (8002270 <HAL_UART_RxCpltCallback+0x484>)
 80021ec:	601a      	str	r2, [r3, #0]
     }
     ////////////////////////////////////////////////////////
    Battery_ADC_measurement();
 80021ee:	f7ff f8a3 	bl	8001338 <Battery_ADC_measurement>
    SN_UART_Send(&huart3,"rxData: %d \r \n ",rxData);
 80021f2:	4a1b      	ldr	r2, [pc, #108]	; (8002260 <HAL_UART_RxCpltCallback+0x474>)
 80021f4:	491f      	ldr	r1, [pc, #124]	; (8002274 <HAL_UART_RxCpltCallback+0x488>)
 80021f6:	4820      	ldr	r0, [pc, #128]	; (8002278 <HAL_UART_RxCpltCallback+0x48c>)
 80021f8:	f7fe ff40 	bl	800107c <SN_UART_Send>
    SN_UART_Send(&huart3,"speedlevel = %.1f \r \n battery: %.1f \r \n raw= %d \r \n ",speedlevel,battery_procentage_raw,raw_battery);
 80021fc:	4b1f      	ldr	r3, [pc, #124]	; (800227c <HAL_UART_RxCpltCallback+0x490>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe f911 	bl	8000428 <__aeabi_f2d>
 8002206:	4604      	mov	r4, r0
 8002208:	460d      	mov	r5, r1
 800220a:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <HAL_UART_RxCpltCallback+0x494>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe f90a 	bl	8000428 <__aeabi_f2d>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	491a      	ldr	r1, [pc, #104]	; (8002284 <HAL_UART_RxCpltCallback+0x498>)
 800221a:	8809      	ldrh	r1, [r1, #0]
 800221c:	9102      	str	r1, [sp, #8]
 800221e:	e9cd 2300 	strd	r2, r3, [sp]
 8002222:	4622      	mov	r2, r4
 8002224:	462b      	mov	r3, r5
 8002226:	4918      	ldr	r1, [pc, #96]	; (8002288 <HAL_UART_RxCpltCallback+0x49c>)
 8002228:	4813      	ldr	r0, [pc, #76]	; (8002278 <HAL_UART_RxCpltCallback+0x48c>)
 800222a:	f7fe ff27 	bl	800107c <SN_UART_Send>
    HAL_UART_Receive_IT(&huart1,(uint8_t*)rxData,5);
 800222e:	2205      	movs	r2, #5
 8002230:	490b      	ldr	r1, [pc, #44]	; (8002260 <HAL_UART_RxCpltCallback+0x474>)
 8002232:	4816      	ldr	r0, [pc, #88]	; (800228c <HAL_UART_RxCpltCallback+0x4a0>)
 8002234:	f003 f95f 	bl	80054f6 <HAL_UART_Receive_IT>
  }
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bdb0      	pop	{r4, r5, r7, pc}
 8002240:	20000020 	.word	0x20000020
 8002244:	2000001c 	.word	0x2000001c
 8002248:	20000008 	.word	0x20000008
 800224c:	2000000c 	.word	0x2000000c
 8002250:	20000010 	.word	0x20000010
 8002254:	20000014 	.word	0x20000014
 8002258:	20000004 	.word	0x20000004
 800225c:	43480000 	.word	0x43480000
 8002260:	200002b0 	.word	0x200002b0
 8002264:	2000002c 	.word	0x2000002c
 8002268:	20000024 	.word	0x20000024
 800226c:	20000028 	.word	0x20000028
 8002270:	43910000 	.word	0x43910000
 8002274:	08008fb8 	.word	0x08008fb8
 8002278:	200003ec 	.word	0x200003ec
 800227c:	20000018 	.word	0x20000018
 8002280:	200002c4 	.word	0x200002c4
 8002284:	200002c0 	.word	0x200002c0
 8002288:	08008fc8 	.word	0x08008fc8
 800228c:	200003a4 	.word	0x200003a4

08002290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002294:	b672      	cpsid	i
}
 8002296:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002298:	e7fe      	b.n	8002298 <Error_Handler+0x8>
	...

0800229c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022a2:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <HAL_MspInit+0x5c>)
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	4a14      	ldr	r2, [pc, #80]	; (80022f8 <HAL_MspInit+0x5c>)
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	6193      	str	r3, [r2, #24]
 80022ae:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <HAL_MspInit+0x5c>)
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ba:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <HAL_MspInit+0x5c>)
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	4a0e      	ldr	r2, [pc, #56]	; (80022f8 <HAL_MspInit+0x5c>)
 80022c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c4:	61d3      	str	r3, [r2, #28]
 80022c6:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <HAL_MspInit+0x5c>)
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ce:	607b      	str	r3, [r7, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022d2:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <HAL_MspInit+0x60>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	4a04      	ldr	r2, [pc, #16]	; (80022fc <HAL_MspInit+0x60>)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ee:	bf00      	nop
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40010000 	.word	0x40010000

08002300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002304:	e7fe      	b.n	8002304 <NMI_Handler+0x4>

08002306 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800230a:	e7fe      	b.n	800230a <HardFault_Handler+0x4>

0800230c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002310:	e7fe      	b.n	8002310 <MemManage_Handler+0x4>

08002312 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002316:	e7fe      	b.n	8002316 <BusFault_Handler+0x4>

08002318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800231c:	e7fe      	b.n	800231c <UsageFault_Handler+0x4>

0800231e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr

0800232a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr

08002336 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002346:	f000 fbd3 	bl	8002af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002354:	4802      	ldr	r0, [pc, #8]	; (8002360 <USART1_IRQHandler+0x10>)
 8002356:	f003 f8f3 	bl	8005540 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	200003a4 	.word	0x200003a4

08002364 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return 1;
 8002368:	2301      	movs	r3, #1
}
 800236a:	4618      	mov	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr

08002372 <_kill>:

int _kill(int pid, int sig)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800237c:	f003 fe64 	bl	8006048 <__errno>
 8002380:	4603      	mov	r3, r0
 8002382:	2216      	movs	r2, #22
 8002384:	601a      	str	r2, [r3, #0]
  return -1;
 8002386:	f04f 33ff 	mov.w	r3, #4294967295
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <_exit>:

void _exit (int status)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b082      	sub	sp, #8
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800239a:	f04f 31ff 	mov.w	r1, #4294967295
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff ffe7 	bl	8002372 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023a4:	e7fe      	b.n	80023a4 <_exit+0x12>

080023a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b086      	sub	sp, #24
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	60f8      	str	r0, [r7, #12]
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	e00a      	b.n	80023ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023b8:	f3af 8000 	nop.w
 80023bc:	4601      	mov	r1, r0
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	60ba      	str	r2, [r7, #8]
 80023c4:	b2ca      	uxtb	r2, r1
 80023c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	3301      	adds	r3, #1
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	dbf0      	blt.n	80023b8 <_read+0x12>
  }

  return len;
 80023d6:	687b      	ldr	r3, [r7, #4]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	e009      	b.n	8002406 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	60ba      	str	r2, [r7, #8]
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	3301      	adds	r3, #1
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	429a      	cmp	r2, r3
 800240c:	dbf1      	blt.n	80023f2 <_write+0x12>
  }
  return len;
 800240e:	687b      	ldr	r3, [r7, #4]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <_close>:

int _close(int file)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002420:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr

0800242e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800243e:	605a      	str	r2, [r3, #4]
  return 0;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <_isatty>:

int _isatty(int file)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002454:	2301      	movs	r3, #1
}
 8002456:	4618      	mov	r0, r3
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002480:	4a14      	ldr	r2, [pc, #80]	; (80024d4 <_sbrk+0x5c>)
 8002482:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <_sbrk+0x60>)
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800248c:	4b13      	ldr	r3, [pc, #76]	; (80024dc <_sbrk+0x64>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d102      	bne.n	800249a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002494:	4b11      	ldr	r3, [pc, #68]	; (80024dc <_sbrk+0x64>)
 8002496:	4a12      	ldr	r2, [pc, #72]	; (80024e0 <_sbrk+0x68>)
 8002498:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800249a:	4b10      	ldr	r3, [pc, #64]	; (80024dc <_sbrk+0x64>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4413      	add	r3, r2
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d207      	bcs.n	80024b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024a8:	f003 fdce 	bl	8006048 <__errno>
 80024ac:	4603      	mov	r3, r0
 80024ae:	220c      	movs	r2, #12
 80024b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024b2:	f04f 33ff 	mov.w	r3, #4294967295
 80024b6:	e009      	b.n	80024cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024b8:	4b08      	ldr	r3, [pc, #32]	; (80024dc <_sbrk+0x64>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024be:	4b07      	ldr	r3, [pc, #28]	; (80024dc <_sbrk+0x64>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4413      	add	r3, r2
 80024c6:	4a05      	ldr	r2, [pc, #20]	; (80024dc <_sbrk+0x64>)
 80024c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ca:	68fb      	ldr	r3, [r7, #12]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20005000 	.word	0x20005000
 80024d8:	00000400 	.word	0x00000400
 80024dc:	200002c8 	.word	0x200002c8
 80024e0:	20000448 	.word	0x20000448

080024e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024f6:	f107 0308 	add.w	r3, r7, #8
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	605a      	str	r2, [r3, #4]
 8002500:	609a      	str	r2, [r3, #8]
 8002502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002504:	463b      	mov	r3, r7
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800250c:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <MX_TIM1_Init+0x98>)
 800250e:	4a1f      	ldr	r2, [pc, #124]	; (800258c <MX_TIM1_Init+0x9c>)
 8002510:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8002512:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <MX_TIM1_Init+0x98>)
 8002514:	2247      	movs	r2, #71	; 0x47
 8002516:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002518:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <MX_TIM1_Init+0x98>)
 800251a:	2200      	movs	r2, #0
 800251c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800251e:	4b1a      	ldr	r3, [pc, #104]	; (8002588 <MX_TIM1_Init+0x98>)
 8002520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002524:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002526:	4b18      	ldr	r3, [pc, #96]	; (8002588 <MX_TIM1_Init+0x98>)
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800252c:	4b16      	ldr	r3, [pc, #88]	; (8002588 <MX_TIM1_Init+0x98>)
 800252e:	2200      	movs	r2, #0
 8002530:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002532:	4b15      	ldr	r3, [pc, #84]	; (8002588 <MX_TIM1_Init+0x98>)
 8002534:	2200      	movs	r2, #0
 8002536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002538:	4813      	ldr	r0, [pc, #76]	; (8002588 <MX_TIM1_Init+0x98>)
 800253a:	f002 f835 	bl	80045a8 <HAL_TIM_Base_Init>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002544:	f7ff fea4 	bl	8002290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800254c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800254e:	f107 0308 	add.w	r3, r7, #8
 8002552:	4619      	mov	r1, r3
 8002554:	480c      	ldr	r0, [pc, #48]	; (8002588 <MX_TIM1_Init+0x98>)
 8002556:	f002 fb31 	bl	8004bbc <HAL_TIM_ConfigClockSource>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002560:	f7ff fe96 	bl	8002290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002564:	2300      	movs	r3, #0
 8002566:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002568:	2300      	movs	r3, #0
 800256a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800256c:	463b      	mov	r3, r7
 800256e:	4619      	mov	r1, r3
 8002570:	4805      	ldr	r0, [pc, #20]	; (8002588 <MX_TIM1_Init+0x98>)
 8002572:	f002 fe8f 	bl	8005294 <HAL_TIMEx_MasterConfigSynchronization>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800257c:	f7ff fe88 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002580:	bf00      	nop
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	200002cc 	.word	0x200002cc
 800258c:	40012c00 	.word	0x40012c00

08002590 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002596:	f107 0308 	add.w	r3, r7, #8
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a4:	463b      	mov	r3, r7
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025ac:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <MX_TIM3_Init+0x94>)
 80025ae:	4a1e      	ldr	r2, [pc, #120]	; (8002628 <MX_TIM3_Init+0x98>)
 80025b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80025b2:	4b1c      	ldr	r3, [pc, #112]	; (8002624 <MX_TIM3_Init+0x94>)
 80025b4:	2247      	movs	r2, #71	; 0x47
 80025b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b8:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <MX_TIM3_Init+0x94>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80025be:	4b19      	ldr	r3, [pc, #100]	; (8002624 <MX_TIM3_Init+0x94>)
 80025c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c6:	4b17      	ldr	r3, [pc, #92]	; (8002624 <MX_TIM3_Init+0x94>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025cc:	4b15      	ldr	r3, [pc, #84]	; (8002624 <MX_TIM3_Init+0x94>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025d2:	4814      	ldr	r0, [pc, #80]	; (8002624 <MX_TIM3_Init+0x94>)
 80025d4:	f001 ffe8 	bl	80045a8 <HAL_TIM_Base_Init>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80025de:	f7ff fe57 	bl	8002290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025e8:	f107 0308 	add.w	r3, r7, #8
 80025ec:	4619      	mov	r1, r3
 80025ee:	480d      	ldr	r0, [pc, #52]	; (8002624 <MX_TIM3_Init+0x94>)
 80025f0:	f002 fae4 	bl	8004bbc <HAL_TIM_ConfigClockSource>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80025fa:	f7ff fe49 	bl	8002290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025fe:	2300      	movs	r3, #0
 8002600:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002602:	2300      	movs	r3, #0
 8002604:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002606:	463b      	mov	r3, r7
 8002608:	4619      	mov	r1, r3
 800260a:	4806      	ldr	r0, [pc, #24]	; (8002624 <MX_TIM3_Init+0x94>)
 800260c:	f002 fe42 	bl	8005294 <HAL_TIMEx_MasterConfigSynchronization>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002616:	f7ff fe3b 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800261a:	bf00      	nop
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20000314 	.word	0x20000314
 8002628:	40000400 	.word	0x40000400

0800262c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08e      	sub	sp, #56	; 0x38
 8002630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002632:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	605a      	str	r2, [r3, #4]
 800263c:	609a      	str	r2, [r3, #8]
 800263e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002640:	f107 0320 	add.w	r3, r7, #32
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800264a:	1d3b      	adds	r3, r7, #4
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	611a      	str	r2, [r3, #16]
 8002658:	615a      	str	r2, [r3, #20]
 800265a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800265c:	4b3d      	ldr	r3, [pc, #244]	; (8002754 <MX_TIM4_Init+0x128>)
 800265e:	4a3e      	ldr	r2, [pc, #248]	; (8002758 <MX_TIM4_Init+0x12c>)
 8002660:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8002662:	4b3c      	ldr	r3, [pc, #240]	; (8002754 <MX_TIM4_Init+0x128>)
 8002664:	224f      	movs	r2, #79	; 0x4f
 8002666:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002668:	4b3a      	ldr	r3, [pc, #232]	; (8002754 <MX_TIM4_Init+0x128>)
 800266a:	2200      	movs	r2, #0
 800266c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800266e:	4b39      	ldr	r3, [pc, #228]	; (8002754 <MX_TIM4_Init+0x128>)
 8002670:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002674:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002676:	4b37      	ldr	r3, [pc, #220]	; (8002754 <MX_TIM4_Init+0x128>)
 8002678:	2200      	movs	r2, #0
 800267a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800267c:	4b35      	ldr	r3, [pc, #212]	; (8002754 <MX_TIM4_Init+0x128>)
 800267e:	2200      	movs	r2, #0
 8002680:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002682:	4834      	ldr	r0, [pc, #208]	; (8002754 <MX_TIM4_Init+0x128>)
 8002684:	f001 ff90 	bl	80045a8 <HAL_TIM_Base_Init>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800268e:	f7ff fdff 	bl	8002290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002696:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002698:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800269c:	4619      	mov	r1, r3
 800269e:	482d      	ldr	r0, [pc, #180]	; (8002754 <MX_TIM4_Init+0x128>)
 80026a0:	f002 fa8c 	bl	8004bbc <HAL_TIM_ConfigClockSource>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80026aa:	f7ff fdf1 	bl	8002290 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80026ae:	4829      	ldr	r0, [pc, #164]	; (8002754 <MX_TIM4_Init+0x128>)
 80026b0:	f002 f86c 	bl	800478c <HAL_TIM_PWM_Init>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80026ba:	f7ff fde9 	bl	8002290 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80026be:	4825      	ldr	r0, [pc, #148]	; (8002754 <MX_TIM4_Init+0x128>)
 80026c0:	f002 f80c 	bl	80046dc <HAL_TIM_OC_Init>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 80026ca:	f7ff fde1 	bl	8002290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ce:	2300      	movs	r3, #0
 80026d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026d6:	f107 0320 	add.w	r3, r7, #32
 80026da:	4619      	mov	r1, r3
 80026dc:	481d      	ldr	r0, [pc, #116]	; (8002754 <MX_TIM4_Init+0x128>)
 80026de:	f002 fdd9 	bl	8005294 <HAL_TIMEx_MasterConfigSynchronization>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 80026e8:	f7ff fdd2 	bl	8002290 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026ec:	2360      	movs	r3, #96	; 0x60
 80026ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026fc:	1d3b      	adds	r3, r7, #4
 80026fe:	2204      	movs	r2, #4
 8002700:	4619      	mov	r1, r3
 8002702:	4814      	ldr	r0, [pc, #80]	; (8002754 <MX_TIM4_Init+0x128>)
 8002704:	f002 f998 	bl	8004a38 <HAL_TIM_PWM_ConfigChannel>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 800270e:	f7ff fdbf 	bl	8002290 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002712:	2300      	movs	r3, #0
 8002714:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002716:	1d3b      	adds	r3, r7, #4
 8002718:	2208      	movs	r2, #8
 800271a:	4619      	mov	r1, r3
 800271c:	480d      	ldr	r0, [pc, #52]	; (8002754 <MX_TIM4_Init+0x128>)
 800271e:	f002 f92f 	bl	8004980 <HAL_TIM_OC_ConfigChannel>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 8002728:	f7ff fdb2 	bl	8002290 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800272c:	2360      	movs	r3, #96	; 0x60
 800272e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002730:	1d3b      	adds	r3, r7, #4
 8002732:	220c      	movs	r2, #12
 8002734:	4619      	mov	r1, r3
 8002736:	4807      	ldr	r0, [pc, #28]	; (8002754 <MX_TIM4_Init+0x128>)
 8002738:	f002 f97e 	bl	8004a38 <HAL_TIM_PWM_ConfigChannel>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8002742:	f7ff fda5 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002746:	4803      	ldr	r0, [pc, #12]	; (8002754 <MX_TIM4_Init+0x128>)
 8002748:	f000 f84e 	bl	80027e8 <HAL_TIM_MspPostInit>

}
 800274c:	bf00      	nop
 800274e:	3738      	adds	r7, #56	; 0x38
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	2000035c 	.word	0x2000035c
 8002758:	40000800 	.word	0x40000800

0800275c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800275c:	b480      	push	{r7}
 800275e:	b087      	sub	sp, #28
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a1b      	ldr	r2, [pc, #108]	; (80027d8 <HAL_TIM_Base_MspInit+0x7c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d10c      	bne.n	8002788 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800276e:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <HAL_TIM_Base_MspInit+0x80>)
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	4a1a      	ldr	r2, [pc, #104]	; (80027dc <HAL_TIM_Base_MspInit+0x80>)
 8002774:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002778:	6193      	str	r3, [r2, #24]
 800277a:	4b18      	ldr	r3, [pc, #96]	; (80027dc <HAL_TIM_Base_MspInit+0x80>)
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002786:	e022      	b.n	80027ce <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a14      	ldr	r2, [pc, #80]	; (80027e0 <HAL_TIM_Base_MspInit+0x84>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d10c      	bne.n	80027ac <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002792:	4b12      	ldr	r3, [pc, #72]	; (80027dc <HAL_TIM_Base_MspInit+0x80>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	4a11      	ldr	r2, [pc, #68]	; (80027dc <HAL_TIM_Base_MspInit+0x80>)
 8002798:	f043 0302 	orr.w	r3, r3, #2
 800279c:	61d3      	str	r3, [r2, #28]
 800279e:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <HAL_TIM_Base_MspInit+0x80>)
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	693b      	ldr	r3, [r7, #16]
}
 80027aa:	e010      	b.n	80027ce <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM4)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a0c      	ldr	r2, [pc, #48]	; (80027e4 <HAL_TIM_Base_MspInit+0x88>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d10b      	bne.n	80027ce <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027b6:	4b09      	ldr	r3, [pc, #36]	; (80027dc <HAL_TIM_Base_MspInit+0x80>)
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	4a08      	ldr	r2, [pc, #32]	; (80027dc <HAL_TIM_Base_MspInit+0x80>)
 80027bc:	f043 0304 	orr.w	r3, r3, #4
 80027c0:	61d3      	str	r3, [r2, #28]
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_TIM_Base_MspInit+0x80>)
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]
}
 80027ce:	bf00      	nop
 80027d0:	371c      	adds	r7, #28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr
 80027d8:	40012c00 	.word	0x40012c00
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40000400 	.word	0x40000400
 80027e4:	40000800 	.word	0x40000800

080027e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b088      	sub	sp, #32
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f0:	f107 0310 	add.w	r3, r7, #16
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a10      	ldr	r2, [pc, #64]	; (8002844 <HAL_TIM_MspPostInit+0x5c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d118      	bne.n	800283a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002808:	4b0f      	ldr	r3, [pc, #60]	; (8002848 <HAL_TIM_MspPostInit+0x60>)
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	4a0e      	ldr	r2, [pc, #56]	; (8002848 <HAL_TIM_MspPostInit+0x60>)
 800280e:	f043 0308 	orr.w	r3, r3, #8
 8002812:	6193      	str	r3, [r2, #24]
 8002814:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <HAL_TIM_MspPostInit+0x60>)
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	f003 0308 	and.w	r3, r3, #8
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002820:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002824:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002826:	2302      	movs	r3, #2
 8002828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282a:	2302      	movs	r3, #2
 800282c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282e:	f107 0310 	add.w	r3, r7, #16
 8002832:	4619      	mov	r1, r3
 8002834:	4805      	ldr	r0, [pc, #20]	; (800284c <HAL_TIM_MspPostInit+0x64>)
 8002836:	f000 ff87 	bl	8003748 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800283a:	bf00      	nop
 800283c:	3720      	adds	r7, #32
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40000800 	.word	0x40000800
 8002848:	40021000 	.word	0x40021000
 800284c:	40010c00 	.word	0x40010c00

08002850 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002854:	4b11      	ldr	r3, [pc, #68]	; (800289c <MX_USART1_UART_Init+0x4c>)
 8002856:	4a12      	ldr	r2, [pc, #72]	; (80028a0 <MX_USART1_UART_Init+0x50>)
 8002858:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800285a:	4b10      	ldr	r3, [pc, #64]	; (800289c <MX_USART1_UART_Init+0x4c>)
 800285c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002860:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002862:	4b0e      	ldr	r3, [pc, #56]	; (800289c <MX_USART1_UART_Init+0x4c>)
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002868:	4b0c      	ldr	r3, [pc, #48]	; (800289c <MX_USART1_UART_Init+0x4c>)
 800286a:	2200      	movs	r2, #0
 800286c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800286e:	4b0b      	ldr	r3, [pc, #44]	; (800289c <MX_USART1_UART_Init+0x4c>)
 8002870:	2200      	movs	r2, #0
 8002872:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002874:	4b09      	ldr	r3, [pc, #36]	; (800289c <MX_USART1_UART_Init+0x4c>)
 8002876:	220c      	movs	r2, #12
 8002878:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800287a:	4b08      	ldr	r3, [pc, #32]	; (800289c <MX_USART1_UART_Init+0x4c>)
 800287c:	2200      	movs	r2, #0
 800287e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002880:	4b06      	ldr	r3, [pc, #24]	; (800289c <MX_USART1_UART_Init+0x4c>)
 8002882:	2200      	movs	r2, #0
 8002884:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002886:	4805      	ldr	r0, [pc, #20]	; (800289c <MX_USART1_UART_Init+0x4c>)
 8002888:	f002 fd62 	bl	8005350 <HAL_UART_Init>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002892:	f7ff fcfd 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	200003a4 	.word	0x200003a4
 80028a0:	40013800 	.word	0x40013800

080028a4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80028a8:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <MX_USART3_UART_Init+0x4c>)
 80028aa:	4a12      	ldr	r2, [pc, #72]	; (80028f4 <MX_USART3_UART_Init+0x50>)
 80028ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80028ae:	4b10      	ldr	r3, [pc, #64]	; (80028f0 <MX_USART3_UART_Init+0x4c>)
 80028b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80028b6:	4b0e      	ldr	r3, [pc, #56]	; (80028f0 <MX_USART3_UART_Init+0x4c>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80028bc:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <MX_USART3_UART_Init+0x4c>)
 80028be:	2200      	movs	r2, #0
 80028c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80028c2:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <MX_USART3_UART_Init+0x4c>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80028c8:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <MX_USART3_UART_Init+0x4c>)
 80028ca:	220c      	movs	r2, #12
 80028cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ce:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <MX_USART3_UART_Init+0x4c>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80028d4:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <MX_USART3_UART_Init+0x4c>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80028da:	4805      	ldr	r0, [pc, #20]	; (80028f0 <MX_USART3_UART_Init+0x4c>)
 80028dc:	f002 fd38 	bl	8005350 <HAL_UART_Init>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80028e6:	f7ff fcd3 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	200003ec 	.word	0x200003ec
 80028f4:	40004800 	.word	0x40004800

080028f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08a      	sub	sp, #40	; 0x28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002900:	f107 0318 	add.w	r3, r7, #24
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a3c      	ldr	r2, [pc, #240]	; (8002a04 <HAL_UART_MspInit+0x10c>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d13a      	bne.n	800298e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002918:	4b3b      	ldr	r3, [pc, #236]	; (8002a08 <HAL_UART_MspInit+0x110>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	4a3a      	ldr	r2, [pc, #232]	; (8002a08 <HAL_UART_MspInit+0x110>)
 800291e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002922:	6193      	str	r3, [r2, #24]
 8002924:	4b38      	ldr	r3, [pc, #224]	; (8002a08 <HAL_UART_MspInit+0x110>)
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002930:	4b35      	ldr	r3, [pc, #212]	; (8002a08 <HAL_UART_MspInit+0x110>)
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	4a34      	ldr	r2, [pc, #208]	; (8002a08 <HAL_UART_MspInit+0x110>)
 8002936:	f043 0304 	orr.w	r3, r3, #4
 800293a:	6193      	str	r3, [r2, #24]
 800293c:	4b32      	ldr	r3, [pc, #200]	; (8002a08 <HAL_UART_MspInit+0x110>)
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002948:	f44f 7300 	mov.w	r3, #512	; 0x200
 800294c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294e:	2302      	movs	r3, #2
 8002950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002952:	2303      	movs	r3, #3
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002956:	f107 0318 	add.w	r3, r7, #24
 800295a:	4619      	mov	r1, r3
 800295c:	482b      	ldr	r0, [pc, #172]	; (8002a0c <HAL_UART_MspInit+0x114>)
 800295e:	f000 fef3 	bl	8003748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002968:	2300      	movs	r3, #0
 800296a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002970:	f107 0318 	add.w	r3, r7, #24
 8002974:	4619      	mov	r1, r3
 8002976:	4825      	ldr	r0, [pc, #148]	; (8002a0c <HAL_UART_MspInit+0x114>)
 8002978:	f000 fee6 	bl	8003748 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800297c:	2200      	movs	r2, #0
 800297e:	2100      	movs	r1, #0
 8002980:	2025      	movs	r0, #37	; 0x25
 8002982:	f000 fdf8 	bl	8003576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002986:	2025      	movs	r0, #37	; 0x25
 8002988:	f000 fe11 	bl	80035ae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800298c:	e036      	b.n	80029fc <HAL_UART_MspInit+0x104>
  else if(uartHandle->Instance==USART3)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a1f      	ldr	r2, [pc, #124]	; (8002a10 <HAL_UART_MspInit+0x118>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d131      	bne.n	80029fc <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002998:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <HAL_UART_MspInit+0x110>)
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	4a1a      	ldr	r2, [pc, #104]	; (8002a08 <HAL_UART_MspInit+0x110>)
 800299e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029a2:	61d3      	str	r3, [r2, #28]
 80029a4:	4b18      	ldr	r3, [pc, #96]	; (8002a08 <HAL_UART_MspInit+0x110>)
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b0:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <HAL_UART_MspInit+0x110>)
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	4a14      	ldr	r2, [pc, #80]	; (8002a08 <HAL_UART_MspInit+0x110>)
 80029b6:	f043 0308 	orr.w	r3, r3, #8
 80029ba:	6193      	str	r3, [r2, #24]
 80029bc:	4b12      	ldr	r3, [pc, #72]	; (8002a08 <HAL_UART_MspInit+0x110>)
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ce:	2302      	movs	r3, #2
 80029d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029d2:	2303      	movs	r3, #3
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d6:	f107 0318 	add.w	r3, r7, #24
 80029da:	4619      	mov	r1, r3
 80029dc:	480d      	ldr	r0, [pc, #52]	; (8002a14 <HAL_UART_MspInit+0x11c>)
 80029de:	f000 feb3 	bl	8003748 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80029e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f0:	f107 0318 	add.w	r3, r7, #24
 80029f4:	4619      	mov	r1, r3
 80029f6:	4807      	ldr	r0, [pc, #28]	; (8002a14 <HAL_UART_MspInit+0x11c>)
 80029f8:	f000 fea6 	bl	8003748 <HAL_GPIO_Init>
}
 80029fc:	bf00      	nop
 80029fe:	3728      	adds	r7, #40	; 0x28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40013800 	.word	0x40013800
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40010800 	.word	0x40010800
 8002a10:	40004800 	.word	0x40004800
 8002a14:	40010c00 	.word	0x40010c00

08002a18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a18:	f7ff fd64 	bl	80024e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a1c:	480b      	ldr	r0, [pc, #44]	; (8002a4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002a1e:	490c      	ldr	r1, [pc, #48]	; (8002a50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002a20:	4a0c      	ldr	r2, [pc, #48]	; (8002a54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a24:	e002      	b.n	8002a2c <LoopCopyDataInit>

08002a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a2a:	3304      	adds	r3, #4

08002a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a30:	d3f9      	bcc.n	8002a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a32:	4a09      	ldr	r2, [pc, #36]	; (8002a58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002a34:	4c09      	ldr	r4, [pc, #36]	; (8002a5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a38:	e001      	b.n	8002a3e <LoopFillZerobss>

08002a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a3c:	3204      	adds	r2, #4

08002a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a40:	d3fb      	bcc.n	8002a3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a42:	f003 fb07 	bl	8006054 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a46:	f7ff f915 	bl	8001c74 <main>
  bx lr
 8002a4a:	4770      	bx	lr
  ldr r0, =_sdata
 8002a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a50:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002a54:	08009424 	.word	0x08009424
  ldr r2, =_sbss
 8002a58:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8002a5c:	20000448 	.word	0x20000448

08002a60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a60:	e7fe      	b.n	8002a60 <ADC1_2_IRQHandler>
	...

08002a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a68:	4b08      	ldr	r3, [pc, #32]	; (8002a8c <HAL_Init+0x28>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a07      	ldr	r2, [pc, #28]	; (8002a8c <HAL_Init+0x28>)
 8002a6e:	f043 0310 	orr.w	r3, r3, #16
 8002a72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a74:	2003      	movs	r0, #3
 8002a76:	f000 fd73 	bl	8003560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a7a:	200f      	movs	r0, #15
 8002a7c:	f000 f808 	bl	8002a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a80:	f7ff fc0c 	bl	800229c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40022000 	.word	0x40022000

08002a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a98:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <HAL_InitTick+0x54>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <HAL_InitTick+0x58>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 fd8b 	bl	80035ca <HAL_SYSTICK_Config>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e00e      	b.n	8002adc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b0f      	cmp	r3, #15
 8002ac2:	d80a      	bhi.n	8002ada <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8002acc:	f000 fd53 	bl	8003576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ad0:	4a06      	ldr	r2, [pc, #24]	; (8002aec <HAL_InitTick+0x5c>)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	e000      	b.n	8002adc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	20000034 	.word	0x20000034
 8002ae8:	2000003c 	.word	0x2000003c
 8002aec:	20000038 	.word	0x20000038

08002af0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002af4:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <HAL_IncTick+0x1c>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	461a      	mov	r2, r3
 8002afa:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <HAL_IncTick+0x20>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4413      	add	r3, r2
 8002b00:	4a03      	ldr	r2, [pc, #12]	; (8002b10 <HAL_IncTick+0x20>)
 8002b02:	6013      	str	r3, [r2, #0]
}
 8002b04:	bf00      	nop
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr
 8002b0c:	2000003c 	.word	0x2000003c
 8002b10:	20000434 	.word	0x20000434

08002b14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  return uwTick;
 8002b18:	4b02      	ldr	r3, [pc, #8]	; (8002b24 <HAL_GetTick+0x10>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr
 8002b24:	20000434 	.word	0x20000434

08002b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b30:	f7ff fff0 	bl	8002b14 <HAL_GetTick>
 8002b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b40:	d005      	beq.n	8002b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b42:	4b0a      	ldr	r3, [pc, #40]	; (8002b6c <HAL_Delay+0x44>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	461a      	mov	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b4e:	bf00      	nop
 8002b50:	f7ff ffe0 	bl	8002b14 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d8f7      	bhi.n	8002b50 <HAL_Delay+0x28>
  {
  }
}
 8002b60:	bf00      	nop
 8002b62:	bf00      	nop
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	2000003c 	.word	0x2000003c

08002b70 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e0be      	b.n	8002d10 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d109      	bne.n	8002bb4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7fe faf4 	bl	800119c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 fbc5 	bl	8003344 <ADC_ConversionStop_Disable>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc2:	f003 0310 	and.w	r3, r3, #16
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f040 8099 	bne.w	8002cfe <HAL_ADC_Init+0x18e>
 8002bcc:	7dfb      	ldrb	r3, [r7, #23]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f040 8095 	bne.w	8002cfe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bdc:	f023 0302 	bic.w	r3, r3, #2
 8002be0:	f043 0202 	orr.w	r2, r3, #2
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002bf0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	7b1b      	ldrb	r3, [r3, #12]
 8002bf6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002bf8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c08:	d003      	beq.n	8002c12 <HAL_ADC_Init+0xa2>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d102      	bne.n	8002c18 <HAL_ADC_Init+0xa8>
 8002c12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c16:	e000      	b.n	8002c1a <HAL_ADC_Init+0xaa>
 8002c18:	2300      	movs	r3, #0
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	7d1b      	ldrb	r3, [r3, #20]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d119      	bne.n	8002c5c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	7b1b      	ldrb	r3, [r3, #12]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d109      	bne.n	8002c44 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	3b01      	subs	r3, #1
 8002c36:	035a      	lsls	r2, r3, #13
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	e00b      	b.n	8002c5c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	f043 0220 	orr.w	r2, r3, #32
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c54:	f043 0201 	orr.w	r2, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	4b28      	ldr	r3, [pc, #160]	; (8002d18 <HAL_ADC_Init+0x1a8>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6812      	ldr	r2, [r2, #0]
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	430b      	orrs	r3, r1
 8002c82:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c8c:	d003      	beq.n	8002c96 <HAL_ADC_Init+0x126>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d104      	bne.n	8002ca0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	051b      	lsls	r3, r3, #20
 8002c9e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	4b18      	ldr	r3, [pc, #96]	; (8002d1c <HAL_ADC_Init+0x1ac>)
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d10b      	bne.n	8002cdc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cce:	f023 0303 	bic.w	r3, r3, #3
 8002cd2:	f043 0201 	orr.w	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002cda:	e018      	b.n	8002d0e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce0:	f023 0312 	bic.w	r3, r3, #18
 8002ce4:	f043 0210 	orr.w	r2, r3, #16
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	f043 0201 	orr.w	r2, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002cfc:	e007      	b.n	8002d0e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d02:	f043 0210 	orr.w	r2, r3, #16
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	ffe1f7fd 	.word	0xffe1f7fd
 8002d1c:	ff1f0efe 	.word	0xff1f0efe

08002d20 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <HAL_ADC_Start+0x1a>
 8002d36:	2302      	movs	r3, #2
 8002d38:	e098      	b.n	8002e6c <HAL_ADC_Start+0x14c>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 faa4 	bl	8003290 <ADC_Enable>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f040 8087 	bne.w	8002e62 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d5c:	f023 0301 	bic.w	r3, r3, #1
 8002d60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a41      	ldr	r2, [pc, #260]	; (8002e74 <HAL_ADC_Start+0x154>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d105      	bne.n	8002d7e <HAL_ADC_Start+0x5e>
 8002d72:	4b41      	ldr	r3, [pc, #260]	; (8002e78 <HAL_ADC_Start+0x158>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d115      	bne.n	8002daa <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d82:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d026      	beq.n	8002de6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002da0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002da8:	e01d      	b.n	8002de6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a2f      	ldr	r2, [pc, #188]	; (8002e78 <HAL_ADC_Start+0x158>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d004      	beq.n	8002dca <HAL_ADC_Start+0xaa>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a2b      	ldr	r2, [pc, #172]	; (8002e74 <HAL_ADC_Start+0x154>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d10d      	bne.n	8002de6 <HAL_ADC_Start+0xc6>
 8002dca:	4b2b      	ldr	r3, [pc, #172]	; (8002e78 <HAL_ADC_Start+0x158>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d007      	beq.n	8002de6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dda:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002dde:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d006      	beq.n	8002e00 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df6:	f023 0206 	bic.w	r2, r3, #6
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dfe:	e002      	b.n	8002e06 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f06f 0202 	mvn.w	r2, #2
 8002e16:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002e22:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002e26:	d113      	bne.n	8002e50 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e2c:	4a11      	ldr	r2, [pc, #68]	; (8002e74 <HAL_ADC_Start+0x154>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d105      	bne.n	8002e3e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002e32:	4b11      	ldr	r3, [pc, #68]	; (8002e78 <HAL_ADC_Start+0x158>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d108      	bne.n	8002e50 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002e4c:	609a      	str	r2, [r3, #8]
 8002e4e:	e00c      	b.n	8002e6a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002e5e:	609a      	str	r2, [r3, #8]
 8002e60:	e003      	b.n	8002e6a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40012800 	.word	0x40012800
 8002e78:	40012400 	.word	0x40012400

08002e7c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002e7c:	b590      	push	{r4, r7, lr}
 8002e7e:	b087      	sub	sp, #28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002e92:	f7ff fe3f 	bl	8002b14 <HAL_GetTick>
 8002e96:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00b      	beq.n	8002ebe <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eaa:	f043 0220 	orr.w	r2, r3, #32
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e0d3      	b.n	8003066 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d131      	bne.n	8002f30 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d12a      	bne.n	8002f30 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002eda:	e021      	b.n	8002f20 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee2:	d01d      	beq.n	8002f20 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d007      	beq.n	8002efa <HAL_ADC_PollForConversion+0x7e>
 8002eea:	f7ff fe13 	bl	8002b14 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d212      	bcs.n	8002f20 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10b      	bne.n	8002f20 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0c:	f043 0204 	orr.w	r2, r3, #4
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e0a2      	b.n	8003066 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0d6      	beq.n	8002edc <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002f2e:	e070      	b.n	8003012 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002f30:	4b4f      	ldr	r3, [pc, #316]	; (8003070 <HAL_ADC_PollForConversion+0x1f4>)
 8002f32:	681c      	ldr	r4, [r3, #0]
 8002f34:	2002      	movs	r0, #2
 8002f36:	f001 fa81 	bl	800443c <HAL_RCCEx_GetPeriphCLKFreq>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6919      	ldr	r1, [r3, #16]
 8002f46:	4b4b      	ldr	r3, [pc, #300]	; (8003074 <HAL_ADC_PollForConversion+0x1f8>)
 8002f48:	400b      	ands	r3, r1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d118      	bne.n	8002f80 <HAL_ADC_PollForConversion+0x104>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68d9      	ldr	r1, [r3, #12]
 8002f54:	4b48      	ldr	r3, [pc, #288]	; (8003078 <HAL_ADC_PollForConversion+0x1fc>)
 8002f56:	400b      	ands	r3, r1
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d111      	bne.n	8002f80 <HAL_ADC_PollForConversion+0x104>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6919      	ldr	r1, [r3, #16]
 8002f62:	4b46      	ldr	r3, [pc, #280]	; (800307c <HAL_ADC_PollForConversion+0x200>)
 8002f64:	400b      	ands	r3, r1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d108      	bne.n	8002f7c <HAL_ADC_PollForConversion+0x100>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68d9      	ldr	r1, [r3, #12]
 8002f70:	4b43      	ldr	r3, [pc, #268]	; (8003080 <HAL_ADC_PollForConversion+0x204>)
 8002f72:	400b      	ands	r3, r1
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_ADC_PollForConversion+0x100>
 8002f78:	2314      	movs	r3, #20
 8002f7a:	e020      	b.n	8002fbe <HAL_ADC_PollForConversion+0x142>
 8002f7c:	2329      	movs	r3, #41	; 0x29
 8002f7e:	e01e      	b.n	8002fbe <HAL_ADC_PollForConversion+0x142>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6919      	ldr	r1, [r3, #16]
 8002f86:	4b3d      	ldr	r3, [pc, #244]	; (800307c <HAL_ADC_PollForConversion+0x200>)
 8002f88:	400b      	ands	r3, r1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <HAL_ADC_PollForConversion+0x120>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68d9      	ldr	r1, [r3, #12]
 8002f94:	4b3a      	ldr	r3, [pc, #232]	; (8003080 <HAL_ADC_PollForConversion+0x204>)
 8002f96:	400b      	ands	r3, r1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00d      	beq.n	8002fb8 <HAL_ADC_PollForConversion+0x13c>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6919      	ldr	r1, [r3, #16]
 8002fa2:	4b38      	ldr	r3, [pc, #224]	; (8003084 <HAL_ADC_PollForConversion+0x208>)
 8002fa4:	400b      	ands	r3, r1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d108      	bne.n	8002fbc <HAL_ADC_PollForConversion+0x140>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68d9      	ldr	r1, [r3, #12]
 8002fb0:	4b34      	ldr	r3, [pc, #208]	; (8003084 <HAL_ADC_PollForConversion+0x208>)
 8002fb2:	400b      	ands	r3, r1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_ADC_PollForConversion+0x140>
 8002fb8:	2354      	movs	r3, #84	; 0x54
 8002fba:	e000      	b.n	8002fbe <HAL_ADC_PollForConversion+0x142>
 8002fbc:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002fbe:	fb02 f303 	mul.w	r3, r2, r3
 8002fc2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002fc4:	e021      	b.n	800300a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fcc:	d01a      	beq.n	8003004 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d007      	beq.n	8002fe4 <HAL_ADC_PollForConversion+0x168>
 8002fd4:	f7ff fd9e 	bl	8002b14 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d20f      	bcs.n	8003004 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d90b      	bls.n	8003004 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff0:	f043 0204 	orr.w	r2, r3, #4
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e030      	b.n	8003066 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	3301      	adds	r3, #1
 8003008:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	429a      	cmp	r2, r3
 8003010:	d8d9      	bhi.n	8002fc6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f06f 0212 	mvn.w	r2, #18
 800301a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003020:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003032:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003036:	d115      	bne.n	8003064 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800303c:	2b00      	cmp	r3, #0
 800303e:	d111      	bne.n	8003064 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003044:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003050:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d105      	bne.n	8003064 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305c:	f043 0201 	orr.w	r2, r3, #1
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	371c      	adds	r7, #28
 800306a:	46bd      	mov	sp, r7
 800306c:	bd90      	pop	{r4, r7, pc}
 800306e:	bf00      	nop
 8003070:	20000034 	.word	0x20000034
 8003074:	24924924 	.word	0x24924924
 8003078:	00924924 	.word	0x00924924
 800307c:	12492492 	.word	0x12492492
 8003080:	00492492 	.word	0x00492492
 8003084:	00249249 	.word	0x00249249

08003088 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003096:	4618      	mov	r0, r3
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr

080030a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x20>
 80030bc:	2302      	movs	r3, #2
 80030be:	e0dc      	b.n	800327a <HAL_ADC_ConfigChannel+0x1da>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b06      	cmp	r3, #6
 80030ce:	d81c      	bhi.n	800310a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	3b05      	subs	r3, #5
 80030e2:	221f      	movs	r2, #31
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	4019      	ands	r1, r3
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	6818      	ldr	r0, [r3, #0]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	3b05      	subs	r3, #5
 80030fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	635a      	str	r2, [r3, #52]	; 0x34
 8003108:	e03c      	b.n	8003184 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b0c      	cmp	r3, #12
 8003110:	d81c      	bhi.n	800314c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	3b23      	subs	r3, #35	; 0x23
 8003124:	221f      	movs	r2, #31
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	43db      	mvns	r3, r3
 800312c:	4019      	ands	r1, r3
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	4613      	mov	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	3b23      	subs	r3, #35	; 0x23
 800313e:	fa00 f203 	lsl.w	r2, r0, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	631a      	str	r2, [r3, #48]	; 0x30
 800314a:	e01b      	b.n	8003184 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	3b41      	subs	r3, #65	; 0x41
 800315e:	221f      	movs	r2, #31
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	4019      	ands	r1, r3
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	3b41      	subs	r3, #65	; 0x41
 8003178:	fa00 f203 	lsl.w	r2, r0, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b09      	cmp	r3, #9
 800318a:	d91c      	bls.n	80031c6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68d9      	ldr	r1, [r3, #12]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	4613      	mov	r3, r2
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	4413      	add	r3, r2
 800319c:	3b1e      	subs	r3, #30
 800319e:	2207      	movs	r2, #7
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	4019      	ands	r1, r3
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	6898      	ldr	r0, [r3, #8]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	4613      	mov	r3, r2
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	4413      	add	r3, r2
 80031b6:	3b1e      	subs	r3, #30
 80031b8:	fa00 f203 	lsl.w	r2, r0, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	60da      	str	r2, [r3, #12]
 80031c4:	e019      	b.n	80031fa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6919      	ldr	r1, [r3, #16]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	4613      	mov	r3, r2
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	4413      	add	r3, r2
 80031d6:	2207      	movs	r2, #7
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	4019      	ands	r1, r3
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	6898      	ldr	r0, [r3, #8]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	4613      	mov	r3, r2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4413      	add	r3, r2
 80031ee:	fa00 f203 	lsl.w	r2, r0, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b10      	cmp	r3, #16
 8003200:	d003      	beq.n	800320a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003206:	2b11      	cmp	r3, #17
 8003208:	d132      	bne.n	8003270 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a1d      	ldr	r2, [pc, #116]	; (8003284 <HAL_ADC_ConfigChannel+0x1e4>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d125      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d126      	bne.n	8003270 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003230:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b10      	cmp	r3, #16
 8003238:	d11a      	bne.n	8003270 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800323a:	4b13      	ldr	r3, [pc, #76]	; (8003288 <HAL_ADC_ConfigChannel+0x1e8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a13      	ldr	r2, [pc, #76]	; (800328c <HAL_ADC_ConfigChannel+0x1ec>)
 8003240:	fba2 2303 	umull	r2, r3, r2, r3
 8003244:	0c9a      	lsrs	r2, r3, #18
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003250:	e002      	b.n	8003258 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	3b01      	subs	r3, #1
 8003256:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f9      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x1b2>
 800325e:	e007      	b.n	8003270 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003264:	f043 0220 	orr.w	r2, r3, #32
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003278:	7bfb      	ldrb	r3, [r7, #15]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr
 8003284:	40012400 	.word	0x40012400
 8003288:	20000034 	.word	0x20000034
 800328c:	431bde83 	.word	0x431bde83

08003290 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d040      	beq.n	8003330 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0201 	orr.w	r2, r2, #1
 80032bc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032be:	4b1f      	ldr	r3, [pc, #124]	; (800333c <ADC_Enable+0xac>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a1f      	ldr	r2, [pc, #124]	; (8003340 <ADC_Enable+0xb0>)
 80032c4:	fba2 2303 	umull	r2, r3, r2, r3
 80032c8:	0c9b      	lsrs	r3, r3, #18
 80032ca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80032cc:	e002      	b.n	80032d4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	3b01      	subs	r3, #1
 80032d2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f9      	bne.n	80032ce <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032da:	f7ff fc1b 	bl	8002b14 <HAL_GetTick>
 80032de:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80032e0:	e01f      	b.n	8003322 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032e2:	f7ff fc17 	bl	8002b14 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d918      	bls.n	8003322 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d011      	beq.n	8003322 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003302:	f043 0210 	orr.w	r2, r3, #16
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330e:	f043 0201 	orr.w	r2, r3, #1
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e007      	b.n	8003332 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b01      	cmp	r3, #1
 800332e:	d1d8      	bne.n	80032e2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	20000034 	.word	0x20000034
 8003340:	431bde83 	.word	0x431bde83

08003344 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b01      	cmp	r3, #1
 800335c:	d12e      	bne.n	80033bc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0201 	bic.w	r2, r2, #1
 800336c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800336e:	f7ff fbd1 	bl	8002b14 <HAL_GetTick>
 8003372:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003374:	e01b      	b.n	80033ae <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003376:	f7ff fbcd 	bl	8002b14 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d914      	bls.n	80033ae <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b01      	cmp	r3, #1
 8003390:	d10d      	bne.n	80033ae <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003396:	f043 0210 	orr.w	r2, r3, #16
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a2:	f043 0201 	orr.w	r2, r3, #1
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e007      	b.n	80033be <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d0dc      	beq.n	8003376 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033d8:	4b0c      	ldr	r3, [pc, #48]	; (800340c <__NVIC_SetPriorityGrouping+0x44>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033e4:	4013      	ands	r3, r2
 80033e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033fa:	4a04      	ldr	r2, [pc, #16]	; (800340c <__NVIC_SetPriorityGrouping+0x44>)
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	60d3      	str	r3, [r2, #12]
}
 8003400:	bf00      	nop
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	e000ed00 	.word	0xe000ed00

08003410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003414:	4b04      	ldr	r3, [pc, #16]	; (8003428 <__NVIC_GetPriorityGrouping+0x18>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	0a1b      	lsrs	r3, r3, #8
 800341a:	f003 0307 	and.w	r3, r3, #7
}
 800341e:	4618      	mov	r0, r3
 8003420:	46bd      	mov	sp, r7
 8003422:	bc80      	pop	{r7}
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	e000ed00 	.word	0xe000ed00

0800342c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343a:	2b00      	cmp	r3, #0
 800343c:	db0b      	blt.n	8003456 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800343e:	79fb      	ldrb	r3, [r7, #7]
 8003440:	f003 021f 	and.w	r2, r3, #31
 8003444:	4906      	ldr	r1, [pc, #24]	; (8003460 <__NVIC_EnableIRQ+0x34>)
 8003446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344a:	095b      	lsrs	r3, r3, #5
 800344c:	2001      	movs	r0, #1
 800344e:	fa00 f202 	lsl.w	r2, r0, r2
 8003452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr
 8003460:	e000e100 	.word	0xe000e100

08003464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	6039      	str	r1, [r7, #0]
 800346e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003474:	2b00      	cmp	r3, #0
 8003476:	db0a      	blt.n	800348e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	b2da      	uxtb	r2, r3
 800347c:	490c      	ldr	r1, [pc, #48]	; (80034b0 <__NVIC_SetPriority+0x4c>)
 800347e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003482:	0112      	lsls	r2, r2, #4
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	440b      	add	r3, r1
 8003488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800348c:	e00a      	b.n	80034a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	b2da      	uxtb	r2, r3
 8003492:	4908      	ldr	r1, [pc, #32]	; (80034b4 <__NVIC_SetPriority+0x50>)
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	3b04      	subs	r3, #4
 800349c:	0112      	lsls	r2, r2, #4
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	440b      	add	r3, r1
 80034a2:	761a      	strb	r2, [r3, #24]
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	e000e100 	.word	0xe000e100
 80034b4:	e000ed00 	.word	0xe000ed00

080034b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b089      	sub	sp, #36	; 0x24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f1c3 0307 	rsb	r3, r3, #7
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	bf28      	it	cs
 80034d6:	2304      	movcs	r3, #4
 80034d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	3304      	adds	r3, #4
 80034de:	2b06      	cmp	r3, #6
 80034e0:	d902      	bls.n	80034e8 <NVIC_EncodePriority+0x30>
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	3b03      	subs	r3, #3
 80034e6:	e000      	b.n	80034ea <NVIC_EncodePriority+0x32>
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ec:	f04f 32ff 	mov.w	r2, #4294967295
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43da      	mvns	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	401a      	ands	r2, r3
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003500:	f04f 31ff 	mov.w	r1, #4294967295
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	fa01 f303 	lsl.w	r3, r1, r3
 800350a:	43d9      	mvns	r1, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003510:	4313      	orrs	r3, r2
         );
}
 8003512:	4618      	mov	r0, r3
 8003514:	3724      	adds	r7, #36	; 0x24
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr

0800351c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3b01      	subs	r3, #1
 8003528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800352c:	d301      	bcc.n	8003532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800352e:	2301      	movs	r3, #1
 8003530:	e00f      	b.n	8003552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003532:	4a0a      	ldr	r2, [pc, #40]	; (800355c <SysTick_Config+0x40>)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3b01      	subs	r3, #1
 8003538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800353a:	210f      	movs	r1, #15
 800353c:	f04f 30ff 	mov.w	r0, #4294967295
 8003540:	f7ff ff90 	bl	8003464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <SysTick_Config+0x40>)
 8003546:	2200      	movs	r2, #0
 8003548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800354a:	4b04      	ldr	r3, [pc, #16]	; (800355c <SysTick_Config+0x40>)
 800354c:	2207      	movs	r2, #7
 800354e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	e000e010 	.word	0xe000e010

08003560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff ff2d 	bl	80033c8 <__NVIC_SetPriorityGrouping>
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003576:	b580      	push	{r7, lr}
 8003578:	b086      	sub	sp, #24
 800357a:	af00      	add	r7, sp, #0
 800357c:	4603      	mov	r3, r0
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	607a      	str	r2, [r7, #4]
 8003582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003584:	2300      	movs	r3, #0
 8003586:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003588:	f7ff ff42 	bl	8003410 <__NVIC_GetPriorityGrouping>
 800358c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	6978      	ldr	r0, [r7, #20]
 8003594:	f7ff ff90 	bl	80034b8 <NVIC_EncodePriority>
 8003598:	4602      	mov	r2, r0
 800359a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800359e:	4611      	mov	r1, r2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff ff5f 	bl	8003464 <__NVIC_SetPriority>
}
 80035a6:	bf00      	nop
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	4603      	mov	r3, r0
 80035b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff ff35 	bl	800342c <__NVIC_EnableIRQ>
}
 80035c2:	bf00      	nop
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff ffa2 	bl	800351c <SysTick_Config>
 80035d8:	4603      	mov	r3, r0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b085      	sub	sp, #20
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d008      	beq.n	800360c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2204      	movs	r2, #4
 80035fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e020      	b.n	800364e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 020e 	bic.w	r2, r2, #14
 800361a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0201 	bic.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003634:	2101      	movs	r1, #1
 8003636:	fa01 f202 	lsl.w	r2, r1, r2
 800363a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800364c:	7bfb      	ldrb	r3, [r7, #15]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr

08003658 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003660:	2300      	movs	r3, #0
 8003662:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d005      	beq.n	800367c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2204      	movs	r2, #4
 8003674:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	73fb      	strb	r3, [r7, #15]
 800367a:	e051      	b.n	8003720 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 020e 	bic.w	r2, r2, #14
 800368a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0201 	bic.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a22      	ldr	r2, [pc, #136]	; (800372c <HAL_DMA_Abort_IT+0xd4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d029      	beq.n	80036fa <HAL_DMA_Abort_IT+0xa2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a21      	ldr	r2, [pc, #132]	; (8003730 <HAL_DMA_Abort_IT+0xd8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d022      	beq.n	80036f6 <HAL_DMA_Abort_IT+0x9e>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a1f      	ldr	r2, [pc, #124]	; (8003734 <HAL_DMA_Abort_IT+0xdc>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d01a      	beq.n	80036f0 <HAL_DMA_Abort_IT+0x98>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a1e      	ldr	r2, [pc, #120]	; (8003738 <HAL_DMA_Abort_IT+0xe0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d012      	beq.n	80036ea <HAL_DMA_Abort_IT+0x92>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a1c      	ldr	r2, [pc, #112]	; (800373c <HAL_DMA_Abort_IT+0xe4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d00a      	beq.n	80036e4 <HAL_DMA_Abort_IT+0x8c>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a1b      	ldr	r2, [pc, #108]	; (8003740 <HAL_DMA_Abort_IT+0xe8>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d102      	bne.n	80036de <HAL_DMA_Abort_IT+0x86>
 80036d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80036dc:	e00e      	b.n	80036fc <HAL_DMA_Abort_IT+0xa4>
 80036de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036e2:	e00b      	b.n	80036fc <HAL_DMA_Abort_IT+0xa4>
 80036e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036e8:	e008      	b.n	80036fc <HAL_DMA_Abort_IT+0xa4>
 80036ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036ee:	e005      	b.n	80036fc <HAL_DMA_Abort_IT+0xa4>
 80036f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036f4:	e002      	b.n	80036fc <HAL_DMA_Abort_IT+0xa4>
 80036f6:	2310      	movs	r3, #16
 80036f8:	e000      	b.n	80036fc <HAL_DMA_Abort_IT+0xa4>
 80036fa:	2301      	movs	r3, #1
 80036fc:	4a11      	ldr	r2, [pc, #68]	; (8003744 <HAL_DMA_Abort_IT+0xec>)
 80036fe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	4798      	blx	r3
    } 
  }
  return status;
 8003720:	7bfb      	ldrb	r3, [r7, #15]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40020008 	.word	0x40020008
 8003730:	4002001c 	.word	0x4002001c
 8003734:	40020030 	.word	0x40020030
 8003738:	40020044 	.word	0x40020044
 800373c:	40020058 	.word	0x40020058
 8003740:	4002006c 	.word	0x4002006c
 8003744:	40020000 	.word	0x40020000

08003748 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003748:	b480      	push	{r7}
 800374a:	b08b      	sub	sp, #44	; 0x2c
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003752:	2300      	movs	r3, #0
 8003754:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003756:	2300      	movs	r3, #0
 8003758:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800375a:	e169      	b.n	8003a30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800375c:	2201      	movs	r2, #1
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69fa      	ldr	r2, [r7, #28]
 800376c:	4013      	ands	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	429a      	cmp	r2, r3
 8003776:	f040 8158 	bne.w	8003a2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	4a9a      	ldr	r2, [pc, #616]	; (80039e8 <HAL_GPIO_Init+0x2a0>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d05e      	beq.n	8003842 <HAL_GPIO_Init+0xfa>
 8003784:	4a98      	ldr	r2, [pc, #608]	; (80039e8 <HAL_GPIO_Init+0x2a0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d875      	bhi.n	8003876 <HAL_GPIO_Init+0x12e>
 800378a:	4a98      	ldr	r2, [pc, #608]	; (80039ec <HAL_GPIO_Init+0x2a4>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d058      	beq.n	8003842 <HAL_GPIO_Init+0xfa>
 8003790:	4a96      	ldr	r2, [pc, #600]	; (80039ec <HAL_GPIO_Init+0x2a4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d86f      	bhi.n	8003876 <HAL_GPIO_Init+0x12e>
 8003796:	4a96      	ldr	r2, [pc, #600]	; (80039f0 <HAL_GPIO_Init+0x2a8>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d052      	beq.n	8003842 <HAL_GPIO_Init+0xfa>
 800379c:	4a94      	ldr	r2, [pc, #592]	; (80039f0 <HAL_GPIO_Init+0x2a8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d869      	bhi.n	8003876 <HAL_GPIO_Init+0x12e>
 80037a2:	4a94      	ldr	r2, [pc, #592]	; (80039f4 <HAL_GPIO_Init+0x2ac>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d04c      	beq.n	8003842 <HAL_GPIO_Init+0xfa>
 80037a8:	4a92      	ldr	r2, [pc, #584]	; (80039f4 <HAL_GPIO_Init+0x2ac>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d863      	bhi.n	8003876 <HAL_GPIO_Init+0x12e>
 80037ae:	4a92      	ldr	r2, [pc, #584]	; (80039f8 <HAL_GPIO_Init+0x2b0>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d046      	beq.n	8003842 <HAL_GPIO_Init+0xfa>
 80037b4:	4a90      	ldr	r2, [pc, #576]	; (80039f8 <HAL_GPIO_Init+0x2b0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d85d      	bhi.n	8003876 <HAL_GPIO_Init+0x12e>
 80037ba:	2b12      	cmp	r3, #18
 80037bc:	d82a      	bhi.n	8003814 <HAL_GPIO_Init+0xcc>
 80037be:	2b12      	cmp	r3, #18
 80037c0:	d859      	bhi.n	8003876 <HAL_GPIO_Init+0x12e>
 80037c2:	a201      	add	r2, pc, #4	; (adr r2, 80037c8 <HAL_GPIO_Init+0x80>)
 80037c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c8:	08003843 	.word	0x08003843
 80037cc:	0800381d 	.word	0x0800381d
 80037d0:	0800382f 	.word	0x0800382f
 80037d4:	08003871 	.word	0x08003871
 80037d8:	08003877 	.word	0x08003877
 80037dc:	08003877 	.word	0x08003877
 80037e0:	08003877 	.word	0x08003877
 80037e4:	08003877 	.word	0x08003877
 80037e8:	08003877 	.word	0x08003877
 80037ec:	08003877 	.word	0x08003877
 80037f0:	08003877 	.word	0x08003877
 80037f4:	08003877 	.word	0x08003877
 80037f8:	08003877 	.word	0x08003877
 80037fc:	08003877 	.word	0x08003877
 8003800:	08003877 	.word	0x08003877
 8003804:	08003877 	.word	0x08003877
 8003808:	08003877 	.word	0x08003877
 800380c:	08003825 	.word	0x08003825
 8003810:	08003839 	.word	0x08003839
 8003814:	4a79      	ldr	r2, [pc, #484]	; (80039fc <HAL_GPIO_Init+0x2b4>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d013      	beq.n	8003842 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800381a:	e02c      	b.n	8003876 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	623b      	str	r3, [r7, #32]
          break;
 8003822:	e029      	b.n	8003878 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	3304      	adds	r3, #4
 800382a:	623b      	str	r3, [r7, #32]
          break;
 800382c:	e024      	b.n	8003878 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	3308      	adds	r3, #8
 8003834:	623b      	str	r3, [r7, #32]
          break;
 8003836:	e01f      	b.n	8003878 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	330c      	adds	r3, #12
 800383e:	623b      	str	r3, [r7, #32]
          break;
 8003840:	e01a      	b.n	8003878 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d102      	bne.n	8003850 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800384a:	2304      	movs	r3, #4
 800384c:	623b      	str	r3, [r7, #32]
          break;
 800384e:	e013      	b.n	8003878 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d105      	bne.n	8003864 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003858:	2308      	movs	r3, #8
 800385a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69fa      	ldr	r2, [r7, #28]
 8003860:	611a      	str	r2, [r3, #16]
          break;
 8003862:	e009      	b.n	8003878 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003864:	2308      	movs	r3, #8
 8003866:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	69fa      	ldr	r2, [r7, #28]
 800386c:	615a      	str	r2, [r3, #20]
          break;
 800386e:	e003      	b.n	8003878 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003870:	2300      	movs	r3, #0
 8003872:	623b      	str	r3, [r7, #32]
          break;
 8003874:	e000      	b.n	8003878 <HAL_GPIO_Init+0x130>
          break;
 8003876:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	2bff      	cmp	r3, #255	; 0xff
 800387c:	d801      	bhi.n	8003882 <HAL_GPIO_Init+0x13a>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	e001      	b.n	8003886 <HAL_GPIO_Init+0x13e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	3304      	adds	r3, #4
 8003886:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	2bff      	cmp	r3, #255	; 0xff
 800388c:	d802      	bhi.n	8003894 <HAL_GPIO_Init+0x14c>
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	e002      	b.n	800389a <HAL_GPIO_Init+0x152>
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	3b08      	subs	r3, #8
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	210f      	movs	r1, #15
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	fa01 f303 	lsl.w	r3, r1, r3
 80038a8:	43db      	mvns	r3, r3
 80038aa:	401a      	ands	r2, r3
 80038ac:	6a39      	ldr	r1, [r7, #32]
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	fa01 f303 	lsl.w	r3, r1, r3
 80038b4:	431a      	orrs	r2, r3
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 80b1 	beq.w	8003a2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80038c8:	4b4d      	ldr	r3, [pc, #308]	; (8003a00 <HAL_GPIO_Init+0x2b8>)
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	4a4c      	ldr	r2, [pc, #304]	; (8003a00 <HAL_GPIO_Init+0x2b8>)
 80038ce:	f043 0301 	orr.w	r3, r3, #1
 80038d2:	6193      	str	r3, [r2, #24]
 80038d4:	4b4a      	ldr	r3, [pc, #296]	; (8003a00 <HAL_GPIO_Init+0x2b8>)
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	60bb      	str	r3, [r7, #8]
 80038de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80038e0:	4a48      	ldr	r2, [pc, #288]	; (8003a04 <HAL_GPIO_Init+0x2bc>)
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	089b      	lsrs	r3, r3, #2
 80038e6:	3302      	adds	r3, #2
 80038e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	220f      	movs	r2, #15
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4013      	ands	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a40      	ldr	r2, [pc, #256]	; (8003a08 <HAL_GPIO_Init+0x2c0>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d013      	beq.n	8003934 <HAL_GPIO_Init+0x1ec>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a3f      	ldr	r2, [pc, #252]	; (8003a0c <HAL_GPIO_Init+0x2c4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00d      	beq.n	8003930 <HAL_GPIO_Init+0x1e8>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a3e      	ldr	r2, [pc, #248]	; (8003a10 <HAL_GPIO_Init+0x2c8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d007      	beq.n	800392c <HAL_GPIO_Init+0x1e4>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a3d      	ldr	r2, [pc, #244]	; (8003a14 <HAL_GPIO_Init+0x2cc>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d101      	bne.n	8003928 <HAL_GPIO_Init+0x1e0>
 8003924:	2303      	movs	r3, #3
 8003926:	e006      	b.n	8003936 <HAL_GPIO_Init+0x1ee>
 8003928:	2304      	movs	r3, #4
 800392a:	e004      	b.n	8003936 <HAL_GPIO_Init+0x1ee>
 800392c:	2302      	movs	r3, #2
 800392e:	e002      	b.n	8003936 <HAL_GPIO_Init+0x1ee>
 8003930:	2301      	movs	r3, #1
 8003932:	e000      	b.n	8003936 <HAL_GPIO_Init+0x1ee>
 8003934:	2300      	movs	r3, #0
 8003936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003938:	f002 0203 	and.w	r2, r2, #3
 800393c:	0092      	lsls	r2, r2, #2
 800393e:	4093      	lsls	r3, r2
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003946:	492f      	ldr	r1, [pc, #188]	; (8003a04 <HAL_GPIO_Init+0x2bc>)
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	089b      	lsrs	r3, r3, #2
 800394c:	3302      	adds	r3, #2
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d006      	beq.n	800396e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003960:	4b2d      	ldr	r3, [pc, #180]	; (8003a18 <HAL_GPIO_Init+0x2d0>)
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	492c      	ldr	r1, [pc, #176]	; (8003a18 <HAL_GPIO_Init+0x2d0>)
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	4313      	orrs	r3, r2
 800396a:	608b      	str	r3, [r1, #8]
 800396c:	e006      	b.n	800397c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800396e:	4b2a      	ldr	r3, [pc, #168]	; (8003a18 <HAL_GPIO_Init+0x2d0>)
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	43db      	mvns	r3, r3
 8003976:	4928      	ldr	r1, [pc, #160]	; (8003a18 <HAL_GPIO_Init+0x2d0>)
 8003978:	4013      	ands	r3, r2
 800397a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d006      	beq.n	8003996 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003988:	4b23      	ldr	r3, [pc, #140]	; (8003a18 <HAL_GPIO_Init+0x2d0>)
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	4922      	ldr	r1, [pc, #136]	; (8003a18 <HAL_GPIO_Init+0x2d0>)
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	4313      	orrs	r3, r2
 8003992:	60cb      	str	r3, [r1, #12]
 8003994:	e006      	b.n	80039a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003996:	4b20      	ldr	r3, [pc, #128]	; (8003a18 <HAL_GPIO_Init+0x2d0>)
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	43db      	mvns	r3, r3
 800399e:	491e      	ldr	r1, [pc, #120]	; (8003a18 <HAL_GPIO_Init+0x2d0>)
 80039a0:	4013      	ands	r3, r2
 80039a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d006      	beq.n	80039be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80039b0:	4b19      	ldr	r3, [pc, #100]	; (8003a18 <HAL_GPIO_Init+0x2d0>)
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	4918      	ldr	r1, [pc, #96]	; (8003a18 <HAL_GPIO_Init+0x2d0>)
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	604b      	str	r3, [r1, #4]
 80039bc:	e006      	b.n	80039cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80039be:	4b16      	ldr	r3, [pc, #88]	; (8003a18 <HAL_GPIO_Init+0x2d0>)
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	43db      	mvns	r3, r3
 80039c6:	4914      	ldr	r1, [pc, #80]	; (8003a18 <HAL_GPIO_Init+0x2d0>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d021      	beq.n	8003a1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80039d8:	4b0f      	ldr	r3, [pc, #60]	; (8003a18 <HAL_GPIO_Init+0x2d0>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	490e      	ldr	r1, [pc, #56]	; (8003a18 <HAL_GPIO_Init+0x2d0>)
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	600b      	str	r3, [r1, #0]
 80039e4:	e021      	b.n	8003a2a <HAL_GPIO_Init+0x2e2>
 80039e6:	bf00      	nop
 80039e8:	10320000 	.word	0x10320000
 80039ec:	10310000 	.word	0x10310000
 80039f0:	10220000 	.word	0x10220000
 80039f4:	10210000 	.word	0x10210000
 80039f8:	10120000 	.word	0x10120000
 80039fc:	10110000 	.word	0x10110000
 8003a00:	40021000 	.word	0x40021000
 8003a04:	40010000 	.word	0x40010000
 8003a08:	40010800 	.word	0x40010800
 8003a0c:	40010c00 	.word	0x40010c00
 8003a10:	40011000 	.word	0x40011000
 8003a14:	40011400 	.word	0x40011400
 8003a18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003a1c:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <HAL_GPIO_Init+0x304>)
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	43db      	mvns	r3, r3
 8003a24:	4909      	ldr	r1, [pc, #36]	; (8003a4c <HAL_GPIO_Init+0x304>)
 8003a26:	4013      	ands	r3, r2
 8003a28:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	fa22 f303 	lsr.w	r3, r2, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f47f ae8e 	bne.w	800375c <HAL_GPIO_Init+0x14>
  }
}
 8003a40:	bf00      	nop
 8003a42:	bf00      	nop
 8003a44:	372c      	adds	r7, #44	; 0x2c
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr
 8003a4c:	40010400 	.word	0x40010400

08003a50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	887b      	ldrh	r3, [r7, #2]
 8003a62:	4013      	ands	r3, r2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	73fb      	strb	r3, [r7, #15]
 8003a6c:	e001      	b.n	8003a72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc80      	pop	{r7}
 8003a7c:	4770      	bx	lr

08003a7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
 8003a86:	460b      	mov	r3, r1
 8003a88:	807b      	strh	r3, [r7, #2]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a8e:	787b      	ldrb	r3, [r7, #1]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a94:	887a      	ldrh	r2, [r7, #2]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a9a:	e003      	b.n	8003aa4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a9c:	887b      	ldrh	r3, [r7, #2]
 8003a9e:	041a      	lsls	r2, r3, #16
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	611a      	str	r2, [r3, #16]
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bc80      	pop	{r7}
 8003aac:	4770      	bx	lr
	...

08003ab0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e272      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 8087 	beq.w	8003bde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ad0:	4b92      	ldr	r3, [pc, #584]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f003 030c 	and.w	r3, r3, #12
 8003ad8:	2b04      	cmp	r3, #4
 8003ada:	d00c      	beq.n	8003af6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003adc:	4b8f      	ldr	r3, [pc, #572]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f003 030c 	and.w	r3, r3, #12
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d112      	bne.n	8003b0e <HAL_RCC_OscConfig+0x5e>
 8003ae8:	4b8c      	ldr	r3, [pc, #560]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af4:	d10b      	bne.n	8003b0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af6:	4b89      	ldr	r3, [pc, #548]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d06c      	beq.n	8003bdc <HAL_RCC_OscConfig+0x12c>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d168      	bne.n	8003bdc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e24c      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b16:	d106      	bne.n	8003b26 <HAL_RCC_OscConfig+0x76>
 8003b18:	4b80      	ldr	r3, [pc, #512]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a7f      	ldr	r2, [pc, #508]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	e02e      	b.n	8003b84 <HAL_RCC_OscConfig+0xd4>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10c      	bne.n	8003b48 <HAL_RCC_OscConfig+0x98>
 8003b2e:	4b7b      	ldr	r3, [pc, #492]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a7a      	ldr	r2, [pc, #488]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	4b78      	ldr	r3, [pc, #480]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a77      	ldr	r2, [pc, #476]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003b40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	e01d      	b.n	8003b84 <HAL_RCC_OscConfig+0xd4>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b50:	d10c      	bne.n	8003b6c <HAL_RCC_OscConfig+0xbc>
 8003b52:	4b72      	ldr	r3, [pc, #456]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a71      	ldr	r2, [pc, #452]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	4b6f      	ldr	r3, [pc, #444]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a6e      	ldr	r2, [pc, #440]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	e00b      	b.n	8003b84 <HAL_RCC_OscConfig+0xd4>
 8003b6c:	4b6b      	ldr	r3, [pc, #428]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a6a      	ldr	r2, [pc, #424]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b76:	6013      	str	r3, [r2, #0]
 8003b78:	4b68      	ldr	r3, [pc, #416]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a67      	ldr	r2, [pc, #412]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d013      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8c:	f7fe ffc2 	bl	8002b14 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b94:	f7fe ffbe 	bl	8002b14 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b64      	cmp	r3, #100	; 0x64
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e200      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ba6:	4b5d      	ldr	r3, [pc, #372]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0f0      	beq.n	8003b94 <HAL_RCC_OscConfig+0xe4>
 8003bb2:	e014      	b.n	8003bde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb4:	f7fe ffae 	bl	8002b14 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bbc:	f7fe ffaa 	bl	8002b14 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b64      	cmp	r3, #100	; 0x64
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e1ec      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bce:	4b53      	ldr	r3, [pc, #332]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f0      	bne.n	8003bbc <HAL_RCC_OscConfig+0x10c>
 8003bda:	e000      	b.n	8003bde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d063      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bea:	4b4c      	ldr	r3, [pc, #304]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f003 030c 	and.w	r3, r3, #12
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00b      	beq.n	8003c0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003bf6:	4b49      	ldr	r3, [pc, #292]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f003 030c 	and.w	r3, r3, #12
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d11c      	bne.n	8003c3c <HAL_RCC_OscConfig+0x18c>
 8003c02:	4b46      	ldr	r3, [pc, #280]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d116      	bne.n	8003c3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c0e:	4b43      	ldr	r3, [pc, #268]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d005      	beq.n	8003c26 <HAL_RCC_OscConfig+0x176>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d001      	beq.n	8003c26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e1c0      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c26:	4b3d      	ldr	r3, [pc, #244]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	4939      	ldr	r1, [pc, #228]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c3a:	e03a      	b.n	8003cb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d020      	beq.n	8003c86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c44:	4b36      	ldr	r3, [pc, #216]	; (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003c46:	2201      	movs	r2, #1
 8003c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4a:	f7fe ff63 	bl	8002b14 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c52:	f7fe ff5f 	bl	8002b14 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e1a1      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c64:	4b2d      	ldr	r3, [pc, #180]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0f0      	beq.n	8003c52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c70:	4b2a      	ldr	r3, [pc, #168]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	4927      	ldr	r1, [pc, #156]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	600b      	str	r3, [r1, #0]
 8003c84:	e015      	b.n	8003cb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c86:	4b26      	ldr	r3, [pc, #152]	; (8003d20 <HAL_RCC_OscConfig+0x270>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8c:	f7fe ff42 	bl	8002b14 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c94:	f7fe ff3e 	bl	8002b14 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e180      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ca6:	4b1d      	ldr	r3, [pc, #116]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f0      	bne.n	8003c94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d03a      	beq.n	8003d34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d019      	beq.n	8003cfa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cc6:	4b17      	ldr	r3, [pc, #92]	; (8003d24 <HAL_RCC_OscConfig+0x274>)
 8003cc8:	2201      	movs	r2, #1
 8003cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ccc:	f7fe ff22 	bl	8002b14 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd4:	f7fe ff1e 	bl	8002b14 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e160      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ce6:	4b0d      	ldr	r3, [pc, #52]	; (8003d1c <HAL_RCC_OscConfig+0x26c>)
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0f0      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003cf2:	2001      	movs	r0, #1
 8003cf4:	f000 face 	bl	8004294 <RCC_Delay>
 8003cf8:	e01c      	b.n	8003d34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cfa:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <HAL_RCC_OscConfig+0x274>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d00:	f7fe ff08 	bl	8002b14 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d06:	e00f      	b.n	8003d28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d08:	f7fe ff04 	bl	8002b14 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d908      	bls.n	8003d28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e146      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>
 8003d1a:	bf00      	nop
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	42420000 	.word	0x42420000
 8003d24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d28:	4b92      	ldr	r3, [pc, #584]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1e9      	bne.n	8003d08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 80a6 	beq.w	8003e8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d42:	2300      	movs	r3, #0
 8003d44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d46:	4b8b      	ldr	r3, [pc, #556]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10d      	bne.n	8003d6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d52:	4b88      	ldr	r3, [pc, #544]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	4a87      	ldr	r2, [pc, #540]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d5c:	61d3      	str	r3, [r2, #28]
 8003d5e:	4b85      	ldr	r3, [pc, #532]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d66:	60bb      	str	r3, [r7, #8]
 8003d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d6e:	4b82      	ldr	r3, [pc, #520]	; (8003f78 <HAL_RCC_OscConfig+0x4c8>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d118      	bne.n	8003dac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d7a:	4b7f      	ldr	r3, [pc, #508]	; (8003f78 <HAL_RCC_OscConfig+0x4c8>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a7e      	ldr	r2, [pc, #504]	; (8003f78 <HAL_RCC_OscConfig+0x4c8>)
 8003d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d86:	f7fe fec5 	bl	8002b14 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d8e:	f7fe fec1 	bl	8002b14 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b64      	cmp	r3, #100	; 0x64
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e103      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da0:	4b75      	ldr	r3, [pc, #468]	; (8003f78 <HAL_RCC_OscConfig+0x4c8>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0f0      	beq.n	8003d8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d106      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x312>
 8003db4:	4b6f      	ldr	r3, [pc, #444]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	4a6e      	ldr	r2, [pc, #440]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003dba:	f043 0301 	orr.w	r3, r3, #1
 8003dbe:	6213      	str	r3, [r2, #32]
 8003dc0:	e02d      	b.n	8003e1e <HAL_RCC_OscConfig+0x36e>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10c      	bne.n	8003de4 <HAL_RCC_OscConfig+0x334>
 8003dca:	4b6a      	ldr	r3, [pc, #424]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	4a69      	ldr	r2, [pc, #420]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003dd0:	f023 0301 	bic.w	r3, r3, #1
 8003dd4:	6213      	str	r3, [r2, #32]
 8003dd6:	4b67      	ldr	r3, [pc, #412]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	4a66      	ldr	r2, [pc, #408]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003ddc:	f023 0304 	bic.w	r3, r3, #4
 8003de0:	6213      	str	r3, [r2, #32]
 8003de2:	e01c      	b.n	8003e1e <HAL_RCC_OscConfig+0x36e>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	2b05      	cmp	r3, #5
 8003dea:	d10c      	bne.n	8003e06 <HAL_RCC_OscConfig+0x356>
 8003dec:	4b61      	ldr	r3, [pc, #388]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	4a60      	ldr	r2, [pc, #384]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003df2:	f043 0304 	orr.w	r3, r3, #4
 8003df6:	6213      	str	r3, [r2, #32]
 8003df8:	4b5e      	ldr	r3, [pc, #376]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	4a5d      	ldr	r2, [pc, #372]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003dfe:	f043 0301 	orr.w	r3, r3, #1
 8003e02:	6213      	str	r3, [r2, #32]
 8003e04:	e00b      	b.n	8003e1e <HAL_RCC_OscConfig+0x36e>
 8003e06:	4b5b      	ldr	r3, [pc, #364]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	4a5a      	ldr	r2, [pc, #360]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003e0c:	f023 0301 	bic.w	r3, r3, #1
 8003e10:	6213      	str	r3, [r2, #32]
 8003e12:	4b58      	ldr	r3, [pc, #352]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	4a57      	ldr	r2, [pc, #348]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003e18:	f023 0304 	bic.w	r3, r3, #4
 8003e1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d015      	beq.n	8003e52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e26:	f7fe fe75 	bl	8002b14 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e2c:	e00a      	b.n	8003e44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e2e:	f7fe fe71 	bl	8002b14 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e0b1      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e44:	4b4b      	ldr	r3, [pc, #300]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0ee      	beq.n	8003e2e <HAL_RCC_OscConfig+0x37e>
 8003e50:	e014      	b.n	8003e7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e52:	f7fe fe5f 	bl	8002b14 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e58:	e00a      	b.n	8003e70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5a:	f7fe fe5b 	bl	8002b14 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e09b      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e70:	4b40      	ldr	r3, [pc, #256]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1ee      	bne.n	8003e5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e7c:	7dfb      	ldrb	r3, [r7, #23]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d105      	bne.n	8003e8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e82:	4b3c      	ldr	r3, [pc, #240]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	4a3b      	ldr	r2, [pc, #236]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003e88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 8087 	beq.w	8003fa6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e98:	4b36      	ldr	r3, [pc, #216]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 030c 	and.w	r3, r3, #12
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d061      	beq.n	8003f68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d146      	bne.n	8003f3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eac:	4b33      	ldr	r3, [pc, #204]	; (8003f7c <HAL_RCC_OscConfig+0x4cc>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb2:	f7fe fe2f 	bl	8002b14 <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eba:	f7fe fe2b 	bl	8002b14 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e06d      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ecc:	4b29      	ldr	r3, [pc, #164]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1f0      	bne.n	8003eba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee0:	d108      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ee2:	4b24      	ldr	r3, [pc, #144]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	4921      	ldr	r1, [pc, #132]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ef4:	4b1f      	ldr	r3, [pc, #124]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a19      	ldr	r1, [r3, #32]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	430b      	orrs	r3, r1
 8003f06:	491b      	ldr	r1, [pc, #108]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f0c:	4b1b      	ldr	r3, [pc, #108]	; (8003f7c <HAL_RCC_OscConfig+0x4cc>)
 8003f0e:	2201      	movs	r2, #1
 8003f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f12:	f7fe fdff 	bl	8002b14 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f1a:	f7fe fdfb 	bl	8002b14 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e03d      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f2c:	4b11      	ldr	r3, [pc, #68]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0f0      	beq.n	8003f1a <HAL_RCC_OscConfig+0x46a>
 8003f38:	e035      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f3a:	4b10      	ldr	r3, [pc, #64]	; (8003f7c <HAL_RCC_OscConfig+0x4cc>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f40:	f7fe fde8 	bl	8002b14 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f48:	f7fe fde4 	bl	8002b14 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e026      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f5a:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <HAL_RCC_OscConfig+0x4c4>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f0      	bne.n	8003f48 <HAL_RCC_OscConfig+0x498>
 8003f66:	e01e      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d107      	bne.n	8003f80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e019      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>
 8003f74:	40021000 	.word	0x40021000
 8003f78:	40007000 	.word	0x40007000
 8003f7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f80:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <HAL_RCC_OscConfig+0x500>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d106      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d001      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e000      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40021000 	.word	0x40021000

08003fb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0d0      	b.n	800416a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc8:	4b6a      	ldr	r3, [pc, #424]	; (8004174 <HAL_RCC_ClockConfig+0x1c0>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d910      	bls.n	8003ff8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd6:	4b67      	ldr	r3, [pc, #412]	; (8004174 <HAL_RCC_ClockConfig+0x1c0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 0207 	bic.w	r2, r3, #7
 8003fde:	4965      	ldr	r1, [pc, #404]	; (8004174 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe6:	4b63      	ldr	r3, [pc, #396]	; (8004174 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0307 	and.w	r3, r3, #7
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d001      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e0b8      	b.n	800416a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d020      	beq.n	8004046 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004010:	4b59      	ldr	r3, [pc, #356]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	4a58      	ldr	r2, [pc, #352]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 8004016:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800401a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b00      	cmp	r3, #0
 8004026:	d005      	beq.n	8004034 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004028:	4b53      	ldr	r3, [pc, #332]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	4a52      	ldr	r2, [pc, #328]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 800402e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004032:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004034:	4b50      	ldr	r3, [pc, #320]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	494d      	ldr	r1, [pc, #308]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 8004042:	4313      	orrs	r3, r2
 8004044:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d040      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d107      	bne.n	800406a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800405a:	4b47      	ldr	r3, [pc, #284]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d115      	bne.n	8004092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e07f      	b.n	800416a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	2b02      	cmp	r3, #2
 8004070:	d107      	bne.n	8004082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004072:	4b41      	ldr	r3, [pc, #260]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d109      	bne.n	8004092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e073      	b.n	800416a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004082:	4b3d      	ldr	r3, [pc, #244]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e06b      	b.n	800416a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004092:	4b39      	ldr	r3, [pc, #228]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f023 0203 	bic.w	r2, r3, #3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	4936      	ldr	r1, [pc, #216]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040a4:	f7fe fd36 	bl	8002b14 <HAL_GetTick>
 80040a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040aa:	e00a      	b.n	80040c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ac:	f7fe fd32 	bl	8002b14 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e053      	b.n	800416a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c2:	4b2d      	ldr	r3, [pc, #180]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f003 020c 	and.w	r2, r3, #12
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d1eb      	bne.n	80040ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040d4:	4b27      	ldr	r3, [pc, #156]	; (8004174 <HAL_RCC_ClockConfig+0x1c0>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d210      	bcs.n	8004104 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e2:	4b24      	ldr	r3, [pc, #144]	; (8004174 <HAL_RCC_ClockConfig+0x1c0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f023 0207 	bic.w	r2, r3, #7
 80040ea:	4922      	ldr	r1, [pc, #136]	; (8004174 <HAL_RCC_ClockConfig+0x1c0>)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f2:	4b20      	ldr	r3, [pc, #128]	; (8004174 <HAL_RCC_ClockConfig+0x1c0>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d001      	beq.n	8004104 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e032      	b.n	800416a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004110:	4b19      	ldr	r3, [pc, #100]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	4916      	ldr	r1, [pc, #88]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 800411e:	4313      	orrs	r3, r2
 8004120:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0308 	and.w	r3, r3, #8
 800412a:	2b00      	cmp	r3, #0
 800412c:	d009      	beq.n	8004142 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800412e:	4b12      	ldr	r3, [pc, #72]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	490e      	ldr	r1, [pc, #56]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 800413e:	4313      	orrs	r3, r2
 8004140:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004142:	f000 f821 	bl	8004188 <HAL_RCC_GetSysClockFreq>
 8004146:	4602      	mov	r2, r0
 8004148:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	091b      	lsrs	r3, r3, #4
 800414e:	f003 030f 	and.w	r3, r3, #15
 8004152:	490a      	ldr	r1, [pc, #40]	; (800417c <HAL_RCC_ClockConfig+0x1c8>)
 8004154:	5ccb      	ldrb	r3, [r1, r3]
 8004156:	fa22 f303 	lsr.w	r3, r2, r3
 800415a:	4a09      	ldr	r2, [pc, #36]	; (8004180 <HAL_RCC_ClockConfig+0x1cc>)
 800415c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800415e:	4b09      	ldr	r3, [pc, #36]	; (8004184 <HAL_RCC_ClockConfig+0x1d0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f7fe fc94 	bl	8002a90 <HAL_InitTick>

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40022000 	.word	0x40022000
 8004178:	40021000 	.word	0x40021000
 800417c:	08009000 	.word	0x08009000
 8004180:	20000034 	.word	0x20000034
 8004184:	20000038 	.word	0x20000038

08004188 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	2300      	movs	r3, #0
 8004194:	60bb      	str	r3, [r7, #8]
 8004196:	2300      	movs	r3, #0
 8004198:	617b      	str	r3, [r7, #20]
 800419a:	2300      	movs	r3, #0
 800419c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041a2:	4b1e      	ldr	r3, [pc, #120]	; (800421c <HAL_RCC_GetSysClockFreq+0x94>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f003 030c 	and.w	r3, r3, #12
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	d002      	beq.n	80041b8 <HAL_RCC_GetSysClockFreq+0x30>
 80041b2:	2b08      	cmp	r3, #8
 80041b4:	d003      	beq.n	80041be <HAL_RCC_GetSysClockFreq+0x36>
 80041b6:	e027      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041b8:	4b19      	ldr	r3, [pc, #100]	; (8004220 <HAL_RCC_GetSysClockFreq+0x98>)
 80041ba:	613b      	str	r3, [r7, #16]
      break;
 80041bc:	e027      	b.n	800420e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	0c9b      	lsrs	r3, r3, #18
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	4a17      	ldr	r2, [pc, #92]	; (8004224 <HAL_RCC_GetSysClockFreq+0x9c>)
 80041c8:	5cd3      	ldrb	r3, [r2, r3]
 80041ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d010      	beq.n	80041f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041d6:	4b11      	ldr	r3, [pc, #68]	; (800421c <HAL_RCC_GetSysClockFreq+0x94>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	0c5b      	lsrs	r3, r3, #17
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	4a11      	ldr	r2, [pc, #68]	; (8004228 <HAL_RCC_GetSysClockFreq+0xa0>)
 80041e2:	5cd3      	ldrb	r3, [r2, r3]
 80041e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a0d      	ldr	r2, [pc, #52]	; (8004220 <HAL_RCC_GetSysClockFreq+0x98>)
 80041ea:	fb03 f202 	mul.w	r2, r3, r2
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f4:	617b      	str	r3, [r7, #20]
 80041f6:	e004      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a0c      	ldr	r2, [pc, #48]	; (800422c <HAL_RCC_GetSysClockFreq+0xa4>)
 80041fc:	fb02 f303 	mul.w	r3, r2, r3
 8004200:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	613b      	str	r3, [r7, #16]
      break;
 8004206:	e002      	b.n	800420e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004208:	4b05      	ldr	r3, [pc, #20]	; (8004220 <HAL_RCC_GetSysClockFreq+0x98>)
 800420a:	613b      	str	r3, [r7, #16]
      break;
 800420c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800420e:	693b      	ldr	r3, [r7, #16]
}
 8004210:	4618      	mov	r0, r3
 8004212:	371c      	adds	r7, #28
 8004214:	46bd      	mov	sp, r7
 8004216:	bc80      	pop	{r7}
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40021000 	.word	0x40021000
 8004220:	007a1200 	.word	0x007a1200
 8004224:	08009018 	.word	0x08009018
 8004228:	08009028 	.word	0x08009028
 800422c:	003d0900 	.word	0x003d0900

08004230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004234:	4b02      	ldr	r3, [pc, #8]	; (8004240 <HAL_RCC_GetHCLKFreq+0x10>)
 8004236:	681b      	ldr	r3, [r3, #0]
}
 8004238:	4618      	mov	r0, r3
 800423a:	46bd      	mov	sp, r7
 800423c:	bc80      	pop	{r7}
 800423e:	4770      	bx	lr
 8004240:	20000034 	.word	0x20000034

08004244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004248:	f7ff fff2 	bl	8004230 <HAL_RCC_GetHCLKFreq>
 800424c:	4602      	mov	r2, r0
 800424e:	4b05      	ldr	r3, [pc, #20]	; (8004264 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	0a1b      	lsrs	r3, r3, #8
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	4903      	ldr	r1, [pc, #12]	; (8004268 <HAL_RCC_GetPCLK1Freq+0x24>)
 800425a:	5ccb      	ldrb	r3, [r1, r3]
 800425c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004260:	4618      	mov	r0, r3
 8004262:	bd80      	pop	{r7, pc}
 8004264:	40021000 	.word	0x40021000
 8004268:	08009010 	.word	0x08009010

0800426c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004270:	f7ff ffde 	bl	8004230 <HAL_RCC_GetHCLKFreq>
 8004274:	4602      	mov	r2, r0
 8004276:	4b05      	ldr	r3, [pc, #20]	; (800428c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	0adb      	lsrs	r3, r3, #11
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	4903      	ldr	r1, [pc, #12]	; (8004290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004282:	5ccb      	ldrb	r3, [r1, r3]
 8004284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004288:	4618      	mov	r0, r3
 800428a:	bd80      	pop	{r7, pc}
 800428c:	40021000 	.word	0x40021000
 8004290:	08009010 	.word	0x08009010

08004294 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800429c:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <RCC_Delay+0x34>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a0a      	ldr	r2, [pc, #40]	; (80042cc <RCC_Delay+0x38>)
 80042a2:	fba2 2303 	umull	r2, r3, r2, r3
 80042a6:	0a5b      	lsrs	r3, r3, #9
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	fb02 f303 	mul.w	r3, r2, r3
 80042ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80042b0:	bf00      	nop
  }
  while (Delay --);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	1e5a      	subs	r2, r3, #1
 80042b6:	60fa      	str	r2, [r7, #12]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1f9      	bne.n	80042b0 <RCC_Delay+0x1c>
}
 80042bc:	bf00      	nop
 80042be:	bf00      	nop
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bc80      	pop	{r7}
 80042c6:	4770      	bx	lr
 80042c8:	20000034 	.word	0x20000034
 80042cc:	10624dd3 	.word	0x10624dd3

080042d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	613b      	str	r3, [r7, #16]
 80042dc:	2300      	movs	r3, #0
 80042de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d07d      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80042ec:	2300      	movs	r3, #0
 80042ee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042f0:	4b4f      	ldr	r3, [pc, #316]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042f2:	69db      	ldr	r3, [r3, #28]
 80042f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10d      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042fc:	4b4c      	ldr	r3, [pc, #304]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	4a4b      	ldr	r2, [pc, #300]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004306:	61d3      	str	r3, [r2, #28]
 8004308:	4b49      	ldr	r3, [pc, #292]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800430a:	69db      	ldr	r3, [r3, #28]
 800430c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004310:	60bb      	str	r3, [r7, #8]
 8004312:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004314:	2301      	movs	r3, #1
 8004316:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004318:	4b46      	ldr	r3, [pc, #280]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004320:	2b00      	cmp	r3, #0
 8004322:	d118      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004324:	4b43      	ldr	r3, [pc, #268]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a42      	ldr	r2, [pc, #264]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800432a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800432e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004330:	f7fe fbf0 	bl	8002b14 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004336:	e008      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004338:	f7fe fbec 	bl	8002b14 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b64      	cmp	r3, #100	; 0x64
 8004344:	d901      	bls.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e06d      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800434a:	4b3a      	ldr	r3, [pc, #232]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0f0      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004356:	4b36      	ldr	r3, [pc, #216]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800435e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d02e      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	429a      	cmp	r2, r3
 8004372:	d027      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004374:	4b2e      	ldr	r3, [pc, #184]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800437c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800437e:	4b2e      	ldr	r3, [pc, #184]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004380:	2201      	movs	r2, #1
 8004382:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004384:	4b2c      	ldr	r3, [pc, #176]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004386:	2200      	movs	r2, #0
 8004388:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800438a:	4a29      	ldr	r2, [pc, #164]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d014      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439a:	f7fe fbbb 	bl	8002b14 <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a0:	e00a      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043a2:	f7fe fbb7 	bl	8002b14 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e036      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b8:	4b1d      	ldr	r3, [pc, #116]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0ee      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043c4:	4b1a      	ldr	r3, [pc, #104]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	4917      	ldr	r1, [pc, #92]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043d6:	7dfb      	ldrb	r3, [r7, #23]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d105      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043dc:	4b14      	ldr	r3, [pc, #80]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	4a13      	ldr	r2, [pc, #76]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d008      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043f4:	4b0e      	ldr	r3, [pc, #56]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	490b      	ldr	r1, [pc, #44]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004402:	4313      	orrs	r3, r2
 8004404:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0310 	and.w	r3, r3, #16
 800440e:	2b00      	cmp	r3, #0
 8004410:	d008      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004412:	4b07      	ldr	r3, [pc, #28]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	4904      	ldr	r1, [pc, #16]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004420:	4313      	orrs	r3, r2
 8004422:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	40021000 	.word	0x40021000
 8004434:	40007000 	.word	0x40007000
 8004438:	42420440 	.word	0x42420440

0800443c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b088      	sub	sp, #32
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	2300      	movs	r3, #0
 800444a:	61fb      	str	r3, [r7, #28]
 800444c:	2300      	movs	r3, #0
 800444e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	2300      	movs	r3, #0
 8004456:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b10      	cmp	r3, #16
 800445c:	d00a      	beq.n	8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b10      	cmp	r3, #16
 8004462:	f200 808a 	bhi.w	800457a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d045      	beq.n	80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b02      	cmp	r3, #2
 8004470:	d075      	beq.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004472:	e082      	b.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004474:	4b46      	ldr	r3, [pc, #280]	; (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800447a:	4b45      	ldr	r3, [pc, #276]	; (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d07b      	beq.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	0c9b      	lsrs	r3, r3, #18
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	4a41      	ldr	r2, [pc, #260]	; (8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004490:	5cd3      	ldrb	r3, [r2, r3]
 8004492:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d015      	beq.n	80044ca <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800449e:	4b3c      	ldr	r3, [pc, #240]	; (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	0c5b      	lsrs	r3, r3, #17
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	4a3b      	ldr	r2, [pc, #236]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80044aa:	5cd3      	ldrb	r3, [r2, r3]
 80044ac:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00d      	beq.n	80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80044b8:	4a38      	ldr	r2, [pc, #224]	; (800459c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	fb02 f303 	mul.w	r3, r2, r3
 80044c6:	61fb      	str	r3, [r7, #28]
 80044c8:	e004      	b.n	80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	4a34      	ldr	r2, [pc, #208]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80044ce:	fb02 f303 	mul.w	r3, r2, r3
 80044d2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80044d4:	4b2e      	ldr	r3, [pc, #184]	; (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044e0:	d102      	bne.n	80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	61bb      	str	r3, [r7, #24]
      break;
 80044e6:	e04a      	b.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	4a2d      	ldr	r2, [pc, #180]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80044ee:	fba2 2303 	umull	r2, r3, r2, r3
 80044f2:	085b      	lsrs	r3, r3, #1
 80044f4:	61bb      	str	r3, [r7, #24]
      break;
 80044f6:	e042      	b.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80044f8:	4b25      	ldr	r3, [pc, #148]	; (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004504:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004508:	d108      	bne.n	800451c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d003      	beq.n	800451c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004514:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004518:	61bb      	str	r3, [r7, #24]
 800451a:	e01f      	b.n	800455c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004526:	d109      	bne.n	800453c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004528:	4b19      	ldr	r3, [pc, #100]	; (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004534:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004538:	61bb      	str	r3, [r7, #24]
 800453a:	e00f      	b.n	800455c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004542:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004546:	d11c      	bne.n	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004548:	4b11      	ldr	r3, [pc, #68]	; (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d016      	beq.n	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004554:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004558:	61bb      	str	r3, [r7, #24]
      break;
 800455a:	e012      	b.n	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800455c:	e011      	b.n	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800455e:	f7ff fe85 	bl	800426c <HAL_RCC_GetPCLK2Freq>
 8004562:	4602      	mov	r2, r0
 8004564:	4b0a      	ldr	r3, [pc, #40]	; (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	0b9b      	lsrs	r3, r3, #14
 800456a:	f003 0303 	and.w	r3, r3, #3
 800456e:	3301      	adds	r3, #1
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	fbb2 f3f3 	udiv	r3, r2, r3
 8004576:	61bb      	str	r3, [r7, #24]
      break;
 8004578:	e004      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800457a:	bf00      	nop
 800457c:	e002      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800457e:	bf00      	nop
 8004580:	e000      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004582:	bf00      	nop
    }
  }
  return (frequency);
 8004584:	69bb      	ldr	r3, [r7, #24]
}
 8004586:	4618      	mov	r0, r3
 8004588:	3720      	adds	r7, #32
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	40021000 	.word	0x40021000
 8004594:	0800902c 	.word	0x0800902c
 8004598:	0800903c 	.word	0x0800903c
 800459c:	007a1200 	.word	0x007a1200
 80045a0:	003d0900 	.word	0x003d0900
 80045a4:	aaaaaaab 	.word	0xaaaaaaab

080045a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e041      	b.n	800463e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d106      	bne.n	80045d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7fe f8c4 	bl	800275c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	3304      	adds	r3, #4
 80045e4:	4619      	mov	r1, r3
 80045e6:	4610      	mov	r0, r2
 80045e8:	f000 fbb0 	bl	8004d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b01      	cmp	r3, #1
 800465a:	d001      	beq.n	8004660 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e032      	b.n	80046c6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2202      	movs	r2, #2
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a18      	ldr	r2, [pc, #96]	; (80046d0 <HAL_TIM_Base_Start+0x88>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d00e      	beq.n	8004690 <HAL_TIM_Base_Start+0x48>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800467a:	d009      	beq.n	8004690 <HAL_TIM_Base_Start+0x48>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a14      	ldr	r2, [pc, #80]	; (80046d4 <HAL_TIM_Base_Start+0x8c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d004      	beq.n	8004690 <HAL_TIM_Base_Start+0x48>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a13      	ldr	r2, [pc, #76]	; (80046d8 <HAL_TIM_Base_Start+0x90>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d111      	bne.n	80046b4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 0307 	and.w	r3, r3, #7
 800469a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b06      	cmp	r3, #6
 80046a0:	d010      	beq.n	80046c4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f042 0201 	orr.w	r2, r2, #1
 80046b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b2:	e007      	b.n	80046c4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc80      	pop	{r7}
 80046ce:	4770      	bx	lr
 80046d0:	40012c00 	.word	0x40012c00
 80046d4:	40000400 	.word	0x40000400
 80046d8:	40000800 	.word	0x40000800

080046dc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e041      	b.n	8004772 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d106      	bne.n	8004708 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f839 	bl	800477a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	3304      	adds	r3, #4
 8004718:	4619      	mov	r1, r3
 800471a:	4610      	mov	r0, r2
 800471c:	f000 fb16 	bl	8004d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	bc80      	pop	{r7}
 800478a:	4770      	bx	lr

0800478c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e041      	b.n	8004822 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d106      	bne.n	80047b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f839 	bl	800482a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3304      	adds	r3, #4
 80047c8:	4619      	mov	r1, r3
 80047ca:	4610      	mov	r0, r2
 80047cc:	f000 fabe 	bl	8004d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	bc80      	pop	{r7}
 800483a:	4770      	bx	lr

0800483c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d109      	bne.n	8004860 <HAL_TIM_PWM_Start+0x24>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b01      	cmp	r3, #1
 8004856:	bf14      	ite	ne
 8004858:	2301      	movne	r3, #1
 800485a:	2300      	moveq	r3, #0
 800485c:	b2db      	uxtb	r3, r3
 800485e:	e022      	b.n	80048a6 <HAL_TIM_PWM_Start+0x6a>
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	2b04      	cmp	r3, #4
 8004864:	d109      	bne.n	800487a <HAL_TIM_PWM_Start+0x3e>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b01      	cmp	r3, #1
 8004870:	bf14      	ite	ne
 8004872:	2301      	movne	r3, #1
 8004874:	2300      	moveq	r3, #0
 8004876:	b2db      	uxtb	r3, r3
 8004878:	e015      	b.n	80048a6 <HAL_TIM_PWM_Start+0x6a>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b08      	cmp	r3, #8
 800487e:	d109      	bne.n	8004894 <HAL_TIM_PWM_Start+0x58>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b01      	cmp	r3, #1
 800488a:	bf14      	ite	ne
 800488c:	2301      	movne	r3, #1
 800488e:	2300      	moveq	r3, #0
 8004890:	b2db      	uxtb	r3, r3
 8004892:	e008      	b.n	80048a6 <HAL_TIM_PWM_Start+0x6a>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b01      	cmp	r3, #1
 800489e:	bf14      	ite	ne
 80048a0:	2301      	movne	r3, #1
 80048a2:	2300      	moveq	r3, #0
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e05e      	b.n	800496c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d104      	bne.n	80048be <HAL_TIM_PWM_Start+0x82>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048bc:	e013      	b.n	80048e6 <HAL_TIM_PWM_Start+0xaa>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d104      	bne.n	80048ce <HAL_TIM_PWM_Start+0x92>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048cc:	e00b      	b.n	80048e6 <HAL_TIM_PWM_Start+0xaa>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	d104      	bne.n	80048de <HAL_TIM_PWM_Start+0xa2>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048dc:	e003      	b.n	80048e6 <HAL_TIM_PWM_Start+0xaa>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2202      	movs	r2, #2
 80048e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2201      	movs	r2, #1
 80048ec:	6839      	ldr	r1, [r7, #0]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 fcac 	bl	800524c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a1e      	ldr	r2, [pc, #120]	; (8004974 <HAL_TIM_PWM_Start+0x138>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d107      	bne.n	800490e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800490c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a18      	ldr	r2, [pc, #96]	; (8004974 <HAL_TIM_PWM_Start+0x138>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d00e      	beq.n	8004936 <HAL_TIM_PWM_Start+0xfa>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004920:	d009      	beq.n	8004936 <HAL_TIM_PWM_Start+0xfa>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a14      	ldr	r2, [pc, #80]	; (8004978 <HAL_TIM_PWM_Start+0x13c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d004      	beq.n	8004936 <HAL_TIM_PWM_Start+0xfa>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a12      	ldr	r2, [pc, #72]	; (800497c <HAL_TIM_PWM_Start+0x140>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d111      	bne.n	800495a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b06      	cmp	r3, #6
 8004946:	d010      	beq.n	800496a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0201 	orr.w	r2, r2, #1
 8004956:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004958:	e007      	b.n	800496a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f042 0201 	orr.w	r2, r2, #1
 8004968:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40012c00 	.word	0x40012c00
 8004978:	40000400 	.word	0x40000400
 800497c:	40000800 	.word	0x40000800

08004980 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004996:	2b01      	cmp	r3, #1
 8004998:	d101      	bne.n	800499e <HAL_TIM_OC_ConfigChannel+0x1e>
 800499a:	2302      	movs	r3, #2
 800499c:	e048      	b.n	8004a30 <HAL_TIM_OC_ConfigChannel+0xb0>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b0c      	cmp	r3, #12
 80049aa:	d839      	bhi.n	8004a20 <HAL_TIM_OC_ConfigChannel+0xa0>
 80049ac:	a201      	add	r2, pc, #4	; (adr r2, 80049b4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80049ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b2:	bf00      	nop
 80049b4:	080049e9 	.word	0x080049e9
 80049b8:	08004a21 	.word	0x08004a21
 80049bc:	08004a21 	.word	0x08004a21
 80049c0:	08004a21 	.word	0x08004a21
 80049c4:	080049f7 	.word	0x080049f7
 80049c8:	08004a21 	.word	0x08004a21
 80049cc:	08004a21 	.word	0x08004a21
 80049d0:	08004a21 	.word	0x08004a21
 80049d4:	08004a05 	.word	0x08004a05
 80049d8:	08004a21 	.word	0x08004a21
 80049dc:	08004a21 	.word	0x08004a21
 80049e0:	08004a21 	.word	0x08004a21
 80049e4:	08004a13 	.word	0x08004a13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68b9      	ldr	r1, [r7, #8]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 fa0e 	bl	8004e10 <TIM_OC1_SetConfig>
      break;
 80049f4:	e017      	b.n	8004a26 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68b9      	ldr	r1, [r7, #8]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f000 fa6d 	bl	8004edc <TIM_OC2_SetConfig>
      break;
 8004a02:	e010      	b.n	8004a26 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68b9      	ldr	r1, [r7, #8]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 fad0 	bl	8004fb0 <TIM_OC3_SetConfig>
      break;
 8004a10:	e009      	b.n	8004a26 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68b9      	ldr	r1, [r7, #8]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 fb33 	bl	8005084 <TIM_OC4_SetConfig>
      break;
 8004a1e:	e002      	b.n	8004a26 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	75fb      	strb	r3, [r7, #23]
      break;
 8004a24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3718      	adds	r7, #24
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a44:	2300      	movs	r3, #0
 8004a46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d101      	bne.n	8004a56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a52:	2302      	movs	r3, #2
 8004a54:	e0ae      	b.n	8004bb4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b0c      	cmp	r3, #12
 8004a62:	f200 809f 	bhi.w	8004ba4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a66:	a201      	add	r2, pc, #4	; (adr r2, 8004a6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6c:	08004aa1 	.word	0x08004aa1
 8004a70:	08004ba5 	.word	0x08004ba5
 8004a74:	08004ba5 	.word	0x08004ba5
 8004a78:	08004ba5 	.word	0x08004ba5
 8004a7c:	08004ae1 	.word	0x08004ae1
 8004a80:	08004ba5 	.word	0x08004ba5
 8004a84:	08004ba5 	.word	0x08004ba5
 8004a88:	08004ba5 	.word	0x08004ba5
 8004a8c:	08004b23 	.word	0x08004b23
 8004a90:	08004ba5 	.word	0x08004ba5
 8004a94:	08004ba5 	.word	0x08004ba5
 8004a98:	08004ba5 	.word	0x08004ba5
 8004a9c:	08004b63 	.word	0x08004b63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68b9      	ldr	r1, [r7, #8]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 f9b2 	bl	8004e10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699a      	ldr	r2, [r3, #24]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0208 	orr.w	r2, r2, #8
 8004aba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699a      	ldr	r2, [r3, #24]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 0204 	bic.w	r2, r2, #4
 8004aca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6999      	ldr	r1, [r3, #24]
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	691a      	ldr	r2, [r3, #16]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	619a      	str	r2, [r3, #24]
      break;
 8004ade:	e064      	b.n	8004baa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68b9      	ldr	r1, [r7, #8]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 f9f8 	bl	8004edc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	699a      	ldr	r2, [r3, #24]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004afa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699a      	ldr	r2, [r3, #24]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6999      	ldr	r1, [r3, #24]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	021a      	lsls	r2, r3, #8
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	619a      	str	r2, [r3, #24]
      break;
 8004b20:	e043      	b.n	8004baa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68b9      	ldr	r1, [r7, #8]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 fa41 	bl	8004fb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	69da      	ldr	r2, [r3, #28]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f042 0208 	orr.w	r2, r2, #8
 8004b3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	69da      	ldr	r2, [r3, #28]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 0204 	bic.w	r2, r2, #4
 8004b4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	69d9      	ldr	r1, [r3, #28]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	61da      	str	r2, [r3, #28]
      break;
 8004b60:	e023      	b.n	8004baa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68b9      	ldr	r1, [r7, #8]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 fa8b 	bl	8005084 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	69da      	ldr	r2, [r3, #28]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	69da      	ldr	r2, [r3, #28]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69d9      	ldr	r1, [r3, #28]
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	021a      	lsls	r2, r3, #8
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	61da      	str	r2, [r3, #28]
      break;
 8004ba2:	e002      	b.n	8004baa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ba8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3718      	adds	r7, #24
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d101      	bne.n	8004bd8 <HAL_TIM_ConfigClockSource+0x1c>
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	e0b4      	b.n	8004d42 <HAL_TIM_ConfigClockSource+0x186>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c10:	d03e      	beq.n	8004c90 <HAL_TIM_ConfigClockSource+0xd4>
 8004c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c16:	f200 8087 	bhi.w	8004d28 <HAL_TIM_ConfigClockSource+0x16c>
 8004c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c1e:	f000 8086 	beq.w	8004d2e <HAL_TIM_ConfigClockSource+0x172>
 8004c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c26:	d87f      	bhi.n	8004d28 <HAL_TIM_ConfigClockSource+0x16c>
 8004c28:	2b70      	cmp	r3, #112	; 0x70
 8004c2a:	d01a      	beq.n	8004c62 <HAL_TIM_ConfigClockSource+0xa6>
 8004c2c:	2b70      	cmp	r3, #112	; 0x70
 8004c2e:	d87b      	bhi.n	8004d28 <HAL_TIM_ConfigClockSource+0x16c>
 8004c30:	2b60      	cmp	r3, #96	; 0x60
 8004c32:	d050      	beq.n	8004cd6 <HAL_TIM_ConfigClockSource+0x11a>
 8004c34:	2b60      	cmp	r3, #96	; 0x60
 8004c36:	d877      	bhi.n	8004d28 <HAL_TIM_ConfigClockSource+0x16c>
 8004c38:	2b50      	cmp	r3, #80	; 0x50
 8004c3a:	d03c      	beq.n	8004cb6 <HAL_TIM_ConfigClockSource+0xfa>
 8004c3c:	2b50      	cmp	r3, #80	; 0x50
 8004c3e:	d873      	bhi.n	8004d28 <HAL_TIM_ConfigClockSource+0x16c>
 8004c40:	2b40      	cmp	r3, #64	; 0x40
 8004c42:	d058      	beq.n	8004cf6 <HAL_TIM_ConfigClockSource+0x13a>
 8004c44:	2b40      	cmp	r3, #64	; 0x40
 8004c46:	d86f      	bhi.n	8004d28 <HAL_TIM_ConfigClockSource+0x16c>
 8004c48:	2b30      	cmp	r3, #48	; 0x30
 8004c4a:	d064      	beq.n	8004d16 <HAL_TIM_ConfigClockSource+0x15a>
 8004c4c:	2b30      	cmp	r3, #48	; 0x30
 8004c4e:	d86b      	bhi.n	8004d28 <HAL_TIM_ConfigClockSource+0x16c>
 8004c50:	2b20      	cmp	r3, #32
 8004c52:	d060      	beq.n	8004d16 <HAL_TIM_ConfigClockSource+0x15a>
 8004c54:	2b20      	cmp	r3, #32
 8004c56:	d867      	bhi.n	8004d28 <HAL_TIM_ConfigClockSource+0x16c>
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d05c      	beq.n	8004d16 <HAL_TIM_ConfigClockSource+0x15a>
 8004c5c:	2b10      	cmp	r3, #16
 8004c5e:	d05a      	beq.n	8004d16 <HAL_TIM_ConfigClockSource+0x15a>
 8004c60:	e062      	b.n	8004d28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6818      	ldr	r0, [r3, #0]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	6899      	ldr	r1, [r3, #8]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	f000 facc 	bl	800520e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	609a      	str	r2, [r3, #8]
      break;
 8004c8e:	e04f      	b.n	8004d30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6818      	ldr	r0, [r3, #0]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	6899      	ldr	r1, [r3, #8]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f000 fab5 	bl	800520e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cb2:	609a      	str	r2, [r3, #8]
      break;
 8004cb4:	e03c      	b.n	8004d30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6818      	ldr	r0, [r3, #0]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	6859      	ldr	r1, [r3, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	f000 fa2c 	bl	8005120 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2150      	movs	r1, #80	; 0x50
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 fa83 	bl	80051da <TIM_ITRx_SetConfig>
      break;
 8004cd4:	e02c      	b.n	8004d30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6818      	ldr	r0, [r3, #0]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	6859      	ldr	r1, [r3, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f000 fa4a 	bl	800517c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2160      	movs	r1, #96	; 0x60
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 fa73 	bl	80051da <TIM_ITRx_SetConfig>
      break;
 8004cf4:	e01c      	b.n	8004d30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6818      	ldr	r0, [r3, #0]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	6859      	ldr	r1, [r3, #4]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	461a      	mov	r2, r3
 8004d04:	f000 fa0c 	bl	8005120 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2140      	movs	r1, #64	; 0x40
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 fa63 	bl	80051da <TIM_ITRx_SetConfig>
      break;
 8004d14:	e00c      	b.n	8004d30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4619      	mov	r1, r3
 8004d20:	4610      	mov	r0, r2
 8004d22:	f000 fa5a 	bl	80051da <TIM_ITRx_SetConfig>
      break;
 8004d26:	e003      	b.n	8004d30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d2c:	e000      	b.n	8004d30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a29      	ldr	r2, [pc, #164]	; (8004e04 <TIM_Base_SetConfig+0xb8>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d00b      	beq.n	8004d7c <TIM_Base_SetConfig+0x30>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d6a:	d007      	beq.n	8004d7c <TIM_Base_SetConfig+0x30>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a26      	ldr	r2, [pc, #152]	; (8004e08 <TIM_Base_SetConfig+0xbc>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d003      	beq.n	8004d7c <TIM_Base_SetConfig+0x30>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a25      	ldr	r2, [pc, #148]	; (8004e0c <TIM_Base_SetConfig+0xc0>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d108      	bne.n	8004d8e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a1c      	ldr	r2, [pc, #112]	; (8004e04 <TIM_Base_SetConfig+0xb8>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d00b      	beq.n	8004dae <TIM_Base_SetConfig+0x62>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d9c:	d007      	beq.n	8004dae <TIM_Base_SetConfig+0x62>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a19      	ldr	r2, [pc, #100]	; (8004e08 <TIM_Base_SetConfig+0xbc>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d003      	beq.n	8004dae <TIM_Base_SetConfig+0x62>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a18      	ldr	r2, [pc, #96]	; (8004e0c <TIM_Base_SetConfig+0xc0>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d108      	bne.n	8004dc0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004db4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a07      	ldr	r2, [pc, #28]	; (8004e04 <TIM_Base_SetConfig+0xb8>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d103      	bne.n	8004df4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	615a      	str	r2, [r3, #20]
}
 8004dfa:	bf00      	nop
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bc80      	pop	{r7}
 8004e02:	4770      	bx	lr
 8004e04:	40012c00 	.word	0x40012c00
 8004e08:	40000400 	.word	0x40000400
 8004e0c:	40000800 	.word	0x40000800

08004e10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	f023 0201 	bic.w	r2, r3, #1
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f023 0303 	bic.w	r3, r3, #3
 8004e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f023 0302 	bic.w	r3, r3, #2
 8004e58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a1c      	ldr	r2, [pc, #112]	; (8004ed8 <TIM_OC1_SetConfig+0xc8>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d10c      	bne.n	8004e86 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f023 0308 	bic.w	r3, r3, #8
 8004e72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f023 0304 	bic.w	r3, r3, #4
 8004e84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a13      	ldr	r2, [pc, #76]	; (8004ed8 <TIM_OC1_SetConfig+0xc8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d111      	bne.n	8004eb2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	621a      	str	r2, [r3, #32]
}
 8004ecc:	bf00      	nop
 8004ece:	371c      	adds	r7, #28
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bc80      	pop	{r7}
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40012c00 	.word	0x40012c00

08004edc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	f023 0210 	bic.w	r2, r3, #16
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	021b      	lsls	r3, r3, #8
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f023 0320 	bic.w	r3, r3, #32
 8004f26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a1d      	ldr	r2, [pc, #116]	; (8004fac <TIM_OC2_SetConfig+0xd0>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d10d      	bne.n	8004f58 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	011b      	lsls	r3, r3, #4
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a14      	ldr	r2, [pc, #80]	; (8004fac <TIM_OC2_SetConfig+0xd0>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d113      	bne.n	8004f88 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	621a      	str	r2, [r3, #32]
}
 8004fa2:	bf00      	nop
 8004fa4:	371c      	adds	r7, #28
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bc80      	pop	{r7}
 8004faa:	4770      	bx	lr
 8004fac:	40012c00 	.word	0x40012c00

08004fb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f023 0303 	bic.w	r3, r3, #3
 8004fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	021b      	lsls	r3, r3, #8
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	4313      	orrs	r3, r2
 8005004:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a1d      	ldr	r2, [pc, #116]	; (8005080 <TIM_OC3_SetConfig+0xd0>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d10d      	bne.n	800502a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005014:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	021b      	lsls	r3, r3, #8
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a14      	ldr	r2, [pc, #80]	; (8005080 <TIM_OC3_SetConfig+0xd0>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d113      	bne.n	800505a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	011b      	lsls	r3, r3, #4
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	4313      	orrs	r3, r2
 800504c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	011b      	lsls	r3, r3, #4
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	4313      	orrs	r3, r2
 8005058:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	621a      	str	r2, [r3, #32]
}
 8005074:	bf00      	nop
 8005076:	371c      	adds	r7, #28
 8005078:	46bd      	mov	sp, r7
 800507a:	bc80      	pop	{r7}
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	40012c00 	.word	0x40012c00

08005084 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005084:	b480      	push	{r7}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	021b      	lsls	r3, r3, #8
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	031b      	lsls	r3, r3, #12
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	4313      	orrs	r3, r2
 80050da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a0f      	ldr	r2, [pc, #60]	; (800511c <TIM_OC4_SetConfig+0x98>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d109      	bne.n	80050f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	019b      	lsls	r3, r3, #6
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	621a      	str	r2, [r3, #32]
}
 8005112:	bf00      	nop
 8005114:	371c      	adds	r7, #28
 8005116:	46bd      	mov	sp, r7
 8005118:	bc80      	pop	{r7}
 800511a:	4770      	bx	lr
 800511c:	40012c00 	.word	0x40012c00

08005120 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6a1b      	ldr	r3, [r3, #32]
 8005130:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	f023 0201 	bic.w	r2, r3, #1
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800514a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	011b      	lsls	r3, r3, #4
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	4313      	orrs	r3, r2
 8005154:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f023 030a 	bic.w	r3, r3, #10
 800515c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	4313      	orrs	r3, r2
 8005164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	621a      	str	r2, [r3, #32]
}
 8005172:	bf00      	nop
 8005174:	371c      	adds	r7, #28
 8005176:	46bd      	mov	sp, r7
 8005178:	bc80      	pop	{r7}
 800517a:	4770      	bx	lr

0800517c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	f023 0210 	bic.w	r2, r3, #16
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	031b      	lsls	r3, r3, #12
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051b8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	011b      	lsls	r3, r3, #4
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	621a      	str	r2, [r3, #32]
}
 80051d0:	bf00      	nop
 80051d2:	371c      	adds	r7, #28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bc80      	pop	{r7}
 80051d8:	4770      	bx	lr

080051da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051da:	b480      	push	{r7}
 80051dc:	b085      	sub	sp, #20
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
 80051e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	f043 0307 	orr.w	r3, r3, #7
 80051fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	609a      	str	r2, [r3, #8]
}
 8005204:	bf00      	nop
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	bc80      	pop	{r7}
 800520c:	4770      	bx	lr

0800520e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800520e:	b480      	push	{r7}
 8005210:	b087      	sub	sp, #28
 8005212:	af00      	add	r7, sp, #0
 8005214:	60f8      	str	r0, [r7, #12]
 8005216:	60b9      	str	r1, [r7, #8]
 8005218:	607a      	str	r2, [r7, #4]
 800521a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005228:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	021a      	lsls	r2, r3, #8
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	431a      	orrs	r2, r3
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	4313      	orrs	r3, r2
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	4313      	orrs	r3, r2
 800523a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	609a      	str	r2, [r3, #8]
}
 8005242:	bf00      	nop
 8005244:	371c      	adds	r7, #28
 8005246:	46bd      	mov	sp, r7
 8005248:	bc80      	pop	{r7}
 800524a:	4770      	bx	lr

0800524c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800524c:	b480      	push	{r7}
 800524e:	b087      	sub	sp, #28
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f003 031f 	and.w	r3, r3, #31
 800525e:	2201      	movs	r2, #1
 8005260:	fa02 f303 	lsl.w	r3, r2, r3
 8005264:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6a1a      	ldr	r2, [r3, #32]
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	43db      	mvns	r3, r3
 800526e:	401a      	ands	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6a1a      	ldr	r2, [r3, #32]
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f003 031f 	and.w	r3, r3, #31
 800527e:	6879      	ldr	r1, [r7, #4]
 8005280:	fa01 f303 	lsl.w	r3, r1, r3
 8005284:	431a      	orrs	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	621a      	str	r2, [r3, #32]
}
 800528a:	bf00      	nop
 800528c:	371c      	adds	r7, #28
 800528e:	46bd      	mov	sp, r7
 8005290:	bc80      	pop	{r7}
 8005292:	4770      	bx	lr

08005294 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d101      	bne.n	80052ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052a8:	2302      	movs	r3, #2
 80052aa:	e046      	b.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a16      	ldr	r2, [pc, #88]	; (8005344 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d00e      	beq.n	800530e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f8:	d009      	beq.n	800530e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a12      	ldr	r2, [pc, #72]	; (8005348 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d004      	beq.n	800530e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a10      	ldr	r2, [pc, #64]	; (800534c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d10c      	bne.n	8005328 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005314:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	4313      	orrs	r3, r2
 800531e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	bc80      	pop	{r7}
 8005342:	4770      	bx	lr
 8005344:	40012c00 	.word	0x40012c00
 8005348:	40000400 	.word	0x40000400
 800534c:	40000800 	.word	0x40000800

08005350 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e042      	b.n	80053e8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d106      	bne.n	800537c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7fd fabe 	bl	80028f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2224      	movs	r2, #36	; 0x24
 8005380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68da      	ldr	r2, [r3, #12]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005392:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 fdc5 	bl	8005f24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	691a      	ldr	r2, [r3, #16]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	695a      	ldr	r2, [r3, #20]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68da      	ldr	r2, [r3, #12]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2220      	movs	r2, #32
 80053dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b08a      	sub	sp, #40	; 0x28
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	603b      	str	r3, [r7, #0]
 80053fc:	4613      	mov	r3, r2
 80053fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005400:	2300      	movs	r3, #0
 8005402:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b20      	cmp	r3, #32
 800540e:	d16d      	bne.n	80054ec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d002      	beq.n	800541c <HAL_UART_Transmit+0x2c>
 8005416:	88fb      	ldrh	r3, [r7, #6]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e066      	b.n	80054ee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2221      	movs	r2, #33	; 0x21
 800542a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800542e:	f7fd fb71 	bl	8002b14 <HAL_GetTick>
 8005432:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	88fa      	ldrh	r2, [r7, #6]
 8005438:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	88fa      	ldrh	r2, [r7, #6]
 800543e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005448:	d108      	bne.n	800545c <HAL_UART_Transmit+0x6c>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d104      	bne.n	800545c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005452:	2300      	movs	r3, #0
 8005454:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	61bb      	str	r3, [r7, #24]
 800545a:	e003      	b.n	8005464 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005460:	2300      	movs	r3, #0
 8005462:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005464:	e02a      	b.n	80054bc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2200      	movs	r2, #0
 800546e:	2180      	movs	r1, #128	; 0x80
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 fb14 	bl	8005a9e <UART_WaitOnFlagUntilTimeout>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e036      	b.n	80054ee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10b      	bne.n	800549e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	881b      	ldrh	r3, [r3, #0]
 800548a:	461a      	mov	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005494:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	3302      	adds	r3, #2
 800549a:	61bb      	str	r3, [r7, #24]
 800549c:	e007      	b.n	80054ae <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	781a      	ldrb	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	3301      	adds	r3, #1
 80054ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	3b01      	subs	r3, #1
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1cf      	bne.n	8005466 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	2200      	movs	r2, #0
 80054ce:	2140      	movs	r1, #64	; 0x40
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 fae4 	bl	8005a9e <UART_WaitOnFlagUntilTimeout>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d001      	beq.n	80054e0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e006      	b.n	80054ee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2220      	movs	r2, #32
 80054e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80054e8:	2300      	movs	r3, #0
 80054ea:	e000      	b.n	80054ee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80054ec:	2302      	movs	r3, #2
  }
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3720      	adds	r7, #32
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b084      	sub	sp, #16
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	60f8      	str	r0, [r7, #12]
 80054fe:	60b9      	str	r1, [r7, #8]
 8005500:	4613      	mov	r3, r2
 8005502:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b20      	cmp	r3, #32
 800550e:	d112      	bne.n	8005536 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d002      	beq.n	800551c <HAL_UART_Receive_IT+0x26>
 8005516:	88fb      	ldrh	r3, [r7, #6]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e00b      	b.n	8005538 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005526:	88fb      	ldrh	r3, [r7, #6]
 8005528:	461a      	mov	r2, r3
 800552a:	68b9      	ldr	r1, [r7, #8]
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 fb24 	bl	8005b7a <UART_Start_Receive_IT>
 8005532:	4603      	mov	r3, r0
 8005534:	e000      	b.n	8005538 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005536:	2302      	movs	r3, #2
  }
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b0ba      	sub	sp, #232	; 0xe8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005566:	2300      	movs	r3, #0
 8005568:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800556c:	2300      	movs	r3, #0
 800556e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005576:	f003 030f 	and.w	r3, r3, #15
 800557a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800557e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10f      	bne.n	80055a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800558a:	f003 0320 	and.w	r3, r3, #32
 800558e:	2b00      	cmp	r3, #0
 8005590:	d009      	beq.n	80055a6 <HAL_UART_IRQHandler+0x66>
 8005592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005596:	f003 0320 	and.w	r3, r3, #32
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 fc01 	bl	8005da6 <UART_Receive_IT>
      return;
 80055a4:	e25b      	b.n	8005a5e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80055a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 80de 	beq.w	800576c <HAL_UART_IRQHandler+0x22c>
 80055b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d106      	bne.n	80055ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 80d1 	beq.w	800576c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00b      	beq.n	80055ee <HAL_UART_IRQHandler+0xae>
 80055d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d005      	beq.n	80055ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e6:	f043 0201 	orr.w	r2, r3, #1
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055f2:	f003 0304 	and.w	r3, r3, #4
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00b      	beq.n	8005612 <HAL_UART_IRQHandler+0xd2>
 80055fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d005      	beq.n	8005612 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560a:	f043 0202 	orr.w	r2, r3, #2
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00b      	beq.n	8005636 <HAL_UART_IRQHandler+0xf6>
 800561e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b00      	cmp	r3, #0
 8005628:	d005      	beq.n	8005636 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800562e:	f043 0204 	orr.w	r2, r3, #4
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800563a:	f003 0308 	and.w	r3, r3, #8
 800563e:	2b00      	cmp	r3, #0
 8005640:	d011      	beq.n	8005666 <HAL_UART_IRQHandler+0x126>
 8005642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005646:	f003 0320 	and.w	r3, r3, #32
 800564a:	2b00      	cmp	r3, #0
 800564c:	d105      	bne.n	800565a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800564e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d005      	beq.n	8005666 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800565e:	f043 0208 	orr.w	r2, r3, #8
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 81f2 	beq.w	8005a54 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005674:	f003 0320 	and.w	r3, r3, #32
 8005678:	2b00      	cmp	r3, #0
 800567a:	d008      	beq.n	800568e <HAL_UART_IRQHandler+0x14e>
 800567c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005680:	f003 0320 	and.w	r3, r3, #32
 8005684:	2b00      	cmp	r3, #0
 8005686:	d002      	beq.n	800568e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fb8c 	bl	8005da6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005698:	2b00      	cmp	r3, #0
 800569a:	bf14      	ite	ne
 800569c:	2301      	movne	r3, #1
 800569e:	2300      	moveq	r3, #0
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056aa:	f003 0308 	and.w	r3, r3, #8
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d103      	bne.n	80056ba <HAL_UART_IRQHandler+0x17a>
 80056b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d04f      	beq.n	800575a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 fa96 	bl	8005bec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d041      	beq.n	8005752 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	3314      	adds	r3, #20
 80056d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056dc:	e853 3f00 	ldrex	r3, [r3]
 80056e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3314      	adds	r3, #20
 80056f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80056fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005702:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005706:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800570a:	e841 2300 	strex	r3, r2, [r1]
 800570e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005712:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1d9      	bne.n	80056ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571e:	2b00      	cmp	r3, #0
 8005720:	d013      	beq.n	800574a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005726:	4a7e      	ldr	r2, [pc, #504]	; (8005920 <HAL_UART_IRQHandler+0x3e0>)
 8005728:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572e:	4618      	mov	r0, r3
 8005730:	f7fd ff92 	bl	8003658 <HAL_DMA_Abort_IT>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d016      	beq.n	8005768 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800573e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005744:	4610      	mov	r0, r2
 8005746:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005748:	e00e      	b.n	8005768 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f993 	bl	8005a76 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005750:	e00a      	b.n	8005768 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f98f 	bl	8005a76 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005758:	e006      	b.n	8005768 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f98b 	bl	8005a76 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005766:	e175      	b.n	8005a54 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005768:	bf00      	nop
    return;
 800576a:	e173      	b.n	8005a54 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005770:	2b01      	cmp	r3, #1
 8005772:	f040 814f 	bne.w	8005a14 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800577a:	f003 0310 	and.w	r3, r3, #16
 800577e:	2b00      	cmp	r3, #0
 8005780:	f000 8148 	beq.w	8005a14 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005788:	f003 0310 	and.w	r3, r3, #16
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 8141 	beq.w	8005a14 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005792:	2300      	movs	r3, #0
 8005794:	60bb      	str	r3, [r7, #8]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	60bb      	str	r3, [r7, #8]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	60bb      	str	r3, [r7, #8]
 80057a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f000 80b6 	beq.w	8005924 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 8145 	beq.w	8005a58 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057d6:	429a      	cmp	r2, r3
 80057d8:	f080 813e 	bcs.w	8005a58 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	2b20      	cmp	r3, #32
 80057ec:	f000 8088 	beq.w	8005900 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	330c      	adds	r3, #12
 80057f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057fe:	e853 3f00 	ldrex	r3, [r3]
 8005802:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005806:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800580a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800580e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	330c      	adds	r3, #12
 8005818:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800581c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005820:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005824:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005828:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800582c:	e841 2300 	strex	r3, r2, [r1]
 8005830:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005834:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1d9      	bne.n	80057f0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3314      	adds	r3, #20
 8005842:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005844:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005846:	e853 3f00 	ldrex	r3, [r3]
 800584a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800584c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800584e:	f023 0301 	bic.w	r3, r3, #1
 8005852:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	3314      	adds	r3, #20
 800585c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005860:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005864:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005866:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005868:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800586c:	e841 2300 	strex	r3, r2, [r1]
 8005870:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005872:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1e1      	bne.n	800583c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	3314      	adds	r3, #20
 800587e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005880:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005882:	e853 3f00 	ldrex	r3, [r3]
 8005886:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005888:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800588a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800588e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	3314      	adds	r3, #20
 8005898:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800589c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800589e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80058a4:	e841 2300 	strex	r3, r2, [r1]
 80058a8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80058aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1e3      	bne.n	8005878 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2220      	movs	r2, #32
 80058b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	330c      	adds	r3, #12
 80058c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058c8:	e853 3f00 	ldrex	r3, [r3]
 80058cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058d0:	f023 0310 	bic.w	r3, r3, #16
 80058d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	330c      	adds	r3, #12
 80058de:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80058e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80058e4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058ea:	e841 2300 	strex	r3, r2, [r1]
 80058ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1e3      	bne.n	80058be <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fd fe71 	bl	80035e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800590e:	b29b      	uxth	r3, r3
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	b29b      	uxth	r3, r3
 8005914:	4619      	mov	r1, r3
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f8b6 	bl	8005a88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800591c:	e09c      	b.n	8005a58 <HAL_UART_IRQHandler+0x518>
 800591e:	bf00      	nop
 8005920:	08005cb1 	.word	0x08005cb1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800592c:	b29b      	uxth	r3, r3
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005938:	b29b      	uxth	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 808e 	beq.w	8005a5c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005940:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 8089 	beq.w	8005a5c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	330c      	adds	r3, #12
 8005950:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005954:	e853 3f00 	ldrex	r3, [r3]
 8005958:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800595a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005960:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	330c      	adds	r3, #12
 800596a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800596e:	647a      	str	r2, [r7, #68]	; 0x44
 8005970:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005972:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005974:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005976:	e841 2300 	strex	r3, r2, [r1]
 800597a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800597c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1e3      	bne.n	800594a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	3314      	adds	r3, #20
 8005988:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	e853 3f00 	ldrex	r3, [r3]
 8005990:	623b      	str	r3, [r7, #32]
   return(result);
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	f023 0301 	bic.w	r3, r3, #1
 8005998:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	3314      	adds	r3, #20
 80059a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80059a6:	633a      	str	r2, [r7, #48]	; 0x30
 80059a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ae:	e841 2300 	strex	r3, r2, [r1]
 80059b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1e3      	bne.n	8005982 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2220      	movs	r2, #32
 80059be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	330c      	adds	r3, #12
 80059ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	e853 3f00 	ldrex	r3, [r3]
 80059d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 0310 	bic.w	r3, r3, #16
 80059de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	330c      	adds	r3, #12
 80059e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80059ec:	61fa      	str	r2, [r7, #28]
 80059ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f0:	69b9      	ldr	r1, [r7, #24]
 80059f2:	69fa      	ldr	r2, [r7, #28]
 80059f4:	e841 2300 	strex	r3, r2, [r1]
 80059f8:	617b      	str	r3, [r7, #20]
   return(result);
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1e3      	bne.n	80059c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 f83b 	bl	8005a88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a12:	e023      	b.n	8005a5c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d009      	beq.n	8005a34 <HAL_UART_IRQHandler+0x4f4>
 8005a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d003      	beq.n	8005a34 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 f953 	bl	8005cd8 <UART_Transmit_IT>
    return;
 8005a32:	e014      	b.n	8005a5e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00e      	beq.n	8005a5e <HAL_UART_IRQHandler+0x51e>
 8005a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d008      	beq.n	8005a5e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 f992 	bl	8005d76 <UART_EndTransmit_IT>
    return;
 8005a52:	e004      	b.n	8005a5e <HAL_UART_IRQHandler+0x51e>
    return;
 8005a54:	bf00      	nop
 8005a56:	e002      	b.n	8005a5e <HAL_UART_IRQHandler+0x51e>
      return;
 8005a58:	bf00      	nop
 8005a5a:	e000      	b.n	8005a5e <HAL_UART_IRQHandler+0x51e>
      return;
 8005a5c:	bf00      	nop
  }
}
 8005a5e:	37e8      	adds	r7, #232	; 0xe8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bc80      	pop	{r7}
 8005a74:	4770      	bx	lr

08005a76 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b083      	sub	sp, #12
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a7e:	bf00      	nop
 8005a80:	370c      	adds	r7, #12
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bc80      	pop	{r7}
 8005a86:	4770      	bx	lr

08005a88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	460b      	mov	r3, r1
 8005a92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bc80      	pop	{r7}
 8005a9c:	4770      	bx	lr

08005a9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b090      	sub	sp, #64	; 0x40
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	60f8      	str	r0, [r7, #12]
 8005aa6:	60b9      	str	r1, [r7, #8]
 8005aa8:	603b      	str	r3, [r7, #0]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aae:	e050      	b.n	8005b52 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab6:	d04c      	beq.n	8005b52 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d007      	beq.n	8005ace <UART_WaitOnFlagUntilTimeout+0x30>
 8005abe:	f7fd f829 	bl	8002b14 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d241      	bcs.n	8005b52 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	330c      	adds	r3, #12
 8005ad4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad8:	e853 3f00 	ldrex	r3, [r3]
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	330c      	adds	r3, #12
 8005aec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005aee:	637a      	str	r2, [r7, #52]	; 0x34
 8005af0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005af4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005af6:	e841 2300 	strex	r3, r2, [r1]
 8005afa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1e5      	bne.n	8005ace <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3314      	adds	r3, #20
 8005b08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	e853 3f00 	ldrex	r3, [r3]
 8005b10:	613b      	str	r3, [r7, #16]
   return(result);
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f023 0301 	bic.w	r3, r3, #1
 8005b18:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	3314      	adds	r3, #20
 8005b20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b22:	623a      	str	r2, [r7, #32]
 8005b24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b26:	69f9      	ldr	r1, [r7, #28]
 8005b28:	6a3a      	ldr	r2, [r7, #32]
 8005b2a:	e841 2300 	strex	r3, r2, [r1]
 8005b2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1e5      	bne.n	8005b02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2220      	movs	r2, #32
 8005b42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e00f      	b.n	8005b72 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	bf0c      	ite	eq
 8005b62:	2301      	moveq	r3, #1
 8005b64:	2300      	movne	r3, #0
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	461a      	mov	r2, r3
 8005b6a:	79fb      	ldrb	r3, [r7, #7]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d09f      	beq.n	8005ab0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3740      	adds	r7, #64	; 0x40
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b085      	sub	sp, #20
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	60f8      	str	r0, [r7, #12]
 8005b82:	60b9      	str	r1, [r7, #8]
 8005b84:	4613      	mov	r3, r2
 8005b86:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	88fa      	ldrh	r2, [r7, #6]
 8005b92:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	88fa      	ldrh	r2, [r7, #6]
 8005b98:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2222      	movs	r2, #34	; 0x22
 8005ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d007      	beq.n	8005bc0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bbe:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	695a      	ldr	r2, [r3, #20]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0201 	orr.w	r2, r2, #1
 8005bce:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68da      	ldr	r2, [r3, #12]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f042 0220 	orr.w	r2, r2, #32
 8005bde:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bc80      	pop	{r7}
 8005bea:	4770      	bx	lr

08005bec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b095      	sub	sp, #84	; 0x54
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	330c      	adds	r3, #12
 8005bfa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bfe:	e853 3f00 	ldrex	r3, [r3]
 8005c02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	330c      	adds	r3, #12
 8005c12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c14:	643a      	str	r2, [r7, #64]	; 0x40
 8005c16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c1c:	e841 2300 	strex	r3, r2, [r1]
 8005c20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1e5      	bne.n	8005bf4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	3314      	adds	r3, #20
 8005c2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	e853 3f00 	ldrex	r3, [r3]
 8005c36:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	f023 0301 	bic.w	r3, r3, #1
 8005c3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3314      	adds	r3, #20
 8005c46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c50:	e841 2300 	strex	r3, r2, [r1]
 8005c54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1e5      	bne.n	8005c28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d119      	bne.n	8005c98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	330c      	adds	r3, #12
 8005c6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	e853 3f00 	ldrex	r3, [r3]
 8005c72:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	f023 0310 	bic.w	r3, r3, #16
 8005c7a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	330c      	adds	r3, #12
 8005c82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c84:	61ba      	str	r2, [r7, #24]
 8005c86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c88:	6979      	ldr	r1, [r7, #20]
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	e841 2300 	strex	r3, r2, [r1]
 8005c90:	613b      	str	r3, [r7, #16]
   return(result);
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1e5      	bne.n	8005c64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005ca6:	bf00      	nop
 8005ca8:	3754      	adds	r7, #84	; 0x54
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bc80      	pop	{r7}
 8005cae:	4770      	bx	lr

08005cb0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f7ff fed3 	bl	8005a76 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cd0:	bf00      	nop
 8005cd2:	3710      	adds	r7, #16
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b21      	cmp	r3, #33	; 0x21
 8005cea:	d13e      	bne.n	8005d6a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf4:	d114      	bne.n	8005d20 <UART_Transmit_IT+0x48>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d110      	bne.n	8005d20 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	881b      	ldrh	r3, [r3, #0]
 8005d08:	461a      	mov	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d12:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a1b      	ldr	r3, [r3, #32]
 8005d18:	1c9a      	adds	r2, r3, #2
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	621a      	str	r2, [r3, #32]
 8005d1e:	e008      	b.n	8005d32 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	1c59      	adds	r1, r3, #1
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	6211      	str	r1, [r2, #32]
 8005d2a:	781a      	ldrb	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	4619      	mov	r1, r3
 8005d40:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10f      	bne.n	8005d66 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68da      	ldr	r2, [r3, #12]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d54:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68da      	ldr	r2, [r3, #12]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d64:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d66:	2300      	movs	r3, #0
 8005d68:	e000      	b.n	8005d6c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d6a:	2302      	movs	r3, #2
  }
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bc80      	pop	{r7}
 8005d74:	4770      	bx	lr

08005d76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b082      	sub	sp, #8
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2220      	movs	r2, #32
 8005d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7ff fe64 	bl	8005a64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b08c      	sub	sp, #48	; 0x30
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b22      	cmp	r3, #34	; 0x22
 8005db8:	f040 80ae 	bne.w	8005f18 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dc4:	d117      	bne.n	8005df6 <UART_Receive_IT+0x50>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d113      	bne.n	8005df6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dee:	1c9a      	adds	r2, r3, #2
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	629a      	str	r2, [r3, #40]	; 0x28
 8005df4:	e026      	b.n	8005e44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e08:	d007      	beq.n	8005e1a <UART_Receive_IT+0x74>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10a      	bne.n	8005e28 <UART_Receive_IT+0x82>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d106      	bne.n	8005e28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e24:	701a      	strb	r2, [r3, #0]
 8005e26:	e008      	b.n	8005e3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e34:	b2da      	uxtb	r2, r3
 8005e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3e:	1c5a      	adds	r2, r3, #1
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	4619      	mov	r1, r3
 8005e52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d15d      	bne.n	8005f14 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68da      	ldr	r2, [r3, #12]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f022 0220 	bic.w	r2, r2, #32
 8005e66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68da      	ldr	r2, [r3, #12]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	695a      	ldr	r2, [r3, #20]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 0201 	bic.w	r2, r2, #1
 8005e86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d135      	bne.n	8005f0a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	330c      	adds	r3, #12
 8005eaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	e853 3f00 	ldrex	r3, [r3]
 8005eb2:	613b      	str	r3, [r7, #16]
   return(result);
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	f023 0310 	bic.w	r3, r3, #16
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	330c      	adds	r3, #12
 8005ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec4:	623a      	str	r2, [r7, #32]
 8005ec6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec8:	69f9      	ldr	r1, [r7, #28]
 8005eca:	6a3a      	ldr	r2, [r7, #32]
 8005ecc:	e841 2300 	strex	r3, r2, [r1]
 8005ed0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1e5      	bne.n	8005ea4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0310 	and.w	r3, r3, #16
 8005ee2:	2b10      	cmp	r3, #16
 8005ee4:	d10a      	bne.n	8005efc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	60fb      	str	r3, [r7, #12]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	60fb      	str	r3, [r7, #12]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	60fb      	str	r3, [r7, #12]
 8005efa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f00:	4619      	mov	r1, r3
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7ff fdc0 	bl	8005a88 <HAL_UARTEx_RxEventCallback>
 8005f08:	e002      	b.n	8005f10 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7fb ff6e 	bl	8001dec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f10:	2300      	movs	r3, #0
 8005f12:	e002      	b.n	8005f1a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005f14:	2300      	movs	r3, #0
 8005f16:	e000      	b.n	8005f1a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005f18:	2302      	movs	r3, #2
  }
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3730      	adds	r7, #48	; 0x30
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
	...

08005f24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68da      	ldr	r2, [r3, #12]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	689a      	ldr	r2, [r3, #8]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	431a      	orrs	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005f5e:	f023 030c 	bic.w	r3, r3, #12
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	6812      	ldr	r2, [r2, #0]
 8005f66:	68b9      	ldr	r1, [r7, #8]
 8005f68:	430b      	orrs	r3, r1
 8005f6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	699a      	ldr	r2, [r3, #24]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a2c      	ldr	r2, [pc, #176]	; (8006038 <UART_SetConfig+0x114>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d103      	bne.n	8005f94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005f8c:	f7fe f96e 	bl	800426c <HAL_RCC_GetPCLK2Freq>
 8005f90:	60f8      	str	r0, [r7, #12]
 8005f92:	e002      	b.n	8005f9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005f94:	f7fe f956 	bl	8004244 <HAL_RCC_GetPCLK1Freq>
 8005f98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4413      	add	r3, r2
 8005fa2:	009a      	lsls	r2, r3, #2
 8005fa4:	441a      	add	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb0:	4a22      	ldr	r2, [pc, #136]	; (800603c <UART_SetConfig+0x118>)
 8005fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb6:	095b      	lsrs	r3, r3, #5
 8005fb8:	0119      	lsls	r1, r3, #4
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	009a      	lsls	r2, r3, #2
 8005fc4:	441a      	add	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fd0:	4b1a      	ldr	r3, [pc, #104]	; (800603c <UART_SetConfig+0x118>)
 8005fd2:	fba3 0302 	umull	r0, r3, r3, r2
 8005fd6:	095b      	lsrs	r3, r3, #5
 8005fd8:	2064      	movs	r0, #100	; 0x64
 8005fda:	fb00 f303 	mul.w	r3, r0, r3
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	011b      	lsls	r3, r3, #4
 8005fe2:	3332      	adds	r3, #50	; 0x32
 8005fe4:	4a15      	ldr	r2, [pc, #84]	; (800603c <UART_SetConfig+0x118>)
 8005fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fea:	095b      	lsrs	r3, r3, #5
 8005fec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ff0:	4419      	add	r1, r3
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	009a      	lsls	r2, r3, #2
 8005ffc:	441a      	add	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	fbb2 f2f3 	udiv	r2, r2, r3
 8006008:	4b0c      	ldr	r3, [pc, #48]	; (800603c <UART_SetConfig+0x118>)
 800600a:	fba3 0302 	umull	r0, r3, r3, r2
 800600e:	095b      	lsrs	r3, r3, #5
 8006010:	2064      	movs	r0, #100	; 0x64
 8006012:	fb00 f303 	mul.w	r3, r0, r3
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	011b      	lsls	r3, r3, #4
 800601a:	3332      	adds	r3, #50	; 0x32
 800601c:	4a07      	ldr	r2, [pc, #28]	; (800603c <UART_SetConfig+0x118>)
 800601e:	fba2 2303 	umull	r2, r3, r2, r3
 8006022:	095b      	lsrs	r3, r3, #5
 8006024:	f003 020f 	and.w	r2, r3, #15
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	440a      	add	r2, r1
 800602e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006030:	bf00      	nop
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	40013800 	.word	0x40013800
 800603c:	51eb851f 	.word	0x51eb851f

08006040 <atoi>:
 8006040:	220a      	movs	r2, #10
 8006042:	2100      	movs	r1, #0
 8006044:	f000 bd0e 	b.w	8006a64 <strtol>

08006048 <__errno>:
 8006048:	4b01      	ldr	r3, [pc, #4]	; (8006050 <__errno+0x8>)
 800604a:	6818      	ldr	r0, [r3, #0]
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	20000040 	.word	0x20000040

08006054 <__libc_init_array>:
 8006054:	b570      	push	{r4, r5, r6, lr}
 8006056:	2600      	movs	r6, #0
 8006058:	4d0c      	ldr	r5, [pc, #48]	; (800608c <__libc_init_array+0x38>)
 800605a:	4c0d      	ldr	r4, [pc, #52]	; (8006090 <__libc_init_array+0x3c>)
 800605c:	1b64      	subs	r4, r4, r5
 800605e:	10a4      	asrs	r4, r4, #2
 8006060:	42a6      	cmp	r6, r4
 8006062:	d109      	bne.n	8006078 <__libc_init_array+0x24>
 8006064:	f002 ff9c 	bl	8008fa0 <_init>
 8006068:	2600      	movs	r6, #0
 800606a:	4d0a      	ldr	r5, [pc, #40]	; (8006094 <__libc_init_array+0x40>)
 800606c:	4c0a      	ldr	r4, [pc, #40]	; (8006098 <__libc_init_array+0x44>)
 800606e:	1b64      	subs	r4, r4, r5
 8006070:	10a4      	asrs	r4, r4, #2
 8006072:	42a6      	cmp	r6, r4
 8006074:	d105      	bne.n	8006082 <__libc_init_array+0x2e>
 8006076:	bd70      	pop	{r4, r5, r6, pc}
 8006078:	f855 3b04 	ldr.w	r3, [r5], #4
 800607c:	4798      	blx	r3
 800607e:	3601      	adds	r6, #1
 8006080:	e7ee      	b.n	8006060 <__libc_init_array+0xc>
 8006082:	f855 3b04 	ldr.w	r3, [r5], #4
 8006086:	4798      	blx	r3
 8006088:	3601      	adds	r6, #1
 800608a:	e7f2      	b.n	8006072 <__libc_init_array+0x1e>
 800608c:	0800941c 	.word	0x0800941c
 8006090:	0800941c 	.word	0x0800941c
 8006094:	0800941c 	.word	0x0800941c
 8006098:	08009420 	.word	0x08009420

0800609c <memset>:
 800609c:	4603      	mov	r3, r0
 800609e:	4402      	add	r2, r0
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d100      	bne.n	80060a6 <memset+0xa>
 80060a4:	4770      	bx	lr
 80060a6:	f803 1b01 	strb.w	r1, [r3], #1
 80060aa:	e7f9      	b.n	80060a0 <memset+0x4>

080060ac <__cvt>:
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060b2:	461f      	mov	r7, r3
 80060b4:	bfbb      	ittet	lt
 80060b6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80060ba:	461f      	movlt	r7, r3
 80060bc:	2300      	movge	r3, #0
 80060be:	232d      	movlt	r3, #45	; 0x2d
 80060c0:	b088      	sub	sp, #32
 80060c2:	4614      	mov	r4, r2
 80060c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80060c6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80060c8:	7013      	strb	r3, [r2, #0]
 80060ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80060cc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80060d0:	f023 0820 	bic.w	r8, r3, #32
 80060d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80060d8:	d005      	beq.n	80060e6 <__cvt+0x3a>
 80060da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80060de:	d100      	bne.n	80060e2 <__cvt+0x36>
 80060e0:	3501      	adds	r5, #1
 80060e2:	2302      	movs	r3, #2
 80060e4:	e000      	b.n	80060e8 <__cvt+0x3c>
 80060e6:	2303      	movs	r3, #3
 80060e8:	aa07      	add	r2, sp, #28
 80060ea:	9204      	str	r2, [sp, #16]
 80060ec:	aa06      	add	r2, sp, #24
 80060ee:	e9cd a202 	strd	sl, r2, [sp, #8]
 80060f2:	e9cd 3500 	strd	r3, r5, [sp]
 80060f6:	4622      	mov	r2, r4
 80060f8:	463b      	mov	r3, r7
 80060fa:	f000 fd85 	bl	8006c08 <_dtoa_r>
 80060fe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006102:	4606      	mov	r6, r0
 8006104:	d102      	bne.n	800610c <__cvt+0x60>
 8006106:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006108:	07db      	lsls	r3, r3, #31
 800610a:	d522      	bpl.n	8006152 <__cvt+0xa6>
 800610c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006110:	eb06 0905 	add.w	r9, r6, r5
 8006114:	d110      	bne.n	8006138 <__cvt+0x8c>
 8006116:	7833      	ldrb	r3, [r6, #0]
 8006118:	2b30      	cmp	r3, #48	; 0x30
 800611a:	d10a      	bne.n	8006132 <__cvt+0x86>
 800611c:	2200      	movs	r2, #0
 800611e:	2300      	movs	r3, #0
 8006120:	4620      	mov	r0, r4
 8006122:	4639      	mov	r1, r7
 8006124:	f7fa fc40 	bl	80009a8 <__aeabi_dcmpeq>
 8006128:	b918      	cbnz	r0, 8006132 <__cvt+0x86>
 800612a:	f1c5 0501 	rsb	r5, r5, #1
 800612e:	f8ca 5000 	str.w	r5, [sl]
 8006132:	f8da 3000 	ldr.w	r3, [sl]
 8006136:	4499      	add	r9, r3
 8006138:	2200      	movs	r2, #0
 800613a:	2300      	movs	r3, #0
 800613c:	4620      	mov	r0, r4
 800613e:	4639      	mov	r1, r7
 8006140:	f7fa fc32 	bl	80009a8 <__aeabi_dcmpeq>
 8006144:	b108      	cbz	r0, 800614a <__cvt+0x9e>
 8006146:	f8cd 901c 	str.w	r9, [sp, #28]
 800614a:	2230      	movs	r2, #48	; 0x30
 800614c:	9b07      	ldr	r3, [sp, #28]
 800614e:	454b      	cmp	r3, r9
 8006150:	d307      	bcc.n	8006162 <__cvt+0xb6>
 8006152:	4630      	mov	r0, r6
 8006154:	9b07      	ldr	r3, [sp, #28]
 8006156:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006158:	1b9b      	subs	r3, r3, r6
 800615a:	6013      	str	r3, [r2, #0]
 800615c:	b008      	add	sp, #32
 800615e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006162:	1c59      	adds	r1, r3, #1
 8006164:	9107      	str	r1, [sp, #28]
 8006166:	701a      	strb	r2, [r3, #0]
 8006168:	e7f0      	b.n	800614c <__cvt+0xa0>

0800616a <__exponent>:
 800616a:	4603      	mov	r3, r0
 800616c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800616e:	2900      	cmp	r1, #0
 8006170:	f803 2b02 	strb.w	r2, [r3], #2
 8006174:	bfb6      	itet	lt
 8006176:	222d      	movlt	r2, #45	; 0x2d
 8006178:	222b      	movge	r2, #43	; 0x2b
 800617a:	4249      	neglt	r1, r1
 800617c:	2909      	cmp	r1, #9
 800617e:	7042      	strb	r2, [r0, #1]
 8006180:	dd2b      	ble.n	80061da <__exponent+0x70>
 8006182:	f10d 0407 	add.w	r4, sp, #7
 8006186:	46a4      	mov	ip, r4
 8006188:	270a      	movs	r7, #10
 800618a:	fb91 f6f7 	sdiv	r6, r1, r7
 800618e:	460a      	mov	r2, r1
 8006190:	46a6      	mov	lr, r4
 8006192:	fb07 1516 	mls	r5, r7, r6, r1
 8006196:	2a63      	cmp	r2, #99	; 0x63
 8006198:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800619c:	4631      	mov	r1, r6
 800619e:	f104 34ff 	add.w	r4, r4, #4294967295
 80061a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80061a6:	dcf0      	bgt.n	800618a <__exponent+0x20>
 80061a8:	3130      	adds	r1, #48	; 0x30
 80061aa:	f1ae 0502 	sub.w	r5, lr, #2
 80061ae:	f804 1c01 	strb.w	r1, [r4, #-1]
 80061b2:	4629      	mov	r1, r5
 80061b4:	1c44      	adds	r4, r0, #1
 80061b6:	4561      	cmp	r1, ip
 80061b8:	d30a      	bcc.n	80061d0 <__exponent+0x66>
 80061ba:	f10d 0209 	add.w	r2, sp, #9
 80061be:	eba2 020e 	sub.w	r2, r2, lr
 80061c2:	4565      	cmp	r5, ip
 80061c4:	bf88      	it	hi
 80061c6:	2200      	movhi	r2, #0
 80061c8:	4413      	add	r3, r2
 80061ca:	1a18      	subs	r0, r3, r0
 80061cc:	b003      	add	sp, #12
 80061ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061d4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80061d8:	e7ed      	b.n	80061b6 <__exponent+0x4c>
 80061da:	2330      	movs	r3, #48	; 0x30
 80061dc:	3130      	adds	r1, #48	; 0x30
 80061de:	7083      	strb	r3, [r0, #2]
 80061e0:	70c1      	strb	r1, [r0, #3]
 80061e2:	1d03      	adds	r3, r0, #4
 80061e4:	e7f1      	b.n	80061ca <__exponent+0x60>
	...

080061e8 <_printf_float>:
 80061e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ec:	b091      	sub	sp, #68	; 0x44
 80061ee:	460c      	mov	r4, r1
 80061f0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80061f4:	4616      	mov	r6, r2
 80061f6:	461f      	mov	r7, r3
 80061f8:	4605      	mov	r5, r0
 80061fa:	f001 faf3 	bl	80077e4 <_localeconv_r>
 80061fe:	6803      	ldr	r3, [r0, #0]
 8006200:	4618      	mov	r0, r3
 8006202:	9309      	str	r3, [sp, #36]	; 0x24
 8006204:	f7f9 ffa4 	bl	8000150 <strlen>
 8006208:	2300      	movs	r3, #0
 800620a:	930e      	str	r3, [sp, #56]	; 0x38
 800620c:	f8d8 3000 	ldr.w	r3, [r8]
 8006210:	900a      	str	r0, [sp, #40]	; 0x28
 8006212:	3307      	adds	r3, #7
 8006214:	f023 0307 	bic.w	r3, r3, #7
 8006218:	f103 0208 	add.w	r2, r3, #8
 800621c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006220:	f8d4 b000 	ldr.w	fp, [r4]
 8006224:	f8c8 2000 	str.w	r2, [r8]
 8006228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006230:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006234:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006238:	930b      	str	r3, [sp, #44]	; 0x2c
 800623a:	f04f 32ff 	mov.w	r2, #4294967295
 800623e:	4640      	mov	r0, r8
 8006240:	4b9c      	ldr	r3, [pc, #624]	; (80064b4 <_printf_float+0x2cc>)
 8006242:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006244:	f7fa fbe2 	bl	8000a0c <__aeabi_dcmpun>
 8006248:	bb70      	cbnz	r0, 80062a8 <_printf_float+0xc0>
 800624a:	f04f 32ff 	mov.w	r2, #4294967295
 800624e:	4640      	mov	r0, r8
 8006250:	4b98      	ldr	r3, [pc, #608]	; (80064b4 <_printf_float+0x2cc>)
 8006252:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006254:	f7fa fbbc 	bl	80009d0 <__aeabi_dcmple>
 8006258:	bb30      	cbnz	r0, 80062a8 <_printf_float+0xc0>
 800625a:	2200      	movs	r2, #0
 800625c:	2300      	movs	r3, #0
 800625e:	4640      	mov	r0, r8
 8006260:	4651      	mov	r1, sl
 8006262:	f7fa fbab 	bl	80009bc <__aeabi_dcmplt>
 8006266:	b110      	cbz	r0, 800626e <_printf_float+0x86>
 8006268:	232d      	movs	r3, #45	; 0x2d
 800626a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800626e:	4b92      	ldr	r3, [pc, #584]	; (80064b8 <_printf_float+0x2d0>)
 8006270:	4892      	ldr	r0, [pc, #584]	; (80064bc <_printf_float+0x2d4>)
 8006272:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006276:	bf94      	ite	ls
 8006278:	4698      	movls	r8, r3
 800627a:	4680      	movhi	r8, r0
 800627c:	2303      	movs	r3, #3
 800627e:	f04f 0a00 	mov.w	sl, #0
 8006282:	6123      	str	r3, [r4, #16]
 8006284:	f02b 0304 	bic.w	r3, fp, #4
 8006288:	6023      	str	r3, [r4, #0]
 800628a:	4633      	mov	r3, r6
 800628c:	4621      	mov	r1, r4
 800628e:	4628      	mov	r0, r5
 8006290:	9700      	str	r7, [sp, #0]
 8006292:	aa0f      	add	r2, sp, #60	; 0x3c
 8006294:	f000 f9d4 	bl	8006640 <_printf_common>
 8006298:	3001      	adds	r0, #1
 800629a:	f040 8090 	bne.w	80063be <_printf_float+0x1d6>
 800629e:	f04f 30ff 	mov.w	r0, #4294967295
 80062a2:	b011      	add	sp, #68	; 0x44
 80062a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062a8:	4642      	mov	r2, r8
 80062aa:	4653      	mov	r3, sl
 80062ac:	4640      	mov	r0, r8
 80062ae:	4651      	mov	r1, sl
 80062b0:	f7fa fbac 	bl	8000a0c <__aeabi_dcmpun>
 80062b4:	b148      	cbz	r0, 80062ca <_printf_float+0xe2>
 80062b6:	f1ba 0f00 	cmp.w	sl, #0
 80062ba:	bfb8      	it	lt
 80062bc:	232d      	movlt	r3, #45	; 0x2d
 80062be:	4880      	ldr	r0, [pc, #512]	; (80064c0 <_printf_float+0x2d8>)
 80062c0:	bfb8      	it	lt
 80062c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80062c6:	4b7f      	ldr	r3, [pc, #508]	; (80064c4 <_printf_float+0x2dc>)
 80062c8:	e7d3      	b.n	8006272 <_printf_float+0x8a>
 80062ca:	6863      	ldr	r3, [r4, #4]
 80062cc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80062d0:	1c5a      	adds	r2, r3, #1
 80062d2:	d142      	bne.n	800635a <_printf_float+0x172>
 80062d4:	2306      	movs	r3, #6
 80062d6:	6063      	str	r3, [r4, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	9206      	str	r2, [sp, #24]
 80062dc:	aa0e      	add	r2, sp, #56	; 0x38
 80062de:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80062e2:	aa0d      	add	r2, sp, #52	; 0x34
 80062e4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80062e8:	9203      	str	r2, [sp, #12]
 80062ea:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80062ee:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80062f2:	6023      	str	r3, [r4, #0]
 80062f4:	6863      	ldr	r3, [r4, #4]
 80062f6:	4642      	mov	r2, r8
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	4628      	mov	r0, r5
 80062fc:	4653      	mov	r3, sl
 80062fe:	910b      	str	r1, [sp, #44]	; 0x2c
 8006300:	f7ff fed4 	bl	80060ac <__cvt>
 8006304:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006306:	4680      	mov	r8, r0
 8006308:	2947      	cmp	r1, #71	; 0x47
 800630a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800630c:	d108      	bne.n	8006320 <_printf_float+0x138>
 800630e:	1cc8      	adds	r0, r1, #3
 8006310:	db02      	blt.n	8006318 <_printf_float+0x130>
 8006312:	6863      	ldr	r3, [r4, #4]
 8006314:	4299      	cmp	r1, r3
 8006316:	dd40      	ble.n	800639a <_printf_float+0x1b2>
 8006318:	f1a9 0902 	sub.w	r9, r9, #2
 800631c:	fa5f f989 	uxtb.w	r9, r9
 8006320:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006324:	d81f      	bhi.n	8006366 <_printf_float+0x17e>
 8006326:	464a      	mov	r2, r9
 8006328:	3901      	subs	r1, #1
 800632a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800632e:	910d      	str	r1, [sp, #52]	; 0x34
 8006330:	f7ff ff1b 	bl	800616a <__exponent>
 8006334:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006336:	4682      	mov	sl, r0
 8006338:	1813      	adds	r3, r2, r0
 800633a:	2a01      	cmp	r2, #1
 800633c:	6123      	str	r3, [r4, #16]
 800633e:	dc02      	bgt.n	8006346 <_printf_float+0x15e>
 8006340:	6822      	ldr	r2, [r4, #0]
 8006342:	07d2      	lsls	r2, r2, #31
 8006344:	d501      	bpl.n	800634a <_printf_float+0x162>
 8006346:	3301      	adds	r3, #1
 8006348:	6123      	str	r3, [r4, #16]
 800634a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800634e:	2b00      	cmp	r3, #0
 8006350:	d09b      	beq.n	800628a <_printf_float+0xa2>
 8006352:	232d      	movs	r3, #45	; 0x2d
 8006354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006358:	e797      	b.n	800628a <_printf_float+0xa2>
 800635a:	2947      	cmp	r1, #71	; 0x47
 800635c:	d1bc      	bne.n	80062d8 <_printf_float+0xf0>
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1ba      	bne.n	80062d8 <_printf_float+0xf0>
 8006362:	2301      	movs	r3, #1
 8006364:	e7b7      	b.n	80062d6 <_printf_float+0xee>
 8006366:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800636a:	d118      	bne.n	800639e <_printf_float+0x1b6>
 800636c:	2900      	cmp	r1, #0
 800636e:	6863      	ldr	r3, [r4, #4]
 8006370:	dd0b      	ble.n	800638a <_printf_float+0x1a2>
 8006372:	6121      	str	r1, [r4, #16]
 8006374:	b913      	cbnz	r3, 800637c <_printf_float+0x194>
 8006376:	6822      	ldr	r2, [r4, #0]
 8006378:	07d0      	lsls	r0, r2, #31
 800637a:	d502      	bpl.n	8006382 <_printf_float+0x19a>
 800637c:	3301      	adds	r3, #1
 800637e:	440b      	add	r3, r1
 8006380:	6123      	str	r3, [r4, #16]
 8006382:	f04f 0a00 	mov.w	sl, #0
 8006386:	65a1      	str	r1, [r4, #88]	; 0x58
 8006388:	e7df      	b.n	800634a <_printf_float+0x162>
 800638a:	b913      	cbnz	r3, 8006392 <_printf_float+0x1aa>
 800638c:	6822      	ldr	r2, [r4, #0]
 800638e:	07d2      	lsls	r2, r2, #31
 8006390:	d501      	bpl.n	8006396 <_printf_float+0x1ae>
 8006392:	3302      	adds	r3, #2
 8006394:	e7f4      	b.n	8006380 <_printf_float+0x198>
 8006396:	2301      	movs	r3, #1
 8006398:	e7f2      	b.n	8006380 <_printf_float+0x198>
 800639a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800639e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063a0:	4299      	cmp	r1, r3
 80063a2:	db05      	blt.n	80063b0 <_printf_float+0x1c8>
 80063a4:	6823      	ldr	r3, [r4, #0]
 80063a6:	6121      	str	r1, [r4, #16]
 80063a8:	07d8      	lsls	r0, r3, #31
 80063aa:	d5ea      	bpl.n	8006382 <_printf_float+0x19a>
 80063ac:	1c4b      	adds	r3, r1, #1
 80063ae:	e7e7      	b.n	8006380 <_printf_float+0x198>
 80063b0:	2900      	cmp	r1, #0
 80063b2:	bfcc      	ite	gt
 80063b4:	2201      	movgt	r2, #1
 80063b6:	f1c1 0202 	rsble	r2, r1, #2
 80063ba:	4413      	add	r3, r2
 80063bc:	e7e0      	b.n	8006380 <_printf_float+0x198>
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	055a      	lsls	r2, r3, #21
 80063c2:	d407      	bmi.n	80063d4 <_printf_float+0x1ec>
 80063c4:	6923      	ldr	r3, [r4, #16]
 80063c6:	4642      	mov	r2, r8
 80063c8:	4631      	mov	r1, r6
 80063ca:	4628      	mov	r0, r5
 80063cc:	47b8      	blx	r7
 80063ce:	3001      	adds	r0, #1
 80063d0:	d12b      	bne.n	800642a <_printf_float+0x242>
 80063d2:	e764      	b.n	800629e <_printf_float+0xb6>
 80063d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80063d8:	f240 80dd 	bls.w	8006596 <_printf_float+0x3ae>
 80063dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80063e0:	2200      	movs	r2, #0
 80063e2:	2300      	movs	r3, #0
 80063e4:	f7fa fae0 	bl	80009a8 <__aeabi_dcmpeq>
 80063e8:	2800      	cmp	r0, #0
 80063ea:	d033      	beq.n	8006454 <_printf_float+0x26c>
 80063ec:	2301      	movs	r3, #1
 80063ee:	4631      	mov	r1, r6
 80063f0:	4628      	mov	r0, r5
 80063f2:	4a35      	ldr	r2, [pc, #212]	; (80064c8 <_printf_float+0x2e0>)
 80063f4:	47b8      	blx	r7
 80063f6:	3001      	adds	r0, #1
 80063f8:	f43f af51 	beq.w	800629e <_printf_float+0xb6>
 80063fc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006400:	429a      	cmp	r2, r3
 8006402:	db02      	blt.n	800640a <_printf_float+0x222>
 8006404:	6823      	ldr	r3, [r4, #0]
 8006406:	07d8      	lsls	r0, r3, #31
 8006408:	d50f      	bpl.n	800642a <_printf_float+0x242>
 800640a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800640e:	4631      	mov	r1, r6
 8006410:	4628      	mov	r0, r5
 8006412:	47b8      	blx	r7
 8006414:	3001      	adds	r0, #1
 8006416:	f43f af42 	beq.w	800629e <_printf_float+0xb6>
 800641a:	f04f 0800 	mov.w	r8, #0
 800641e:	f104 091a 	add.w	r9, r4, #26
 8006422:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006424:	3b01      	subs	r3, #1
 8006426:	4543      	cmp	r3, r8
 8006428:	dc09      	bgt.n	800643e <_printf_float+0x256>
 800642a:	6823      	ldr	r3, [r4, #0]
 800642c:	079b      	lsls	r3, r3, #30
 800642e:	f100 8102 	bmi.w	8006636 <_printf_float+0x44e>
 8006432:	68e0      	ldr	r0, [r4, #12]
 8006434:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006436:	4298      	cmp	r0, r3
 8006438:	bfb8      	it	lt
 800643a:	4618      	movlt	r0, r3
 800643c:	e731      	b.n	80062a2 <_printf_float+0xba>
 800643e:	2301      	movs	r3, #1
 8006440:	464a      	mov	r2, r9
 8006442:	4631      	mov	r1, r6
 8006444:	4628      	mov	r0, r5
 8006446:	47b8      	blx	r7
 8006448:	3001      	adds	r0, #1
 800644a:	f43f af28 	beq.w	800629e <_printf_float+0xb6>
 800644e:	f108 0801 	add.w	r8, r8, #1
 8006452:	e7e6      	b.n	8006422 <_printf_float+0x23a>
 8006454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006456:	2b00      	cmp	r3, #0
 8006458:	dc38      	bgt.n	80064cc <_printf_float+0x2e4>
 800645a:	2301      	movs	r3, #1
 800645c:	4631      	mov	r1, r6
 800645e:	4628      	mov	r0, r5
 8006460:	4a19      	ldr	r2, [pc, #100]	; (80064c8 <_printf_float+0x2e0>)
 8006462:	47b8      	blx	r7
 8006464:	3001      	adds	r0, #1
 8006466:	f43f af1a 	beq.w	800629e <_printf_float+0xb6>
 800646a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800646e:	4313      	orrs	r3, r2
 8006470:	d102      	bne.n	8006478 <_printf_float+0x290>
 8006472:	6823      	ldr	r3, [r4, #0]
 8006474:	07d9      	lsls	r1, r3, #31
 8006476:	d5d8      	bpl.n	800642a <_printf_float+0x242>
 8006478:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800647c:	4631      	mov	r1, r6
 800647e:	4628      	mov	r0, r5
 8006480:	47b8      	blx	r7
 8006482:	3001      	adds	r0, #1
 8006484:	f43f af0b 	beq.w	800629e <_printf_float+0xb6>
 8006488:	f04f 0900 	mov.w	r9, #0
 800648c:	f104 0a1a 	add.w	sl, r4, #26
 8006490:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006492:	425b      	negs	r3, r3
 8006494:	454b      	cmp	r3, r9
 8006496:	dc01      	bgt.n	800649c <_printf_float+0x2b4>
 8006498:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800649a:	e794      	b.n	80063c6 <_printf_float+0x1de>
 800649c:	2301      	movs	r3, #1
 800649e:	4652      	mov	r2, sl
 80064a0:	4631      	mov	r1, r6
 80064a2:	4628      	mov	r0, r5
 80064a4:	47b8      	blx	r7
 80064a6:	3001      	adds	r0, #1
 80064a8:	f43f aef9 	beq.w	800629e <_printf_float+0xb6>
 80064ac:	f109 0901 	add.w	r9, r9, #1
 80064b0:	e7ee      	b.n	8006490 <_printf_float+0x2a8>
 80064b2:	bf00      	nop
 80064b4:	7fefffff 	.word	0x7fefffff
 80064b8:	08009044 	.word	0x08009044
 80064bc:	08009048 	.word	0x08009048
 80064c0:	08009050 	.word	0x08009050
 80064c4:	0800904c 	.word	0x0800904c
 80064c8:	08009054 	.word	0x08009054
 80064cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064d0:	429a      	cmp	r2, r3
 80064d2:	bfa8      	it	ge
 80064d4:	461a      	movge	r2, r3
 80064d6:	2a00      	cmp	r2, #0
 80064d8:	4691      	mov	r9, r2
 80064da:	dc37      	bgt.n	800654c <_printf_float+0x364>
 80064dc:	f04f 0b00 	mov.w	fp, #0
 80064e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064e4:	f104 021a 	add.w	r2, r4, #26
 80064e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80064ec:	ebaa 0309 	sub.w	r3, sl, r9
 80064f0:	455b      	cmp	r3, fp
 80064f2:	dc33      	bgt.n	800655c <_printf_float+0x374>
 80064f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80064f8:	429a      	cmp	r2, r3
 80064fa:	db3b      	blt.n	8006574 <_printf_float+0x38c>
 80064fc:	6823      	ldr	r3, [r4, #0]
 80064fe:	07da      	lsls	r2, r3, #31
 8006500:	d438      	bmi.n	8006574 <_printf_float+0x38c>
 8006502:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006504:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006506:	eba3 020a 	sub.w	r2, r3, sl
 800650a:	eba3 0901 	sub.w	r9, r3, r1
 800650e:	4591      	cmp	r9, r2
 8006510:	bfa8      	it	ge
 8006512:	4691      	movge	r9, r2
 8006514:	f1b9 0f00 	cmp.w	r9, #0
 8006518:	dc34      	bgt.n	8006584 <_printf_float+0x39c>
 800651a:	f04f 0800 	mov.w	r8, #0
 800651e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006522:	f104 0a1a 	add.w	sl, r4, #26
 8006526:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800652a:	1a9b      	subs	r3, r3, r2
 800652c:	eba3 0309 	sub.w	r3, r3, r9
 8006530:	4543      	cmp	r3, r8
 8006532:	f77f af7a 	ble.w	800642a <_printf_float+0x242>
 8006536:	2301      	movs	r3, #1
 8006538:	4652      	mov	r2, sl
 800653a:	4631      	mov	r1, r6
 800653c:	4628      	mov	r0, r5
 800653e:	47b8      	blx	r7
 8006540:	3001      	adds	r0, #1
 8006542:	f43f aeac 	beq.w	800629e <_printf_float+0xb6>
 8006546:	f108 0801 	add.w	r8, r8, #1
 800654a:	e7ec      	b.n	8006526 <_printf_float+0x33e>
 800654c:	4613      	mov	r3, r2
 800654e:	4631      	mov	r1, r6
 8006550:	4642      	mov	r2, r8
 8006552:	4628      	mov	r0, r5
 8006554:	47b8      	blx	r7
 8006556:	3001      	adds	r0, #1
 8006558:	d1c0      	bne.n	80064dc <_printf_float+0x2f4>
 800655a:	e6a0      	b.n	800629e <_printf_float+0xb6>
 800655c:	2301      	movs	r3, #1
 800655e:	4631      	mov	r1, r6
 8006560:	4628      	mov	r0, r5
 8006562:	920b      	str	r2, [sp, #44]	; 0x2c
 8006564:	47b8      	blx	r7
 8006566:	3001      	adds	r0, #1
 8006568:	f43f ae99 	beq.w	800629e <_printf_float+0xb6>
 800656c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800656e:	f10b 0b01 	add.w	fp, fp, #1
 8006572:	e7b9      	b.n	80064e8 <_printf_float+0x300>
 8006574:	4631      	mov	r1, r6
 8006576:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800657a:	4628      	mov	r0, r5
 800657c:	47b8      	blx	r7
 800657e:	3001      	adds	r0, #1
 8006580:	d1bf      	bne.n	8006502 <_printf_float+0x31a>
 8006582:	e68c      	b.n	800629e <_printf_float+0xb6>
 8006584:	464b      	mov	r3, r9
 8006586:	4631      	mov	r1, r6
 8006588:	4628      	mov	r0, r5
 800658a:	eb08 020a 	add.w	r2, r8, sl
 800658e:	47b8      	blx	r7
 8006590:	3001      	adds	r0, #1
 8006592:	d1c2      	bne.n	800651a <_printf_float+0x332>
 8006594:	e683      	b.n	800629e <_printf_float+0xb6>
 8006596:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006598:	2a01      	cmp	r2, #1
 800659a:	dc01      	bgt.n	80065a0 <_printf_float+0x3b8>
 800659c:	07db      	lsls	r3, r3, #31
 800659e:	d537      	bpl.n	8006610 <_printf_float+0x428>
 80065a0:	2301      	movs	r3, #1
 80065a2:	4642      	mov	r2, r8
 80065a4:	4631      	mov	r1, r6
 80065a6:	4628      	mov	r0, r5
 80065a8:	47b8      	blx	r7
 80065aa:	3001      	adds	r0, #1
 80065ac:	f43f ae77 	beq.w	800629e <_printf_float+0xb6>
 80065b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065b4:	4631      	mov	r1, r6
 80065b6:	4628      	mov	r0, r5
 80065b8:	47b8      	blx	r7
 80065ba:	3001      	adds	r0, #1
 80065bc:	f43f ae6f 	beq.w	800629e <_printf_float+0xb6>
 80065c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065c4:	2200      	movs	r2, #0
 80065c6:	2300      	movs	r3, #0
 80065c8:	f7fa f9ee 	bl	80009a8 <__aeabi_dcmpeq>
 80065cc:	b9d8      	cbnz	r0, 8006606 <_printf_float+0x41e>
 80065ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065d0:	f108 0201 	add.w	r2, r8, #1
 80065d4:	3b01      	subs	r3, #1
 80065d6:	4631      	mov	r1, r6
 80065d8:	4628      	mov	r0, r5
 80065da:	47b8      	blx	r7
 80065dc:	3001      	adds	r0, #1
 80065de:	d10e      	bne.n	80065fe <_printf_float+0x416>
 80065e0:	e65d      	b.n	800629e <_printf_float+0xb6>
 80065e2:	2301      	movs	r3, #1
 80065e4:	464a      	mov	r2, r9
 80065e6:	4631      	mov	r1, r6
 80065e8:	4628      	mov	r0, r5
 80065ea:	47b8      	blx	r7
 80065ec:	3001      	adds	r0, #1
 80065ee:	f43f ae56 	beq.w	800629e <_printf_float+0xb6>
 80065f2:	f108 0801 	add.w	r8, r8, #1
 80065f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065f8:	3b01      	subs	r3, #1
 80065fa:	4543      	cmp	r3, r8
 80065fc:	dcf1      	bgt.n	80065e2 <_printf_float+0x3fa>
 80065fe:	4653      	mov	r3, sl
 8006600:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006604:	e6e0      	b.n	80063c8 <_printf_float+0x1e0>
 8006606:	f04f 0800 	mov.w	r8, #0
 800660a:	f104 091a 	add.w	r9, r4, #26
 800660e:	e7f2      	b.n	80065f6 <_printf_float+0x40e>
 8006610:	2301      	movs	r3, #1
 8006612:	4642      	mov	r2, r8
 8006614:	e7df      	b.n	80065d6 <_printf_float+0x3ee>
 8006616:	2301      	movs	r3, #1
 8006618:	464a      	mov	r2, r9
 800661a:	4631      	mov	r1, r6
 800661c:	4628      	mov	r0, r5
 800661e:	47b8      	blx	r7
 8006620:	3001      	adds	r0, #1
 8006622:	f43f ae3c 	beq.w	800629e <_printf_float+0xb6>
 8006626:	f108 0801 	add.w	r8, r8, #1
 800662a:	68e3      	ldr	r3, [r4, #12]
 800662c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800662e:	1a5b      	subs	r3, r3, r1
 8006630:	4543      	cmp	r3, r8
 8006632:	dcf0      	bgt.n	8006616 <_printf_float+0x42e>
 8006634:	e6fd      	b.n	8006432 <_printf_float+0x24a>
 8006636:	f04f 0800 	mov.w	r8, #0
 800663a:	f104 0919 	add.w	r9, r4, #25
 800663e:	e7f4      	b.n	800662a <_printf_float+0x442>

08006640 <_printf_common>:
 8006640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006644:	4616      	mov	r6, r2
 8006646:	4699      	mov	r9, r3
 8006648:	688a      	ldr	r2, [r1, #8]
 800664a:	690b      	ldr	r3, [r1, #16]
 800664c:	4607      	mov	r7, r0
 800664e:	4293      	cmp	r3, r2
 8006650:	bfb8      	it	lt
 8006652:	4613      	movlt	r3, r2
 8006654:	6033      	str	r3, [r6, #0]
 8006656:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800665a:	460c      	mov	r4, r1
 800665c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006660:	b10a      	cbz	r2, 8006666 <_printf_common+0x26>
 8006662:	3301      	adds	r3, #1
 8006664:	6033      	str	r3, [r6, #0]
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	0699      	lsls	r1, r3, #26
 800666a:	bf42      	ittt	mi
 800666c:	6833      	ldrmi	r3, [r6, #0]
 800666e:	3302      	addmi	r3, #2
 8006670:	6033      	strmi	r3, [r6, #0]
 8006672:	6825      	ldr	r5, [r4, #0]
 8006674:	f015 0506 	ands.w	r5, r5, #6
 8006678:	d106      	bne.n	8006688 <_printf_common+0x48>
 800667a:	f104 0a19 	add.w	sl, r4, #25
 800667e:	68e3      	ldr	r3, [r4, #12]
 8006680:	6832      	ldr	r2, [r6, #0]
 8006682:	1a9b      	subs	r3, r3, r2
 8006684:	42ab      	cmp	r3, r5
 8006686:	dc28      	bgt.n	80066da <_printf_common+0x9a>
 8006688:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800668c:	1e13      	subs	r3, r2, #0
 800668e:	6822      	ldr	r2, [r4, #0]
 8006690:	bf18      	it	ne
 8006692:	2301      	movne	r3, #1
 8006694:	0692      	lsls	r2, r2, #26
 8006696:	d42d      	bmi.n	80066f4 <_printf_common+0xb4>
 8006698:	4649      	mov	r1, r9
 800669a:	4638      	mov	r0, r7
 800669c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066a0:	47c0      	blx	r8
 80066a2:	3001      	adds	r0, #1
 80066a4:	d020      	beq.n	80066e8 <_printf_common+0xa8>
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	68e5      	ldr	r5, [r4, #12]
 80066aa:	f003 0306 	and.w	r3, r3, #6
 80066ae:	2b04      	cmp	r3, #4
 80066b0:	bf18      	it	ne
 80066b2:	2500      	movne	r5, #0
 80066b4:	6832      	ldr	r2, [r6, #0]
 80066b6:	f04f 0600 	mov.w	r6, #0
 80066ba:	68a3      	ldr	r3, [r4, #8]
 80066bc:	bf08      	it	eq
 80066be:	1aad      	subeq	r5, r5, r2
 80066c0:	6922      	ldr	r2, [r4, #16]
 80066c2:	bf08      	it	eq
 80066c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066c8:	4293      	cmp	r3, r2
 80066ca:	bfc4      	itt	gt
 80066cc:	1a9b      	subgt	r3, r3, r2
 80066ce:	18ed      	addgt	r5, r5, r3
 80066d0:	341a      	adds	r4, #26
 80066d2:	42b5      	cmp	r5, r6
 80066d4:	d11a      	bne.n	800670c <_printf_common+0xcc>
 80066d6:	2000      	movs	r0, #0
 80066d8:	e008      	b.n	80066ec <_printf_common+0xac>
 80066da:	2301      	movs	r3, #1
 80066dc:	4652      	mov	r2, sl
 80066de:	4649      	mov	r1, r9
 80066e0:	4638      	mov	r0, r7
 80066e2:	47c0      	blx	r8
 80066e4:	3001      	adds	r0, #1
 80066e6:	d103      	bne.n	80066f0 <_printf_common+0xb0>
 80066e8:	f04f 30ff 	mov.w	r0, #4294967295
 80066ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066f0:	3501      	adds	r5, #1
 80066f2:	e7c4      	b.n	800667e <_printf_common+0x3e>
 80066f4:	2030      	movs	r0, #48	; 0x30
 80066f6:	18e1      	adds	r1, r4, r3
 80066f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80066fc:	1c5a      	adds	r2, r3, #1
 80066fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006702:	4422      	add	r2, r4
 8006704:	3302      	adds	r3, #2
 8006706:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800670a:	e7c5      	b.n	8006698 <_printf_common+0x58>
 800670c:	2301      	movs	r3, #1
 800670e:	4622      	mov	r2, r4
 8006710:	4649      	mov	r1, r9
 8006712:	4638      	mov	r0, r7
 8006714:	47c0      	blx	r8
 8006716:	3001      	adds	r0, #1
 8006718:	d0e6      	beq.n	80066e8 <_printf_common+0xa8>
 800671a:	3601      	adds	r6, #1
 800671c:	e7d9      	b.n	80066d2 <_printf_common+0x92>
	...

08006720 <_printf_i>:
 8006720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006724:	7e0f      	ldrb	r7, [r1, #24]
 8006726:	4691      	mov	r9, r2
 8006728:	2f78      	cmp	r7, #120	; 0x78
 800672a:	4680      	mov	r8, r0
 800672c:	460c      	mov	r4, r1
 800672e:	469a      	mov	sl, r3
 8006730:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006732:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006736:	d807      	bhi.n	8006748 <_printf_i+0x28>
 8006738:	2f62      	cmp	r7, #98	; 0x62
 800673a:	d80a      	bhi.n	8006752 <_printf_i+0x32>
 800673c:	2f00      	cmp	r7, #0
 800673e:	f000 80d9 	beq.w	80068f4 <_printf_i+0x1d4>
 8006742:	2f58      	cmp	r7, #88	; 0x58
 8006744:	f000 80a4 	beq.w	8006890 <_printf_i+0x170>
 8006748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800674c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006750:	e03a      	b.n	80067c8 <_printf_i+0xa8>
 8006752:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006756:	2b15      	cmp	r3, #21
 8006758:	d8f6      	bhi.n	8006748 <_printf_i+0x28>
 800675a:	a101      	add	r1, pc, #4	; (adr r1, 8006760 <_printf_i+0x40>)
 800675c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006760:	080067b9 	.word	0x080067b9
 8006764:	080067cd 	.word	0x080067cd
 8006768:	08006749 	.word	0x08006749
 800676c:	08006749 	.word	0x08006749
 8006770:	08006749 	.word	0x08006749
 8006774:	08006749 	.word	0x08006749
 8006778:	080067cd 	.word	0x080067cd
 800677c:	08006749 	.word	0x08006749
 8006780:	08006749 	.word	0x08006749
 8006784:	08006749 	.word	0x08006749
 8006788:	08006749 	.word	0x08006749
 800678c:	080068db 	.word	0x080068db
 8006790:	080067fd 	.word	0x080067fd
 8006794:	080068bd 	.word	0x080068bd
 8006798:	08006749 	.word	0x08006749
 800679c:	08006749 	.word	0x08006749
 80067a0:	080068fd 	.word	0x080068fd
 80067a4:	08006749 	.word	0x08006749
 80067a8:	080067fd 	.word	0x080067fd
 80067ac:	08006749 	.word	0x08006749
 80067b0:	08006749 	.word	0x08006749
 80067b4:	080068c5 	.word	0x080068c5
 80067b8:	682b      	ldr	r3, [r5, #0]
 80067ba:	1d1a      	adds	r2, r3, #4
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	602a      	str	r2, [r5, #0]
 80067c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067c8:	2301      	movs	r3, #1
 80067ca:	e0a4      	b.n	8006916 <_printf_i+0x1f6>
 80067cc:	6820      	ldr	r0, [r4, #0]
 80067ce:	6829      	ldr	r1, [r5, #0]
 80067d0:	0606      	lsls	r6, r0, #24
 80067d2:	f101 0304 	add.w	r3, r1, #4
 80067d6:	d50a      	bpl.n	80067ee <_printf_i+0xce>
 80067d8:	680e      	ldr	r6, [r1, #0]
 80067da:	602b      	str	r3, [r5, #0]
 80067dc:	2e00      	cmp	r6, #0
 80067de:	da03      	bge.n	80067e8 <_printf_i+0xc8>
 80067e0:	232d      	movs	r3, #45	; 0x2d
 80067e2:	4276      	negs	r6, r6
 80067e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067e8:	230a      	movs	r3, #10
 80067ea:	485e      	ldr	r0, [pc, #376]	; (8006964 <_printf_i+0x244>)
 80067ec:	e019      	b.n	8006822 <_printf_i+0x102>
 80067ee:	680e      	ldr	r6, [r1, #0]
 80067f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80067f4:	602b      	str	r3, [r5, #0]
 80067f6:	bf18      	it	ne
 80067f8:	b236      	sxthne	r6, r6
 80067fa:	e7ef      	b.n	80067dc <_printf_i+0xbc>
 80067fc:	682b      	ldr	r3, [r5, #0]
 80067fe:	6820      	ldr	r0, [r4, #0]
 8006800:	1d19      	adds	r1, r3, #4
 8006802:	6029      	str	r1, [r5, #0]
 8006804:	0601      	lsls	r1, r0, #24
 8006806:	d501      	bpl.n	800680c <_printf_i+0xec>
 8006808:	681e      	ldr	r6, [r3, #0]
 800680a:	e002      	b.n	8006812 <_printf_i+0xf2>
 800680c:	0646      	lsls	r6, r0, #25
 800680e:	d5fb      	bpl.n	8006808 <_printf_i+0xe8>
 8006810:	881e      	ldrh	r6, [r3, #0]
 8006812:	2f6f      	cmp	r7, #111	; 0x6f
 8006814:	bf0c      	ite	eq
 8006816:	2308      	moveq	r3, #8
 8006818:	230a      	movne	r3, #10
 800681a:	4852      	ldr	r0, [pc, #328]	; (8006964 <_printf_i+0x244>)
 800681c:	2100      	movs	r1, #0
 800681e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006822:	6865      	ldr	r5, [r4, #4]
 8006824:	2d00      	cmp	r5, #0
 8006826:	bfa8      	it	ge
 8006828:	6821      	ldrge	r1, [r4, #0]
 800682a:	60a5      	str	r5, [r4, #8]
 800682c:	bfa4      	itt	ge
 800682e:	f021 0104 	bicge.w	r1, r1, #4
 8006832:	6021      	strge	r1, [r4, #0]
 8006834:	b90e      	cbnz	r6, 800683a <_printf_i+0x11a>
 8006836:	2d00      	cmp	r5, #0
 8006838:	d04d      	beq.n	80068d6 <_printf_i+0x1b6>
 800683a:	4615      	mov	r5, r2
 800683c:	fbb6 f1f3 	udiv	r1, r6, r3
 8006840:	fb03 6711 	mls	r7, r3, r1, r6
 8006844:	5dc7      	ldrb	r7, [r0, r7]
 8006846:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800684a:	4637      	mov	r7, r6
 800684c:	42bb      	cmp	r3, r7
 800684e:	460e      	mov	r6, r1
 8006850:	d9f4      	bls.n	800683c <_printf_i+0x11c>
 8006852:	2b08      	cmp	r3, #8
 8006854:	d10b      	bne.n	800686e <_printf_i+0x14e>
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	07de      	lsls	r6, r3, #31
 800685a:	d508      	bpl.n	800686e <_printf_i+0x14e>
 800685c:	6923      	ldr	r3, [r4, #16]
 800685e:	6861      	ldr	r1, [r4, #4]
 8006860:	4299      	cmp	r1, r3
 8006862:	bfde      	ittt	le
 8006864:	2330      	movle	r3, #48	; 0x30
 8006866:	f805 3c01 	strble.w	r3, [r5, #-1]
 800686a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800686e:	1b52      	subs	r2, r2, r5
 8006870:	6122      	str	r2, [r4, #16]
 8006872:	464b      	mov	r3, r9
 8006874:	4621      	mov	r1, r4
 8006876:	4640      	mov	r0, r8
 8006878:	f8cd a000 	str.w	sl, [sp]
 800687c:	aa03      	add	r2, sp, #12
 800687e:	f7ff fedf 	bl	8006640 <_printf_common>
 8006882:	3001      	adds	r0, #1
 8006884:	d14c      	bne.n	8006920 <_printf_i+0x200>
 8006886:	f04f 30ff 	mov.w	r0, #4294967295
 800688a:	b004      	add	sp, #16
 800688c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006890:	4834      	ldr	r0, [pc, #208]	; (8006964 <_printf_i+0x244>)
 8006892:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006896:	6829      	ldr	r1, [r5, #0]
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	f851 6b04 	ldr.w	r6, [r1], #4
 800689e:	6029      	str	r1, [r5, #0]
 80068a0:	061d      	lsls	r5, r3, #24
 80068a2:	d514      	bpl.n	80068ce <_printf_i+0x1ae>
 80068a4:	07df      	lsls	r7, r3, #31
 80068a6:	bf44      	itt	mi
 80068a8:	f043 0320 	orrmi.w	r3, r3, #32
 80068ac:	6023      	strmi	r3, [r4, #0]
 80068ae:	b91e      	cbnz	r6, 80068b8 <_printf_i+0x198>
 80068b0:	6823      	ldr	r3, [r4, #0]
 80068b2:	f023 0320 	bic.w	r3, r3, #32
 80068b6:	6023      	str	r3, [r4, #0]
 80068b8:	2310      	movs	r3, #16
 80068ba:	e7af      	b.n	800681c <_printf_i+0xfc>
 80068bc:	6823      	ldr	r3, [r4, #0]
 80068be:	f043 0320 	orr.w	r3, r3, #32
 80068c2:	6023      	str	r3, [r4, #0]
 80068c4:	2378      	movs	r3, #120	; 0x78
 80068c6:	4828      	ldr	r0, [pc, #160]	; (8006968 <_printf_i+0x248>)
 80068c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068cc:	e7e3      	b.n	8006896 <_printf_i+0x176>
 80068ce:	0659      	lsls	r1, r3, #25
 80068d0:	bf48      	it	mi
 80068d2:	b2b6      	uxthmi	r6, r6
 80068d4:	e7e6      	b.n	80068a4 <_printf_i+0x184>
 80068d6:	4615      	mov	r5, r2
 80068d8:	e7bb      	b.n	8006852 <_printf_i+0x132>
 80068da:	682b      	ldr	r3, [r5, #0]
 80068dc:	6826      	ldr	r6, [r4, #0]
 80068de:	1d18      	adds	r0, r3, #4
 80068e0:	6961      	ldr	r1, [r4, #20]
 80068e2:	6028      	str	r0, [r5, #0]
 80068e4:	0635      	lsls	r5, r6, #24
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	d501      	bpl.n	80068ee <_printf_i+0x1ce>
 80068ea:	6019      	str	r1, [r3, #0]
 80068ec:	e002      	b.n	80068f4 <_printf_i+0x1d4>
 80068ee:	0670      	lsls	r0, r6, #25
 80068f0:	d5fb      	bpl.n	80068ea <_printf_i+0x1ca>
 80068f2:	8019      	strh	r1, [r3, #0]
 80068f4:	2300      	movs	r3, #0
 80068f6:	4615      	mov	r5, r2
 80068f8:	6123      	str	r3, [r4, #16]
 80068fa:	e7ba      	b.n	8006872 <_printf_i+0x152>
 80068fc:	682b      	ldr	r3, [r5, #0]
 80068fe:	2100      	movs	r1, #0
 8006900:	1d1a      	adds	r2, r3, #4
 8006902:	602a      	str	r2, [r5, #0]
 8006904:	681d      	ldr	r5, [r3, #0]
 8006906:	6862      	ldr	r2, [r4, #4]
 8006908:	4628      	mov	r0, r5
 800690a:	f000 ff77 	bl	80077fc <memchr>
 800690e:	b108      	cbz	r0, 8006914 <_printf_i+0x1f4>
 8006910:	1b40      	subs	r0, r0, r5
 8006912:	6060      	str	r0, [r4, #4]
 8006914:	6863      	ldr	r3, [r4, #4]
 8006916:	6123      	str	r3, [r4, #16]
 8006918:	2300      	movs	r3, #0
 800691a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800691e:	e7a8      	b.n	8006872 <_printf_i+0x152>
 8006920:	462a      	mov	r2, r5
 8006922:	4649      	mov	r1, r9
 8006924:	4640      	mov	r0, r8
 8006926:	6923      	ldr	r3, [r4, #16]
 8006928:	47d0      	blx	sl
 800692a:	3001      	adds	r0, #1
 800692c:	d0ab      	beq.n	8006886 <_printf_i+0x166>
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	079b      	lsls	r3, r3, #30
 8006932:	d413      	bmi.n	800695c <_printf_i+0x23c>
 8006934:	68e0      	ldr	r0, [r4, #12]
 8006936:	9b03      	ldr	r3, [sp, #12]
 8006938:	4298      	cmp	r0, r3
 800693a:	bfb8      	it	lt
 800693c:	4618      	movlt	r0, r3
 800693e:	e7a4      	b.n	800688a <_printf_i+0x16a>
 8006940:	2301      	movs	r3, #1
 8006942:	4632      	mov	r2, r6
 8006944:	4649      	mov	r1, r9
 8006946:	4640      	mov	r0, r8
 8006948:	47d0      	blx	sl
 800694a:	3001      	adds	r0, #1
 800694c:	d09b      	beq.n	8006886 <_printf_i+0x166>
 800694e:	3501      	adds	r5, #1
 8006950:	68e3      	ldr	r3, [r4, #12]
 8006952:	9903      	ldr	r1, [sp, #12]
 8006954:	1a5b      	subs	r3, r3, r1
 8006956:	42ab      	cmp	r3, r5
 8006958:	dcf2      	bgt.n	8006940 <_printf_i+0x220>
 800695a:	e7eb      	b.n	8006934 <_printf_i+0x214>
 800695c:	2500      	movs	r5, #0
 800695e:	f104 0619 	add.w	r6, r4, #25
 8006962:	e7f5      	b.n	8006950 <_printf_i+0x230>
 8006964:	08009056 	.word	0x08009056
 8006968:	08009067 	.word	0x08009067

0800696c <_strtol_l.constprop.0>:
 800696c:	2b01      	cmp	r3, #1
 800696e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006972:	4680      	mov	r8, r0
 8006974:	d001      	beq.n	800697a <_strtol_l.constprop.0+0xe>
 8006976:	2b24      	cmp	r3, #36	; 0x24
 8006978:	d906      	bls.n	8006988 <_strtol_l.constprop.0+0x1c>
 800697a:	f7ff fb65 	bl	8006048 <__errno>
 800697e:	2316      	movs	r3, #22
 8006980:	6003      	str	r3, [r0, #0]
 8006982:	2000      	movs	r0, #0
 8006984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006988:	460d      	mov	r5, r1
 800698a:	4f35      	ldr	r7, [pc, #212]	; (8006a60 <_strtol_l.constprop.0+0xf4>)
 800698c:	4628      	mov	r0, r5
 800698e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006992:	5de6      	ldrb	r6, [r4, r7]
 8006994:	f016 0608 	ands.w	r6, r6, #8
 8006998:	d1f8      	bne.n	800698c <_strtol_l.constprop.0+0x20>
 800699a:	2c2d      	cmp	r4, #45	; 0x2d
 800699c:	d12f      	bne.n	80069fe <_strtol_l.constprop.0+0x92>
 800699e:	2601      	movs	r6, #1
 80069a0:	782c      	ldrb	r4, [r5, #0]
 80069a2:	1c85      	adds	r5, r0, #2
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d057      	beq.n	8006a58 <_strtol_l.constprop.0+0xec>
 80069a8:	2b10      	cmp	r3, #16
 80069aa:	d109      	bne.n	80069c0 <_strtol_l.constprop.0+0x54>
 80069ac:	2c30      	cmp	r4, #48	; 0x30
 80069ae:	d107      	bne.n	80069c0 <_strtol_l.constprop.0+0x54>
 80069b0:	7828      	ldrb	r0, [r5, #0]
 80069b2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80069b6:	2858      	cmp	r0, #88	; 0x58
 80069b8:	d149      	bne.n	8006a4e <_strtol_l.constprop.0+0xe2>
 80069ba:	2310      	movs	r3, #16
 80069bc:	786c      	ldrb	r4, [r5, #1]
 80069be:	3502      	adds	r5, #2
 80069c0:	2700      	movs	r7, #0
 80069c2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80069c6:	f10e 3eff 	add.w	lr, lr, #4294967295
 80069ca:	fbbe f9f3 	udiv	r9, lr, r3
 80069ce:	4638      	mov	r0, r7
 80069d0:	fb03 ea19 	mls	sl, r3, r9, lr
 80069d4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80069d8:	f1bc 0f09 	cmp.w	ip, #9
 80069dc:	d814      	bhi.n	8006a08 <_strtol_l.constprop.0+0x9c>
 80069de:	4664      	mov	r4, ip
 80069e0:	42a3      	cmp	r3, r4
 80069e2:	dd22      	ble.n	8006a2a <_strtol_l.constprop.0+0xbe>
 80069e4:	2f00      	cmp	r7, #0
 80069e6:	db1d      	blt.n	8006a24 <_strtol_l.constprop.0+0xb8>
 80069e8:	4581      	cmp	r9, r0
 80069ea:	d31b      	bcc.n	8006a24 <_strtol_l.constprop.0+0xb8>
 80069ec:	d101      	bne.n	80069f2 <_strtol_l.constprop.0+0x86>
 80069ee:	45a2      	cmp	sl, r4
 80069f0:	db18      	blt.n	8006a24 <_strtol_l.constprop.0+0xb8>
 80069f2:	2701      	movs	r7, #1
 80069f4:	fb00 4003 	mla	r0, r0, r3, r4
 80069f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80069fc:	e7ea      	b.n	80069d4 <_strtol_l.constprop.0+0x68>
 80069fe:	2c2b      	cmp	r4, #43	; 0x2b
 8006a00:	bf04      	itt	eq
 8006a02:	782c      	ldrbeq	r4, [r5, #0]
 8006a04:	1c85      	addeq	r5, r0, #2
 8006a06:	e7cd      	b.n	80069a4 <_strtol_l.constprop.0+0x38>
 8006a08:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006a0c:	f1bc 0f19 	cmp.w	ip, #25
 8006a10:	d801      	bhi.n	8006a16 <_strtol_l.constprop.0+0xaa>
 8006a12:	3c37      	subs	r4, #55	; 0x37
 8006a14:	e7e4      	b.n	80069e0 <_strtol_l.constprop.0+0x74>
 8006a16:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006a1a:	f1bc 0f19 	cmp.w	ip, #25
 8006a1e:	d804      	bhi.n	8006a2a <_strtol_l.constprop.0+0xbe>
 8006a20:	3c57      	subs	r4, #87	; 0x57
 8006a22:	e7dd      	b.n	80069e0 <_strtol_l.constprop.0+0x74>
 8006a24:	f04f 37ff 	mov.w	r7, #4294967295
 8006a28:	e7e6      	b.n	80069f8 <_strtol_l.constprop.0+0x8c>
 8006a2a:	2f00      	cmp	r7, #0
 8006a2c:	da07      	bge.n	8006a3e <_strtol_l.constprop.0+0xd2>
 8006a2e:	2322      	movs	r3, #34	; 0x22
 8006a30:	4670      	mov	r0, lr
 8006a32:	f8c8 3000 	str.w	r3, [r8]
 8006a36:	2a00      	cmp	r2, #0
 8006a38:	d0a4      	beq.n	8006984 <_strtol_l.constprop.0+0x18>
 8006a3a:	1e69      	subs	r1, r5, #1
 8006a3c:	e005      	b.n	8006a4a <_strtol_l.constprop.0+0xde>
 8006a3e:	b106      	cbz	r6, 8006a42 <_strtol_l.constprop.0+0xd6>
 8006a40:	4240      	negs	r0, r0
 8006a42:	2a00      	cmp	r2, #0
 8006a44:	d09e      	beq.n	8006984 <_strtol_l.constprop.0+0x18>
 8006a46:	2f00      	cmp	r7, #0
 8006a48:	d1f7      	bne.n	8006a3a <_strtol_l.constprop.0+0xce>
 8006a4a:	6011      	str	r1, [r2, #0]
 8006a4c:	e79a      	b.n	8006984 <_strtol_l.constprop.0+0x18>
 8006a4e:	2430      	movs	r4, #48	; 0x30
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1b5      	bne.n	80069c0 <_strtol_l.constprop.0+0x54>
 8006a54:	2308      	movs	r3, #8
 8006a56:	e7b3      	b.n	80069c0 <_strtol_l.constprop.0+0x54>
 8006a58:	2c30      	cmp	r4, #48	; 0x30
 8006a5a:	d0a9      	beq.n	80069b0 <_strtol_l.constprop.0+0x44>
 8006a5c:	230a      	movs	r3, #10
 8006a5e:	e7af      	b.n	80069c0 <_strtol_l.constprop.0+0x54>
 8006a60:	08009079 	.word	0x08009079

08006a64 <strtol>:
 8006a64:	4613      	mov	r3, r2
 8006a66:	460a      	mov	r2, r1
 8006a68:	4601      	mov	r1, r0
 8006a6a:	4802      	ldr	r0, [pc, #8]	; (8006a74 <strtol+0x10>)
 8006a6c:	6800      	ldr	r0, [r0, #0]
 8006a6e:	f7ff bf7d 	b.w	800696c <_strtol_l.constprop.0>
 8006a72:	bf00      	nop
 8006a74:	20000040 	.word	0x20000040

08006a78 <_vsniprintf_r>:
 8006a78:	b530      	push	{r4, r5, lr}
 8006a7a:	4614      	mov	r4, r2
 8006a7c:	2c00      	cmp	r4, #0
 8006a7e:	4605      	mov	r5, r0
 8006a80:	461a      	mov	r2, r3
 8006a82:	b09b      	sub	sp, #108	; 0x6c
 8006a84:	da05      	bge.n	8006a92 <_vsniprintf_r+0x1a>
 8006a86:	238b      	movs	r3, #139	; 0x8b
 8006a88:	6003      	str	r3, [r0, #0]
 8006a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a8e:	b01b      	add	sp, #108	; 0x6c
 8006a90:	bd30      	pop	{r4, r5, pc}
 8006a92:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006a96:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006a9a:	bf0c      	ite	eq
 8006a9c:	4623      	moveq	r3, r4
 8006a9e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006aa2:	9302      	str	r3, [sp, #8]
 8006aa4:	9305      	str	r3, [sp, #20]
 8006aa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006aaa:	9100      	str	r1, [sp, #0]
 8006aac:	9104      	str	r1, [sp, #16]
 8006aae:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006ab2:	4669      	mov	r1, sp
 8006ab4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006ab6:	f001 fb8b 	bl	80081d0 <_svfiprintf_r>
 8006aba:	1c43      	adds	r3, r0, #1
 8006abc:	bfbc      	itt	lt
 8006abe:	238b      	movlt	r3, #139	; 0x8b
 8006ac0:	602b      	strlt	r3, [r5, #0]
 8006ac2:	2c00      	cmp	r4, #0
 8006ac4:	d0e3      	beq.n	8006a8e <_vsniprintf_r+0x16>
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	9b00      	ldr	r3, [sp, #0]
 8006aca:	701a      	strb	r2, [r3, #0]
 8006acc:	e7df      	b.n	8006a8e <_vsniprintf_r+0x16>
	...

08006ad0 <vsniprintf>:
 8006ad0:	b507      	push	{r0, r1, r2, lr}
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	460a      	mov	r2, r1
 8006ad8:	4601      	mov	r1, r0
 8006ada:	4803      	ldr	r0, [pc, #12]	; (8006ae8 <vsniprintf+0x18>)
 8006adc:	6800      	ldr	r0, [r0, #0]
 8006ade:	f7ff ffcb 	bl	8006a78 <_vsniprintf_r>
 8006ae2:	b003      	add	sp, #12
 8006ae4:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ae8:	20000040 	.word	0x20000040

08006aec <quorem>:
 8006aec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af0:	6903      	ldr	r3, [r0, #16]
 8006af2:	690c      	ldr	r4, [r1, #16]
 8006af4:	4607      	mov	r7, r0
 8006af6:	42a3      	cmp	r3, r4
 8006af8:	f2c0 8082 	blt.w	8006c00 <quorem+0x114>
 8006afc:	3c01      	subs	r4, #1
 8006afe:	f100 0514 	add.w	r5, r0, #20
 8006b02:	f101 0814 	add.w	r8, r1, #20
 8006b06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b0a:	9301      	str	r3, [sp, #4]
 8006b0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006b10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b14:	3301      	adds	r3, #1
 8006b16:	429a      	cmp	r2, r3
 8006b18:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006b20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006b24:	d331      	bcc.n	8006b8a <quorem+0x9e>
 8006b26:	f04f 0e00 	mov.w	lr, #0
 8006b2a:	4640      	mov	r0, r8
 8006b2c:	46ac      	mov	ip, r5
 8006b2e:	46f2      	mov	sl, lr
 8006b30:	f850 2b04 	ldr.w	r2, [r0], #4
 8006b34:	b293      	uxth	r3, r2
 8006b36:	fb06 e303 	mla	r3, r6, r3, lr
 8006b3a:	0c12      	lsrs	r2, r2, #16
 8006b3c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	fb06 e202 	mla	r2, r6, r2, lr
 8006b46:	ebaa 0303 	sub.w	r3, sl, r3
 8006b4a:	f8dc a000 	ldr.w	sl, [ip]
 8006b4e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006b52:	fa1f fa8a 	uxth.w	sl, sl
 8006b56:	4453      	add	r3, sl
 8006b58:	f8dc a000 	ldr.w	sl, [ip]
 8006b5c:	b292      	uxth	r2, r2
 8006b5e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006b62:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b6c:	4581      	cmp	r9, r0
 8006b6e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006b72:	f84c 3b04 	str.w	r3, [ip], #4
 8006b76:	d2db      	bcs.n	8006b30 <quorem+0x44>
 8006b78:	f855 300b 	ldr.w	r3, [r5, fp]
 8006b7c:	b92b      	cbnz	r3, 8006b8a <quorem+0x9e>
 8006b7e:	9b01      	ldr	r3, [sp, #4]
 8006b80:	3b04      	subs	r3, #4
 8006b82:	429d      	cmp	r5, r3
 8006b84:	461a      	mov	r2, r3
 8006b86:	d32f      	bcc.n	8006be8 <quorem+0xfc>
 8006b88:	613c      	str	r4, [r7, #16]
 8006b8a:	4638      	mov	r0, r7
 8006b8c:	f001 f8d0 	bl	8007d30 <__mcmp>
 8006b90:	2800      	cmp	r0, #0
 8006b92:	db25      	blt.n	8006be0 <quorem+0xf4>
 8006b94:	4628      	mov	r0, r5
 8006b96:	f04f 0c00 	mov.w	ip, #0
 8006b9a:	3601      	adds	r6, #1
 8006b9c:	f858 1b04 	ldr.w	r1, [r8], #4
 8006ba0:	f8d0 e000 	ldr.w	lr, [r0]
 8006ba4:	b28b      	uxth	r3, r1
 8006ba6:	ebac 0303 	sub.w	r3, ip, r3
 8006baa:	fa1f f28e 	uxth.w	r2, lr
 8006bae:	4413      	add	r3, r2
 8006bb0:	0c0a      	lsrs	r2, r1, #16
 8006bb2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006bb6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bc0:	45c1      	cmp	r9, r8
 8006bc2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006bc6:	f840 3b04 	str.w	r3, [r0], #4
 8006bca:	d2e7      	bcs.n	8006b9c <quorem+0xb0>
 8006bcc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006bd0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006bd4:	b922      	cbnz	r2, 8006be0 <quorem+0xf4>
 8006bd6:	3b04      	subs	r3, #4
 8006bd8:	429d      	cmp	r5, r3
 8006bda:	461a      	mov	r2, r3
 8006bdc:	d30a      	bcc.n	8006bf4 <quorem+0x108>
 8006bde:	613c      	str	r4, [r7, #16]
 8006be0:	4630      	mov	r0, r6
 8006be2:	b003      	add	sp, #12
 8006be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be8:	6812      	ldr	r2, [r2, #0]
 8006bea:	3b04      	subs	r3, #4
 8006bec:	2a00      	cmp	r2, #0
 8006bee:	d1cb      	bne.n	8006b88 <quorem+0x9c>
 8006bf0:	3c01      	subs	r4, #1
 8006bf2:	e7c6      	b.n	8006b82 <quorem+0x96>
 8006bf4:	6812      	ldr	r2, [r2, #0]
 8006bf6:	3b04      	subs	r3, #4
 8006bf8:	2a00      	cmp	r2, #0
 8006bfa:	d1f0      	bne.n	8006bde <quorem+0xf2>
 8006bfc:	3c01      	subs	r4, #1
 8006bfe:	e7eb      	b.n	8006bd8 <quorem+0xec>
 8006c00:	2000      	movs	r0, #0
 8006c02:	e7ee      	b.n	8006be2 <quorem+0xf6>
 8006c04:	0000      	movs	r0, r0
	...

08006c08 <_dtoa_r>:
 8006c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c0c:	4616      	mov	r6, r2
 8006c0e:	461f      	mov	r7, r3
 8006c10:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006c12:	b099      	sub	sp, #100	; 0x64
 8006c14:	4605      	mov	r5, r0
 8006c16:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006c1a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006c1e:	b974      	cbnz	r4, 8006c3e <_dtoa_r+0x36>
 8006c20:	2010      	movs	r0, #16
 8006c22:	f000 fde3 	bl	80077ec <malloc>
 8006c26:	4602      	mov	r2, r0
 8006c28:	6268      	str	r0, [r5, #36]	; 0x24
 8006c2a:	b920      	cbnz	r0, 8006c36 <_dtoa_r+0x2e>
 8006c2c:	21ea      	movs	r1, #234	; 0xea
 8006c2e:	4ba8      	ldr	r3, [pc, #672]	; (8006ed0 <_dtoa_r+0x2c8>)
 8006c30:	48a8      	ldr	r0, [pc, #672]	; (8006ed4 <_dtoa_r+0x2cc>)
 8006c32:	f001 fbdd 	bl	80083f0 <__assert_func>
 8006c36:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c3a:	6004      	str	r4, [r0, #0]
 8006c3c:	60c4      	str	r4, [r0, #12]
 8006c3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006c40:	6819      	ldr	r1, [r3, #0]
 8006c42:	b151      	cbz	r1, 8006c5a <_dtoa_r+0x52>
 8006c44:	685a      	ldr	r2, [r3, #4]
 8006c46:	2301      	movs	r3, #1
 8006c48:	4093      	lsls	r3, r2
 8006c4a:	604a      	str	r2, [r1, #4]
 8006c4c:	608b      	str	r3, [r1, #8]
 8006c4e:	4628      	mov	r0, r5
 8006c50:	f000 fe30 	bl	80078b4 <_Bfree>
 8006c54:	2200      	movs	r2, #0
 8006c56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	1e3b      	subs	r3, r7, #0
 8006c5c:	bfaf      	iteee	ge
 8006c5e:	2300      	movge	r3, #0
 8006c60:	2201      	movlt	r2, #1
 8006c62:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006c66:	9305      	strlt	r3, [sp, #20]
 8006c68:	bfa8      	it	ge
 8006c6a:	f8c8 3000 	strge.w	r3, [r8]
 8006c6e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006c72:	4b99      	ldr	r3, [pc, #612]	; (8006ed8 <_dtoa_r+0x2d0>)
 8006c74:	bfb8      	it	lt
 8006c76:	f8c8 2000 	strlt.w	r2, [r8]
 8006c7a:	ea33 0309 	bics.w	r3, r3, r9
 8006c7e:	d119      	bne.n	8006cb4 <_dtoa_r+0xac>
 8006c80:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c84:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006c86:	6013      	str	r3, [r2, #0]
 8006c88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c8c:	4333      	orrs	r3, r6
 8006c8e:	f000 857f 	beq.w	8007790 <_dtoa_r+0xb88>
 8006c92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c94:	b953      	cbnz	r3, 8006cac <_dtoa_r+0xa4>
 8006c96:	4b91      	ldr	r3, [pc, #580]	; (8006edc <_dtoa_r+0x2d4>)
 8006c98:	e022      	b.n	8006ce0 <_dtoa_r+0xd8>
 8006c9a:	4b91      	ldr	r3, [pc, #580]	; (8006ee0 <_dtoa_r+0x2d8>)
 8006c9c:	9303      	str	r3, [sp, #12]
 8006c9e:	3308      	adds	r3, #8
 8006ca0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006ca2:	6013      	str	r3, [r2, #0]
 8006ca4:	9803      	ldr	r0, [sp, #12]
 8006ca6:	b019      	add	sp, #100	; 0x64
 8006ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cac:	4b8b      	ldr	r3, [pc, #556]	; (8006edc <_dtoa_r+0x2d4>)
 8006cae:	9303      	str	r3, [sp, #12]
 8006cb0:	3303      	adds	r3, #3
 8006cb2:	e7f5      	b.n	8006ca0 <_dtoa_r+0x98>
 8006cb4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006cb8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006cbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	f7f9 fe70 	bl	80009a8 <__aeabi_dcmpeq>
 8006cc8:	4680      	mov	r8, r0
 8006cca:	b158      	cbz	r0, 8006ce4 <_dtoa_r+0xdc>
 8006ccc:	2301      	movs	r3, #1
 8006cce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006cd0:	6013      	str	r3, [r2, #0]
 8006cd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f000 8558 	beq.w	800778a <_dtoa_r+0xb82>
 8006cda:	4882      	ldr	r0, [pc, #520]	; (8006ee4 <_dtoa_r+0x2dc>)
 8006cdc:	6018      	str	r0, [r3, #0]
 8006cde:	1e43      	subs	r3, r0, #1
 8006ce0:	9303      	str	r3, [sp, #12]
 8006ce2:	e7df      	b.n	8006ca4 <_dtoa_r+0x9c>
 8006ce4:	ab16      	add	r3, sp, #88	; 0x58
 8006ce6:	9301      	str	r3, [sp, #4]
 8006ce8:	ab17      	add	r3, sp, #92	; 0x5c
 8006cea:	9300      	str	r3, [sp, #0]
 8006cec:	4628      	mov	r0, r5
 8006cee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006cf2:	f001 f8c5 	bl	8007e80 <__d2b>
 8006cf6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006cfa:	4683      	mov	fp, r0
 8006cfc:	2c00      	cmp	r4, #0
 8006cfe:	d07f      	beq.n	8006e00 <_dtoa_r+0x1f8>
 8006d00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d06:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006d0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d0e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006d12:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006d16:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	4b72      	ldr	r3, [pc, #456]	; (8006ee8 <_dtoa_r+0x2e0>)
 8006d1e:	f7f9 fa23 	bl	8000168 <__aeabi_dsub>
 8006d22:	a365      	add	r3, pc, #404	; (adr r3, 8006eb8 <_dtoa_r+0x2b0>)
 8006d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d28:	f7f9 fbd6 	bl	80004d8 <__aeabi_dmul>
 8006d2c:	a364      	add	r3, pc, #400	; (adr r3, 8006ec0 <_dtoa_r+0x2b8>)
 8006d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d32:	f7f9 fa1b 	bl	800016c <__adddf3>
 8006d36:	4606      	mov	r6, r0
 8006d38:	4620      	mov	r0, r4
 8006d3a:	460f      	mov	r7, r1
 8006d3c:	f7f9 fb62 	bl	8000404 <__aeabi_i2d>
 8006d40:	a361      	add	r3, pc, #388	; (adr r3, 8006ec8 <_dtoa_r+0x2c0>)
 8006d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d46:	f7f9 fbc7 	bl	80004d8 <__aeabi_dmul>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	4630      	mov	r0, r6
 8006d50:	4639      	mov	r1, r7
 8006d52:	f7f9 fa0b 	bl	800016c <__adddf3>
 8006d56:	4606      	mov	r6, r0
 8006d58:	460f      	mov	r7, r1
 8006d5a:	f7f9 fe6d 	bl	8000a38 <__aeabi_d2iz>
 8006d5e:	2200      	movs	r2, #0
 8006d60:	4682      	mov	sl, r0
 8006d62:	2300      	movs	r3, #0
 8006d64:	4630      	mov	r0, r6
 8006d66:	4639      	mov	r1, r7
 8006d68:	f7f9 fe28 	bl	80009bc <__aeabi_dcmplt>
 8006d6c:	b148      	cbz	r0, 8006d82 <_dtoa_r+0x17a>
 8006d6e:	4650      	mov	r0, sl
 8006d70:	f7f9 fb48 	bl	8000404 <__aeabi_i2d>
 8006d74:	4632      	mov	r2, r6
 8006d76:	463b      	mov	r3, r7
 8006d78:	f7f9 fe16 	bl	80009a8 <__aeabi_dcmpeq>
 8006d7c:	b908      	cbnz	r0, 8006d82 <_dtoa_r+0x17a>
 8006d7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d82:	f1ba 0f16 	cmp.w	sl, #22
 8006d86:	d858      	bhi.n	8006e3a <_dtoa_r+0x232>
 8006d88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d8c:	4b57      	ldr	r3, [pc, #348]	; (8006eec <_dtoa_r+0x2e4>)
 8006d8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d96:	f7f9 fe11 	bl	80009bc <__aeabi_dcmplt>
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	d04f      	beq.n	8006e3e <_dtoa_r+0x236>
 8006d9e:	2300      	movs	r3, #0
 8006da0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006da4:	930f      	str	r3, [sp, #60]	; 0x3c
 8006da6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006da8:	1b1c      	subs	r4, r3, r4
 8006daa:	1e63      	subs	r3, r4, #1
 8006dac:	9309      	str	r3, [sp, #36]	; 0x24
 8006dae:	bf49      	itett	mi
 8006db0:	f1c4 0301 	rsbmi	r3, r4, #1
 8006db4:	2300      	movpl	r3, #0
 8006db6:	9306      	strmi	r3, [sp, #24]
 8006db8:	2300      	movmi	r3, #0
 8006dba:	bf54      	ite	pl
 8006dbc:	9306      	strpl	r3, [sp, #24]
 8006dbe:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006dc0:	f1ba 0f00 	cmp.w	sl, #0
 8006dc4:	db3d      	blt.n	8006e42 <_dtoa_r+0x23a>
 8006dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dc8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006dcc:	4453      	add	r3, sl
 8006dce:	9309      	str	r3, [sp, #36]	; 0x24
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	930a      	str	r3, [sp, #40]	; 0x28
 8006dd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006dd6:	2b09      	cmp	r3, #9
 8006dd8:	f200 808c 	bhi.w	8006ef4 <_dtoa_r+0x2ec>
 8006ddc:	2b05      	cmp	r3, #5
 8006dde:	bfc4      	itt	gt
 8006de0:	3b04      	subgt	r3, #4
 8006de2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006de4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006de6:	bfc8      	it	gt
 8006de8:	2400      	movgt	r4, #0
 8006dea:	f1a3 0302 	sub.w	r3, r3, #2
 8006dee:	bfd8      	it	le
 8006df0:	2401      	movle	r4, #1
 8006df2:	2b03      	cmp	r3, #3
 8006df4:	f200 808a 	bhi.w	8006f0c <_dtoa_r+0x304>
 8006df8:	e8df f003 	tbb	[pc, r3]
 8006dfc:	5b4d4f2d 	.word	0x5b4d4f2d
 8006e00:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006e04:	441c      	add	r4, r3
 8006e06:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006e0a:	2b20      	cmp	r3, #32
 8006e0c:	bfc3      	ittte	gt
 8006e0e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006e12:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006e16:	fa09 f303 	lslgt.w	r3, r9, r3
 8006e1a:	f1c3 0320 	rsble	r3, r3, #32
 8006e1e:	bfc6      	itte	gt
 8006e20:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006e24:	4318      	orrgt	r0, r3
 8006e26:	fa06 f003 	lslle.w	r0, r6, r3
 8006e2a:	f7f9 fadb 	bl	80003e4 <__aeabi_ui2d>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006e34:	3c01      	subs	r4, #1
 8006e36:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e38:	e76f      	b.n	8006d1a <_dtoa_r+0x112>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e7b2      	b.n	8006da4 <_dtoa_r+0x19c>
 8006e3e:	900f      	str	r0, [sp, #60]	; 0x3c
 8006e40:	e7b1      	b.n	8006da6 <_dtoa_r+0x19e>
 8006e42:	9b06      	ldr	r3, [sp, #24]
 8006e44:	eba3 030a 	sub.w	r3, r3, sl
 8006e48:	9306      	str	r3, [sp, #24]
 8006e4a:	f1ca 0300 	rsb	r3, sl, #0
 8006e4e:	930a      	str	r3, [sp, #40]	; 0x28
 8006e50:	2300      	movs	r3, #0
 8006e52:	930e      	str	r3, [sp, #56]	; 0x38
 8006e54:	e7be      	b.n	8006dd4 <_dtoa_r+0x1cc>
 8006e56:	2300      	movs	r3, #0
 8006e58:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	dc58      	bgt.n	8006f12 <_dtoa_r+0x30a>
 8006e60:	f04f 0901 	mov.w	r9, #1
 8006e64:	464b      	mov	r3, r9
 8006e66:	f8cd 9020 	str.w	r9, [sp, #32]
 8006e6a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006e6e:	2200      	movs	r2, #0
 8006e70:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006e72:	6042      	str	r2, [r0, #4]
 8006e74:	2204      	movs	r2, #4
 8006e76:	f102 0614 	add.w	r6, r2, #20
 8006e7a:	429e      	cmp	r6, r3
 8006e7c:	6841      	ldr	r1, [r0, #4]
 8006e7e:	d94e      	bls.n	8006f1e <_dtoa_r+0x316>
 8006e80:	4628      	mov	r0, r5
 8006e82:	f000 fcd7 	bl	8007834 <_Balloc>
 8006e86:	9003      	str	r0, [sp, #12]
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	d14c      	bne.n	8006f26 <_dtoa_r+0x31e>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006e92:	4b17      	ldr	r3, [pc, #92]	; (8006ef0 <_dtoa_r+0x2e8>)
 8006e94:	e6cc      	b.n	8006c30 <_dtoa_r+0x28>
 8006e96:	2301      	movs	r3, #1
 8006e98:	e7de      	b.n	8006e58 <_dtoa_r+0x250>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e9e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ea0:	eb0a 0903 	add.w	r9, sl, r3
 8006ea4:	f109 0301 	add.w	r3, r9, #1
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	9308      	str	r3, [sp, #32]
 8006eac:	bfb8      	it	lt
 8006eae:	2301      	movlt	r3, #1
 8006eb0:	e7dd      	b.n	8006e6e <_dtoa_r+0x266>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e7f2      	b.n	8006e9c <_dtoa_r+0x294>
 8006eb6:	bf00      	nop
 8006eb8:	636f4361 	.word	0x636f4361
 8006ebc:	3fd287a7 	.word	0x3fd287a7
 8006ec0:	8b60c8b3 	.word	0x8b60c8b3
 8006ec4:	3fc68a28 	.word	0x3fc68a28
 8006ec8:	509f79fb 	.word	0x509f79fb
 8006ecc:	3fd34413 	.word	0x3fd34413
 8006ed0:	08009186 	.word	0x08009186
 8006ed4:	0800919d 	.word	0x0800919d
 8006ed8:	7ff00000 	.word	0x7ff00000
 8006edc:	08009182 	.word	0x08009182
 8006ee0:	08009179 	.word	0x08009179
 8006ee4:	08009055 	.word	0x08009055
 8006ee8:	3ff80000 	.word	0x3ff80000
 8006eec:	08009290 	.word	0x08009290
 8006ef0:	080091f8 	.word	0x080091f8
 8006ef4:	2401      	movs	r4, #1
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	940b      	str	r4, [sp, #44]	; 0x2c
 8006efa:	9322      	str	r3, [sp, #136]	; 0x88
 8006efc:	f04f 39ff 	mov.w	r9, #4294967295
 8006f00:	2200      	movs	r2, #0
 8006f02:	2312      	movs	r3, #18
 8006f04:	f8cd 9020 	str.w	r9, [sp, #32]
 8006f08:	9223      	str	r2, [sp, #140]	; 0x8c
 8006f0a:	e7b0      	b.n	8006e6e <_dtoa_r+0x266>
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f10:	e7f4      	b.n	8006efc <_dtoa_r+0x2f4>
 8006f12:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006f16:	464b      	mov	r3, r9
 8006f18:	f8cd 9020 	str.w	r9, [sp, #32]
 8006f1c:	e7a7      	b.n	8006e6e <_dtoa_r+0x266>
 8006f1e:	3101      	adds	r1, #1
 8006f20:	6041      	str	r1, [r0, #4]
 8006f22:	0052      	lsls	r2, r2, #1
 8006f24:	e7a7      	b.n	8006e76 <_dtoa_r+0x26e>
 8006f26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f28:	9a03      	ldr	r2, [sp, #12]
 8006f2a:	601a      	str	r2, [r3, #0]
 8006f2c:	9b08      	ldr	r3, [sp, #32]
 8006f2e:	2b0e      	cmp	r3, #14
 8006f30:	f200 80a8 	bhi.w	8007084 <_dtoa_r+0x47c>
 8006f34:	2c00      	cmp	r4, #0
 8006f36:	f000 80a5 	beq.w	8007084 <_dtoa_r+0x47c>
 8006f3a:	f1ba 0f00 	cmp.w	sl, #0
 8006f3e:	dd34      	ble.n	8006faa <_dtoa_r+0x3a2>
 8006f40:	4a9a      	ldr	r2, [pc, #616]	; (80071ac <_dtoa_r+0x5a4>)
 8006f42:	f00a 030f 	and.w	r3, sl, #15
 8006f46:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006f4a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006f4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f52:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006f56:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006f5a:	d016      	beq.n	8006f8a <_dtoa_r+0x382>
 8006f5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f60:	4b93      	ldr	r3, [pc, #588]	; (80071b0 <_dtoa_r+0x5a8>)
 8006f62:	2703      	movs	r7, #3
 8006f64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f68:	f7f9 fbe0 	bl	800072c <__aeabi_ddiv>
 8006f6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f70:	f004 040f 	and.w	r4, r4, #15
 8006f74:	4e8e      	ldr	r6, [pc, #568]	; (80071b0 <_dtoa_r+0x5a8>)
 8006f76:	b954      	cbnz	r4, 8006f8e <_dtoa_r+0x386>
 8006f78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006f7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f80:	f7f9 fbd4 	bl	800072c <__aeabi_ddiv>
 8006f84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f88:	e029      	b.n	8006fde <_dtoa_r+0x3d6>
 8006f8a:	2702      	movs	r7, #2
 8006f8c:	e7f2      	b.n	8006f74 <_dtoa_r+0x36c>
 8006f8e:	07e1      	lsls	r1, r4, #31
 8006f90:	d508      	bpl.n	8006fa4 <_dtoa_r+0x39c>
 8006f92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f96:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f9a:	f7f9 fa9d 	bl	80004d8 <__aeabi_dmul>
 8006f9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006fa2:	3701      	adds	r7, #1
 8006fa4:	1064      	asrs	r4, r4, #1
 8006fa6:	3608      	adds	r6, #8
 8006fa8:	e7e5      	b.n	8006f76 <_dtoa_r+0x36e>
 8006faa:	f000 80a5 	beq.w	80070f8 <_dtoa_r+0x4f0>
 8006fae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006fb2:	f1ca 0400 	rsb	r4, sl, #0
 8006fb6:	4b7d      	ldr	r3, [pc, #500]	; (80071ac <_dtoa_r+0x5a4>)
 8006fb8:	f004 020f 	and.w	r2, r4, #15
 8006fbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc4:	f7f9 fa88 	bl	80004d8 <__aeabi_dmul>
 8006fc8:	2702      	movs	r7, #2
 8006fca:	2300      	movs	r3, #0
 8006fcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fd0:	4e77      	ldr	r6, [pc, #476]	; (80071b0 <_dtoa_r+0x5a8>)
 8006fd2:	1124      	asrs	r4, r4, #4
 8006fd4:	2c00      	cmp	r4, #0
 8006fd6:	f040 8084 	bne.w	80070e2 <_dtoa_r+0x4da>
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1d2      	bne.n	8006f84 <_dtoa_r+0x37c>
 8006fde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 808b 	beq.w	80070fc <_dtoa_r+0x4f4>
 8006fe6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006fea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006fee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	4b6f      	ldr	r3, [pc, #444]	; (80071b4 <_dtoa_r+0x5ac>)
 8006ff6:	f7f9 fce1 	bl	80009bc <__aeabi_dcmplt>
 8006ffa:	2800      	cmp	r0, #0
 8006ffc:	d07e      	beq.n	80070fc <_dtoa_r+0x4f4>
 8006ffe:	9b08      	ldr	r3, [sp, #32]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d07b      	beq.n	80070fc <_dtoa_r+0x4f4>
 8007004:	f1b9 0f00 	cmp.w	r9, #0
 8007008:	dd38      	ble.n	800707c <_dtoa_r+0x474>
 800700a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800700e:	2200      	movs	r2, #0
 8007010:	4b69      	ldr	r3, [pc, #420]	; (80071b8 <_dtoa_r+0x5b0>)
 8007012:	f7f9 fa61 	bl	80004d8 <__aeabi_dmul>
 8007016:	464c      	mov	r4, r9
 8007018:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800701c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007020:	3701      	adds	r7, #1
 8007022:	4638      	mov	r0, r7
 8007024:	f7f9 f9ee 	bl	8000404 <__aeabi_i2d>
 8007028:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800702c:	f7f9 fa54 	bl	80004d8 <__aeabi_dmul>
 8007030:	2200      	movs	r2, #0
 8007032:	4b62      	ldr	r3, [pc, #392]	; (80071bc <_dtoa_r+0x5b4>)
 8007034:	f7f9 f89a 	bl	800016c <__adddf3>
 8007038:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800703c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007040:	9611      	str	r6, [sp, #68]	; 0x44
 8007042:	2c00      	cmp	r4, #0
 8007044:	d15d      	bne.n	8007102 <_dtoa_r+0x4fa>
 8007046:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800704a:	2200      	movs	r2, #0
 800704c:	4b5c      	ldr	r3, [pc, #368]	; (80071c0 <_dtoa_r+0x5b8>)
 800704e:	f7f9 f88b 	bl	8000168 <__aeabi_dsub>
 8007052:	4602      	mov	r2, r0
 8007054:	460b      	mov	r3, r1
 8007056:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800705a:	4633      	mov	r3, r6
 800705c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800705e:	f7f9 fccb 	bl	80009f8 <__aeabi_dcmpgt>
 8007062:	2800      	cmp	r0, #0
 8007064:	f040 829c 	bne.w	80075a0 <_dtoa_r+0x998>
 8007068:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800706c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800706e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007072:	f7f9 fca3 	bl	80009bc <__aeabi_dcmplt>
 8007076:	2800      	cmp	r0, #0
 8007078:	f040 8290 	bne.w	800759c <_dtoa_r+0x994>
 800707c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007080:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007084:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007086:	2b00      	cmp	r3, #0
 8007088:	f2c0 8152 	blt.w	8007330 <_dtoa_r+0x728>
 800708c:	f1ba 0f0e 	cmp.w	sl, #14
 8007090:	f300 814e 	bgt.w	8007330 <_dtoa_r+0x728>
 8007094:	4b45      	ldr	r3, [pc, #276]	; (80071ac <_dtoa_r+0x5a4>)
 8007096:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800709a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800709e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80070a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f280 80db 	bge.w	8007260 <_dtoa_r+0x658>
 80070aa:	9b08      	ldr	r3, [sp, #32]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f300 80d7 	bgt.w	8007260 <_dtoa_r+0x658>
 80070b2:	f040 8272 	bne.w	800759a <_dtoa_r+0x992>
 80070b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070ba:	2200      	movs	r2, #0
 80070bc:	4b40      	ldr	r3, [pc, #256]	; (80071c0 <_dtoa_r+0x5b8>)
 80070be:	f7f9 fa0b 	bl	80004d8 <__aeabi_dmul>
 80070c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070c6:	f7f9 fc8d 	bl	80009e4 <__aeabi_dcmpge>
 80070ca:	9c08      	ldr	r4, [sp, #32]
 80070cc:	4626      	mov	r6, r4
 80070ce:	2800      	cmp	r0, #0
 80070d0:	f040 8248 	bne.w	8007564 <_dtoa_r+0x95c>
 80070d4:	2331      	movs	r3, #49	; 0x31
 80070d6:	9f03      	ldr	r7, [sp, #12]
 80070d8:	f10a 0a01 	add.w	sl, sl, #1
 80070dc:	f807 3b01 	strb.w	r3, [r7], #1
 80070e0:	e244      	b.n	800756c <_dtoa_r+0x964>
 80070e2:	07e2      	lsls	r2, r4, #31
 80070e4:	d505      	bpl.n	80070f2 <_dtoa_r+0x4ea>
 80070e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80070ea:	f7f9 f9f5 	bl	80004d8 <__aeabi_dmul>
 80070ee:	2301      	movs	r3, #1
 80070f0:	3701      	adds	r7, #1
 80070f2:	1064      	asrs	r4, r4, #1
 80070f4:	3608      	adds	r6, #8
 80070f6:	e76d      	b.n	8006fd4 <_dtoa_r+0x3cc>
 80070f8:	2702      	movs	r7, #2
 80070fa:	e770      	b.n	8006fde <_dtoa_r+0x3d6>
 80070fc:	46d0      	mov	r8, sl
 80070fe:	9c08      	ldr	r4, [sp, #32]
 8007100:	e78f      	b.n	8007022 <_dtoa_r+0x41a>
 8007102:	9903      	ldr	r1, [sp, #12]
 8007104:	4b29      	ldr	r3, [pc, #164]	; (80071ac <_dtoa_r+0x5a4>)
 8007106:	4421      	add	r1, r4
 8007108:	9112      	str	r1, [sp, #72]	; 0x48
 800710a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800710c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007110:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007114:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007118:	2900      	cmp	r1, #0
 800711a:	d055      	beq.n	80071c8 <_dtoa_r+0x5c0>
 800711c:	2000      	movs	r0, #0
 800711e:	4929      	ldr	r1, [pc, #164]	; (80071c4 <_dtoa_r+0x5bc>)
 8007120:	f7f9 fb04 	bl	800072c <__aeabi_ddiv>
 8007124:	463b      	mov	r3, r7
 8007126:	4632      	mov	r2, r6
 8007128:	f7f9 f81e 	bl	8000168 <__aeabi_dsub>
 800712c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007130:	9f03      	ldr	r7, [sp, #12]
 8007132:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007136:	f7f9 fc7f 	bl	8000a38 <__aeabi_d2iz>
 800713a:	4604      	mov	r4, r0
 800713c:	f7f9 f962 	bl	8000404 <__aeabi_i2d>
 8007140:	4602      	mov	r2, r0
 8007142:	460b      	mov	r3, r1
 8007144:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007148:	f7f9 f80e 	bl	8000168 <__aeabi_dsub>
 800714c:	4602      	mov	r2, r0
 800714e:	460b      	mov	r3, r1
 8007150:	3430      	adds	r4, #48	; 0x30
 8007152:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007156:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800715a:	f807 4b01 	strb.w	r4, [r7], #1
 800715e:	f7f9 fc2d 	bl	80009bc <__aeabi_dcmplt>
 8007162:	2800      	cmp	r0, #0
 8007164:	d174      	bne.n	8007250 <_dtoa_r+0x648>
 8007166:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800716a:	2000      	movs	r0, #0
 800716c:	4911      	ldr	r1, [pc, #68]	; (80071b4 <_dtoa_r+0x5ac>)
 800716e:	f7f8 fffb 	bl	8000168 <__aeabi_dsub>
 8007172:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007176:	f7f9 fc21 	bl	80009bc <__aeabi_dcmplt>
 800717a:	2800      	cmp	r0, #0
 800717c:	f040 80b7 	bne.w	80072ee <_dtoa_r+0x6e6>
 8007180:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007182:	429f      	cmp	r7, r3
 8007184:	f43f af7a 	beq.w	800707c <_dtoa_r+0x474>
 8007188:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800718c:	2200      	movs	r2, #0
 800718e:	4b0a      	ldr	r3, [pc, #40]	; (80071b8 <_dtoa_r+0x5b0>)
 8007190:	f7f9 f9a2 	bl	80004d8 <__aeabi_dmul>
 8007194:	2200      	movs	r2, #0
 8007196:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800719a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800719e:	4b06      	ldr	r3, [pc, #24]	; (80071b8 <_dtoa_r+0x5b0>)
 80071a0:	f7f9 f99a 	bl	80004d8 <__aeabi_dmul>
 80071a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071a8:	e7c3      	b.n	8007132 <_dtoa_r+0x52a>
 80071aa:	bf00      	nop
 80071ac:	08009290 	.word	0x08009290
 80071b0:	08009268 	.word	0x08009268
 80071b4:	3ff00000 	.word	0x3ff00000
 80071b8:	40240000 	.word	0x40240000
 80071bc:	401c0000 	.word	0x401c0000
 80071c0:	40140000 	.word	0x40140000
 80071c4:	3fe00000 	.word	0x3fe00000
 80071c8:	4630      	mov	r0, r6
 80071ca:	4639      	mov	r1, r7
 80071cc:	f7f9 f984 	bl	80004d8 <__aeabi_dmul>
 80071d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80071d6:	9c03      	ldr	r4, [sp, #12]
 80071d8:	9314      	str	r3, [sp, #80]	; 0x50
 80071da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071de:	f7f9 fc2b 	bl	8000a38 <__aeabi_d2iz>
 80071e2:	9015      	str	r0, [sp, #84]	; 0x54
 80071e4:	f7f9 f90e 	bl	8000404 <__aeabi_i2d>
 80071e8:	4602      	mov	r2, r0
 80071ea:	460b      	mov	r3, r1
 80071ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071f0:	f7f8 ffba 	bl	8000168 <__aeabi_dsub>
 80071f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071f6:	4606      	mov	r6, r0
 80071f8:	3330      	adds	r3, #48	; 0x30
 80071fa:	f804 3b01 	strb.w	r3, [r4], #1
 80071fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007200:	460f      	mov	r7, r1
 8007202:	429c      	cmp	r4, r3
 8007204:	f04f 0200 	mov.w	r2, #0
 8007208:	d124      	bne.n	8007254 <_dtoa_r+0x64c>
 800720a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800720e:	4bb0      	ldr	r3, [pc, #704]	; (80074d0 <_dtoa_r+0x8c8>)
 8007210:	f7f8 ffac 	bl	800016c <__adddf3>
 8007214:	4602      	mov	r2, r0
 8007216:	460b      	mov	r3, r1
 8007218:	4630      	mov	r0, r6
 800721a:	4639      	mov	r1, r7
 800721c:	f7f9 fbec 	bl	80009f8 <__aeabi_dcmpgt>
 8007220:	2800      	cmp	r0, #0
 8007222:	d163      	bne.n	80072ec <_dtoa_r+0x6e4>
 8007224:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007228:	2000      	movs	r0, #0
 800722a:	49a9      	ldr	r1, [pc, #676]	; (80074d0 <_dtoa_r+0x8c8>)
 800722c:	f7f8 ff9c 	bl	8000168 <__aeabi_dsub>
 8007230:	4602      	mov	r2, r0
 8007232:	460b      	mov	r3, r1
 8007234:	4630      	mov	r0, r6
 8007236:	4639      	mov	r1, r7
 8007238:	f7f9 fbc0 	bl	80009bc <__aeabi_dcmplt>
 800723c:	2800      	cmp	r0, #0
 800723e:	f43f af1d 	beq.w	800707c <_dtoa_r+0x474>
 8007242:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007244:	1e7b      	subs	r3, r7, #1
 8007246:	9314      	str	r3, [sp, #80]	; 0x50
 8007248:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800724c:	2b30      	cmp	r3, #48	; 0x30
 800724e:	d0f8      	beq.n	8007242 <_dtoa_r+0x63a>
 8007250:	46c2      	mov	sl, r8
 8007252:	e03b      	b.n	80072cc <_dtoa_r+0x6c4>
 8007254:	4b9f      	ldr	r3, [pc, #636]	; (80074d4 <_dtoa_r+0x8cc>)
 8007256:	f7f9 f93f 	bl	80004d8 <__aeabi_dmul>
 800725a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800725e:	e7bc      	b.n	80071da <_dtoa_r+0x5d2>
 8007260:	9f03      	ldr	r7, [sp, #12]
 8007262:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007266:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800726a:	4640      	mov	r0, r8
 800726c:	4649      	mov	r1, r9
 800726e:	f7f9 fa5d 	bl	800072c <__aeabi_ddiv>
 8007272:	f7f9 fbe1 	bl	8000a38 <__aeabi_d2iz>
 8007276:	4604      	mov	r4, r0
 8007278:	f7f9 f8c4 	bl	8000404 <__aeabi_i2d>
 800727c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007280:	f7f9 f92a 	bl	80004d8 <__aeabi_dmul>
 8007284:	4602      	mov	r2, r0
 8007286:	460b      	mov	r3, r1
 8007288:	4640      	mov	r0, r8
 800728a:	4649      	mov	r1, r9
 800728c:	f7f8 ff6c 	bl	8000168 <__aeabi_dsub>
 8007290:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007294:	f807 6b01 	strb.w	r6, [r7], #1
 8007298:	9e03      	ldr	r6, [sp, #12]
 800729a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800729e:	1bbe      	subs	r6, r7, r6
 80072a0:	45b4      	cmp	ip, r6
 80072a2:	4602      	mov	r2, r0
 80072a4:	460b      	mov	r3, r1
 80072a6:	d136      	bne.n	8007316 <_dtoa_r+0x70e>
 80072a8:	f7f8 ff60 	bl	800016c <__adddf3>
 80072ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072b0:	4680      	mov	r8, r0
 80072b2:	4689      	mov	r9, r1
 80072b4:	f7f9 fba0 	bl	80009f8 <__aeabi_dcmpgt>
 80072b8:	bb58      	cbnz	r0, 8007312 <_dtoa_r+0x70a>
 80072ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072be:	4640      	mov	r0, r8
 80072c0:	4649      	mov	r1, r9
 80072c2:	f7f9 fb71 	bl	80009a8 <__aeabi_dcmpeq>
 80072c6:	b108      	cbz	r0, 80072cc <_dtoa_r+0x6c4>
 80072c8:	07e1      	lsls	r1, r4, #31
 80072ca:	d422      	bmi.n	8007312 <_dtoa_r+0x70a>
 80072cc:	4628      	mov	r0, r5
 80072ce:	4659      	mov	r1, fp
 80072d0:	f000 faf0 	bl	80078b4 <_Bfree>
 80072d4:	2300      	movs	r3, #0
 80072d6:	703b      	strb	r3, [r7, #0]
 80072d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80072da:	f10a 0001 	add.w	r0, sl, #1
 80072de:	6018      	str	r0, [r3, #0]
 80072e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f43f acde 	beq.w	8006ca4 <_dtoa_r+0x9c>
 80072e8:	601f      	str	r7, [r3, #0]
 80072ea:	e4db      	b.n	8006ca4 <_dtoa_r+0x9c>
 80072ec:	4627      	mov	r7, r4
 80072ee:	463b      	mov	r3, r7
 80072f0:	461f      	mov	r7, r3
 80072f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072f6:	2a39      	cmp	r2, #57	; 0x39
 80072f8:	d107      	bne.n	800730a <_dtoa_r+0x702>
 80072fa:	9a03      	ldr	r2, [sp, #12]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d1f7      	bne.n	80072f0 <_dtoa_r+0x6e8>
 8007300:	2230      	movs	r2, #48	; 0x30
 8007302:	9903      	ldr	r1, [sp, #12]
 8007304:	f108 0801 	add.w	r8, r8, #1
 8007308:	700a      	strb	r2, [r1, #0]
 800730a:	781a      	ldrb	r2, [r3, #0]
 800730c:	3201      	adds	r2, #1
 800730e:	701a      	strb	r2, [r3, #0]
 8007310:	e79e      	b.n	8007250 <_dtoa_r+0x648>
 8007312:	46d0      	mov	r8, sl
 8007314:	e7eb      	b.n	80072ee <_dtoa_r+0x6e6>
 8007316:	2200      	movs	r2, #0
 8007318:	4b6e      	ldr	r3, [pc, #440]	; (80074d4 <_dtoa_r+0x8cc>)
 800731a:	f7f9 f8dd 	bl	80004d8 <__aeabi_dmul>
 800731e:	2200      	movs	r2, #0
 8007320:	2300      	movs	r3, #0
 8007322:	4680      	mov	r8, r0
 8007324:	4689      	mov	r9, r1
 8007326:	f7f9 fb3f 	bl	80009a8 <__aeabi_dcmpeq>
 800732a:	2800      	cmp	r0, #0
 800732c:	d09b      	beq.n	8007266 <_dtoa_r+0x65e>
 800732e:	e7cd      	b.n	80072cc <_dtoa_r+0x6c4>
 8007330:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007332:	2a00      	cmp	r2, #0
 8007334:	f000 80d0 	beq.w	80074d8 <_dtoa_r+0x8d0>
 8007338:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800733a:	2a01      	cmp	r2, #1
 800733c:	f300 80ae 	bgt.w	800749c <_dtoa_r+0x894>
 8007340:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007342:	2a00      	cmp	r2, #0
 8007344:	f000 80a6 	beq.w	8007494 <_dtoa_r+0x88c>
 8007348:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800734c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800734e:	9f06      	ldr	r7, [sp, #24]
 8007350:	9a06      	ldr	r2, [sp, #24]
 8007352:	2101      	movs	r1, #1
 8007354:	441a      	add	r2, r3
 8007356:	9206      	str	r2, [sp, #24]
 8007358:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800735a:	4628      	mov	r0, r5
 800735c:	441a      	add	r2, r3
 800735e:	9209      	str	r2, [sp, #36]	; 0x24
 8007360:	f000 fb5e 	bl	8007a20 <__i2b>
 8007364:	4606      	mov	r6, r0
 8007366:	2f00      	cmp	r7, #0
 8007368:	dd0c      	ble.n	8007384 <_dtoa_r+0x77c>
 800736a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800736c:	2b00      	cmp	r3, #0
 800736e:	dd09      	ble.n	8007384 <_dtoa_r+0x77c>
 8007370:	42bb      	cmp	r3, r7
 8007372:	bfa8      	it	ge
 8007374:	463b      	movge	r3, r7
 8007376:	9a06      	ldr	r2, [sp, #24]
 8007378:	1aff      	subs	r7, r7, r3
 800737a:	1ad2      	subs	r2, r2, r3
 800737c:	9206      	str	r2, [sp, #24]
 800737e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	9309      	str	r3, [sp, #36]	; 0x24
 8007384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007386:	b1f3      	cbz	r3, 80073c6 <_dtoa_r+0x7be>
 8007388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800738a:	2b00      	cmp	r3, #0
 800738c:	f000 80a8 	beq.w	80074e0 <_dtoa_r+0x8d8>
 8007390:	2c00      	cmp	r4, #0
 8007392:	dd10      	ble.n	80073b6 <_dtoa_r+0x7ae>
 8007394:	4631      	mov	r1, r6
 8007396:	4622      	mov	r2, r4
 8007398:	4628      	mov	r0, r5
 800739a:	f000 fbff 	bl	8007b9c <__pow5mult>
 800739e:	465a      	mov	r2, fp
 80073a0:	4601      	mov	r1, r0
 80073a2:	4606      	mov	r6, r0
 80073a4:	4628      	mov	r0, r5
 80073a6:	f000 fb51 	bl	8007a4c <__multiply>
 80073aa:	4680      	mov	r8, r0
 80073ac:	4659      	mov	r1, fp
 80073ae:	4628      	mov	r0, r5
 80073b0:	f000 fa80 	bl	80078b4 <_Bfree>
 80073b4:	46c3      	mov	fp, r8
 80073b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073b8:	1b1a      	subs	r2, r3, r4
 80073ba:	d004      	beq.n	80073c6 <_dtoa_r+0x7be>
 80073bc:	4659      	mov	r1, fp
 80073be:	4628      	mov	r0, r5
 80073c0:	f000 fbec 	bl	8007b9c <__pow5mult>
 80073c4:	4683      	mov	fp, r0
 80073c6:	2101      	movs	r1, #1
 80073c8:	4628      	mov	r0, r5
 80073ca:	f000 fb29 	bl	8007a20 <__i2b>
 80073ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073d0:	4604      	mov	r4, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	f340 8086 	ble.w	80074e4 <_dtoa_r+0x8dc>
 80073d8:	461a      	mov	r2, r3
 80073da:	4601      	mov	r1, r0
 80073dc:	4628      	mov	r0, r5
 80073de:	f000 fbdd 	bl	8007b9c <__pow5mult>
 80073e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073e4:	4604      	mov	r4, r0
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	dd7f      	ble.n	80074ea <_dtoa_r+0x8e2>
 80073ea:	f04f 0800 	mov.w	r8, #0
 80073ee:	6923      	ldr	r3, [r4, #16]
 80073f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80073f4:	6918      	ldr	r0, [r3, #16]
 80073f6:	f000 fac5 	bl	8007984 <__hi0bits>
 80073fa:	f1c0 0020 	rsb	r0, r0, #32
 80073fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007400:	4418      	add	r0, r3
 8007402:	f010 001f 	ands.w	r0, r0, #31
 8007406:	f000 8092 	beq.w	800752e <_dtoa_r+0x926>
 800740a:	f1c0 0320 	rsb	r3, r0, #32
 800740e:	2b04      	cmp	r3, #4
 8007410:	f340 808a 	ble.w	8007528 <_dtoa_r+0x920>
 8007414:	f1c0 001c 	rsb	r0, r0, #28
 8007418:	9b06      	ldr	r3, [sp, #24]
 800741a:	4407      	add	r7, r0
 800741c:	4403      	add	r3, r0
 800741e:	9306      	str	r3, [sp, #24]
 8007420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007422:	4403      	add	r3, r0
 8007424:	9309      	str	r3, [sp, #36]	; 0x24
 8007426:	9b06      	ldr	r3, [sp, #24]
 8007428:	2b00      	cmp	r3, #0
 800742a:	dd05      	ble.n	8007438 <_dtoa_r+0x830>
 800742c:	4659      	mov	r1, fp
 800742e:	461a      	mov	r2, r3
 8007430:	4628      	mov	r0, r5
 8007432:	f000 fc0d 	bl	8007c50 <__lshift>
 8007436:	4683      	mov	fp, r0
 8007438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800743a:	2b00      	cmp	r3, #0
 800743c:	dd05      	ble.n	800744a <_dtoa_r+0x842>
 800743e:	4621      	mov	r1, r4
 8007440:	461a      	mov	r2, r3
 8007442:	4628      	mov	r0, r5
 8007444:	f000 fc04 	bl	8007c50 <__lshift>
 8007448:	4604      	mov	r4, r0
 800744a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800744c:	2b00      	cmp	r3, #0
 800744e:	d070      	beq.n	8007532 <_dtoa_r+0x92a>
 8007450:	4621      	mov	r1, r4
 8007452:	4658      	mov	r0, fp
 8007454:	f000 fc6c 	bl	8007d30 <__mcmp>
 8007458:	2800      	cmp	r0, #0
 800745a:	da6a      	bge.n	8007532 <_dtoa_r+0x92a>
 800745c:	2300      	movs	r3, #0
 800745e:	4659      	mov	r1, fp
 8007460:	220a      	movs	r2, #10
 8007462:	4628      	mov	r0, r5
 8007464:	f000 fa48 	bl	80078f8 <__multadd>
 8007468:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800746a:	4683      	mov	fp, r0
 800746c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007470:	2b00      	cmp	r3, #0
 8007472:	f000 8194 	beq.w	800779e <_dtoa_r+0xb96>
 8007476:	4631      	mov	r1, r6
 8007478:	2300      	movs	r3, #0
 800747a:	220a      	movs	r2, #10
 800747c:	4628      	mov	r0, r5
 800747e:	f000 fa3b 	bl	80078f8 <__multadd>
 8007482:	f1b9 0f00 	cmp.w	r9, #0
 8007486:	4606      	mov	r6, r0
 8007488:	f300 8093 	bgt.w	80075b2 <_dtoa_r+0x9aa>
 800748c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800748e:	2b02      	cmp	r3, #2
 8007490:	dc57      	bgt.n	8007542 <_dtoa_r+0x93a>
 8007492:	e08e      	b.n	80075b2 <_dtoa_r+0x9aa>
 8007494:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007496:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800749a:	e757      	b.n	800734c <_dtoa_r+0x744>
 800749c:	9b08      	ldr	r3, [sp, #32]
 800749e:	1e5c      	subs	r4, r3, #1
 80074a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074a2:	42a3      	cmp	r3, r4
 80074a4:	bfb7      	itett	lt
 80074a6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80074a8:	1b1c      	subge	r4, r3, r4
 80074aa:	1ae2      	sublt	r2, r4, r3
 80074ac:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80074ae:	bfbe      	ittt	lt
 80074b0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80074b2:	189b      	addlt	r3, r3, r2
 80074b4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80074b6:	9b08      	ldr	r3, [sp, #32]
 80074b8:	bfb8      	it	lt
 80074ba:	2400      	movlt	r4, #0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	bfbb      	ittet	lt
 80074c0:	9b06      	ldrlt	r3, [sp, #24]
 80074c2:	9a08      	ldrlt	r2, [sp, #32]
 80074c4:	9f06      	ldrge	r7, [sp, #24]
 80074c6:	1a9f      	sublt	r7, r3, r2
 80074c8:	bfac      	ite	ge
 80074ca:	9b08      	ldrge	r3, [sp, #32]
 80074cc:	2300      	movlt	r3, #0
 80074ce:	e73f      	b.n	8007350 <_dtoa_r+0x748>
 80074d0:	3fe00000 	.word	0x3fe00000
 80074d4:	40240000 	.word	0x40240000
 80074d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80074da:	9f06      	ldr	r7, [sp, #24]
 80074dc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80074de:	e742      	b.n	8007366 <_dtoa_r+0x75e>
 80074e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074e2:	e76b      	b.n	80073bc <_dtoa_r+0x7b4>
 80074e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	dc19      	bgt.n	800751e <_dtoa_r+0x916>
 80074ea:	9b04      	ldr	r3, [sp, #16]
 80074ec:	b9bb      	cbnz	r3, 800751e <_dtoa_r+0x916>
 80074ee:	9b05      	ldr	r3, [sp, #20]
 80074f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074f4:	b99b      	cbnz	r3, 800751e <_dtoa_r+0x916>
 80074f6:	9b05      	ldr	r3, [sp, #20]
 80074f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074fc:	0d1b      	lsrs	r3, r3, #20
 80074fe:	051b      	lsls	r3, r3, #20
 8007500:	b183      	cbz	r3, 8007524 <_dtoa_r+0x91c>
 8007502:	f04f 0801 	mov.w	r8, #1
 8007506:	9b06      	ldr	r3, [sp, #24]
 8007508:	3301      	adds	r3, #1
 800750a:	9306      	str	r3, [sp, #24]
 800750c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800750e:	3301      	adds	r3, #1
 8007510:	9309      	str	r3, [sp, #36]	; 0x24
 8007512:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007514:	2b00      	cmp	r3, #0
 8007516:	f47f af6a 	bne.w	80073ee <_dtoa_r+0x7e6>
 800751a:	2001      	movs	r0, #1
 800751c:	e76f      	b.n	80073fe <_dtoa_r+0x7f6>
 800751e:	f04f 0800 	mov.w	r8, #0
 8007522:	e7f6      	b.n	8007512 <_dtoa_r+0x90a>
 8007524:	4698      	mov	r8, r3
 8007526:	e7f4      	b.n	8007512 <_dtoa_r+0x90a>
 8007528:	f43f af7d 	beq.w	8007426 <_dtoa_r+0x81e>
 800752c:	4618      	mov	r0, r3
 800752e:	301c      	adds	r0, #28
 8007530:	e772      	b.n	8007418 <_dtoa_r+0x810>
 8007532:	9b08      	ldr	r3, [sp, #32]
 8007534:	2b00      	cmp	r3, #0
 8007536:	dc36      	bgt.n	80075a6 <_dtoa_r+0x99e>
 8007538:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800753a:	2b02      	cmp	r3, #2
 800753c:	dd33      	ble.n	80075a6 <_dtoa_r+0x99e>
 800753e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007542:	f1b9 0f00 	cmp.w	r9, #0
 8007546:	d10d      	bne.n	8007564 <_dtoa_r+0x95c>
 8007548:	4621      	mov	r1, r4
 800754a:	464b      	mov	r3, r9
 800754c:	2205      	movs	r2, #5
 800754e:	4628      	mov	r0, r5
 8007550:	f000 f9d2 	bl	80078f8 <__multadd>
 8007554:	4601      	mov	r1, r0
 8007556:	4604      	mov	r4, r0
 8007558:	4658      	mov	r0, fp
 800755a:	f000 fbe9 	bl	8007d30 <__mcmp>
 800755e:	2800      	cmp	r0, #0
 8007560:	f73f adb8 	bgt.w	80070d4 <_dtoa_r+0x4cc>
 8007564:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007566:	9f03      	ldr	r7, [sp, #12]
 8007568:	ea6f 0a03 	mvn.w	sl, r3
 800756c:	f04f 0800 	mov.w	r8, #0
 8007570:	4621      	mov	r1, r4
 8007572:	4628      	mov	r0, r5
 8007574:	f000 f99e 	bl	80078b4 <_Bfree>
 8007578:	2e00      	cmp	r6, #0
 800757a:	f43f aea7 	beq.w	80072cc <_dtoa_r+0x6c4>
 800757e:	f1b8 0f00 	cmp.w	r8, #0
 8007582:	d005      	beq.n	8007590 <_dtoa_r+0x988>
 8007584:	45b0      	cmp	r8, r6
 8007586:	d003      	beq.n	8007590 <_dtoa_r+0x988>
 8007588:	4641      	mov	r1, r8
 800758a:	4628      	mov	r0, r5
 800758c:	f000 f992 	bl	80078b4 <_Bfree>
 8007590:	4631      	mov	r1, r6
 8007592:	4628      	mov	r0, r5
 8007594:	f000 f98e 	bl	80078b4 <_Bfree>
 8007598:	e698      	b.n	80072cc <_dtoa_r+0x6c4>
 800759a:	2400      	movs	r4, #0
 800759c:	4626      	mov	r6, r4
 800759e:	e7e1      	b.n	8007564 <_dtoa_r+0x95c>
 80075a0:	46c2      	mov	sl, r8
 80075a2:	4626      	mov	r6, r4
 80075a4:	e596      	b.n	80070d4 <_dtoa_r+0x4cc>
 80075a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f000 80fd 	beq.w	80077ac <_dtoa_r+0xba4>
 80075b2:	2f00      	cmp	r7, #0
 80075b4:	dd05      	ble.n	80075c2 <_dtoa_r+0x9ba>
 80075b6:	4631      	mov	r1, r6
 80075b8:	463a      	mov	r2, r7
 80075ba:	4628      	mov	r0, r5
 80075bc:	f000 fb48 	bl	8007c50 <__lshift>
 80075c0:	4606      	mov	r6, r0
 80075c2:	f1b8 0f00 	cmp.w	r8, #0
 80075c6:	d05c      	beq.n	8007682 <_dtoa_r+0xa7a>
 80075c8:	4628      	mov	r0, r5
 80075ca:	6871      	ldr	r1, [r6, #4]
 80075cc:	f000 f932 	bl	8007834 <_Balloc>
 80075d0:	4607      	mov	r7, r0
 80075d2:	b928      	cbnz	r0, 80075e0 <_dtoa_r+0x9d8>
 80075d4:	4602      	mov	r2, r0
 80075d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80075da:	4b7f      	ldr	r3, [pc, #508]	; (80077d8 <_dtoa_r+0xbd0>)
 80075dc:	f7ff bb28 	b.w	8006c30 <_dtoa_r+0x28>
 80075e0:	6932      	ldr	r2, [r6, #16]
 80075e2:	f106 010c 	add.w	r1, r6, #12
 80075e6:	3202      	adds	r2, #2
 80075e8:	0092      	lsls	r2, r2, #2
 80075ea:	300c      	adds	r0, #12
 80075ec:	f000 f914 	bl	8007818 <memcpy>
 80075f0:	2201      	movs	r2, #1
 80075f2:	4639      	mov	r1, r7
 80075f4:	4628      	mov	r0, r5
 80075f6:	f000 fb2b 	bl	8007c50 <__lshift>
 80075fa:	46b0      	mov	r8, r6
 80075fc:	4606      	mov	r6, r0
 80075fe:	9b03      	ldr	r3, [sp, #12]
 8007600:	3301      	adds	r3, #1
 8007602:	9308      	str	r3, [sp, #32]
 8007604:	9b03      	ldr	r3, [sp, #12]
 8007606:	444b      	add	r3, r9
 8007608:	930a      	str	r3, [sp, #40]	; 0x28
 800760a:	9b04      	ldr	r3, [sp, #16]
 800760c:	f003 0301 	and.w	r3, r3, #1
 8007610:	9309      	str	r3, [sp, #36]	; 0x24
 8007612:	9b08      	ldr	r3, [sp, #32]
 8007614:	4621      	mov	r1, r4
 8007616:	3b01      	subs	r3, #1
 8007618:	4658      	mov	r0, fp
 800761a:	9304      	str	r3, [sp, #16]
 800761c:	f7ff fa66 	bl	8006aec <quorem>
 8007620:	4603      	mov	r3, r0
 8007622:	4641      	mov	r1, r8
 8007624:	3330      	adds	r3, #48	; 0x30
 8007626:	9006      	str	r0, [sp, #24]
 8007628:	4658      	mov	r0, fp
 800762a:	930b      	str	r3, [sp, #44]	; 0x2c
 800762c:	f000 fb80 	bl	8007d30 <__mcmp>
 8007630:	4632      	mov	r2, r6
 8007632:	4681      	mov	r9, r0
 8007634:	4621      	mov	r1, r4
 8007636:	4628      	mov	r0, r5
 8007638:	f000 fb96 	bl	8007d68 <__mdiff>
 800763c:	68c2      	ldr	r2, [r0, #12]
 800763e:	4607      	mov	r7, r0
 8007640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007642:	bb02      	cbnz	r2, 8007686 <_dtoa_r+0xa7e>
 8007644:	4601      	mov	r1, r0
 8007646:	4658      	mov	r0, fp
 8007648:	f000 fb72 	bl	8007d30 <__mcmp>
 800764c:	4602      	mov	r2, r0
 800764e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007650:	4639      	mov	r1, r7
 8007652:	4628      	mov	r0, r5
 8007654:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007658:	f000 f92c 	bl	80078b4 <_Bfree>
 800765c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800765e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007660:	9f08      	ldr	r7, [sp, #32]
 8007662:	ea43 0102 	orr.w	r1, r3, r2
 8007666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007668:	430b      	orrs	r3, r1
 800766a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800766c:	d10d      	bne.n	800768a <_dtoa_r+0xa82>
 800766e:	2b39      	cmp	r3, #57	; 0x39
 8007670:	d029      	beq.n	80076c6 <_dtoa_r+0xabe>
 8007672:	f1b9 0f00 	cmp.w	r9, #0
 8007676:	dd01      	ble.n	800767c <_dtoa_r+0xa74>
 8007678:	9b06      	ldr	r3, [sp, #24]
 800767a:	3331      	adds	r3, #49	; 0x31
 800767c:	9a04      	ldr	r2, [sp, #16]
 800767e:	7013      	strb	r3, [r2, #0]
 8007680:	e776      	b.n	8007570 <_dtoa_r+0x968>
 8007682:	4630      	mov	r0, r6
 8007684:	e7b9      	b.n	80075fa <_dtoa_r+0x9f2>
 8007686:	2201      	movs	r2, #1
 8007688:	e7e2      	b.n	8007650 <_dtoa_r+0xa48>
 800768a:	f1b9 0f00 	cmp.w	r9, #0
 800768e:	db06      	blt.n	800769e <_dtoa_r+0xa96>
 8007690:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007692:	ea41 0909 	orr.w	r9, r1, r9
 8007696:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007698:	ea59 0101 	orrs.w	r1, r9, r1
 800769c:	d120      	bne.n	80076e0 <_dtoa_r+0xad8>
 800769e:	2a00      	cmp	r2, #0
 80076a0:	ddec      	ble.n	800767c <_dtoa_r+0xa74>
 80076a2:	4659      	mov	r1, fp
 80076a4:	2201      	movs	r2, #1
 80076a6:	4628      	mov	r0, r5
 80076a8:	9308      	str	r3, [sp, #32]
 80076aa:	f000 fad1 	bl	8007c50 <__lshift>
 80076ae:	4621      	mov	r1, r4
 80076b0:	4683      	mov	fp, r0
 80076b2:	f000 fb3d 	bl	8007d30 <__mcmp>
 80076b6:	2800      	cmp	r0, #0
 80076b8:	9b08      	ldr	r3, [sp, #32]
 80076ba:	dc02      	bgt.n	80076c2 <_dtoa_r+0xaba>
 80076bc:	d1de      	bne.n	800767c <_dtoa_r+0xa74>
 80076be:	07da      	lsls	r2, r3, #31
 80076c0:	d5dc      	bpl.n	800767c <_dtoa_r+0xa74>
 80076c2:	2b39      	cmp	r3, #57	; 0x39
 80076c4:	d1d8      	bne.n	8007678 <_dtoa_r+0xa70>
 80076c6:	2339      	movs	r3, #57	; 0x39
 80076c8:	9a04      	ldr	r2, [sp, #16]
 80076ca:	7013      	strb	r3, [r2, #0]
 80076cc:	463b      	mov	r3, r7
 80076ce:	461f      	mov	r7, r3
 80076d0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80076d4:	3b01      	subs	r3, #1
 80076d6:	2a39      	cmp	r2, #57	; 0x39
 80076d8:	d050      	beq.n	800777c <_dtoa_r+0xb74>
 80076da:	3201      	adds	r2, #1
 80076dc:	701a      	strb	r2, [r3, #0]
 80076de:	e747      	b.n	8007570 <_dtoa_r+0x968>
 80076e0:	2a00      	cmp	r2, #0
 80076e2:	dd03      	ble.n	80076ec <_dtoa_r+0xae4>
 80076e4:	2b39      	cmp	r3, #57	; 0x39
 80076e6:	d0ee      	beq.n	80076c6 <_dtoa_r+0xabe>
 80076e8:	3301      	adds	r3, #1
 80076ea:	e7c7      	b.n	800767c <_dtoa_r+0xa74>
 80076ec:	9a08      	ldr	r2, [sp, #32]
 80076ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80076f0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80076f4:	428a      	cmp	r2, r1
 80076f6:	d02a      	beq.n	800774e <_dtoa_r+0xb46>
 80076f8:	4659      	mov	r1, fp
 80076fa:	2300      	movs	r3, #0
 80076fc:	220a      	movs	r2, #10
 80076fe:	4628      	mov	r0, r5
 8007700:	f000 f8fa 	bl	80078f8 <__multadd>
 8007704:	45b0      	cmp	r8, r6
 8007706:	4683      	mov	fp, r0
 8007708:	f04f 0300 	mov.w	r3, #0
 800770c:	f04f 020a 	mov.w	r2, #10
 8007710:	4641      	mov	r1, r8
 8007712:	4628      	mov	r0, r5
 8007714:	d107      	bne.n	8007726 <_dtoa_r+0xb1e>
 8007716:	f000 f8ef 	bl	80078f8 <__multadd>
 800771a:	4680      	mov	r8, r0
 800771c:	4606      	mov	r6, r0
 800771e:	9b08      	ldr	r3, [sp, #32]
 8007720:	3301      	adds	r3, #1
 8007722:	9308      	str	r3, [sp, #32]
 8007724:	e775      	b.n	8007612 <_dtoa_r+0xa0a>
 8007726:	f000 f8e7 	bl	80078f8 <__multadd>
 800772a:	4631      	mov	r1, r6
 800772c:	4680      	mov	r8, r0
 800772e:	2300      	movs	r3, #0
 8007730:	220a      	movs	r2, #10
 8007732:	4628      	mov	r0, r5
 8007734:	f000 f8e0 	bl	80078f8 <__multadd>
 8007738:	4606      	mov	r6, r0
 800773a:	e7f0      	b.n	800771e <_dtoa_r+0xb16>
 800773c:	f1b9 0f00 	cmp.w	r9, #0
 8007740:	bfcc      	ite	gt
 8007742:	464f      	movgt	r7, r9
 8007744:	2701      	movle	r7, #1
 8007746:	f04f 0800 	mov.w	r8, #0
 800774a:	9a03      	ldr	r2, [sp, #12]
 800774c:	4417      	add	r7, r2
 800774e:	4659      	mov	r1, fp
 8007750:	2201      	movs	r2, #1
 8007752:	4628      	mov	r0, r5
 8007754:	9308      	str	r3, [sp, #32]
 8007756:	f000 fa7b 	bl	8007c50 <__lshift>
 800775a:	4621      	mov	r1, r4
 800775c:	4683      	mov	fp, r0
 800775e:	f000 fae7 	bl	8007d30 <__mcmp>
 8007762:	2800      	cmp	r0, #0
 8007764:	dcb2      	bgt.n	80076cc <_dtoa_r+0xac4>
 8007766:	d102      	bne.n	800776e <_dtoa_r+0xb66>
 8007768:	9b08      	ldr	r3, [sp, #32]
 800776a:	07db      	lsls	r3, r3, #31
 800776c:	d4ae      	bmi.n	80076cc <_dtoa_r+0xac4>
 800776e:	463b      	mov	r3, r7
 8007770:	461f      	mov	r7, r3
 8007772:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007776:	2a30      	cmp	r2, #48	; 0x30
 8007778:	d0fa      	beq.n	8007770 <_dtoa_r+0xb68>
 800777a:	e6f9      	b.n	8007570 <_dtoa_r+0x968>
 800777c:	9a03      	ldr	r2, [sp, #12]
 800777e:	429a      	cmp	r2, r3
 8007780:	d1a5      	bne.n	80076ce <_dtoa_r+0xac6>
 8007782:	2331      	movs	r3, #49	; 0x31
 8007784:	f10a 0a01 	add.w	sl, sl, #1
 8007788:	e779      	b.n	800767e <_dtoa_r+0xa76>
 800778a:	4b14      	ldr	r3, [pc, #80]	; (80077dc <_dtoa_r+0xbd4>)
 800778c:	f7ff baa8 	b.w	8006ce0 <_dtoa_r+0xd8>
 8007790:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007792:	2b00      	cmp	r3, #0
 8007794:	f47f aa81 	bne.w	8006c9a <_dtoa_r+0x92>
 8007798:	4b11      	ldr	r3, [pc, #68]	; (80077e0 <_dtoa_r+0xbd8>)
 800779a:	f7ff baa1 	b.w	8006ce0 <_dtoa_r+0xd8>
 800779e:	f1b9 0f00 	cmp.w	r9, #0
 80077a2:	dc03      	bgt.n	80077ac <_dtoa_r+0xba4>
 80077a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	f73f aecb 	bgt.w	8007542 <_dtoa_r+0x93a>
 80077ac:	9f03      	ldr	r7, [sp, #12]
 80077ae:	4621      	mov	r1, r4
 80077b0:	4658      	mov	r0, fp
 80077b2:	f7ff f99b 	bl	8006aec <quorem>
 80077b6:	9a03      	ldr	r2, [sp, #12]
 80077b8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80077bc:	f807 3b01 	strb.w	r3, [r7], #1
 80077c0:	1aba      	subs	r2, r7, r2
 80077c2:	4591      	cmp	r9, r2
 80077c4:	ddba      	ble.n	800773c <_dtoa_r+0xb34>
 80077c6:	4659      	mov	r1, fp
 80077c8:	2300      	movs	r3, #0
 80077ca:	220a      	movs	r2, #10
 80077cc:	4628      	mov	r0, r5
 80077ce:	f000 f893 	bl	80078f8 <__multadd>
 80077d2:	4683      	mov	fp, r0
 80077d4:	e7eb      	b.n	80077ae <_dtoa_r+0xba6>
 80077d6:	bf00      	nop
 80077d8:	080091f8 	.word	0x080091f8
 80077dc:	08009054 	.word	0x08009054
 80077e0:	08009179 	.word	0x08009179

080077e4 <_localeconv_r>:
 80077e4:	4800      	ldr	r0, [pc, #0]	; (80077e8 <_localeconv_r+0x4>)
 80077e6:	4770      	bx	lr
 80077e8:	20000194 	.word	0x20000194

080077ec <malloc>:
 80077ec:	4b02      	ldr	r3, [pc, #8]	; (80077f8 <malloc+0xc>)
 80077ee:	4601      	mov	r1, r0
 80077f0:	6818      	ldr	r0, [r3, #0]
 80077f2:	f000 bc1d 	b.w	8008030 <_malloc_r>
 80077f6:	bf00      	nop
 80077f8:	20000040 	.word	0x20000040

080077fc <memchr>:
 80077fc:	4603      	mov	r3, r0
 80077fe:	b510      	push	{r4, lr}
 8007800:	b2c9      	uxtb	r1, r1
 8007802:	4402      	add	r2, r0
 8007804:	4293      	cmp	r3, r2
 8007806:	4618      	mov	r0, r3
 8007808:	d101      	bne.n	800780e <memchr+0x12>
 800780a:	2000      	movs	r0, #0
 800780c:	e003      	b.n	8007816 <memchr+0x1a>
 800780e:	7804      	ldrb	r4, [r0, #0]
 8007810:	3301      	adds	r3, #1
 8007812:	428c      	cmp	r4, r1
 8007814:	d1f6      	bne.n	8007804 <memchr+0x8>
 8007816:	bd10      	pop	{r4, pc}

08007818 <memcpy>:
 8007818:	440a      	add	r2, r1
 800781a:	4291      	cmp	r1, r2
 800781c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007820:	d100      	bne.n	8007824 <memcpy+0xc>
 8007822:	4770      	bx	lr
 8007824:	b510      	push	{r4, lr}
 8007826:	f811 4b01 	ldrb.w	r4, [r1], #1
 800782a:	4291      	cmp	r1, r2
 800782c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007830:	d1f9      	bne.n	8007826 <memcpy+0xe>
 8007832:	bd10      	pop	{r4, pc}

08007834 <_Balloc>:
 8007834:	b570      	push	{r4, r5, r6, lr}
 8007836:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007838:	4604      	mov	r4, r0
 800783a:	460d      	mov	r5, r1
 800783c:	b976      	cbnz	r6, 800785c <_Balloc+0x28>
 800783e:	2010      	movs	r0, #16
 8007840:	f7ff ffd4 	bl	80077ec <malloc>
 8007844:	4602      	mov	r2, r0
 8007846:	6260      	str	r0, [r4, #36]	; 0x24
 8007848:	b920      	cbnz	r0, 8007854 <_Balloc+0x20>
 800784a:	2166      	movs	r1, #102	; 0x66
 800784c:	4b17      	ldr	r3, [pc, #92]	; (80078ac <_Balloc+0x78>)
 800784e:	4818      	ldr	r0, [pc, #96]	; (80078b0 <_Balloc+0x7c>)
 8007850:	f000 fdce 	bl	80083f0 <__assert_func>
 8007854:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007858:	6006      	str	r6, [r0, #0]
 800785a:	60c6      	str	r6, [r0, #12]
 800785c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800785e:	68f3      	ldr	r3, [r6, #12]
 8007860:	b183      	cbz	r3, 8007884 <_Balloc+0x50>
 8007862:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800786a:	b9b8      	cbnz	r0, 800789c <_Balloc+0x68>
 800786c:	2101      	movs	r1, #1
 800786e:	fa01 f605 	lsl.w	r6, r1, r5
 8007872:	1d72      	adds	r2, r6, #5
 8007874:	4620      	mov	r0, r4
 8007876:	0092      	lsls	r2, r2, #2
 8007878:	f000 fb5e 	bl	8007f38 <_calloc_r>
 800787c:	b160      	cbz	r0, 8007898 <_Balloc+0x64>
 800787e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007882:	e00e      	b.n	80078a2 <_Balloc+0x6e>
 8007884:	2221      	movs	r2, #33	; 0x21
 8007886:	2104      	movs	r1, #4
 8007888:	4620      	mov	r0, r4
 800788a:	f000 fb55 	bl	8007f38 <_calloc_r>
 800788e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007890:	60f0      	str	r0, [r6, #12]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1e4      	bne.n	8007862 <_Balloc+0x2e>
 8007898:	2000      	movs	r0, #0
 800789a:	bd70      	pop	{r4, r5, r6, pc}
 800789c:	6802      	ldr	r2, [r0, #0]
 800789e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80078a2:	2300      	movs	r3, #0
 80078a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80078a8:	e7f7      	b.n	800789a <_Balloc+0x66>
 80078aa:	bf00      	nop
 80078ac:	08009186 	.word	0x08009186
 80078b0:	08009209 	.word	0x08009209

080078b4 <_Bfree>:
 80078b4:	b570      	push	{r4, r5, r6, lr}
 80078b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80078b8:	4605      	mov	r5, r0
 80078ba:	460c      	mov	r4, r1
 80078bc:	b976      	cbnz	r6, 80078dc <_Bfree+0x28>
 80078be:	2010      	movs	r0, #16
 80078c0:	f7ff ff94 	bl	80077ec <malloc>
 80078c4:	4602      	mov	r2, r0
 80078c6:	6268      	str	r0, [r5, #36]	; 0x24
 80078c8:	b920      	cbnz	r0, 80078d4 <_Bfree+0x20>
 80078ca:	218a      	movs	r1, #138	; 0x8a
 80078cc:	4b08      	ldr	r3, [pc, #32]	; (80078f0 <_Bfree+0x3c>)
 80078ce:	4809      	ldr	r0, [pc, #36]	; (80078f4 <_Bfree+0x40>)
 80078d0:	f000 fd8e 	bl	80083f0 <__assert_func>
 80078d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078d8:	6006      	str	r6, [r0, #0]
 80078da:	60c6      	str	r6, [r0, #12]
 80078dc:	b13c      	cbz	r4, 80078ee <_Bfree+0x3a>
 80078de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80078e0:	6862      	ldr	r2, [r4, #4]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078e8:	6021      	str	r1, [r4, #0]
 80078ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80078ee:	bd70      	pop	{r4, r5, r6, pc}
 80078f0:	08009186 	.word	0x08009186
 80078f4:	08009209 	.word	0x08009209

080078f8 <__multadd>:
 80078f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078fc:	4607      	mov	r7, r0
 80078fe:	460c      	mov	r4, r1
 8007900:	461e      	mov	r6, r3
 8007902:	2000      	movs	r0, #0
 8007904:	690d      	ldr	r5, [r1, #16]
 8007906:	f101 0c14 	add.w	ip, r1, #20
 800790a:	f8dc 3000 	ldr.w	r3, [ip]
 800790e:	3001      	adds	r0, #1
 8007910:	b299      	uxth	r1, r3
 8007912:	fb02 6101 	mla	r1, r2, r1, r6
 8007916:	0c1e      	lsrs	r6, r3, #16
 8007918:	0c0b      	lsrs	r3, r1, #16
 800791a:	fb02 3306 	mla	r3, r2, r6, r3
 800791e:	b289      	uxth	r1, r1
 8007920:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007924:	4285      	cmp	r5, r0
 8007926:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800792a:	f84c 1b04 	str.w	r1, [ip], #4
 800792e:	dcec      	bgt.n	800790a <__multadd+0x12>
 8007930:	b30e      	cbz	r6, 8007976 <__multadd+0x7e>
 8007932:	68a3      	ldr	r3, [r4, #8]
 8007934:	42ab      	cmp	r3, r5
 8007936:	dc19      	bgt.n	800796c <__multadd+0x74>
 8007938:	6861      	ldr	r1, [r4, #4]
 800793a:	4638      	mov	r0, r7
 800793c:	3101      	adds	r1, #1
 800793e:	f7ff ff79 	bl	8007834 <_Balloc>
 8007942:	4680      	mov	r8, r0
 8007944:	b928      	cbnz	r0, 8007952 <__multadd+0x5a>
 8007946:	4602      	mov	r2, r0
 8007948:	21b5      	movs	r1, #181	; 0xb5
 800794a:	4b0c      	ldr	r3, [pc, #48]	; (800797c <__multadd+0x84>)
 800794c:	480c      	ldr	r0, [pc, #48]	; (8007980 <__multadd+0x88>)
 800794e:	f000 fd4f 	bl	80083f0 <__assert_func>
 8007952:	6922      	ldr	r2, [r4, #16]
 8007954:	f104 010c 	add.w	r1, r4, #12
 8007958:	3202      	adds	r2, #2
 800795a:	0092      	lsls	r2, r2, #2
 800795c:	300c      	adds	r0, #12
 800795e:	f7ff ff5b 	bl	8007818 <memcpy>
 8007962:	4621      	mov	r1, r4
 8007964:	4638      	mov	r0, r7
 8007966:	f7ff ffa5 	bl	80078b4 <_Bfree>
 800796a:	4644      	mov	r4, r8
 800796c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007970:	3501      	adds	r5, #1
 8007972:	615e      	str	r6, [r3, #20]
 8007974:	6125      	str	r5, [r4, #16]
 8007976:	4620      	mov	r0, r4
 8007978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800797c:	080091f8 	.word	0x080091f8
 8007980:	08009209 	.word	0x08009209

08007984 <__hi0bits>:
 8007984:	0c02      	lsrs	r2, r0, #16
 8007986:	0412      	lsls	r2, r2, #16
 8007988:	4603      	mov	r3, r0
 800798a:	b9ca      	cbnz	r2, 80079c0 <__hi0bits+0x3c>
 800798c:	0403      	lsls	r3, r0, #16
 800798e:	2010      	movs	r0, #16
 8007990:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007994:	bf04      	itt	eq
 8007996:	021b      	lsleq	r3, r3, #8
 8007998:	3008      	addeq	r0, #8
 800799a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800799e:	bf04      	itt	eq
 80079a0:	011b      	lsleq	r3, r3, #4
 80079a2:	3004      	addeq	r0, #4
 80079a4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80079a8:	bf04      	itt	eq
 80079aa:	009b      	lsleq	r3, r3, #2
 80079ac:	3002      	addeq	r0, #2
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	db05      	blt.n	80079be <__hi0bits+0x3a>
 80079b2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80079b6:	f100 0001 	add.w	r0, r0, #1
 80079ba:	bf08      	it	eq
 80079bc:	2020      	moveq	r0, #32
 80079be:	4770      	bx	lr
 80079c0:	2000      	movs	r0, #0
 80079c2:	e7e5      	b.n	8007990 <__hi0bits+0xc>

080079c4 <__lo0bits>:
 80079c4:	6803      	ldr	r3, [r0, #0]
 80079c6:	4602      	mov	r2, r0
 80079c8:	f013 0007 	ands.w	r0, r3, #7
 80079cc:	d00b      	beq.n	80079e6 <__lo0bits+0x22>
 80079ce:	07d9      	lsls	r1, r3, #31
 80079d0:	d421      	bmi.n	8007a16 <__lo0bits+0x52>
 80079d2:	0798      	lsls	r0, r3, #30
 80079d4:	bf49      	itett	mi
 80079d6:	085b      	lsrmi	r3, r3, #1
 80079d8:	089b      	lsrpl	r3, r3, #2
 80079da:	2001      	movmi	r0, #1
 80079dc:	6013      	strmi	r3, [r2, #0]
 80079de:	bf5c      	itt	pl
 80079e0:	2002      	movpl	r0, #2
 80079e2:	6013      	strpl	r3, [r2, #0]
 80079e4:	4770      	bx	lr
 80079e6:	b299      	uxth	r1, r3
 80079e8:	b909      	cbnz	r1, 80079ee <__lo0bits+0x2a>
 80079ea:	2010      	movs	r0, #16
 80079ec:	0c1b      	lsrs	r3, r3, #16
 80079ee:	b2d9      	uxtb	r1, r3
 80079f0:	b909      	cbnz	r1, 80079f6 <__lo0bits+0x32>
 80079f2:	3008      	adds	r0, #8
 80079f4:	0a1b      	lsrs	r3, r3, #8
 80079f6:	0719      	lsls	r1, r3, #28
 80079f8:	bf04      	itt	eq
 80079fa:	091b      	lsreq	r3, r3, #4
 80079fc:	3004      	addeq	r0, #4
 80079fe:	0799      	lsls	r1, r3, #30
 8007a00:	bf04      	itt	eq
 8007a02:	089b      	lsreq	r3, r3, #2
 8007a04:	3002      	addeq	r0, #2
 8007a06:	07d9      	lsls	r1, r3, #31
 8007a08:	d403      	bmi.n	8007a12 <__lo0bits+0x4e>
 8007a0a:	085b      	lsrs	r3, r3, #1
 8007a0c:	f100 0001 	add.w	r0, r0, #1
 8007a10:	d003      	beq.n	8007a1a <__lo0bits+0x56>
 8007a12:	6013      	str	r3, [r2, #0]
 8007a14:	4770      	bx	lr
 8007a16:	2000      	movs	r0, #0
 8007a18:	4770      	bx	lr
 8007a1a:	2020      	movs	r0, #32
 8007a1c:	4770      	bx	lr
	...

08007a20 <__i2b>:
 8007a20:	b510      	push	{r4, lr}
 8007a22:	460c      	mov	r4, r1
 8007a24:	2101      	movs	r1, #1
 8007a26:	f7ff ff05 	bl	8007834 <_Balloc>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	b928      	cbnz	r0, 8007a3a <__i2b+0x1a>
 8007a2e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007a32:	4b04      	ldr	r3, [pc, #16]	; (8007a44 <__i2b+0x24>)
 8007a34:	4804      	ldr	r0, [pc, #16]	; (8007a48 <__i2b+0x28>)
 8007a36:	f000 fcdb 	bl	80083f0 <__assert_func>
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	6144      	str	r4, [r0, #20]
 8007a3e:	6103      	str	r3, [r0, #16]
 8007a40:	bd10      	pop	{r4, pc}
 8007a42:	bf00      	nop
 8007a44:	080091f8 	.word	0x080091f8
 8007a48:	08009209 	.word	0x08009209

08007a4c <__multiply>:
 8007a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a50:	4691      	mov	r9, r2
 8007a52:	690a      	ldr	r2, [r1, #16]
 8007a54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007a58:	460c      	mov	r4, r1
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	bfbe      	ittt	lt
 8007a5e:	460b      	movlt	r3, r1
 8007a60:	464c      	movlt	r4, r9
 8007a62:	4699      	movlt	r9, r3
 8007a64:	6927      	ldr	r7, [r4, #16]
 8007a66:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007a6a:	68a3      	ldr	r3, [r4, #8]
 8007a6c:	6861      	ldr	r1, [r4, #4]
 8007a6e:	eb07 060a 	add.w	r6, r7, sl
 8007a72:	42b3      	cmp	r3, r6
 8007a74:	b085      	sub	sp, #20
 8007a76:	bfb8      	it	lt
 8007a78:	3101      	addlt	r1, #1
 8007a7a:	f7ff fedb 	bl	8007834 <_Balloc>
 8007a7e:	b930      	cbnz	r0, 8007a8e <__multiply+0x42>
 8007a80:	4602      	mov	r2, r0
 8007a82:	f240 115d 	movw	r1, #349	; 0x15d
 8007a86:	4b43      	ldr	r3, [pc, #268]	; (8007b94 <__multiply+0x148>)
 8007a88:	4843      	ldr	r0, [pc, #268]	; (8007b98 <__multiply+0x14c>)
 8007a8a:	f000 fcb1 	bl	80083f0 <__assert_func>
 8007a8e:	f100 0514 	add.w	r5, r0, #20
 8007a92:	462b      	mov	r3, r5
 8007a94:	2200      	movs	r2, #0
 8007a96:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a9a:	4543      	cmp	r3, r8
 8007a9c:	d321      	bcc.n	8007ae2 <__multiply+0x96>
 8007a9e:	f104 0314 	add.w	r3, r4, #20
 8007aa2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007aa6:	f109 0314 	add.w	r3, r9, #20
 8007aaa:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007aae:	9202      	str	r2, [sp, #8]
 8007ab0:	1b3a      	subs	r2, r7, r4
 8007ab2:	3a15      	subs	r2, #21
 8007ab4:	f022 0203 	bic.w	r2, r2, #3
 8007ab8:	3204      	adds	r2, #4
 8007aba:	f104 0115 	add.w	r1, r4, #21
 8007abe:	428f      	cmp	r7, r1
 8007ac0:	bf38      	it	cc
 8007ac2:	2204      	movcc	r2, #4
 8007ac4:	9201      	str	r2, [sp, #4]
 8007ac6:	9a02      	ldr	r2, [sp, #8]
 8007ac8:	9303      	str	r3, [sp, #12]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d80c      	bhi.n	8007ae8 <__multiply+0x9c>
 8007ace:	2e00      	cmp	r6, #0
 8007ad0:	dd03      	ble.n	8007ada <__multiply+0x8e>
 8007ad2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d059      	beq.n	8007b8e <__multiply+0x142>
 8007ada:	6106      	str	r6, [r0, #16]
 8007adc:	b005      	add	sp, #20
 8007ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae2:	f843 2b04 	str.w	r2, [r3], #4
 8007ae6:	e7d8      	b.n	8007a9a <__multiply+0x4e>
 8007ae8:	f8b3 a000 	ldrh.w	sl, [r3]
 8007aec:	f1ba 0f00 	cmp.w	sl, #0
 8007af0:	d023      	beq.n	8007b3a <__multiply+0xee>
 8007af2:	46a9      	mov	r9, r5
 8007af4:	f04f 0c00 	mov.w	ip, #0
 8007af8:	f104 0e14 	add.w	lr, r4, #20
 8007afc:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007b00:	f8d9 1000 	ldr.w	r1, [r9]
 8007b04:	fa1f fb82 	uxth.w	fp, r2
 8007b08:	b289      	uxth	r1, r1
 8007b0a:	fb0a 110b 	mla	r1, sl, fp, r1
 8007b0e:	4461      	add	r1, ip
 8007b10:	f8d9 c000 	ldr.w	ip, [r9]
 8007b14:	0c12      	lsrs	r2, r2, #16
 8007b16:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007b1a:	fb0a c202 	mla	r2, sl, r2, ip
 8007b1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007b22:	b289      	uxth	r1, r1
 8007b24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b28:	4577      	cmp	r7, lr
 8007b2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b2e:	f849 1b04 	str.w	r1, [r9], #4
 8007b32:	d8e3      	bhi.n	8007afc <__multiply+0xb0>
 8007b34:	9a01      	ldr	r2, [sp, #4]
 8007b36:	f845 c002 	str.w	ip, [r5, r2]
 8007b3a:	9a03      	ldr	r2, [sp, #12]
 8007b3c:	3304      	adds	r3, #4
 8007b3e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007b42:	f1b9 0f00 	cmp.w	r9, #0
 8007b46:	d020      	beq.n	8007b8a <__multiply+0x13e>
 8007b48:	46ae      	mov	lr, r5
 8007b4a:	f04f 0a00 	mov.w	sl, #0
 8007b4e:	6829      	ldr	r1, [r5, #0]
 8007b50:	f104 0c14 	add.w	ip, r4, #20
 8007b54:	f8bc b000 	ldrh.w	fp, [ip]
 8007b58:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007b5c:	b289      	uxth	r1, r1
 8007b5e:	fb09 220b 	mla	r2, r9, fp, r2
 8007b62:	4492      	add	sl, r2
 8007b64:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007b68:	f84e 1b04 	str.w	r1, [lr], #4
 8007b6c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007b70:	f8be 1000 	ldrh.w	r1, [lr]
 8007b74:	0c12      	lsrs	r2, r2, #16
 8007b76:	fb09 1102 	mla	r1, r9, r2, r1
 8007b7a:	4567      	cmp	r7, ip
 8007b7c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007b80:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007b84:	d8e6      	bhi.n	8007b54 <__multiply+0x108>
 8007b86:	9a01      	ldr	r2, [sp, #4]
 8007b88:	50a9      	str	r1, [r5, r2]
 8007b8a:	3504      	adds	r5, #4
 8007b8c:	e79b      	b.n	8007ac6 <__multiply+0x7a>
 8007b8e:	3e01      	subs	r6, #1
 8007b90:	e79d      	b.n	8007ace <__multiply+0x82>
 8007b92:	bf00      	nop
 8007b94:	080091f8 	.word	0x080091f8
 8007b98:	08009209 	.word	0x08009209

08007b9c <__pow5mult>:
 8007b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ba0:	4615      	mov	r5, r2
 8007ba2:	f012 0203 	ands.w	r2, r2, #3
 8007ba6:	4606      	mov	r6, r0
 8007ba8:	460f      	mov	r7, r1
 8007baa:	d007      	beq.n	8007bbc <__pow5mult+0x20>
 8007bac:	4c25      	ldr	r4, [pc, #148]	; (8007c44 <__pow5mult+0xa8>)
 8007bae:	3a01      	subs	r2, #1
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007bb6:	f7ff fe9f 	bl	80078f8 <__multadd>
 8007bba:	4607      	mov	r7, r0
 8007bbc:	10ad      	asrs	r5, r5, #2
 8007bbe:	d03d      	beq.n	8007c3c <__pow5mult+0xa0>
 8007bc0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007bc2:	b97c      	cbnz	r4, 8007be4 <__pow5mult+0x48>
 8007bc4:	2010      	movs	r0, #16
 8007bc6:	f7ff fe11 	bl	80077ec <malloc>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	6270      	str	r0, [r6, #36]	; 0x24
 8007bce:	b928      	cbnz	r0, 8007bdc <__pow5mult+0x40>
 8007bd0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007bd4:	4b1c      	ldr	r3, [pc, #112]	; (8007c48 <__pow5mult+0xac>)
 8007bd6:	481d      	ldr	r0, [pc, #116]	; (8007c4c <__pow5mult+0xb0>)
 8007bd8:	f000 fc0a 	bl	80083f0 <__assert_func>
 8007bdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007be0:	6004      	str	r4, [r0, #0]
 8007be2:	60c4      	str	r4, [r0, #12]
 8007be4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007be8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007bec:	b94c      	cbnz	r4, 8007c02 <__pow5mult+0x66>
 8007bee:	f240 2171 	movw	r1, #625	; 0x271
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	f7ff ff14 	bl	8007a20 <__i2b>
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	4604      	mov	r4, r0
 8007bfc:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c00:	6003      	str	r3, [r0, #0]
 8007c02:	f04f 0900 	mov.w	r9, #0
 8007c06:	07eb      	lsls	r3, r5, #31
 8007c08:	d50a      	bpl.n	8007c20 <__pow5mult+0x84>
 8007c0a:	4639      	mov	r1, r7
 8007c0c:	4622      	mov	r2, r4
 8007c0e:	4630      	mov	r0, r6
 8007c10:	f7ff ff1c 	bl	8007a4c <__multiply>
 8007c14:	4680      	mov	r8, r0
 8007c16:	4639      	mov	r1, r7
 8007c18:	4630      	mov	r0, r6
 8007c1a:	f7ff fe4b 	bl	80078b4 <_Bfree>
 8007c1e:	4647      	mov	r7, r8
 8007c20:	106d      	asrs	r5, r5, #1
 8007c22:	d00b      	beq.n	8007c3c <__pow5mult+0xa0>
 8007c24:	6820      	ldr	r0, [r4, #0]
 8007c26:	b938      	cbnz	r0, 8007c38 <__pow5mult+0x9c>
 8007c28:	4622      	mov	r2, r4
 8007c2a:	4621      	mov	r1, r4
 8007c2c:	4630      	mov	r0, r6
 8007c2e:	f7ff ff0d 	bl	8007a4c <__multiply>
 8007c32:	6020      	str	r0, [r4, #0]
 8007c34:	f8c0 9000 	str.w	r9, [r0]
 8007c38:	4604      	mov	r4, r0
 8007c3a:	e7e4      	b.n	8007c06 <__pow5mult+0x6a>
 8007c3c:	4638      	mov	r0, r7
 8007c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c42:	bf00      	nop
 8007c44:	08009358 	.word	0x08009358
 8007c48:	08009186 	.word	0x08009186
 8007c4c:	08009209 	.word	0x08009209

08007c50 <__lshift>:
 8007c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c54:	460c      	mov	r4, r1
 8007c56:	4607      	mov	r7, r0
 8007c58:	4691      	mov	r9, r2
 8007c5a:	6923      	ldr	r3, [r4, #16]
 8007c5c:	6849      	ldr	r1, [r1, #4]
 8007c5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c62:	68a3      	ldr	r3, [r4, #8]
 8007c64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c68:	f108 0601 	add.w	r6, r8, #1
 8007c6c:	42b3      	cmp	r3, r6
 8007c6e:	db0b      	blt.n	8007c88 <__lshift+0x38>
 8007c70:	4638      	mov	r0, r7
 8007c72:	f7ff fddf 	bl	8007834 <_Balloc>
 8007c76:	4605      	mov	r5, r0
 8007c78:	b948      	cbnz	r0, 8007c8e <__lshift+0x3e>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007c80:	4b29      	ldr	r3, [pc, #164]	; (8007d28 <__lshift+0xd8>)
 8007c82:	482a      	ldr	r0, [pc, #168]	; (8007d2c <__lshift+0xdc>)
 8007c84:	f000 fbb4 	bl	80083f0 <__assert_func>
 8007c88:	3101      	adds	r1, #1
 8007c8a:	005b      	lsls	r3, r3, #1
 8007c8c:	e7ee      	b.n	8007c6c <__lshift+0x1c>
 8007c8e:	2300      	movs	r3, #0
 8007c90:	f100 0114 	add.w	r1, r0, #20
 8007c94:	f100 0210 	add.w	r2, r0, #16
 8007c98:	4618      	mov	r0, r3
 8007c9a:	4553      	cmp	r3, sl
 8007c9c:	db37      	blt.n	8007d0e <__lshift+0xbe>
 8007c9e:	6920      	ldr	r0, [r4, #16]
 8007ca0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ca4:	f104 0314 	add.w	r3, r4, #20
 8007ca8:	f019 091f 	ands.w	r9, r9, #31
 8007cac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007cb0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007cb4:	d02f      	beq.n	8007d16 <__lshift+0xc6>
 8007cb6:	468a      	mov	sl, r1
 8007cb8:	f04f 0c00 	mov.w	ip, #0
 8007cbc:	f1c9 0e20 	rsb	lr, r9, #32
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	fa02 f209 	lsl.w	r2, r2, r9
 8007cc6:	ea42 020c 	orr.w	r2, r2, ip
 8007cca:	f84a 2b04 	str.w	r2, [sl], #4
 8007cce:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cd2:	4298      	cmp	r0, r3
 8007cd4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007cd8:	d8f2      	bhi.n	8007cc0 <__lshift+0x70>
 8007cda:	1b03      	subs	r3, r0, r4
 8007cdc:	3b15      	subs	r3, #21
 8007cde:	f023 0303 	bic.w	r3, r3, #3
 8007ce2:	3304      	adds	r3, #4
 8007ce4:	f104 0215 	add.w	r2, r4, #21
 8007ce8:	4290      	cmp	r0, r2
 8007cea:	bf38      	it	cc
 8007cec:	2304      	movcc	r3, #4
 8007cee:	f841 c003 	str.w	ip, [r1, r3]
 8007cf2:	f1bc 0f00 	cmp.w	ip, #0
 8007cf6:	d001      	beq.n	8007cfc <__lshift+0xac>
 8007cf8:	f108 0602 	add.w	r6, r8, #2
 8007cfc:	3e01      	subs	r6, #1
 8007cfe:	4638      	mov	r0, r7
 8007d00:	4621      	mov	r1, r4
 8007d02:	612e      	str	r6, [r5, #16]
 8007d04:	f7ff fdd6 	bl	80078b4 <_Bfree>
 8007d08:	4628      	mov	r0, r5
 8007d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d12:	3301      	adds	r3, #1
 8007d14:	e7c1      	b.n	8007c9a <__lshift+0x4a>
 8007d16:	3904      	subs	r1, #4
 8007d18:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d1c:	4298      	cmp	r0, r3
 8007d1e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d22:	d8f9      	bhi.n	8007d18 <__lshift+0xc8>
 8007d24:	e7ea      	b.n	8007cfc <__lshift+0xac>
 8007d26:	bf00      	nop
 8007d28:	080091f8 	.word	0x080091f8
 8007d2c:	08009209 	.word	0x08009209

08007d30 <__mcmp>:
 8007d30:	4603      	mov	r3, r0
 8007d32:	690a      	ldr	r2, [r1, #16]
 8007d34:	6900      	ldr	r0, [r0, #16]
 8007d36:	b530      	push	{r4, r5, lr}
 8007d38:	1a80      	subs	r0, r0, r2
 8007d3a:	d10d      	bne.n	8007d58 <__mcmp+0x28>
 8007d3c:	3314      	adds	r3, #20
 8007d3e:	3114      	adds	r1, #20
 8007d40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007d44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007d48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007d4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007d50:	4295      	cmp	r5, r2
 8007d52:	d002      	beq.n	8007d5a <__mcmp+0x2a>
 8007d54:	d304      	bcc.n	8007d60 <__mcmp+0x30>
 8007d56:	2001      	movs	r0, #1
 8007d58:	bd30      	pop	{r4, r5, pc}
 8007d5a:	42a3      	cmp	r3, r4
 8007d5c:	d3f4      	bcc.n	8007d48 <__mcmp+0x18>
 8007d5e:	e7fb      	b.n	8007d58 <__mcmp+0x28>
 8007d60:	f04f 30ff 	mov.w	r0, #4294967295
 8007d64:	e7f8      	b.n	8007d58 <__mcmp+0x28>
	...

08007d68 <__mdiff>:
 8007d68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d6c:	460d      	mov	r5, r1
 8007d6e:	4607      	mov	r7, r0
 8007d70:	4611      	mov	r1, r2
 8007d72:	4628      	mov	r0, r5
 8007d74:	4614      	mov	r4, r2
 8007d76:	f7ff ffdb 	bl	8007d30 <__mcmp>
 8007d7a:	1e06      	subs	r6, r0, #0
 8007d7c:	d111      	bne.n	8007da2 <__mdiff+0x3a>
 8007d7e:	4631      	mov	r1, r6
 8007d80:	4638      	mov	r0, r7
 8007d82:	f7ff fd57 	bl	8007834 <_Balloc>
 8007d86:	4602      	mov	r2, r0
 8007d88:	b928      	cbnz	r0, 8007d96 <__mdiff+0x2e>
 8007d8a:	f240 2132 	movw	r1, #562	; 0x232
 8007d8e:	4b3a      	ldr	r3, [pc, #232]	; (8007e78 <__mdiff+0x110>)
 8007d90:	483a      	ldr	r0, [pc, #232]	; (8007e7c <__mdiff+0x114>)
 8007d92:	f000 fb2d 	bl	80083f0 <__assert_func>
 8007d96:	2301      	movs	r3, #1
 8007d98:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da2:	bfa4      	itt	ge
 8007da4:	4623      	movge	r3, r4
 8007da6:	462c      	movge	r4, r5
 8007da8:	4638      	mov	r0, r7
 8007daa:	6861      	ldr	r1, [r4, #4]
 8007dac:	bfa6      	itte	ge
 8007dae:	461d      	movge	r5, r3
 8007db0:	2600      	movge	r6, #0
 8007db2:	2601      	movlt	r6, #1
 8007db4:	f7ff fd3e 	bl	8007834 <_Balloc>
 8007db8:	4602      	mov	r2, r0
 8007dba:	b918      	cbnz	r0, 8007dc4 <__mdiff+0x5c>
 8007dbc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007dc0:	4b2d      	ldr	r3, [pc, #180]	; (8007e78 <__mdiff+0x110>)
 8007dc2:	e7e5      	b.n	8007d90 <__mdiff+0x28>
 8007dc4:	f102 0814 	add.w	r8, r2, #20
 8007dc8:	46c2      	mov	sl, r8
 8007dca:	f04f 0c00 	mov.w	ip, #0
 8007dce:	6927      	ldr	r7, [r4, #16]
 8007dd0:	60c6      	str	r6, [r0, #12]
 8007dd2:	692e      	ldr	r6, [r5, #16]
 8007dd4:	f104 0014 	add.w	r0, r4, #20
 8007dd8:	f105 0914 	add.w	r9, r5, #20
 8007ddc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007de0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007de4:	3410      	adds	r4, #16
 8007de6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007dea:	f859 3b04 	ldr.w	r3, [r9], #4
 8007dee:	fa1f f18b 	uxth.w	r1, fp
 8007df2:	448c      	add	ip, r1
 8007df4:	b299      	uxth	r1, r3
 8007df6:	0c1b      	lsrs	r3, r3, #16
 8007df8:	ebac 0101 	sub.w	r1, ip, r1
 8007dfc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007e00:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007e04:	b289      	uxth	r1, r1
 8007e06:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007e0a:	454e      	cmp	r6, r9
 8007e0c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007e10:	f84a 3b04 	str.w	r3, [sl], #4
 8007e14:	d8e7      	bhi.n	8007de6 <__mdiff+0x7e>
 8007e16:	1b73      	subs	r3, r6, r5
 8007e18:	3b15      	subs	r3, #21
 8007e1a:	f023 0303 	bic.w	r3, r3, #3
 8007e1e:	3515      	adds	r5, #21
 8007e20:	3304      	adds	r3, #4
 8007e22:	42ae      	cmp	r6, r5
 8007e24:	bf38      	it	cc
 8007e26:	2304      	movcc	r3, #4
 8007e28:	4418      	add	r0, r3
 8007e2a:	4443      	add	r3, r8
 8007e2c:	461e      	mov	r6, r3
 8007e2e:	4605      	mov	r5, r0
 8007e30:	4575      	cmp	r5, lr
 8007e32:	d30e      	bcc.n	8007e52 <__mdiff+0xea>
 8007e34:	f10e 0103 	add.w	r1, lr, #3
 8007e38:	1a09      	subs	r1, r1, r0
 8007e3a:	f021 0103 	bic.w	r1, r1, #3
 8007e3e:	3803      	subs	r0, #3
 8007e40:	4586      	cmp	lr, r0
 8007e42:	bf38      	it	cc
 8007e44:	2100      	movcc	r1, #0
 8007e46:	4419      	add	r1, r3
 8007e48:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007e4c:	b18b      	cbz	r3, 8007e72 <__mdiff+0x10a>
 8007e4e:	6117      	str	r7, [r2, #16]
 8007e50:	e7a4      	b.n	8007d9c <__mdiff+0x34>
 8007e52:	f855 8b04 	ldr.w	r8, [r5], #4
 8007e56:	fa1f f188 	uxth.w	r1, r8
 8007e5a:	4461      	add	r1, ip
 8007e5c:	140c      	asrs	r4, r1, #16
 8007e5e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007e62:	b289      	uxth	r1, r1
 8007e64:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007e68:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007e6c:	f846 1b04 	str.w	r1, [r6], #4
 8007e70:	e7de      	b.n	8007e30 <__mdiff+0xc8>
 8007e72:	3f01      	subs	r7, #1
 8007e74:	e7e8      	b.n	8007e48 <__mdiff+0xe0>
 8007e76:	bf00      	nop
 8007e78:	080091f8 	.word	0x080091f8
 8007e7c:	08009209 	.word	0x08009209

08007e80 <__d2b>:
 8007e80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007e84:	2101      	movs	r1, #1
 8007e86:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007e8a:	4690      	mov	r8, r2
 8007e8c:	461d      	mov	r5, r3
 8007e8e:	f7ff fcd1 	bl	8007834 <_Balloc>
 8007e92:	4604      	mov	r4, r0
 8007e94:	b930      	cbnz	r0, 8007ea4 <__d2b+0x24>
 8007e96:	4602      	mov	r2, r0
 8007e98:	f240 310a 	movw	r1, #778	; 0x30a
 8007e9c:	4b24      	ldr	r3, [pc, #144]	; (8007f30 <__d2b+0xb0>)
 8007e9e:	4825      	ldr	r0, [pc, #148]	; (8007f34 <__d2b+0xb4>)
 8007ea0:	f000 faa6 	bl	80083f0 <__assert_func>
 8007ea4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007ea8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007eac:	bb2d      	cbnz	r5, 8007efa <__d2b+0x7a>
 8007eae:	9301      	str	r3, [sp, #4]
 8007eb0:	f1b8 0300 	subs.w	r3, r8, #0
 8007eb4:	d026      	beq.n	8007f04 <__d2b+0x84>
 8007eb6:	4668      	mov	r0, sp
 8007eb8:	9300      	str	r3, [sp, #0]
 8007eba:	f7ff fd83 	bl	80079c4 <__lo0bits>
 8007ebe:	9900      	ldr	r1, [sp, #0]
 8007ec0:	b1f0      	cbz	r0, 8007f00 <__d2b+0x80>
 8007ec2:	9a01      	ldr	r2, [sp, #4]
 8007ec4:	f1c0 0320 	rsb	r3, r0, #32
 8007ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ecc:	430b      	orrs	r3, r1
 8007ece:	40c2      	lsrs	r2, r0
 8007ed0:	6163      	str	r3, [r4, #20]
 8007ed2:	9201      	str	r2, [sp, #4]
 8007ed4:	9b01      	ldr	r3, [sp, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	bf14      	ite	ne
 8007eda:	2102      	movne	r1, #2
 8007edc:	2101      	moveq	r1, #1
 8007ede:	61a3      	str	r3, [r4, #24]
 8007ee0:	6121      	str	r1, [r4, #16]
 8007ee2:	b1c5      	cbz	r5, 8007f16 <__d2b+0x96>
 8007ee4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007ee8:	4405      	add	r5, r0
 8007eea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007eee:	603d      	str	r5, [r7, #0]
 8007ef0:	6030      	str	r0, [r6, #0]
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	b002      	add	sp, #8
 8007ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007efa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007efe:	e7d6      	b.n	8007eae <__d2b+0x2e>
 8007f00:	6161      	str	r1, [r4, #20]
 8007f02:	e7e7      	b.n	8007ed4 <__d2b+0x54>
 8007f04:	a801      	add	r0, sp, #4
 8007f06:	f7ff fd5d 	bl	80079c4 <__lo0bits>
 8007f0a:	2101      	movs	r1, #1
 8007f0c:	9b01      	ldr	r3, [sp, #4]
 8007f0e:	6121      	str	r1, [r4, #16]
 8007f10:	6163      	str	r3, [r4, #20]
 8007f12:	3020      	adds	r0, #32
 8007f14:	e7e5      	b.n	8007ee2 <__d2b+0x62>
 8007f16:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007f1a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007f1e:	6038      	str	r0, [r7, #0]
 8007f20:	6918      	ldr	r0, [r3, #16]
 8007f22:	f7ff fd2f 	bl	8007984 <__hi0bits>
 8007f26:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007f2a:	6031      	str	r1, [r6, #0]
 8007f2c:	e7e1      	b.n	8007ef2 <__d2b+0x72>
 8007f2e:	bf00      	nop
 8007f30:	080091f8 	.word	0x080091f8
 8007f34:	08009209 	.word	0x08009209

08007f38 <_calloc_r>:
 8007f38:	b570      	push	{r4, r5, r6, lr}
 8007f3a:	fba1 5402 	umull	r5, r4, r1, r2
 8007f3e:	b934      	cbnz	r4, 8007f4e <_calloc_r+0x16>
 8007f40:	4629      	mov	r1, r5
 8007f42:	f000 f875 	bl	8008030 <_malloc_r>
 8007f46:	4606      	mov	r6, r0
 8007f48:	b928      	cbnz	r0, 8007f56 <_calloc_r+0x1e>
 8007f4a:	4630      	mov	r0, r6
 8007f4c:	bd70      	pop	{r4, r5, r6, pc}
 8007f4e:	220c      	movs	r2, #12
 8007f50:	2600      	movs	r6, #0
 8007f52:	6002      	str	r2, [r0, #0]
 8007f54:	e7f9      	b.n	8007f4a <_calloc_r+0x12>
 8007f56:	462a      	mov	r2, r5
 8007f58:	4621      	mov	r1, r4
 8007f5a:	f7fe f89f 	bl	800609c <memset>
 8007f5e:	e7f4      	b.n	8007f4a <_calloc_r+0x12>

08007f60 <_free_r>:
 8007f60:	b538      	push	{r3, r4, r5, lr}
 8007f62:	4605      	mov	r5, r0
 8007f64:	2900      	cmp	r1, #0
 8007f66:	d040      	beq.n	8007fea <_free_r+0x8a>
 8007f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f6c:	1f0c      	subs	r4, r1, #4
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	bfb8      	it	lt
 8007f72:	18e4      	addlt	r4, r4, r3
 8007f74:	f000 fa98 	bl	80084a8 <__malloc_lock>
 8007f78:	4a1c      	ldr	r2, [pc, #112]	; (8007fec <_free_r+0x8c>)
 8007f7a:	6813      	ldr	r3, [r2, #0]
 8007f7c:	b933      	cbnz	r3, 8007f8c <_free_r+0x2c>
 8007f7e:	6063      	str	r3, [r4, #4]
 8007f80:	6014      	str	r4, [r2, #0]
 8007f82:	4628      	mov	r0, r5
 8007f84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f88:	f000 ba94 	b.w	80084b4 <__malloc_unlock>
 8007f8c:	42a3      	cmp	r3, r4
 8007f8e:	d908      	bls.n	8007fa2 <_free_r+0x42>
 8007f90:	6820      	ldr	r0, [r4, #0]
 8007f92:	1821      	adds	r1, r4, r0
 8007f94:	428b      	cmp	r3, r1
 8007f96:	bf01      	itttt	eq
 8007f98:	6819      	ldreq	r1, [r3, #0]
 8007f9a:	685b      	ldreq	r3, [r3, #4]
 8007f9c:	1809      	addeq	r1, r1, r0
 8007f9e:	6021      	streq	r1, [r4, #0]
 8007fa0:	e7ed      	b.n	8007f7e <_free_r+0x1e>
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	b10b      	cbz	r3, 8007fac <_free_r+0x4c>
 8007fa8:	42a3      	cmp	r3, r4
 8007faa:	d9fa      	bls.n	8007fa2 <_free_r+0x42>
 8007fac:	6811      	ldr	r1, [r2, #0]
 8007fae:	1850      	adds	r0, r2, r1
 8007fb0:	42a0      	cmp	r0, r4
 8007fb2:	d10b      	bne.n	8007fcc <_free_r+0x6c>
 8007fb4:	6820      	ldr	r0, [r4, #0]
 8007fb6:	4401      	add	r1, r0
 8007fb8:	1850      	adds	r0, r2, r1
 8007fba:	4283      	cmp	r3, r0
 8007fbc:	6011      	str	r1, [r2, #0]
 8007fbe:	d1e0      	bne.n	8007f82 <_free_r+0x22>
 8007fc0:	6818      	ldr	r0, [r3, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	4401      	add	r1, r0
 8007fc6:	6011      	str	r1, [r2, #0]
 8007fc8:	6053      	str	r3, [r2, #4]
 8007fca:	e7da      	b.n	8007f82 <_free_r+0x22>
 8007fcc:	d902      	bls.n	8007fd4 <_free_r+0x74>
 8007fce:	230c      	movs	r3, #12
 8007fd0:	602b      	str	r3, [r5, #0]
 8007fd2:	e7d6      	b.n	8007f82 <_free_r+0x22>
 8007fd4:	6820      	ldr	r0, [r4, #0]
 8007fd6:	1821      	adds	r1, r4, r0
 8007fd8:	428b      	cmp	r3, r1
 8007fda:	bf01      	itttt	eq
 8007fdc:	6819      	ldreq	r1, [r3, #0]
 8007fde:	685b      	ldreq	r3, [r3, #4]
 8007fe0:	1809      	addeq	r1, r1, r0
 8007fe2:	6021      	streq	r1, [r4, #0]
 8007fe4:	6063      	str	r3, [r4, #4]
 8007fe6:	6054      	str	r4, [r2, #4]
 8007fe8:	e7cb      	b.n	8007f82 <_free_r+0x22>
 8007fea:	bd38      	pop	{r3, r4, r5, pc}
 8007fec:	20000438 	.word	0x20000438

08007ff0 <sbrk_aligned>:
 8007ff0:	b570      	push	{r4, r5, r6, lr}
 8007ff2:	4e0e      	ldr	r6, [pc, #56]	; (800802c <sbrk_aligned+0x3c>)
 8007ff4:	460c      	mov	r4, r1
 8007ff6:	6831      	ldr	r1, [r6, #0]
 8007ff8:	4605      	mov	r5, r0
 8007ffa:	b911      	cbnz	r1, 8008002 <sbrk_aligned+0x12>
 8007ffc:	f000 f9e8 	bl	80083d0 <_sbrk_r>
 8008000:	6030      	str	r0, [r6, #0]
 8008002:	4621      	mov	r1, r4
 8008004:	4628      	mov	r0, r5
 8008006:	f000 f9e3 	bl	80083d0 <_sbrk_r>
 800800a:	1c43      	adds	r3, r0, #1
 800800c:	d00a      	beq.n	8008024 <sbrk_aligned+0x34>
 800800e:	1cc4      	adds	r4, r0, #3
 8008010:	f024 0403 	bic.w	r4, r4, #3
 8008014:	42a0      	cmp	r0, r4
 8008016:	d007      	beq.n	8008028 <sbrk_aligned+0x38>
 8008018:	1a21      	subs	r1, r4, r0
 800801a:	4628      	mov	r0, r5
 800801c:	f000 f9d8 	bl	80083d0 <_sbrk_r>
 8008020:	3001      	adds	r0, #1
 8008022:	d101      	bne.n	8008028 <sbrk_aligned+0x38>
 8008024:	f04f 34ff 	mov.w	r4, #4294967295
 8008028:	4620      	mov	r0, r4
 800802a:	bd70      	pop	{r4, r5, r6, pc}
 800802c:	2000043c 	.word	0x2000043c

08008030 <_malloc_r>:
 8008030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008034:	1ccd      	adds	r5, r1, #3
 8008036:	f025 0503 	bic.w	r5, r5, #3
 800803a:	3508      	adds	r5, #8
 800803c:	2d0c      	cmp	r5, #12
 800803e:	bf38      	it	cc
 8008040:	250c      	movcc	r5, #12
 8008042:	2d00      	cmp	r5, #0
 8008044:	4607      	mov	r7, r0
 8008046:	db01      	blt.n	800804c <_malloc_r+0x1c>
 8008048:	42a9      	cmp	r1, r5
 800804a:	d905      	bls.n	8008058 <_malloc_r+0x28>
 800804c:	230c      	movs	r3, #12
 800804e:	2600      	movs	r6, #0
 8008050:	603b      	str	r3, [r7, #0]
 8008052:	4630      	mov	r0, r6
 8008054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008058:	4e2e      	ldr	r6, [pc, #184]	; (8008114 <_malloc_r+0xe4>)
 800805a:	f000 fa25 	bl	80084a8 <__malloc_lock>
 800805e:	6833      	ldr	r3, [r6, #0]
 8008060:	461c      	mov	r4, r3
 8008062:	bb34      	cbnz	r4, 80080b2 <_malloc_r+0x82>
 8008064:	4629      	mov	r1, r5
 8008066:	4638      	mov	r0, r7
 8008068:	f7ff ffc2 	bl	8007ff0 <sbrk_aligned>
 800806c:	1c43      	adds	r3, r0, #1
 800806e:	4604      	mov	r4, r0
 8008070:	d14d      	bne.n	800810e <_malloc_r+0xde>
 8008072:	6834      	ldr	r4, [r6, #0]
 8008074:	4626      	mov	r6, r4
 8008076:	2e00      	cmp	r6, #0
 8008078:	d140      	bne.n	80080fc <_malloc_r+0xcc>
 800807a:	6823      	ldr	r3, [r4, #0]
 800807c:	4631      	mov	r1, r6
 800807e:	4638      	mov	r0, r7
 8008080:	eb04 0803 	add.w	r8, r4, r3
 8008084:	f000 f9a4 	bl	80083d0 <_sbrk_r>
 8008088:	4580      	cmp	r8, r0
 800808a:	d13a      	bne.n	8008102 <_malloc_r+0xd2>
 800808c:	6821      	ldr	r1, [r4, #0]
 800808e:	3503      	adds	r5, #3
 8008090:	1a6d      	subs	r5, r5, r1
 8008092:	f025 0503 	bic.w	r5, r5, #3
 8008096:	3508      	adds	r5, #8
 8008098:	2d0c      	cmp	r5, #12
 800809a:	bf38      	it	cc
 800809c:	250c      	movcc	r5, #12
 800809e:	4638      	mov	r0, r7
 80080a0:	4629      	mov	r1, r5
 80080a2:	f7ff ffa5 	bl	8007ff0 <sbrk_aligned>
 80080a6:	3001      	adds	r0, #1
 80080a8:	d02b      	beq.n	8008102 <_malloc_r+0xd2>
 80080aa:	6823      	ldr	r3, [r4, #0]
 80080ac:	442b      	add	r3, r5
 80080ae:	6023      	str	r3, [r4, #0]
 80080b0:	e00e      	b.n	80080d0 <_malloc_r+0xa0>
 80080b2:	6822      	ldr	r2, [r4, #0]
 80080b4:	1b52      	subs	r2, r2, r5
 80080b6:	d41e      	bmi.n	80080f6 <_malloc_r+0xc6>
 80080b8:	2a0b      	cmp	r2, #11
 80080ba:	d916      	bls.n	80080ea <_malloc_r+0xba>
 80080bc:	1961      	adds	r1, r4, r5
 80080be:	42a3      	cmp	r3, r4
 80080c0:	6025      	str	r5, [r4, #0]
 80080c2:	bf18      	it	ne
 80080c4:	6059      	strne	r1, [r3, #4]
 80080c6:	6863      	ldr	r3, [r4, #4]
 80080c8:	bf08      	it	eq
 80080ca:	6031      	streq	r1, [r6, #0]
 80080cc:	5162      	str	r2, [r4, r5]
 80080ce:	604b      	str	r3, [r1, #4]
 80080d0:	4638      	mov	r0, r7
 80080d2:	f104 060b 	add.w	r6, r4, #11
 80080d6:	f000 f9ed 	bl	80084b4 <__malloc_unlock>
 80080da:	f026 0607 	bic.w	r6, r6, #7
 80080de:	1d23      	adds	r3, r4, #4
 80080e0:	1af2      	subs	r2, r6, r3
 80080e2:	d0b6      	beq.n	8008052 <_malloc_r+0x22>
 80080e4:	1b9b      	subs	r3, r3, r6
 80080e6:	50a3      	str	r3, [r4, r2]
 80080e8:	e7b3      	b.n	8008052 <_malloc_r+0x22>
 80080ea:	6862      	ldr	r2, [r4, #4]
 80080ec:	42a3      	cmp	r3, r4
 80080ee:	bf0c      	ite	eq
 80080f0:	6032      	streq	r2, [r6, #0]
 80080f2:	605a      	strne	r2, [r3, #4]
 80080f4:	e7ec      	b.n	80080d0 <_malloc_r+0xa0>
 80080f6:	4623      	mov	r3, r4
 80080f8:	6864      	ldr	r4, [r4, #4]
 80080fa:	e7b2      	b.n	8008062 <_malloc_r+0x32>
 80080fc:	4634      	mov	r4, r6
 80080fe:	6876      	ldr	r6, [r6, #4]
 8008100:	e7b9      	b.n	8008076 <_malloc_r+0x46>
 8008102:	230c      	movs	r3, #12
 8008104:	4638      	mov	r0, r7
 8008106:	603b      	str	r3, [r7, #0]
 8008108:	f000 f9d4 	bl	80084b4 <__malloc_unlock>
 800810c:	e7a1      	b.n	8008052 <_malloc_r+0x22>
 800810e:	6025      	str	r5, [r4, #0]
 8008110:	e7de      	b.n	80080d0 <_malloc_r+0xa0>
 8008112:	bf00      	nop
 8008114:	20000438 	.word	0x20000438

08008118 <__ssputs_r>:
 8008118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800811c:	688e      	ldr	r6, [r1, #8]
 800811e:	4682      	mov	sl, r0
 8008120:	429e      	cmp	r6, r3
 8008122:	460c      	mov	r4, r1
 8008124:	4690      	mov	r8, r2
 8008126:	461f      	mov	r7, r3
 8008128:	d838      	bhi.n	800819c <__ssputs_r+0x84>
 800812a:	898a      	ldrh	r2, [r1, #12]
 800812c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008130:	d032      	beq.n	8008198 <__ssputs_r+0x80>
 8008132:	6825      	ldr	r5, [r4, #0]
 8008134:	6909      	ldr	r1, [r1, #16]
 8008136:	3301      	adds	r3, #1
 8008138:	eba5 0901 	sub.w	r9, r5, r1
 800813c:	6965      	ldr	r5, [r4, #20]
 800813e:	444b      	add	r3, r9
 8008140:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008144:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008148:	106d      	asrs	r5, r5, #1
 800814a:	429d      	cmp	r5, r3
 800814c:	bf38      	it	cc
 800814e:	461d      	movcc	r5, r3
 8008150:	0553      	lsls	r3, r2, #21
 8008152:	d531      	bpl.n	80081b8 <__ssputs_r+0xa0>
 8008154:	4629      	mov	r1, r5
 8008156:	f7ff ff6b 	bl	8008030 <_malloc_r>
 800815a:	4606      	mov	r6, r0
 800815c:	b950      	cbnz	r0, 8008174 <__ssputs_r+0x5c>
 800815e:	230c      	movs	r3, #12
 8008160:	f04f 30ff 	mov.w	r0, #4294967295
 8008164:	f8ca 3000 	str.w	r3, [sl]
 8008168:	89a3      	ldrh	r3, [r4, #12]
 800816a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800816e:	81a3      	strh	r3, [r4, #12]
 8008170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008174:	464a      	mov	r2, r9
 8008176:	6921      	ldr	r1, [r4, #16]
 8008178:	f7ff fb4e 	bl	8007818 <memcpy>
 800817c:	89a3      	ldrh	r3, [r4, #12]
 800817e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008186:	81a3      	strh	r3, [r4, #12]
 8008188:	6126      	str	r6, [r4, #16]
 800818a:	444e      	add	r6, r9
 800818c:	6026      	str	r6, [r4, #0]
 800818e:	463e      	mov	r6, r7
 8008190:	6165      	str	r5, [r4, #20]
 8008192:	eba5 0509 	sub.w	r5, r5, r9
 8008196:	60a5      	str	r5, [r4, #8]
 8008198:	42be      	cmp	r6, r7
 800819a:	d900      	bls.n	800819e <__ssputs_r+0x86>
 800819c:	463e      	mov	r6, r7
 800819e:	4632      	mov	r2, r6
 80081a0:	4641      	mov	r1, r8
 80081a2:	6820      	ldr	r0, [r4, #0]
 80081a4:	f000 f966 	bl	8008474 <memmove>
 80081a8:	68a3      	ldr	r3, [r4, #8]
 80081aa:	2000      	movs	r0, #0
 80081ac:	1b9b      	subs	r3, r3, r6
 80081ae:	60a3      	str	r3, [r4, #8]
 80081b0:	6823      	ldr	r3, [r4, #0]
 80081b2:	4433      	add	r3, r6
 80081b4:	6023      	str	r3, [r4, #0]
 80081b6:	e7db      	b.n	8008170 <__ssputs_r+0x58>
 80081b8:	462a      	mov	r2, r5
 80081ba:	f000 f981 	bl	80084c0 <_realloc_r>
 80081be:	4606      	mov	r6, r0
 80081c0:	2800      	cmp	r0, #0
 80081c2:	d1e1      	bne.n	8008188 <__ssputs_r+0x70>
 80081c4:	4650      	mov	r0, sl
 80081c6:	6921      	ldr	r1, [r4, #16]
 80081c8:	f7ff feca 	bl	8007f60 <_free_r>
 80081cc:	e7c7      	b.n	800815e <__ssputs_r+0x46>
	...

080081d0 <_svfiprintf_r>:
 80081d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d4:	4698      	mov	r8, r3
 80081d6:	898b      	ldrh	r3, [r1, #12]
 80081d8:	4607      	mov	r7, r0
 80081da:	061b      	lsls	r3, r3, #24
 80081dc:	460d      	mov	r5, r1
 80081de:	4614      	mov	r4, r2
 80081e0:	b09d      	sub	sp, #116	; 0x74
 80081e2:	d50e      	bpl.n	8008202 <_svfiprintf_r+0x32>
 80081e4:	690b      	ldr	r3, [r1, #16]
 80081e6:	b963      	cbnz	r3, 8008202 <_svfiprintf_r+0x32>
 80081e8:	2140      	movs	r1, #64	; 0x40
 80081ea:	f7ff ff21 	bl	8008030 <_malloc_r>
 80081ee:	6028      	str	r0, [r5, #0]
 80081f0:	6128      	str	r0, [r5, #16]
 80081f2:	b920      	cbnz	r0, 80081fe <_svfiprintf_r+0x2e>
 80081f4:	230c      	movs	r3, #12
 80081f6:	603b      	str	r3, [r7, #0]
 80081f8:	f04f 30ff 	mov.w	r0, #4294967295
 80081fc:	e0d1      	b.n	80083a2 <_svfiprintf_r+0x1d2>
 80081fe:	2340      	movs	r3, #64	; 0x40
 8008200:	616b      	str	r3, [r5, #20]
 8008202:	2300      	movs	r3, #0
 8008204:	9309      	str	r3, [sp, #36]	; 0x24
 8008206:	2320      	movs	r3, #32
 8008208:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800820c:	2330      	movs	r3, #48	; 0x30
 800820e:	f04f 0901 	mov.w	r9, #1
 8008212:	f8cd 800c 	str.w	r8, [sp, #12]
 8008216:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80083bc <_svfiprintf_r+0x1ec>
 800821a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800821e:	4623      	mov	r3, r4
 8008220:	469a      	mov	sl, r3
 8008222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008226:	b10a      	cbz	r2, 800822c <_svfiprintf_r+0x5c>
 8008228:	2a25      	cmp	r2, #37	; 0x25
 800822a:	d1f9      	bne.n	8008220 <_svfiprintf_r+0x50>
 800822c:	ebba 0b04 	subs.w	fp, sl, r4
 8008230:	d00b      	beq.n	800824a <_svfiprintf_r+0x7a>
 8008232:	465b      	mov	r3, fp
 8008234:	4622      	mov	r2, r4
 8008236:	4629      	mov	r1, r5
 8008238:	4638      	mov	r0, r7
 800823a:	f7ff ff6d 	bl	8008118 <__ssputs_r>
 800823e:	3001      	adds	r0, #1
 8008240:	f000 80aa 	beq.w	8008398 <_svfiprintf_r+0x1c8>
 8008244:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008246:	445a      	add	r2, fp
 8008248:	9209      	str	r2, [sp, #36]	; 0x24
 800824a:	f89a 3000 	ldrb.w	r3, [sl]
 800824e:	2b00      	cmp	r3, #0
 8008250:	f000 80a2 	beq.w	8008398 <_svfiprintf_r+0x1c8>
 8008254:	2300      	movs	r3, #0
 8008256:	f04f 32ff 	mov.w	r2, #4294967295
 800825a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800825e:	f10a 0a01 	add.w	sl, sl, #1
 8008262:	9304      	str	r3, [sp, #16]
 8008264:	9307      	str	r3, [sp, #28]
 8008266:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800826a:	931a      	str	r3, [sp, #104]	; 0x68
 800826c:	4654      	mov	r4, sl
 800826e:	2205      	movs	r2, #5
 8008270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008274:	4851      	ldr	r0, [pc, #324]	; (80083bc <_svfiprintf_r+0x1ec>)
 8008276:	f7ff fac1 	bl	80077fc <memchr>
 800827a:	9a04      	ldr	r2, [sp, #16]
 800827c:	b9d8      	cbnz	r0, 80082b6 <_svfiprintf_r+0xe6>
 800827e:	06d0      	lsls	r0, r2, #27
 8008280:	bf44      	itt	mi
 8008282:	2320      	movmi	r3, #32
 8008284:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008288:	0711      	lsls	r1, r2, #28
 800828a:	bf44      	itt	mi
 800828c:	232b      	movmi	r3, #43	; 0x2b
 800828e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008292:	f89a 3000 	ldrb.w	r3, [sl]
 8008296:	2b2a      	cmp	r3, #42	; 0x2a
 8008298:	d015      	beq.n	80082c6 <_svfiprintf_r+0xf6>
 800829a:	4654      	mov	r4, sl
 800829c:	2000      	movs	r0, #0
 800829e:	f04f 0c0a 	mov.w	ip, #10
 80082a2:	9a07      	ldr	r2, [sp, #28]
 80082a4:	4621      	mov	r1, r4
 80082a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082aa:	3b30      	subs	r3, #48	; 0x30
 80082ac:	2b09      	cmp	r3, #9
 80082ae:	d94e      	bls.n	800834e <_svfiprintf_r+0x17e>
 80082b0:	b1b0      	cbz	r0, 80082e0 <_svfiprintf_r+0x110>
 80082b2:	9207      	str	r2, [sp, #28]
 80082b4:	e014      	b.n	80082e0 <_svfiprintf_r+0x110>
 80082b6:	eba0 0308 	sub.w	r3, r0, r8
 80082ba:	fa09 f303 	lsl.w	r3, r9, r3
 80082be:	4313      	orrs	r3, r2
 80082c0:	46a2      	mov	sl, r4
 80082c2:	9304      	str	r3, [sp, #16]
 80082c4:	e7d2      	b.n	800826c <_svfiprintf_r+0x9c>
 80082c6:	9b03      	ldr	r3, [sp, #12]
 80082c8:	1d19      	adds	r1, r3, #4
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	9103      	str	r1, [sp, #12]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	bfbb      	ittet	lt
 80082d2:	425b      	neglt	r3, r3
 80082d4:	f042 0202 	orrlt.w	r2, r2, #2
 80082d8:	9307      	strge	r3, [sp, #28]
 80082da:	9307      	strlt	r3, [sp, #28]
 80082dc:	bfb8      	it	lt
 80082de:	9204      	strlt	r2, [sp, #16]
 80082e0:	7823      	ldrb	r3, [r4, #0]
 80082e2:	2b2e      	cmp	r3, #46	; 0x2e
 80082e4:	d10c      	bne.n	8008300 <_svfiprintf_r+0x130>
 80082e6:	7863      	ldrb	r3, [r4, #1]
 80082e8:	2b2a      	cmp	r3, #42	; 0x2a
 80082ea:	d135      	bne.n	8008358 <_svfiprintf_r+0x188>
 80082ec:	9b03      	ldr	r3, [sp, #12]
 80082ee:	3402      	adds	r4, #2
 80082f0:	1d1a      	adds	r2, r3, #4
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	9203      	str	r2, [sp, #12]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	bfb8      	it	lt
 80082fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80082fe:	9305      	str	r3, [sp, #20]
 8008300:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80083c0 <_svfiprintf_r+0x1f0>
 8008304:	2203      	movs	r2, #3
 8008306:	4650      	mov	r0, sl
 8008308:	7821      	ldrb	r1, [r4, #0]
 800830a:	f7ff fa77 	bl	80077fc <memchr>
 800830e:	b140      	cbz	r0, 8008322 <_svfiprintf_r+0x152>
 8008310:	2340      	movs	r3, #64	; 0x40
 8008312:	eba0 000a 	sub.w	r0, r0, sl
 8008316:	fa03 f000 	lsl.w	r0, r3, r0
 800831a:	9b04      	ldr	r3, [sp, #16]
 800831c:	3401      	adds	r4, #1
 800831e:	4303      	orrs	r3, r0
 8008320:	9304      	str	r3, [sp, #16]
 8008322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008326:	2206      	movs	r2, #6
 8008328:	4826      	ldr	r0, [pc, #152]	; (80083c4 <_svfiprintf_r+0x1f4>)
 800832a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800832e:	f7ff fa65 	bl	80077fc <memchr>
 8008332:	2800      	cmp	r0, #0
 8008334:	d038      	beq.n	80083a8 <_svfiprintf_r+0x1d8>
 8008336:	4b24      	ldr	r3, [pc, #144]	; (80083c8 <_svfiprintf_r+0x1f8>)
 8008338:	bb1b      	cbnz	r3, 8008382 <_svfiprintf_r+0x1b2>
 800833a:	9b03      	ldr	r3, [sp, #12]
 800833c:	3307      	adds	r3, #7
 800833e:	f023 0307 	bic.w	r3, r3, #7
 8008342:	3308      	adds	r3, #8
 8008344:	9303      	str	r3, [sp, #12]
 8008346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008348:	4433      	add	r3, r6
 800834a:	9309      	str	r3, [sp, #36]	; 0x24
 800834c:	e767      	b.n	800821e <_svfiprintf_r+0x4e>
 800834e:	460c      	mov	r4, r1
 8008350:	2001      	movs	r0, #1
 8008352:	fb0c 3202 	mla	r2, ip, r2, r3
 8008356:	e7a5      	b.n	80082a4 <_svfiprintf_r+0xd4>
 8008358:	2300      	movs	r3, #0
 800835a:	f04f 0c0a 	mov.w	ip, #10
 800835e:	4619      	mov	r1, r3
 8008360:	3401      	adds	r4, #1
 8008362:	9305      	str	r3, [sp, #20]
 8008364:	4620      	mov	r0, r4
 8008366:	f810 2b01 	ldrb.w	r2, [r0], #1
 800836a:	3a30      	subs	r2, #48	; 0x30
 800836c:	2a09      	cmp	r2, #9
 800836e:	d903      	bls.n	8008378 <_svfiprintf_r+0x1a8>
 8008370:	2b00      	cmp	r3, #0
 8008372:	d0c5      	beq.n	8008300 <_svfiprintf_r+0x130>
 8008374:	9105      	str	r1, [sp, #20]
 8008376:	e7c3      	b.n	8008300 <_svfiprintf_r+0x130>
 8008378:	4604      	mov	r4, r0
 800837a:	2301      	movs	r3, #1
 800837c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008380:	e7f0      	b.n	8008364 <_svfiprintf_r+0x194>
 8008382:	ab03      	add	r3, sp, #12
 8008384:	9300      	str	r3, [sp, #0]
 8008386:	462a      	mov	r2, r5
 8008388:	4638      	mov	r0, r7
 800838a:	4b10      	ldr	r3, [pc, #64]	; (80083cc <_svfiprintf_r+0x1fc>)
 800838c:	a904      	add	r1, sp, #16
 800838e:	f7fd ff2b 	bl	80061e8 <_printf_float>
 8008392:	1c42      	adds	r2, r0, #1
 8008394:	4606      	mov	r6, r0
 8008396:	d1d6      	bne.n	8008346 <_svfiprintf_r+0x176>
 8008398:	89ab      	ldrh	r3, [r5, #12]
 800839a:	065b      	lsls	r3, r3, #25
 800839c:	f53f af2c 	bmi.w	80081f8 <_svfiprintf_r+0x28>
 80083a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083a2:	b01d      	add	sp, #116	; 0x74
 80083a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083a8:	ab03      	add	r3, sp, #12
 80083aa:	9300      	str	r3, [sp, #0]
 80083ac:	462a      	mov	r2, r5
 80083ae:	4638      	mov	r0, r7
 80083b0:	4b06      	ldr	r3, [pc, #24]	; (80083cc <_svfiprintf_r+0x1fc>)
 80083b2:	a904      	add	r1, sp, #16
 80083b4:	f7fe f9b4 	bl	8006720 <_printf_i>
 80083b8:	e7eb      	b.n	8008392 <_svfiprintf_r+0x1c2>
 80083ba:	bf00      	nop
 80083bc:	08009364 	.word	0x08009364
 80083c0:	0800936a 	.word	0x0800936a
 80083c4:	0800936e 	.word	0x0800936e
 80083c8:	080061e9 	.word	0x080061e9
 80083cc:	08008119 	.word	0x08008119

080083d0 <_sbrk_r>:
 80083d0:	b538      	push	{r3, r4, r5, lr}
 80083d2:	2300      	movs	r3, #0
 80083d4:	4d05      	ldr	r5, [pc, #20]	; (80083ec <_sbrk_r+0x1c>)
 80083d6:	4604      	mov	r4, r0
 80083d8:	4608      	mov	r0, r1
 80083da:	602b      	str	r3, [r5, #0]
 80083dc:	f7fa f84c 	bl	8002478 <_sbrk>
 80083e0:	1c43      	adds	r3, r0, #1
 80083e2:	d102      	bne.n	80083ea <_sbrk_r+0x1a>
 80083e4:	682b      	ldr	r3, [r5, #0]
 80083e6:	b103      	cbz	r3, 80083ea <_sbrk_r+0x1a>
 80083e8:	6023      	str	r3, [r4, #0]
 80083ea:	bd38      	pop	{r3, r4, r5, pc}
 80083ec:	20000440 	.word	0x20000440

080083f0 <__assert_func>:
 80083f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083f2:	4614      	mov	r4, r2
 80083f4:	461a      	mov	r2, r3
 80083f6:	4b09      	ldr	r3, [pc, #36]	; (800841c <__assert_func+0x2c>)
 80083f8:	4605      	mov	r5, r0
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	68d8      	ldr	r0, [r3, #12]
 80083fe:	b14c      	cbz	r4, 8008414 <__assert_func+0x24>
 8008400:	4b07      	ldr	r3, [pc, #28]	; (8008420 <__assert_func+0x30>)
 8008402:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008406:	9100      	str	r1, [sp, #0]
 8008408:	462b      	mov	r3, r5
 800840a:	4906      	ldr	r1, [pc, #24]	; (8008424 <__assert_func+0x34>)
 800840c:	f000 f80e 	bl	800842c <fiprintf>
 8008410:	f000 faaa 	bl	8008968 <abort>
 8008414:	4b04      	ldr	r3, [pc, #16]	; (8008428 <__assert_func+0x38>)
 8008416:	461c      	mov	r4, r3
 8008418:	e7f3      	b.n	8008402 <__assert_func+0x12>
 800841a:	bf00      	nop
 800841c:	20000040 	.word	0x20000040
 8008420:	08009375 	.word	0x08009375
 8008424:	08009382 	.word	0x08009382
 8008428:	080093b0 	.word	0x080093b0

0800842c <fiprintf>:
 800842c:	b40e      	push	{r1, r2, r3}
 800842e:	b503      	push	{r0, r1, lr}
 8008430:	4601      	mov	r1, r0
 8008432:	ab03      	add	r3, sp, #12
 8008434:	4805      	ldr	r0, [pc, #20]	; (800844c <fiprintf+0x20>)
 8008436:	f853 2b04 	ldr.w	r2, [r3], #4
 800843a:	6800      	ldr	r0, [r0, #0]
 800843c:	9301      	str	r3, [sp, #4]
 800843e:	f000 f895 	bl	800856c <_vfiprintf_r>
 8008442:	b002      	add	sp, #8
 8008444:	f85d eb04 	ldr.w	lr, [sp], #4
 8008448:	b003      	add	sp, #12
 800844a:	4770      	bx	lr
 800844c:	20000040 	.word	0x20000040

08008450 <__ascii_mbtowc>:
 8008450:	b082      	sub	sp, #8
 8008452:	b901      	cbnz	r1, 8008456 <__ascii_mbtowc+0x6>
 8008454:	a901      	add	r1, sp, #4
 8008456:	b142      	cbz	r2, 800846a <__ascii_mbtowc+0x1a>
 8008458:	b14b      	cbz	r3, 800846e <__ascii_mbtowc+0x1e>
 800845a:	7813      	ldrb	r3, [r2, #0]
 800845c:	600b      	str	r3, [r1, #0]
 800845e:	7812      	ldrb	r2, [r2, #0]
 8008460:	1e10      	subs	r0, r2, #0
 8008462:	bf18      	it	ne
 8008464:	2001      	movne	r0, #1
 8008466:	b002      	add	sp, #8
 8008468:	4770      	bx	lr
 800846a:	4610      	mov	r0, r2
 800846c:	e7fb      	b.n	8008466 <__ascii_mbtowc+0x16>
 800846e:	f06f 0001 	mvn.w	r0, #1
 8008472:	e7f8      	b.n	8008466 <__ascii_mbtowc+0x16>

08008474 <memmove>:
 8008474:	4288      	cmp	r0, r1
 8008476:	b510      	push	{r4, lr}
 8008478:	eb01 0402 	add.w	r4, r1, r2
 800847c:	d902      	bls.n	8008484 <memmove+0x10>
 800847e:	4284      	cmp	r4, r0
 8008480:	4623      	mov	r3, r4
 8008482:	d807      	bhi.n	8008494 <memmove+0x20>
 8008484:	1e43      	subs	r3, r0, #1
 8008486:	42a1      	cmp	r1, r4
 8008488:	d008      	beq.n	800849c <memmove+0x28>
 800848a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800848e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008492:	e7f8      	b.n	8008486 <memmove+0x12>
 8008494:	4601      	mov	r1, r0
 8008496:	4402      	add	r2, r0
 8008498:	428a      	cmp	r2, r1
 800849a:	d100      	bne.n	800849e <memmove+0x2a>
 800849c:	bd10      	pop	{r4, pc}
 800849e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80084a6:	e7f7      	b.n	8008498 <memmove+0x24>

080084a8 <__malloc_lock>:
 80084a8:	4801      	ldr	r0, [pc, #4]	; (80084b0 <__malloc_lock+0x8>)
 80084aa:	f000 bc19 	b.w	8008ce0 <__retarget_lock_acquire_recursive>
 80084ae:	bf00      	nop
 80084b0:	20000444 	.word	0x20000444

080084b4 <__malloc_unlock>:
 80084b4:	4801      	ldr	r0, [pc, #4]	; (80084bc <__malloc_unlock+0x8>)
 80084b6:	f000 bc14 	b.w	8008ce2 <__retarget_lock_release_recursive>
 80084ba:	bf00      	nop
 80084bc:	20000444 	.word	0x20000444

080084c0 <_realloc_r>:
 80084c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084c4:	4680      	mov	r8, r0
 80084c6:	4614      	mov	r4, r2
 80084c8:	460e      	mov	r6, r1
 80084ca:	b921      	cbnz	r1, 80084d6 <_realloc_r+0x16>
 80084cc:	4611      	mov	r1, r2
 80084ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084d2:	f7ff bdad 	b.w	8008030 <_malloc_r>
 80084d6:	b92a      	cbnz	r2, 80084e4 <_realloc_r+0x24>
 80084d8:	f7ff fd42 	bl	8007f60 <_free_r>
 80084dc:	4625      	mov	r5, r4
 80084de:	4628      	mov	r0, r5
 80084e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084e4:	f000 fc64 	bl	8008db0 <_malloc_usable_size_r>
 80084e8:	4284      	cmp	r4, r0
 80084ea:	4607      	mov	r7, r0
 80084ec:	d802      	bhi.n	80084f4 <_realloc_r+0x34>
 80084ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80084f2:	d812      	bhi.n	800851a <_realloc_r+0x5a>
 80084f4:	4621      	mov	r1, r4
 80084f6:	4640      	mov	r0, r8
 80084f8:	f7ff fd9a 	bl	8008030 <_malloc_r>
 80084fc:	4605      	mov	r5, r0
 80084fe:	2800      	cmp	r0, #0
 8008500:	d0ed      	beq.n	80084de <_realloc_r+0x1e>
 8008502:	42bc      	cmp	r4, r7
 8008504:	4622      	mov	r2, r4
 8008506:	4631      	mov	r1, r6
 8008508:	bf28      	it	cs
 800850a:	463a      	movcs	r2, r7
 800850c:	f7ff f984 	bl	8007818 <memcpy>
 8008510:	4631      	mov	r1, r6
 8008512:	4640      	mov	r0, r8
 8008514:	f7ff fd24 	bl	8007f60 <_free_r>
 8008518:	e7e1      	b.n	80084de <_realloc_r+0x1e>
 800851a:	4635      	mov	r5, r6
 800851c:	e7df      	b.n	80084de <_realloc_r+0x1e>

0800851e <__sfputc_r>:
 800851e:	6893      	ldr	r3, [r2, #8]
 8008520:	b410      	push	{r4}
 8008522:	3b01      	subs	r3, #1
 8008524:	2b00      	cmp	r3, #0
 8008526:	6093      	str	r3, [r2, #8]
 8008528:	da07      	bge.n	800853a <__sfputc_r+0x1c>
 800852a:	6994      	ldr	r4, [r2, #24]
 800852c:	42a3      	cmp	r3, r4
 800852e:	db01      	blt.n	8008534 <__sfputc_r+0x16>
 8008530:	290a      	cmp	r1, #10
 8008532:	d102      	bne.n	800853a <__sfputc_r+0x1c>
 8008534:	bc10      	pop	{r4}
 8008536:	f000 b949 	b.w	80087cc <__swbuf_r>
 800853a:	6813      	ldr	r3, [r2, #0]
 800853c:	1c58      	adds	r0, r3, #1
 800853e:	6010      	str	r0, [r2, #0]
 8008540:	7019      	strb	r1, [r3, #0]
 8008542:	4608      	mov	r0, r1
 8008544:	bc10      	pop	{r4}
 8008546:	4770      	bx	lr

08008548 <__sfputs_r>:
 8008548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854a:	4606      	mov	r6, r0
 800854c:	460f      	mov	r7, r1
 800854e:	4614      	mov	r4, r2
 8008550:	18d5      	adds	r5, r2, r3
 8008552:	42ac      	cmp	r4, r5
 8008554:	d101      	bne.n	800855a <__sfputs_r+0x12>
 8008556:	2000      	movs	r0, #0
 8008558:	e007      	b.n	800856a <__sfputs_r+0x22>
 800855a:	463a      	mov	r2, r7
 800855c:	4630      	mov	r0, r6
 800855e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008562:	f7ff ffdc 	bl	800851e <__sfputc_r>
 8008566:	1c43      	adds	r3, r0, #1
 8008568:	d1f3      	bne.n	8008552 <__sfputs_r+0xa>
 800856a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800856c <_vfiprintf_r>:
 800856c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008570:	460d      	mov	r5, r1
 8008572:	4614      	mov	r4, r2
 8008574:	4698      	mov	r8, r3
 8008576:	4606      	mov	r6, r0
 8008578:	b09d      	sub	sp, #116	; 0x74
 800857a:	b118      	cbz	r0, 8008584 <_vfiprintf_r+0x18>
 800857c:	6983      	ldr	r3, [r0, #24]
 800857e:	b90b      	cbnz	r3, 8008584 <_vfiprintf_r+0x18>
 8008580:	f000 fb10 	bl	8008ba4 <__sinit>
 8008584:	4b89      	ldr	r3, [pc, #548]	; (80087ac <_vfiprintf_r+0x240>)
 8008586:	429d      	cmp	r5, r3
 8008588:	d11b      	bne.n	80085c2 <_vfiprintf_r+0x56>
 800858a:	6875      	ldr	r5, [r6, #4]
 800858c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800858e:	07d9      	lsls	r1, r3, #31
 8008590:	d405      	bmi.n	800859e <_vfiprintf_r+0x32>
 8008592:	89ab      	ldrh	r3, [r5, #12]
 8008594:	059a      	lsls	r2, r3, #22
 8008596:	d402      	bmi.n	800859e <_vfiprintf_r+0x32>
 8008598:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800859a:	f000 fba1 	bl	8008ce0 <__retarget_lock_acquire_recursive>
 800859e:	89ab      	ldrh	r3, [r5, #12]
 80085a0:	071b      	lsls	r3, r3, #28
 80085a2:	d501      	bpl.n	80085a8 <_vfiprintf_r+0x3c>
 80085a4:	692b      	ldr	r3, [r5, #16]
 80085a6:	b9eb      	cbnz	r3, 80085e4 <_vfiprintf_r+0x78>
 80085a8:	4629      	mov	r1, r5
 80085aa:	4630      	mov	r0, r6
 80085ac:	f000 f96e 	bl	800888c <__swsetup_r>
 80085b0:	b1c0      	cbz	r0, 80085e4 <_vfiprintf_r+0x78>
 80085b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085b4:	07dc      	lsls	r4, r3, #31
 80085b6:	d50e      	bpl.n	80085d6 <_vfiprintf_r+0x6a>
 80085b8:	f04f 30ff 	mov.w	r0, #4294967295
 80085bc:	b01d      	add	sp, #116	; 0x74
 80085be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c2:	4b7b      	ldr	r3, [pc, #492]	; (80087b0 <_vfiprintf_r+0x244>)
 80085c4:	429d      	cmp	r5, r3
 80085c6:	d101      	bne.n	80085cc <_vfiprintf_r+0x60>
 80085c8:	68b5      	ldr	r5, [r6, #8]
 80085ca:	e7df      	b.n	800858c <_vfiprintf_r+0x20>
 80085cc:	4b79      	ldr	r3, [pc, #484]	; (80087b4 <_vfiprintf_r+0x248>)
 80085ce:	429d      	cmp	r5, r3
 80085d0:	bf08      	it	eq
 80085d2:	68f5      	ldreq	r5, [r6, #12]
 80085d4:	e7da      	b.n	800858c <_vfiprintf_r+0x20>
 80085d6:	89ab      	ldrh	r3, [r5, #12]
 80085d8:	0598      	lsls	r0, r3, #22
 80085da:	d4ed      	bmi.n	80085b8 <_vfiprintf_r+0x4c>
 80085dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085de:	f000 fb80 	bl	8008ce2 <__retarget_lock_release_recursive>
 80085e2:	e7e9      	b.n	80085b8 <_vfiprintf_r+0x4c>
 80085e4:	2300      	movs	r3, #0
 80085e6:	9309      	str	r3, [sp, #36]	; 0x24
 80085e8:	2320      	movs	r3, #32
 80085ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085ee:	2330      	movs	r3, #48	; 0x30
 80085f0:	f04f 0901 	mov.w	r9, #1
 80085f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80085f8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80087b8 <_vfiprintf_r+0x24c>
 80085fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008600:	4623      	mov	r3, r4
 8008602:	469a      	mov	sl, r3
 8008604:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008608:	b10a      	cbz	r2, 800860e <_vfiprintf_r+0xa2>
 800860a:	2a25      	cmp	r2, #37	; 0x25
 800860c:	d1f9      	bne.n	8008602 <_vfiprintf_r+0x96>
 800860e:	ebba 0b04 	subs.w	fp, sl, r4
 8008612:	d00b      	beq.n	800862c <_vfiprintf_r+0xc0>
 8008614:	465b      	mov	r3, fp
 8008616:	4622      	mov	r2, r4
 8008618:	4629      	mov	r1, r5
 800861a:	4630      	mov	r0, r6
 800861c:	f7ff ff94 	bl	8008548 <__sfputs_r>
 8008620:	3001      	adds	r0, #1
 8008622:	f000 80aa 	beq.w	800877a <_vfiprintf_r+0x20e>
 8008626:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008628:	445a      	add	r2, fp
 800862a:	9209      	str	r2, [sp, #36]	; 0x24
 800862c:	f89a 3000 	ldrb.w	r3, [sl]
 8008630:	2b00      	cmp	r3, #0
 8008632:	f000 80a2 	beq.w	800877a <_vfiprintf_r+0x20e>
 8008636:	2300      	movs	r3, #0
 8008638:	f04f 32ff 	mov.w	r2, #4294967295
 800863c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008640:	f10a 0a01 	add.w	sl, sl, #1
 8008644:	9304      	str	r3, [sp, #16]
 8008646:	9307      	str	r3, [sp, #28]
 8008648:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800864c:	931a      	str	r3, [sp, #104]	; 0x68
 800864e:	4654      	mov	r4, sl
 8008650:	2205      	movs	r2, #5
 8008652:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008656:	4858      	ldr	r0, [pc, #352]	; (80087b8 <_vfiprintf_r+0x24c>)
 8008658:	f7ff f8d0 	bl	80077fc <memchr>
 800865c:	9a04      	ldr	r2, [sp, #16]
 800865e:	b9d8      	cbnz	r0, 8008698 <_vfiprintf_r+0x12c>
 8008660:	06d1      	lsls	r1, r2, #27
 8008662:	bf44      	itt	mi
 8008664:	2320      	movmi	r3, #32
 8008666:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800866a:	0713      	lsls	r3, r2, #28
 800866c:	bf44      	itt	mi
 800866e:	232b      	movmi	r3, #43	; 0x2b
 8008670:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008674:	f89a 3000 	ldrb.w	r3, [sl]
 8008678:	2b2a      	cmp	r3, #42	; 0x2a
 800867a:	d015      	beq.n	80086a8 <_vfiprintf_r+0x13c>
 800867c:	4654      	mov	r4, sl
 800867e:	2000      	movs	r0, #0
 8008680:	f04f 0c0a 	mov.w	ip, #10
 8008684:	9a07      	ldr	r2, [sp, #28]
 8008686:	4621      	mov	r1, r4
 8008688:	f811 3b01 	ldrb.w	r3, [r1], #1
 800868c:	3b30      	subs	r3, #48	; 0x30
 800868e:	2b09      	cmp	r3, #9
 8008690:	d94e      	bls.n	8008730 <_vfiprintf_r+0x1c4>
 8008692:	b1b0      	cbz	r0, 80086c2 <_vfiprintf_r+0x156>
 8008694:	9207      	str	r2, [sp, #28]
 8008696:	e014      	b.n	80086c2 <_vfiprintf_r+0x156>
 8008698:	eba0 0308 	sub.w	r3, r0, r8
 800869c:	fa09 f303 	lsl.w	r3, r9, r3
 80086a0:	4313      	orrs	r3, r2
 80086a2:	46a2      	mov	sl, r4
 80086a4:	9304      	str	r3, [sp, #16]
 80086a6:	e7d2      	b.n	800864e <_vfiprintf_r+0xe2>
 80086a8:	9b03      	ldr	r3, [sp, #12]
 80086aa:	1d19      	adds	r1, r3, #4
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	9103      	str	r1, [sp, #12]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	bfbb      	ittet	lt
 80086b4:	425b      	neglt	r3, r3
 80086b6:	f042 0202 	orrlt.w	r2, r2, #2
 80086ba:	9307      	strge	r3, [sp, #28]
 80086bc:	9307      	strlt	r3, [sp, #28]
 80086be:	bfb8      	it	lt
 80086c0:	9204      	strlt	r2, [sp, #16]
 80086c2:	7823      	ldrb	r3, [r4, #0]
 80086c4:	2b2e      	cmp	r3, #46	; 0x2e
 80086c6:	d10c      	bne.n	80086e2 <_vfiprintf_r+0x176>
 80086c8:	7863      	ldrb	r3, [r4, #1]
 80086ca:	2b2a      	cmp	r3, #42	; 0x2a
 80086cc:	d135      	bne.n	800873a <_vfiprintf_r+0x1ce>
 80086ce:	9b03      	ldr	r3, [sp, #12]
 80086d0:	3402      	adds	r4, #2
 80086d2:	1d1a      	adds	r2, r3, #4
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	9203      	str	r2, [sp, #12]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	bfb8      	it	lt
 80086dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80086e0:	9305      	str	r3, [sp, #20]
 80086e2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80087bc <_vfiprintf_r+0x250>
 80086e6:	2203      	movs	r2, #3
 80086e8:	4650      	mov	r0, sl
 80086ea:	7821      	ldrb	r1, [r4, #0]
 80086ec:	f7ff f886 	bl	80077fc <memchr>
 80086f0:	b140      	cbz	r0, 8008704 <_vfiprintf_r+0x198>
 80086f2:	2340      	movs	r3, #64	; 0x40
 80086f4:	eba0 000a 	sub.w	r0, r0, sl
 80086f8:	fa03 f000 	lsl.w	r0, r3, r0
 80086fc:	9b04      	ldr	r3, [sp, #16]
 80086fe:	3401      	adds	r4, #1
 8008700:	4303      	orrs	r3, r0
 8008702:	9304      	str	r3, [sp, #16]
 8008704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008708:	2206      	movs	r2, #6
 800870a:	482d      	ldr	r0, [pc, #180]	; (80087c0 <_vfiprintf_r+0x254>)
 800870c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008710:	f7ff f874 	bl	80077fc <memchr>
 8008714:	2800      	cmp	r0, #0
 8008716:	d03f      	beq.n	8008798 <_vfiprintf_r+0x22c>
 8008718:	4b2a      	ldr	r3, [pc, #168]	; (80087c4 <_vfiprintf_r+0x258>)
 800871a:	bb1b      	cbnz	r3, 8008764 <_vfiprintf_r+0x1f8>
 800871c:	9b03      	ldr	r3, [sp, #12]
 800871e:	3307      	adds	r3, #7
 8008720:	f023 0307 	bic.w	r3, r3, #7
 8008724:	3308      	adds	r3, #8
 8008726:	9303      	str	r3, [sp, #12]
 8008728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800872a:	443b      	add	r3, r7
 800872c:	9309      	str	r3, [sp, #36]	; 0x24
 800872e:	e767      	b.n	8008600 <_vfiprintf_r+0x94>
 8008730:	460c      	mov	r4, r1
 8008732:	2001      	movs	r0, #1
 8008734:	fb0c 3202 	mla	r2, ip, r2, r3
 8008738:	e7a5      	b.n	8008686 <_vfiprintf_r+0x11a>
 800873a:	2300      	movs	r3, #0
 800873c:	f04f 0c0a 	mov.w	ip, #10
 8008740:	4619      	mov	r1, r3
 8008742:	3401      	adds	r4, #1
 8008744:	9305      	str	r3, [sp, #20]
 8008746:	4620      	mov	r0, r4
 8008748:	f810 2b01 	ldrb.w	r2, [r0], #1
 800874c:	3a30      	subs	r2, #48	; 0x30
 800874e:	2a09      	cmp	r2, #9
 8008750:	d903      	bls.n	800875a <_vfiprintf_r+0x1ee>
 8008752:	2b00      	cmp	r3, #0
 8008754:	d0c5      	beq.n	80086e2 <_vfiprintf_r+0x176>
 8008756:	9105      	str	r1, [sp, #20]
 8008758:	e7c3      	b.n	80086e2 <_vfiprintf_r+0x176>
 800875a:	4604      	mov	r4, r0
 800875c:	2301      	movs	r3, #1
 800875e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008762:	e7f0      	b.n	8008746 <_vfiprintf_r+0x1da>
 8008764:	ab03      	add	r3, sp, #12
 8008766:	9300      	str	r3, [sp, #0]
 8008768:	462a      	mov	r2, r5
 800876a:	4630      	mov	r0, r6
 800876c:	4b16      	ldr	r3, [pc, #88]	; (80087c8 <_vfiprintf_r+0x25c>)
 800876e:	a904      	add	r1, sp, #16
 8008770:	f7fd fd3a 	bl	80061e8 <_printf_float>
 8008774:	4607      	mov	r7, r0
 8008776:	1c78      	adds	r0, r7, #1
 8008778:	d1d6      	bne.n	8008728 <_vfiprintf_r+0x1bc>
 800877a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800877c:	07d9      	lsls	r1, r3, #31
 800877e:	d405      	bmi.n	800878c <_vfiprintf_r+0x220>
 8008780:	89ab      	ldrh	r3, [r5, #12]
 8008782:	059a      	lsls	r2, r3, #22
 8008784:	d402      	bmi.n	800878c <_vfiprintf_r+0x220>
 8008786:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008788:	f000 faab 	bl	8008ce2 <__retarget_lock_release_recursive>
 800878c:	89ab      	ldrh	r3, [r5, #12]
 800878e:	065b      	lsls	r3, r3, #25
 8008790:	f53f af12 	bmi.w	80085b8 <_vfiprintf_r+0x4c>
 8008794:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008796:	e711      	b.n	80085bc <_vfiprintf_r+0x50>
 8008798:	ab03      	add	r3, sp, #12
 800879a:	9300      	str	r3, [sp, #0]
 800879c:	462a      	mov	r2, r5
 800879e:	4630      	mov	r0, r6
 80087a0:	4b09      	ldr	r3, [pc, #36]	; (80087c8 <_vfiprintf_r+0x25c>)
 80087a2:	a904      	add	r1, sp, #16
 80087a4:	f7fd ffbc 	bl	8006720 <_printf_i>
 80087a8:	e7e4      	b.n	8008774 <_vfiprintf_r+0x208>
 80087aa:	bf00      	nop
 80087ac:	080093dc 	.word	0x080093dc
 80087b0:	080093fc 	.word	0x080093fc
 80087b4:	080093bc 	.word	0x080093bc
 80087b8:	08009364 	.word	0x08009364
 80087bc:	0800936a 	.word	0x0800936a
 80087c0:	0800936e 	.word	0x0800936e
 80087c4:	080061e9 	.word	0x080061e9
 80087c8:	08008549 	.word	0x08008549

080087cc <__swbuf_r>:
 80087cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ce:	460e      	mov	r6, r1
 80087d0:	4614      	mov	r4, r2
 80087d2:	4605      	mov	r5, r0
 80087d4:	b118      	cbz	r0, 80087de <__swbuf_r+0x12>
 80087d6:	6983      	ldr	r3, [r0, #24]
 80087d8:	b90b      	cbnz	r3, 80087de <__swbuf_r+0x12>
 80087da:	f000 f9e3 	bl	8008ba4 <__sinit>
 80087de:	4b21      	ldr	r3, [pc, #132]	; (8008864 <__swbuf_r+0x98>)
 80087e0:	429c      	cmp	r4, r3
 80087e2:	d12b      	bne.n	800883c <__swbuf_r+0x70>
 80087e4:	686c      	ldr	r4, [r5, #4]
 80087e6:	69a3      	ldr	r3, [r4, #24]
 80087e8:	60a3      	str	r3, [r4, #8]
 80087ea:	89a3      	ldrh	r3, [r4, #12]
 80087ec:	071a      	lsls	r2, r3, #28
 80087ee:	d52f      	bpl.n	8008850 <__swbuf_r+0x84>
 80087f0:	6923      	ldr	r3, [r4, #16]
 80087f2:	b36b      	cbz	r3, 8008850 <__swbuf_r+0x84>
 80087f4:	6923      	ldr	r3, [r4, #16]
 80087f6:	6820      	ldr	r0, [r4, #0]
 80087f8:	b2f6      	uxtb	r6, r6
 80087fa:	1ac0      	subs	r0, r0, r3
 80087fc:	6963      	ldr	r3, [r4, #20]
 80087fe:	4637      	mov	r7, r6
 8008800:	4283      	cmp	r3, r0
 8008802:	dc04      	bgt.n	800880e <__swbuf_r+0x42>
 8008804:	4621      	mov	r1, r4
 8008806:	4628      	mov	r0, r5
 8008808:	f000 f938 	bl	8008a7c <_fflush_r>
 800880c:	bb30      	cbnz	r0, 800885c <__swbuf_r+0x90>
 800880e:	68a3      	ldr	r3, [r4, #8]
 8008810:	3001      	adds	r0, #1
 8008812:	3b01      	subs	r3, #1
 8008814:	60a3      	str	r3, [r4, #8]
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	1c5a      	adds	r2, r3, #1
 800881a:	6022      	str	r2, [r4, #0]
 800881c:	701e      	strb	r6, [r3, #0]
 800881e:	6963      	ldr	r3, [r4, #20]
 8008820:	4283      	cmp	r3, r0
 8008822:	d004      	beq.n	800882e <__swbuf_r+0x62>
 8008824:	89a3      	ldrh	r3, [r4, #12]
 8008826:	07db      	lsls	r3, r3, #31
 8008828:	d506      	bpl.n	8008838 <__swbuf_r+0x6c>
 800882a:	2e0a      	cmp	r6, #10
 800882c:	d104      	bne.n	8008838 <__swbuf_r+0x6c>
 800882e:	4621      	mov	r1, r4
 8008830:	4628      	mov	r0, r5
 8008832:	f000 f923 	bl	8008a7c <_fflush_r>
 8008836:	b988      	cbnz	r0, 800885c <__swbuf_r+0x90>
 8008838:	4638      	mov	r0, r7
 800883a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800883c:	4b0a      	ldr	r3, [pc, #40]	; (8008868 <__swbuf_r+0x9c>)
 800883e:	429c      	cmp	r4, r3
 8008840:	d101      	bne.n	8008846 <__swbuf_r+0x7a>
 8008842:	68ac      	ldr	r4, [r5, #8]
 8008844:	e7cf      	b.n	80087e6 <__swbuf_r+0x1a>
 8008846:	4b09      	ldr	r3, [pc, #36]	; (800886c <__swbuf_r+0xa0>)
 8008848:	429c      	cmp	r4, r3
 800884a:	bf08      	it	eq
 800884c:	68ec      	ldreq	r4, [r5, #12]
 800884e:	e7ca      	b.n	80087e6 <__swbuf_r+0x1a>
 8008850:	4621      	mov	r1, r4
 8008852:	4628      	mov	r0, r5
 8008854:	f000 f81a 	bl	800888c <__swsetup_r>
 8008858:	2800      	cmp	r0, #0
 800885a:	d0cb      	beq.n	80087f4 <__swbuf_r+0x28>
 800885c:	f04f 37ff 	mov.w	r7, #4294967295
 8008860:	e7ea      	b.n	8008838 <__swbuf_r+0x6c>
 8008862:	bf00      	nop
 8008864:	080093dc 	.word	0x080093dc
 8008868:	080093fc 	.word	0x080093fc
 800886c:	080093bc 	.word	0x080093bc

08008870 <__ascii_wctomb>:
 8008870:	4603      	mov	r3, r0
 8008872:	4608      	mov	r0, r1
 8008874:	b141      	cbz	r1, 8008888 <__ascii_wctomb+0x18>
 8008876:	2aff      	cmp	r2, #255	; 0xff
 8008878:	d904      	bls.n	8008884 <__ascii_wctomb+0x14>
 800887a:	228a      	movs	r2, #138	; 0x8a
 800887c:	f04f 30ff 	mov.w	r0, #4294967295
 8008880:	601a      	str	r2, [r3, #0]
 8008882:	4770      	bx	lr
 8008884:	2001      	movs	r0, #1
 8008886:	700a      	strb	r2, [r1, #0]
 8008888:	4770      	bx	lr
	...

0800888c <__swsetup_r>:
 800888c:	4b32      	ldr	r3, [pc, #200]	; (8008958 <__swsetup_r+0xcc>)
 800888e:	b570      	push	{r4, r5, r6, lr}
 8008890:	681d      	ldr	r5, [r3, #0]
 8008892:	4606      	mov	r6, r0
 8008894:	460c      	mov	r4, r1
 8008896:	b125      	cbz	r5, 80088a2 <__swsetup_r+0x16>
 8008898:	69ab      	ldr	r3, [r5, #24]
 800889a:	b913      	cbnz	r3, 80088a2 <__swsetup_r+0x16>
 800889c:	4628      	mov	r0, r5
 800889e:	f000 f981 	bl	8008ba4 <__sinit>
 80088a2:	4b2e      	ldr	r3, [pc, #184]	; (800895c <__swsetup_r+0xd0>)
 80088a4:	429c      	cmp	r4, r3
 80088a6:	d10f      	bne.n	80088c8 <__swsetup_r+0x3c>
 80088a8:	686c      	ldr	r4, [r5, #4]
 80088aa:	89a3      	ldrh	r3, [r4, #12]
 80088ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088b0:	0719      	lsls	r1, r3, #28
 80088b2:	d42c      	bmi.n	800890e <__swsetup_r+0x82>
 80088b4:	06dd      	lsls	r5, r3, #27
 80088b6:	d411      	bmi.n	80088dc <__swsetup_r+0x50>
 80088b8:	2309      	movs	r3, #9
 80088ba:	6033      	str	r3, [r6, #0]
 80088bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80088c0:	f04f 30ff 	mov.w	r0, #4294967295
 80088c4:	81a3      	strh	r3, [r4, #12]
 80088c6:	e03e      	b.n	8008946 <__swsetup_r+0xba>
 80088c8:	4b25      	ldr	r3, [pc, #148]	; (8008960 <__swsetup_r+0xd4>)
 80088ca:	429c      	cmp	r4, r3
 80088cc:	d101      	bne.n	80088d2 <__swsetup_r+0x46>
 80088ce:	68ac      	ldr	r4, [r5, #8]
 80088d0:	e7eb      	b.n	80088aa <__swsetup_r+0x1e>
 80088d2:	4b24      	ldr	r3, [pc, #144]	; (8008964 <__swsetup_r+0xd8>)
 80088d4:	429c      	cmp	r4, r3
 80088d6:	bf08      	it	eq
 80088d8:	68ec      	ldreq	r4, [r5, #12]
 80088da:	e7e6      	b.n	80088aa <__swsetup_r+0x1e>
 80088dc:	0758      	lsls	r0, r3, #29
 80088de:	d512      	bpl.n	8008906 <__swsetup_r+0x7a>
 80088e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088e2:	b141      	cbz	r1, 80088f6 <__swsetup_r+0x6a>
 80088e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088e8:	4299      	cmp	r1, r3
 80088ea:	d002      	beq.n	80088f2 <__swsetup_r+0x66>
 80088ec:	4630      	mov	r0, r6
 80088ee:	f7ff fb37 	bl	8007f60 <_free_r>
 80088f2:	2300      	movs	r3, #0
 80088f4:	6363      	str	r3, [r4, #52]	; 0x34
 80088f6:	89a3      	ldrh	r3, [r4, #12]
 80088f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80088fc:	81a3      	strh	r3, [r4, #12]
 80088fe:	2300      	movs	r3, #0
 8008900:	6063      	str	r3, [r4, #4]
 8008902:	6923      	ldr	r3, [r4, #16]
 8008904:	6023      	str	r3, [r4, #0]
 8008906:	89a3      	ldrh	r3, [r4, #12]
 8008908:	f043 0308 	orr.w	r3, r3, #8
 800890c:	81a3      	strh	r3, [r4, #12]
 800890e:	6923      	ldr	r3, [r4, #16]
 8008910:	b94b      	cbnz	r3, 8008926 <__swsetup_r+0x9a>
 8008912:	89a3      	ldrh	r3, [r4, #12]
 8008914:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800891c:	d003      	beq.n	8008926 <__swsetup_r+0x9a>
 800891e:	4621      	mov	r1, r4
 8008920:	4630      	mov	r0, r6
 8008922:	f000 fa05 	bl	8008d30 <__smakebuf_r>
 8008926:	89a0      	ldrh	r0, [r4, #12]
 8008928:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800892c:	f010 0301 	ands.w	r3, r0, #1
 8008930:	d00a      	beq.n	8008948 <__swsetup_r+0xbc>
 8008932:	2300      	movs	r3, #0
 8008934:	60a3      	str	r3, [r4, #8]
 8008936:	6963      	ldr	r3, [r4, #20]
 8008938:	425b      	negs	r3, r3
 800893a:	61a3      	str	r3, [r4, #24]
 800893c:	6923      	ldr	r3, [r4, #16]
 800893e:	b943      	cbnz	r3, 8008952 <__swsetup_r+0xc6>
 8008940:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008944:	d1ba      	bne.n	80088bc <__swsetup_r+0x30>
 8008946:	bd70      	pop	{r4, r5, r6, pc}
 8008948:	0781      	lsls	r1, r0, #30
 800894a:	bf58      	it	pl
 800894c:	6963      	ldrpl	r3, [r4, #20]
 800894e:	60a3      	str	r3, [r4, #8]
 8008950:	e7f4      	b.n	800893c <__swsetup_r+0xb0>
 8008952:	2000      	movs	r0, #0
 8008954:	e7f7      	b.n	8008946 <__swsetup_r+0xba>
 8008956:	bf00      	nop
 8008958:	20000040 	.word	0x20000040
 800895c:	080093dc 	.word	0x080093dc
 8008960:	080093fc 	.word	0x080093fc
 8008964:	080093bc 	.word	0x080093bc

08008968 <abort>:
 8008968:	2006      	movs	r0, #6
 800896a:	b508      	push	{r3, lr}
 800896c:	f000 fa50 	bl	8008e10 <raise>
 8008970:	2001      	movs	r0, #1
 8008972:	f7f9 fd0e 	bl	8002392 <_exit>
	...

08008978 <__sflush_r>:
 8008978:	898a      	ldrh	r2, [r1, #12]
 800897a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800897c:	4605      	mov	r5, r0
 800897e:	0710      	lsls	r0, r2, #28
 8008980:	460c      	mov	r4, r1
 8008982:	d457      	bmi.n	8008a34 <__sflush_r+0xbc>
 8008984:	684b      	ldr	r3, [r1, #4]
 8008986:	2b00      	cmp	r3, #0
 8008988:	dc04      	bgt.n	8008994 <__sflush_r+0x1c>
 800898a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800898c:	2b00      	cmp	r3, #0
 800898e:	dc01      	bgt.n	8008994 <__sflush_r+0x1c>
 8008990:	2000      	movs	r0, #0
 8008992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008994:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008996:	2e00      	cmp	r6, #0
 8008998:	d0fa      	beq.n	8008990 <__sflush_r+0x18>
 800899a:	2300      	movs	r3, #0
 800899c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80089a0:	682f      	ldr	r7, [r5, #0]
 80089a2:	602b      	str	r3, [r5, #0]
 80089a4:	d032      	beq.n	8008a0c <__sflush_r+0x94>
 80089a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80089a8:	89a3      	ldrh	r3, [r4, #12]
 80089aa:	075a      	lsls	r2, r3, #29
 80089ac:	d505      	bpl.n	80089ba <__sflush_r+0x42>
 80089ae:	6863      	ldr	r3, [r4, #4]
 80089b0:	1ac0      	subs	r0, r0, r3
 80089b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089b4:	b10b      	cbz	r3, 80089ba <__sflush_r+0x42>
 80089b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089b8:	1ac0      	subs	r0, r0, r3
 80089ba:	2300      	movs	r3, #0
 80089bc:	4602      	mov	r2, r0
 80089be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089c0:	4628      	mov	r0, r5
 80089c2:	6a21      	ldr	r1, [r4, #32]
 80089c4:	47b0      	blx	r6
 80089c6:	1c43      	adds	r3, r0, #1
 80089c8:	89a3      	ldrh	r3, [r4, #12]
 80089ca:	d106      	bne.n	80089da <__sflush_r+0x62>
 80089cc:	6829      	ldr	r1, [r5, #0]
 80089ce:	291d      	cmp	r1, #29
 80089d0:	d82c      	bhi.n	8008a2c <__sflush_r+0xb4>
 80089d2:	4a29      	ldr	r2, [pc, #164]	; (8008a78 <__sflush_r+0x100>)
 80089d4:	40ca      	lsrs	r2, r1
 80089d6:	07d6      	lsls	r6, r2, #31
 80089d8:	d528      	bpl.n	8008a2c <__sflush_r+0xb4>
 80089da:	2200      	movs	r2, #0
 80089dc:	6062      	str	r2, [r4, #4]
 80089de:	6922      	ldr	r2, [r4, #16]
 80089e0:	04d9      	lsls	r1, r3, #19
 80089e2:	6022      	str	r2, [r4, #0]
 80089e4:	d504      	bpl.n	80089f0 <__sflush_r+0x78>
 80089e6:	1c42      	adds	r2, r0, #1
 80089e8:	d101      	bne.n	80089ee <__sflush_r+0x76>
 80089ea:	682b      	ldr	r3, [r5, #0]
 80089ec:	b903      	cbnz	r3, 80089f0 <__sflush_r+0x78>
 80089ee:	6560      	str	r0, [r4, #84]	; 0x54
 80089f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089f2:	602f      	str	r7, [r5, #0]
 80089f4:	2900      	cmp	r1, #0
 80089f6:	d0cb      	beq.n	8008990 <__sflush_r+0x18>
 80089f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089fc:	4299      	cmp	r1, r3
 80089fe:	d002      	beq.n	8008a06 <__sflush_r+0x8e>
 8008a00:	4628      	mov	r0, r5
 8008a02:	f7ff faad 	bl	8007f60 <_free_r>
 8008a06:	2000      	movs	r0, #0
 8008a08:	6360      	str	r0, [r4, #52]	; 0x34
 8008a0a:	e7c2      	b.n	8008992 <__sflush_r+0x1a>
 8008a0c:	6a21      	ldr	r1, [r4, #32]
 8008a0e:	2301      	movs	r3, #1
 8008a10:	4628      	mov	r0, r5
 8008a12:	47b0      	blx	r6
 8008a14:	1c41      	adds	r1, r0, #1
 8008a16:	d1c7      	bne.n	80089a8 <__sflush_r+0x30>
 8008a18:	682b      	ldr	r3, [r5, #0]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d0c4      	beq.n	80089a8 <__sflush_r+0x30>
 8008a1e:	2b1d      	cmp	r3, #29
 8008a20:	d001      	beq.n	8008a26 <__sflush_r+0xae>
 8008a22:	2b16      	cmp	r3, #22
 8008a24:	d101      	bne.n	8008a2a <__sflush_r+0xb2>
 8008a26:	602f      	str	r7, [r5, #0]
 8008a28:	e7b2      	b.n	8008990 <__sflush_r+0x18>
 8008a2a:	89a3      	ldrh	r3, [r4, #12]
 8008a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a30:	81a3      	strh	r3, [r4, #12]
 8008a32:	e7ae      	b.n	8008992 <__sflush_r+0x1a>
 8008a34:	690f      	ldr	r7, [r1, #16]
 8008a36:	2f00      	cmp	r7, #0
 8008a38:	d0aa      	beq.n	8008990 <__sflush_r+0x18>
 8008a3a:	0793      	lsls	r3, r2, #30
 8008a3c:	bf18      	it	ne
 8008a3e:	2300      	movne	r3, #0
 8008a40:	680e      	ldr	r6, [r1, #0]
 8008a42:	bf08      	it	eq
 8008a44:	694b      	ldreq	r3, [r1, #20]
 8008a46:	1bf6      	subs	r6, r6, r7
 8008a48:	600f      	str	r7, [r1, #0]
 8008a4a:	608b      	str	r3, [r1, #8]
 8008a4c:	2e00      	cmp	r6, #0
 8008a4e:	dd9f      	ble.n	8008990 <__sflush_r+0x18>
 8008a50:	4633      	mov	r3, r6
 8008a52:	463a      	mov	r2, r7
 8008a54:	4628      	mov	r0, r5
 8008a56:	6a21      	ldr	r1, [r4, #32]
 8008a58:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008a5c:	47e0      	blx	ip
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	dc06      	bgt.n	8008a70 <__sflush_r+0xf8>
 8008a62:	89a3      	ldrh	r3, [r4, #12]
 8008a64:	f04f 30ff 	mov.w	r0, #4294967295
 8008a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a6c:	81a3      	strh	r3, [r4, #12]
 8008a6e:	e790      	b.n	8008992 <__sflush_r+0x1a>
 8008a70:	4407      	add	r7, r0
 8008a72:	1a36      	subs	r6, r6, r0
 8008a74:	e7ea      	b.n	8008a4c <__sflush_r+0xd4>
 8008a76:	bf00      	nop
 8008a78:	20400001 	.word	0x20400001

08008a7c <_fflush_r>:
 8008a7c:	b538      	push	{r3, r4, r5, lr}
 8008a7e:	690b      	ldr	r3, [r1, #16]
 8008a80:	4605      	mov	r5, r0
 8008a82:	460c      	mov	r4, r1
 8008a84:	b913      	cbnz	r3, 8008a8c <_fflush_r+0x10>
 8008a86:	2500      	movs	r5, #0
 8008a88:	4628      	mov	r0, r5
 8008a8a:	bd38      	pop	{r3, r4, r5, pc}
 8008a8c:	b118      	cbz	r0, 8008a96 <_fflush_r+0x1a>
 8008a8e:	6983      	ldr	r3, [r0, #24]
 8008a90:	b90b      	cbnz	r3, 8008a96 <_fflush_r+0x1a>
 8008a92:	f000 f887 	bl	8008ba4 <__sinit>
 8008a96:	4b14      	ldr	r3, [pc, #80]	; (8008ae8 <_fflush_r+0x6c>)
 8008a98:	429c      	cmp	r4, r3
 8008a9a:	d11b      	bne.n	8008ad4 <_fflush_r+0x58>
 8008a9c:	686c      	ldr	r4, [r5, #4]
 8008a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d0ef      	beq.n	8008a86 <_fflush_r+0xa>
 8008aa6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008aa8:	07d0      	lsls	r0, r2, #31
 8008aaa:	d404      	bmi.n	8008ab6 <_fflush_r+0x3a>
 8008aac:	0599      	lsls	r1, r3, #22
 8008aae:	d402      	bmi.n	8008ab6 <_fflush_r+0x3a>
 8008ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ab2:	f000 f915 	bl	8008ce0 <__retarget_lock_acquire_recursive>
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	4621      	mov	r1, r4
 8008aba:	f7ff ff5d 	bl	8008978 <__sflush_r>
 8008abe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ac0:	4605      	mov	r5, r0
 8008ac2:	07da      	lsls	r2, r3, #31
 8008ac4:	d4e0      	bmi.n	8008a88 <_fflush_r+0xc>
 8008ac6:	89a3      	ldrh	r3, [r4, #12]
 8008ac8:	059b      	lsls	r3, r3, #22
 8008aca:	d4dd      	bmi.n	8008a88 <_fflush_r+0xc>
 8008acc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ace:	f000 f908 	bl	8008ce2 <__retarget_lock_release_recursive>
 8008ad2:	e7d9      	b.n	8008a88 <_fflush_r+0xc>
 8008ad4:	4b05      	ldr	r3, [pc, #20]	; (8008aec <_fflush_r+0x70>)
 8008ad6:	429c      	cmp	r4, r3
 8008ad8:	d101      	bne.n	8008ade <_fflush_r+0x62>
 8008ada:	68ac      	ldr	r4, [r5, #8]
 8008adc:	e7df      	b.n	8008a9e <_fflush_r+0x22>
 8008ade:	4b04      	ldr	r3, [pc, #16]	; (8008af0 <_fflush_r+0x74>)
 8008ae0:	429c      	cmp	r4, r3
 8008ae2:	bf08      	it	eq
 8008ae4:	68ec      	ldreq	r4, [r5, #12]
 8008ae6:	e7da      	b.n	8008a9e <_fflush_r+0x22>
 8008ae8:	080093dc 	.word	0x080093dc
 8008aec:	080093fc 	.word	0x080093fc
 8008af0:	080093bc 	.word	0x080093bc

08008af4 <std>:
 8008af4:	2300      	movs	r3, #0
 8008af6:	b510      	push	{r4, lr}
 8008af8:	4604      	mov	r4, r0
 8008afa:	e9c0 3300 	strd	r3, r3, [r0]
 8008afe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b02:	6083      	str	r3, [r0, #8]
 8008b04:	8181      	strh	r1, [r0, #12]
 8008b06:	6643      	str	r3, [r0, #100]	; 0x64
 8008b08:	81c2      	strh	r2, [r0, #14]
 8008b0a:	6183      	str	r3, [r0, #24]
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	2208      	movs	r2, #8
 8008b10:	305c      	adds	r0, #92	; 0x5c
 8008b12:	f7fd fac3 	bl	800609c <memset>
 8008b16:	4b05      	ldr	r3, [pc, #20]	; (8008b2c <std+0x38>)
 8008b18:	6224      	str	r4, [r4, #32]
 8008b1a:	6263      	str	r3, [r4, #36]	; 0x24
 8008b1c:	4b04      	ldr	r3, [pc, #16]	; (8008b30 <std+0x3c>)
 8008b1e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b20:	4b04      	ldr	r3, [pc, #16]	; (8008b34 <std+0x40>)
 8008b22:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b24:	4b04      	ldr	r3, [pc, #16]	; (8008b38 <std+0x44>)
 8008b26:	6323      	str	r3, [r4, #48]	; 0x30
 8008b28:	bd10      	pop	{r4, pc}
 8008b2a:	bf00      	nop
 8008b2c:	08008e49 	.word	0x08008e49
 8008b30:	08008e6b 	.word	0x08008e6b
 8008b34:	08008ea3 	.word	0x08008ea3
 8008b38:	08008ec7 	.word	0x08008ec7

08008b3c <_cleanup_r>:
 8008b3c:	4901      	ldr	r1, [pc, #4]	; (8008b44 <_cleanup_r+0x8>)
 8008b3e:	f000 b8af 	b.w	8008ca0 <_fwalk_reent>
 8008b42:	bf00      	nop
 8008b44:	08008a7d 	.word	0x08008a7d

08008b48 <__sfmoreglue>:
 8008b48:	2268      	movs	r2, #104	; 0x68
 8008b4a:	b570      	push	{r4, r5, r6, lr}
 8008b4c:	1e4d      	subs	r5, r1, #1
 8008b4e:	4355      	muls	r5, r2
 8008b50:	460e      	mov	r6, r1
 8008b52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008b56:	f7ff fa6b 	bl	8008030 <_malloc_r>
 8008b5a:	4604      	mov	r4, r0
 8008b5c:	b140      	cbz	r0, 8008b70 <__sfmoreglue+0x28>
 8008b5e:	2100      	movs	r1, #0
 8008b60:	e9c0 1600 	strd	r1, r6, [r0]
 8008b64:	300c      	adds	r0, #12
 8008b66:	60a0      	str	r0, [r4, #8]
 8008b68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008b6c:	f7fd fa96 	bl	800609c <memset>
 8008b70:	4620      	mov	r0, r4
 8008b72:	bd70      	pop	{r4, r5, r6, pc}

08008b74 <__sfp_lock_acquire>:
 8008b74:	4801      	ldr	r0, [pc, #4]	; (8008b7c <__sfp_lock_acquire+0x8>)
 8008b76:	f000 b8b3 	b.w	8008ce0 <__retarget_lock_acquire_recursive>
 8008b7a:	bf00      	nop
 8008b7c:	20000445 	.word	0x20000445

08008b80 <__sfp_lock_release>:
 8008b80:	4801      	ldr	r0, [pc, #4]	; (8008b88 <__sfp_lock_release+0x8>)
 8008b82:	f000 b8ae 	b.w	8008ce2 <__retarget_lock_release_recursive>
 8008b86:	bf00      	nop
 8008b88:	20000445 	.word	0x20000445

08008b8c <__sinit_lock_acquire>:
 8008b8c:	4801      	ldr	r0, [pc, #4]	; (8008b94 <__sinit_lock_acquire+0x8>)
 8008b8e:	f000 b8a7 	b.w	8008ce0 <__retarget_lock_acquire_recursive>
 8008b92:	bf00      	nop
 8008b94:	20000446 	.word	0x20000446

08008b98 <__sinit_lock_release>:
 8008b98:	4801      	ldr	r0, [pc, #4]	; (8008ba0 <__sinit_lock_release+0x8>)
 8008b9a:	f000 b8a2 	b.w	8008ce2 <__retarget_lock_release_recursive>
 8008b9e:	bf00      	nop
 8008ba0:	20000446 	.word	0x20000446

08008ba4 <__sinit>:
 8008ba4:	b510      	push	{r4, lr}
 8008ba6:	4604      	mov	r4, r0
 8008ba8:	f7ff fff0 	bl	8008b8c <__sinit_lock_acquire>
 8008bac:	69a3      	ldr	r3, [r4, #24]
 8008bae:	b11b      	cbz	r3, 8008bb8 <__sinit+0x14>
 8008bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bb4:	f7ff bff0 	b.w	8008b98 <__sinit_lock_release>
 8008bb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008bbc:	6523      	str	r3, [r4, #80]	; 0x50
 8008bbe:	4b13      	ldr	r3, [pc, #76]	; (8008c0c <__sinit+0x68>)
 8008bc0:	4a13      	ldr	r2, [pc, #76]	; (8008c10 <__sinit+0x6c>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	62a2      	str	r2, [r4, #40]	; 0x28
 8008bc6:	42a3      	cmp	r3, r4
 8008bc8:	bf08      	it	eq
 8008bca:	2301      	moveq	r3, #1
 8008bcc:	4620      	mov	r0, r4
 8008bce:	bf08      	it	eq
 8008bd0:	61a3      	streq	r3, [r4, #24]
 8008bd2:	f000 f81f 	bl	8008c14 <__sfp>
 8008bd6:	6060      	str	r0, [r4, #4]
 8008bd8:	4620      	mov	r0, r4
 8008bda:	f000 f81b 	bl	8008c14 <__sfp>
 8008bde:	60a0      	str	r0, [r4, #8]
 8008be0:	4620      	mov	r0, r4
 8008be2:	f000 f817 	bl	8008c14 <__sfp>
 8008be6:	2200      	movs	r2, #0
 8008be8:	2104      	movs	r1, #4
 8008bea:	60e0      	str	r0, [r4, #12]
 8008bec:	6860      	ldr	r0, [r4, #4]
 8008bee:	f7ff ff81 	bl	8008af4 <std>
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	2109      	movs	r1, #9
 8008bf6:	68a0      	ldr	r0, [r4, #8]
 8008bf8:	f7ff ff7c 	bl	8008af4 <std>
 8008bfc:	2202      	movs	r2, #2
 8008bfe:	2112      	movs	r1, #18
 8008c00:	68e0      	ldr	r0, [r4, #12]
 8008c02:	f7ff ff77 	bl	8008af4 <std>
 8008c06:	2301      	movs	r3, #1
 8008c08:	61a3      	str	r3, [r4, #24]
 8008c0a:	e7d1      	b.n	8008bb0 <__sinit+0xc>
 8008c0c:	08009040 	.word	0x08009040
 8008c10:	08008b3d 	.word	0x08008b3d

08008c14 <__sfp>:
 8008c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c16:	4607      	mov	r7, r0
 8008c18:	f7ff ffac 	bl	8008b74 <__sfp_lock_acquire>
 8008c1c:	4b1e      	ldr	r3, [pc, #120]	; (8008c98 <__sfp+0x84>)
 8008c1e:	681e      	ldr	r6, [r3, #0]
 8008c20:	69b3      	ldr	r3, [r6, #24]
 8008c22:	b913      	cbnz	r3, 8008c2a <__sfp+0x16>
 8008c24:	4630      	mov	r0, r6
 8008c26:	f7ff ffbd 	bl	8008ba4 <__sinit>
 8008c2a:	3648      	adds	r6, #72	; 0x48
 8008c2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008c30:	3b01      	subs	r3, #1
 8008c32:	d503      	bpl.n	8008c3c <__sfp+0x28>
 8008c34:	6833      	ldr	r3, [r6, #0]
 8008c36:	b30b      	cbz	r3, 8008c7c <__sfp+0x68>
 8008c38:	6836      	ldr	r6, [r6, #0]
 8008c3a:	e7f7      	b.n	8008c2c <__sfp+0x18>
 8008c3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008c40:	b9d5      	cbnz	r5, 8008c78 <__sfp+0x64>
 8008c42:	4b16      	ldr	r3, [pc, #88]	; (8008c9c <__sfp+0x88>)
 8008c44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c48:	60e3      	str	r3, [r4, #12]
 8008c4a:	6665      	str	r5, [r4, #100]	; 0x64
 8008c4c:	f000 f847 	bl	8008cde <__retarget_lock_init_recursive>
 8008c50:	f7ff ff96 	bl	8008b80 <__sfp_lock_release>
 8008c54:	2208      	movs	r2, #8
 8008c56:	4629      	mov	r1, r5
 8008c58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008c5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008c60:	6025      	str	r5, [r4, #0]
 8008c62:	61a5      	str	r5, [r4, #24]
 8008c64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008c68:	f7fd fa18 	bl	800609c <memset>
 8008c6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008c70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008c74:	4620      	mov	r0, r4
 8008c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c78:	3468      	adds	r4, #104	; 0x68
 8008c7a:	e7d9      	b.n	8008c30 <__sfp+0x1c>
 8008c7c:	2104      	movs	r1, #4
 8008c7e:	4638      	mov	r0, r7
 8008c80:	f7ff ff62 	bl	8008b48 <__sfmoreglue>
 8008c84:	4604      	mov	r4, r0
 8008c86:	6030      	str	r0, [r6, #0]
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	d1d5      	bne.n	8008c38 <__sfp+0x24>
 8008c8c:	f7ff ff78 	bl	8008b80 <__sfp_lock_release>
 8008c90:	230c      	movs	r3, #12
 8008c92:	603b      	str	r3, [r7, #0]
 8008c94:	e7ee      	b.n	8008c74 <__sfp+0x60>
 8008c96:	bf00      	nop
 8008c98:	08009040 	.word	0x08009040
 8008c9c:	ffff0001 	.word	0xffff0001

08008ca0 <_fwalk_reent>:
 8008ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ca4:	4606      	mov	r6, r0
 8008ca6:	4688      	mov	r8, r1
 8008ca8:	2700      	movs	r7, #0
 8008caa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008cae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008cb2:	f1b9 0901 	subs.w	r9, r9, #1
 8008cb6:	d505      	bpl.n	8008cc4 <_fwalk_reent+0x24>
 8008cb8:	6824      	ldr	r4, [r4, #0]
 8008cba:	2c00      	cmp	r4, #0
 8008cbc:	d1f7      	bne.n	8008cae <_fwalk_reent+0xe>
 8008cbe:	4638      	mov	r0, r7
 8008cc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cc4:	89ab      	ldrh	r3, [r5, #12]
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d907      	bls.n	8008cda <_fwalk_reent+0x3a>
 8008cca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	d003      	beq.n	8008cda <_fwalk_reent+0x3a>
 8008cd2:	4629      	mov	r1, r5
 8008cd4:	4630      	mov	r0, r6
 8008cd6:	47c0      	blx	r8
 8008cd8:	4307      	orrs	r7, r0
 8008cda:	3568      	adds	r5, #104	; 0x68
 8008cdc:	e7e9      	b.n	8008cb2 <_fwalk_reent+0x12>

08008cde <__retarget_lock_init_recursive>:
 8008cde:	4770      	bx	lr

08008ce0 <__retarget_lock_acquire_recursive>:
 8008ce0:	4770      	bx	lr

08008ce2 <__retarget_lock_release_recursive>:
 8008ce2:	4770      	bx	lr

08008ce4 <__swhatbuf_r>:
 8008ce4:	b570      	push	{r4, r5, r6, lr}
 8008ce6:	460e      	mov	r6, r1
 8008ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cec:	4614      	mov	r4, r2
 8008cee:	2900      	cmp	r1, #0
 8008cf0:	461d      	mov	r5, r3
 8008cf2:	b096      	sub	sp, #88	; 0x58
 8008cf4:	da08      	bge.n	8008d08 <__swhatbuf_r+0x24>
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008cfc:	602a      	str	r2, [r5, #0]
 8008cfe:	061a      	lsls	r2, r3, #24
 8008d00:	d410      	bmi.n	8008d24 <__swhatbuf_r+0x40>
 8008d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d06:	e00e      	b.n	8008d26 <__swhatbuf_r+0x42>
 8008d08:	466a      	mov	r2, sp
 8008d0a:	f000 f903 	bl	8008f14 <_fstat_r>
 8008d0e:	2800      	cmp	r0, #0
 8008d10:	dbf1      	blt.n	8008cf6 <__swhatbuf_r+0x12>
 8008d12:	9a01      	ldr	r2, [sp, #4]
 8008d14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008d1c:	425a      	negs	r2, r3
 8008d1e:	415a      	adcs	r2, r3
 8008d20:	602a      	str	r2, [r5, #0]
 8008d22:	e7ee      	b.n	8008d02 <__swhatbuf_r+0x1e>
 8008d24:	2340      	movs	r3, #64	; 0x40
 8008d26:	2000      	movs	r0, #0
 8008d28:	6023      	str	r3, [r4, #0]
 8008d2a:	b016      	add	sp, #88	; 0x58
 8008d2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008d30 <__smakebuf_r>:
 8008d30:	898b      	ldrh	r3, [r1, #12]
 8008d32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d34:	079d      	lsls	r5, r3, #30
 8008d36:	4606      	mov	r6, r0
 8008d38:	460c      	mov	r4, r1
 8008d3a:	d507      	bpl.n	8008d4c <__smakebuf_r+0x1c>
 8008d3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d40:	6023      	str	r3, [r4, #0]
 8008d42:	6123      	str	r3, [r4, #16]
 8008d44:	2301      	movs	r3, #1
 8008d46:	6163      	str	r3, [r4, #20]
 8008d48:	b002      	add	sp, #8
 8008d4a:	bd70      	pop	{r4, r5, r6, pc}
 8008d4c:	466a      	mov	r2, sp
 8008d4e:	ab01      	add	r3, sp, #4
 8008d50:	f7ff ffc8 	bl	8008ce4 <__swhatbuf_r>
 8008d54:	9900      	ldr	r1, [sp, #0]
 8008d56:	4605      	mov	r5, r0
 8008d58:	4630      	mov	r0, r6
 8008d5a:	f7ff f969 	bl	8008030 <_malloc_r>
 8008d5e:	b948      	cbnz	r0, 8008d74 <__smakebuf_r+0x44>
 8008d60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d64:	059a      	lsls	r2, r3, #22
 8008d66:	d4ef      	bmi.n	8008d48 <__smakebuf_r+0x18>
 8008d68:	f023 0303 	bic.w	r3, r3, #3
 8008d6c:	f043 0302 	orr.w	r3, r3, #2
 8008d70:	81a3      	strh	r3, [r4, #12]
 8008d72:	e7e3      	b.n	8008d3c <__smakebuf_r+0xc>
 8008d74:	4b0d      	ldr	r3, [pc, #52]	; (8008dac <__smakebuf_r+0x7c>)
 8008d76:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d78:	89a3      	ldrh	r3, [r4, #12]
 8008d7a:	6020      	str	r0, [r4, #0]
 8008d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d80:	81a3      	strh	r3, [r4, #12]
 8008d82:	9b00      	ldr	r3, [sp, #0]
 8008d84:	6120      	str	r0, [r4, #16]
 8008d86:	6163      	str	r3, [r4, #20]
 8008d88:	9b01      	ldr	r3, [sp, #4]
 8008d8a:	b15b      	cbz	r3, 8008da4 <__smakebuf_r+0x74>
 8008d8c:	4630      	mov	r0, r6
 8008d8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d92:	f000 f8d1 	bl	8008f38 <_isatty_r>
 8008d96:	b128      	cbz	r0, 8008da4 <__smakebuf_r+0x74>
 8008d98:	89a3      	ldrh	r3, [r4, #12]
 8008d9a:	f023 0303 	bic.w	r3, r3, #3
 8008d9e:	f043 0301 	orr.w	r3, r3, #1
 8008da2:	81a3      	strh	r3, [r4, #12]
 8008da4:	89a0      	ldrh	r0, [r4, #12]
 8008da6:	4305      	orrs	r5, r0
 8008da8:	81a5      	strh	r5, [r4, #12]
 8008daa:	e7cd      	b.n	8008d48 <__smakebuf_r+0x18>
 8008dac:	08008b3d 	.word	0x08008b3d

08008db0 <_malloc_usable_size_r>:
 8008db0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008db4:	1f18      	subs	r0, r3, #4
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	bfbc      	itt	lt
 8008dba:	580b      	ldrlt	r3, [r1, r0]
 8008dbc:	18c0      	addlt	r0, r0, r3
 8008dbe:	4770      	bx	lr

08008dc0 <_raise_r>:
 8008dc0:	291f      	cmp	r1, #31
 8008dc2:	b538      	push	{r3, r4, r5, lr}
 8008dc4:	4604      	mov	r4, r0
 8008dc6:	460d      	mov	r5, r1
 8008dc8:	d904      	bls.n	8008dd4 <_raise_r+0x14>
 8008dca:	2316      	movs	r3, #22
 8008dcc:	6003      	str	r3, [r0, #0]
 8008dce:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd2:	bd38      	pop	{r3, r4, r5, pc}
 8008dd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008dd6:	b112      	cbz	r2, 8008dde <_raise_r+0x1e>
 8008dd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ddc:	b94b      	cbnz	r3, 8008df2 <_raise_r+0x32>
 8008dde:	4620      	mov	r0, r4
 8008de0:	f000 f830 	bl	8008e44 <_getpid_r>
 8008de4:	462a      	mov	r2, r5
 8008de6:	4601      	mov	r1, r0
 8008de8:	4620      	mov	r0, r4
 8008dea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dee:	f000 b817 	b.w	8008e20 <_kill_r>
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d00a      	beq.n	8008e0c <_raise_r+0x4c>
 8008df6:	1c59      	adds	r1, r3, #1
 8008df8:	d103      	bne.n	8008e02 <_raise_r+0x42>
 8008dfa:	2316      	movs	r3, #22
 8008dfc:	6003      	str	r3, [r0, #0]
 8008dfe:	2001      	movs	r0, #1
 8008e00:	e7e7      	b.n	8008dd2 <_raise_r+0x12>
 8008e02:	2400      	movs	r4, #0
 8008e04:	4628      	mov	r0, r5
 8008e06:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e0a:	4798      	blx	r3
 8008e0c:	2000      	movs	r0, #0
 8008e0e:	e7e0      	b.n	8008dd2 <_raise_r+0x12>

08008e10 <raise>:
 8008e10:	4b02      	ldr	r3, [pc, #8]	; (8008e1c <raise+0xc>)
 8008e12:	4601      	mov	r1, r0
 8008e14:	6818      	ldr	r0, [r3, #0]
 8008e16:	f7ff bfd3 	b.w	8008dc0 <_raise_r>
 8008e1a:	bf00      	nop
 8008e1c:	20000040 	.word	0x20000040

08008e20 <_kill_r>:
 8008e20:	b538      	push	{r3, r4, r5, lr}
 8008e22:	2300      	movs	r3, #0
 8008e24:	4d06      	ldr	r5, [pc, #24]	; (8008e40 <_kill_r+0x20>)
 8008e26:	4604      	mov	r4, r0
 8008e28:	4608      	mov	r0, r1
 8008e2a:	4611      	mov	r1, r2
 8008e2c:	602b      	str	r3, [r5, #0]
 8008e2e:	f7f9 faa0 	bl	8002372 <_kill>
 8008e32:	1c43      	adds	r3, r0, #1
 8008e34:	d102      	bne.n	8008e3c <_kill_r+0x1c>
 8008e36:	682b      	ldr	r3, [r5, #0]
 8008e38:	b103      	cbz	r3, 8008e3c <_kill_r+0x1c>
 8008e3a:	6023      	str	r3, [r4, #0]
 8008e3c:	bd38      	pop	{r3, r4, r5, pc}
 8008e3e:	bf00      	nop
 8008e40:	20000440 	.word	0x20000440

08008e44 <_getpid_r>:
 8008e44:	f7f9 ba8e 	b.w	8002364 <_getpid>

08008e48 <__sread>:
 8008e48:	b510      	push	{r4, lr}
 8008e4a:	460c      	mov	r4, r1
 8008e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e50:	f000 f894 	bl	8008f7c <_read_r>
 8008e54:	2800      	cmp	r0, #0
 8008e56:	bfab      	itete	ge
 8008e58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e5a:	89a3      	ldrhlt	r3, [r4, #12]
 8008e5c:	181b      	addge	r3, r3, r0
 8008e5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e62:	bfac      	ite	ge
 8008e64:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e66:	81a3      	strhlt	r3, [r4, #12]
 8008e68:	bd10      	pop	{r4, pc}

08008e6a <__swrite>:
 8008e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e6e:	461f      	mov	r7, r3
 8008e70:	898b      	ldrh	r3, [r1, #12]
 8008e72:	4605      	mov	r5, r0
 8008e74:	05db      	lsls	r3, r3, #23
 8008e76:	460c      	mov	r4, r1
 8008e78:	4616      	mov	r6, r2
 8008e7a:	d505      	bpl.n	8008e88 <__swrite+0x1e>
 8008e7c:	2302      	movs	r3, #2
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e84:	f000 f868 	bl	8008f58 <_lseek_r>
 8008e88:	89a3      	ldrh	r3, [r4, #12]
 8008e8a:	4632      	mov	r2, r6
 8008e8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e90:	81a3      	strh	r3, [r4, #12]
 8008e92:	4628      	mov	r0, r5
 8008e94:	463b      	mov	r3, r7
 8008e96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e9e:	f000 b817 	b.w	8008ed0 <_write_r>

08008ea2 <__sseek>:
 8008ea2:	b510      	push	{r4, lr}
 8008ea4:	460c      	mov	r4, r1
 8008ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eaa:	f000 f855 	bl	8008f58 <_lseek_r>
 8008eae:	1c43      	adds	r3, r0, #1
 8008eb0:	89a3      	ldrh	r3, [r4, #12]
 8008eb2:	bf15      	itete	ne
 8008eb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008eb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008eba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ebe:	81a3      	strheq	r3, [r4, #12]
 8008ec0:	bf18      	it	ne
 8008ec2:	81a3      	strhne	r3, [r4, #12]
 8008ec4:	bd10      	pop	{r4, pc}

08008ec6 <__sclose>:
 8008ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eca:	f000 b813 	b.w	8008ef4 <_close_r>
	...

08008ed0 <_write_r>:
 8008ed0:	b538      	push	{r3, r4, r5, lr}
 8008ed2:	4604      	mov	r4, r0
 8008ed4:	4608      	mov	r0, r1
 8008ed6:	4611      	mov	r1, r2
 8008ed8:	2200      	movs	r2, #0
 8008eda:	4d05      	ldr	r5, [pc, #20]	; (8008ef0 <_write_r+0x20>)
 8008edc:	602a      	str	r2, [r5, #0]
 8008ede:	461a      	mov	r2, r3
 8008ee0:	f7f9 fa7e 	bl	80023e0 <_write>
 8008ee4:	1c43      	adds	r3, r0, #1
 8008ee6:	d102      	bne.n	8008eee <_write_r+0x1e>
 8008ee8:	682b      	ldr	r3, [r5, #0]
 8008eea:	b103      	cbz	r3, 8008eee <_write_r+0x1e>
 8008eec:	6023      	str	r3, [r4, #0]
 8008eee:	bd38      	pop	{r3, r4, r5, pc}
 8008ef0:	20000440 	.word	0x20000440

08008ef4 <_close_r>:
 8008ef4:	b538      	push	{r3, r4, r5, lr}
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	4d05      	ldr	r5, [pc, #20]	; (8008f10 <_close_r+0x1c>)
 8008efa:	4604      	mov	r4, r0
 8008efc:	4608      	mov	r0, r1
 8008efe:	602b      	str	r3, [r5, #0]
 8008f00:	f7f9 fa8a 	bl	8002418 <_close>
 8008f04:	1c43      	adds	r3, r0, #1
 8008f06:	d102      	bne.n	8008f0e <_close_r+0x1a>
 8008f08:	682b      	ldr	r3, [r5, #0]
 8008f0a:	b103      	cbz	r3, 8008f0e <_close_r+0x1a>
 8008f0c:	6023      	str	r3, [r4, #0]
 8008f0e:	bd38      	pop	{r3, r4, r5, pc}
 8008f10:	20000440 	.word	0x20000440

08008f14 <_fstat_r>:
 8008f14:	b538      	push	{r3, r4, r5, lr}
 8008f16:	2300      	movs	r3, #0
 8008f18:	4d06      	ldr	r5, [pc, #24]	; (8008f34 <_fstat_r+0x20>)
 8008f1a:	4604      	mov	r4, r0
 8008f1c:	4608      	mov	r0, r1
 8008f1e:	4611      	mov	r1, r2
 8008f20:	602b      	str	r3, [r5, #0]
 8008f22:	f7f9 fa84 	bl	800242e <_fstat>
 8008f26:	1c43      	adds	r3, r0, #1
 8008f28:	d102      	bne.n	8008f30 <_fstat_r+0x1c>
 8008f2a:	682b      	ldr	r3, [r5, #0]
 8008f2c:	b103      	cbz	r3, 8008f30 <_fstat_r+0x1c>
 8008f2e:	6023      	str	r3, [r4, #0]
 8008f30:	bd38      	pop	{r3, r4, r5, pc}
 8008f32:	bf00      	nop
 8008f34:	20000440 	.word	0x20000440

08008f38 <_isatty_r>:
 8008f38:	b538      	push	{r3, r4, r5, lr}
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	4d05      	ldr	r5, [pc, #20]	; (8008f54 <_isatty_r+0x1c>)
 8008f3e:	4604      	mov	r4, r0
 8008f40:	4608      	mov	r0, r1
 8008f42:	602b      	str	r3, [r5, #0]
 8008f44:	f7f9 fa82 	bl	800244c <_isatty>
 8008f48:	1c43      	adds	r3, r0, #1
 8008f4a:	d102      	bne.n	8008f52 <_isatty_r+0x1a>
 8008f4c:	682b      	ldr	r3, [r5, #0]
 8008f4e:	b103      	cbz	r3, 8008f52 <_isatty_r+0x1a>
 8008f50:	6023      	str	r3, [r4, #0]
 8008f52:	bd38      	pop	{r3, r4, r5, pc}
 8008f54:	20000440 	.word	0x20000440

08008f58 <_lseek_r>:
 8008f58:	b538      	push	{r3, r4, r5, lr}
 8008f5a:	4604      	mov	r4, r0
 8008f5c:	4608      	mov	r0, r1
 8008f5e:	4611      	mov	r1, r2
 8008f60:	2200      	movs	r2, #0
 8008f62:	4d05      	ldr	r5, [pc, #20]	; (8008f78 <_lseek_r+0x20>)
 8008f64:	602a      	str	r2, [r5, #0]
 8008f66:	461a      	mov	r2, r3
 8008f68:	f7f9 fa7a 	bl	8002460 <_lseek>
 8008f6c:	1c43      	adds	r3, r0, #1
 8008f6e:	d102      	bne.n	8008f76 <_lseek_r+0x1e>
 8008f70:	682b      	ldr	r3, [r5, #0]
 8008f72:	b103      	cbz	r3, 8008f76 <_lseek_r+0x1e>
 8008f74:	6023      	str	r3, [r4, #0]
 8008f76:	bd38      	pop	{r3, r4, r5, pc}
 8008f78:	20000440 	.word	0x20000440

08008f7c <_read_r>:
 8008f7c:	b538      	push	{r3, r4, r5, lr}
 8008f7e:	4604      	mov	r4, r0
 8008f80:	4608      	mov	r0, r1
 8008f82:	4611      	mov	r1, r2
 8008f84:	2200      	movs	r2, #0
 8008f86:	4d05      	ldr	r5, [pc, #20]	; (8008f9c <_read_r+0x20>)
 8008f88:	602a      	str	r2, [r5, #0]
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	f7f9 fa0b 	bl	80023a6 <_read>
 8008f90:	1c43      	adds	r3, r0, #1
 8008f92:	d102      	bne.n	8008f9a <_read_r+0x1e>
 8008f94:	682b      	ldr	r3, [r5, #0]
 8008f96:	b103      	cbz	r3, 8008f9a <_read_r+0x1e>
 8008f98:	6023      	str	r3, [r4, #0]
 8008f9a:	bd38      	pop	{r3, r4, r5, pc}
 8008f9c:	20000440 	.word	0x20000440

08008fa0 <_init>:
 8008fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa2:	bf00      	nop
 8008fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fa6:	bc08      	pop	{r3}
 8008fa8:	469e      	mov	lr, r3
 8008faa:	4770      	bx	lr

08008fac <_fini>:
 8008fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fae:	bf00      	nop
 8008fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fb2:	bc08      	pop	{r3}
 8008fb4:	469e      	mov	lr, r3
 8008fb6:	4770      	bx	lr
