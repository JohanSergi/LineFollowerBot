
GRUZIK2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a82c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  0800a940  0800a940  0001a940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae8c  0800ae8c  00020214  2**0
                  CONTENTS
  4 .ARM          00000000  0800ae8c  0800ae8c  00020214  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ae8c  0800ae8c  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae8c  0800ae8c  0001ae8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae90  0800ae90  0001ae90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800ae94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000214  0800b0a8  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  0800b0a8  0002045c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010125  00000000  00000000  0002023d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002979  00000000  00000000  00030362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  00032ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e00  00000000  00000000  00033bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019da0  00000000  00000000  000349d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012141  00000000  00000000  0004e778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091334  00000000  00000000  000608b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1bed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005448  00000000  00000000  000f1c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000214 	.word	0x20000214
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a924 	.word	0x0800a924

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000218 	.word	0x20000218
 800014c:	0800a924 	.word	0x0800a924

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_d2lz>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	4605      	mov	r5, r0
 8001160:	460c      	mov	r4, r1
 8001162:	2200      	movs	r2, #0
 8001164:	2300      	movs	r3, #0
 8001166:	4628      	mov	r0, r5
 8001168:	4621      	mov	r1, r4
 800116a:	f7ff fc27 	bl	80009bc <__aeabi_dcmplt>
 800116e:	b928      	cbnz	r0, 800117c <__aeabi_d2lz+0x20>
 8001170:	4628      	mov	r0, r5
 8001172:	4621      	mov	r1, r4
 8001174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001178:	f000 b80a 	b.w	8001190 <__aeabi_d2ulz>
 800117c:	4628      	mov	r0, r5
 800117e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001182:	f000 f805 	bl	8001190 <__aeabi_d2ulz>
 8001186:	4240      	negs	r0, r0
 8001188:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800118c:	bd38      	pop	{r3, r4, r5, pc}
 800118e:	bf00      	nop

08001190 <__aeabi_d2ulz>:
 8001190:	b5d0      	push	{r4, r6, r7, lr}
 8001192:	2200      	movs	r2, #0
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <__aeabi_d2ulz+0x34>)
 8001196:	4606      	mov	r6, r0
 8001198:	460f      	mov	r7, r1
 800119a:	f7ff f99d 	bl	80004d8 <__aeabi_dmul>
 800119e:	f7ff fc73 	bl	8000a88 <__aeabi_d2uiz>
 80011a2:	4604      	mov	r4, r0
 80011a4:	f7ff f91e 	bl	80003e4 <__aeabi_ui2d>
 80011a8:	2200      	movs	r2, #0
 80011aa:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <__aeabi_d2ulz+0x38>)
 80011ac:	f7ff f994 	bl	80004d8 <__aeabi_dmul>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4630      	mov	r0, r6
 80011b6:	4639      	mov	r1, r7
 80011b8:	f7fe ffd6 	bl	8000168 <__aeabi_dsub>
 80011bc:	f7ff fc64 	bl	8000a88 <__aeabi_d2uiz>
 80011c0:	4621      	mov	r1, r4
 80011c2:	bdd0      	pop	{r4, r6, r7, pc}
 80011c4:	3df00000 	.word	0x3df00000
 80011c8:	41f00000 	.word	0x41f00000

080011cc <SN_UART_Send>:
}

/*Example usage of this function looks like that*/
// Uart_send(&huart2, "data:%d %s %d\r\n",cokolwiek, cos, itd);
void SN_UART_Send(UART_HandleTypeDef *huart, const char *print, ...)
{
 80011cc:	b40e      	push	{r1, r2, r3}
 80011ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	466b      	mov	r3, sp
 80011da:	461e      	mov	r6, r3
    int timeout = 100;
 80011dc:	2364      	movs	r3, #100	; 0x64
 80011de:	61fb      	str	r3, [r7, #28]

    // Determine the length of the formatted string
    va_list args;
    va_start(args, print);
 80011e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011e4:	60fb      	str	r3, [r7, #12]
    int len = vsnprintf(NULL, 0, print, args);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80011ea:	2100      	movs	r1, #0
 80011ec:	2000      	movs	r0, #0
 80011ee:	f006 fc7d 	bl	8007aec <vsniprintf>
 80011f2:	61b8      	str	r0, [r7, #24]
    va_end(args);

    // Allocate the buffer with the correct length
    char Buffer[len];
 80011f4:	69b9      	ldr	r1, [r7, #24]
 80011f6:	1e4b      	subs	r3, r1, #1
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	460a      	mov	r2, r1
 80011fc:	2300      	movs	r3, #0
 80011fe:	4690      	mov	r8, r2
 8001200:	4699      	mov	r9, r3
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	f04f 0300 	mov.w	r3, #0
 800120a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800120e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001212:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001216:	460a      	mov	r2, r1
 8001218:	2300      	movs	r3, #0
 800121a:	4614      	mov	r4, r2
 800121c:	461d      	mov	r5, r3
 800121e:	f04f 0200 	mov.w	r2, #0
 8001222:	f04f 0300 	mov.w	r3, #0
 8001226:	00eb      	lsls	r3, r5, #3
 8001228:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800122c:	00e2      	lsls	r2, r4, #3
 800122e:	460b      	mov	r3, r1
 8001230:	3307      	adds	r3, #7
 8001232:	08db      	lsrs	r3, r3, #3
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	ebad 0d03 	sub.w	sp, sp, r3
 800123a:	466b      	mov	r3, sp
 800123c:	3300      	adds	r3, #0
 800123e:	613b      	str	r3, [r7, #16]

    // Format the string into the buffer
    va_start(args, print);
 8001240:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001244:	60fb      	str	r3, [r7, #12]
    vsnprintf(Buffer, len, print, args);
 8001246:	69b9      	ldr	r1, [r7, #24]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800124c:	6938      	ldr	r0, [r7, #16]
 800124e:	f006 fc4d 	bl	8007aec <vsniprintf>
    va_end(args);

    // Transmit the formatted string through UART
    HAL_UART_Transmit(huart, (uint8_t *)Buffer, len, timeout);
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	b29a      	uxth	r2, r3
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	6939      	ldr	r1, [r7, #16]
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f004 fa9c 	bl	8005798 <HAL_UART_Transmit>
 8001260:	46b5      	mov	sp, r6
}
 8001262:	bf00      	nop
 8001264:	3720      	adds	r7, #32
 8001266:	46bd      	mov	sp, r7
 8001268:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800126c:	b003      	add	sp, #12
 800126e:	4770      	bx	lr

08001270 <SN_Find_first>:
/*decode received message*/
int SN_Find_first(const char*message, const char*token)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b0a8      	sub	sp, #160	; 0xa0
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
	char buff[128];
	int token_len = sprintf(buff,token);
 800127a:	f107 0308 	add.w	r3, r7, #8
 800127e:	6839      	ldr	r1, [r7, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f005 fd4b 	bl	8006d1c <siprintf>
 8001286:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	int msg_size = sprintf(buff,message);
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	4618      	mov	r0, r3
 8001292:	f005 fd43 	bl	8006d1c <siprintf>
 8001296:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	int token_place;
	int true_tokens = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


	for(int i = 0; i <= (msg_size - 1); i++)
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80012a6:	e042      	b.n	800132e <SN_Find_first+0xbe>
	{
		if(message[i] == token[0])
 80012a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	4413      	add	r3, r2
 80012b0:	781a      	ldrb	r2, [r3, #0]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d134      	bne.n	8001324 <SN_Find_first+0xb4>
		{
			true_tokens = 1;
 80012ba:	2301      	movs	r3, #1
 80012bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			for(int j = 1; j <= (token_len - 1); j++)
 80012c0:	2301      	movs	r3, #1
 80012c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80012c6:	e019      	b.n	80012fc <SN_Find_first+0x8c>
			{
				if(message[i + j] == token[j])
 80012c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80012cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012d0:	4413      	add	r3, r2
 80012d2:	461a      	mov	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	781a      	ldrb	r2, [r3, #0]
 80012da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012de:	6839      	ldr	r1, [r7, #0]
 80012e0:	440b      	add	r3, r1
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d104      	bne.n	80012f2 <SN_Find_first+0x82>
				{
					true_tokens++;
 80012e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80012ec:	3301      	adds	r3, #1
 80012ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			for(int j = 1; j <= (token_len - 1); j++)
 80012f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012f6:	3301      	adds	r3, #1
 80012f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80012fc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001300:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001304:	429a      	cmp	r2, r3
 8001306:	dcdf      	bgt.n	80012c8 <SN_Find_first+0x58>
				}
			}

			if(true_tokens == token_len)
 8001308:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800130c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001310:	429a      	cmp	r2, r3
 8001312:	d104      	bne.n	800131e <SN_Find_first+0xae>
			{
				token_place = i;
 8001314:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001318:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
				break;
 800131c:	e00d      	b.n	800133a <SN_Find_first+0xca>
			}
			else
			{
				true_tokens = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	for(int i = 0; i <= (msg_size - 1); i++)
 8001324:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001328:	3301      	adds	r3, #1
 800132a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800132e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001332:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001336:	429a      	cmp	r2, r3
 8001338:	dcb6      	bgt.n	80012a8 <SN_Find_first+0x38>
			}
		}
 }
 return token_place;
 800133a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
}
 800133e:	4618      	mov	r0, r3
 8001340:	37a0      	adds	r7, #160	; 0xa0
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <SN_Value_In_Message>:
		}
 }
 return token_place;
}
void SN_Value_In_Message(const char*message, int from, int to, char*Value)
{
 8001346:	b480      	push	{r7}
 8001348:	b087      	sub	sp, #28
 800134a:	af00      	add	r7, sp, #0
 800134c:	60f8      	str	r0, [r7, #12]
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	603b      	str	r3, [r7, #0]
	int j = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
	for(int i = from; i <= (to - 1); i++)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	e00d      	b.n	800137a <SN_Value_In_Message+0x34>
	{
		Value[j] = message[i];
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	441a      	add	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	6839      	ldr	r1, [r7, #0]
 8001368:	440b      	add	r3, r1
 800136a:	7812      	ldrb	r2, [r2, #0]
 800136c:	701a      	strb	r2, [r3, #0]
		j++;
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	3301      	adds	r3, #1
 8001372:	617b      	str	r3, [r7, #20]
	for(int i = from; i <= (to - 1); i++)
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	3301      	adds	r3, #1
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	429a      	cmp	r2, r3
 8001380:	dced      	bgt.n	800135e <SN_Value_In_Message+0x18>
	}
}
 8001382:	bf00      	nop
 8001384:	bf00      	nop
 8001386:	371c      	adds	r7, #28
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
	...

08001390 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013a0:	4b18      	ldr	r3, [pc, #96]	; (8001404 <MX_ADC1_Init+0x74>)
 80013a2:	4a19      	ldr	r2, [pc, #100]	; (8001408 <MX_ADC1_Init+0x78>)
 80013a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013a6:	4b17      	ldr	r3, [pc, #92]	; (8001404 <MX_ADC1_Init+0x74>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013ac:	4b15      	ldr	r3, [pc, #84]	; (8001404 <MX_ADC1_Init+0x74>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013b2:	4b14      	ldr	r3, [pc, #80]	; (8001404 <MX_ADC1_Init+0x74>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <MX_ADC1_Init+0x74>)
 80013ba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80013be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013c0:	4b10      	ldr	r3, [pc, #64]	; (8001404 <MX_ADC1_Init+0x74>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <MX_ADC1_Init+0x74>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013cc:	480d      	ldr	r0, [pc, #52]	; (8001404 <MX_ADC1_Init+0x74>)
 80013ce:	f001 fda3 	bl	8002f18 <HAL_ADC_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80013d8:	f001 f92e 	bl	8002638 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80013dc:	2309      	movs	r3, #9
 80013de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013e0:	2301      	movs	r3, #1
 80013e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	4619      	mov	r1, r3
 80013ec:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_ADC1_Init+0x74>)
 80013ee:	f002 f82b 	bl	8003448 <HAL_ADC_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80013f8:	f001 f91e 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013fc:	bf00      	nop
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000230 	.word	0x20000230
 8001408:	40012400 	.word	0x40012400

0800140c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0310 	add.w	r3, r7, #16
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a14      	ldr	r2, [pc, #80]	; (8001478 <HAL_ADC_MspInit+0x6c>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d121      	bne.n	8001470 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800142c:	4b13      	ldr	r3, [pc, #76]	; (800147c <HAL_ADC_MspInit+0x70>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	4a12      	ldr	r2, [pc, #72]	; (800147c <HAL_ADC_MspInit+0x70>)
 8001432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001436:	6193      	str	r3, [r2, #24]
 8001438:	4b10      	ldr	r3, [pc, #64]	; (800147c <HAL_ADC_MspInit+0x70>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001444:	4b0d      	ldr	r3, [pc, #52]	; (800147c <HAL_ADC_MspInit+0x70>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	4a0c      	ldr	r2, [pc, #48]	; (800147c <HAL_ADC_MspInit+0x70>)
 800144a:	f043 0308 	orr.w	r3, r3, #8
 800144e:	6193      	str	r3, [r2, #24]
 8001450:	4b0a      	ldr	r3, [pc, #40]	; (800147c <HAL_ADC_MspInit+0x70>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	f003 0308 	and.w	r3, r3, #8
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800145c:	2302      	movs	r3, #2
 800145e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001460:	2303      	movs	r3, #3
 8001462:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	4619      	mov	r1, r3
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <HAL_ADC_MspInit+0x74>)
 800146c:	f002 fb40 	bl	8003af0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001470:	bf00      	nop
 8001472:	3720      	adds	r7, #32
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40012400 	.word	0x40012400
 800147c:	40021000 	.word	0x40021000
 8001480:	40010c00 	.word	0x40010c00

08001484 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148a:	f107 0310 	add.w	r3, r7, #16
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001498:	4b3f      	ldr	r3, [pc, #252]	; (8001598 <MX_GPIO_Init+0x114>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4a3e      	ldr	r2, [pc, #248]	; (8001598 <MX_GPIO_Init+0x114>)
 800149e:	f043 0310 	orr.w	r3, r3, #16
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	4b3c      	ldr	r3, [pc, #240]	; (8001598 <MX_GPIO_Init+0x114>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f003 0310 	and.w	r3, r3, #16
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b0:	4b39      	ldr	r3, [pc, #228]	; (8001598 <MX_GPIO_Init+0x114>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	4a38      	ldr	r2, [pc, #224]	; (8001598 <MX_GPIO_Init+0x114>)
 80014b6:	f043 0320 	orr.w	r3, r3, #32
 80014ba:	6193      	str	r3, [r2, #24]
 80014bc:	4b36      	ldr	r3, [pc, #216]	; (8001598 <MX_GPIO_Init+0x114>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	f003 0320 	and.w	r3, r3, #32
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c8:	4b33      	ldr	r3, [pc, #204]	; (8001598 <MX_GPIO_Init+0x114>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	4a32      	ldr	r2, [pc, #200]	; (8001598 <MX_GPIO_Init+0x114>)
 80014ce:	f043 0304 	orr.w	r3, r3, #4
 80014d2:	6193      	str	r3, [r2, #24]
 80014d4:	4b30      	ldr	r3, [pc, #192]	; (8001598 <MX_GPIO_Init+0x114>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e0:	4b2d      	ldr	r3, [pc, #180]	; (8001598 <MX_GPIO_Init+0x114>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a2c      	ldr	r2, [pc, #176]	; (8001598 <MX_GPIO_Init+0x114>)
 80014e6:	f043 0308 	orr.w	r3, r3, #8
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <MX_GPIO_Init+0x114>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_GPIO_Port, LD_Pin, GPIO_PIN_SET);
 80014f8:	2201      	movs	r2, #1
 80014fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014fe:	4827      	ldr	r0, [pc, #156]	; (800159c <MX_GPIO_Init+0x118>)
 8001500:	f002 fc91 	bl	8003e26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSOR1_Pin|SENSOR2_Pin|SENSOR3_Pin|SENSOR4_Pin
 8001504:	2200      	movs	r2, #0
 8001506:	21ff      	movs	r1, #255	; 0xff
 8001508:	4825      	ldr	r0, [pc, #148]	; (80015a0 <MX_GPIO_Init+0x11c>)
 800150a:	f002 fc8c 	bl	8003e26 <HAL_GPIO_WritePin>
                          |SENSOR5_Pin|SENSOR6_Pin|SENSOR7_Pin|SENSOR8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDON_Pin|BIN1L_Pin|BIN1R_Pin|AIN2L_Pin
 800150e:	2200      	movs	r2, #0
 8001510:	f24c 0171 	movw	r1, #49265	; 0xc071
 8001514:	4823      	ldr	r0, [pc, #140]	; (80015a4 <MX_GPIO_Init+0x120>)
 8001516:	f002 fc86 	bl	8003e26 <HAL_GPIO_WritePin>
                          |AIN1R_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_Pin;
 800151a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800151e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001520:	2301      	movs	r3, #1
 8001522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2302      	movs	r3, #2
 800152a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD_GPIO_Port, &GPIO_InitStruct);
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	4619      	mov	r1, r3
 8001532:	481a      	ldr	r0, [pc, #104]	; (800159c <MX_GPIO_Init+0x118>)
 8001534:	f002 fadc 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR1_Pin|SENSOR2_Pin|SENSOR3_Pin|SENSOR4_Pin
 8001538:	23ff      	movs	r3, #255	; 0xff
 800153a:	613b      	str	r3, [r7, #16]
                          |SENSOR5_Pin|SENSOR6_Pin|SENSOR7_Pin|SENSOR8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153c:	2301      	movs	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001544:	2303      	movs	r3, #3
 8001546:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	4619      	mov	r1, r3
 800154e:	4814      	ldr	r0, [pc, #80]	; (80015a0 <MX_GPIO_Init+0x11c>)
 8001550:	f002 face 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LEDON_Pin|BIN1L_Pin|BIN1R_Pin|AIN2L_Pin
 8001554:	f24c 0331 	movw	r3, #49201	; 0xc031
 8001558:	613b      	str	r3, [r7, #16]
                          |AIN1R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001562:	2303      	movs	r3, #3
 8001564:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001566:	f107 0310 	add.w	r3, r7, #16
 800156a:	4619      	mov	r1, r3
 800156c:	480d      	ldr	r0, [pc, #52]	; (80015a4 <MX_GPIO_Init+0x120>)
 800156e:	f002 fabf 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001572:	2340      	movs	r3, #64	; 0x40
 8001574:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001576:	2301      	movs	r3, #1
 8001578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800157e:	2301      	movs	r3, #1
 8001580:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001582:	f107 0310 	add.w	r3, r7, #16
 8001586:	4619      	mov	r1, r3
 8001588:	4806      	ldr	r0, [pc, #24]	; (80015a4 <MX_GPIO_Init+0x120>)
 800158a:	f002 fab1 	bl	8003af0 <HAL_GPIO_Init>

}
 800158e:	bf00      	nop
 8001590:	3720      	adds	r7, #32
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40021000 	.word	0x40021000
 800159c:	40011000 	.word	0x40011000
 80015a0:	40010800 	.word	0x40010800
 80015a4:	40010c00 	.word	0x40010c00

080015a8 <Battery_ADC_measurement>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Battery_ADC_measurement(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	/*Start ADC*/
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80015ac:	2201      	movs	r2, #1
 80015ae:	2102      	movs	r1, #2
 80015b0:	4827      	ldr	r0, [pc, #156]	; (8001650 <Battery_ADC_measurement+0xa8>)
 80015b2:	f002 fc38 	bl	8003e26 <HAL_GPIO_WritePin>
	/*Get ADC value*/
	HAL_ADC_Start(&hadc1);
 80015b6:	4827      	ldr	r0, [pc, #156]	; (8001654 <Battery_ADC_measurement+0xac>)
 80015b8:	f001 fd86 	bl	80030c8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295
 80015c0:	4824      	ldr	r0, [pc, #144]	; (8001654 <Battery_ADC_measurement+0xac>)
 80015c2:	f001 fe2f 	bl	8003224 <HAL_ADC_PollForConversion>
	raw_battery = HAL_ADC_GetValue(&hadc1);
 80015c6:	4823      	ldr	r0, [pc, #140]	; (8001654 <Battery_ADC_measurement+0xac>)
 80015c8:	f001 ff32 	bl	8003430 <HAL_ADC_GetValue>
 80015cc:	4603      	mov	r3, r0
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	4b21      	ldr	r3, [pc, #132]	; (8001658 <Battery_ADC_measurement+0xb0>)
 80015d2:	801a      	strh	r2, [r3, #0]
	/*Stop ADC*/
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2102      	movs	r1, #2
 80015d8:	481d      	ldr	r0, [pc, #116]	; (8001650 <Battery_ADC_measurement+0xa8>)
 80015da:	f002 fc24 	bl	8003e26 <HAL_GPIO_WritePin>
	//SN_UART_Send(&huart3,"Battery_raw = %hu \r\n ",raw_battery);

	/*Percentages from raw 12bit measurement*/
	if(raw_battery != 0)
 80015de:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <Battery_ADC_measurement+0xb0>)
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d01a      	beq.n	800161c <Battery_ADC_measurement+0x74>
	{
		if(raw_battery > max_battery)
 80015e6:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <Battery_ADC_measurement+0xb0>)
 80015e8:	881a      	ldrh	r2, [r3, #0]
 80015ea:	4b1c      	ldr	r3, [pc, #112]	; (800165c <Battery_ADC_measurement+0xb4>)
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d903      	bls.n	80015fa <Battery_ADC_measurement+0x52>
		{
			raw_battery = max_battery;
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <Battery_ADC_measurement+0xb4>)
 80015f4:	881a      	ldrh	r2, [r3, #0]
 80015f6:	4b18      	ldr	r3, [pc, #96]	; (8001658 <Battery_ADC_measurement+0xb0>)
 80015f8:	801a      	strh	r2, [r3, #0]
		}
		battery_procentage_raw = (raw_battery * 100) / max_battery;
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <Battery_ADC_measurement+0xb0>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	2364      	movs	r3, #100	; 0x64
 8001602:	fb02 f303 	mul.w	r3, r2, r3
 8001606:	4a15      	ldr	r2, [pc, #84]	; (800165c <Battery_ADC_measurement+0xb4>)
 8001608:	8812      	ldrh	r2, [r2, #0]
 800160a:	fb93 f3f2 	sdiv	r3, r3, r2
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fb64 	bl	8000cdc <__aeabi_i2f>
 8001614:	4603      	mov	r3, r0
 8001616:	4a12      	ldr	r2, [pc, #72]	; (8001660 <Battery_ADC_measurement+0xb8>)
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e003      	b.n	8001624 <Battery_ADC_measurement+0x7c>
	}
	else
	{
		battery_procentage_raw = 0;
 800161c:	4b10      	ldr	r3, [pc, #64]	; (8001660 <Battery_ADC_measurement+0xb8>)
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
	}
	/*Motor speed*/
	speedlevel = ((100 - battery_procentage_raw) + 100) / 100;
 8001624:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <Battery_ADC_measurement+0xb8>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	480e      	ldr	r0, [pc, #56]	; (8001664 <Battery_ADC_measurement+0xbc>)
 800162c:	f7ff faa0 	bl	8000b70 <__aeabi_fsub>
 8001630:	4603      	mov	r3, r0
 8001632:	490c      	ldr	r1, [pc, #48]	; (8001664 <Battery_ADC_measurement+0xbc>)
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fa9d 	bl	8000b74 <__addsf3>
 800163a:	4603      	mov	r3, r0
 800163c:	4909      	ldr	r1, [pc, #36]	; (8001664 <Battery_ADC_measurement+0xbc>)
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fc54 	bl	8000eec <__aeabi_fdiv>
 8001644:	4603      	mov	r3, r0
 8001646:	461a      	mov	r2, r3
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <Battery_ADC_measurement+0xc0>)
 800164a:	601a      	str	r2, [r3, #0]
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40010c00 	.word	0x40010c00
 8001654:	20000230 	.word	0x20000230
 8001658:	200002d4 	.word	0x200002d4
 800165c:	20000030 	.word	0x20000030
 8001660:	200002d8 	.word	0x200002d8
 8001664:	42c80000 	.word	0x42c80000
 8001668:	20000008 	.word	0x20000008

0800166c <delay_us>:
void delay_us (uint16_t us)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <delay_us+0x2c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2200      	movs	r2, #0
 800167c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 800167e:	bf00      	nop
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <delay_us+0x2c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	429a      	cmp	r2, r3
 800168a:	d3f9      	bcc.n	8001680 <delay_us+0x14>
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	200002e0 	.word	0x200002e0

0800169c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0308 	add.w	r3, r7, #8
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80016b6:	887b      	ldrh	r3, [r7, #2]
 80016b8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ba:	2301      	movs	r3, #1
 80016bc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2302      	movs	r3, #2
 80016c0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	4619      	mov	r1, r3
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f002 fa11 	bl	8003af0 <HAL_GPIO_Init>
}
 80016ce:	bf00      	nop
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b086      	sub	sp, #24
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	460b      	mov	r3, r1
 80016e0:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e2:	f107 0308 	add.w	r3, r7, #8
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80016f0:	887b      	ldrh	r3, [r7, #2]
 80016f2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016f8:	2301      	movs	r3, #1
 80016fa:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80016fc:	f107 0308 	add.w	r3, r7, #8
 8001700:	4619      	mov	r1, r3
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f002 f9f4 	bl	8003af0 <HAL_GPIO_Init>
}
 8001708:	bf00      	nop
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <motor_control>:


void motor_control (double pos_right, double pos_left)
{
 8001710:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001714:	b084      	sub	sp, #16
 8001716:	af00      	add	r7, sp, #0
 8001718:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800171c:	e9c7 2300 	strd	r2, r3, [r7]
	if (pos_left < 0 )
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	e9d7 0100 	ldrd	r0, r1, [r7]
 800172c:	f7ff f946 	bl	80009bc <__aeabi_dcmplt>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d02f      	beq.n	8001796 <motor_control+0x86>
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_2, (int)((ARR*pos_left*-1)*speedlevel));
 8001736:	4b64      	ldr	r3, [pc, #400]	; (80018c8 <motor_control+0x1b8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe fe62 	bl	8000404 <__aeabi_i2d>
 8001740:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001744:	f7fe fec8 	bl	80004d8 <__aeabi_dmul>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4690      	mov	r8, r2
 800174e:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001752:	4b5e      	ldr	r3, [pc, #376]	; (80018cc <motor_control+0x1bc>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe fe66 	bl	8000428 <__aeabi_f2d>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4640      	mov	r0, r8
 8001762:	4649      	mov	r1, r9
 8001764:	f7fe feb8 	bl	80004d8 <__aeabi_dmul>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4610      	mov	r0, r2
 800176e:	4619      	mov	r1, r3
 8001770:	f7ff f962 	bl	8000a38 <__aeabi_d2iz>
 8001774:	4602      	mov	r2, r0
 8001776:	4b56      	ldr	r3, [pc, #344]	; (80018d0 <motor_control+0x1c0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800177c:	2201      	movs	r2, #1
 800177e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001782:	4854      	ldr	r0, [pc, #336]	; (80018d4 <motor_control+0x1c4>)
 8001784:	f002 fb4f 	bl	8003e26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001788:	2200      	movs	r2, #0
 800178a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800178e:	4851      	ldr	r0, [pc, #324]	; (80018d4 <motor_control+0x1c4>)
 8001790:	f002 fb49 	bl	8003e26 <HAL_GPIO_WritePin>
 8001794:	e02d      	b.n	80017f2 <motor_control+0xe2>
	}
	else
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_2, (int)((ARR*pos_left)*speedlevel));
 8001796:	4b4c      	ldr	r3, [pc, #304]	; (80018c8 <motor_control+0x1b8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe fe32 	bl	8000404 <__aeabi_i2d>
 80017a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017a4:	f7fe fe98 	bl	80004d8 <__aeabi_dmul>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4690      	mov	r8, r2
 80017ae:	4699      	mov	r9, r3
 80017b0:	4b46      	ldr	r3, [pc, #280]	; (80018cc <motor_control+0x1bc>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe fe37 	bl	8000428 <__aeabi_f2d>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4640      	mov	r0, r8
 80017c0:	4649      	mov	r1, r9
 80017c2:	f7fe fe89 	bl	80004d8 <__aeabi_dmul>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4610      	mov	r0, r2
 80017cc:	4619      	mov	r1, r3
 80017ce:	f7ff f933 	bl	8000a38 <__aeabi_d2iz>
 80017d2:	4602      	mov	r2, r0
 80017d4:	4b3e      	ldr	r3, [pc, #248]	; (80018d0 <motor_control+0x1c0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80017da:	2200      	movs	r2, #0
 80017dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017e0:	483c      	ldr	r0, [pc, #240]	; (80018d4 <motor_control+0x1c4>)
 80017e2:	f002 fb20 	bl	8003e26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80017e6:	2201      	movs	r2, #1
 80017e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017ec:	4839      	ldr	r0, [pc, #228]	; (80018d4 <motor_control+0x1c4>)
 80017ee:	f002 fb1a 	bl	8003e26 <HAL_GPIO_WritePin>
	}
	if (pos_right < 0 )
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	f04f 0300 	mov.w	r3, #0
 80017fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017fe:	f7ff f8dd 	bl	80009bc <__aeabi_dcmplt>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d02d      	beq.n	8001864 <motor_control+0x154>
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_4, (int)((ARR*pos_right*-1)*speedlevel));
 8001808:	4b2f      	ldr	r3, [pc, #188]	; (80018c8 <motor_control+0x1b8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe fdf9 	bl	8000404 <__aeabi_i2d>
 8001812:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001816:	f7fe fe5f 	bl	80004d8 <__aeabi_dmul>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4614      	mov	r4, r2
 8001820:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001824:	4b29      	ldr	r3, [pc, #164]	; (80018cc <motor_control+0x1bc>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fdfd 	bl	8000428 <__aeabi_f2d>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4620      	mov	r0, r4
 8001834:	4629      	mov	r1, r5
 8001836:	f7fe fe4f 	bl	80004d8 <__aeabi_dmul>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	f7ff f8f9 	bl	8000a38 <__aeabi_d2iz>
 8001846:	4602      	mov	r2, r0
 8001848:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <motor_control+0x1c0>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800184e:	2201      	movs	r2, #1
 8001850:	2120      	movs	r1, #32
 8001852:	4820      	ldr	r0, [pc, #128]	; (80018d4 <motor_control+0x1c4>)
 8001854:	f002 fae7 	bl	8003e26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001858:	2200      	movs	r2, #0
 800185a:	2110      	movs	r1, #16
 800185c:	481d      	ldr	r0, [pc, #116]	; (80018d4 <motor_control+0x1c4>)
 800185e:	f002 fae2 	bl	8003e26 <HAL_GPIO_WritePin>
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_4, (int)((ARR*pos_right)*speedlevel));
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
	}
}
 8001862:	e02b      	b.n	80018bc <motor_control+0x1ac>
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_4, (int)((ARR*pos_right)*speedlevel));
 8001864:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <motor_control+0x1b8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fdcb 	bl	8000404 <__aeabi_i2d>
 800186e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001872:	f7fe fe31 	bl	80004d8 <__aeabi_dmul>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4614      	mov	r4, r2
 800187c:	461d      	mov	r5, r3
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <motor_control+0x1bc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fdd0 	bl	8000428 <__aeabi_f2d>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4620      	mov	r0, r4
 800188e:	4629      	mov	r1, r5
 8001890:	f7fe fe22 	bl	80004d8 <__aeabi_dmul>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	f7ff f8cc 	bl	8000a38 <__aeabi_d2iz>
 80018a0:	4602      	mov	r2, r0
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <motor_control+0x1c0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80018a8:	2200      	movs	r2, #0
 80018aa:	2120      	movs	r1, #32
 80018ac:	4809      	ldr	r0, [pc, #36]	; (80018d4 <motor_control+0x1c4>)
 80018ae:	f002 faba 	bl	8003e26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80018b2:	2201      	movs	r2, #1
 80018b4:	2110      	movs	r1, #16
 80018b6:	4807      	ldr	r0, [pc, #28]	; (80018d4 <motor_control+0x1c4>)
 80018b8:	f002 fab5 	bl	8003e26 <HAL_GPIO_WritePin>
}
 80018bc:	bf00      	nop
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018c6:	bf00      	nop
 80018c8:	2000001c 	.word	0x2000001c
 80018cc:	20000008 	.word	0x20000008
 80018d0:	20000370 	.word	0x20000370
 80018d4:	40010c00 	.word	0x40010c00

080018d8 <sharp_turn>:


void sharp_turn () {
 80018d8:	b5b0      	push	{r4, r5, r7, lr}
 80018da:	af00      	add	r7, sp, #0

	if (last_idle < 25)
 80018dc:	4b2c      	ldr	r3, [pc, #176]	; (8001990 <sharp_turn+0xb8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b18      	cmp	r3, #24
 80018e2:	dc29      	bgt.n	8001938 <sharp_turn+0x60>
	{
		if (last_end == 1)
 80018e4:	4b2b      	ldr	r3, [pc, #172]	; (8001994 <sharp_turn+0xbc>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d112      	bne.n	8001912 <sharp_turn+0x3a>
			motor_control(Sharp_bend_speed_right, Sharp_bend_speed_left);
 80018ec:	4b2a      	ldr	r3, [pc, #168]	; (8001998 <sharp_turn+0xc0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fd87 	bl	8000404 <__aeabi_i2d>
 80018f6:	4604      	mov	r4, r0
 80018f8:	460d      	mov	r5, r1
 80018fa:	4b28      	ldr	r3, [pc, #160]	; (800199c <sharp_turn+0xc4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fd80 	bl	8000404 <__aeabi_i2d>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4620      	mov	r0, r4
 800190a:	4629      	mov	r1, r5
 800190c:	f7ff ff00 	bl	8001710 <motor_control>
		if (last_end == 1)
			motor_control(Bend_speed_right, Bend_speed_left);
		else
			motor_control(Bend_speed_left, Bend_speed_right);
	}
}
 8001910:	e03b      	b.n	800198a <sharp_turn+0xb2>
			motor_control(Sharp_bend_speed_left, Sharp_bend_speed_right);
 8001912:	4b22      	ldr	r3, [pc, #136]	; (800199c <sharp_turn+0xc4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fd74 	bl	8000404 <__aeabi_i2d>
 800191c:	4604      	mov	r4, r0
 800191e:	460d      	mov	r5, r1
 8001920:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <sharp_turn+0xc0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fd6d 	bl	8000404 <__aeabi_i2d>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4620      	mov	r0, r4
 8001930:	4629      	mov	r1, r5
 8001932:	f7ff feed 	bl	8001710 <motor_control>
}
 8001936:	e028      	b.n	800198a <sharp_turn+0xb2>
		if (last_end == 1)
 8001938:	4b16      	ldr	r3, [pc, #88]	; (8001994 <sharp_turn+0xbc>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d112      	bne.n	8001966 <sharp_turn+0x8e>
			motor_control(Bend_speed_right, Bend_speed_left);
 8001940:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <sharp_turn+0xc8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fd5d 	bl	8000404 <__aeabi_i2d>
 800194a:	4604      	mov	r4, r0
 800194c:	460d      	mov	r5, r1
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <sharp_turn+0xcc>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fd56 	bl	8000404 <__aeabi_i2d>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4620      	mov	r0, r4
 800195e:	4629      	mov	r1, r5
 8001960:	f7ff fed6 	bl	8001710 <motor_control>
}
 8001964:	e011      	b.n	800198a <sharp_turn+0xb2>
			motor_control(Bend_speed_left, Bend_speed_right);
 8001966:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <sharp_turn+0xcc>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fd4a 	bl	8000404 <__aeabi_i2d>
 8001970:	4604      	mov	r4, r0
 8001972:	460d      	mov	r5, r1
 8001974:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <sharp_turn+0xc8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f7fe fd43 	bl	8000404 <__aeabi_i2d>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4620      	mov	r0, r4
 8001984:	4629      	mov	r1, r5
 8001986:	f7ff fec3 	bl	8001710 <motor_control>
}
 800198a:	bf00      	nop
 800198c:	bdb0      	pop	{r4, r5, r7, pc}
 800198e:	bf00      	nop
 8001990:	200002b0 	.word	0x200002b0
 8001994:	200002ac 	.word	0x200002ac
 8001998:	20000020 	.word	0x20000020
 800199c:	20000024 	.word	0x20000024
 80019a0:	20000028 	.word	0x20000028
 80019a4:	2000002c 	.word	0x2000002c

080019a8 <QTR8_read>:
int QTR8_read ()
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDON_GPIO_Port, LEDON_Pin, 1);
 80019ae:	2201      	movs	r2, #1
 80019b0:	2101      	movs	r1, #1
 80019b2:	48a2      	ldr	r0, [pc, #648]	; (8001c3c <QTR8_read+0x294>)
 80019b4:	f002 fa37 	bl	8003e26 <HAL_GPIO_WritePin>

	Set_Pin_Output(SENSOR1_GPIO_Port, SENSOR1_Pin);
 80019b8:	2101      	movs	r1, #1
 80019ba:	48a1      	ldr	r0, [pc, #644]	; (8001c40 <QTR8_read+0x298>)
 80019bc:	f7ff fe6e 	bl	800169c <Set_Pin_Output>
	Set_Pin_Output(SENSOR2_GPIO_Port, SENSOR2_Pin);
 80019c0:	2102      	movs	r1, #2
 80019c2:	489f      	ldr	r0, [pc, #636]	; (8001c40 <QTR8_read+0x298>)
 80019c4:	f7ff fe6a 	bl	800169c <Set_Pin_Output>
	Set_Pin_Output(SENSOR3_GPIO_Port, SENSOR3_Pin);
 80019c8:	2104      	movs	r1, #4
 80019ca:	489d      	ldr	r0, [pc, #628]	; (8001c40 <QTR8_read+0x298>)
 80019cc:	f7ff fe66 	bl	800169c <Set_Pin_Output>
	Set_Pin_Output(SENSOR4_GPIO_Port, SENSOR4_Pin);
 80019d0:	2108      	movs	r1, #8
 80019d2:	489b      	ldr	r0, [pc, #620]	; (8001c40 <QTR8_read+0x298>)
 80019d4:	f7ff fe62 	bl	800169c <Set_Pin_Output>
	Set_Pin_Output(SENSOR5_GPIO_Port, SENSOR5_Pin);
 80019d8:	2110      	movs	r1, #16
 80019da:	4899      	ldr	r0, [pc, #612]	; (8001c40 <QTR8_read+0x298>)
 80019dc:	f7ff fe5e 	bl	800169c <Set_Pin_Output>
	Set_Pin_Output(SENSOR6_GPIO_Port, SENSOR6_Pin);
 80019e0:	2120      	movs	r1, #32
 80019e2:	4897      	ldr	r0, [pc, #604]	; (8001c40 <QTR8_read+0x298>)
 80019e4:	f7ff fe5a 	bl	800169c <Set_Pin_Output>
	Set_Pin_Output(SENSOR7_GPIO_Port, SENSOR7_Pin);
 80019e8:	2140      	movs	r1, #64	; 0x40
 80019ea:	4895      	ldr	r0, [pc, #596]	; (8001c40 <QTR8_read+0x298>)
 80019ec:	f7ff fe56 	bl	800169c <Set_Pin_Output>
	Set_Pin_Output(SENSOR8_GPIO_Port, SENSOR8_Pin);
 80019f0:	2180      	movs	r1, #128	; 0x80
 80019f2:	4893      	ldr	r0, [pc, #588]	; (8001c40 <QTR8_read+0x298>)
 80019f4:	f7ff fe52 	bl	800169c <Set_Pin_Output>

	HAL_GPIO_WritePin (SENSOR1_GPIO_Port, SENSOR1_Pin, 1);
 80019f8:	2201      	movs	r2, #1
 80019fa:	2101      	movs	r1, #1
 80019fc:	4890      	ldr	r0, [pc, #576]	; (8001c40 <QTR8_read+0x298>)
 80019fe:	f002 fa12 	bl	8003e26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR2_GPIO_Port, SENSOR2_Pin, 1);
 8001a02:	2201      	movs	r2, #1
 8001a04:	2102      	movs	r1, #2
 8001a06:	488e      	ldr	r0, [pc, #568]	; (8001c40 <QTR8_read+0x298>)
 8001a08:	f002 fa0d 	bl	8003e26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR3_GPIO_Port, SENSOR3_Pin, 1);
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	2104      	movs	r1, #4
 8001a10:	488b      	ldr	r0, [pc, #556]	; (8001c40 <QTR8_read+0x298>)
 8001a12:	f002 fa08 	bl	8003e26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR4_GPIO_Port, SENSOR4_Pin, 1);
 8001a16:	2201      	movs	r2, #1
 8001a18:	2108      	movs	r1, #8
 8001a1a:	4889      	ldr	r0, [pc, #548]	; (8001c40 <QTR8_read+0x298>)
 8001a1c:	f002 fa03 	bl	8003e26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR5_GPIO_Port, SENSOR5_Pin, 1);
 8001a20:	2201      	movs	r2, #1
 8001a22:	2110      	movs	r1, #16
 8001a24:	4886      	ldr	r0, [pc, #536]	; (8001c40 <QTR8_read+0x298>)
 8001a26:	f002 f9fe 	bl	8003e26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR6_GPIO_Port, SENSOR6_Pin, 1);
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	2120      	movs	r1, #32
 8001a2e:	4884      	ldr	r0, [pc, #528]	; (8001c40 <QTR8_read+0x298>)
 8001a30:	f002 f9f9 	bl	8003e26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR7_GPIO_Port, SENSOR7_Pin, 1);
 8001a34:	2201      	movs	r2, #1
 8001a36:	2140      	movs	r1, #64	; 0x40
 8001a38:	4881      	ldr	r0, [pc, #516]	; (8001c40 <QTR8_read+0x298>)
 8001a3a:	f002 f9f4 	bl	8003e26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR8_GPIO_Port, SENSOR8_Pin, 1);
 8001a3e:	2201      	movs	r2, #1
 8001a40:	2180      	movs	r1, #128	; 0x80
 8001a42:	487f      	ldr	r0, [pc, #508]	; (8001c40 <QTR8_read+0x298>)
 8001a44:	f002 f9ef 	bl	8003e26 <HAL_GPIO_WritePin>

	delay_us(10);
 8001a48:	200a      	movs	r0, #10
 8001a4a:	f7ff fe0f 	bl	800166c <delay_us>

	Set_Pin_Input(SENSOR1_GPIO_Port, SENSOR1_Pin);
 8001a4e:	2101      	movs	r1, #1
 8001a50:	487b      	ldr	r0, [pc, #492]	; (8001c40 <QTR8_read+0x298>)
 8001a52:	f7ff fe40 	bl	80016d6 <Set_Pin_Input>
	Set_Pin_Input(SENSOR2_GPIO_Port, SENSOR2_Pin);
 8001a56:	2102      	movs	r1, #2
 8001a58:	4879      	ldr	r0, [pc, #484]	; (8001c40 <QTR8_read+0x298>)
 8001a5a:	f7ff fe3c 	bl	80016d6 <Set_Pin_Input>
	Set_Pin_Input(SENSOR3_GPIO_Port, SENSOR3_Pin);
 8001a5e:	2104      	movs	r1, #4
 8001a60:	4877      	ldr	r0, [pc, #476]	; (8001c40 <QTR8_read+0x298>)
 8001a62:	f7ff fe38 	bl	80016d6 <Set_Pin_Input>
	Set_Pin_Input(SENSOR4_GPIO_Port, SENSOR4_Pin);
 8001a66:	2108      	movs	r1, #8
 8001a68:	4875      	ldr	r0, [pc, #468]	; (8001c40 <QTR8_read+0x298>)
 8001a6a:	f7ff fe34 	bl	80016d6 <Set_Pin_Input>
	Set_Pin_Input(SENSOR5_GPIO_Port, SENSOR5_Pin);
 8001a6e:	2110      	movs	r1, #16
 8001a70:	4873      	ldr	r0, [pc, #460]	; (8001c40 <QTR8_read+0x298>)
 8001a72:	f7ff fe30 	bl	80016d6 <Set_Pin_Input>
	Set_Pin_Input(SENSOR6_GPIO_Port, SENSOR6_Pin);
 8001a76:	2120      	movs	r1, #32
 8001a78:	4871      	ldr	r0, [pc, #452]	; (8001c40 <QTR8_read+0x298>)
 8001a7a:	f7ff fe2c 	bl	80016d6 <Set_Pin_Input>
	Set_Pin_Input(SENSOR7_GPIO_Port, SENSOR7_Pin);
 8001a7e:	2140      	movs	r1, #64	; 0x40
 8001a80:	486f      	ldr	r0, [pc, #444]	; (8001c40 <QTR8_read+0x298>)
 8001a82:	f7ff fe28 	bl	80016d6 <Set_Pin_Input>
	Set_Pin_Input(SENSOR8_GPIO_Port, SENSOR8_Pin);
 8001a86:	2180      	movs	r1, #128	; 0x80
 8001a88:	486d      	ldr	r0, [pc, #436]	; (8001c40 <QTR8_read+0x298>)
 8001a8a:	f7ff fe24 	bl	80016d6 <Set_Pin_Input>

	// Threshold
	 delay_us(4500);
 8001a8e:	f241 1094 	movw	r0, #4500	; 0x1194
 8001a92:	f7ff fdeb 	bl	800166c <delay_us>

	sensor_read = 0x00000000;
 8001a96:	4b6b      	ldr	r3, [pc, #428]	; (8001c44 <QTR8_read+0x29c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
	int pos = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	607b      	str	r3, [r7, #4]
  int active = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	603b      	str	r3, [r7, #0]

	if (HAL_GPIO_ReadPin(SENSOR1_GPIO_Port, SENSOR1_Pin)) {
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	4866      	ldr	r0, [pc, #408]	; (8001c40 <QTR8_read+0x298>)
 8001aa8:	f002 f9a6 	bl	8003df8 <HAL_GPIO_ReadPin>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00f      	beq.n	8001ad2 <QTR8_read+0x12a>
		sensor_read |= 0x00000001;
 8001ab2:	4b64      	ldr	r3, [pc, #400]	; (8001c44 <QTR8_read+0x29c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	4a62      	ldr	r2, [pc, #392]	; (8001c44 <QTR8_read+0x29c>)
 8001abc:	6013      	str	r3, [r2, #0]
		pos += 1000;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001ac4:	607b      	str	r3, [r7, #4]
    active++;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	603b      	str	r3, [r7, #0]
		last_end = 1;
 8001acc:	4b5e      	ldr	r3, [pc, #376]	; (8001c48 <QTR8_read+0x2a0>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(SENSOR2_GPIO_Port, SENSOR2_Pin)) {
 8001ad2:	2102      	movs	r1, #2
 8001ad4:	485a      	ldr	r0, [pc, #360]	; (8001c40 <QTR8_read+0x298>)
 8001ad6:	f002 f98f 	bl	8003df8 <HAL_GPIO_ReadPin>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00c      	beq.n	8001afa <QTR8_read+0x152>
		sensor_read |= 0x00000010;
 8001ae0:	4b58      	ldr	r3, [pc, #352]	; (8001c44 <QTR8_read+0x29c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f043 0310 	orr.w	r3, r3, #16
 8001ae8:	4a56      	ldr	r2, [pc, #344]	; (8001c44 <QTR8_read+0x29c>)
 8001aea:	6013      	str	r3, [r2, #0]
		pos += 2000;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001af2:	607b      	str	r3, [r7, #4]
    active++;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	3301      	adds	r3, #1
 8001af8:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR3_GPIO_Port, SENSOR3_Pin)) {
 8001afa:	2104      	movs	r1, #4
 8001afc:	4850      	ldr	r0, [pc, #320]	; (8001c40 <QTR8_read+0x298>)
 8001afe:	f002 f97b 	bl	8003df8 <HAL_GPIO_ReadPin>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00c      	beq.n	8001b22 <QTR8_read+0x17a>
		sensor_read |= 0x00000100;
 8001b08:	4b4e      	ldr	r3, [pc, #312]	; (8001c44 <QTR8_read+0x29c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b10:	4a4c      	ldr	r2, [pc, #304]	; (8001c44 <QTR8_read+0x29c>)
 8001b12:	6013      	str	r3, [r2, #0]
		pos += 3000;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8001b1a:	607b      	str	r3, [r7, #4]
    active++;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR4_GPIO_Port, SENSOR4_Pin)) {
 8001b22:	2108      	movs	r1, #8
 8001b24:	4846      	ldr	r0, [pc, #280]	; (8001c40 <QTR8_read+0x298>)
 8001b26:	f002 f967 	bl	8003df8 <HAL_GPIO_ReadPin>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00c      	beq.n	8001b4a <QTR8_read+0x1a2>
		sensor_read |= 0x00001000;
 8001b30:	4b44      	ldr	r3, [pc, #272]	; (8001c44 <QTR8_read+0x29c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b38:	4a42      	ldr	r2, [pc, #264]	; (8001c44 <QTR8_read+0x29c>)
 8001b3a:	6013      	str	r3, [r2, #0]
		pos += 4000;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8001b42:	607b      	str	r3, [r7, #4]
    active++;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	3301      	adds	r3, #1
 8001b48:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR5_GPIO_Port, SENSOR5_Pin)) {
 8001b4a:	2110      	movs	r1, #16
 8001b4c:	483c      	ldr	r0, [pc, #240]	; (8001c40 <QTR8_read+0x298>)
 8001b4e:	f002 f953 	bl	8003df8 <HAL_GPIO_ReadPin>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00d      	beq.n	8001b74 <QTR8_read+0x1cc>
		sensor_read |= 0x00010000;
 8001b58:	4b3a      	ldr	r3, [pc, #232]	; (8001c44 <QTR8_read+0x29c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b60:	4a38      	ldr	r2, [pc, #224]	; (8001c44 <QTR8_read+0x29c>)
 8001b62:	6013      	str	r3, [r2, #0]
		pos += 5000;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8001b6a:	3308      	adds	r3, #8
 8001b6c:	607b      	str	r3, [r7, #4]
    active++;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	3301      	adds	r3, #1
 8001b72:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR6_GPIO_Port, SENSOR6_Pin)) {
 8001b74:	2120      	movs	r1, #32
 8001b76:	4832      	ldr	r0, [pc, #200]	; (8001c40 <QTR8_read+0x298>)
 8001b78:	f002 f93e 	bl	8003df8 <HAL_GPIO_ReadPin>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00d      	beq.n	8001b9e <QTR8_read+0x1f6>
		sensor_read |= 0x00100000;
 8001b82:	4b30      	ldr	r3, [pc, #192]	; (8001c44 <QTR8_read+0x29c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b8a:	4a2e      	ldr	r2, [pc, #184]	; (8001c44 <QTR8_read+0x29c>)
 8001b8c:	6013      	str	r3, [r2, #0]
		pos += 6000;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8001b94:	3310      	adds	r3, #16
 8001b96:	607b      	str	r3, [r7, #4]
    active++;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR7_GPIO_Port, SENSOR7_Pin)) {
 8001b9e:	2140      	movs	r1, #64	; 0x40
 8001ba0:	4827      	ldr	r0, [pc, #156]	; (8001c40 <QTR8_read+0x298>)
 8001ba2:	f002 f929 	bl	8003df8 <HAL_GPIO_ReadPin>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00d      	beq.n	8001bc8 <QTR8_read+0x220>
		sensor_read |= 0x01000000;
 8001bac:	4b25      	ldr	r3, [pc, #148]	; (8001c44 <QTR8_read+0x29c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bb4:	4a23      	ldr	r2, [pc, #140]	; (8001c44 <QTR8_read+0x29c>)
 8001bb6:	6013      	str	r3, [r2, #0]
		pos += 7000;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f503 53da 	add.w	r3, r3, #6976	; 0x1b40
 8001bbe:	3318      	adds	r3, #24
 8001bc0:	607b      	str	r3, [r7, #4]
    active++;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR8_GPIO_Port, SENSOR8_Pin)) {
 8001bc8:	2180      	movs	r1, #128	; 0x80
 8001bca:	481d      	ldr	r0, [pc, #116]	; (8001c40 <QTR8_read+0x298>)
 8001bcc:	f002 f914 	bl	8003df8 <HAL_GPIO_ReadPin>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00f      	beq.n	8001bf6 <QTR8_read+0x24e>
		sensor_read |= 0x10000000;
 8001bd6:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <QTR8_read+0x29c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bde:	4a19      	ldr	r2, [pc, #100]	; (8001c44 <QTR8_read+0x29c>)
 8001be0:	6013      	str	r3, [r2, #0]
		pos += 8000;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8001be8:	607b      	str	r3, [r7, #4]
    active++;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	3301      	adds	r3, #1
 8001bee:	603b      	str	r3, [r7, #0]
		last_end = 0;
 8001bf0:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <QTR8_read+0x2a0>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
  }

  HAL_GPIO_WritePin(LEDON_GPIO_Port, LEDON_Pin, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	4810      	ldr	r0, [pc, #64]	; (8001c3c <QTR8_read+0x294>)
 8001bfc:	f002 f913 	bl	8003e26 <HAL_GPIO_WritePin>

  actives = active;
 8001c00:	4a12      	ldr	r2, [pc, #72]	; (8001c4c <QTR8_read+0x2a4>)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	6013      	str	r3, [r2, #0]
	position = pos/active;
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c0e:	4a10      	ldr	r2, [pc, #64]	; (8001c50 <QTR8_read+0x2a8>)
 8001c10:	6013      	str	r3, [r2, #0]

	if (actives == 0)
 8001c12:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <QTR8_read+0x2a4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d105      	bne.n	8001c26 <QTR8_read+0x27e>
		last_idle++;
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <QTR8_read+0x2ac>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	4a0c      	ldr	r2, [pc, #48]	; (8001c54 <QTR8_read+0x2ac>)
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	e002      	b.n	8001c2c <QTR8_read+0x284>
	else
		last_idle = 0;
 8001c26:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <QTR8_read+0x2ac>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]

	return pos/active;
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40010c00 	.word	0x40010c00
 8001c40:	40010800 	.word	0x40010800
 8001c44:	20000260 	.word	0x20000260
 8001c48:	200002ac 	.word	0x200002ac
 8001c4c:	200002b4 	.word	0x200002b4
 8001c50:	20000264 	.word	0x20000264
 8001c54:	200002b0 	.word	0x200002b0

08001c58 <forward_brake>:


void forward_brake(int pos_right, int pos_left)
{
 8001c58:	b5b0      	push	{r4, r5, r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
	if (actives == 0)
 8001c62:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <forward_brake+0x3c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d102      	bne.n	8001c70 <forward_brake+0x18>
		sharp_turn();
 8001c6a:	f7ff fe35 	bl	80018d8 <sharp_turn>
	else
	  motor_control(pos_right, pos_left);
}
 8001c6e:	e00d      	b.n	8001c8c <forward_brake+0x34>
	  motor_control(pos_right, pos_left);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7fe fbc7 	bl	8000404 <__aeabi_i2d>
 8001c76:	4604      	mov	r4, r0
 8001c78:	460d      	mov	r5, r1
 8001c7a:	6838      	ldr	r0, [r7, #0]
 8001c7c:	f7fe fbc2 	bl	8000404 <__aeabi_i2d>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4620      	mov	r0, r4
 8001c86:	4629      	mov	r1, r5
 8001c88:	f7ff fd42 	bl	8001710 <motor_control>
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bdb0      	pop	{r4, r5, r7, pc}
 8001c94:	200002b4 	.word	0x200002b4

08001c98 <past_errors>:

void past_errors (int error)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  for (int i = 9; i > 0; i--)
 8001ca0:	2309      	movs	r3, #9
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	e00b      	b.n	8001cbe <past_errors+0x26>
      errors[i] = errors[i-1];
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <past_errors+0x3c>)
 8001cac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cb0:	4908      	ldr	r1, [pc, #32]	; (8001cd4 <past_errors+0x3c>)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int i = 9; i > 0; i--)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	dcf0      	bgt.n	8001ca6 <past_errors+0xe>
  errors[0] = error;
 8001cc4:	4a03      	ldr	r2, [pc, #12]	; (8001cd4 <past_errors+0x3c>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6013      	str	r3, [r2, #0]
}
 8001cca:	bf00      	nop
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr
 8001cd4:	20000284 	.word	0x20000284

08001cd8 <errors_sum>:

int errors_sum (int index, int abs)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  int sum = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < index; i++)
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	e01a      	b.n	8001d22 <errors_sum+0x4a>
  {
    if (abs == 1 && errors[i] < 0)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d10d      	bne.n	8001d0e <errors_sum+0x36>
 8001cf2:	4a11      	ldr	r2, [pc, #68]	; (8001d38 <errors_sum+0x60>)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	da07      	bge.n	8001d0e <errors_sum+0x36>
      sum += -errors[i];
 8001cfe:	4a0e      	ldr	r2, [pc, #56]	; (8001d38 <errors_sum+0x60>)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	e006      	b.n	8001d1c <errors_sum+0x44>
    else
      sum += errors[i];
 8001d0e:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <errors_sum+0x60>)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	4413      	add	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < index; i++)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	dbe0      	blt.n	8001cec <errors_sum+0x14>
  }
  return sum;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000284 	.word	0x20000284

08001d3c <PID_control>:

void PID_control() {
 8001d3c:	b590      	push	{r4, r7, lr}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af00      	add	r7, sp, #0
  uint16_t position = QTR8_read();
 8001d42:	f7ff fe31 	bl	80019a8 <QTR8_read>
 8001d46:	4603      	mov	r3, r0
 8001d48:	81fb      	strh	r3, [r7, #14]
  int error = 4500 - position;
 8001d4a:	89fb      	ldrh	r3, [r7, #14]
 8001d4c:	f5c3 538c 	rsb	r3, r3, #4480	; 0x1180
 8001d50:	3314      	adds	r3, #20
 8001d52:	60bb      	str	r3, [r7, #8]
  past_errors(error);
 8001d54:	68b8      	ldr	r0, [r7, #8]
 8001d56:	f7ff ff9f 	bl	8001c98 <past_errors>

  P = error;
 8001d5a:	4a55      	ldr	r2, [pc, #340]	; (8001eb0 <PID_control+0x174>)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	6013      	str	r3, [r2, #0]
  I = errors_sum(5, 0);
 8001d60:	2100      	movs	r1, #0
 8001d62:	2005      	movs	r0, #5
 8001d64:	f7ff ffb8 	bl	8001cd8 <errors_sum>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4a52      	ldr	r2, [pc, #328]	; (8001eb4 <PID_control+0x178>)
 8001d6c:	6013      	str	r3, [r2, #0]
  D = error - lastError;
 8001d6e:	4b52      	ldr	r3, [pc, #328]	; (8001eb8 <PID_control+0x17c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	4a51      	ldr	r2, [pc, #324]	; (8001ebc <PID_control+0x180>)
 8001d78:	6013      	str	r3, [r2, #0]
  R = errors_sum(5, 1);
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	2005      	movs	r0, #5
 8001d7e:	f7ff ffab 	bl	8001cd8 <errors_sum>
 8001d82:	4603      	mov	r3, r0
 8001d84:	4a4e      	ldr	r2, [pc, #312]	; (8001ec0 <PID_control+0x184>)
 8001d86:	6013      	str	r3, [r2, #0]
  lastError = error;
 8001d88:	4a4b      	ldr	r2, [pc, #300]	; (8001eb8 <PID_control+0x17c>)
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	6013      	str	r3, [r2, #0]

  int motorspeed = P*Kp + I*Ki + D*Kd;
 8001d8e:	4b48      	ldr	r3, [pc, #288]	; (8001eb0 <PID_control+0x174>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe ffa2 	bl	8000cdc <__aeabi_i2f>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	4b4a      	ldr	r3, [pc, #296]	; (8001ec4 <PID_control+0x188>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4610      	mov	r0, r2
 8001da2:	f7fe ffef 	bl	8000d84 <__aeabi_fmul>
 8001da6:	4603      	mov	r3, r0
 8001da8:	461c      	mov	r4, r3
 8001daa:	4b42      	ldr	r3, [pc, #264]	; (8001eb4 <PID_control+0x178>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe ff94 	bl	8000cdc <__aeabi_i2f>
 8001db4:	4602      	mov	r2, r0
 8001db6:	4b44      	ldr	r3, [pc, #272]	; (8001ec8 <PID_control+0x18c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	f7fe ffe1 	bl	8000d84 <__aeabi_fmul>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4620      	mov	r0, r4
 8001dc8:	f7fe fed4 	bl	8000b74 <__addsf3>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	461c      	mov	r4, r3
 8001dd0:	4b3a      	ldr	r3, [pc, #232]	; (8001ebc <PID_control+0x180>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe ff81 	bl	8000cdc <__aeabi_i2f>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	4b3b      	ldr	r3, [pc, #236]	; (8001ecc <PID_control+0x190>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4619      	mov	r1, r3
 8001de2:	4610      	mov	r0, r2
 8001de4:	f7fe ffce 	bl	8000d84 <__aeabi_fmul>
 8001de8:	4603      	mov	r3, r0
 8001dea:	4619      	mov	r1, r3
 8001dec:	4620      	mov	r0, r4
 8001dee:	f7fe fec1 	bl	8000b74 <__addsf3>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff f98b 	bl	8001110 <__aeabi_f2iz>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	607b      	str	r3, [r7, #4]

  int motorspeedl = basespeedl + motorspeed - R*Kr;
 8001dfe:	4b34      	ldr	r3, [pc, #208]	; (8001ed0 <PID_control+0x194>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4413      	add	r3, r2
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe ff68 	bl	8000cdc <__aeabi_i2f>
 8001e0c:	4604      	mov	r4, r0
 8001e0e:	4b2c      	ldr	r3, [pc, #176]	; (8001ec0 <PID_control+0x184>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe ff62 	bl	8000cdc <__aeabi_i2f>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	4b2e      	ldr	r3, [pc, #184]	; (8001ed4 <PID_control+0x198>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4610      	mov	r0, r2
 8001e22:	f7fe ffaf 	bl	8000d84 <__aeabi_fmul>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	f7fe fea0 	bl	8000b70 <__aeabi_fsub>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff f96c 	bl	8001110 <__aeabi_f2iz>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	617b      	str	r3, [r7, #20]
  int motorspeedr = basespeedr - motorspeed - R*Kr;
 8001e3c:	4b26      	ldr	r3, [pc, #152]	; (8001ed8 <PID_control+0x19c>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe ff49 	bl	8000cdc <__aeabi_i2f>
 8001e4a:	4604      	mov	r4, r0
 8001e4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <PID_control+0x184>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe ff43 	bl	8000cdc <__aeabi_i2f>
 8001e56:	4602      	mov	r2, r0
 8001e58:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <PID_control+0x198>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4610      	mov	r0, r2
 8001e60:	f7fe ff90 	bl	8000d84 <__aeabi_fmul>
 8001e64:	4603      	mov	r3, r0
 8001e66:	4619      	mov	r1, r3
 8001e68:	4620      	mov	r0, r4
 8001e6a:	f7fe fe81 	bl	8000b70 <__aeabi_fsub>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff f94d 	bl	8001110 <__aeabi_f2iz>
 8001e76:	4603      	mov	r3, r0
 8001e78:	613b      	str	r3, [r7, #16]

  if (motorspeedl > maxspeedl)
 8001e7a:	4b18      	ldr	r3, [pc, #96]	; (8001edc <PID_control+0x1a0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	dd02      	ble.n	8001e8a <PID_control+0x14e>
    motorspeedl = maxspeedl;
 8001e84:	4b15      	ldr	r3, [pc, #84]	; (8001edc <PID_control+0x1a0>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	617b      	str	r3, [r7, #20]
  if (motorspeedr > maxspeedr)
 8001e8a:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <PID_control+0x1a4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	dd02      	ble.n	8001e9a <PID_control+0x15e>
    motorspeedr = maxspeedr;
 8001e94:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <PID_control+0x1a4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	613b      	str	r3, [r7, #16]

  	Battery_ADC_measurement();
 8001e9a:	f7ff fb85 	bl	80015a8 <Battery_ADC_measurement>
	forward_brake(motorspeedr, motorspeedl);
 8001e9e:	6979      	ldr	r1, [r7, #20]
 8001ea0:	6938      	ldr	r0, [r7, #16]
 8001ea2:	f7ff fed9 	bl	8001c58 <forward_brake>
}
 8001ea6:	bf00      	nop
 8001ea8:	371c      	adds	r7, #28
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd90      	pop	{r4, r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000270 	.word	0x20000270
 8001eb4:	20000274 	.word	0x20000274
 8001eb8:	20000280 	.word	0x20000280
 8001ebc:	20000278 	.word	0x20000278
 8001ec0:	2000027c 	.word	0x2000027c
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	20000268 	.word	0x20000268
 8001ecc:	20000004 	.word	0x20000004
 8001ed0:	20000018 	.word	0x20000018
 8001ed4:	2000026c 	.word	0x2000026c
 8001ed8:	20000014 	.word	0x20000014
 8001edc:	20000010 	.word	0x20000010
 8001ee0:	2000000c 	.word	0x2000000c

08001ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ee8:	f000 ff90 	bl	8002e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eec:	f000 f85a 	bl	8001fa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ef0:	f7ff fac8 	bl	8001484 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001ef4:	f000 fcd0 	bl	8002898 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001ef8:	f000 fd1e 	bl	8002938 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001efc:	f000 fd6a 	bl	80029d4 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001f00:	f000 fe7a 	bl	8002bf8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001f04:	f000 fea2 	bl	8002c4c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001f08:	f7ff fa42 	bl	8001390 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
   HAL_UART_Receive_IT(&huart1,(uint8_t*)RxData,28); //Oczekiwanie na dane z HC-05 i włączenie timerów
 8001f0c:	221c      	movs	r2, #28
 8001f0e:	491e      	ldr	r1, [pc, #120]	; (8001f88 <main+0xa4>)
 8001f10:	481e      	ldr	r0, [pc, #120]	; (8001f8c <main+0xa8>)
 8001f12:	f003 fcc4 	bl	800589e <HAL_UART_Receive_IT>
   HAL_TIM_Base_Start(&htim1);
 8001f16:	481e      	ldr	r0, [pc, #120]	; (8001f90 <main+0xac>)
 8001f18:	f002 fd6a 	bl	80049f0 <HAL_TIM_Base_Start>
   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	481d      	ldr	r0, [pc, #116]	; (8001f94 <main+0xb0>)
 8001f20:	f002 fe60 	bl	8004be4 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001f24:	2108      	movs	r1, #8
 8001f26:	481b      	ldr	r0, [pc, #108]	; (8001f94 <main+0xb0>)
 8001f28:	f002 fe5c 	bl	8004be4 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001f2c:	210c      	movs	r1, #12
 8001f2e:	4819      	ldr	r0, [pc, #100]	; (8001f94 <main+0xb0>)
 8001f30:	f002 fe58 	bl	8004be4 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001f34:	2104      	movs	r1, #4
 8001f36:	4817      	ldr	r0, [pc, #92]	; (8001f94 <main+0xb0>)
 8001f38:	f002 fe54 	bl	8004be4 <HAL_TIM_PWM_Start>
   //__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_1, 100);
   __HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_2, 100);
 8001f3c:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <main+0xb0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2264      	movs	r2, #100	; 0x64
 8001f42:	639a      	str	r2, [r3, #56]	; 0x38
   __HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_1, 0);
 8001f44:	4b13      	ldr	r3, [pc, #76]	; (8001f94 <main+0xb0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	635a      	str	r2, [r3, #52]	; 0x34
   __HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_3, 100);
 8001f4c:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <main+0xb0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2264      	movs	r2, #100	; 0x64
 8001f52:	63da      	str	r2, [r3, #60]	; 0x3c
   __HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_4, 100);
 8001f54:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <main+0xb0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2264      	movs	r2, #100	; 0x64
 8001f5a:	641a      	str	r2, [r3, #64]	; 0x40
   HAL_Delay(2000);
 8001f5c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001f60:	f000 ffb6 	bl	8002ed0 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  PID_control();
 8001f64:	f7ff feea 	bl	8001d3c <PID_control>
	  if(battery_procentage_raw < 75)
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <main+0xb4>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	490b      	ldr	r1, [pc, #44]	; (8001f9c <main+0xb8>)
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff f8a6 	bl	80010c0 <__aeabi_fcmplt>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d004      	beq.n	8001f84 <main+0xa0>
	  {
		  /*If battery is low stop robot*/
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2140      	movs	r1, #64	; 0x40
 8001f7e:	4808      	ldr	r0, [pc, #32]	; (8001fa0 <main+0xbc>)
 8001f80:	f001 ff51 	bl	8003e26 <HAL_GPIO_WritePin>
	  PID_control();
 8001f84:	e7ee      	b.n	8001f64 <main+0x80>
 8001f86:	bf00      	nop
 8001f88:	200002b8 	.word	0x200002b8
 8001f8c:	200003b8 	.word	0x200003b8
 8001f90:	200002e0 	.word	0x200002e0
 8001f94:	20000370 	.word	0x20000370
 8001f98:	200002d8 	.word	0x200002d8
 8001f9c:	42960000 	.word	0x42960000
 8001fa0:	40010c00 	.word	0x40010c00

08001fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b094      	sub	sp, #80	; 0x50
 8001fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001faa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fae:	2228      	movs	r2, #40	; 0x28
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f004 fa4a 	bl	800644c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fc8:	1d3b      	adds	r3, r7, #4
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ff0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ff6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f001 ff2c 	bl	8003e58 <HAL_RCC_OscConfig>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002006:	f000 fb17 	bl	8002638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800200a:	230f      	movs	r3, #15
 800200c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800200e:	2302      	movs	r3, #2
 8002010:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800201a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800201c:	2300      	movs	r3, #0
 800201e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	2102      	movs	r1, #2
 8002026:	4618      	mov	r0, r3
 8002028:	f002 f998 	bl	800435c <HAL_RCC_ClockConfig>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002032:	f000 fb01 	bl	8002638 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002036:	2302      	movs	r3, #2
 8002038:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800203a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800203e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	4618      	mov	r0, r3
 8002044:	f002 fb18 	bl	8004678 <HAL_RCCEx_PeriphCLKConfig>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800204e:	f000 faf3 	bl	8002638 <Error_Handler>
  }
}
 8002052:	bf00      	nop
 8002054:	3750      	adds	r7, #80	; 0x50
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800205c:	b5b0      	push	{r4, r5, r7, lr}
 800205e:	b090      	sub	sp, #64	; 0x40
 8002060:	af04      	add	r7, sp, #16
 8002062:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4aab      	ldr	r2, [pc, #684]	; (8002318 <HAL_UART_RxCpltCallback+0x2bc>)
 800206a:	4293      	cmp	r3, r2
 800206c:	f040 82a7 	bne.w	80025be <HAL_UART_RxCpltCallback+0x562>
	{
		if(RxData[0] == 78) // Ascii value of 'N' is 78 (N for NO)              START I STOP
 8002070:	4baa      	ldr	r3, [pc, #680]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b4e      	cmp	r3, #78	; 0x4e
 8002076:	d115      	bne.n	80020a4 <HAL_UART_RxCpltCallback+0x48>
		{
			/*Stop GRUZIK2.0 and turn off the LED*/
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002078:	2200      	movs	r2, #0
 800207a:	2140      	movs	r1, #64	; 0x40
 800207c:	48a8      	ldr	r0, [pc, #672]	; (8002320 <HAL_UART_RxCpltCallback+0x2c4>)
 800207e:	f001 fed2 	bl	8003e26 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002082:	2200      	movs	r2, #0
 8002084:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002088:	48a6      	ldr	r0, [pc, #664]	; (8002324 <HAL_UART_RxCpltCallback+0x2c8>)
 800208a:	f001 fecc 	bl	8003e26 <HAL_GPIO_WritePin>
			/*Send battery percentage*/
			SN_UART_Send(&huart1, "%.1f" ,battery_procentage_raw);
 800208e:	4ba6      	ldr	r3, [pc, #664]	; (8002328 <HAL_UART_RxCpltCallback+0x2cc>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe f9c8 	bl	8000428 <__aeabi_f2d>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	49a3      	ldr	r1, [pc, #652]	; (800232c <HAL_UART_RxCpltCallback+0x2d0>)
 800209e:	48a4      	ldr	r0, [pc, #656]	; (8002330 <HAL_UART_RxCpltCallback+0x2d4>)
 80020a0:	f7ff f894 	bl	80011cc <SN_UART_Send>
		}
		if (RxData[0] == 89) // Ascii value of 'Y' is 89 (Y for YES)
 80020a4:	4b9d      	ldr	r3, [pc, #628]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b59      	cmp	r3, #89	; 0x59
 80020aa:	d10c      	bne.n	80020c6 <HAL_UART_RxCpltCallback+0x6a>
		{
			/*Do Battery measurement before start*/
			Battery_ADC_measurement();
 80020ac:	f7ff fa7c 	bl	80015a8 <Battery_ADC_measurement>
			/*Start GRUZIK2.0 and turn on the LED*/
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80020b0:	2201      	movs	r2, #1
 80020b2:	2140      	movs	r1, #64	; 0x40
 80020b4:	489a      	ldr	r0, [pc, #616]	; (8002320 <HAL_UART_RxCpltCallback+0x2c4>)
 80020b6:	f001 feb6 	bl	8003e26 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80020ba:	2201      	movs	r2, #1
 80020bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020c0:	4898      	ldr	r0, [pc, #608]	; (8002324 <HAL_UART_RxCpltCallback+0x2c8>)
 80020c2:	f001 feb0 	bl	8003e26 <HAL_GPIO_WritePin>
		}
		/*Terminal communication*/
		if(RxData[0] == 'T')
 80020c6:	4b95      	ldr	r3, [pc, #596]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b54      	cmp	r3, #84	; 0x54
 80020cc:	d143      	bne.n	8002156 <HAL_UART_RxCpltCallback+0xfa>
		{
			char char_value[10];
			if(RxData[2] == 'p')
 80020ce:	4b93      	ldr	r3, [pc, #588]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80020d0:	789b      	ldrb	r3, [r3, #2]
 80020d2:	2b70      	cmp	r3, #112	; 0x70
 80020d4:	d11d      	bne.n	8002112 <HAL_UART_RxCpltCallback+0xb6>
			{
				SN_Value_In_Message(RxData, SN_Find_first(RxData, "p:"), SN_Find_first(RxData, "end") , char_value);
 80020d6:	4997      	ldr	r1, [pc, #604]	; (8002334 <HAL_UART_RxCpltCallback+0x2d8>)
 80020d8:	4890      	ldr	r0, [pc, #576]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80020da:	f7ff f8c9 	bl	8001270 <SN_Find_first>
 80020de:	4604      	mov	r4, r0
 80020e0:	4995      	ldr	r1, [pc, #596]	; (8002338 <HAL_UART_RxCpltCallback+0x2dc>)
 80020e2:	488e      	ldr	r0, [pc, #568]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80020e4:	f7ff f8c4 	bl	8001270 <SN_Find_first>
 80020e8:	4602      	mov	r2, r0
 80020ea:	f107 0314 	add.w	r3, r7, #20
 80020ee:	4621      	mov	r1, r4
 80020f0:	488a      	ldr	r0, [pc, #552]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80020f2:	f7ff f928 	bl	8001346 <SN_Value_In_Message>
				Kp = atof(char_value);
 80020f6:	f107 0314 	add.w	r3, r7, #20
 80020fa:	4618      	mov	r0, r3
 80020fc:	f004 f974 	bl	80063e8 <atof>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4610      	mov	r0, r2
 8002106:	4619      	mov	r1, r3
 8002108:	f7fe fcde 	bl	8000ac8 <__aeabi_d2f>
 800210c:	4603      	mov	r3, r0
 800210e:	4a8b      	ldr	r2, [pc, #556]	; (800233c <HAL_UART_RxCpltCallback+0x2e0>)
 8002110:	6013      	str	r3, [r2, #0]
			}
			if(RxData[2] == 'p')
 8002112:	4b82      	ldr	r3, [pc, #520]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 8002114:	789b      	ldrb	r3, [r3, #2]
 8002116:	2b70      	cmp	r3, #112	; 0x70
 8002118:	d11d      	bne.n	8002156 <HAL_UART_RxCpltCallback+0xfa>
			{
				SN_Value_In_Message(RxData, SN_Find_first(RxData, "d:"), SN_Find_first(RxData, "end") , char_value);
 800211a:	4989      	ldr	r1, [pc, #548]	; (8002340 <HAL_UART_RxCpltCallback+0x2e4>)
 800211c:	487f      	ldr	r0, [pc, #508]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 800211e:	f7ff f8a7 	bl	8001270 <SN_Find_first>
 8002122:	4604      	mov	r4, r0
 8002124:	4984      	ldr	r1, [pc, #528]	; (8002338 <HAL_UART_RxCpltCallback+0x2dc>)
 8002126:	487d      	ldr	r0, [pc, #500]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 8002128:	f7ff f8a2 	bl	8001270 <SN_Find_first>
 800212c:	4602      	mov	r2, r0
 800212e:	f107 0314 	add.w	r3, r7, #20
 8002132:	4621      	mov	r1, r4
 8002134:	4879      	ldr	r0, [pc, #484]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 8002136:	f7ff f906 	bl	8001346 <SN_Value_In_Message>
				Kd= atof(char_value);
 800213a:	f107 0314 	add.w	r3, r7, #20
 800213e:	4618      	mov	r0, r3
 8002140:	f004 f952 	bl	80063e8 <atof>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4610      	mov	r0, r2
 800214a:	4619      	mov	r1, r3
 800214c:	f7fe fcbc 	bl	8000ac8 <__aeabi_d2f>
 8002150:	4603      	mov	r3, r0
 8002152:	4a7c      	ldr	r2, [pc, #496]	; (8002344 <HAL_UART_RxCpltCallback+0x2e8>)
 8002154:	6013      	str	r3, [r2, #0]
			}
		}
		/*Time mode*/
		if(RxData[0] == 'g')
 8002156:	4b71      	ldr	r3, [pc, #452]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b67      	cmp	r3, #103	; 0x67
 800215c:	d165      	bne.n	800222a <HAL_UART_RxCpltCallback+0x1ce>
		{
			char char_value[10];
			/*RxData = "m1: ? m2: ? st: ? ct: ?*/
			int m1, m2, st, ct;
			/*mode 1*/
			SN_Value_In_Message(RxData, SN_Find_first(RxData, "m1:") + 3, SN_Find_first(RxData, "m2:") , char_value);
 800215e:	497a      	ldr	r1, [pc, #488]	; (8002348 <HAL_UART_RxCpltCallback+0x2ec>)
 8002160:	486e      	ldr	r0, [pc, #440]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 8002162:	f7ff f885 	bl	8001270 <SN_Find_first>
 8002166:	4603      	mov	r3, r0
 8002168:	1cdc      	adds	r4, r3, #3
 800216a:	4978      	ldr	r1, [pc, #480]	; (800234c <HAL_UART_RxCpltCallback+0x2f0>)
 800216c:	486b      	ldr	r0, [pc, #428]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 800216e:	f7ff f87f 	bl	8001270 <SN_Find_first>
 8002172:	4602      	mov	r2, r0
 8002174:	f107 0308 	add.w	r3, r7, #8
 8002178:	4621      	mov	r1, r4
 800217a:	4868      	ldr	r0, [pc, #416]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 800217c:	f7ff f8e3 	bl	8001346 <SN_Value_In_Message>
			m1 = atoi(char_value);
 8002180:	f107 0308 	add.w	r3, r7, #8
 8002184:	4618      	mov	r0, r3
 8002186:	f004 f932 	bl	80063ee <atoi>
 800218a:	62f8      	str	r0, [r7, #44]	; 0x2c
			/*mode 2*/
			SN_Value_In_Message(RxData, SN_Find_first(RxData, "m2:") + 3, SN_Find_first(RxData, "st:") , char_value);
 800218c:	496f      	ldr	r1, [pc, #444]	; (800234c <HAL_UART_RxCpltCallback+0x2f0>)
 800218e:	4863      	ldr	r0, [pc, #396]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 8002190:	f7ff f86e 	bl	8001270 <SN_Find_first>
 8002194:	4603      	mov	r3, r0
 8002196:	1cdc      	adds	r4, r3, #3
 8002198:	496d      	ldr	r1, [pc, #436]	; (8002350 <HAL_UART_RxCpltCallback+0x2f4>)
 800219a:	4860      	ldr	r0, [pc, #384]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 800219c:	f7ff f868 	bl	8001270 <SN_Find_first>
 80021a0:	4602      	mov	r2, r0
 80021a2:	f107 0308 	add.w	r3, r7, #8
 80021a6:	4621      	mov	r1, r4
 80021a8:	485c      	ldr	r0, [pc, #368]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80021aa:	f7ff f8cc 	bl	8001346 <SN_Value_In_Message>
			m2 = atoi(char_value);
 80021ae:	f107 0308 	add.w	r3, r7, #8
 80021b2:	4618      	mov	r0, r3
 80021b4:	f004 f91b 	bl	80063ee <atoi>
 80021b8:	62b8      	str	r0, [r7, #40]	; 0x28
			/*Start time*/
			SN_Value_In_Message(RxData, SN_Find_first(RxData, "st:") + 3, SN_Find_first(RxData, "ct:") , char_value);
 80021ba:	4965      	ldr	r1, [pc, #404]	; (8002350 <HAL_UART_RxCpltCallback+0x2f4>)
 80021bc:	4857      	ldr	r0, [pc, #348]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80021be:	f7ff f857 	bl	8001270 <SN_Find_first>
 80021c2:	4603      	mov	r3, r0
 80021c4:	1cdc      	adds	r4, r3, #3
 80021c6:	4963      	ldr	r1, [pc, #396]	; (8002354 <HAL_UART_RxCpltCallback+0x2f8>)
 80021c8:	4854      	ldr	r0, [pc, #336]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80021ca:	f7ff f851 	bl	8001270 <SN_Find_first>
 80021ce:	4602      	mov	r2, r0
 80021d0:	f107 0308 	add.w	r3, r7, #8
 80021d4:	4621      	mov	r1, r4
 80021d6:	4851      	ldr	r0, [pc, #324]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80021d8:	f7ff f8b5 	bl	8001346 <SN_Value_In_Message>
			st = atoi(char_value);
 80021dc:	f107 0308 	add.w	r3, r7, #8
 80021e0:	4618      	mov	r0, r3
 80021e2:	f004 f904 	bl	80063ee <atoi>
 80021e6:	6278      	str	r0, [r7, #36]	; 0x24
			/*mode 1*/
			SN_Value_In_Message(RxData, SN_Find_first(RxData, "ct:") + 3, SN_Find_first(RxData, "end") , char_value);
 80021e8:	495a      	ldr	r1, [pc, #360]	; (8002354 <HAL_UART_RxCpltCallback+0x2f8>)
 80021ea:	484c      	ldr	r0, [pc, #304]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80021ec:	f7ff f840 	bl	8001270 <SN_Find_first>
 80021f0:	4603      	mov	r3, r0
 80021f2:	1cdc      	adds	r4, r3, #3
 80021f4:	4950      	ldr	r1, [pc, #320]	; (8002338 <HAL_UART_RxCpltCallback+0x2dc>)
 80021f6:	4849      	ldr	r0, [pc, #292]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80021f8:	f7ff f83a 	bl	8001270 <SN_Find_first>
 80021fc:	4602      	mov	r2, r0
 80021fe:	f107 0308 	add.w	r3, r7, #8
 8002202:	4621      	mov	r1, r4
 8002204:	4845      	ldr	r0, [pc, #276]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 8002206:	f7ff f89e 	bl	8001346 <SN_Value_In_Message>
			ct = atoi(char_value);
 800220a:	f107 0308 	add.w	r3, r7, #8
 800220e:	4618      	mov	r0, r3
 8002210:	f004 f8ed 	bl	80063ee <atoi>
 8002214:	6238      	str	r0, [r7, #32]
			/*rest in future*/
			ct = (m1 * m2 * st) + ct; //<-- to don't get any warning
 8002216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002218:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800221a:	fb02 f303 	mul.w	r3, r2, r3
 800221e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002220:	fb02 f303 	mul.w	r3, r2, r3
 8002224:	6a3a      	ldr	r2, [r7, #32]
 8002226:	4413      	add	r3, r2
 8002228:	623b      	str	r3, [r7, #32]
		}
     	/*LOW mode*/
     	if(RxData[0] == 'a')
 800222a:	4b3c      	ldr	r3, [pc, #240]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b61      	cmp	r3, #97	; 0x61
 8002230:	d122      	bne.n	8002278 <HAL_UART_RxCpltCallback+0x21c>
     	{
    	 	 ARR=3;
 8002232:	4b49      	ldr	r3, [pc, #292]	; (8002358 <HAL_UART_RxCpltCallback+0x2fc>)
 8002234:	2203      	movs	r2, #3
 8002236:	601a      	str	r2, [r3, #0]
     	 	 basespeedr = 150;
 8002238:	4b48      	ldr	r3, [pc, #288]	; (800235c <HAL_UART_RxCpltCallback+0x300>)
 800223a:	2296      	movs	r2, #150	; 0x96
 800223c:	601a      	str	r2, [r3, #0]
     	 	 basespeedl = 150;
 800223e:	4b48      	ldr	r3, [pc, #288]	; (8002360 <HAL_UART_RxCpltCallback+0x304>)
 8002240:	2296      	movs	r2, #150	; 0x96
 8002242:	601a      	str	r2, [r3, #0]
     	 	 maxspeedl=130;
 8002244:	4b47      	ldr	r3, [pc, #284]	; (8002364 <HAL_UART_RxCpltCallback+0x308>)
 8002246:	2282      	movs	r2, #130	; 0x82
 8002248:	601a      	str	r2, [r3, #0]
     	 	 maxspeedr=130;
 800224a:	4b47      	ldr	r3, [pc, #284]	; (8002368 <HAL_UART_RxCpltCallback+0x30c>)
 800224c:	2282      	movs	r2, #130	; 0x82
 800224e:	601a      	str	r2, [r3, #0]
     	 	 Sharp_bend_speed_right=-115;
 8002250:	4b46      	ldr	r3, [pc, #280]	; (800236c <HAL_UART_RxCpltCallback+0x310>)
 8002252:	f06f 0272 	mvn.w	r2, #114	; 0x72
 8002256:	601a      	str	r2, [r3, #0]
     	 	 Sharp_bend_speed_left=120;
 8002258:	4b45      	ldr	r3, [pc, #276]	; (8002370 <HAL_UART_RxCpltCallback+0x314>)
 800225a:	2278      	movs	r2, #120	; 0x78
 800225c:	601a      	str	r2, [r3, #0]
     	 	 Bend_speed_right=-76;
 800225e:	4b45      	ldr	r3, [pc, #276]	; (8002374 <HAL_UART_RxCpltCallback+0x318>)
 8002260:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8002264:	601a      	str	r2, [r3, #0]
     	 	 Bend_speed_left=125;
 8002266:	4b44      	ldr	r3, [pc, #272]	; (8002378 <HAL_UART_RxCpltCallback+0x31c>)
 8002268:	227d      	movs	r2, #125	; 0x7d
 800226a:	601a      	str	r2, [r3, #0]
     	 	 Kp = 0.02;
 800226c:	4b33      	ldr	r3, [pc, #204]	; (800233c <HAL_UART_RxCpltCallback+0x2e0>)
 800226e:	4a43      	ldr	r2, [pc, #268]	; (800237c <HAL_UART_RxCpltCallback+0x320>)
 8002270:	601a      	str	r2, [r3, #0]
     	 	 Kd = 65;
 8002272:	4b34      	ldr	r3, [pc, #208]	; (8002344 <HAL_UART_RxCpltCallback+0x2e8>)
 8002274:	4a42      	ldr	r2, [pc, #264]	; (8002380 <HAL_UART_RxCpltCallback+0x324>)
 8002276:	601a      	str	r2, [r3, #0]
     	}
     	/*LOW+ mode*/
     	if(RxData[0] == 'd')
 8002278:	4b28      	ldr	r3, [pc, #160]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b64      	cmp	r3, #100	; 0x64
 800227e:	d122      	bne.n	80022c6 <HAL_UART_RxCpltCallback+0x26a>
     	{
    	 	 ARR=3;
 8002280:	4b35      	ldr	r3, [pc, #212]	; (8002358 <HAL_UART_RxCpltCallback+0x2fc>)
 8002282:	2203      	movs	r2, #3
 8002284:	601a      	str	r2, [r3, #0]
     	 	 basespeedr = 165;
 8002286:	4b35      	ldr	r3, [pc, #212]	; (800235c <HAL_UART_RxCpltCallback+0x300>)
 8002288:	22a5      	movs	r2, #165	; 0xa5
 800228a:	601a      	str	r2, [r3, #0]
     	 	 basespeedl = 165;
 800228c:	4b34      	ldr	r3, [pc, #208]	; (8002360 <HAL_UART_RxCpltCallback+0x304>)
 800228e:	22a5      	movs	r2, #165	; 0xa5
 8002290:	601a      	str	r2, [r3, #0]
     	 	 maxspeedl=130;
 8002292:	4b34      	ldr	r3, [pc, #208]	; (8002364 <HAL_UART_RxCpltCallback+0x308>)
 8002294:	2282      	movs	r2, #130	; 0x82
 8002296:	601a      	str	r2, [r3, #0]
     	 	 maxspeedr=130;
 8002298:	4b33      	ldr	r3, [pc, #204]	; (8002368 <HAL_UART_RxCpltCallback+0x30c>)
 800229a:	2282      	movs	r2, #130	; 0x82
 800229c:	601a      	str	r2, [r3, #0]
     	 	 Sharp_bend_speed_right=-120;
 800229e:	4b33      	ldr	r3, [pc, #204]	; (800236c <HAL_UART_RxCpltCallback+0x310>)
 80022a0:	f06f 0277 	mvn.w	r2, #119	; 0x77
 80022a4:	601a      	str	r2, [r3, #0]
     	 	 Sharp_bend_speed_left=125;
 80022a6:	4b32      	ldr	r3, [pc, #200]	; (8002370 <HAL_UART_RxCpltCallback+0x314>)
 80022a8:	227d      	movs	r2, #125	; 0x7d
 80022aa:	601a      	str	r2, [r3, #0]
     	 	 Bend_speed_right=-76;
 80022ac:	4b31      	ldr	r3, [pc, #196]	; (8002374 <HAL_UART_RxCpltCallback+0x318>)
 80022ae:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 80022b2:	601a      	str	r2, [r3, #0]
     	 	 Bend_speed_left=125;
 80022b4:	4b30      	ldr	r3, [pc, #192]	; (8002378 <HAL_UART_RxCpltCallback+0x31c>)
 80022b6:	227d      	movs	r2, #125	; 0x7d
 80022b8:	601a      	str	r2, [r3, #0]
     	 	 Kp = 0.04;
 80022ba:	4b20      	ldr	r3, [pc, #128]	; (800233c <HAL_UART_RxCpltCallback+0x2e0>)
 80022bc:	4a31      	ldr	r2, [pc, #196]	; (8002384 <HAL_UART_RxCpltCallback+0x328>)
 80022be:	601a      	str	r2, [r3, #0]
     	 	 Kd = 75;
 80022c0:	4b20      	ldr	r3, [pc, #128]	; (8002344 <HAL_UART_RxCpltCallback+0x2e8>)
 80022c2:	4a31      	ldr	r2, [pc, #196]	; (8002388 <HAL_UART_RxCpltCallback+0x32c>)
 80022c4:	601a      	str	r2, [r3, #0]
     	}
     	/*Medium mode*/
     	if(RxData[0] == 'b')
 80022c6:	4b15      	ldr	r3, [pc, #84]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b62      	cmp	r3, #98	; 0x62
 80022cc:	d162      	bne.n	8002394 <HAL_UART_RxCpltCallback+0x338>
     	{
    	 	 ARR=3;
 80022ce:	4b22      	ldr	r3, [pc, #136]	; (8002358 <HAL_UART_RxCpltCallback+0x2fc>)
 80022d0:	2203      	movs	r2, #3
 80022d2:	601a      	str	r2, [r3, #0]
     	 	 basespeedr = 175;
 80022d4:	4b21      	ldr	r3, [pc, #132]	; (800235c <HAL_UART_RxCpltCallback+0x300>)
 80022d6:	22af      	movs	r2, #175	; 0xaf
 80022d8:	601a      	str	r2, [r3, #0]
     	 	 basespeedl = 175;
 80022da:	4b21      	ldr	r3, [pc, #132]	; (8002360 <HAL_UART_RxCpltCallback+0x304>)
 80022dc:	22af      	movs	r2, #175	; 0xaf
 80022de:	601a      	str	r2, [r3, #0]
     	 	 maxspeedl = 135;
 80022e0:	4b20      	ldr	r3, [pc, #128]	; (8002364 <HAL_UART_RxCpltCallback+0x308>)
 80022e2:	2287      	movs	r2, #135	; 0x87
 80022e4:	601a      	str	r2, [r3, #0]
     	 	 maxspeedr = 135;
 80022e6:	4b20      	ldr	r3, [pc, #128]	; (8002368 <HAL_UART_RxCpltCallback+0x30c>)
 80022e8:	2287      	movs	r2, #135	; 0x87
 80022ea:	601a      	str	r2, [r3, #0]
     	 	 Sharp_bend_speed_right = -120;
 80022ec:	4b1f      	ldr	r3, [pc, #124]	; (800236c <HAL_UART_RxCpltCallback+0x310>)
 80022ee:	f06f 0277 	mvn.w	r2, #119	; 0x77
 80022f2:	601a      	str	r2, [r3, #0]
     	 	 Sharp_bend_speed_left = 125;
 80022f4:	4b1e      	ldr	r3, [pc, #120]	; (8002370 <HAL_UART_RxCpltCallback+0x314>)
 80022f6:	227d      	movs	r2, #125	; 0x7d
 80022f8:	601a      	str	r2, [r3, #0]
     	 	 Bend_speed_right = -76;
 80022fa:	4b1e      	ldr	r3, [pc, #120]	; (8002374 <HAL_UART_RxCpltCallback+0x318>)
 80022fc:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8002300:	601a      	str	r2, [r3, #0]
     	 	 Bend_speed_left = 125;
 8002302:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <HAL_UART_RxCpltCallback+0x31c>)
 8002304:	227d      	movs	r2, #125	; 0x7d
 8002306:	601a      	str	r2, [r3, #0]
     	 	 Kp = 0.03;
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <HAL_UART_RxCpltCallback+0x2e0>)
 800230a:	4a20      	ldr	r2, [pc, #128]	; (800238c <HAL_UART_RxCpltCallback+0x330>)
 800230c:	601a      	str	r2, [r3, #0]
     	 	 Kd = 70;
 800230e:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <HAL_UART_RxCpltCallback+0x2e8>)
 8002310:	4a1f      	ldr	r2, [pc, #124]	; (8002390 <HAL_UART_RxCpltCallback+0x334>)
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	e03e      	b.n	8002394 <HAL_UART_RxCpltCallback+0x338>
 8002316:	bf00      	nop
 8002318:	40013800 	.word	0x40013800
 800231c:	200002b8 	.word	0x200002b8
 8002320:	40010c00 	.word	0x40010c00
 8002324:	40011000 	.word	0x40011000
 8002328:	200002d8 	.word	0x200002d8
 800232c:	0800a940 	.word	0x0800a940
 8002330:	200003b8 	.word	0x200003b8
 8002334:	0800a948 	.word	0x0800a948
 8002338:	0800a94c 	.word	0x0800a94c
 800233c:	20000000 	.word	0x20000000
 8002340:	0800a950 	.word	0x0800a950
 8002344:	20000004 	.word	0x20000004
 8002348:	0800a954 	.word	0x0800a954
 800234c:	0800a958 	.word	0x0800a958
 8002350:	0800a95c 	.word	0x0800a95c
 8002354:	0800a960 	.word	0x0800a960
 8002358:	2000001c 	.word	0x2000001c
 800235c:	20000014 	.word	0x20000014
 8002360:	20000018 	.word	0x20000018
 8002364:	20000010 	.word	0x20000010
 8002368:	2000000c 	.word	0x2000000c
 800236c:	20000020 	.word	0x20000020
 8002370:	20000024 	.word	0x20000024
 8002374:	20000028 	.word	0x20000028
 8002378:	2000002c 	.word	0x2000002c
 800237c:	3ca3d70a 	.word	0x3ca3d70a
 8002380:	42820000 	.word	0x42820000
 8002384:	3d23d70a 	.word	0x3d23d70a
 8002388:	42960000 	.word	0x42960000
 800238c:	3cf5c28f 	.word	0x3cf5c28f
 8002390:	428c0000 	.word	0x428c0000
     	}
     	/*Medium+ mode*/
     	if(RxData[0] == 'e')
 8002394:	4b8c      	ldr	r3, [pc, #560]	; (80025c8 <HAL_UART_RxCpltCallback+0x56c>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b65      	cmp	r3, #101	; 0x65
 800239a:	d122      	bne.n	80023e2 <HAL_UART_RxCpltCallback+0x386>
     	{
    	 	 ARR=3;
 800239c:	4b8b      	ldr	r3, [pc, #556]	; (80025cc <HAL_UART_RxCpltCallback+0x570>)
 800239e:	2203      	movs	r2, #3
 80023a0:	601a      	str	r2, [r3, #0]
     	 	 basespeedr = 190;
 80023a2:	4b8b      	ldr	r3, [pc, #556]	; (80025d0 <HAL_UART_RxCpltCallback+0x574>)
 80023a4:	22be      	movs	r2, #190	; 0xbe
 80023a6:	601a      	str	r2, [r3, #0]
     	 	 basespeedl = 190;
 80023a8:	4b8a      	ldr	r3, [pc, #552]	; (80025d4 <HAL_UART_RxCpltCallback+0x578>)
 80023aa:	22be      	movs	r2, #190	; 0xbe
 80023ac:	601a      	str	r2, [r3, #0]
     	 	 maxspeedl = 145;
 80023ae:	4b8a      	ldr	r3, [pc, #552]	; (80025d8 <HAL_UART_RxCpltCallback+0x57c>)
 80023b0:	2291      	movs	r2, #145	; 0x91
 80023b2:	601a      	str	r2, [r3, #0]
     	 	 maxspeedr = 145;
 80023b4:	4b89      	ldr	r3, [pc, #548]	; (80025dc <HAL_UART_RxCpltCallback+0x580>)
 80023b6:	2291      	movs	r2, #145	; 0x91
 80023b8:	601a      	str	r2, [r3, #0]
     	 	 Sharp_bend_speed_right = -100;
 80023ba:	4b89      	ldr	r3, [pc, #548]	; (80025e0 <HAL_UART_RxCpltCallback+0x584>)
 80023bc:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80023c0:	601a      	str	r2, [r3, #0]
     	 	 Sharp_bend_speed_left = 100;
 80023c2:	4b88      	ldr	r3, [pc, #544]	; (80025e4 <HAL_UART_RxCpltCallback+0x588>)
 80023c4:	2264      	movs	r2, #100	; 0x64
 80023c6:	601a      	str	r2, [r3, #0]
     	 	 Bend_speed_right = -76;
 80023c8:	4b87      	ldr	r3, [pc, #540]	; (80025e8 <HAL_UART_RxCpltCallback+0x58c>)
 80023ca:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 80023ce:	601a      	str	r2, [r3, #0]
     	 	 Bend_speed_left = 125;
 80023d0:	4b86      	ldr	r3, [pc, #536]	; (80025ec <HAL_UART_RxCpltCallback+0x590>)
 80023d2:	227d      	movs	r2, #125	; 0x7d
 80023d4:	601a      	str	r2, [r3, #0]
     	 	 Kp = 0.03;
 80023d6:	4b86      	ldr	r3, [pc, #536]	; (80025f0 <HAL_UART_RxCpltCallback+0x594>)
 80023d8:	4a86      	ldr	r2, [pc, #536]	; (80025f4 <HAL_UART_RxCpltCallback+0x598>)
 80023da:	601a      	str	r2, [r3, #0]
     	 	 Kd = 70;
 80023dc:	4b86      	ldr	r3, [pc, #536]	; (80025f8 <HAL_UART_RxCpltCallback+0x59c>)
 80023de:	4a87      	ldr	r2, [pc, #540]	; (80025fc <HAL_UART_RxCpltCallback+0x5a0>)
 80023e0:	601a      	str	r2, [r3, #0]
     	}
     	/*HIGH mode*/
     	if(RxData[0] == 'c')
 80023e2:	4b79      	ldr	r3, [pc, #484]	; (80025c8 <HAL_UART_RxCpltCallback+0x56c>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b63      	cmp	r3, #99	; 0x63
 80023e8:	d122      	bne.n	8002430 <HAL_UART_RxCpltCallback+0x3d4>
     	{
    	 	ARR=3;
 80023ea:	4b78      	ldr	r3, [pc, #480]	; (80025cc <HAL_UART_RxCpltCallback+0x570>)
 80023ec:	2203      	movs	r2, #3
 80023ee:	601a      	str	r2, [r3, #0]
     	 	basespeedr = 225;
 80023f0:	4b77      	ldr	r3, [pc, #476]	; (80025d0 <HAL_UART_RxCpltCallback+0x574>)
 80023f2:	22e1      	movs	r2, #225	; 0xe1
 80023f4:	601a      	str	r2, [r3, #0]
     	 	basespeedl = 225;
 80023f6:	4b77      	ldr	r3, [pc, #476]	; (80025d4 <HAL_UART_RxCpltCallback+0x578>)
 80023f8:	22e1      	movs	r2, #225	; 0xe1
 80023fa:	601a      	str	r2, [r3, #0]
     	 	maxspeedl = 150;
 80023fc:	4b76      	ldr	r3, [pc, #472]	; (80025d8 <HAL_UART_RxCpltCallback+0x57c>)
 80023fe:	2296      	movs	r2, #150	; 0x96
 8002400:	601a      	str	r2, [r3, #0]
     	 	maxspeedr = 150;
 8002402:	4b76      	ldr	r3, [pc, #472]	; (80025dc <HAL_UART_RxCpltCallback+0x580>)
 8002404:	2296      	movs	r2, #150	; 0x96
 8002406:	601a      	str	r2, [r3, #0]
     	 	Sharp_bend_speed_right = -73;
 8002408:	4b75      	ldr	r3, [pc, #468]	; (80025e0 <HAL_UART_RxCpltCallback+0x584>)
 800240a:	f06f 0248 	mvn.w	r2, #72	; 0x48
 800240e:	601a      	str	r2, [r3, #0]
     	 	Sharp_bend_speed_left = 78;
 8002410:	4b74      	ldr	r3, [pc, #464]	; (80025e4 <HAL_UART_RxCpltCallback+0x588>)
 8002412:	224e      	movs	r2, #78	; 0x4e
 8002414:	601a      	str	r2, [r3, #0]
     	 	Bend_speed_right = -76;
 8002416:	4b74      	ldr	r3, [pc, #464]	; (80025e8 <HAL_UART_RxCpltCallback+0x58c>)
 8002418:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 800241c:	601a      	str	r2, [r3, #0]
     	 	Bend_speed_left = 125;
 800241e:	4b73      	ldr	r3, [pc, #460]	; (80025ec <HAL_UART_RxCpltCallback+0x590>)
 8002420:	227d      	movs	r2, #125	; 0x7d
 8002422:	601a      	str	r2, [r3, #0]
     	 	Kp = 0.04;
 8002424:	4b72      	ldr	r3, [pc, #456]	; (80025f0 <HAL_UART_RxCpltCallback+0x594>)
 8002426:	4a76      	ldr	r2, [pc, #472]	; (8002600 <HAL_UART_RxCpltCallback+0x5a4>)
 8002428:	601a      	str	r2, [r3, #0]
     	 	Kd = 75;
 800242a:	4b73      	ldr	r3, [pc, #460]	; (80025f8 <HAL_UART_RxCpltCallback+0x59c>)
 800242c:	4a75      	ldr	r2, [pc, #468]	; (8002604 <HAL_UART_RxCpltCallback+0x5a8>)
 800242e:	601a      	str	r2, [r3, #0]
     	}
     	/*HIGH+ mode*/
     	if(RxData[0] == 'f')
 8002430:	4b65      	ldr	r3, [pc, #404]	; (80025c8 <HAL_UART_RxCpltCallback+0x56c>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b66      	cmp	r3, #102	; 0x66
 8002436:	d122      	bne.n	800247e <HAL_UART_RxCpltCallback+0x422>
     	{
    	 	ARR=3;
 8002438:	4b64      	ldr	r3, [pc, #400]	; (80025cc <HAL_UART_RxCpltCallback+0x570>)
 800243a:	2203      	movs	r2, #3
 800243c:	601a      	str	r2, [r3, #0]
    	 	basespeedr = 250;
 800243e:	4b64      	ldr	r3, [pc, #400]	; (80025d0 <HAL_UART_RxCpltCallback+0x574>)
 8002440:	22fa      	movs	r2, #250	; 0xfa
 8002442:	601a      	str	r2, [r3, #0]
    	 	basespeedl = 250;
 8002444:	4b63      	ldr	r3, [pc, #396]	; (80025d4 <HAL_UART_RxCpltCallback+0x578>)
 8002446:	22fa      	movs	r2, #250	; 0xfa
 8002448:	601a      	str	r2, [r3, #0]
    	 	maxspeedl=160;
 800244a:	4b63      	ldr	r3, [pc, #396]	; (80025d8 <HAL_UART_RxCpltCallback+0x57c>)
 800244c:	22a0      	movs	r2, #160	; 0xa0
 800244e:	601a      	str	r2, [r3, #0]
    	 	maxspeedr=160;
 8002450:	4b62      	ldr	r3, [pc, #392]	; (80025dc <HAL_UART_RxCpltCallback+0x580>)
 8002452:	22a0      	movs	r2, #160	; 0xa0
 8002454:	601a      	str	r2, [r3, #0]
    	 	Sharp_bend_speed_right = -65;
 8002456:	4b62      	ldr	r3, [pc, #392]	; (80025e0 <HAL_UART_RxCpltCallback+0x584>)
 8002458:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800245c:	601a      	str	r2, [r3, #0]
     		Sharp_bend_speed_left = 70;
 800245e:	4b61      	ldr	r3, [pc, #388]	; (80025e4 <HAL_UART_RxCpltCallback+0x588>)
 8002460:	2246      	movs	r2, #70	; 0x46
 8002462:	601a      	str	r2, [r3, #0]
     		Bend_speed_right=-76;
 8002464:	4b60      	ldr	r3, [pc, #384]	; (80025e8 <HAL_UART_RxCpltCallback+0x58c>)
 8002466:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 800246a:	601a      	str	r2, [r3, #0]
     		Bend_speed_left=125;
 800246c:	4b5f      	ldr	r3, [pc, #380]	; (80025ec <HAL_UART_RxCpltCallback+0x590>)
 800246e:	227d      	movs	r2, #125	; 0x7d
 8002470:	601a      	str	r2, [r3, #0]
     		Kp = 0.04;
 8002472:	4b5f      	ldr	r3, [pc, #380]	; (80025f0 <HAL_UART_RxCpltCallback+0x594>)
 8002474:	4a62      	ldr	r2, [pc, #392]	; (8002600 <HAL_UART_RxCpltCallback+0x5a4>)
 8002476:	601a      	str	r2, [r3, #0]
     	 	Kd=75;
 8002478:	4b5f      	ldr	r3, [pc, #380]	; (80025f8 <HAL_UART_RxCpltCallback+0x59c>)
 800247a:	4a62      	ldr	r2, [pc, #392]	; (8002604 <HAL_UART_RxCpltCallback+0x5a8>)
 800247c:	601a      	str	r2, [r3, #0]
     	}
     	/*TRUBO mode*/
     	if(RxData[0] == 'i')
 800247e:	4b52      	ldr	r3, [pc, #328]	; (80025c8 <HAL_UART_RxCpltCallback+0x56c>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b69      	cmp	r3, #105	; 0x69
 8002484:	d124      	bne.n	80024d0 <HAL_UART_RxCpltCallback+0x474>
     	{
    	 	ARR=3;
 8002486:	4b51      	ldr	r3, [pc, #324]	; (80025cc <HAL_UART_RxCpltCallback+0x570>)
 8002488:	2203      	movs	r2, #3
 800248a:	601a      	str	r2, [r3, #0]
    	 	basespeedr = 270;
 800248c:	4b50      	ldr	r3, [pc, #320]	; (80025d0 <HAL_UART_RxCpltCallback+0x574>)
 800248e:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8002492:	601a      	str	r2, [r3, #0]
    	 	basespeedl = 270;
 8002494:	4b4f      	ldr	r3, [pc, #316]	; (80025d4 <HAL_UART_RxCpltCallback+0x578>)
 8002496:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800249a:	601a      	str	r2, [r3, #0]
    	 	maxspeedl = 150;
 800249c:	4b4e      	ldr	r3, [pc, #312]	; (80025d8 <HAL_UART_RxCpltCallback+0x57c>)
 800249e:	2296      	movs	r2, #150	; 0x96
 80024a0:	601a      	str	r2, [r3, #0]
    	 	maxspeedr = 150;
 80024a2:	4b4e      	ldr	r3, [pc, #312]	; (80025dc <HAL_UART_RxCpltCallback+0x580>)
 80024a4:	2296      	movs	r2, #150	; 0x96
 80024a6:	601a      	str	r2, [r3, #0]
    	 	Sharp_bend_speed_right = -65;
 80024a8:	4b4d      	ldr	r3, [pc, #308]	; (80025e0 <HAL_UART_RxCpltCallback+0x584>)
 80024aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024ae:	601a      	str	r2, [r3, #0]
    	 	Sharp_bend_speed_left = 70;
 80024b0:	4b4c      	ldr	r3, [pc, #304]	; (80025e4 <HAL_UART_RxCpltCallback+0x588>)
 80024b2:	2246      	movs	r2, #70	; 0x46
 80024b4:	601a      	str	r2, [r3, #0]
    	 	Bend_speed_right = -76;
 80024b6:	4b4c      	ldr	r3, [pc, #304]	; (80025e8 <HAL_UART_RxCpltCallback+0x58c>)
 80024b8:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 80024bc:	601a      	str	r2, [r3, #0]
    	 	Bend_speed_left = 130;
 80024be:	4b4b      	ldr	r3, [pc, #300]	; (80025ec <HAL_UART_RxCpltCallback+0x590>)
 80024c0:	2282      	movs	r2, #130	; 0x82
 80024c2:	601a      	str	r2, [r3, #0]
    	 	Kp = 0.045;
 80024c4:	4b4a      	ldr	r3, [pc, #296]	; (80025f0 <HAL_UART_RxCpltCallback+0x594>)
 80024c6:	4a50      	ldr	r2, [pc, #320]	; (8002608 <HAL_UART_RxCpltCallback+0x5ac>)
 80024c8:	601a      	str	r2, [r3, #0]
    	 	Kd = 75;
 80024ca:	4b4b      	ldr	r3, [pc, #300]	; (80025f8 <HAL_UART_RxCpltCallback+0x59c>)
 80024cc:	4a4d      	ldr	r2, [pc, #308]	; (8002604 <HAL_UART_RxCpltCallback+0x5a8>)
 80024ce:	601a      	str	r2, [r3, #0]
     	}
     	/*TRUBO+ mode*/
     	if(RxData[0] == 'j')
 80024d0:	4b3d      	ldr	r3, [pc, #244]	; (80025c8 <HAL_UART_RxCpltCallback+0x56c>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b6a      	cmp	r3, #106	; 0x6a
 80024d6:	d124      	bne.n	8002522 <HAL_UART_RxCpltCallback+0x4c6>
     	{
     	    ARR=3;
 80024d8:	4b3c      	ldr	r3, [pc, #240]	; (80025cc <HAL_UART_RxCpltCallback+0x570>)
 80024da:	2203      	movs	r2, #3
 80024dc:	601a      	str	r2, [r3, #0]
     	    basespeedr = 295;
 80024de:	4b3c      	ldr	r3, [pc, #240]	; (80025d0 <HAL_UART_RxCpltCallback+0x574>)
 80024e0:	f240 1227 	movw	r2, #295	; 0x127
 80024e4:	601a      	str	r2, [r3, #0]
     	    basespeedl = 295;
 80024e6:	4b3b      	ldr	r3, [pc, #236]	; (80025d4 <HAL_UART_RxCpltCallback+0x578>)
 80024e8:	f240 1227 	movw	r2, #295	; 0x127
 80024ec:	601a      	str	r2, [r3, #0]
     	    maxspeedl = 165;
 80024ee:	4b3a      	ldr	r3, [pc, #232]	; (80025d8 <HAL_UART_RxCpltCallback+0x57c>)
 80024f0:	22a5      	movs	r2, #165	; 0xa5
 80024f2:	601a      	str	r2, [r3, #0]
     	    maxspeedr = 165;
 80024f4:	4b39      	ldr	r3, [pc, #228]	; (80025dc <HAL_UART_RxCpltCallback+0x580>)
 80024f6:	22a5      	movs	r2, #165	; 0xa5
 80024f8:	601a      	str	r2, [r3, #0]
     	    Sharp_bend_speed_right = -70;
 80024fa:	4b39      	ldr	r3, [pc, #228]	; (80025e0 <HAL_UART_RxCpltCallback+0x584>)
 80024fc:	f06f 0245 	mvn.w	r2, #69	; 0x45
 8002500:	601a      	str	r2, [r3, #0]
     	    Sharp_bend_speed_left = 73;
 8002502:	4b38      	ldr	r3, [pc, #224]	; (80025e4 <HAL_UART_RxCpltCallback+0x588>)
 8002504:	2249      	movs	r2, #73	; 0x49
 8002506:	601a      	str	r2, [r3, #0]
     	    Bend_speed_right = -76;
 8002508:	4b37      	ldr	r3, [pc, #220]	; (80025e8 <HAL_UART_RxCpltCallback+0x58c>)
 800250a:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 800250e:	601a      	str	r2, [r3, #0]
     	    Bend_speed_left = 130;
 8002510:	4b36      	ldr	r3, [pc, #216]	; (80025ec <HAL_UART_RxCpltCallback+0x590>)
 8002512:	2282      	movs	r2, #130	; 0x82
 8002514:	601a      	str	r2, [r3, #0]
     	    Kp = 0.05;
 8002516:	4b36      	ldr	r3, [pc, #216]	; (80025f0 <HAL_UART_RxCpltCallback+0x594>)
 8002518:	4a3c      	ldr	r2, [pc, #240]	; (800260c <HAL_UART_RxCpltCallback+0x5b0>)
 800251a:	601a      	str	r2, [r3, #0]
     	    Kd = 80;
 800251c:	4b36      	ldr	r3, [pc, #216]	; (80025f8 <HAL_UART_RxCpltCallback+0x59c>)
 800251e:	4a3c      	ldr	r2, [pc, #240]	; (8002610 <HAL_UART_RxCpltCallback+0x5b4>)
 8002520:	601a      	str	r2, [r3, #0]
     	  }
     	/*Special mode*/
     	if(RxData[0] == 'h')
 8002522:	4b29      	ldr	r3, [pc, #164]	; (80025c8 <HAL_UART_RxCpltCallback+0x56c>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b68      	cmp	r3, #104	; 0x68
 8002528:	d124      	bne.n	8002574 <HAL_UART_RxCpltCallback+0x518>
     	{
     	    ARR=3;
 800252a:	4b28      	ldr	r3, [pc, #160]	; (80025cc <HAL_UART_RxCpltCallback+0x570>)
 800252c:	2203      	movs	r2, #3
 800252e:	601a      	str	r2, [r3, #0]
     	    basespeedr = 315;
 8002530:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <HAL_UART_RxCpltCallback+0x574>)
 8002532:	f240 123b 	movw	r2, #315	; 0x13b
 8002536:	601a      	str	r2, [r3, #0]
     	    basespeedl = 315;
 8002538:	4b26      	ldr	r3, [pc, #152]	; (80025d4 <HAL_UART_RxCpltCallback+0x578>)
 800253a:	f240 123b 	movw	r2, #315	; 0x13b
 800253e:	601a      	str	r2, [r3, #0]
     	    maxspeedl = 168;//170
 8002540:	4b25      	ldr	r3, [pc, #148]	; (80025d8 <HAL_UART_RxCpltCallback+0x57c>)
 8002542:	22a8      	movs	r2, #168	; 0xa8
 8002544:	601a      	str	r2, [r3, #0]
     	    maxspeedr = 168;
 8002546:	4b25      	ldr	r3, [pc, #148]	; (80025dc <HAL_UART_RxCpltCallback+0x580>)
 8002548:	22a8      	movs	r2, #168	; 0xa8
 800254a:	601a      	str	r2, [r3, #0]
     	    Sharp_bend_speed_right = -70;//70;
 800254c:	4b24      	ldr	r3, [pc, #144]	; (80025e0 <HAL_UART_RxCpltCallback+0x584>)
 800254e:	f06f 0245 	mvn.w	r2, #69	; 0x45
 8002552:	601a      	str	r2, [r3, #0]
     	    Sharp_bend_speed_left = 73;//73
 8002554:	4b23      	ldr	r3, [pc, #140]	; (80025e4 <HAL_UART_RxCpltCallback+0x588>)
 8002556:	2249      	movs	r2, #73	; 0x49
 8002558:	601a      	str	r2, [r3, #0]
     	    Bend_speed_right = -76;
 800255a:	4b23      	ldr	r3, [pc, #140]	; (80025e8 <HAL_UART_RxCpltCallback+0x58c>)
 800255c:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8002560:	601a      	str	r2, [r3, #0]
     	    Bend_speed_left = 128;
 8002562:	4b22      	ldr	r3, [pc, #136]	; (80025ec <HAL_UART_RxCpltCallback+0x590>)
 8002564:	2280      	movs	r2, #128	; 0x80
 8002566:	601a      	str	r2, [r3, #0]
     	    Kp = 0.067;//0.07
 8002568:	4b21      	ldr	r3, [pc, #132]	; (80025f0 <HAL_UART_RxCpltCallback+0x594>)
 800256a:	4a2a      	ldr	r2, [pc, #168]	; (8002614 <HAL_UART_RxCpltCallback+0x5b8>)
 800256c:	601a      	str	r2, [r3, #0]
     	    Kd = 95;//95
 800256e:	4b22      	ldr	r3, [pc, #136]	; (80025f8 <HAL_UART_RxCpltCallback+0x59c>)
 8002570:	4a29      	ldr	r2, [pc, #164]	; (8002618 <HAL_UART_RxCpltCallback+0x5bc>)
 8002572:	601a      	str	r2, [r3, #0]
     	 }
     	/*Send some data through UART3-USB terminal*/
     	Battery_ADC_measurement();
 8002574:	f7ff f818 	bl	80015a8 <Battery_ADC_measurement>
    	SN_UART_Send(&huart3,"rxData: %d \r \n ",RxData);
 8002578:	4a13      	ldr	r2, [pc, #76]	; (80025c8 <HAL_UART_RxCpltCallback+0x56c>)
 800257a:	4928      	ldr	r1, [pc, #160]	; (800261c <HAL_UART_RxCpltCallback+0x5c0>)
 800257c:	4828      	ldr	r0, [pc, #160]	; (8002620 <HAL_UART_RxCpltCallback+0x5c4>)
 800257e:	f7fe fe25 	bl	80011cc <SN_UART_Send>
    	SN_UART_Send(&huart3,"speedlevel = %.1f \r \n battery: %.1f \r \n raw= %d \r \n ",speedlevel,battery_procentage_raw,raw_battery);
 8002582:	4b28      	ldr	r3, [pc, #160]	; (8002624 <HAL_UART_RxCpltCallback+0x5c8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7fd ff4e 	bl	8000428 <__aeabi_f2d>
 800258c:	4604      	mov	r4, r0
 800258e:	460d      	mov	r5, r1
 8002590:	4b25      	ldr	r3, [pc, #148]	; (8002628 <HAL_UART_RxCpltCallback+0x5cc>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f7fd ff47 	bl	8000428 <__aeabi_f2d>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4923      	ldr	r1, [pc, #140]	; (800262c <HAL_UART_RxCpltCallback+0x5d0>)
 80025a0:	8809      	ldrh	r1, [r1, #0]
 80025a2:	9102      	str	r1, [sp, #8]
 80025a4:	e9cd 2300 	strd	r2, r3, [sp]
 80025a8:	4622      	mov	r2, r4
 80025aa:	462b      	mov	r3, r5
 80025ac:	4920      	ldr	r1, [pc, #128]	; (8002630 <HAL_UART_RxCpltCallback+0x5d4>)
 80025ae:	481c      	ldr	r0, [pc, #112]	; (8002620 <HAL_UART_RxCpltCallback+0x5c4>)
 80025b0:	f7fe fe0c 	bl	80011cc <SN_UART_Send>
    	/*Begin receiving*/
    	HAL_UART_Receive_IT(&huart1,(uint8_t*)RxData,28);
 80025b4:	221c      	movs	r2, #28
 80025b6:	4904      	ldr	r1, [pc, #16]	; (80025c8 <HAL_UART_RxCpltCallback+0x56c>)
 80025b8:	481e      	ldr	r0, [pc, #120]	; (8002634 <HAL_UART_RxCpltCallback+0x5d8>)
 80025ba:	f003 f970 	bl	800589e <HAL_UART_Receive_IT>
	}
}
 80025be:	bf00      	nop
 80025c0:	3730      	adds	r7, #48	; 0x30
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bdb0      	pop	{r4, r5, r7, pc}
 80025c6:	bf00      	nop
 80025c8:	200002b8 	.word	0x200002b8
 80025cc:	2000001c 	.word	0x2000001c
 80025d0:	20000014 	.word	0x20000014
 80025d4:	20000018 	.word	0x20000018
 80025d8:	20000010 	.word	0x20000010
 80025dc:	2000000c 	.word	0x2000000c
 80025e0:	20000020 	.word	0x20000020
 80025e4:	20000024 	.word	0x20000024
 80025e8:	20000028 	.word	0x20000028
 80025ec:	2000002c 	.word	0x2000002c
 80025f0:	20000000 	.word	0x20000000
 80025f4:	3cf5c28f 	.word	0x3cf5c28f
 80025f8:	20000004 	.word	0x20000004
 80025fc:	428c0000 	.word	0x428c0000
 8002600:	3d23d70a 	.word	0x3d23d70a
 8002604:	42960000 	.word	0x42960000
 8002608:	3d3851ec 	.word	0x3d3851ec
 800260c:	3d4ccccd 	.word	0x3d4ccccd
 8002610:	42a00000 	.word	0x42a00000
 8002614:	3d89374c 	.word	0x3d89374c
 8002618:	42be0000 	.word	0x42be0000
 800261c:	0800a964 	.word	0x0800a964
 8002620:	20000400 	.word	0x20000400
 8002624:	20000008 	.word	0x20000008
 8002628:	200002d8 	.word	0x200002d8
 800262c:	200002d4 	.word	0x200002d4
 8002630:	0800a974 	.word	0x0800a974
 8002634:	200003b8 	.word	0x200003b8

08002638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800263c:	b672      	cpsid	i
}
 800263e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002640:	e7fe      	b.n	8002640 <Error_Handler+0x8>
	...

08002644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <HAL_MspInit+0x5c>)
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	4a14      	ldr	r2, [pc, #80]	; (80026a0 <HAL_MspInit+0x5c>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	6193      	str	r3, [r2, #24]
 8002656:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <HAL_MspInit+0x5c>)
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002662:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <HAL_MspInit+0x5c>)
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	4a0e      	ldr	r2, [pc, #56]	; (80026a0 <HAL_MspInit+0x5c>)
 8002668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800266c:	61d3      	str	r3, [r2, #28]
 800266e:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <HAL_MspInit+0x5c>)
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002676:	607b      	str	r3, [r7, #4]
 8002678:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800267a:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <HAL_MspInit+0x60>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	4a04      	ldr	r2, [pc, #16]	; (80026a4 <HAL_MspInit+0x60>)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002696:	bf00      	nop
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr
 80026a0:	40021000 	.word	0x40021000
 80026a4:	40010000 	.word	0x40010000

080026a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026ac:	e7fe      	b.n	80026ac <NMI_Handler+0x4>

080026ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026b2:	e7fe      	b.n	80026b2 <HardFault_Handler+0x4>

080026b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026b8:	e7fe      	b.n	80026b8 <MemManage_Handler+0x4>

080026ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026be:	e7fe      	b.n	80026be <BusFault_Handler+0x4>

080026c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026c4:	e7fe      	b.n	80026c4 <UsageFault_Handler+0x4>

080026c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026c6:	b480      	push	{r7}
 80026c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr

080026d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026d2:	b480      	push	{r7}
 80026d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr

080026de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026de:	b480      	push	{r7}
 80026e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr

080026ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026ee:	f000 fbd3 	bl	8002e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026fc:	4802      	ldr	r0, [pc, #8]	; (8002708 <USART1_IRQHandler+0x10>)
 80026fe:	f003 f8f3 	bl	80058e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	200003b8 	.word	0x200003b8

0800270c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  return 1;
 8002710:	2301      	movs	r3, #1
}
 8002712:	4618      	mov	r0, r3
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr

0800271a <_kill>:

int _kill(int pid, int sig)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002724:	f003 fe68 	bl	80063f8 <__errno>
 8002728:	4603      	mov	r3, r0
 800272a:	2216      	movs	r2, #22
 800272c:	601a      	str	r2, [r3, #0]
  return -1;
 800272e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <_exit>:

void _exit (int status)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002742:	f04f 31ff 	mov.w	r1, #4294967295
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff ffe7 	bl	800271a <_kill>
  while (1) {}    /* Make sure we hang here */
 800274c:	e7fe      	b.n	800274c <_exit+0x12>

0800274e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b086      	sub	sp, #24
 8002752:	af00      	add	r7, sp, #0
 8002754:	60f8      	str	r0, [r7, #12]
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
 800275e:	e00a      	b.n	8002776 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002760:	f3af 8000 	nop.w
 8002764:	4601      	mov	r1, r0
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	60ba      	str	r2, [r7, #8]
 800276c:	b2ca      	uxtb	r2, r1
 800276e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	3301      	adds	r3, #1
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	429a      	cmp	r2, r3
 800277c:	dbf0      	blt.n	8002760 <_read+0x12>
  }

  return len;
 800277e:	687b      	ldr	r3, [r7, #4]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	e009      	b.n	80027ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	60ba      	str	r2, [r7, #8]
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	3301      	adds	r3, #1
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	dbf1      	blt.n	800279a <_write+0x12>
  }
  return len;
 80027b6:	687b      	ldr	r3, [r7, #4]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <_close>:

int _close(int file)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr

080027d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
 80027de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027e6:	605a      	str	r2, [r3, #4]
  return 0;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <_isatty>:

int _isatty(int file)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027fc:	2301      	movs	r3, #1
}
 80027fe:	4618      	mov	r0, r3
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr

08002808 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr

08002820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002828:	4a14      	ldr	r2, [pc, #80]	; (800287c <_sbrk+0x5c>)
 800282a:	4b15      	ldr	r3, [pc, #84]	; (8002880 <_sbrk+0x60>)
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002834:	4b13      	ldr	r3, [pc, #76]	; (8002884 <_sbrk+0x64>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d102      	bne.n	8002842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800283c:	4b11      	ldr	r3, [pc, #68]	; (8002884 <_sbrk+0x64>)
 800283e:	4a12      	ldr	r2, [pc, #72]	; (8002888 <_sbrk+0x68>)
 8002840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002842:	4b10      	ldr	r3, [pc, #64]	; (8002884 <_sbrk+0x64>)
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4413      	add	r3, r2
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	429a      	cmp	r2, r3
 800284e:	d207      	bcs.n	8002860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002850:	f003 fdd2 	bl	80063f8 <__errno>
 8002854:	4603      	mov	r3, r0
 8002856:	220c      	movs	r2, #12
 8002858:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800285a:	f04f 33ff 	mov.w	r3, #4294967295
 800285e:	e009      	b.n	8002874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002860:	4b08      	ldr	r3, [pc, #32]	; (8002884 <_sbrk+0x64>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002866:	4b07      	ldr	r3, [pc, #28]	; (8002884 <_sbrk+0x64>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4413      	add	r3, r2
 800286e:	4a05      	ldr	r2, [pc, #20]	; (8002884 <_sbrk+0x64>)
 8002870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002872:	68fb      	ldr	r3, [r7, #12]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	20005000 	.word	0x20005000
 8002880:	00000400 	.word	0x00000400
 8002884:	200002dc 	.word	0x200002dc
 8002888:	20000460 	.word	0x20000460

0800288c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr

08002898 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800289e:	f107 0308 	add.w	r3, r7, #8
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	605a      	str	r2, [r3, #4]
 80028a8:	609a      	str	r2, [r3, #8]
 80028aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028ac:	463b      	mov	r3, r7
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028b4:	4b1e      	ldr	r3, [pc, #120]	; (8002930 <MX_TIM1_Init+0x98>)
 80028b6:	4a1f      	ldr	r2, [pc, #124]	; (8002934 <MX_TIM1_Init+0x9c>)
 80028b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80028ba:	4b1d      	ldr	r3, [pc, #116]	; (8002930 <MX_TIM1_Init+0x98>)
 80028bc:	2247      	movs	r2, #71	; 0x47
 80028be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028c0:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <MX_TIM1_Init+0x98>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80028c6:	4b1a      	ldr	r3, [pc, #104]	; (8002930 <MX_TIM1_Init+0x98>)
 80028c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ce:	4b18      	ldr	r3, [pc, #96]	; (8002930 <MX_TIM1_Init+0x98>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028d4:	4b16      	ldr	r3, [pc, #88]	; (8002930 <MX_TIM1_Init+0x98>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028da:	4b15      	ldr	r3, [pc, #84]	; (8002930 <MX_TIM1_Init+0x98>)
 80028dc:	2200      	movs	r2, #0
 80028de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80028e0:	4813      	ldr	r0, [pc, #76]	; (8002930 <MX_TIM1_Init+0x98>)
 80028e2:	f002 f835 	bl	8004950 <HAL_TIM_Base_Init>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80028ec:	f7ff fea4 	bl	8002638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80028f6:	f107 0308 	add.w	r3, r7, #8
 80028fa:	4619      	mov	r1, r3
 80028fc:	480c      	ldr	r0, [pc, #48]	; (8002930 <MX_TIM1_Init+0x98>)
 80028fe:	f002 fb31 	bl	8004f64 <HAL_TIM_ConfigClockSource>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002908:	f7ff fe96 	bl	8002638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800290c:	2300      	movs	r3, #0
 800290e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002910:	2300      	movs	r3, #0
 8002912:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002914:	463b      	mov	r3, r7
 8002916:	4619      	mov	r1, r3
 8002918:	4805      	ldr	r0, [pc, #20]	; (8002930 <MX_TIM1_Init+0x98>)
 800291a:	f002 fe8f 	bl	800563c <HAL_TIMEx_MasterConfigSynchronization>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002924:	f7ff fe88 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002928:	bf00      	nop
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	200002e0 	.word	0x200002e0
 8002934:	40012c00 	.word	0x40012c00

08002938 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800293e:	f107 0308 	add.w	r3, r7, #8
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	605a      	str	r2, [r3, #4]
 8002948:	609a      	str	r2, [r3, #8]
 800294a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800294c:	463b      	mov	r3, r7
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002954:	4b1d      	ldr	r3, [pc, #116]	; (80029cc <MX_TIM3_Init+0x94>)
 8002956:	4a1e      	ldr	r2, [pc, #120]	; (80029d0 <MX_TIM3_Init+0x98>)
 8002958:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800295a:	4b1c      	ldr	r3, [pc, #112]	; (80029cc <MX_TIM3_Init+0x94>)
 800295c:	2247      	movs	r2, #71	; 0x47
 800295e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002960:	4b1a      	ldr	r3, [pc, #104]	; (80029cc <MX_TIM3_Init+0x94>)
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002966:	4b19      	ldr	r3, [pc, #100]	; (80029cc <MX_TIM3_Init+0x94>)
 8002968:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800296c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800296e:	4b17      	ldr	r3, [pc, #92]	; (80029cc <MX_TIM3_Init+0x94>)
 8002970:	2200      	movs	r2, #0
 8002972:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002974:	4b15      	ldr	r3, [pc, #84]	; (80029cc <MX_TIM3_Init+0x94>)
 8002976:	2200      	movs	r2, #0
 8002978:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800297a:	4814      	ldr	r0, [pc, #80]	; (80029cc <MX_TIM3_Init+0x94>)
 800297c:	f001 ffe8 	bl	8004950 <HAL_TIM_Base_Init>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002986:	f7ff fe57 	bl	8002638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800298a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800298e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002990:	f107 0308 	add.w	r3, r7, #8
 8002994:	4619      	mov	r1, r3
 8002996:	480d      	ldr	r0, [pc, #52]	; (80029cc <MX_TIM3_Init+0x94>)
 8002998:	f002 fae4 	bl	8004f64 <HAL_TIM_ConfigClockSource>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80029a2:	f7ff fe49 	bl	8002638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029a6:	2300      	movs	r3, #0
 80029a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029aa:	2300      	movs	r3, #0
 80029ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029ae:	463b      	mov	r3, r7
 80029b0:	4619      	mov	r1, r3
 80029b2:	4806      	ldr	r0, [pc, #24]	; (80029cc <MX_TIM3_Init+0x94>)
 80029b4:	f002 fe42 	bl	800563c <HAL_TIMEx_MasterConfigSynchronization>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80029be:	f7ff fe3b 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80029c2:	bf00      	nop
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000328 	.word	0x20000328
 80029d0:	40000400 	.word	0x40000400

080029d4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08e      	sub	sp, #56	; 0x38
 80029d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	605a      	str	r2, [r3, #4]
 80029e4:	609a      	str	r2, [r3, #8]
 80029e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029e8:	f107 0320 	add.w	r3, r7, #32
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029f2:	1d3b      	adds	r3, r7, #4
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	60da      	str	r2, [r3, #12]
 80029fe:	611a      	str	r2, [r3, #16]
 8002a00:	615a      	str	r2, [r3, #20]
 8002a02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a04:	4b3d      	ldr	r3, [pc, #244]	; (8002afc <MX_TIM4_Init+0x128>)
 8002a06:	4a3e      	ldr	r2, [pc, #248]	; (8002b00 <MX_TIM4_Init+0x12c>)
 8002a08:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8002a0a:	4b3c      	ldr	r3, [pc, #240]	; (8002afc <MX_TIM4_Init+0x128>)
 8002a0c:	224f      	movs	r2, #79	; 0x4f
 8002a0e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a10:	4b3a      	ldr	r3, [pc, #232]	; (8002afc <MX_TIM4_Init+0x128>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002a16:	4b39      	ldr	r3, [pc, #228]	; (8002afc <MX_TIM4_Init+0x128>)
 8002a18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a1c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a1e:	4b37      	ldr	r3, [pc, #220]	; (8002afc <MX_TIM4_Init+0x128>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a24:	4b35      	ldr	r3, [pc, #212]	; (8002afc <MX_TIM4_Init+0x128>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002a2a:	4834      	ldr	r0, [pc, #208]	; (8002afc <MX_TIM4_Init+0x128>)
 8002a2c:	f001 ff90 	bl	8004950 <HAL_TIM_Base_Init>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002a36:	f7ff fdff 	bl	8002638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002a40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a44:	4619      	mov	r1, r3
 8002a46:	482d      	ldr	r0, [pc, #180]	; (8002afc <MX_TIM4_Init+0x128>)
 8002a48:	f002 fa8c 	bl	8004f64 <HAL_TIM_ConfigClockSource>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002a52:	f7ff fdf1 	bl	8002638 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002a56:	4829      	ldr	r0, [pc, #164]	; (8002afc <MX_TIM4_Init+0x128>)
 8002a58:	f002 f86c 	bl	8004b34 <HAL_TIM_PWM_Init>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002a62:	f7ff fde9 	bl	8002638 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8002a66:	4825      	ldr	r0, [pc, #148]	; (8002afc <MX_TIM4_Init+0x128>)
 8002a68:	f002 f80c 	bl	8004a84 <HAL_TIM_OC_Init>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8002a72:	f7ff fde1 	bl	8002638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a76:	2300      	movs	r3, #0
 8002a78:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a7e:	f107 0320 	add.w	r3, r7, #32
 8002a82:	4619      	mov	r1, r3
 8002a84:	481d      	ldr	r0, [pc, #116]	; (8002afc <MX_TIM4_Init+0x128>)
 8002a86:	f002 fdd9 	bl	800563c <HAL_TIMEx_MasterConfigSynchronization>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8002a90:	f7ff fdd2 	bl	8002638 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a94:	2360      	movs	r3, #96	; 0x60
 8002a96:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002aa4:	1d3b      	adds	r3, r7, #4
 8002aa6:	2204      	movs	r2, #4
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4814      	ldr	r0, [pc, #80]	; (8002afc <MX_TIM4_Init+0x128>)
 8002aac:	f002 f998 	bl	8004de0 <HAL_TIM_PWM_ConfigChannel>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 8002ab6:	f7ff fdbf 	bl	8002638 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002aba:	2300      	movs	r3, #0
 8002abc:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002abe:	1d3b      	adds	r3, r7, #4
 8002ac0:	2208      	movs	r2, #8
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	480d      	ldr	r0, [pc, #52]	; (8002afc <MX_TIM4_Init+0x128>)
 8002ac6:	f002 f92f 	bl	8004d28 <HAL_TIM_OC_ConfigChannel>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 8002ad0:	f7ff fdb2 	bl	8002638 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ad4:	2360      	movs	r3, #96	; 0x60
 8002ad6:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ad8:	1d3b      	adds	r3, r7, #4
 8002ada:	220c      	movs	r2, #12
 8002adc:	4619      	mov	r1, r3
 8002ade:	4807      	ldr	r0, [pc, #28]	; (8002afc <MX_TIM4_Init+0x128>)
 8002ae0:	f002 f97e 	bl	8004de0 <HAL_TIM_PWM_ConfigChannel>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8002aea:	f7ff fda5 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002aee:	4803      	ldr	r0, [pc, #12]	; (8002afc <MX_TIM4_Init+0x128>)
 8002af0:	f000 f84e 	bl	8002b90 <HAL_TIM_MspPostInit>

}
 8002af4:	bf00      	nop
 8002af6:	3738      	adds	r7, #56	; 0x38
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20000370 	.word	0x20000370
 8002b00:	40000800 	.word	0x40000800

08002b04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b087      	sub	sp, #28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a1b      	ldr	r2, [pc, #108]	; (8002b80 <HAL_TIM_Base_MspInit+0x7c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d10c      	bne.n	8002b30 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b16:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <HAL_TIM_Base_MspInit+0x80>)
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	4a1a      	ldr	r2, [pc, #104]	; (8002b84 <HAL_TIM_Base_MspInit+0x80>)
 8002b1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b20:	6193      	str	r3, [r2, #24]
 8002b22:	4b18      	ldr	r3, [pc, #96]	; (8002b84 <HAL_TIM_Base_MspInit+0x80>)
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002b2e:	e022      	b.n	8002b76 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a14      	ldr	r2, [pc, #80]	; (8002b88 <HAL_TIM_Base_MspInit+0x84>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d10c      	bne.n	8002b54 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b3a:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <HAL_TIM_Base_MspInit+0x80>)
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	4a11      	ldr	r2, [pc, #68]	; (8002b84 <HAL_TIM_Base_MspInit+0x80>)
 8002b40:	f043 0302 	orr.w	r3, r3, #2
 8002b44:	61d3      	str	r3, [r2, #28]
 8002b46:	4b0f      	ldr	r3, [pc, #60]	; (8002b84 <HAL_TIM_Base_MspInit+0x80>)
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	613b      	str	r3, [r7, #16]
 8002b50:	693b      	ldr	r3, [r7, #16]
}
 8002b52:	e010      	b.n	8002b76 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM4)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a0c      	ldr	r2, [pc, #48]	; (8002b8c <HAL_TIM_Base_MspInit+0x88>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d10b      	bne.n	8002b76 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b5e:	4b09      	ldr	r3, [pc, #36]	; (8002b84 <HAL_TIM_Base_MspInit+0x80>)
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	4a08      	ldr	r2, [pc, #32]	; (8002b84 <HAL_TIM_Base_MspInit+0x80>)
 8002b64:	f043 0304 	orr.w	r3, r3, #4
 8002b68:	61d3      	str	r3, [r2, #28]
 8002b6a:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <HAL_TIM_Base_MspInit+0x80>)
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
}
 8002b76:	bf00      	nop
 8002b78:	371c      	adds	r7, #28
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr
 8002b80:	40012c00 	.word	0x40012c00
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40000400 	.word	0x40000400
 8002b8c:	40000800 	.word	0x40000800

08002b90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b98:	f107 0310 	add.w	r3, r7, #16
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a10      	ldr	r2, [pc, #64]	; (8002bec <HAL_TIM_MspPostInit+0x5c>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d118      	bne.n	8002be2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb0:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <HAL_TIM_MspPostInit+0x60>)
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	4a0e      	ldr	r2, [pc, #56]	; (8002bf0 <HAL_TIM_MspPostInit+0x60>)
 8002bb6:	f043 0308 	orr.w	r3, r3, #8
 8002bba:	6193      	str	r3, [r2, #24]
 8002bbc:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <HAL_TIM_MspPostInit+0x60>)
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	f003 0308 	and.w	r3, r3, #8
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002bc8:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002bcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd6:	f107 0310 	add.w	r3, r7, #16
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4805      	ldr	r0, [pc, #20]	; (8002bf4 <HAL_TIM_MspPostInit+0x64>)
 8002bde:	f000 ff87 	bl	8003af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002be2:	bf00      	nop
 8002be4:	3720      	adds	r7, #32
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40000800 	.word	0x40000800
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	40010c00 	.word	0x40010c00

08002bf8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002bfc:	4b11      	ldr	r3, [pc, #68]	; (8002c44 <MX_USART1_UART_Init+0x4c>)
 8002bfe:	4a12      	ldr	r2, [pc, #72]	; (8002c48 <MX_USART1_UART_Init+0x50>)
 8002c00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002c02:	4b10      	ldr	r3, [pc, #64]	; (8002c44 <MX_USART1_UART_Init+0x4c>)
 8002c04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002c08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c0a:	4b0e      	ldr	r3, [pc, #56]	; (8002c44 <MX_USART1_UART_Init+0x4c>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c10:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <MX_USART1_UART_Init+0x4c>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c16:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <MX_USART1_UART_Init+0x4c>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c1c:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <MX_USART1_UART_Init+0x4c>)
 8002c1e:	220c      	movs	r2, #12
 8002c20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c22:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <MX_USART1_UART_Init+0x4c>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <MX_USART1_UART_Init+0x4c>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c2e:	4805      	ldr	r0, [pc, #20]	; (8002c44 <MX_USART1_UART_Init+0x4c>)
 8002c30:	f002 fd62 	bl	80056f8 <HAL_UART_Init>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c3a:	f7ff fcfd 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	200003b8 	.word	0x200003b8
 8002c48:	40013800 	.word	0x40013800

08002c4c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002c50:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <MX_USART3_UART_Init+0x4c>)
 8002c52:	4a12      	ldr	r2, [pc, #72]	; (8002c9c <MX_USART3_UART_Init+0x50>)
 8002c54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002c56:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <MX_USART3_UART_Init+0x4c>)
 8002c58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c5e:	4b0e      	ldr	r3, [pc, #56]	; (8002c98 <MX_USART3_UART_Init+0x4c>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c64:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <MX_USART3_UART_Init+0x4c>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c6a:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <MX_USART3_UART_Init+0x4c>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c70:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <MX_USART3_UART_Init+0x4c>)
 8002c72:	220c      	movs	r2, #12
 8002c74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c76:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <MX_USART3_UART_Init+0x4c>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c7c:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <MX_USART3_UART_Init+0x4c>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c82:	4805      	ldr	r0, [pc, #20]	; (8002c98 <MX_USART3_UART_Init+0x4c>)
 8002c84:	f002 fd38 	bl	80056f8 <HAL_UART_Init>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002c8e:	f7ff fcd3 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000400 	.word	0x20000400
 8002c9c:	40004800 	.word	0x40004800

08002ca0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca8:	f107 0318 	add.w	r3, r7, #24
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a3c      	ldr	r2, [pc, #240]	; (8002dac <HAL_UART_MspInit+0x10c>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d13a      	bne.n	8002d36 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cc0:	4b3b      	ldr	r3, [pc, #236]	; (8002db0 <HAL_UART_MspInit+0x110>)
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	4a3a      	ldr	r2, [pc, #232]	; (8002db0 <HAL_UART_MspInit+0x110>)
 8002cc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cca:	6193      	str	r3, [r2, #24]
 8002ccc:	4b38      	ldr	r3, [pc, #224]	; (8002db0 <HAL_UART_MspInit+0x110>)
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd8:	4b35      	ldr	r3, [pc, #212]	; (8002db0 <HAL_UART_MspInit+0x110>)
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	4a34      	ldr	r2, [pc, #208]	; (8002db0 <HAL_UART_MspInit+0x110>)
 8002cde:	f043 0304 	orr.w	r3, r3, #4
 8002ce2:	6193      	str	r3, [r2, #24]
 8002ce4:	4b32      	ldr	r3, [pc, #200]	; (8002db0 <HAL_UART_MspInit+0x110>)
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cfe:	f107 0318 	add.w	r3, r7, #24
 8002d02:	4619      	mov	r1, r3
 8002d04:	482b      	ldr	r0, [pc, #172]	; (8002db4 <HAL_UART_MspInit+0x114>)
 8002d06:	f000 fef3 	bl	8003af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d10:	2300      	movs	r3, #0
 8002d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d18:	f107 0318 	add.w	r3, r7, #24
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4825      	ldr	r0, [pc, #148]	; (8002db4 <HAL_UART_MspInit+0x114>)
 8002d20:	f000 fee6 	bl	8003af0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d24:	2200      	movs	r2, #0
 8002d26:	2100      	movs	r1, #0
 8002d28:	2025      	movs	r0, #37	; 0x25
 8002d2a:	f000 fdf8 	bl	800391e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d2e:	2025      	movs	r0, #37	; 0x25
 8002d30:	f000 fe11 	bl	8003956 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002d34:	e036      	b.n	8002da4 <HAL_UART_MspInit+0x104>
  else if(uartHandle->Instance==USART3)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a1f      	ldr	r2, [pc, #124]	; (8002db8 <HAL_UART_MspInit+0x118>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d131      	bne.n	8002da4 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d40:	4b1b      	ldr	r3, [pc, #108]	; (8002db0 <HAL_UART_MspInit+0x110>)
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	4a1a      	ldr	r2, [pc, #104]	; (8002db0 <HAL_UART_MspInit+0x110>)
 8002d46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d4a:	61d3      	str	r3, [r2, #28]
 8002d4c:	4b18      	ldr	r3, [pc, #96]	; (8002db0 <HAL_UART_MspInit+0x110>)
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d58:	4b15      	ldr	r3, [pc, #84]	; (8002db0 <HAL_UART_MspInit+0x110>)
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	4a14      	ldr	r2, [pc, #80]	; (8002db0 <HAL_UART_MspInit+0x110>)
 8002d5e:	f043 0308 	orr.w	r3, r3, #8
 8002d62:	6193      	str	r3, [r2, #24]
 8002d64:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <HAL_UART_MspInit+0x110>)
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	60bb      	str	r3, [r7, #8]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d76:	2302      	movs	r3, #2
 8002d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d7e:	f107 0318 	add.w	r3, r7, #24
 8002d82:	4619      	mov	r1, r3
 8002d84:	480d      	ldr	r0, [pc, #52]	; (8002dbc <HAL_UART_MspInit+0x11c>)
 8002d86:	f000 feb3 	bl	8003af0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002d8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d90:	2300      	movs	r3, #0
 8002d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d94:	2300      	movs	r3, #0
 8002d96:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d98:	f107 0318 	add.w	r3, r7, #24
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4807      	ldr	r0, [pc, #28]	; (8002dbc <HAL_UART_MspInit+0x11c>)
 8002da0:	f000 fea6 	bl	8003af0 <HAL_GPIO_Init>
}
 8002da4:	bf00      	nop
 8002da6:	3728      	adds	r7, #40	; 0x28
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40013800 	.word	0x40013800
 8002db0:	40021000 	.word	0x40021000
 8002db4:	40010800 	.word	0x40010800
 8002db8:	40004800 	.word	0x40004800
 8002dbc:	40010c00 	.word	0x40010c00

08002dc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002dc0:	f7ff fd64 	bl	800288c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002dc4:	480b      	ldr	r0, [pc, #44]	; (8002df4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002dc6:	490c      	ldr	r1, [pc, #48]	; (8002df8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002dc8:	4a0c      	ldr	r2, [pc, #48]	; (8002dfc <LoopFillZerobss+0x16>)
  movs r3, #0
 8002dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dcc:	e002      	b.n	8002dd4 <LoopCopyDataInit>

08002dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dd2:	3304      	adds	r3, #4

08002dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dd8:	d3f9      	bcc.n	8002dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dda:	4a09      	ldr	r2, [pc, #36]	; (8002e00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002ddc:	4c09      	ldr	r4, [pc, #36]	; (8002e04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002de0:	e001      	b.n	8002de6 <LoopFillZerobss>

08002de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002de4:	3204      	adds	r2, #4

08002de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002de8:	d3fb      	bcc.n	8002de2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dea:	f003 fb0b 	bl	8006404 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002dee:	f7ff f879 	bl	8001ee4 <main>
  bx lr
 8002df2:	4770      	bx	lr
  ldr r0, =_sdata
 8002df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002df8:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8002dfc:	0800ae94 	.word	0x0800ae94
  ldr r2, =_sbss
 8002e00:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8002e04:	2000045c 	.word	0x2000045c

08002e08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e08:	e7fe      	b.n	8002e08 <ADC1_2_IRQHandler>
	...

08002e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e10:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <HAL_Init+0x28>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a07      	ldr	r2, [pc, #28]	; (8002e34 <HAL_Init+0x28>)
 8002e16:	f043 0310 	orr.w	r3, r3, #16
 8002e1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e1c:	2003      	movs	r0, #3
 8002e1e:	f000 fd73 	bl	8003908 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e22:	200f      	movs	r0, #15
 8002e24:	f000 f808 	bl	8002e38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e28:	f7ff fc0c 	bl	8002644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40022000 	.word	0x40022000

08002e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e40:	4b12      	ldr	r3, [pc, #72]	; (8002e8c <HAL_InitTick+0x54>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <HAL_InitTick+0x58>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	4619      	mov	r1, r3
 8002e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 fd8b 	bl	8003972 <HAL_SYSTICK_Config>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e00e      	b.n	8002e84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b0f      	cmp	r3, #15
 8002e6a:	d80a      	bhi.n	8002e82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	f04f 30ff 	mov.w	r0, #4294967295
 8002e74:	f000 fd53 	bl	800391e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e78:	4a06      	ldr	r2, [pc, #24]	; (8002e94 <HAL_InitTick+0x5c>)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	e000      	b.n	8002e84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	20000034 	.word	0x20000034
 8002e90:	2000003c 	.word	0x2000003c
 8002e94:	20000038 	.word	0x20000038

08002e98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e9c:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <HAL_IncTick+0x1c>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <HAL_IncTick+0x20>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	4a03      	ldr	r2, [pc, #12]	; (8002eb8 <HAL_IncTick+0x20>)
 8002eaa:	6013      	str	r3, [r2, #0]
}
 8002eac:	bf00      	nop
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr
 8002eb4:	2000003c 	.word	0x2000003c
 8002eb8:	20000448 	.word	0x20000448

08002ebc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8002ec0:	4b02      	ldr	r3, [pc, #8]	; (8002ecc <HAL_GetTick+0x10>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr
 8002ecc:	20000448 	.word	0x20000448

08002ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ed8:	f7ff fff0 	bl	8002ebc <HAL_GetTick>
 8002edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee8:	d005      	beq.n	8002ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eea:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <HAL_Delay+0x44>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ef6:	bf00      	nop
 8002ef8:	f7ff ffe0 	bl	8002ebc <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d8f7      	bhi.n	8002ef8 <HAL_Delay+0x28>
  {
  }
}
 8002f08:	bf00      	nop
 8002f0a:	bf00      	nop
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	2000003c 	.word	0x2000003c

08002f18 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e0be      	b.n	80030b8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d109      	bne.n	8002f5c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7fe fa58 	bl	800140c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 fbc5 	bl	80036ec <ADC_ConversionStop_Disable>
 8002f62:	4603      	mov	r3, r0
 8002f64:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f040 8099 	bne.w	80030a6 <HAL_ADC_Init+0x18e>
 8002f74:	7dfb      	ldrb	r3, [r7, #23]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f040 8095 	bne.w	80030a6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f80:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f84:	f023 0302 	bic.w	r3, r3, #2
 8002f88:	f043 0202 	orr.w	r2, r3, #2
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f98:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	7b1b      	ldrb	r3, [r3, #12]
 8002f9e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002fa0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb0:	d003      	beq.n	8002fba <HAL_ADC_Init+0xa2>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d102      	bne.n	8002fc0 <HAL_ADC_Init+0xa8>
 8002fba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fbe:	e000      	b.n	8002fc2 <HAL_ADC_Init+0xaa>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	7d1b      	ldrb	r3, [r3, #20]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d119      	bne.n	8003004 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	7b1b      	ldrb	r3, [r3, #12]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d109      	bne.n	8002fec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	035a      	lsls	r2, r3, #13
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	e00b      	b.n	8003004 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff0:	f043 0220 	orr.w	r2, r3, #32
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffc:	f043 0201 	orr.w	r2, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	430a      	orrs	r2, r1
 8003016:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	4b28      	ldr	r3, [pc, #160]	; (80030c0 <HAL_ADC_Init+0x1a8>)
 8003020:	4013      	ands	r3, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6812      	ldr	r2, [r2, #0]
 8003026:	68b9      	ldr	r1, [r7, #8]
 8003028:	430b      	orrs	r3, r1
 800302a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003034:	d003      	beq.n	800303e <HAL_ADC_Init+0x126>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d104      	bne.n	8003048 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	3b01      	subs	r3, #1
 8003044:	051b      	lsls	r3, r3, #20
 8003046:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	430a      	orrs	r2, r1
 800305a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689a      	ldr	r2, [r3, #8]
 8003062:	4b18      	ldr	r3, [pc, #96]	; (80030c4 <HAL_ADC_Init+0x1ac>)
 8003064:	4013      	ands	r3, r2
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	429a      	cmp	r2, r3
 800306a:	d10b      	bne.n	8003084 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003076:	f023 0303 	bic.w	r3, r3, #3
 800307a:	f043 0201 	orr.w	r2, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003082:	e018      	b.n	80030b6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003088:	f023 0312 	bic.w	r3, r3, #18
 800308c:	f043 0210 	orr.w	r2, r3, #16
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	f043 0201 	orr.w	r2, r3, #1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80030a4:	e007      	b.n	80030b6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030aa:	f043 0210 	orr.w	r2, r3, #16
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80030b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	ffe1f7fd 	.word	0xffe1f7fd
 80030c4:	ff1f0efe 	.word	0xff1f0efe

080030c8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d101      	bne.n	80030e2 <HAL_ADC_Start+0x1a>
 80030de:	2302      	movs	r3, #2
 80030e0:	e098      	b.n	8003214 <HAL_ADC_Start+0x14c>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 faa4 	bl	8003638 <ADC_Enable>
 80030f0:	4603      	mov	r3, r0
 80030f2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f040 8087 	bne.w	800320a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003104:	f023 0301 	bic.w	r3, r3, #1
 8003108:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a41      	ldr	r2, [pc, #260]	; (800321c <HAL_ADC_Start+0x154>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d105      	bne.n	8003126 <HAL_ADC_Start+0x5e>
 800311a:	4b41      	ldr	r3, [pc, #260]	; (8003220 <HAL_ADC_Start+0x158>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d115      	bne.n	8003152 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800313c:	2b00      	cmp	r3, #0
 800313e:	d026      	beq.n	800318e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003144:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003148:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003150:	e01d      	b.n	800318e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003156:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a2f      	ldr	r2, [pc, #188]	; (8003220 <HAL_ADC_Start+0x158>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d004      	beq.n	8003172 <HAL_ADC_Start+0xaa>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a2b      	ldr	r2, [pc, #172]	; (800321c <HAL_ADC_Start+0x154>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d10d      	bne.n	800318e <HAL_ADC_Start+0xc6>
 8003172:	4b2b      	ldr	r3, [pc, #172]	; (8003220 <HAL_ADC_Start+0x158>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317a:	2b00      	cmp	r3, #0
 800317c:	d007      	beq.n	800318e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003182:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003186:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003192:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d006      	beq.n	80031a8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319e:	f023 0206 	bic.w	r2, r3, #6
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80031a6:	e002      	b.n	80031ae <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f06f 0202 	mvn.w	r2, #2
 80031be:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80031ca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80031ce:	d113      	bne.n	80031f8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80031d4:	4a11      	ldr	r2, [pc, #68]	; (800321c <HAL_ADC_Start+0x154>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d105      	bne.n	80031e6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80031da:	4b11      	ldr	r3, [pc, #68]	; (8003220 <HAL_ADC_Start+0x158>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d108      	bne.n	80031f8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80031f4:	609a      	str	r2, [r3, #8]
 80031f6:	e00c      	b.n	8003212 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003206:	609a      	str	r2, [r3, #8]
 8003208:	e003      	b.n	8003212 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003212:	7bfb      	ldrb	r3, [r7, #15]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40012800 	.word	0x40012800
 8003220:	40012400 	.word	0x40012400

08003224 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003224:	b590      	push	{r4, r7, lr}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800323a:	f7ff fe3f 	bl	8002ebc <HAL_GetTick>
 800323e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00b      	beq.n	8003266 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003252:	f043 0220 	orr.w	r2, r3, #32
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e0d3      	b.n	800340e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003270:	2b00      	cmp	r3, #0
 8003272:	d131      	bne.n	80032d8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800327e:	2b00      	cmp	r3, #0
 8003280:	d12a      	bne.n	80032d8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003282:	e021      	b.n	80032c8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328a:	d01d      	beq.n	80032c8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d007      	beq.n	80032a2 <HAL_ADC_PollForConversion+0x7e>
 8003292:	f7ff fe13 	bl	8002ebc <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d212      	bcs.n	80032c8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10b      	bne.n	80032c8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b4:	f043 0204 	orr.w	r2, r3, #4
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e0a2      	b.n	800340e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0d6      	beq.n	8003284 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80032d6:	e070      	b.n	80033ba <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80032d8:	4b4f      	ldr	r3, [pc, #316]	; (8003418 <HAL_ADC_PollForConversion+0x1f4>)
 80032da:	681c      	ldr	r4, [r3, #0]
 80032dc:	2002      	movs	r0, #2
 80032de:	f001 fa81 	bl	80047e4 <HAL_RCCEx_GetPeriphCLKFreq>
 80032e2:	4603      	mov	r3, r0
 80032e4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6919      	ldr	r1, [r3, #16]
 80032ee:	4b4b      	ldr	r3, [pc, #300]	; (800341c <HAL_ADC_PollForConversion+0x1f8>)
 80032f0:	400b      	ands	r3, r1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d118      	bne.n	8003328 <HAL_ADC_PollForConversion+0x104>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68d9      	ldr	r1, [r3, #12]
 80032fc:	4b48      	ldr	r3, [pc, #288]	; (8003420 <HAL_ADC_PollForConversion+0x1fc>)
 80032fe:	400b      	ands	r3, r1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d111      	bne.n	8003328 <HAL_ADC_PollForConversion+0x104>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6919      	ldr	r1, [r3, #16]
 800330a:	4b46      	ldr	r3, [pc, #280]	; (8003424 <HAL_ADC_PollForConversion+0x200>)
 800330c:	400b      	ands	r3, r1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d108      	bne.n	8003324 <HAL_ADC_PollForConversion+0x100>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68d9      	ldr	r1, [r3, #12]
 8003318:	4b43      	ldr	r3, [pc, #268]	; (8003428 <HAL_ADC_PollForConversion+0x204>)
 800331a:	400b      	ands	r3, r1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_ADC_PollForConversion+0x100>
 8003320:	2314      	movs	r3, #20
 8003322:	e020      	b.n	8003366 <HAL_ADC_PollForConversion+0x142>
 8003324:	2329      	movs	r3, #41	; 0x29
 8003326:	e01e      	b.n	8003366 <HAL_ADC_PollForConversion+0x142>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6919      	ldr	r1, [r3, #16]
 800332e:	4b3d      	ldr	r3, [pc, #244]	; (8003424 <HAL_ADC_PollForConversion+0x200>)
 8003330:	400b      	ands	r3, r1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d106      	bne.n	8003344 <HAL_ADC_PollForConversion+0x120>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68d9      	ldr	r1, [r3, #12]
 800333c:	4b3a      	ldr	r3, [pc, #232]	; (8003428 <HAL_ADC_PollForConversion+0x204>)
 800333e:	400b      	ands	r3, r1
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00d      	beq.n	8003360 <HAL_ADC_PollForConversion+0x13c>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6919      	ldr	r1, [r3, #16]
 800334a:	4b38      	ldr	r3, [pc, #224]	; (800342c <HAL_ADC_PollForConversion+0x208>)
 800334c:	400b      	ands	r3, r1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d108      	bne.n	8003364 <HAL_ADC_PollForConversion+0x140>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68d9      	ldr	r1, [r3, #12]
 8003358:	4b34      	ldr	r3, [pc, #208]	; (800342c <HAL_ADC_PollForConversion+0x208>)
 800335a:	400b      	ands	r3, r1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <HAL_ADC_PollForConversion+0x140>
 8003360:	2354      	movs	r3, #84	; 0x54
 8003362:	e000      	b.n	8003366 <HAL_ADC_PollForConversion+0x142>
 8003364:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003366:	fb02 f303 	mul.w	r3, r2, r3
 800336a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800336c:	e021      	b.n	80033b2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003374:	d01a      	beq.n	80033ac <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d007      	beq.n	800338c <HAL_ADC_PollForConversion+0x168>
 800337c:	f7ff fd9e 	bl	8002ebc <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	429a      	cmp	r2, r3
 800338a:	d20f      	bcs.n	80033ac <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	429a      	cmp	r2, r3
 8003392:	d90b      	bls.n	80033ac <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003398:	f043 0204 	orr.w	r2, r3, #4
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e030      	b.n	800340e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	3301      	adds	r3, #1
 80033b0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d8d9      	bhi.n	800336e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f06f 0212 	mvn.w	r2, #18
 80033c2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80033da:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80033de:	d115      	bne.n	800340c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d111      	bne.n	800340c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d105      	bne.n	800340c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	f043 0201 	orr.w	r2, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	371c      	adds	r7, #28
 8003412:	46bd      	mov	sp, r7
 8003414:	bd90      	pop	{r4, r7, pc}
 8003416:	bf00      	nop
 8003418:	20000034 	.word	0x20000034
 800341c:	24924924 	.word	0x24924924
 8003420:	00924924 	.word	0x00924924
 8003424:	12492492 	.word	0x12492492
 8003428:	00492492 	.word	0x00492492
 800342c:	00249249 	.word	0x00249249

08003430 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800343e:	4618      	mov	r0, r3
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr

08003448 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003456:	2300      	movs	r3, #0
 8003458:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x20>
 8003464:	2302      	movs	r3, #2
 8003466:	e0dc      	b.n	8003622 <HAL_ADC_ConfigChannel+0x1da>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b06      	cmp	r3, #6
 8003476:	d81c      	bhi.n	80034b2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	3b05      	subs	r3, #5
 800348a:	221f      	movs	r2, #31
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	4019      	ands	r1, r3
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	6818      	ldr	r0, [r3, #0]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	3b05      	subs	r3, #5
 80034a4:	fa00 f203 	lsl.w	r2, r0, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	635a      	str	r2, [r3, #52]	; 0x34
 80034b0:	e03c      	b.n	800352c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b0c      	cmp	r3, #12
 80034b8:	d81c      	bhi.n	80034f4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	3b23      	subs	r3, #35	; 0x23
 80034cc:	221f      	movs	r2, #31
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	43db      	mvns	r3, r3
 80034d4:	4019      	ands	r1, r3
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	6818      	ldr	r0, [r3, #0]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	3b23      	subs	r3, #35	; 0x23
 80034e6:	fa00 f203 	lsl.w	r2, r0, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	631a      	str	r2, [r3, #48]	; 0x30
 80034f2:	e01b      	b.n	800352c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	3b41      	subs	r3, #65	; 0x41
 8003506:	221f      	movs	r2, #31
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	43db      	mvns	r3, r3
 800350e:	4019      	ands	r1, r3
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	6818      	ldr	r0, [r3, #0]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	3b41      	subs	r3, #65	; 0x41
 8003520:	fa00 f203 	lsl.w	r2, r0, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2b09      	cmp	r3, #9
 8003532:	d91c      	bls.n	800356e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68d9      	ldr	r1, [r3, #12]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	4613      	mov	r3, r2
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	4413      	add	r3, r2
 8003544:	3b1e      	subs	r3, #30
 8003546:	2207      	movs	r2, #7
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	43db      	mvns	r3, r3
 800354e:	4019      	ands	r1, r3
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	6898      	ldr	r0, [r3, #8]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	4613      	mov	r3, r2
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	4413      	add	r3, r2
 800355e:	3b1e      	subs	r3, #30
 8003560:	fa00 f203 	lsl.w	r2, r0, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	60da      	str	r2, [r3, #12]
 800356c:	e019      	b.n	80035a2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6919      	ldr	r1, [r3, #16]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	4613      	mov	r3, r2
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	4413      	add	r3, r2
 800357e:	2207      	movs	r2, #7
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	4019      	ands	r1, r3
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	6898      	ldr	r0, [r3, #8]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	4613      	mov	r3, r2
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	4413      	add	r3, r2
 8003596:	fa00 f203 	lsl.w	r2, r0, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b10      	cmp	r3, #16
 80035a8:	d003      	beq.n	80035b2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035ae:	2b11      	cmp	r3, #17
 80035b0:	d132      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a1d      	ldr	r2, [pc, #116]	; (800362c <HAL_ADC_ConfigChannel+0x1e4>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d125      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d126      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80035d8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b10      	cmp	r3, #16
 80035e0:	d11a      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035e2:	4b13      	ldr	r3, [pc, #76]	; (8003630 <HAL_ADC_ConfigChannel+0x1e8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a13      	ldr	r2, [pc, #76]	; (8003634 <HAL_ADC_ConfigChannel+0x1ec>)
 80035e8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ec:	0c9a      	lsrs	r2, r3, #18
 80035ee:	4613      	mov	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035f8:	e002      	b.n	8003600 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	3b01      	subs	r3, #1
 80035fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f9      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x1b2>
 8003606:	e007      	b.n	8003618 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360c:	f043 0220 	orr.w	r2, r3, #32
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003620:	7bfb      	ldrb	r3, [r7, #15]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr
 800362c:	40012400 	.word	0x40012400
 8003630:	20000034 	.word	0x20000034
 8003634:	431bde83 	.word	0x431bde83

08003638 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b01      	cmp	r3, #1
 8003654:	d040      	beq.n	80036d8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f042 0201 	orr.w	r2, r2, #1
 8003664:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003666:	4b1f      	ldr	r3, [pc, #124]	; (80036e4 <ADC_Enable+0xac>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a1f      	ldr	r2, [pc, #124]	; (80036e8 <ADC_Enable+0xb0>)
 800366c:	fba2 2303 	umull	r2, r3, r2, r3
 8003670:	0c9b      	lsrs	r3, r3, #18
 8003672:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003674:	e002      	b.n	800367c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	3b01      	subs	r3, #1
 800367a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f9      	bne.n	8003676 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003682:	f7ff fc1b 	bl	8002ebc <HAL_GetTick>
 8003686:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003688:	e01f      	b.n	80036ca <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800368a:	f7ff fc17 	bl	8002ebc <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d918      	bls.n	80036ca <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d011      	beq.n	80036ca <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036aa:	f043 0210 	orr.w	r2, r3, #16
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b6:	f043 0201 	orr.w	r2, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e007      	b.n	80036da <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d1d8      	bne.n	800368a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20000034 	.word	0x20000034
 80036e8:	431bde83 	.word	0x431bde83

080036ec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b01      	cmp	r3, #1
 8003704:	d12e      	bne.n	8003764 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0201 	bic.w	r2, r2, #1
 8003714:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003716:	f7ff fbd1 	bl	8002ebc <HAL_GetTick>
 800371a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800371c:	e01b      	b.n	8003756 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800371e:	f7ff fbcd 	bl	8002ebc <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d914      	bls.n	8003756 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b01      	cmp	r3, #1
 8003738:	d10d      	bne.n	8003756 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373e:	f043 0210 	orr.w	r2, r3, #16
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374a:	f043 0201 	orr.w	r2, r3, #1
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e007      	b.n	8003766 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b01      	cmp	r3, #1
 8003762:	d0dc      	beq.n	800371e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003780:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800378c:	4013      	ands	r3, r2
 800378e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800379c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037a2:	4a04      	ldr	r2, [pc, #16]	; (80037b4 <__NVIC_SetPriorityGrouping+0x44>)
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	60d3      	str	r3, [r2, #12]
}
 80037a8:	bf00      	nop
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bc80      	pop	{r7}
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	e000ed00 	.word	0xe000ed00

080037b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037bc:	4b04      	ldr	r3, [pc, #16]	; (80037d0 <__NVIC_GetPriorityGrouping+0x18>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	0a1b      	lsrs	r3, r3, #8
 80037c2:	f003 0307 	and.w	r3, r3, #7
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bc80      	pop	{r7}
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	e000ed00 	.word	0xe000ed00

080037d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4603      	mov	r3, r0
 80037dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	db0b      	blt.n	80037fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037e6:	79fb      	ldrb	r3, [r7, #7]
 80037e8:	f003 021f 	and.w	r2, r3, #31
 80037ec:	4906      	ldr	r1, [pc, #24]	; (8003808 <__NVIC_EnableIRQ+0x34>)
 80037ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f2:	095b      	lsrs	r3, r3, #5
 80037f4:	2001      	movs	r0, #1
 80037f6:	fa00 f202 	lsl.w	r2, r0, r2
 80037fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr
 8003808:	e000e100 	.word	0xe000e100

0800380c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	6039      	str	r1, [r7, #0]
 8003816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381c:	2b00      	cmp	r3, #0
 800381e:	db0a      	blt.n	8003836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	b2da      	uxtb	r2, r3
 8003824:	490c      	ldr	r1, [pc, #48]	; (8003858 <__NVIC_SetPriority+0x4c>)
 8003826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382a:	0112      	lsls	r2, r2, #4
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	440b      	add	r3, r1
 8003830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003834:	e00a      	b.n	800384c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	b2da      	uxtb	r2, r3
 800383a:	4908      	ldr	r1, [pc, #32]	; (800385c <__NVIC_SetPriority+0x50>)
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	3b04      	subs	r3, #4
 8003844:	0112      	lsls	r2, r2, #4
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	440b      	add	r3, r1
 800384a:	761a      	strb	r2, [r3, #24]
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	bc80      	pop	{r7}
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	e000e100 	.word	0xe000e100
 800385c:	e000ed00 	.word	0xe000ed00

08003860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003860:	b480      	push	{r7}
 8003862:	b089      	sub	sp, #36	; 0x24
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f1c3 0307 	rsb	r3, r3, #7
 800387a:	2b04      	cmp	r3, #4
 800387c:	bf28      	it	cs
 800387e:	2304      	movcs	r3, #4
 8003880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	3304      	adds	r3, #4
 8003886:	2b06      	cmp	r3, #6
 8003888:	d902      	bls.n	8003890 <NVIC_EncodePriority+0x30>
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	3b03      	subs	r3, #3
 800388e:	e000      	b.n	8003892 <NVIC_EncodePriority+0x32>
 8003890:	2300      	movs	r3, #0
 8003892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003894:	f04f 32ff 	mov.w	r2, #4294967295
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43da      	mvns	r2, r3
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	401a      	ands	r2, r3
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038a8:	f04f 31ff 	mov.w	r1, #4294967295
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	fa01 f303 	lsl.w	r3, r1, r3
 80038b2:	43d9      	mvns	r1, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b8:	4313      	orrs	r3, r2
         );
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3724      	adds	r7, #36	; 0x24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr

080038c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3b01      	subs	r3, #1
 80038d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038d4:	d301      	bcc.n	80038da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038d6:	2301      	movs	r3, #1
 80038d8:	e00f      	b.n	80038fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038da:	4a0a      	ldr	r2, [pc, #40]	; (8003904 <SysTick_Config+0x40>)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3b01      	subs	r3, #1
 80038e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038e2:	210f      	movs	r1, #15
 80038e4:	f04f 30ff 	mov.w	r0, #4294967295
 80038e8:	f7ff ff90 	bl	800380c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038ec:	4b05      	ldr	r3, [pc, #20]	; (8003904 <SysTick_Config+0x40>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038f2:	4b04      	ldr	r3, [pc, #16]	; (8003904 <SysTick_Config+0x40>)
 80038f4:	2207      	movs	r2, #7
 80038f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	e000e010 	.word	0xe000e010

08003908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7ff ff2d 	bl	8003770 <__NVIC_SetPriorityGrouping>
}
 8003916:	bf00      	nop
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800391e:	b580      	push	{r7, lr}
 8003920:	b086      	sub	sp, #24
 8003922:	af00      	add	r7, sp, #0
 8003924:	4603      	mov	r3, r0
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	607a      	str	r2, [r7, #4]
 800392a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800392c:	2300      	movs	r3, #0
 800392e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003930:	f7ff ff42 	bl	80037b8 <__NVIC_GetPriorityGrouping>
 8003934:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	68b9      	ldr	r1, [r7, #8]
 800393a:	6978      	ldr	r0, [r7, #20]
 800393c:	f7ff ff90 	bl	8003860 <NVIC_EncodePriority>
 8003940:	4602      	mov	r2, r0
 8003942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003946:	4611      	mov	r1, r2
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff ff5f 	bl	800380c <__NVIC_SetPriority>
}
 800394e:	bf00      	nop
 8003950:	3718      	adds	r7, #24
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b082      	sub	sp, #8
 800395a:	af00      	add	r7, sp, #0
 800395c:	4603      	mov	r3, r0
 800395e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff ff35 	bl	80037d4 <__NVIC_EnableIRQ>
}
 800396a:	bf00      	nop
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b082      	sub	sp, #8
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff ffa2 	bl	80038c4 <SysTick_Config>
 8003980:	4603      	mov	r3, r0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800398a:	b480      	push	{r7}
 800398c:	b085      	sub	sp, #20
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d008      	beq.n	80039b4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2204      	movs	r2, #4
 80039a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e020      	b.n	80039f6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 020e 	bic.w	r2, r2, #14
 80039c2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0201 	bic.w	r2, r2, #1
 80039d2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039dc:	2101      	movs	r1, #1
 80039de:	fa01 f202 	lsl.w	r2, r1, r2
 80039e2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr

08003a00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d005      	beq.n	8003a24 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2204      	movs	r2, #4
 8003a1c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	73fb      	strb	r3, [r7, #15]
 8003a22:	e051      	b.n	8003ac8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 020e 	bic.w	r2, r2, #14
 8003a32:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0201 	bic.w	r2, r2, #1
 8003a42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a22      	ldr	r2, [pc, #136]	; (8003ad4 <HAL_DMA_Abort_IT+0xd4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d029      	beq.n	8003aa2 <HAL_DMA_Abort_IT+0xa2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a21      	ldr	r2, [pc, #132]	; (8003ad8 <HAL_DMA_Abort_IT+0xd8>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d022      	beq.n	8003a9e <HAL_DMA_Abort_IT+0x9e>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a1f      	ldr	r2, [pc, #124]	; (8003adc <HAL_DMA_Abort_IT+0xdc>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d01a      	beq.n	8003a98 <HAL_DMA_Abort_IT+0x98>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a1e      	ldr	r2, [pc, #120]	; (8003ae0 <HAL_DMA_Abort_IT+0xe0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d012      	beq.n	8003a92 <HAL_DMA_Abort_IT+0x92>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a1c      	ldr	r2, [pc, #112]	; (8003ae4 <HAL_DMA_Abort_IT+0xe4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00a      	beq.n	8003a8c <HAL_DMA_Abort_IT+0x8c>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a1b      	ldr	r2, [pc, #108]	; (8003ae8 <HAL_DMA_Abort_IT+0xe8>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d102      	bne.n	8003a86 <HAL_DMA_Abort_IT+0x86>
 8003a80:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003a84:	e00e      	b.n	8003aa4 <HAL_DMA_Abort_IT+0xa4>
 8003a86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a8a:	e00b      	b.n	8003aa4 <HAL_DMA_Abort_IT+0xa4>
 8003a8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a90:	e008      	b.n	8003aa4 <HAL_DMA_Abort_IT+0xa4>
 8003a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a96:	e005      	b.n	8003aa4 <HAL_DMA_Abort_IT+0xa4>
 8003a98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a9c:	e002      	b.n	8003aa4 <HAL_DMA_Abort_IT+0xa4>
 8003a9e:	2310      	movs	r3, #16
 8003aa0:	e000      	b.n	8003aa4 <HAL_DMA_Abort_IT+0xa4>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	4a11      	ldr	r2, [pc, #68]	; (8003aec <HAL_DMA_Abort_IT+0xec>)
 8003aa6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	4798      	blx	r3
    } 
  }
  return status;
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40020008 	.word	0x40020008
 8003ad8:	4002001c 	.word	0x4002001c
 8003adc:	40020030 	.word	0x40020030
 8003ae0:	40020044 	.word	0x40020044
 8003ae4:	40020058 	.word	0x40020058
 8003ae8:	4002006c 	.word	0x4002006c
 8003aec:	40020000 	.word	0x40020000

08003af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b08b      	sub	sp, #44	; 0x2c
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003afa:	2300      	movs	r3, #0
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003afe:	2300      	movs	r3, #0
 8003b00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b02:	e169      	b.n	8003dd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003b04:	2201      	movs	r2, #1
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	69fa      	ldr	r2, [r7, #28]
 8003b14:	4013      	ands	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	f040 8158 	bne.w	8003dd2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	4a9a      	ldr	r2, [pc, #616]	; (8003d90 <HAL_GPIO_Init+0x2a0>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d05e      	beq.n	8003bea <HAL_GPIO_Init+0xfa>
 8003b2c:	4a98      	ldr	r2, [pc, #608]	; (8003d90 <HAL_GPIO_Init+0x2a0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d875      	bhi.n	8003c1e <HAL_GPIO_Init+0x12e>
 8003b32:	4a98      	ldr	r2, [pc, #608]	; (8003d94 <HAL_GPIO_Init+0x2a4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d058      	beq.n	8003bea <HAL_GPIO_Init+0xfa>
 8003b38:	4a96      	ldr	r2, [pc, #600]	; (8003d94 <HAL_GPIO_Init+0x2a4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d86f      	bhi.n	8003c1e <HAL_GPIO_Init+0x12e>
 8003b3e:	4a96      	ldr	r2, [pc, #600]	; (8003d98 <HAL_GPIO_Init+0x2a8>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d052      	beq.n	8003bea <HAL_GPIO_Init+0xfa>
 8003b44:	4a94      	ldr	r2, [pc, #592]	; (8003d98 <HAL_GPIO_Init+0x2a8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d869      	bhi.n	8003c1e <HAL_GPIO_Init+0x12e>
 8003b4a:	4a94      	ldr	r2, [pc, #592]	; (8003d9c <HAL_GPIO_Init+0x2ac>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d04c      	beq.n	8003bea <HAL_GPIO_Init+0xfa>
 8003b50:	4a92      	ldr	r2, [pc, #584]	; (8003d9c <HAL_GPIO_Init+0x2ac>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d863      	bhi.n	8003c1e <HAL_GPIO_Init+0x12e>
 8003b56:	4a92      	ldr	r2, [pc, #584]	; (8003da0 <HAL_GPIO_Init+0x2b0>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d046      	beq.n	8003bea <HAL_GPIO_Init+0xfa>
 8003b5c:	4a90      	ldr	r2, [pc, #576]	; (8003da0 <HAL_GPIO_Init+0x2b0>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d85d      	bhi.n	8003c1e <HAL_GPIO_Init+0x12e>
 8003b62:	2b12      	cmp	r3, #18
 8003b64:	d82a      	bhi.n	8003bbc <HAL_GPIO_Init+0xcc>
 8003b66:	2b12      	cmp	r3, #18
 8003b68:	d859      	bhi.n	8003c1e <HAL_GPIO_Init+0x12e>
 8003b6a:	a201      	add	r2, pc, #4	; (adr r2, 8003b70 <HAL_GPIO_Init+0x80>)
 8003b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b70:	08003beb 	.word	0x08003beb
 8003b74:	08003bc5 	.word	0x08003bc5
 8003b78:	08003bd7 	.word	0x08003bd7
 8003b7c:	08003c19 	.word	0x08003c19
 8003b80:	08003c1f 	.word	0x08003c1f
 8003b84:	08003c1f 	.word	0x08003c1f
 8003b88:	08003c1f 	.word	0x08003c1f
 8003b8c:	08003c1f 	.word	0x08003c1f
 8003b90:	08003c1f 	.word	0x08003c1f
 8003b94:	08003c1f 	.word	0x08003c1f
 8003b98:	08003c1f 	.word	0x08003c1f
 8003b9c:	08003c1f 	.word	0x08003c1f
 8003ba0:	08003c1f 	.word	0x08003c1f
 8003ba4:	08003c1f 	.word	0x08003c1f
 8003ba8:	08003c1f 	.word	0x08003c1f
 8003bac:	08003c1f 	.word	0x08003c1f
 8003bb0:	08003c1f 	.word	0x08003c1f
 8003bb4:	08003bcd 	.word	0x08003bcd
 8003bb8:	08003be1 	.word	0x08003be1
 8003bbc:	4a79      	ldr	r2, [pc, #484]	; (8003da4 <HAL_GPIO_Init+0x2b4>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d013      	beq.n	8003bea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003bc2:	e02c      	b.n	8003c1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	623b      	str	r3, [r7, #32]
          break;
 8003bca:	e029      	b.n	8003c20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	623b      	str	r3, [r7, #32]
          break;
 8003bd4:	e024      	b.n	8003c20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	3308      	adds	r3, #8
 8003bdc:	623b      	str	r3, [r7, #32]
          break;
 8003bde:	e01f      	b.n	8003c20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	330c      	adds	r3, #12
 8003be6:	623b      	str	r3, [r7, #32]
          break;
 8003be8:	e01a      	b.n	8003c20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d102      	bne.n	8003bf8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003bf2:	2304      	movs	r3, #4
 8003bf4:	623b      	str	r3, [r7, #32]
          break;
 8003bf6:	e013      	b.n	8003c20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d105      	bne.n	8003c0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c00:	2308      	movs	r3, #8
 8003c02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	69fa      	ldr	r2, [r7, #28]
 8003c08:	611a      	str	r2, [r3, #16]
          break;
 8003c0a:	e009      	b.n	8003c20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c0c:	2308      	movs	r3, #8
 8003c0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69fa      	ldr	r2, [r7, #28]
 8003c14:	615a      	str	r2, [r3, #20]
          break;
 8003c16:	e003      	b.n	8003c20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	623b      	str	r3, [r7, #32]
          break;
 8003c1c:	e000      	b.n	8003c20 <HAL_GPIO_Init+0x130>
          break;
 8003c1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	2bff      	cmp	r3, #255	; 0xff
 8003c24:	d801      	bhi.n	8003c2a <HAL_GPIO_Init+0x13a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	e001      	b.n	8003c2e <HAL_GPIO_Init+0x13e>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	2bff      	cmp	r3, #255	; 0xff
 8003c34:	d802      	bhi.n	8003c3c <HAL_GPIO_Init+0x14c>
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	e002      	b.n	8003c42 <HAL_GPIO_Init+0x152>
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3e:	3b08      	subs	r3, #8
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	210f      	movs	r1, #15
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c50:	43db      	mvns	r3, r3
 8003c52:	401a      	ands	r2, r3
 8003c54:	6a39      	ldr	r1, [r7, #32]
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 80b1 	beq.w	8003dd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003c70:	4b4d      	ldr	r3, [pc, #308]	; (8003da8 <HAL_GPIO_Init+0x2b8>)
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	4a4c      	ldr	r2, [pc, #304]	; (8003da8 <HAL_GPIO_Init+0x2b8>)
 8003c76:	f043 0301 	orr.w	r3, r3, #1
 8003c7a:	6193      	str	r3, [r2, #24]
 8003c7c:	4b4a      	ldr	r3, [pc, #296]	; (8003da8 <HAL_GPIO_Init+0x2b8>)
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003c88:	4a48      	ldr	r2, [pc, #288]	; (8003dac <HAL_GPIO_Init+0x2bc>)
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	089b      	lsrs	r3, r3, #2
 8003c8e:	3302      	adds	r3, #2
 8003c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	f003 0303 	and.w	r3, r3, #3
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	220f      	movs	r2, #15
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a40      	ldr	r2, [pc, #256]	; (8003db0 <HAL_GPIO_Init+0x2c0>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d013      	beq.n	8003cdc <HAL_GPIO_Init+0x1ec>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a3f      	ldr	r2, [pc, #252]	; (8003db4 <HAL_GPIO_Init+0x2c4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d00d      	beq.n	8003cd8 <HAL_GPIO_Init+0x1e8>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a3e      	ldr	r2, [pc, #248]	; (8003db8 <HAL_GPIO_Init+0x2c8>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d007      	beq.n	8003cd4 <HAL_GPIO_Init+0x1e4>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a3d      	ldr	r2, [pc, #244]	; (8003dbc <HAL_GPIO_Init+0x2cc>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d101      	bne.n	8003cd0 <HAL_GPIO_Init+0x1e0>
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e006      	b.n	8003cde <HAL_GPIO_Init+0x1ee>
 8003cd0:	2304      	movs	r3, #4
 8003cd2:	e004      	b.n	8003cde <HAL_GPIO_Init+0x1ee>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e002      	b.n	8003cde <HAL_GPIO_Init+0x1ee>
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e000      	b.n	8003cde <HAL_GPIO_Init+0x1ee>
 8003cdc:	2300      	movs	r3, #0
 8003cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce0:	f002 0203 	and.w	r2, r2, #3
 8003ce4:	0092      	lsls	r2, r2, #2
 8003ce6:	4093      	lsls	r3, r2
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003cee:	492f      	ldr	r1, [pc, #188]	; (8003dac <HAL_GPIO_Init+0x2bc>)
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	089b      	lsrs	r3, r3, #2
 8003cf4:	3302      	adds	r3, #2
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d006      	beq.n	8003d16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003d08:	4b2d      	ldr	r3, [pc, #180]	; (8003dc0 <HAL_GPIO_Init+0x2d0>)
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	492c      	ldr	r1, [pc, #176]	; (8003dc0 <HAL_GPIO_Init+0x2d0>)
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	608b      	str	r3, [r1, #8]
 8003d14:	e006      	b.n	8003d24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003d16:	4b2a      	ldr	r3, [pc, #168]	; (8003dc0 <HAL_GPIO_Init+0x2d0>)
 8003d18:	689a      	ldr	r2, [r3, #8]
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	4928      	ldr	r1, [pc, #160]	; (8003dc0 <HAL_GPIO_Init+0x2d0>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d006      	beq.n	8003d3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003d30:	4b23      	ldr	r3, [pc, #140]	; (8003dc0 <HAL_GPIO_Init+0x2d0>)
 8003d32:	68da      	ldr	r2, [r3, #12]
 8003d34:	4922      	ldr	r1, [pc, #136]	; (8003dc0 <HAL_GPIO_Init+0x2d0>)
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	60cb      	str	r3, [r1, #12]
 8003d3c:	e006      	b.n	8003d4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003d3e:	4b20      	ldr	r3, [pc, #128]	; (8003dc0 <HAL_GPIO_Init+0x2d0>)
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	43db      	mvns	r3, r3
 8003d46:	491e      	ldr	r1, [pc, #120]	; (8003dc0 <HAL_GPIO_Init+0x2d0>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d006      	beq.n	8003d66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003d58:	4b19      	ldr	r3, [pc, #100]	; (8003dc0 <HAL_GPIO_Init+0x2d0>)
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	4918      	ldr	r1, [pc, #96]	; (8003dc0 <HAL_GPIO_Init+0x2d0>)
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	604b      	str	r3, [r1, #4]
 8003d64:	e006      	b.n	8003d74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003d66:	4b16      	ldr	r3, [pc, #88]	; (8003dc0 <HAL_GPIO_Init+0x2d0>)
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	4914      	ldr	r1, [pc, #80]	; (8003dc0 <HAL_GPIO_Init+0x2d0>)
 8003d70:	4013      	ands	r3, r2
 8003d72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d021      	beq.n	8003dc4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003d80:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <HAL_GPIO_Init+0x2d0>)
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	490e      	ldr	r1, [pc, #56]	; (8003dc0 <HAL_GPIO_Init+0x2d0>)
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	600b      	str	r3, [r1, #0]
 8003d8c:	e021      	b.n	8003dd2 <HAL_GPIO_Init+0x2e2>
 8003d8e:	bf00      	nop
 8003d90:	10320000 	.word	0x10320000
 8003d94:	10310000 	.word	0x10310000
 8003d98:	10220000 	.word	0x10220000
 8003d9c:	10210000 	.word	0x10210000
 8003da0:	10120000 	.word	0x10120000
 8003da4:	10110000 	.word	0x10110000
 8003da8:	40021000 	.word	0x40021000
 8003dac:	40010000 	.word	0x40010000
 8003db0:	40010800 	.word	0x40010800
 8003db4:	40010c00 	.word	0x40010c00
 8003db8:	40011000 	.word	0x40011000
 8003dbc:	40011400 	.word	0x40011400
 8003dc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003dc4:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <HAL_GPIO_Init+0x304>)
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	4909      	ldr	r1, [pc, #36]	; (8003df4 <HAL_GPIO_Init+0x304>)
 8003dce:	4013      	ands	r3, r2
 8003dd0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	fa22 f303 	lsr.w	r3, r2, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f47f ae8e 	bne.w	8003b04 <HAL_GPIO_Init+0x14>
  }
}
 8003de8:	bf00      	nop
 8003dea:	bf00      	nop
 8003dec:	372c      	adds	r7, #44	; 0x2c
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bc80      	pop	{r7}
 8003df2:	4770      	bx	lr
 8003df4:	40010400 	.word	0x40010400

08003df8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	460b      	mov	r3, r1
 8003e02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	887b      	ldrh	r3, [r7, #2]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e10:	2301      	movs	r3, #1
 8003e12:	73fb      	strb	r3, [r7, #15]
 8003e14:	e001      	b.n	8003e1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e16:	2300      	movs	r3, #0
 8003e18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bc80      	pop	{r7}
 8003e24:	4770      	bx	lr

08003e26 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
 8003e2e:	460b      	mov	r3, r1
 8003e30:	807b      	strh	r3, [r7, #2]
 8003e32:	4613      	mov	r3, r2
 8003e34:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e36:	787b      	ldrb	r3, [r7, #1]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e3c:	887a      	ldrh	r2, [r7, #2]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003e42:	e003      	b.n	8003e4c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e44:	887b      	ldrh	r3, [r7, #2]
 8003e46:	041a      	lsls	r2, r3, #16
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	611a      	str	r2, [r3, #16]
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bc80      	pop	{r7}
 8003e54:	4770      	bx	lr
	...

08003e58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e272      	b.n	8004350 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 8087 	beq.w	8003f86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e78:	4b92      	ldr	r3, [pc, #584]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f003 030c 	and.w	r3, r3, #12
 8003e80:	2b04      	cmp	r3, #4
 8003e82:	d00c      	beq.n	8003e9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e84:	4b8f      	ldr	r3, [pc, #572]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f003 030c 	and.w	r3, r3, #12
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d112      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x5e>
 8003e90:	4b8c      	ldr	r3, [pc, #560]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e9c:	d10b      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e9e:	4b89      	ldr	r3, [pc, #548]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d06c      	beq.n	8003f84 <HAL_RCC_OscConfig+0x12c>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d168      	bne.n	8003f84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e24c      	b.n	8004350 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ebe:	d106      	bne.n	8003ece <HAL_RCC_OscConfig+0x76>
 8003ec0:	4b80      	ldr	r3, [pc, #512]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a7f      	ldr	r2, [pc, #508]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8003ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eca:	6013      	str	r3, [r2, #0]
 8003ecc:	e02e      	b.n	8003f2c <HAL_RCC_OscConfig+0xd4>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10c      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x98>
 8003ed6:	4b7b      	ldr	r3, [pc, #492]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a7a      	ldr	r2, [pc, #488]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8003edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	4b78      	ldr	r3, [pc, #480]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a77      	ldr	r2, [pc, #476]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8003ee8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eec:	6013      	str	r3, [r2, #0]
 8003eee:	e01d      	b.n	8003f2c <HAL_RCC_OscConfig+0xd4>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ef8:	d10c      	bne.n	8003f14 <HAL_RCC_OscConfig+0xbc>
 8003efa:	4b72      	ldr	r3, [pc, #456]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a71      	ldr	r2, [pc, #452]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8003f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f04:	6013      	str	r3, [r2, #0]
 8003f06:	4b6f      	ldr	r3, [pc, #444]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a6e      	ldr	r2, [pc, #440]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8003f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	e00b      	b.n	8003f2c <HAL_RCC_OscConfig+0xd4>
 8003f14:	4b6b      	ldr	r3, [pc, #428]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a6a      	ldr	r2, [pc, #424]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8003f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	4b68      	ldr	r3, [pc, #416]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a67      	ldr	r2, [pc, #412]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8003f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d013      	beq.n	8003f5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f34:	f7fe ffc2 	bl	8002ebc <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f3c:	f7fe ffbe 	bl	8002ebc <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b64      	cmp	r3, #100	; 0x64
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e200      	b.n	8004350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f4e:	4b5d      	ldr	r3, [pc, #372]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0f0      	beq.n	8003f3c <HAL_RCC_OscConfig+0xe4>
 8003f5a:	e014      	b.n	8003f86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5c:	f7fe ffae 	bl	8002ebc <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f64:	f7fe ffaa 	bl	8002ebc <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b64      	cmp	r3, #100	; 0x64
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e1ec      	b.n	8004350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f76:	4b53      	ldr	r3, [pc, #332]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1f0      	bne.n	8003f64 <HAL_RCC_OscConfig+0x10c>
 8003f82:	e000      	b.n	8003f86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d063      	beq.n	800405a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f92:	4b4c      	ldr	r3, [pc, #304]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f003 030c 	and.w	r3, r3, #12
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00b      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f9e:	4b49      	ldr	r3, [pc, #292]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f003 030c 	and.w	r3, r3, #12
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d11c      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x18c>
 8003faa:	4b46      	ldr	r3, [pc, #280]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d116      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fb6:	4b43      	ldr	r3, [pc, #268]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d005      	beq.n	8003fce <HAL_RCC_OscConfig+0x176>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d001      	beq.n	8003fce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e1c0      	b.n	8004350 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fce:	4b3d      	ldr	r3, [pc, #244]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	4939      	ldr	r1, [pc, #228]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fe2:	e03a      	b.n	800405a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d020      	beq.n	800402e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fec:	4b36      	ldr	r3, [pc, #216]	; (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003fee:	2201      	movs	r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff2:	f7fe ff63 	bl	8002ebc <HAL_GetTick>
 8003ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff8:	e008      	b.n	800400c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ffa:	f7fe ff5f 	bl	8002ebc <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d901      	bls.n	800400c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e1a1      	b.n	8004350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800400c:	4b2d      	ldr	r3, [pc, #180]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0f0      	beq.n	8003ffa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004018:	4b2a      	ldr	r3, [pc, #168]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	4927      	ldr	r1, [pc, #156]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8004028:	4313      	orrs	r3, r2
 800402a:	600b      	str	r3, [r1, #0]
 800402c:	e015      	b.n	800405a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800402e:	4b26      	ldr	r3, [pc, #152]	; (80040c8 <HAL_RCC_OscConfig+0x270>)
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004034:	f7fe ff42 	bl	8002ebc <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800403c:	f7fe ff3e 	bl	8002ebc <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e180      	b.n	8004350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800404e:	4b1d      	ldr	r3, [pc, #116]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f0      	bne.n	800403c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0308 	and.w	r3, r3, #8
 8004062:	2b00      	cmp	r3, #0
 8004064:	d03a      	beq.n	80040dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d019      	beq.n	80040a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800406e:	4b17      	ldr	r3, [pc, #92]	; (80040cc <HAL_RCC_OscConfig+0x274>)
 8004070:	2201      	movs	r2, #1
 8004072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004074:	f7fe ff22 	bl	8002ebc <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800407c:	f7fe ff1e 	bl	8002ebc <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e160      	b.n	8004350 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800408e:	4b0d      	ldr	r3, [pc, #52]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d0f0      	beq.n	800407c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800409a:	2001      	movs	r0, #1
 800409c:	f000 face 	bl	800463c <RCC_Delay>
 80040a0:	e01c      	b.n	80040dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040a2:	4b0a      	ldr	r3, [pc, #40]	; (80040cc <HAL_RCC_OscConfig+0x274>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040a8:	f7fe ff08 	bl	8002ebc <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040ae:	e00f      	b.n	80040d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040b0:	f7fe ff04 	bl	8002ebc <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d908      	bls.n	80040d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e146      	b.n	8004350 <HAL_RCC_OscConfig+0x4f8>
 80040c2:	bf00      	nop
 80040c4:	40021000 	.word	0x40021000
 80040c8:	42420000 	.word	0x42420000
 80040cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d0:	4b92      	ldr	r3, [pc, #584]	; (800431c <HAL_RCC_OscConfig+0x4c4>)
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1e9      	bne.n	80040b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 80a6 	beq.w	8004236 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ea:	2300      	movs	r3, #0
 80040ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ee:	4b8b      	ldr	r3, [pc, #556]	; (800431c <HAL_RCC_OscConfig+0x4c4>)
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10d      	bne.n	8004116 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040fa:	4b88      	ldr	r3, [pc, #544]	; (800431c <HAL_RCC_OscConfig+0x4c4>)
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	4a87      	ldr	r2, [pc, #540]	; (800431c <HAL_RCC_OscConfig+0x4c4>)
 8004100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004104:	61d3      	str	r3, [r2, #28]
 8004106:	4b85      	ldr	r3, [pc, #532]	; (800431c <HAL_RCC_OscConfig+0x4c4>)
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800410e:	60bb      	str	r3, [r7, #8]
 8004110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004112:	2301      	movs	r3, #1
 8004114:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004116:	4b82      	ldr	r3, [pc, #520]	; (8004320 <HAL_RCC_OscConfig+0x4c8>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411e:	2b00      	cmp	r3, #0
 8004120:	d118      	bne.n	8004154 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004122:	4b7f      	ldr	r3, [pc, #508]	; (8004320 <HAL_RCC_OscConfig+0x4c8>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a7e      	ldr	r2, [pc, #504]	; (8004320 <HAL_RCC_OscConfig+0x4c8>)
 8004128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800412c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800412e:	f7fe fec5 	bl	8002ebc <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004134:	e008      	b.n	8004148 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004136:	f7fe fec1 	bl	8002ebc <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b64      	cmp	r3, #100	; 0x64
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e103      	b.n	8004350 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004148:	4b75      	ldr	r3, [pc, #468]	; (8004320 <HAL_RCC_OscConfig+0x4c8>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0f0      	beq.n	8004136 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d106      	bne.n	800416a <HAL_RCC_OscConfig+0x312>
 800415c:	4b6f      	ldr	r3, [pc, #444]	; (800431c <HAL_RCC_OscConfig+0x4c4>)
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	4a6e      	ldr	r2, [pc, #440]	; (800431c <HAL_RCC_OscConfig+0x4c4>)
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	6213      	str	r3, [r2, #32]
 8004168:	e02d      	b.n	80041c6 <HAL_RCC_OscConfig+0x36e>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10c      	bne.n	800418c <HAL_RCC_OscConfig+0x334>
 8004172:	4b6a      	ldr	r3, [pc, #424]	; (800431c <HAL_RCC_OscConfig+0x4c4>)
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	4a69      	ldr	r2, [pc, #420]	; (800431c <HAL_RCC_OscConfig+0x4c4>)
 8004178:	f023 0301 	bic.w	r3, r3, #1
 800417c:	6213      	str	r3, [r2, #32]
 800417e:	4b67      	ldr	r3, [pc, #412]	; (800431c <HAL_RCC_OscConfig+0x4c4>)
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	4a66      	ldr	r2, [pc, #408]	; (800431c <HAL_RCC_OscConfig+0x4c4>)
 8004184:	f023 0304 	bic.w	r3, r3, #4
 8004188:	6213      	str	r3, [r2, #32]
 800418a:	e01c      	b.n	80041c6 <HAL_RCC_OscConfig+0x36e>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	2b05      	cmp	r3, #5
 8004192:	d10c      	bne.n	80041ae <HAL_RCC_OscConfig+0x356>
 8004194:	4b61      	ldr	r3, [pc, #388]	; (800431c <HAL_RCC_OscConfig+0x4c4>)
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	4a60      	ldr	r2, [pc, #384]	; (800431c <HAL_RCC_OscConfig+0x4c4>)
 800419a:	f043 0304 	orr.w	r3, r3, #4
 800419e:	6213      	str	r3, [r2, #32]
 80041a0:	4b5e      	ldr	r3, [pc, #376]	; (800431c <HAL_RCC_OscConfig+0x4c4>)
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	4a5d      	ldr	r2, [pc, #372]	; (800431c <HAL_RCC_OscConfig+0x4c4>)
 80041a6:	f043 0301 	orr.w	r3, r3, #1
 80041aa:	6213      	str	r3, [r2, #32]
 80041ac:	e00b      	b.n	80041c6 <HAL_RCC_OscConfig+0x36e>
 80041ae:	4b5b      	ldr	r3, [pc, #364]	; (800431c <HAL_RCC_OscConfig+0x4c4>)
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	4a5a      	ldr	r2, [pc, #360]	; (800431c <HAL_RCC_OscConfig+0x4c4>)
 80041b4:	f023 0301 	bic.w	r3, r3, #1
 80041b8:	6213      	str	r3, [r2, #32]
 80041ba:	4b58      	ldr	r3, [pc, #352]	; (800431c <HAL_RCC_OscConfig+0x4c4>)
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	4a57      	ldr	r2, [pc, #348]	; (800431c <HAL_RCC_OscConfig+0x4c4>)
 80041c0:	f023 0304 	bic.w	r3, r3, #4
 80041c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d015      	beq.n	80041fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ce:	f7fe fe75 	bl	8002ebc <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d4:	e00a      	b.n	80041ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d6:	f7fe fe71 	bl	8002ebc <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e0b1      	b.n	8004350 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ec:	4b4b      	ldr	r3, [pc, #300]	; (800431c <HAL_RCC_OscConfig+0x4c4>)
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0ee      	beq.n	80041d6 <HAL_RCC_OscConfig+0x37e>
 80041f8:	e014      	b.n	8004224 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041fa:	f7fe fe5f 	bl	8002ebc <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004200:	e00a      	b.n	8004218 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004202:	f7fe fe5b 	bl	8002ebc <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004210:	4293      	cmp	r3, r2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e09b      	b.n	8004350 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004218:	4b40      	ldr	r3, [pc, #256]	; (800431c <HAL_RCC_OscConfig+0x4c4>)
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1ee      	bne.n	8004202 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004224:	7dfb      	ldrb	r3, [r7, #23]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d105      	bne.n	8004236 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800422a:	4b3c      	ldr	r3, [pc, #240]	; (800431c <HAL_RCC_OscConfig+0x4c4>)
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	4a3b      	ldr	r2, [pc, #236]	; (800431c <HAL_RCC_OscConfig+0x4c4>)
 8004230:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004234:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 8087 	beq.w	800434e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004240:	4b36      	ldr	r3, [pc, #216]	; (800431c <HAL_RCC_OscConfig+0x4c4>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f003 030c 	and.w	r3, r3, #12
 8004248:	2b08      	cmp	r3, #8
 800424a:	d061      	beq.n	8004310 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	2b02      	cmp	r3, #2
 8004252:	d146      	bne.n	80042e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004254:	4b33      	ldr	r3, [pc, #204]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425a:	f7fe fe2f 	bl	8002ebc <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004260:	e008      	b.n	8004274 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004262:	f7fe fe2b 	bl	8002ebc <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e06d      	b.n	8004350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004274:	4b29      	ldr	r3, [pc, #164]	; (800431c <HAL_RCC_OscConfig+0x4c4>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1f0      	bne.n	8004262 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004288:	d108      	bne.n	800429c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800428a:	4b24      	ldr	r3, [pc, #144]	; (800431c <HAL_RCC_OscConfig+0x4c4>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	4921      	ldr	r1, [pc, #132]	; (800431c <HAL_RCC_OscConfig+0x4c4>)
 8004298:	4313      	orrs	r3, r2
 800429a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800429c:	4b1f      	ldr	r3, [pc, #124]	; (800431c <HAL_RCC_OscConfig+0x4c4>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a19      	ldr	r1, [r3, #32]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	430b      	orrs	r3, r1
 80042ae:	491b      	ldr	r1, [pc, #108]	; (800431c <HAL_RCC_OscConfig+0x4c4>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042b4:	4b1b      	ldr	r3, [pc, #108]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80042b6:	2201      	movs	r2, #1
 80042b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ba:	f7fe fdff 	bl	8002ebc <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042c0:	e008      	b.n	80042d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042c2:	f7fe fdfb 	bl	8002ebc <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e03d      	b.n	8004350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042d4:	4b11      	ldr	r3, [pc, #68]	; (800431c <HAL_RCC_OscConfig+0x4c4>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0f0      	beq.n	80042c2 <HAL_RCC_OscConfig+0x46a>
 80042e0:	e035      	b.n	800434e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e2:	4b10      	ldr	r3, [pc, #64]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e8:	f7fe fde8 	bl	8002ebc <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f0:	f7fe fde4 	bl	8002ebc <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e026      	b.n	8004350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004302:	4b06      	ldr	r3, [pc, #24]	; (800431c <HAL_RCC_OscConfig+0x4c4>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1f0      	bne.n	80042f0 <HAL_RCC_OscConfig+0x498>
 800430e:	e01e      	b.n	800434e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	69db      	ldr	r3, [r3, #28]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d107      	bne.n	8004328 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e019      	b.n	8004350 <HAL_RCC_OscConfig+0x4f8>
 800431c:	40021000 	.word	0x40021000
 8004320:	40007000 	.word	0x40007000
 8004324:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004328:	4b0b      	ldr	r3, [pc, #44]	; (8004358 <HAL_RCC_OscConfig+0x500>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	429a      	cmp	r2, r3
 800433a:	d106      	bne.n	800434a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004346:	429a      	cmp	r2, r3
 8004348:	d001      	beq.n	800434e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e000      	b.n	8004350 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3718      	adds	r7, #24
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40021000 	.word	0x40021000

0800435c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e0d0      	b.n	8004512 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004370:	4b6a      	ldr	r3, [pc, #424]	; (800451c <HAL_RCC_ClockConfig+0x1c0>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d910      	bls.n	80043a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437e:	4b67      	ldr	r3, [pc, #412]	; (800451c <HAL_RCC_ClockConfig+0x1c0>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f023 0207 	bic.w	r2, r3, #7
 8004386:	4965      	ldr	r1, [pc, #404]	; (800451c <HAL_RCC_ClockConfig+0x1c0>)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	4313      	orrs	r3, r2
 800438c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800438e:	4b63      	ldr	r3, [pc, #396]	; (800451c <HAL_RCC_ClockConfig+0x1c0>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0307 	and.w	r3, r3, #7
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	429a      	cmp	r2, r3
 800439a:	d001      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e0b8      	b.n	8004512 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d020      	beq.n	80043ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d005      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043b8:	4b59      	ldr	r3, [pc, #356]	; (8004520 <HAL_RCC_ClockConfig+0x1c4>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	4a58      	ldr	r2, [pc, #352]	; (8004520 <HAL_RCC_ClockConfig+0x1c4>)
 80043be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80043c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0308 	and.w	r3, r3, #8
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d005      	beq.n	80043dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043d0:	4b53      	ldr	r3, [pc, #332]	; (8004520 <HAL_RCC_ClockConfig+0x1c4>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	4a52      	ldr	r2, [pc, #328]	; (8004520 <HAL_RCC_ClockConfig+0x1c4>)
 80043d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80043da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043dc:	4b50      	ldr	r3, [pc, #320]	; (8004520 <HAL_RCC_ClockConfig+0x1c4>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	494d      	ldr	r1, [pc, #308]	; (8004520 <HAL_RCC_ClockConfig+0x1c4>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d040      	beq.n	800447c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d107      	bne.n	8004412 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004402:	4b47      	ldr	r3, [pc, #284]	; (8004520 <HAL_RCC_ClockConfig+0x1c4>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d115      	bne.n	800443a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e07f      	b.n	8004512 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2b02      	cmp	r3, #2
 8004418:	d107      	bne.n	800442a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800441a:	4b41      	ldr	r3, [pc, #260]	; (8004520 <HAL_RCC_ClockConfig+0x1c4>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d109      	bne.n	800443a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e073      	b.n	8004512 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800442a:	4b3d      	ldr	r3, [pc, #244]	; (8004520 <HAL_RCC_ClockConfig+0x1c4>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e06b      	b.n	8004512 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800443a:	4b39      	ldr	r3, [pc, #228]	; (8004520 <HAL_RCC_ClockConfig+0x1c4>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f023 0203 	bic.w	r2, r3, #3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	4936      	ldr	r1, [pc, #216]	; (8004520 <HAL_RCC_ClockConfig+0x1c4>)
 8004448:	4313      	orrs	r3, r2
 800444a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800444c:	f7fe fd36 	bl	8002ebc <HAL_GetTick>
 8004450:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004452:	e00a      	b.n	800446a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004454:	f7fe fd32 	bl	8002ebc <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004462:	4293      	cmp	r3, r2
 8004464:	d901      	bls.n	800446a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e053      	b.n	8004512 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800446a:	4b2d      	ldr	r3, [pc, #180]	; (8004520 <HAL_RCC_ClockConfig+0x1c4>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f003 020c 	and.w	r2, r3, #12
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	429a      	cmp	r2, r3
 800447a:	d1eb      	bne.n	8004454 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800447c:	4b27      	ldr	r3, [pc, #156]	; (800451c <HAL_RCC_ClockConfig+0x1c0>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d210      	bcs.n	80044ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800448a:	4b24      	ldr	r3, [pc, #144]	; (800451c <HAL_RCC_ClockConfig+0x1c0>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f023 0207 	bic.w	r2, r3, #7
 8004492:	4922      	ldr	r1, [pc, #136]	; (800451c <HAL_RCC_ClockConfig+0x1c0>)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	4313      	orrs	r3, r2
 8004498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800449a:	4b20      	ldr	r3, [pc, #128]	; (800451c <HAL_RCC_ClockConfig+0x1c0>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0307 	and.w	r3, r3, #7
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d001      	beq.n	80044ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e032      	b.n	8004512 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d008      	beq.n	80044ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044b8:	4b19      	ldr	r3, [pc, #100]	; (8004520 <HAL_RCC_ClockConfig+0x1c4>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	4916      	ldr	r1, [pc, #88]	; (8004520 <HAL_RCC_ClockConfig+0x1c4>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d009      	beq.n	80044ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80044d6:	4b12      	ldr	r3, [pc, #72]	; (8004520 <HAL_RCC_ClockConfig+0x1c4>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	490e      	ldr	r1, [pc, #56]	; (8004520 <HAL_RCC_ClockConfig+0x1c4>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044ea:	f000 f821 	bl	8004530 <HAL_RCC_GetSysClockFreq>
 80044ee:	4602      	mov	r2, r0
 80044f0:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <HAL_RCC_ClockConfig+0x1c4>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	091b      	lsrs	r3, r3, #4
 80044f6:	f003 030f 	and.w	r3, r3, #15
 80044fa:	490a      	ldr	r1, [pc, #40]	; (8004524 <HAL_RCC_ClockConfig+0x1c8>)
 80044fc:	5ccb      	ldrb	r3, [r1, r3]
 80044fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004502:	4a09      	ldr	r2, [pc, #36]	; (8004528 <HAL_RCC_ClockConfig+0x1cc>)
 8004504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004506:	4b09      	ldr	r3, [pc, #36]	; (800452c <HAL_RCC_ClockConfig+0x1d0>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4618      	mov	r0, r3
 800450c:	f7fe fc94 	bl	8002e38 <HAL_InitTick>

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	40022000 	.word	0x40022000
 8004520:	40021000 	.word	0x40021000
 8004524:	0800a9ac 	.word	0x0800a9ac
 8004528:	20000034 	.word	0x20000034
 800452c:	20000038 	.word	0x20000038

08004530 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004536:	2300      	movs	r3, #0
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	2300      	movs	r3, #0
 800453c:	60bb      	str	r3, [r7, #8]
 800453e:	2300      	movs	r3, #0
 8004540:	617b      	str	r3, [r7, #20]
 8004542:	2300      	movs	r3, #0
 8004544:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004546:	2300      	movs	r3, #0
 8004548:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800454a:	4b1e      	ldr	r3, [pc, #120]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f003 030c 	and.w	r3, r3, #12
 8004556:	2b04      	cmp	r3, #4
 8004558:	d002      	beq.n	8004560 <HAL_RCC_GetSysClockFreq+0x30>
 800455a:	2b08      	cmp	r3, #8
 800455c:	d003      	beq.n	8004566 <HAL_RCC_GetSysClockFreq+0x36>
 800455e:	e027      	b.n	80045b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004560:	4b19      	ldr	r3, [pc, #100]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004562:	613b      	str	r3, [r7, #16]
      break;
 8004564:	e027      	b.n	80045b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	0c9b      	lsrs	r3, r3, #18
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	4a17      	ldr	r2, [pc, #92]	; (80045cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004570:	5cd3      	ldrb	r3, [r2, r3]
 8004572:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d010      	beq.n	80045a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800457e:	4b11      	ldr	r3, [pc, #68]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	0c5b      	lsrs	r3, r3, #17
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	4a11      	ldr	r2, [pc, #68]	; (80045d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800458a:	5cd3      	ldrb	r3, [r2, r3]
 800458c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a0d      	ldr	r2, [pc, #52]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004592:	fb03 f202 	mul.w	r2, r3, r2
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	fbb2 f3f3 	udiv	r3, r2, r3
 800459c:	617b      	str	r3, [r7, #20]
 800459e:	e004      	b.n	80045aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a0c      	ldr	r2, [pc, #48]	; (80045d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80045a4:	fb02 f303 	mul.w	r3, r2, r3
 80045a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	613b      	str	r3, [r7, #16]
      break;
 80045ae:	e002      	b.n	80045b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045b0:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80045b2:	613b      	str	r3, [r7, #16]
      break;
 80045b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045b6:	693b      	ldr	r3, [r7, #16]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	371c      	adds	r7, #28
 80045bc:	46bd      	mov	sp, r7
 80045be:	bc80      	pop	{r7}
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40021000 	.word	0x40021000
 80045c8:	007a1200 	.word	0x007a1200
 80045cc:	0800a9c4 	.word	0x0800a9c4
 80045d0:	0800a9d4 	.word	0x0800a9d4
 80045d4:	003d0900 	.word	0x003d0900

080045d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045dc:	4b02      	ldr	r3, [pc, #8]	; (80045e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80045de:	681b      	ldr	r3, [r3, #0]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bc80      	pop	{r7}
 80045e6:	4770      	bx	lr
 80045e8:	20000034 	.word	0x20000034

080045ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045f0:	f7ff fff2 	bl	80045d8 <HAL_RCC_GetHCLKFreq>
 80045f4:	4602      	mov	r2, r0
 80045f6:	4b05      	ldr	r3, [pc, #20]	; (800460c <HAL_RCC_GetPCLK1Freq+0x20>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	0a1b      	lsrs	r3, r3, #8
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	4903      	ldr	r1, [pc, #12]	; (8004610 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004602:	5ccb      	ldrb	r3, [r1, r3]
 8004604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004608:	4618      	mov	r0, r3
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40021000 	.word	0x40021000
 8004610:	0800a9bc 	.word	0x0800a9bc

08004614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004618:	f7ff ffde 	bl	80045d8 <HAL_RCC_GetHCLKFreq>
 800461c:	4602      	mov	r2, r0
 800461e:	4b05      	ldr	r3, [pc, #20]	; (8004634 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	0adb      	lsrs	r3, r3, #11
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	4903      	ldr	r1, [pc, #12]	; (8004638 <HAL_RCC_GetPCLK2Freq+0x24>)
 800462a:	5ccb      	ldrb	r3, [r1, r3]
 800462c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004630:	4618      	mov	r0, r3
 8004632:	bd80      	pop	{r7, pc}
 8004634:	40021000 	.word	0x40021000
 8004638:	0800a9bc 	.word	0x0800a9bc

0800463c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004644:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <RCC_Delay+0x34>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a0a      	ldr	r2, [pc, #40]	; (8004674 <RCC_Delay+0x38>)
 800464a:	fba2 2303 	umull	r2, r3, r2, r3
 800464e:	0a5b      	lsrs	r3, r3, #9
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	fb02 f303 	mul.w	r3, r2, r3
 8004656:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004658:	bf00      	nop
  }
  while (Delay --);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	1e5a      	subs	r2, r3, #1
 800465e:	60fa      	str	r2, [r7, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1f9      	bne.n	8004658 <RCC_Delay+0x1c>
}
 8004664:	bf00      	nop
 8004666:	bf00      	nop
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	bc80      	pop	{r7}
 800466e:	4770      	bx	lr
 8004670:	20000034 	.word	0x20000034
 8004674:	10624dd3 	.word	0x10624dd3

08004678 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	613b      	str	r3, [r7, #16]
 8004684:	2300      	movs	r3, #0
 8004686:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	d07d      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004694:	2300      	movs	r3, #0
 8004696:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004698:	4b4f      	ldr	r3, [pc, #316]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10d      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046a4:	4b4c      	ldr	r3, [pc, #304]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	4a4b      	ldr	r2, [pc, #300]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ae:	61d3      	str	r3, [r2, #28]
 80046b0:	4b49      	ldr	r3, [pc, #292]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b8:	60bb      	str	r3, [r7, #8]
 80046ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046bc:	2301      	movs	r3, #1
 80046be:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c0:	4b46      	ldr	r3, [pc, #280]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d118      	bne.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046cc:	4b43      	ldr	r3, [pc, #268]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a42      	ldr	r2, [pc, #264]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046d8:	f7fe fbf0 	bl	8002ebc <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046de:	e008      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e0:	f7fe fbec 	bl	8002ebc <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b64      	cmp	r3, #100	; 0x64
 80046ec:	d901      	bls.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e06d      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f2:	4b3a      	ldr	r3, [pc, #232]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0f0      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046fe:	4b36      	ldr	r3, [pc, #216]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004706:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d02e      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	429a      	cmp	r2, r3
 800471a:	d027      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800471c:	4b2e      	ldr	r3, [pc, #184]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004724:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004726:	4b2e      	ldr	r3, [pc, #184]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004728:	2201      	movs	r2, #1
 800472a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800472c:	4b2c      	ldr	r3, [pc, #176]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004732:	4a29      	ldr	r2, [pc, #164]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d014      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004742:	f7fe fbbb 	bl	8002ebc <HAL_GetTick>
 8004746:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004748:	e00a      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800474a:	f7fe fbb7 	bl	8002ebc <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	f241 3288 	movw	r2, #5000	; 0x1388
 8004758:	4293      	cmp	r3, r2
 800475a:	d901      	bls.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e036      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004760:	4b1d      	ldr	r3, [pc, #116]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0ee      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800476c:	4b1a      	ldr	r3, [pc, #104]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	4917      	ldr	r1, [pc, #92]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800477a:	4313      	orrs	r3, r2
 800477c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800477e:	7dfb      	ldrb	r3, [r7, #23]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d105      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004784:	4b14      	ldr	r3, [pc, #80]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004786:	69db      	ldr	r3, [r3, #28]
 8004788:	4a13      	ldr	r2, [pc, #76]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800478a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800478e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d008      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800479c:	4b0e      	ldr	r3, [pc, #56]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	490b      	ldr	r1, [pc, #44]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0310 	and.w	r3, r3, #16
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d008      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047ba:	4b07      	ldr	r3, [pc, #28]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	4904      	ldr	r1, [pc, #16]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3718      	adds	r7, #24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	40021000 	.word	0x40021000
 80047dc:	40007000 	.word	0x40007000
 80047e0:	42420440 	.word	0x42420440

080047e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b088      	sub	sp, #32
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	617b      	str	r3, [r7, #20]
 80047f0:	2300      	movs	r3, #0
 80047f2:	61fb      	str	r3, [r7, #28]
 80047f4:	2300      	movs	r3, #0
 80047f6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	60fb      	str	r3, [r7, #12]
 80047fc:	2300      	movs	r3, #0
 80047fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b10      	cmp	r3, #16
 8004804:	d00a      	beq.n	800481c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b10      	cmp	r3, #16
 800480a:	f200 808a 	bhi.w	8004922 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d045      	beq.n	80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b02      	cmp	r3, #2
 8004818:	d075      	beq.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800481a:	e082      	b.n	8004922 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800481c:	4b46      	ldr	r3, [pc, #280]	; (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004822:	4b45      	ldr	r3, [pc, #276]	; (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d07b      	beq.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	0c9b      	lsrs	r3, r3, #18
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	4a41      	ldr	r2, [pc, #260]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004838:	5cd3      	ldrb	r3, [r2, r3]
 800483a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d015      	beq.n	8004872 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004846:	4b3c      	ldr	r3, [pc, #240]	; (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	0c5b      	lsrs	r3, r3, #17
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	4a3b      	ldr	r2, [pc, #236]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004852:	5cd3      	ldrb	r3, [r2, r3]
 8004854:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00d      	beq.n	800487c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004860:	4a38      	ldr	r2, [pc, #224]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	fbb2 f2f3 	udiv	r2, r2, r3
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	fb02 f303 	mul.w	r3, r2, r3
 800486e:	61fb      	str	r3, [r7, #28]
 8004870:	e004      	b.n	800487c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	4a34      	ldr	r2, [pc, #208]	; (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004876:	fb02 f303 	mul.w	r3, r2, r3
 800487a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800487c:	4b2e      	ldr	r3, [pc, #184]	; (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004884:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004888:	d102      	bne.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	61bb      	str	r3, [r7, #24]
      break;
 800488e:	e04a      	b.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	4a2d      	ldr	r2, [pc, #180]	; (800494c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004896:	fba2 2303 	umull	r2, r3, r2, r3
 800489a:	085b      	lsrs	r3, r3, #1
 800489c:	61bb      	str	r3, [r7, #24]
      break;
 800489e:	e042      	b.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80048a0:	4b25      	ldr	r3, [pc, #148]	; (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048b0:	d108      	bne.n	80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80048bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048c0:	61bb      	str	r3, [r7, #24]
 80048c2:	e01f      	b.n	8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048ce:	d109      	bne.n	80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80048d0:	4b19      	ldr	r3, [pc, #100]	; (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80048dc:	f649 4340 	movw	r3, #40000	; 0x9c40
 80048e0:	61bb      	str	r3, [r7, #24]
 80048e2:	e00f      	b.n	8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ee:	d11c      	bne.n	800492a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80048f0:	4b11      	ldr	r3, [pc, #68]	; (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d016      	beq.n	800492a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80048fc:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004900:	61bb      	str	r3, [r7, #24]
      break;
 8004902:	e012      	b.n	800492a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004904:	e011      	b.n	800492a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004906:	f7ff fe85 	bl	8004614 <HAL_RCC_GetPCLK2Freq>
 800490a:	4602      	mov	r2, r0
 800490c:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	0b9b      	lsrs	r3, r3, #14
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	3301      	adds	r3, #1
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	fbb2 f3f3 	udiv	r3, r2, r3
 800491e:	61bb      	str	r3, [r7, #24]
      break;
 8004920:	e004      	b.n	800492c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004922:	bf00      	nop
 8004924:	e002      	b.n	800492c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004926:	bf00      	nop
 8004928:	e000      	b.n	800492c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800492a:	bf00      	nop
    }
  }
  return (frequency);
 800492c:	69bb      	ldr	r3, [r7, #24]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3720      	adds	r7, #32
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40021000 	.word	0x40021000
 800493c:	0800a9d8 	.word	0x0800a9d8
 8004940:	0800a9e8 	.word	0x0800a9e8
 8004944:	007a1200 	.word	0x007a1200
 8004948:	003d0900 	.word	0x003d0900
 800494c:	aaaaaaab 	.word	0xaaaaaaab

08004950 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e041      	b.n	80049e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d106      	bne.n	800497c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fe f8c4 	bl	8002b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3304      	adds	r3, #4
 800498c:	4619      	mov	r1, r3
 800498e:	4610      	mov	r0, r2
 8004990:	f000 fbb0 	bl	80050f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
	...

080049f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d001      	beq.n	8004a08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e032      	b.n	8004a6e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a18      	ldr	r2, [pc, #96]	; (8004a78 <HAL_TIM_Base_Start+0x88>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d00e      	beq.n	8004a38 <HAL_TIM_Base_Start+0x48>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a22:	d009      	beq.n	8004a38 <HAL_TIM_Base_Start+0x48>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a14      	ldr	r2, [pc, #80]	; (8004a7c <HAL_TIM_Base_Start+0x8c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d004      	beq.n	8004a38 <HAL_TIM_Base_Start+0x48>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a13      	ldr	r2, [pc, #76]	; (8004a80 <HAL_TIM_Base_Start+0x90>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d111      	bne.n	8004a5c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 0307 	and.w	r3, r3, #7
 8004a42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2b06      	cmp	r3, #6
 8004a48:	d010      	beq.n	8004a6c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f042 0201 	orr.w	r2, r2, #1
 8004a58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a5a:	e007      	b.n	8004a6c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0201 	orr.w	r2, r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr
 8004a78:	40012c00 	.word	0x40012c00
 8004a7c:	40000400 	.word	0x40000400
 8004a80:	40000800 	.word	0x40000800

08004a84 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e041      	b.n	8004b1a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f839 	bl	8004b22 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	f000 fb16 	bl	80050f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bc80      	pop	{r7}
 8004b32:	4770      	bx	lr

08004b34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e041      	b.n	8004bca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d106      	bne.n	8004b60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f839 	bl	8004bd2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3304      	adds	r3, #4
 8004b70:	4619      	mov	r1, r3
 8004b72:	4610      	mov	r0, r2
 8004b74:	f000 fabe 	bl	80050f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004bda:	bf00      	nop
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr

08004be4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d109      	bne.n	8004c08 <HAL_TIM_PWM_Start+0x24>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	bf14      	ite	ne
 8004c00:	2301      	movne	r3, #1
 8004c02:	2300      	moveq	r3, #0
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	e022      	b.n	8004c4e <HAL_TIM_PWM_Start+0x6a>
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d109      	bne.n	8004c22 <HAL_TIM_PWM_Start+0x3e>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	bf14      	ite	ne
 8004c1a:	2301      	movne	r3, #1
 8004c1c:	2300      	moveq	r3, #0
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	e015      	b.n	8004c4e <HAL_TIM_PWM_Start+0x6a>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d109      	bne.n	8004c3c <HAL_TIM_PWM_Start+0x58>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	bf14      	ite	ne
 8004c34:	2301      	movne	r3, #1
 8004c36:	2300      	moveq	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	e008      	b.n	8004c4e <HAL_TIM_PWM_Start+0x6a>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	bf14      	ite	ne
 8004c48:	2301      	movne	r3, #1
 8004c4a:	2300      	moveq	r3, #0
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e05e      	b.n	8004d14 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d104      	bne.n	8004c66 <HAL_TIM_PWM_Start+0x82>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c64:	e013      	b.n	8004c8e <HAL_TIM_PWM_Start+0xaa>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	d104      	bne.n	8004c76 <HAL_TIM_PWM_Start+0x92>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c74:	e00b      	b.n	8004c8e <HAL_TIM_PWM_Start+0xaa>
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d104      	bne.n	8004c86 <HAL_TIM_PWM_Start+0xa2>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c84:	e003      	b.n	8004c8e <HAL_TIM_PWM_Start+0xaa>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2202      	movs	r2, #2
 8004c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2201      	movs	r2, #1
 8004c94:	6839      	ldr	r1, [r7, #0]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 fcac 	bl	80055f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a1e      	ldr	r2, [pc, #120]	; (8004d1c <HAL_TIM_PWM_Start+0x138>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d107      	bne.n	8004cb6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a18      	ldr	r2, [pc, #96]	; (8004d1c <HAL_TIM_PWM_Start+0x138>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00e      	beq.n	8004cde <HAL_TIM_PWM_Start+0xfa>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc8:	d009      	beq.n	8004cde <HAL_TIM_PWM_Start+0xfa>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a14      	ldr	r2, [pc, #80]	; (8004d20 <HAL_TIM_PWM_Start+0x13c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d004      	beq.n	8004cde <HAL_TIM_PWM_Start+0xfa>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a12      	ldr	r2, [pc, #72]	; (8004d24 <HAL_TIM_PWM_Start+0x140>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d111      	bne.n	8004d02 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2b06      	cmp	r3, #6
 8004cee:	d010      	beq.n	8004d12 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0201 	orr.w	r2, r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d00:	e007      	b.n	8004d12 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f042 0201 	orr.w	r2, r2, #1
 8004d10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	40012c00 	.word	0x40012c00
 8004d20:	40000400 	.word	0x40000400
 8004d24:	40000800 	.word	0x40000800

08004d28 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d34:	2300      	movs	r3, #0
 8004d36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d101      	bne.n	8004d46 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004d42:	2302      	movs	r3, #2
 8004d44:	e048      	b.n	8004dd8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b0c      	cmp	r3, #12
 8004d52:	d839      	bhi.n	8004dc8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004d54:	a201      	add	r2, pc, #4	; (adr r2, 8004d5c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5a:	bf00      	nop
 8004d5c:	08004d91 	.word	0x08004d91
 8004d60:	08004dc9 	.word	0x08004dc9
 8004d64:	08004dc9 	.word	0x08004dc9
 8004d68:	08004dc9 	.word	0x08004dc9
 8004d6c:	08004d9f 	.word	0x08004d9f
 8004d70:	08004dc9 	.word	0x08004dc9
 8004d74:	08004dc9 	.word	0x08004dc9
 8004d78:	08004dc9 	.word	0x08004dc9
 8004d7c:	08004dad 	.word	0x08004dad
 8004d80:	08004dc9 	.word	0x08004dc9
 8004d84:	08004dc9 	.word	0x08004dc9
 8004d88:	08004dc9 	.word	0x08004dc9
 8004d8c:	08004dbb 	.word	0x08004dbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68b9      	ldr	r1, [r7, #8]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 fa0e 	bl	80051b8 <TIM_OC1_SetConfig>
      break;
 8004d9c:	e017      	b.n	8004dce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68b9      	ldr	r1, [r7, #8]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 fa6d 	bl	8005284 <TIM_OC2_SetConfig>
      break;
 8004daa:	e010      	b.n	8004dce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68b9      	ldr	r1, [r7, #8]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 fad0 	bl	8005358 <TIM_OC3_SetConfig>
      break;
 8004db8:	e009      	b.n	8004dce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68b9      	ldr	r1, [r7, #8]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 fb33 	bl	800542c <TIM_OC4_SetConfig>
      break;
 8004dc6:	e002      	b.n	8004dce <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	75fb      	strb	r3, [r7, #23]
      break;
 8004dcc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3718      	adds	r7, #24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dec:	2300      	movs	r3, #0
 8004dee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d101      	bne.n	8004dfe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	e0ae      	b.n	8004f5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b0c      	cmp	r3, #12
 8004e0a:	f200 809f 	bhi.w	8004f4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e0e:	a201      	add	r2, pc, #4	; (adr r2, 8004e14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e14:	08004e49 	.word	0x08004e49
 8004e18:	08004f4d 	.word	0x08004f4d
 8004e1c:	08004f4d 	.word	0x08004f4d
 8004e20:	08004f4d 	.word	0x08004f4d
 8004e24:	08004e89 	.word	0x08004e89
 8004e28:	08004f4d 	.word	0x08004f4d
 8004e2c:	08004f4d 	.word	0x08004f4d
 8004e30:	08004f4d 	.word	0x08004f4d
 8004e34:	08004ecb 	.word	0x08004ecb
 8004e38:	08004f4d 	.word	0x08004f4d
 8004e3c:	08004f4d 	.word	0x08004f4d
 8004e40:	08004f4d 	.word	0x08004f4d
 8004e44:	08004f0b 	.word	0x08004f0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68b9      	ldr	r1, [r7, #8]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 f9b2 	bl	80051b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699a      	ldr	r2, [r3, #24]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f042 0208 	orr.w	r2, r2, #8
 8004e62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	699a      	ldr	r2, [r3, #24]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0204 	bic.w	r2, r2, #4
 8004e72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6999      	ldr	r1, [r3, #24]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	691a      	ldr	r2, [r3, #16]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	619a      	str	r2, [r3, #24]
      break;
 8004e86:	e064      	b.n	8004f52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68b9      	ldr	r1, [r7, #8]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 f9f8 	bl	8005284 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699a      	ldr	r2, [r3, #24]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ea2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	699a      	ldr	r2, [r3, #24]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6999      	ldr	r1, [r3, #24]
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	021a      	lsls	r2, r3, #8
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	619a      	str	r2, [r3, #24]
      break;
 8004ec8:	e043      	b.n	8004f52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68b9      	ldr	r1, [r7, #8]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 fa41 	bl	8005358 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	69da      	ldr	r2, [r3, #28]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f042 0208 	orr.w	r2, r2, #8
 8004ee4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	69da      	ldr	r2, [r3, #28]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0204 	bic.w	r2, r2, #4
 8004ef4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69d9      	ldr	r1, [r3, #28]
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	691a      	ldr	r2, [r3, #16]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	61da      	str	r2, [r3, #28]
      break;
 8004f08:	e023      	b.n	8004f52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68b9      	ldr	r1, [r7, #8]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 fa8b 	bl	800542c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	69da      	ldr	r2, [r3, #28]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69da      	ldr	r2, [r3, #28]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	69d9      	ldr	r1, [r3, #28]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	021a      	lsls	r2, r3, #8
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	61da      	str	r2, [r3, #28]
      break;
 8004f4a:	e002      	b.n	8004f52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d101      	bne.n	8004f80 <HAL_TIM_ConfigClockSource+0x1c>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	e0b4      	b.n	80050ea <HAL_TIM_ConfigClockSource+0x186>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fa6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fb8:	d03e      	beq.n	8005038 <HAL_TIM_ConfigClockSource+0xd4>
 8004fba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fbe:	f200 8087 	bhi.w	80050d0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fc6:	f000 8086 	beq.w	80050d6 <HAL_TIM_ConfigClockSource+0x172>
 8004fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fce:	d87f      	bhi.n	80050d0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fd0:	2b70      	cmp	r3, #112	; 0x70
 8004fd2:	d01a      	beq.n	800500a <HAL_TIM_ConfigClockSource+0xa6>
 8004fd4:	2b70      	cmp	r3, #112	; 0x70
 8004fd6:	d87b      	bhi.n	80050d0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fd8:	2b60      	cmp	r3, #96	; 0x60
 8004fda:	d050      	beq.n	800507e <HAL_TIM_ConfigClockSource+0x11a>
 8004fdc:	2b60      	cmp	r3, #96	; 0x60
 8004fde:	d877      	bhi.n	80050d0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe0:	2b50      	cmp	r3, #80	; 0x50
 8004fe2:	d03c      	beq.n	800505e <HAL_TIM_ConfigClockSource+0xfa>
 8004fe4:	2b50      	cmp	r3, #80	; 0x50
 8004fe6:	d873      	bhi.n	80050d0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe8:	2b40      	cmp	r3, #64	; 0x40
 8004fea:	d058      	beq.n	800509e <HAL_TIM_ConfigClockSource+0x13a>
 8004fec:	2b40      	cmp	r3, #64	; 0x40
 8004fee:	d86f      	bhi.n	80050d0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ff0:	2b30      	cmp	r3, #48	; 0x30
 8004ff2:	d064      	beq.n	80050be <HAL_TIM_ConfigClockSource+0x15a>
 8004ff4:	2b30      	cmp	r3, #48	; 0x30
 8004ff6:	d86b      	bhi.n	80050d0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ff8:	2b20      	cmp	r3, #32
 8004ffa:	d060      	beq.n	80050be <HAL_TIM_ConfigClockSource+0x15a>
 8004ffc:	2b20      	cmp	r3, #32
 8004ffe:	d867      	bhi.n	80050d0 <HAL_TIM_ConfigClockSource+0x16c>
 8005000:	2b00      	cmp	r3, #0
 8005002:	d05c      	beq.n	80050be <HAL_TIM_ConfigClockSource+0x15a>
 8005004:	2b10      	cmp	r3, #16
 8005006:	d05a      	beq.n	80050be <HAL_TIM_ConfigClockSource+0x15a>
 8005008:	e062      	b.n	80050d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6818      	ldr	r0, [r3, #0]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	6899      	ldr	r1, [r3, #8]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	f000 facc 	bl	80055b6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800502c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	609a      	str	r2, [r3, #8]
      break;
 8005036:	e04f      	b.n	80050d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6818      	ldr	r0, [r3, #0]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	6899      	ldr	r1, [r3, #8]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f000 fab5 	bl	80055b6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689a      	ldr	r2, [r3, #8]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800505a:	609a      	str	r2, [r3, #8]
      break;
 800505c:	e03c      	b.n	80050d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6818      	ldr	r0, [r3, #0]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	6859      	ldr	r1, [r3, #4]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	461a      	mov	r2, r3
 800506c:	f000 fa2c 	bl	80054c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2150      	movs	r1, #80	; 0x50
 8005076:	4618      	mov	r0, r3
 8005078:	f000 fa83 	bl	8005582 <TIM_ITRx_SetConfig>
      break;
 800507c:	e02c      	b.n	80050d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6818      	ldr	r0, [r3, #0]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	6859      	ldr	r1, [r3, #4]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	461a      	mov	r2, r3
 800508c:	f000 fa4a 	bl	8005524 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2160      	movs	r1, #96	; 0x60
 8005096:	4618      	mov	r0, r3
 8005098:	f000 fa73 	bl	8005582 <TIM_ITRx_SetConfig>
      break;
 800509c:	e01c      	b.n	80050d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6818      	ldr	r0, [r3, #0]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	6859      	ldr	r1, [r3, #4]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	461a      	mov	r2, r3
 80050ac:	f000 fa0c 	bl	80054c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2140      	movs	r1, #64	; 0x40
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 fa63 	bl	8005582 <TIM_ITRx_SetConfig>
      break;
 80050bc:	e00c      	b.n	80050d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4619      	mov	r1, r3
 80050c8:	4610      	mov	r0, r2
 80050ca:	f000 fa5a 	bl	8005582 <TIM_ITRx_SetConfig>
      break;
 80050ce:	e003      	b.n	80050d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	73fb      	strb	r3, [r7, #15]
      break;
 80050d4:	e000      	b.n	80050d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
	...

080050f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a29      	ldr	r2, [pc, #164]	; (80051ac <TIM_Base_SetConfig+0xb8>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d00b      	beq.n	8005124 <TIM_Base_SetConfig+0x30>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005112:	d007      	beq.n	8005124 <TIM_Base_SetConfig+0x30>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a26      	ldr	r2, [pc, #152]	; (80051b0 <TIM_Base_SetConfig+0xbc>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d003      	beq.n	8005124 <TIM_Base_SetConfig+0x30>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a25      	ldr	r2, [pc, #148]	; (80051b4 <TIM_Base_SetConfig+0xc0>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d108      	bne.n	8005136 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a1c      	ldr	r2, [pc, #112]	; (80051ac <TIM_Base_SetConfig+0xb8>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d00b      	beq.n	8005156 <TIM_Base_SetConfig+0x62>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005144:	d007      	beq.n	8005156 <TIM_Base_SetConfig+0x62>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a19      	ldr	r2, [pc, #100]	; (80051b0 <TIM_Base_SetConfig+0xbc>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d003      	beq.n	8005156 <TIM_Base_SetConfig+0x62>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a18      	ldr	r2, [pc, #96]	; (80051b4 <TIM_Base_SetConfig+0xc0>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d108      	bne.n	8005168 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800515c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a07      	ldr	r2, [pc, #28]	; (80051ac <TIM_Base_SetConfig+0xb8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d103      	bne.n	800519c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	691a      	ldr	r2, [r3, #16]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	615a      	str	r2, [r3, #20]
}
 80051a2:	bf00      	nop
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bc80      	pop	{r7}
 80051aa:	4770      	bx	lr
 80051ac:	40012c00 	.word	0x40012c00
 80051b0:	40000400 	.word	0x40000400
 80051b4:	40000800 	.word	0x40000800

080051b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b087      	sub	sp, #28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	f023 0201 	bic.w	r2, r3, #1
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f023 0303 	bic.w	r3, r3, #3
 80051ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f023 0302 	bic.w	r3, r3, #2
 8005200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	4313      	orrs	r3, r2
 800520a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a1c      	ldr	r2, [pc, #112]	; (8005280 <TIM_OC1_SetConfig+0xc8>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d10c      	bne.n	800522e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f023 0308 	bic.w	r3, r3, #8
 800521a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	4313      	orrs	r3, r2
 8005224:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f023 0304 	bic.w	r3, r3, #4
 800522c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a13      	ldr	r2, [pc, #76]	; (8005280 <TIM_OC1_SetConfig+0xc8>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d111      	bne.n	800525a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800523c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	4313      	orrs	r3, r2
 800524e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	4313      	orrs	r3, r2
 8005258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	621a      	str	r2, [r3, #32]
}
 8005274:	bf00      	nop
 8005276:	371c      	adds	r7, #28
 8005278:	46bd      	mov	sp, r7
 800527a:	bc80      	pop	{r7}
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	40012c00 	.word	0x40012c00

08005284 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005284:	b480      	push	{r7}
 8005286:	b087      	sub	sp, #28
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	f023 0210 	bic.w	r2, r3, #16
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	021b      	lsls	r3, r3, #8
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f023 0320 	bic.w	r3, r3, #32
 80052ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	011b      	lsls	r3, r3, #4
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	4313      	orrs	r3, r2
 80052da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a1d      	ldr	r2, [pc, #116]	; (8005354 <TIM_OC2_SetConfig+0xd0>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d10d      	bne.n	8005300 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	011b      	lsls	r3, r3, #4
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a14      	ldr	r2, [pc, #80]	; (8005354 <TIM_OC2_SetConfig+0xd0>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d113      	bne.n	8005330 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800530e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005316:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	4313      	orrs	r3, r2
 8005322:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	4313      	orrs	r3, r2
 800532e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	621a      	str	r2, [r3, #32]
}
 800534a:	bf00      	nop
 800534c:	371c      	adds	r7, #28
 800534e:	46bd      	mov	sp, r7
 8005350:	bc80      	pop	{r7}
 8005352:	4770      	bx	lr
 8005354:	40012c00 	.word	0x40012c00

08005358 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005358:	b480      	push	{r7}
 800535a:	b087      	sub	sp, #28
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f023 0303 	bic.w	r3, r3, #3
 800538e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	4313      	orrs	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	021b      	lsls	r3, r3, #8
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a1d      	ldr	r2, [pc, #116]	; (8005428 <TIM_OC3_SetConfig+0xd0>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d10d      	bne.n	80053d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	021b      	lsls	r3, r3, #8
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a14      	ldr	r2, [pc, #80]	; (8005428 <TIM_OC3_SetConfig+0xd0>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d113      	bne.n	8005402 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	011b      	lsls	r3, r3, #4
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	4313      	orrs	r3, r2
 8005400:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	621a      	str	r2, [r3, #32]
}
 800541c:	bf00      	nop
 800541e:	371c      	adds	r7, #28
 8005420:	46bd      	mov	sp, r7
 8005422:	bc80      	pop	{r7}
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	40012c00 	.word	0x40012c00

0800542c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800542c:	b480      	push	{r7}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800545a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005462:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	021b      	lsls	r3, r3, #8
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4313      	orrs	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005476:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	031b      	lsls	r3, r3, #12
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	4313      	orrs	r3, r2
 8005482:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a0f      	ldr	r2, [pc, #60]	; (80054c4 <TIM_OC4_SetConfig+0x98>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d109      	bne.n	80054a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005492:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	019b      	lsls	r3, r3, #6
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	4313      	orrs	r3, r2
 800549e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	621a      	str	r2, [r3, #32]
}
 80054ba:	bf00      	nop
 80054bc:	371c      	adds	r7, #28
 80054be:	46bd      	mov	sp, r7
 80054c0:	bc80      	pop	{r7}
 80054c2:	4770      	bx	lr
 80054c4:	40012c00 	.word	0x40012c00

080054c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b087      	sub	sp, #28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	f023 0201 	bic.w	r2, r3, #1
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	011b      	lsls	r3, r3, #4
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f023 030a 	bic.w	r3, r3, #10
 8005504:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	4313      	orrs	r3, r2
 800550c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	621a      	str	r2, [r3, #32]
}
 800551a:	bf00      	nop
 800551c:	371c      	adds	r7, #28
 800551e:	46bd      	mov	sp, r7
 8005520:	bc80      	pop	{r7}
 8005522:	4770      	bx	lr

08005524 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005524:	b480      	push	{r7}
 8005526:	b087      	sub	sp, #28
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6a1b      	ldr	r3, [r3, #32]
 8005534:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	f023 0210 	bic.w	r2, r3, #16
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800554e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	031b      	lsls	r3, r3, #12
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	4313      	orrs	r3, r2
 8005558:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005560:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	4313      	orrs	r3, r2
 800556a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	621a      	str	r2, [r3, #32]
}
 8005578:	bf00      	nop
 800557a:	371c      	adds	r7, #28
 800557c:	46bd      	mov	sp, r7
 800557e:	bc80      	pop	{r7}
 8005580:	4770      	bx	lr

08005582 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005582:	b480      	push	{r7}
 8005584:	b085      	sub	sp, #20
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005598:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4313      	orrs	r3, r2
 80055a0:	f043 0307 	orr.w	r3, r3, #7
 80055a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	609a      	str	r2, [r3, #8]
}
 80055ac:	bf00      	nop
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bc80      	pop	{r7}
 80055b4:	4770      	bx	lr

080055b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b087      	sub	sp, #28
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	60f8      	str	r0, [r7, #12]
 80055be:	60b9      	str	r1, [r7, #8]
 80055c0:	607a      	str	r2, [r7, #4]
 80055c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	021a      	lsls	r2, r3, #8
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	431a      	orrs	r2, r3
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	4313      	orrs	r3, r2
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	609a      	str	r2, [r3, #8]
}
 80055ea:	bf00      	nop
 80055ec:	371c      	adds	r7, #28
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bc80      	pop	{r7}
 80055f2:	4770      	bx	lr

080055f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b087      	sub	sp, #28
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	f003 031f 	and.w	r3, r3, #31
 8005606:	2201      	movs	r2, #1
 8005608:	fa02 f303 	lsl.w	r3, r2, r3
 800560c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6a1a      	ldr	r2, [r3, #32]
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	43db      	mvns	r3, r3
 8005616:	401a      	ands	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a1a      	ldr	r2, [r3, #32]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f003 031f 	and.w	r3, r3, #31
 8005626:	6879      	ldr	r1, [r7, #4]
 8005628:	fa01 f303 	lsl.w	r3, r1, r3
 800562c:	431a      	orrs	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	621a      	str	r2, [r3, #32]
}
 8005632:	bf00      	nop
 8005634:	371c      	adds	r7, #28
 8005636:	46bd      	mov	sp, r7
 8005638:	bc80      	pop	{r7}
 800563a:	4770      	bx	lr

0800563c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800564c:	2b01      	cmp	r3, #1
 800564e:	d101      	bne.n	8005654 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005650:	2302      	movs	r3, #2
 8005652:	e046      	b.n	80056e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	4313      	orrs	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a16      	ldr	r2, [pc, #88]	; (80056ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d00e      	beq.n	80056b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a0:	d009      	beq.n	80056b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a12      	ldr	r2, [pc, #72]	; (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d004      	beq.n	80056b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a10      	ldr	r2, [pc, #64]	; (80056f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d10c      	bne.n	80056d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bc80      	pop	{r7}
 80056ea:	4770      	bx	lr
 80056ec:	40012c00 	.word	0x40012c00
 80056f0:	40000400 	.word	0x40000400
 80056f4:	40000800 	.word	0x40000800

080056f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e042      	b.n	8005790 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d106      	bne.n	8005724 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7fd fabe 	bl	8002ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2224      	movs	r2, #36	; 0x24
 8005728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68da      	ldr	r2, [r3, #12]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800573a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 fdc5 	bl	80062cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	691a      	ldr	r2, [r3, #16]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005750:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	695a      	ldr	r2, [r3, #20]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005760:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68da      	ldr	r2, [r3, #12]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005770:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2220      	movs	r2, #32
 800577c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2220      	movs	r2, #32
 8005784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3708      	adds	r7, #8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b08a      	sub	sp, #40	; 0x28
 800579c:	af02      	add	r7, sp, #8
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	603b      	str	r3, [r7, #0]
 80057a4:	4613      	mov	r3, r2
 80057a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057a8:	2300      	movs	r3, #0
 80057aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b20      	cmp	r3, #32
 80057b6:	d16d      	bne.n	8005894 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d002      	beq.n	80057c4 <HAL_UART_Transmit+0x2c>
 80057be:	88fb      	ldrh	r3, [r7, #6]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e066      	b.n	8005896 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2221      	movs	r2, #33	; 0x21
 80057d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057d6:	f7fd fb71 	bl	8002ebc <HAL_GetTick>
 80057da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	88fa      	ldrh	r2, [r7, #6]
 80057e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	88fa      	ldrh	r2, [r7, #6]
 80057e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f0:	d108      	bne.n	8005804 <HAL_UART_Transmit+0x6c>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d104      	bne.n	8005804 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80057fa:	2300      	movs	r3, #0
 80057fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	61bb      	str	r3, [r7, #24]
 8005802:	e003      	b.n	800580c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005808:	2300      	movs	r3, #0
 800580a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800580c:	e02a      	b.n	8005864 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2200      	movs	r2, #0
 8005816:	2180      	movs	r1, #128	; 0x80
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 fb14 	bl	8005e46 <UART_WaitOnFlagUntilTimeout>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d001      	beq.n	8005828 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e036      	b.n	8005896 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10b      	bne.n	8005846 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	461a      	mov	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800583c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	3302      	adds	r3, #2
 8005842:	61bb      	str	r3, [r7, #24]
 8005844:	e007      	b.n	8005856 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	781a      	ldrb	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	3301      	adds	r3, #1
 8005854:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800585a:	b29b      	uxth	r3, r3
 800585c:	3b01      	subs	r3, #1
 800585e:	b29a      	uxth	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005868:	b29b      	uxth	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1cf      	bne.n	800580e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2200      	movs	r2, #0
 8005876:	2140      	movs	r1, #64	; 0x40
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 fae4 	bl	8005e46 <UART_WaitOnFlagUntilTimeout>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e006      	b.n	8005896 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005890:	2300      	movs	r3, #0
 8005892:	e000      	b.n	8005896 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005894:	2302      	movs	r3, #2
  }
}
 8005896:	4618      	mov	r0, r3
 8005898:	3720      	adds	r7, #32
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b084      	sub	sp, #16
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	60f8      	str	r0, [r7, #12]
 80058a6:	60b9      	str	r1, [r7, #8]
 80058a8:	4613      	mov	r3, r2
 80058aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b20      	cmp	r3, #32
 80058b6:	d112      	bne.n	80058de <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <HAL_UART_Receive_IT+0x26>
 80058be:	88fb      	ldrh	r3, [r7, #6]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e00b      	b.n	80058e0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80058ce:	88fb      	ldrh	r3, [r7, #6]
 80058d0:	461a      	mov	r2, r3
 80058d2:	68b9      	ldr	r1, [r7, #8]
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 fb24 	bl	8005f22 <UART_Start_Receive_IT>
 80058da:	4603      	mov	r3, r0
 80058dc:	e000      	b.n	80058e0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80058de:	2302      	movs	r3, #2
  }
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b0ba      	sub	sp, #232	; 0xe8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800590e:	2300      	movs	r3, #0
 8005910:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005914:	2300      	movs	r3, #0
 8005916:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800591a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800591e:	f003 030f 	and.w	r3, r3, #15
 8005922:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005926:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10f      	bne.n	800594e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800592e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005932:	f003 0320 	and.w	r3, r3, #32
 8005936:	2b00      	cmp	r3, #0
 8005938:	d009      	beq.n	800594e <HAL_UART_IRQHandler+0x66>
 800593a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800593e:	f003 0320 	and.w	r3, r3, #32
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 fc01 	bl	800614e <UART_Receive_IT>
      return;
 800594c:	e25b      	b.n	8005e06 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800594e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005952:	2b00      	cmp	r3, #0
 8005954:	f000 80de 	beq.w	8005b14 <HAL_UART_IRQHandler+0x22c>
 8005958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b00      	cmp	r3, #0
 8005962:	d106      	bne.n	8005972 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005968:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 80d1 	beq.w	8005b14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00b      	beq.n	8005996 <HAL_UART_IRQHandler+0xae>
 800597e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005986:	2b00      	cmp	r3, #0
 8005988:	d005      	beq.n	8005996 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800598e:	f043 0201 	orr.w	r2, r3, #1
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800599a:	f003 0304 	and.w	r3, r3, #4
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00b      	beq.n	80059ba <HAL_UART_IRQHandler+0xd2>
 80059a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d005      	beq.n	80059ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b2:	f043 0202 	orr.w	r2, r3, #2
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00b      	beq.n	80059de <HAL_UART_IRQHandler+0xf6>
 80059c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d005      	beq.n	80059de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d6:	f043 0204 	orr.w	r2, r3, #4
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80059de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059e2:	f003 0308 	and.w	r3, r3, #8
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d011      	beq.n	8005a0e <HAL_UART_IRQHandler+0x126>
 80059ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ee:	f003 0320 	and.w	r3, r3, #32
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d105      	bne.n	8005a02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80059f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d005      	beq.n	8005a0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a06:	f043 0208 	orr.w	r2, r3, #8
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f000 81f2 	beq.w	8005dfc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a1c:	f003 0320 	and.w	r3, r3, #32
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d008      	beq.n	8005a36 <HAL_UART_IRQHandler+0x14e>
 8005a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a28:	f003 0320 	and.w	r3, r3, #32
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 fb8c 	bl	800614e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	bf14      	ite	ne
 8005a44:	2301      	movne	r3, #1
 8005a46:	2300      	moveq	r3, #0
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a52:	f003 0308 	and.w	r3, r3, #8
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d103      	bne.n	8005a62 <HAL_UART_IRQHandler+0x17a>
 8005a5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d04f      	beq.n	8005b02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fa96 	bl	8005f94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d041      	beq.n	8005afa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	3314      	adds	r3, #20
 8005a7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a84:	e853 3f00 	ldrex	r3, [r3]
 8005a88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	3314      	adds	r3, #20
 8005a9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005aa2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005aa6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aaa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005aae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ab2:	e841 2300 	strex	r3, r2, [r1]
 8005ab6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005aba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1d9      	bne.n	8005a76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d013      	beq.n	8005af2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ace:	4a7e      	ldr	r2, [pc, #504]	; (8005cc8 <HAL_UART_IRQHandler+0x3e0>)
 8005ad0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fd ff92 	bl	8003a00 <HAL_DMA_Abort_IT>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d016      	beq.n	8005b10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005aec:	4610      	mov	r0, r2
 8005aee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af0:	e00e      	b.n	8005b10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f993 	bl	8005e1e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af8:	e00a      	b.n	8005b10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f98f 	bl	8005e1e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b00:	e006      	b.n	8005b10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f98b 	bl	8005e1e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005b0e:	e175      	b.n	8005dfc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b10:	bf00      	nop
    return;
 8005b12:	e173      	b.n	8005dfc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	f040 814f 	bne.w	8005dbc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b22:	f003 0310 	and.w	r3, r3, #16
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 8148 	beq.w	8005dbc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b30:	f003 0310 	and.w	r3, r3, #16
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f000 8141 	beq.w	8005dbc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60bb      	str	r3, [r7, #8]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	60bb      	str	r3, [r7, #8]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	60bb      	str	r3, [r7, #8]
 8005b4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f000 80b6 	beq.w	8005ccc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 8145 	beq.w	8005e00 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	f080 813e 	bcs.w	8005e00 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b8a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	2b20      	cmp	r3, #32
 8005b94:	f000 8088 	beq.w	8005ca8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	330c      	adds	r3, #12
 8005b9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ba6:	e853 3f00 	ldrex	r3, [r3]
 8005baa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005bae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bb6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	330c      	adds	r3, #12
 8005bc0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005bc4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005bc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bcc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005bd0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005bd4:	e841 2300 	strex	r3, r2, [r1]
 8005bd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005bdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1d9      	bne.n	8005b98 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3314      	adds	r3, #20
 8005bea:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bee:	e853 3f00 	ldrex	r3, [r3]
 8005bf2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005bf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bf6:	f023 0301 	bic.w	r3, r3, #1
 8005bfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3314      	adds	r3, #20
 8005c04:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c08:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c0c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c10:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c14:	e841 2300 	strex	r3, r2, [r1]
 8005c18:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1e1      	bne.n	8005be4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3314      	adds	r3, #20
 8005c26:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c2a:	e853 3f00 	ldrex	r3, [r3]
 8005c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	3314      	adds	r3, #20
 8005c40:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c44:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c46:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c48:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c4a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c4c:	e841 2300 	strex	r3, r2, [r1]
 8005c50:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e3      	bne.n	8005c20 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	330c      	adds	r3, #12
 8005c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c70:	e853 3f00 	ldrex	r3, [r3]
 8005c74:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c78:	f023 0310 	bic.w	r3, r3, #16
 8005c7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	330c      	adds	r3, #12
 8005c86:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005c8a:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c8c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c92:	e841 2300 	strex	r3, r2, [r1]
 8005c96:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1e3      	bne.n	8005c66 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7fd fe71 	bl	800398a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2202      	movs	r2, #2
 8005cac:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f8b6 	bl	8005e30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cc4:	e09c      	b.n	8005e00 <HAL_UART_IRQHandler+0x518>
 8005cc6:	bf00      	nop
 8005cc8:	08006059 	.word	0x08006059
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 808e 	beq.w	8005e04 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005ce8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f000 8089 	beq.w	8005e04 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	330c      	adds	r3, #12
 8005cf8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfc:	e853 3f00 	ldrex	r3, [r3]
 8005d00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	330c      	adds	r3, #12
 8005d12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d16:	647a      	str	r2, [r7, #68]	; 0x44
 8005d18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d1e:	e841 2300 	strex	r3, r2, [r1]
 8005d22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1e3      	bne.n	8005cf2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	3314      	adds	r3, #20
 8005d30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	e853 3f00 	ldrex	r3, [r3]
 8005d38:	623b      	str	r3, [r7, #32]
   return(result);
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	f023 0301 	bic.w	r3, r3, #1
 8005d40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	3314      	adds	r3, #20
 8005d4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d4e:	633a      	str	r2, [r7, #48]	; 0x30
 8005d50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d56:	e841 2300 	strex	r3, r2, [r1]
 8005d5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1e3      	bne.n	8005d2a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2220      	movs	r2, #32
 8005d66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	330c      	adds	r3, #12
 8005d76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	e853 3f00 	ldrex	r3, [r3]
 8005d7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f023 0310 	bic.w	r3, r3, #16
 8005d86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	330c      	adds	r3, #12
 8005d90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005d94:	61fa      	str	r2, [r7, #28]
 8005d96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d98:	69b9      	ldr	r1, [r7, #24]
 8005d9a:	69fa      	ldr	r2, [r7, #28]
 8005d9c:	e841 2300 	strex	r3, r2, [r1]
 8005da0:	617b      	str	r3, [r7, #20]
   return(result);
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1e3      	bne.n	8005d70 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2202      	movs	r2, #2
 8005dac:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005dae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005db2:	4619      	mov	r1, r3
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f83b 	bl	8005e30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005dba:	e023      	b.n	8005e04 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d009      	beq.n	8005ddc <HAL_UART_IRQHandler+0x4f4>
 8005dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d003      	beq.n	8005ddc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 f953 	bl	8006080 <UART_Transmit_IT>
    return;
 8005dda:	e014      	b.n	8005e06 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00e      	beq.n	8005e06 <HAL_UART_IRQHandler+0x51e>
 8005de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d008      	beq.n	8005e06 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 f992 	bl	800611e <UART_EndTransmit_IT>
    return;
 8005dfa:	e004      	b.n	8005e06 <HAL_UART_IRQHandler+0x51e>
    return;
 8005dfc:	bf00      	nop
 8005dfe:	e002      	b.n	8005e06 <HAL_UART_IRQHandler+0x51e>
      return;
 8005e00:	bf00      	nop
 8005e02:	e000      	b.n	8005e06 <HAL_UART_IRQHandler+0x51e>
      return;
 8005e04:	bf00      	nop
  }
}
 8005e06:	37e8      	adds	r7, #232	; 0xe8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bc80      	pop	{r7}
 8005e1c:	4770      	bx	lr

08005e1e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b083      	sub	sp, #12
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e26:	bf00      	nop
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bc80      	pop	{r7}
 8005e2e:	4770      	bx	lr

08005e30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	460b      	mov	r3, r1
 8005e3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bc80      	pop	{r7}
 8005e44:	4770      	bx	lr

08005e46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b090      	sub	sp, #64	; 0x40
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	60f8      	str	r0, [r7, #12]
 8005e4e:	60b9      	str	r1, [r7, #8]
 8005e50:	603b      	str	r3, [r7, #0]
 8005e52:	4613      	mov	r3, r2
 8005e54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e56:	e050      	b.n	8005efa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5e:	d04c      	beq.n	8005efa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d007      	beq.n	8005e76 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e66:	f7fd f829 	bl	8002ebc <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d241      	bcs.n	8005efa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	330c      	adds	r3, #12
 8005e7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e80:	e853 3f00 	ldrex	r3, [r3]
 8005e84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	330c      	adds	r3, #12
 8005e94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e96:	637a      	str	r2, [r7, #52]	; 0x34
 8005e98:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e9e:	e841 2300 	strex	r3, r2, [r1]
 8005ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1e5      	bne.n	8005e76 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	3314      	adds	r3, #20
 8005eb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	e853 3f00 	ldrex	r3, [r3]
 8005eb8:	613b      	str	r3, [r7, #16]
   return(result);
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	f023 0301 	bic.w	r3, r3, #1
 8005ec0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	3314      	adds	r3, #20
 8005ec8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005eca:	623a      	str	r2, [r7, #32]
 8005ecc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ece:	69f9      	ldr	r1, [r7, #28]
 8005ed0:	6a3a      	ldr	r2, [r7, #32]
 8005ed2:	e841 2300 	strex	r3, r2, [r1]
 8005ed6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1e5      	bne.n	8005eaa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e00f      	b.n	8005f1a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	4013      	ands	r3, r2
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	bf0c      	ite	eq
 8005f0a:	2301      	moveq	r3, #1
 8005f0c:	2300      	movne	r3, #0
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	461a      	mov	r2, r3
 8005f12:	79fb      	ldrb	r3, [r7, #7]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d09f      	beq.n	8005e58 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3740      	adds	r7, #64	; 0x40
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b085      	sub	sp, #20
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	60f8      	str	r0, [r7, #12]
 8005f2a:	60b9      	str	r1, [r7, #8]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	88fa      	ldrh	r2, [r7, #6]
 8005f3a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	88fa      	ldrh	r2, [r7, #6]
 8005f40:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2222      	movs	r2, #34	; 0x22
 8005f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d007      	beq.n	8005f68 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68da      	ldr	r2, [r3, #12]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f66:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	695a      	ldr	r2, [r3, #20]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f042 0201 	orr.w	r2, r2, #1
 8005f76:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68da      	ldr	r2, [r3, #12]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f042 0220 	orr.w	r2, r2, #32
 8005f86:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bc80      	pop	{r7}
 8005f92:	4770      	bx	lr

08005f94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b095      	sub	sp, #84	; 0x54
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	330c      	adds	r3, #12
 8005fa2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa6:	e853 3f00 	ldrex	r3, [r3]
 8005faa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	330c      	adds	r3, #12
 8005fba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fbc:	643a      	str	r2, [r7, #64]	; 0x40
 8005fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fc4:	e841 2300 	strex	r3, r2, [r1]
 8005fc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1e5      	bne.n	8005f9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	3314      	adds	r3, #20
 8005fd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd8:	6a3b      	ldr	r3, [r7, #32]
 8005fda:	e853 3f00 	ldrex	r3, [r3]
 8005fde:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	f023 0301 	bic.w	r3, r3, #1
 8005fe6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3314      	adds	r3, #20
 8005fee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ff0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ff2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ff6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ff8:	e841 2300 	strex	r3, r2, [r1]
 8005ffc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1e5      	bne.n	8005fd0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006008:	2b01      	cmp	r3, #1
 800600a:	d119      	bne.n	8006040 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	330c      	adds	r3, #12
 8006012:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	e853 3f00 	ldrex	r3, [r3]
 800601a:	60bb      	str	r3, [r7, #8]
   return(result);
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	f023 0310 	bic.w	r3, r3, #16
 8006022:	647b      	str	r3, [r7, #68]	; 0x44
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	330c      	adds	r3, #12
 800602a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800602c:	61ba      	str	r2, [r7, #24]
 800602e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006030:	6979      	ldr	r1, [r7, #20]
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	e841 2300 	strex	r3, r2, [r1]
 8006038:	613b      	str	r3, [r7, #16]
   return(result);
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1e5      	bne.n	800600c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2220      	movs	r2, #32
 8006044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800604e:	bf00      	nop
 8006050:	3754      	adds	r7, #84	; 0x54
 8006052:	46bd      	mov	sp, r7
 8006054:	bc80      	pop	{r7}
 8006056:	4770      	bx	lr

08006058 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006064:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f7ff fed3 	bl	8005e1e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006078:	bf00      	nop
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2b21      	cmp	r3, #33	; 0x21
 8006092:	d13e      	bne.n	8006112 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800609c:	d114      	bne.n	80060c8 <UART_Transmit_IT+0x48>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d110      	bne.n	80060c8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	461a      	mov	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060ba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	1c9a      	adds	r2, r3, #2
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	621a      	str	r2, [r3, #32]
 80060c6:	e008      	b.n	80060da <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	1c59      	adds	r1, r3, #1
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	6211      	str	r1, [r2, #32]
 80060d2:	781a      	ldrb	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060de:	b29b      	uxth	r3, r3
 80060e0:	3b01      	subs	r3, #1
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	4619      	mov	r1, r3
 80060e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10f      	bne.n	800610e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68da      	ldr	r2, [r3, #12]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68da      	ldr	r2, [r3, #12]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800610c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800610e:	2300      	movs	r3, #0
 8006110:	e000      	b.n	8006114 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006112:	2302      	movs	r3, #2
  }
}
 8006114:	4618      	mov	r0, r3
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	bc80      	pop	{r7}
 800611c:	4770      	bx	lr

0800611e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b082      	sub	sp, #8
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68da      	ldr	r2, [r3, #12]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006134:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2220      	movs	r2, #32
 800613a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7ff fe64 	bl	8005e0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b08c      	sub	sp, #48	; 0x30
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b22      	cmp	r3, #34	; 0x22
 8006160:	f040 80ae 	bne.w	80062c0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800616c:	d117      	bne.n	800619e <UART_Receive_IT+0x50>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d113      	bne.n	800619e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006176:	2300      	movs	r3, #0
 8006178:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	b29b      	uxth	r3, r3
 8006188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800618c:	b29a      	uxth	r2, r3
 800618e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006190:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006196:	1c9a      	adds	r2, r3, #2
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	629a      	str	r2, [r3, #40]	; 0x28
 800619c:	e026      	b.n	80061ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80061a4:	2300      	movs	r3, #0
 80061a6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b0:	d007      	beq.n	80061c2 <UART_Receive_IT+0x74>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10a      	bne.n	80061d0 <UART_Receive_IT+0x82>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d106      	bne.n	80061d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061cc:	701a      	strb	r2, [r3, #0]
 80061ce:	e008      	b.n	80061e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	3b01      	subs	r3, #1
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	4619      	mov	r1, r3
 80061fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d15d      	bne.n	80062bc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68da      	ldr	r2, [r3, #12]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f022 0220 	bic.w	r2, r2, #32
 800620e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68da      	ldr	r2, [r3, #12]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800621e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	695a      	ldr	r2, [r3, #20]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0201 	bic.w	r2, r2, #1
 800622e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2220      	movs	r2, #32
 8006234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006242:	2b01      	cmp	r3, #1
 8006244:	d135      	bne.n	80062b2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	330c      	adds	r3, #12
 8006252:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	e853 3f00 	ldrex	r3, [r3]
 800625a:	613b      	str	r3, [r7, #16]
   return(result);
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f023 0310 	bic.w	r3, r3, #16
 8006262:	627b      	str	r3, [r7, #36]	; 0x24
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	330c      	adds	r3, #12
 800626a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800626c:	623a      	str	r2, [r7, #32]
 800626e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006270:	69f9      	ldr	r1, [r7, #28]
 8006272:	6a3a      	ldr	r2, [r7, #32]
 8006274:	e841 2300 	strex	r3, r2, [r1]
 8006278:	61bb      	str	r3, [r7, #24]
   return(result);
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1e5      	bne.n	800624c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0310 	and.w	r3, r3, #16
 800628a:	2b10      	cmp	r3, #16
 800628c:	d10a      	bne.n	80062a4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800628e:	2300      	movs	r3, #0
 8006290:	60fb      	str	r3, [r7, #12]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	60fb      	str	r3, [r7, #12]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	60fb      	str	r3, [r7, #12]
 80062a2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062a8:	4619      	mov	r1, r3
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7ff fdc0 	bl	8005e30 <HAL_UARTEx_RxEventCallback>
 80062b0:	e002      	b.n	80062b8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7fb fed2 	bl	800205c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80062b8:	2300      	movs	r3, #0
 80062ba:	e002      	b.n	80062c2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80062bc:	2300      	movs	r3, #0
 80062be:	e000      	b.n	80062c2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80062c0:	2302      	movs	r3, #2
  }
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3730      	adds	r7, #48	; 0x30
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
	...

080062cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68da      	ldr	r2, [r3, #12]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	430a      	orrs	r2, r1
 80062e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	689a      	ldr	r2, [r3, #8]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	431a      	orrs	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	695b      	ldr	r3, [r3, #20]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006306:	f023 030c 	bic.w	r3, r3, #12
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	6812      	ldr	r2, [r2, #0]
 800630e:	68b9      	ldr	r1, [r7, #8]
 8006310:	430b      	orrs	r3, r1
 8006312:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	699a      	ldr	r2, [r3, #24]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	430a      	orrs	r2, r1
 8006328:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a2c      	ldr	r2, [pc, #176]	; (80063e0 <UART_SetConfig+0x114>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d103      	bne.n	800633c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006334:	f7fe f96e 	bl	8004614 <HAL_RCC_GetPCLK2Freq>
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	e002      	b.n	8006342 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800633c:	f7fe f956 	bl	80045ec <HAL_RCC_GetPCLK1Freq>
 8006340:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	4613      	mov	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	009a      	lsls	r2, r3, #2
 800634c:	441a      	add	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	fbb2 f3f3 	udiv	r3, r2, r3
 8006358:	4a22      	ldr	r2, [pc, #136]	; (80063e4 <UART_SetConfig+0x118>)
 800635a:	fba2 2303 	umull	r2, r3, r2, r3
 800635e:	095b      	lsrs	r3, r3, #5
 8006360:	0119      	lsls	r1, r3, #4
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	4613      	mov	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4413      	add	r3, r2
 800636a:	009a      	lsls	r2, r3, #2
 800636c:	441a      	add	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	fbb2 f2f3 	udiv	r2, r2, r3
 8006378:	4b1a      	ldr	r3, [pc, #104]	; (80063e4 <UART_SetConfig+0x118>)
 800637a:	fba3 0302 	umull	r0, r3, r3, r2
 800637e:	095b      	lsrs	r3, r3, #5
 8006380:	2064      	movs	r0, #100	; 0x64
 8006382:	fb00 f303 	mul.w	r3, r0, r3
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	011b      	lsls	r3, r3, #4
 800638a:	3332      	adds	r3, #50	; 0x32
 800638c:	4a15      	ldr	r2, [pc, #84]	; (80063e4 <UART_SetConfig+0x118>)
 800638e:	fba2 2303 	umull	r2, r3, r2, r3
 8006392:	095b      	lsrs	r3, r3, #5
 8006394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006398:	4419      	add	r1, r3
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	4613      	mov	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	009a      	lsls	r2, r3, #2
 80063a4:	441a      	add	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80063b0:	4b0c      	ldr	r3, [pc, #48]	; (80063e4 <UART_SetConfig+0x118>)
 80063b2:	fba3 0302 	umull	r0, r3, r3, r2
 80063b6:	095b      	lsrs	r3, r3, #5
 80063b8:	2064      	movs	r0, #100	; 0x64
 80063ba:	fb00 f303 	mul.w	r3, r0, r3
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	011b      	lsls	r3, r3, #4
 80063c2:	3332      	adds	r3, #50	; 0x32
 80063c4:	4a07      	ldr	r2, [pc, #28]	; (80063e4 <UART_SetConfig+0x118>)
 80063c6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ca:	095b      	lsrs	r3, r3, #5
 80063cc:	f003 020f 	and.w	r2, r3, #15
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	440a      	add	r2, r1
 80063d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80063d8:	bf00      	nop
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	40013800 	.word	0x40013800
 80063e4:	51eb851f 	.word	0x51eb851f

080063e8 <atof>:
 80063e8:	2100      	movs	r1, #0
 80063ea:	f001 bac1 	b.w	8007970 <strtod>

080063ee <atoi>:
 80063ee:	220a      	movs	r2, #10
 80063f0:	2100      	movs	r1, #0
 80063f2:	f001 bb45 	b.w	8007a80 <strtol>
	...

080063f8 <__errno>:
 80063f8:	4b01      	ldr	r3, [pc, #4]	; (8006400 <__errno+0x8>)
 80063fa:	6818      	ldr	r0, [r3, #0]
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	20000040 	.word	0x20000040

08006404 <__libc_init_array>:
 8006404:	b570      	push	{r4, r5, r6, lr}
 8006406:	2600      	movs	r6, #0
 8006408:	4d0c      	ldr	r5, [pc, #48]	; (800643c <__libc_init_array+0x38>)
 800640a:	4c0d      	ldr	r4, [pc, #52]	; (8006440 <__libc_init_array+0x3c>)
 800640c:	1b64      	subs	r4, r4, r5
 800640e:	10a4      	asrs	r4, r4, #2
 8006410:	42a6      	cmp	r6, r4
 8006412:	d109      	bne.n	8006428 <__libc_init_array+0x24>
 8006414:	f004 fa86 	bl	800a924 <_init>
 8006418:	2600      	movs	r6, #0
 800641a:	4d0a      	ldr	r5, [pc, #40]	; (8006444 <__libc_init_array+0x40>)
 800641c:	4c0a      	ldr	r4, [pc, #40]	; (8006448 <__libc_init_array+0x44>)
 800641e:	1b64      	subs	r4, r4, r5
 8006420:	10a4      	asrs	r4, r4, #2
 8006422:	42a6      	cmp	r6, r4
 8006424:	d105      	bne.n	8006432 <__libc_init_array+0x2e>
 8006426:	bd70      	pop	{r4, r5, r6, pc}
 8006428:	f855 3b04 	ldr.w	r3, [r5], #4
 800642c:	4798      	blx	r3
 800642e:	3601      	adds	r6, #1
 8006430:	e7ee      	b.n	8006410 <__libc_init_array+0xc>
 8006432:	f855 3b04 	ldr.w	r3, [r5], #4
 8006436:	4798      	blx	r3
 8006438:	3601      	adds	r6, #1
 800643a:	e7f2      	b.n	8006422 <__libc_init_array+0x1e>
 800643c:	0800ae8c 	.word	0x0800ae8c
 8006440:	0800ae8c 	.word	0x0800ae8c
 8006444:	0800ae8c 	.word	0x0800ae8c
 8006448:	0800ae90 	.word	0x0800ae90

0800644c <memset>:
 800644c:	4603      	mov	r3, r0
 800644e:	4402      	add	r2, r0
 8006450:	4293      	cmp	r3, r2
 8006452:	d100      	bne.n	8006456 <memset+0xa>
 8006454:	4770      	bx	lr
 8006456:	f803 1b01 	strb.w	r1, [r3], #1
 800645a:	e7f9      	b.n	8006450 <memset+0x4>

0800645c <__cvt>:
 800645c:	2b00      	cmp	r3, #0
 800645e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006462:	461f      	mov	r7, r3
 8006464:	bfbb      	ittet	lt
 8006466:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800646a:	461f      	movlt	r7, r3
 800646c:	2300      	movge	r3, #0
 800646e:	232d      	movlt	r3, #45	; 0x2d
 8006470:	b088      	sub	sp, #32
 8006472:	4614      	mov	r4, r2
 8006474:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006476:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006478:	7013      	strb	r3, [r2, #0]
 800647a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800647c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006480:	f023 0820 	bic.w	r8, r3, #32
 8006484:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006488:	d005      	beq.n	8006496 <__cvt+0x3a>
 800648a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800648e:	d100      	bne.n	8006492 <__cvt+0x36>
 8006490:	3501      	adds	r5, #1
 8006492:	2302      	movs	r3, #2
 8006494:	e000      	b.n	8006498 <__cvt+0x3c>
 8006496:	2303      	movs	r3, #3
 8006498:	aa07      	add	r2, sp, #28
 800649a:	9204      	str	r2, [sp, #16]
 800649c:	aa06      	add	r2, sp, #24
 800649e:	e9cd a202 	strd	sl, r2, [sp, #8]
 80064a2:	e9cd 3500 	strd	r3, r5, [sp]
 80064a6:	4622      	mov	r2, r4
 80064a8:	463b      	mov	r3, r7
 80064aa:	f001 fbb9 	bl	8007c20 <_dtoa_r>
 80064ae:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80064b2:	4606      	mov	r6, r0
 80064b4:	d102      	bne.n	80064bc <__cvt+0x60>
 80064b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064b8:	07db      	lsls	r3, r3, #31
 80064ba:	d522      	bpl.n	8006502 <__cvt+0xa6>
 80064bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80064c0:	eb06 0905 	add.w	r9, r6, r5
 80064c4:	d110      	bne.n	80064e8 <__cvt+0x8c>
 80064c6:	7833      	ldrb	r3, [r6, #0]
 80064c8:	2b30      	cmp	r3, #48	; 0x30
 80064ca:	d10a      	bne.n	80064e2 <__cvt+0x86>
 80064cc:	2200      	movs	r2, #0
 80064ce:	2300      	movs	r3, #0
 80064d0:	4620      	mov	r0, r4
 80064d2:	4639      	mov	r1, r7
 80064d4:	f7fa fa68 	bl	80009a8 <__aeabi_dcmpeq>
 80064d8:	b918      	cbnz	r0, 80064e2 <__cvt+0x86>
 80064da:	f1c5 0501 	rsb	r5, r5, #1
 80064de:	f8ca 5000 	str.w	r5, [sl]
 80064e2:	f8da 3000 	ldr.w	r3, [sl]
 80064e6:	4499      	add	r9, r3
 80064e8:	2200      	movs	r2, #0
 80064ea:	2300      	movs	r3, #0
 80064ec:	4620      	mov	r0, r4
 80064ee:	4639      	mov	r1, r7
 80064f0:	f7fa fa5a 	bl	80009a8 <__aeabi_dcmpeq>
 80064f4:	b108      	cbz	r0, 80064fa <__cvt+0x9e>
 80064f6:	f8cd 901c 	str.w	r9, [sp, #28]
 80064fa:	2230      	movs	r2, #48	; 0x30
 80064fc:	9b07      	ldr	r3, [sp, #28]
 80064fe:	454b      	cmp	r3, r9
 8006500:	d307      	bcc.n	8006512 <__cvt+0xb6>
 8006502:	4630      	mov	r0, r6
 8006504:	9b07      	ldr	r3, [sp, #28]
 8006506:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006508:	1b9b      	subs	r3, r3, r6
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	b008      	add	sp, #32
 800650e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006512:	1c59      	adds	r1, r3, #1
 8006514:	9107      	str	r1, [sp, #28]
 8006516:	701a      	strb	r2, [r3, #0]
 8006518:	e7f0      	b.n	80064fc <__cvt+0xa0>

0800651a <__exponent>:
 800651a:	4603      	mov	r3, r0
 800651c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800651e:	2900      	cmp	r1, #0
 8006520:	f803 2b02 	strb.w	r2, [r3], #2
 8006524:	bfb6      	itet	lt
 8006526:	222d      	movlt	r2, #45	; 0x2d
 8006528:	222b      	movge	r2, #43	; 0x2b
 800652a:	4249      	neglt	r1, r1
 800652c:	2909      	cmp	r1, #9
 800652e:	7042      	strb	r2, [r0, #1]
 8006530:	dd2b      	ble.n	800658a <__exponent+0x70>
 8006532:	f10d 0407 	add.w	r4, sp, #7
 8006536:	46a4      	mov	ip, r4
 8006538:	270a      	movs	r7, #10
 800653a:	fb91 f6f7 	sdiv	r6, r1, r7
 800653e:	460a      	mov	r2, r1
 8006540:	46a6      	mov	lr, r4
 8006542:	fb07 1516 	mls	r5, r7, r6, r1
 8006546:	2a63      	cmp	r2, #99	; 0x63
 8006548:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800654c:	4631      	mov	r1, r6
 800654e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006552:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006556:	dcf0      	bgt.n	800653a <__exponent+0x20>
 8006558:	3130      	adds	r1, #48	; 0x30
 800655a:	f1ae 0502 	sub.w	r5, lr, #2
 800655e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006562:	4629      	mov	r1, r5
 8006564:	1c44      	adds	r4, r0, #1
 8006566:	4561      	cmp	r1, ip
 8006568:	d30a      	bcc.n	8006580 <__exponent+0x66>
 800656a:	f10d 0209 	add.w	r2, sp, #9
 800656e:	eba2 020e 	sub.w	r2, r2, lr
 8006572:	4565      	cmp	r5, ip
 8006574:	bf88      	it	hi
 8006576:	2200      	movhi	r2, #0
 8006578:	4413      	add	r3, r2
 800657a:	1a18      	subs	r0, r3, r0
 800657c:	b003      	add	sp, #12
 800657e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006580:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006584:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006588:	e7ed      	b.n	8006566 <__exponent+0x4c>
 800658a:	2330      	movs	r3, #48	; 0x30
 800658c:	3130      	adds	r1, #48	; 0x30
 800658e:	7083      	strb	r3, [r0, #2]
 8006590:	70c1      	strb	r1, [r0, #3]
 8006592:	1d03      	adds	r3, r0, #4
 8006594:	e7f1      	b.n	800657a <__exponent+0x60>
	...

08006598 <_printf_float>:
 8006598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800659c:	b091      	sub	sp, #68	; 0x44
 800659e:	460c      	mov	r4, r1
 80065a0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80065a4:	4616      	mov	r6, r2
 80065a6:	461f      	mov	r7, r3
 80065a8:	4605      	mov	r5, r0
 80065aa:	f002 fc8d 	bl	8008ec8 <_localeconv_r>
 80065ae:	6803      	ldr	r3, [r0, #0]
 80065b0:	4618      	mov	r0, r3
 80065b2:	9309      	str	r3, [sp, #36]	; 0x24
 80065b4:	f7f9 fdcc 	bl	8000150 <strlen>
 80065b8:	2300      	movs	r3, #0
 80065ba:	930e      	str	r3, [sp, #56]	; 0x38
 80065bc:	f8d8 3000 	ldr.w	r3, [r8]
 80065c0:	900a      	str	r0, [sp, #40]	; 0x28
 80065c2:	3307      	adds	r3, #7
 80065c4:	f023 0307 	bic.w	r3, r3, #7
 80065c8:	f103 0208 	add.w	r2, r3, #8
 80065cc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80065d0:	f8d4 b000 	ldr.w	fp, [r4]
 80065d4:	f8c8 2000 	str.w	r2, [r8]
 80065d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065dc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80065e0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80065e4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80065e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80065ea:	f04f 32ff 	mov.w	r2, #4294967295
 80065ee:	4640      	mov	r0, r8
 80065f0:	4b9c      	ldr	r3, [pc, #624]	; (8006864 <_printf_float+0x2cc>)
 80065f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065f4:	f7fa fa0a 	bl	8000a0c <__aeabi_dcmpun>
 80065f8:	bb70      	cbnz	r0, 8006658 <_printf_float+0xc0>
 80065fa:	f04f 32ff 	mov.w	r2, #4294967295
 80065fe:	4640      	mov	r0, r8
 8006600:	4b98      	ldr	r3, [pc, #608]	; (8006864 <_printf_float+0x2cc>)
 8006602:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006604:	f7fa f9e4 	bl	80009d0 <__aeabi_dcmple>
 8006608:	bb30      	cbnz	r0, 8006658 <_printf_float+0xc0>
 800660a:	2200      	movs	r2, #0
 800660c:	2300      	movs	r3, #0
 800660e:	4640      	mov	r0, r8
 8006610:	4651      	mov	r1, sl
 8006612:	f7fa f9d3 	bl	80009bc <__aeabi_dcmplt>
 8006616:	b110      	cbz	r0, 800661e <_printf_float+0x86>
 8006618:	232d      	movs	r3, #45	; 0x2d
 800661a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800661e:	4b92      	ldr	r3, [pc, #584]	; (8006868 <_printf_float+0x2d0>)
 8006620:	4892      	ldr	r0, [pc, #584]	; (800686c <_printf_float+0x2d4>)
 8006622:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006626:	bf94      	ite	ls
 8006628:	4698      	movls	r8, r3
 800662a:	4680      	movhi	r8, r0
 800662c:	2303      	movs	r3, #3
 800662e:	f04f 0a00 	mov.w	sl, #0
 8006632:	6123      	str	r3, [r4, #16]
 8006634:	f02b 0304 	bic.w	r3, fp, #4
 8006638:	6023      	str	r3, [r4, #0]
 800663a:	4633      	mov	r3, r6
 800663c:	4621      	mov	r1, r4
 800663e:	4628      	mov	r0, r5
 8006640:	9700      	str	r7, [sp, #0]
 8006642:	aa0f      	add	r2, sp, #60	; 0x3c
 8006644:	f000 f9d4 	bl	80069f0 <_printf_common>
 8006648:	3001      	adds	r0, #1
 800664a:	f040 8090 	bne.w	800676e <_printf_float+0x1d6>
 800664e:	f04f 30ff 	mov.w	r0, #4294967295
 8006652:	b011      	add	sp, #68	; 0x44
 8006654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006658:	4642      	mov	r2, r8
 800665a:	4653      	mov	r3, sl
 800665c:	4640      	mov	r0, r8
 800665e:	4651      	mov	r1, sl
 8006660:	f7fa f9d4 	bl	8000a0c <__aeabi_dcmpun>
 8006664:	b148      	cbz	r0, 800667a <_printf_float+0xe2>
 8006666:	f1ba 0f00 	cmp.w	sl, #0
 800666a:	bfb8      	it	lt
 800666c:	232d      	movlt	r3, #45	; 0x2d
 800666e:	4880      	ldr	r0, [pc, #512]	; (8006870 <_printf_float+0x2d8>)
 8006670:	bfb8      	it	lt
 8006672:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006676:	4b7f      	ldr	r3, [pc, #508]	; (8006874 <_printf_float+0x2dc>)
 8006678:	e7d3      	b.n	8006622 <_printf_float+0x8a>
 800667a:	6863      	ldr	r3, [r4, #4]
 800667c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006680:	1c5a      	adds	r2, r3, #1
 8006682:	d142      	bne.n	800670a <_printf_float+0x172>
 8006684:	2306      	movs	r3, #6
 8006686:	6063      	str	r3, [r4, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	9206      	str	r2, [sp, #24]
 800668c:	aa0e      	add	r2, sp, #56	; 0x38
 800668e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006692:	aa0d      	add	r2, sp, #52	; 0x34
 8006694:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006698:	9203      	str	r2, [sp, #12]
 800669a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800669e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80066a2:	6023      	str	r3, [r4, #0]
 80066a4:	6863      	ldr	r3, [r4, #4]
 80066a6:	4642      	mov	r2, r8
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	4628      	mov	r0, r5
 80066ac:	4653      	mov	r3, sl
 80066ae:	910b      	str	r1, [sp, #44]	; 0x2c
 80066b0:	f7ff fed4 	bl	800645c <__cvt>
 80066b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066b6:	4680      	mov	r8, r0
 80066b8:	2947      	cmp	r1, #71	; 0x47
 80066ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 80066bc:	d108      	bne.n	80066d0 <_printf_float+0x138>
 80066be:	1cc8      	adds	r0, r1, #3
 80066c0:	db02      	blt.n	80066c8 <_printf_float+0x130>
 80066c2:	6863      	ldr	r3, [r4, #4]
 80066c4:	4299      	cmp	r1, r3
 80066c6:	dd40      	ble.n	800674a <_printf_float+0x1b2>
 80066c8:	f1a9 0902 	sub.w	r9, r9, #2
 80066cc:	fa5f f989 	uxtb.w	r9, r9
 80066d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80066d4:	d81f      	bhi.n	8006716 <_printf_float+0x17e>
 80066d6:	464a      	mov	r2, r9
 80066d8:	3901      	subs	r1, #1
 80066da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80066de:	910d      	str	r1, [sp, #52]	; 0x34
 80066e0:	f7ff ff1b 	bl	800651a <__exponent>
 80066e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066e6:	4682      	mov	sl, r0
 80066e8:	1813      	adds	r3, r2, r0
 80066ea:	2a01      	cmp	r2, #1
 80066ec:	6123      	str	r3, [r4, #16]
 80066ee:	dc02      	bgt.n	80066f6 <_printf_float+0x15e>
 80066f0:	6822      	ldr	r2, [r4, #0]
 80066f2:	07d2      	lsls	r2, r2, #31
 80066f4:	d501      	bpl.n	80066fa <_printf_float+0x162>
 80066f6:	3301      	adds	r3, #1
 80066f8:	6123      	str	r3, [r4, #16]
 80066fa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d09b      	beq.n	800663a <_printf_float+0xa2>
 8006702:	232d      	movs	r3, #45	; 0x2d
 8006704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006708:	e797      	b.n	800663a <_printf_float+0xa2>
 800670a:	2947      	cmp	r1, #71	; 0x47
 800670c:	d1bc      	bne.n	8006688 <_printf_float+0xf0>
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1ba      	bne.n	8006688 <_printf_float+0xf0>
 8006712:	2301      	movs	r3, #1
 8006714:	e7b7      	b.n	8006686 <_printf_float+0xee>
 8006716:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800671a:	d118      	bne.n	800674e <_printf_float+0x1b6>
 800671c:	2900      	cmp	r1, #0
 800671e:	6863      	ldr	r3, [r4, #4]
 8006720:	dd0b      	ble.n	800673a <_printf_float+0x1a2>
 8006722:	6121      	str	r1, [r4, #16]
 8006724:	b913      	cbnz	r3, 800672c <_printf_float+0x194>
 8006726:	6822      	ldr	r2, [r4, #0]
 8006728:	07d0      	lsls	r0, r2, #31
 800672a:	d502      	bpl.n	8006732 <_printf_float+0x19a>
 800672c:	3301      	adds	r3, #1
 800672e:	440b      	add	r3, r1
 8006730:	6123      	str	r3, [r4, #16]
 8006732:	f04f 0a00 	mov.w	sl, #0
 8006736:	65a1      	str	r1, [r4, #88]	; 0x58
 8006738:	e7df      	b.n	80066fa <_printf_float+0x162>
 800673a:	b913      	cbnz	r3, 8006742 <_printf_float+0x1aa>
 800673c:	6822      	ldr	r2, [r4, #0]
 800673e:	07d2      	lsls	r2, r2, #31
 8006740:	d501      	bpl.n	8006746 <_printf_float+0x1ae>
 8006742:	3302      	adds	r3, #2
 8006744:	e7f4      	b.n	8006730 <_printf_float+0x198>
 8006746:	2301      	movs	r3, #1
 8006748:	e7f2      	b.n	8006730 <_printf_float+0x198>
 800674a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800674e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006750:	4299      	cmp	r1, r3
 8006752:	db05      	blt.n	8006760 <_printf_float+0x1c8>
 8006754:	6823      	ldr	r3, [r4, #0]
 8006756:	6121      	str	r1, [r4, #16]
 8006758:	07d8      	lsls	r0, r3, #31
 800675a:	d5ea      	bpl.n	8006732 <_printf_float+0x19a>
 800675c:	1c4b      	adds	r3, r1, #1
 800675e:	e7e7      	b.n	8006730 <_printf_float+0x198>
 8006760:	2900      	cmp	r1, #0
 8006762:	bfcc      	ite	gt
 8006764:	2201      	movgt	r2, #1
 8006766:	f1c1 0202 	rsble	r2, r1, #2
 800676a:	4413      	add	r3, r2
 800676c:	e7e0      	b.n	8006730 <_printf_float+0x198>
 800676e:	6823      	ldr	r3, [r4, #0]
 8006770:	055a      	lsls	r2, r3, #21
 8006772:	d407      	bmi.n	8006784 <_printf_float+0x1ec>
 8006774:	6923      	ldr	r3, [r4, #16]
 8006776:	4642      	mov	r2, r8
 8006778:	4631      	mov	r1, r6
 800677a:	4628      	mov	r0, r5
 800677c:	47b8      	blx	r7
 800677e:	3001      	adds	r0, #1
 8006780:	d12b      	bne.n	80067da <_printf_float+0x242>
 8006782:	e764      	b.n	800664e <_printf_float+0xb6>
 8006784:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006788:	f240 80dd 	bls.w	8006946 <_printf_float+0x3ae>
 800678c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006790:	2200      	movs	r2, #0
 8006792:	2300      	movs	r3, #0
 8006794:	f7fa f908 	bl	80009a8 <__aeabi_dcmpeq>
 8006798:	2800      	cmp	r0, #0
 800679a:	d033      	beq.n	8006804 <_printf_float+0x26c>
 800679c:	2301      	movs	r3, #1
 800679e:	4631      	mov	r1, r6
 80067a0:	4628      	mov	r0, r5
 80067a2:	4a35      	ldr	r2, [pc, #212]	; (8006878 <_printf_float+0x2e0>)
 80067a4:	47b8      	blx	r7
 80067a6:	3001      	adds	r0, #1
 80067a8:	f43f af51 	beq.w	800664e <_printf_float+0xb6>
 80067ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80067b0:	429a      	cmp	r2, r3
 80067b2:	db02      	blt.n	80067ba <_printf_float+0x222>
 80067b4:	6823      	ldr	r3, [r4, #0]
 80067b6:	07d8      	lsls	r0, r3, #31
 80067b8:	d50f      	bpl.n	80067da <_printf_float+0x242>
 80067ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067be:	4631      	mov	r1, r6
 80067c0:	4628      	mov	r0, r5
 80067c2:	47b8      	blx	r7
 80067c4:	3001      	adds	r0, #1
 80067c6:	f43f af42 	beq.w	800664e <_printf_float+0xb6>
 80067ca:	f04f 0800 	mov.w	r8, #0
 80067ce:	f104 091a 	add.w	r9, r4, #26
 80067d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067d4:	3b01      	subs	r3, #1
 80067d6:	4543      	cmp	r3, r8
 80067d8:	dc09      	bgt.n	80067ee <_printf_float+0x256>
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	079b      	lsls	r3, r3, #30
 80067de:	f100 8102 	bmi.w	80069e6 <_printf_float+0x44e>
 80067e2:	68e0      	ldr	r0, [r4, #12]
 80067e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067e6:	4298      	cmp	r0, r3
 80067e8:	bfb8      	it	lt
 80067ea:	4618      	movlt	r0, r3
 80067ec:	e731      	b.n	8006652 <_printf_float+0xba>
 80067ee:	2301      	movs	r3, #1
 80067f0:	464a      	mov	r2, r9
 80067f2:	4631      	mov	r1, r6
 80067f4:	4628      	mov	r0, r5
 80067f6:	47b8      	blx	r7
 80067f8:	3001      	adds	r0, #1
 80067fa:	f43f af28 	beq.w	800664e <_printf_float+0xb6>
 80067fe:	f108 0801 	add.w	r8, r8, #1
 8006802:	e7e6      	b.n	80067d2 <_printf_float+0x23a>
 8006804:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006806:	2b00      	cmp	r3, #0
 8006808:	dc38      	bgt.n	800687c <_printf_float+0x2e4>
 800680a:	2301      	movs	r3, #1
 800680c:	4631      	mov	r1, r6
 800680e:	4628      	mov	r0, r5
 8006810:	4a19      	ldr	r2, [pc, #100]	; (8006878 <_printf_float+0x2e0>)
 8006812:	47b8      	blx	r7
 8006814:	3001      	adds	r0, #1
 8006816:	f43f af1a 	beq.w	800664e <_printf_float+0xb6>
 800681a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800681e:	4313      	orrs	r3, r2
 8006820:	d102      	bne.n	8006828 <_printf_float+0x290>
 8006822:	6823      	ldr	r3, [r4, #0]
 8006824:	07d9      	lsls	r1, r3, #31
 8006826:	d5d8      	bpl.n	80067da <_printf_float+0x242>
 8006828:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800682c:	4631      	mov	r1, r6
 800682e:	4628      	mov	r0, r5
 8006830:	47b8      	blx	r7
 8006832:	3001      	adds	r0, #1
 8006834:	f43f af0b 	beq.w	800664e <_printf_float+0xb6>
 8006838:	f04f 0900 	mov.w	r9, #0
 800683c:	f104 0a1a 	add.w	sl, r4, #26
 8006840:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006842:	425b      	negs	r3, r3
 8006844:	454b      	cmp	r3, r9
 8006846:	dc01      	bgt.n	800684c <_printf_float+0x2b4>
 8006848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800684a:	e794      	b.n	8006776 <_printf_float+0x1de>
 800684c:	2301      	movs	r3, #1
 800684e:	4652      	mov	r2, sl
 8006850:	4631      	mov	r1, r6
 8006852:	4628      	mov	r0, r5
 8006854:	47b8      	blx	r7
 8006856:	3001      	adds	r0, #1
 8006858:	f43f aef9 	beq.w	800664e <_printf_float+0xb6>
 800685c:	f109 0901 	add.w	r9, r9, #1
 8006860:	e7ee      	b.n	8006840 <_printf_float+0x2a8>
 8006862:	bf00      	nop
 8006864:	7fefffff 	.word	0x7fefffff
 8006868:	0800a9f0 	.word	0x0800a9f0
 800686c:	0800a9f4 	.word	0x0800a9f4
 8006870:	0800a9fc 	.word	0x0800a9fc
 8006874:	0800a9f8 	.word	0x0800a9f8
 8006878:	0800aa00 	.word	0x0800aa00
 800687c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800687e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006880:	429a      	cmp	r2, r3
 8006882:	bfa8      	it	ge
 8006884:	461a      	movge	r2, r3
 8006886:	2a00      	cmp	r2, #0
 8006888:	4691      	mov	r9, r2
 800688a:	dc37      	bgt.n	80068fc <_printf_float+0x364>
 800688c:	f04f 0b00 	mov.w	fp, #0
 8006890:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006894:	f104 021a 	add.w	r2, r4, #26
 8006898:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800689c:	ebaa 0309 	sub.w	r3, sl, r9
 80068a0:	455b      	cmp	r3, fp
 80068a2:	dc33      	bgt.n	800690c <_printf_float+0x374>
 80068a4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80068a8:	429a      	cmp	r2, r3
 80068aa:	db3b      	blt.n	8006924 <_printf_float+0x38c>
 80068ac:	6823      	ldr	r3, [r4, #0]
 80068ae:	07da      	lsls	r2, r3, #31
 80068b0:	d438      	bmi.n	8006924 <_printf_float+0x38c>
 80068b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068b4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80068b6:	eba3 020a 	sub.w	r2, r3, sl
 80068ba:	eba3 0901 	sub.w	r9, r3, r1
 80068be:	4591      	cmp	r9, r2
 80068c0:	bfa8      	it	ge
 80068c2:	4691      	movge	r9, r2
 80068c4:	f1b9 0f00 	cmp.w	r9, #0
 80068c8:	dc34      	bgt.n	8006934 <_printf_float+0x39c>
 80068ca:	f04f 0800 	mov.w	r8, #0
 80068ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068d2:	f104 0a1a 	add.w	sl, r4, #26
 80068d6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80068da:	1a9b      	subs	r3, r3, r2
 80068dc:	eba3 0309 	sub.w	r3, r3, r9
 80068e0:	4543      	cmp	r3, r8
 80068e2:	f77f af7a 	ble.w	80067da <_printf_float+0x242>
 80068e6:	2301      	movs	r3, #1
 80068e8:	4652      	mov	r2, sl
 80068ea:	4631      	mov	r1, r6
 80068ec:	4628      	mov	r0, r5
 80068ee:	47b8      	blx	r7
 80068f0:	3001      	adds	r0, #1
 80068f2:	f43f aeac 	beq.w	800664e <_printf_float+0xb6>
 80068f6:	f108 0801 	add.w	r8, r8, #1
 80068fa:	e7ec      	b.n	80068d6 <_printf_float+0x33e>
 80068fc:	4613      	mov	r3, r2
 80068fe:	4631      	mov	r1, r6
 8006900:	4642      	mov	r2, r8
 8006902:	4628      	mov	r0, r5
 8006904:	47b8      	blx	r7
 8006906:	3001      	adds	r0, #1
 8006908:	d1c0      	bne.n	800688c <_printf_float+0x2f4>
 800690a:	e6a0      	b.n	800664e <_printf_float+0xb6>
 800690c:	2301      	movs	r3, #1
 800690e:	4631      	mov	r1, r6
 8006910:	4628      	mov	r0, r5
 8006912:	920b      	str	r2, [sp, #44]	; 0x2c
 8006914:	47b8      	blx	r7
 8006916:	3001      	adds	r0, #1
 8006918:	f43f ae99 	beq.w	800664e <_printf_float+0xb6>
 800691c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800691e:	f10b 0b01 	add.w	fp, fp, #1
 8006922:	e7b9      	b.n	8006898 <_printf_float+0x300>
 8006924:	4631      	mov	r1, r6
 8006926:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800692a:	4628      	mov	r0, r5
 800692c:	47b8      	blx	r7
 800692e:	3001      	adds	r0, #1
 8006930:	d1bf      	bne.n	80068b2 <_printf_float+0x31a>
 8006932:	e68c      	b.n	800664e <_printf_float+0xb6>
 8006934:	464b      	mov	r3, r9
 8006936:	4631      	mov	r1, r6
 8006938:	4628      	mov	r0, r5
 800693a:	eb08 020a 	add.w	r2, r8, sl
 800693e:	47b8      	blx	r7
 8006940:	3001      	adds	r0, #1
 8006942:	d1c2      	bne.n	80068ca <_printf_float+0x332>
 8006944:	e683      	b.n	800664e <_printf_float+0xb6>
 8006946:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006948:	2a01      	cmp	r2, #1
 800694a:	dc01      	bgt.n	8006950 <_printf_float+0x3b8>
 800694c:	07db      	lsls	r3, r3, #31
 800694e:	d537      	bpl.n	80069c0 <_printf_float+0x428>
 8006950:	2301      	movs	r3, #1
 8006952:	4642      	mov	r2, r8
 8006954:	4631      	mov	r1, r6
 8006956:	4628      	mov	r0, r5
 8006958:	47b8      	blx	r7
 800695a:	3001      	adds	r0, #1
 800695c:	f43f ae77 	beq.w	800664e <_printf_float+0xb6>
 8006960:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006964:	4631      	mov	r1, r6
 8006966:	4628      	mov	r0, r5
 8006968:	47b8      	blx	r7
 800696a:	3001      	adds	r0, #1
 800696c:	f43f ae6f 	beq.w	800664e <_printf_float+0xb6>
 8006970:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006974:	2200      	movs	r2, #0
 8006976:	2300      	movs	r3, #0
 8006978:	f7fa f816 	bl	80009a8 <__aeabi_dcmpeq>
 800697c:	b9d8      	cbnz	r0, 80069b6 <_printf_float+0x41e>
 800697e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006980:	f108 0201 	add.w	r2, r8, #1
 8006984:	3b01      	subs	r3, #1
 8006986:	4631      	mov	r1, r6
 8006988:	4628      	mov	r0, r5
 800698a:	47b8      	blx	r7
 800698c:	3001      	adds	r0, #1
 800698e:	d10e      	bne.n	80069ae <_printf_float+0x416>
 8006990:	e65d      	b.n	800664e <_printf_float+0xb6>
 8006992:	2301      	movs	r3, #1
 8006994:	464a      	mov	r2, r9
 8006996:	4631      	mov	r1, r6
 8006998:	4628      	mov	r0, r5
 800699a:	47b8      	blx	r7
 800699c:	3001      	adds	r0, #1
 800699e:	f43f ae56 	beq.w	800664e <_printf_float+0xb6>
 80069a2:	f108 0801 	add.w	r8, r8, #1
 80069a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069a8:	3b01      	subs	r3, #1
 80069aa:	4543      	cmp	r3, r8
 80069ac:	dcf1      	bgt.n	8006992 <_printf_float+0x3fa>
 80069ae:	4653      	mov	r3, sl
 80069b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80069b4:	e6e0      	b.n	8006778 <_printf_float+0x1e0>
 80069b6:	f04f 0800 	mov.w	r8, #0
 80069ba:	f104 091a 	add.w	r9, r4, #26
 80069be:	e7f2      	b.n	80069a6 <_printf_float+0x40e>
 80069c0:	2301      	movs	r3, #1
 80069c2:	4642      	mov	r2, r8
 80069c4:	e7df      	b.n	8006986 <_printf_float+0x3ee>
 80069c6:	2301      	movs	r3, #1
 80069c8:	464a      	mov	r2, r9
 80069ca:	4631      	mov	r1, r6
 80069cc:	4628      	mov	r0, r5
 80069ce:	47b8      	blx	r7
 80069d0:	3001      	adds	r0, #1
 80069d2:	f43f ae3c 	beq.w	800664e <_printf_float+0xb6>
 80069d6:	f108 0801 	add.w	r8, r8, #1
 80069da:	68e3      	ldr	r3, [r4, #12]
 80069dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80069de:	1a5b      	subs	r3, r3, r1
 80069e0:	4543      	cmp	r3, r8
 80069e2:	dcf0      	bgt.n	80069c6 <_printf_float+0x42e>
 80069e4:	e6fd      	b.n	80067e2 <_printf_float+0x24a>
 80069e6:	f04f 0800 	mov.w	r8, #0
 80069ea:	f104 0919 	add.w	r9, r4, #25
 80069ee:	e7f4      	b.n	80069da <_printf_float+0x442>

080069f0 <_printf_common>:
 80069f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069f4:	4616      	mov	r6, r2
 80069f6:	4699      	mov	r9, r3
 80069f8:	688a      	ldr	r2, [r1, #8]
 80069fa:	690b      	ldr	r3, [r1, #16]
 80069fc:	4607      	mov	r7, r0
 80069fe:	4293      	cmp	r3, r2
 8006a00:	bfb8      	it	lt
 8006a02:	4613      	movlt	r3, r2
 8006a04:	6033      	str	r3, [r6, #0]
 8006a06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a0a:	460c      	mov	r4, r1
 8006a0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a10:	b10a      	cbz	r2, 8006a16 <_printf_common+0x26>
 8006a12:	3301      	adds	r3, #1
 8006a14:	6033      	str	r3, [r6, #0]
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	0699      	lsls	r1, r3, #26
 8006a1a:	bf42      	ittt	mi
 8006a1c:	6833      	ldrmi	r3, [r6, #0]
 8006a1e:	3302      	addmi	r3, #2
 8006a20:	6033      	strmi	r3, [r6, #0]
 8006a22:	6825      	ldr	r5, [r4, #0]
 8006a24:	f015 0506 	ands.w	r5, r5, #6
 8006a28:	d106      	bne.n	8006a38 <_printf_common+0x48>
 8006a2a:	f104 0a19 	add.w	sl, r4, #25
 8006a2e:	68e3      	ldr	r3, [r4, #12]
 8006a30:	6832      	ldr	r2, [r6, #0]
 8006a32:	1a9b      	subs	r3, r3, r2
 8006a34:	42ab      	cmp	r3, r5
 8006a36:	dc28      	bgt.n	8006a8a <_printf_common+0x9a>
 8006a38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a3c:	1e13      	subs	r3, r2, #0
 8006a3e:	6822      	ldr	r2, [r4, #0]
 8006a40:	bf18      	it	ne
 8006a42:	2301      	movne	r3, #1
 8006a44:	0692      	lsls	r2, r2, #26
 8006a46:	d42d      	bmi.n	8006aa4 <_printf_common+0xb4>
 8006a48:	4649      	mov	r1, r9
 8006a4a:	4638      	mov	r0, r7
 8006a4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a50:	47c0      	blx	r8
 8006a52:	3001      	adds	r0, #1
 8006a54:	d020      	beq.n	8006a98 <_printf_common+0xa8>
 8006a56:	6823      	ldr	r3, [r4, #0]
 8006a58:	68e5      	ldr	r5, [r4, #12]
 8006a5a:	f003 0306 	and.w	r3, r3, #6
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	bf18      	it	ne
 8006a62:	2500      	movne	r5, #0
 8006a64:	6832      	ldr	r2, [r6, #0]
 8006a66:	f04f 0600 	mov.w	r6, #0
 8006a6a:	68a3      	ldr	r3, [r4, #8]
 8006a6c:	bf08      	it	eq
 8006a6e:	1aad      	subeq	r5, r5, r2
 8006a70:	6922      	ldr	r2, [r4, #16]
 8006a72:	bf08      	it	eq
 8006a74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	bfc4      	itt	gt
 8006a7c:	1a9b      	subgt	r3, r3, r2
 8006a7e:	18ed      	addgt	r5, r5, r3
 8006a80:	341a      	adds	r4, #26
 8006a82:	42b5      	cmp	r5, r6
 8006a84:	d11a      	bne.n	8006abc <_printf_common+0xcc>
 8006a86:	2000      	movs	r0, #0
 8006a88:	e008      	b.n	8006a9c <_printf_common+0xac>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	4652      	mov	r2, sl
 8006a8e:	4649      	mov	r1, r9
 8006a90:	4638      	mov	r0, r7
 8006a92:	47c0      	blx	r8
 8006a94:	3001      	adds	r0, #1
 8006a96:	d103      	bne.n	8006aa0 <_printf_common+0xb0>
 8006a98:	f04f 30ff 	mov.w	r0, #4294967295
 8006a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aa0:	3501      	adds	r5, #1
 8006aa2:	e7c4      	b.n	8006a2e <_printf_common+0x3e>
 8006aa4:	2030      	movs	r0, #48	; 0x30
 8006aa6:	18e1      	adds	r1, r4, r3
 8006aa8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006aac:	1c5a      	adds	r2, r3, #1
 8006aae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ab2:	4422      	add	r2, r4
 8006ab4:	3302      	adds	r3, #2
 8006ab6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006aba:	e7c5      	b.n	8006a48 <_printf_common+0x58>
 8006abc:	2301      	movs	r3, #1
 8006abe:	4622      	mov	r2, r4
 8006ac0:	4649      	mov	r1, r9
 8006ac2:	4638      	mov	r0, r7
 8006ac4:	47c0      	blx	r8
 8006ac6:	3001      	adds	r0, #1
 8006ac8:	d0e6      	beq.n	8006a98 <_printf_common+0xa8>
 8006aca:	3601      	adds	r6, #1
 8006acc:	e7d9      	b.n	8006a82 <_printf_common+0x92>
	...

08006ad0 <_printf_i>:
 8006ad0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ad4:	7e0f      	ldrb	r7, [r1, #24]
 8006ad6:	4691      	mov	r9, r2
 8006ad8:	2f78      	cmp	r7, #120	; 0x78
 8006ada:	4680      	mov	r8, r0
 8006adc:	460c      	mov	r4, r1
 8006ade:	469a      	mov	sl, r3
 8006ae0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ae2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ae6:	d807      	bhi.n	8006af8 <_printf_i+0x28>
 8006ae8:	2f62      	cmp	r7, #98	; 0x62
 8006aea:	d80a      	bhi.n	8006b02 <_printf_i+0x32>
 8006aec:	2f00      	cmp	r7, #0
 8006aee:	f000 80d9 	beq.w	8006ca4 <_printf_i+0x1d4>
 8006af2:	2f58      	cmp	r7, #88	; 0x58
 8006af4:	f000 80a4 	beq.w	8006c40 <_printf_i+0x170>
 8006af8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006afc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b00:	e03a      	b.n	8006b78 <_printf_i+0xa8>
 8006b02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b06:	2b15      	cmp	r3, #21
 8006b08:	d8f6      	bhi.n	8006af8 <_printf_i+0x28>
 8006b0a:	a101      	add	r1, pc, #4	; (adr r1, 8006b10 <_printf_i+0x40>)
 8006b0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b10:	08006b69 	.word	0x08006b69
 8006b14:	08006b7d 	.word	0x08006b7d
 8006b18:	08006af9 	.word	0x08006af9
 8006b1c:	08006af9 	.word	0x08006af9
 8006b20:	08006af9 	.word	0x08006af9
 8006b24:	08006af9 	.word	0x08006af9
 8006b28:	08006b7d 	.word	0x08006b7d
 8006b2c:	08006af9 	.word	0x08006af9
 8006b30:	08006af9 	.word	0x08006af9
 8006b34:	08006af9 	.word	0x08006af9
 8006b38:	08006af9 	.word	0x08006af9
 8006b3c:	08006c8b 	.word	0x08006c8b
 8006b40:	08006bad 	.word	0x08006bad
 8006b44:	08006c6d 	.word	0x08006c6d
 8006b48:	08006af9 	.word	0x08006af9
 8006b4c:	08006af9 	.word	0x08006af9
 8006b50:	08006cad 	.word	0x08006cad
 8006b54:	08006af9 	.word	0x08006af9
 8006b58:	08006bad 	.word	0x08006bad
 8006b5c:	08006af9 	.word	0x08006af9
 8006b60:	08006af9 	.word	0x08006af9
 8006b64:	08006c75 	.word	0x08006c75
 8006b68:	682b      	ldr	r3, [r5, #0]
 8006b6a:	1d1a      	adds	r2, r3, #4
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	602a      	str	r2, [r5, #0]
 8006b70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e0a4      	b.n	8006cc6 <_printf_i+0x1f6>
 8006b7c:	6820      	ldr	r0, [r4, #0]
 8006b7e:	6829      	ldr	r1, [r5, #0]
 8006b80:	0606      	lsls	r6, r0, #24
 8006b82:	f101 0304 	add.w	r3, r1, #4
 8006b86:	d50a      	bpl.n	8006b9e <_printf_i+0xce>
 8006b88:	680e      	ldr	r6, [r1, #0]
 8006b8a:	602b      	str	r3, [r5, #0]
 8006b8c:	2e00      	cmp	r6, #0
 8006b8e:	da03      	bge.n	8006b98 <_printf_i+0xc8>
 8006b90:	232d      	movs	r3, #45	; 0x2d
 8006b92:	4276      	negs	r6, r6
 8006b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b98:	230a      	movs	r3, #10
 8006b9a:	485e      	ldr	r0, [pc, #376]	; (8006d14 <_printf_i+0x244>)
 8006b9c:	e019      	b.n	8006bd2 <_printf_i+0x102>
 8006b9e:	680e      	ldr	r6, [r1, #0]
 8006ba0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ba4:	602b      	str	r3, [r5, #0]
 8006ba6:	bf18      	it	ne
 8006ba8:	b236      	sxthne	r6, r6
 8006baa:	e7ef      	b.n	8006b8c <_printf_i+0xbc>
 8006bac:	682b      	ldr	r3, [r5, #0]
 8006bae:	6820      	ldr	r0, [r4, #0]
 8006bb0:	1d19      	adds	r1, r3, #4
 8006bb2:	6029      	str	r1, [r5, #0]
 8006bb4:	0601      	lsls	r1, r0, #24
 8006bb6:	d501      	bpl.n	8006bbc <_printf_i+0xec>
 8006bb8:	681e      	ldr	r6, [r3, #0]
 8006bba:	e002      	b.n	8006bc2 <_printf_i+0xf2>
 8006bbc:	0646      	lsls	r6, r0, #25
 8006bbe:	d5fb      	bpl.n	8006bb8 <_printf_i+0xe8>
 8006bc0:	881e      	ldrh	r6, [r3, #0]
 8006bc2:	2f6f      	cmp	r7, #111	; 0x6f
 8006bc4:	bf0c      	ite	eq
 8006bc6:	2308      	moveq	r3, #8
 8006bc8:	230a      	movne	r3, #10
 8006bca:	4852      	ldr	r0, [pc, #328]	; (8006d14 <_printf_i+0x244>)
 8006bcc:	2100      	movs	r1, #0
 8006bce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006bd2:	6865      	ldr	r5, [r4, #4]
 8006bd4:	2d00      	cmp	r5, #0
 8006bd6:	bfa8      	it	ge
 8006bd8:	6821      	ldrge	r1, [r4, #0]
 8006bda:	60a5      	str	r5, [r4, #8]
 8006bdc:	bfa4      	itt	ge
 8006bde:	f021 0104 	bicge.w	r1, r1, #4
 8006be2:	6021      	strge	r1, [r4, #0]
 8006be4:	b90e      	cbnz	r6, 8006bea <_printf_i+0x11a>
 8006be6:	2d00      	cmp	r5, #0
 8006be8:	d04d      	beq.n	8006c86 <_printf_i+0x1b6>
 8006bea:	4615      	mov	r5, r2
 8006bec:	fbb6 f1f3 	udiv	r1, r6, r3
 8006bf0:	fb03 6711 	mls	r7, r3, r1, r6
 8006bf4:	5dc7      	ldrb	r7, [r0, r7]
 8006bf6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006bfa:	4637      	mov	r7, r6
 8006bfc:	42bb      	cmp	r3, r7
 8006bfe:	460e      	mov	r6, r1
 8006c00:	d9f4      	bls.n	8006bec <_printf_i+0x11c>
 8006c02:	2b08      	cmp	r3, #8
 8006c04:	d10b      	bne.n	8006c1e <_printf_i+0x14e>
 8006c06:	6823      	ldr	r3, [r4, #0]
 8006c08:	07de      	lsls	r6, r3, #31
 8006c0a:	d508      	bpl.n	8006c1e <_printf_i+0x14e>
 8006c0c:	6923      	ldr	r3, [r4, #16]
 8006c0e:	6861      	ldr	r1, [r4, #4]
 8006c10:	4299      	cmp	r1, r3
 8006c12:	bfde      	ittt	le
 8006c14:	2330      	movle	r3, #48	; 0x30
 8006c16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c1e:	1b52      	subs	r2, r2, r5
 8006c20:	6122      	str	r2, [r4, #16]
 8006c22:	464b      	mov	r3, r9
 8006c24:	4621      	mov	r1, r4
 8006c26:	4640      	mov	r0, r8
 8006c28:	f8cd a000 	str.w	sl, [sp]
 8006c2c:	aa03      	add	r2, sp, #12
 8006c2e:	f7ff fedf 	bl	80069f0 <_printf_common>
 8006c32:	3001      	adds	r0, #1
 8006c34:	d14c      	bne.n	8006cd0 <_printf_i+0x200>
 8006c36:	f04f 30ff 	mov.w	r0, #4294967295
 8006c3a:	b004      	add	sp, #16
 8006c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c40:	4834      	ldr	r0, [pc, #208]	; (8006d14 <_printf_i+0x244>)
 8006c42:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006c46:	6829      	ldr	r1, [r5, #0]
 8006c48:	6823      	ldr	r3, [r4, #0]
 8006c4a:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c4e:	6029      	str	r1, [r5, #0]
 8006c50:	061d      	lsls	r5, r3, #24
 8006c52:	d514      	bpl.n	8006c7e <_printf_i+0x1ae>
 8006c54:	07df      	lsls	r7, r3, #31
 8006c56:	bf44      	itt	mi
 8006c58:	f043 0320 	orrmi.w	r3, r3, #32
 8006c5c:	6023      	strmi	r3, [r4, #0]
 8006c5e:	b91e      	cbnz	r6, 8006c68 <_printf_i+0x198>
 8006c60:	6823      	ldr	r3, [r4, #0]
 8006c62:	f023 0320 	bic.w	r3, r3, #32
 8006c66:	6023      	str	r3, [r4, #0]
 8006c68:	2310      	movs	r3, #16
 8006c6a:	e7af      	b.n	8006bcc <_printf_i+0xfc>
 8006c6c:	6823      	ldr	r3, [r4, #0]
 8006c6e:	f043 0320 	orr.w	r3, r3, #32
 8006c72:	6023      	str	r3, [r4, #0]
 8006c74:	2378      	movs	r3, #120	; 0x78
 8006c76:	4828      	ldr	r0, [pc, #160]	; (8006d18 <_printf_i+0x248>)
 8006c78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c7c:	e7e3      	b.n	8006c46 <_printf_i+0x176>
 8006c7e:	0659      	lsls	r1, r3, #25
 8006c80:	bf48      	it	mi
 8006c82:	b2b6      	uxthmi	r6, r6
 8006c84:	e7e6      	b.n	8006c54 <_printf_i+0x184>
 8006c86:	4615      	mov	r5, r2
 8006c88:	e7bb      	b.n	8006c02 <_printf_i+0x132>
 8006c8a:	682b      	ldr	r3, [r5, #0]
 8006c8c:	6826      	ldr	r6, [r4, #0]
 8006c8e:	1d18      	adds	r0, r3, #4
 8006c90:	6961      	ldr	r1, [r4, #20]
 8006c92:	6028      	str	r0, [r5, #0]
 8006c94:	0635      	lsls	r5, r6, #24
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	d501      	bpl.n	8006c9e <_printf_i+0x1ce>
 8006c9a:	6019      	str	r1, [r3, #0]
 8006c9c:	e002      	b.n	8006ca4 <_printf_i+0x1d4>
 8006c9e:	0670      	lsls	r0, r6, #25
 8006ca0:	d5fb      	bpl.n	8006c9a <_printf_i+0x1ca>
 8006ca2:	8019      	strh	r1, [r3, #0]
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	4615      	mov	r5, r2
 8006ca8:	6123      	str	r3, [r4, #16]
 8006caa:	e7ba      	b.n	8006c22 <_printf_i+0x152>
 8006cac:	682b      	ldr	r3, [r5, #0]
 8006cae:	2100      	movs	r1, #0
 8006cb0:	1d1a      	adds	r2, r3, #4
 8006cb2:	602a      	str	r2, [r5, #0]
 8006cb4:	681d      	ldr	r5, [r3, #0]
 8006cb6:	6862      	ldr	r2, [r4, #4]
 8006cb8:	4628      	mov	r0, r5
 8006cba:	f002 f923 	bl	8008f04 <memchr>
 8006cbe:	b108      	cbz	r0, 8006cc4 <_printf_i+0x1f4>
 8006cc0:	1b40      	subs	r0, r0, r5
 8006cc2:	6060      	str	r0, [r4, #4]
 8006cc4:	6863      	ldr	r3, [r4, #4]
 8006cc6:	6123      	str	r3, [r4, #16]
 8006cc8:	2300      	movs	r3, #0
 8006cca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cce:	e7a8      	b.n	8006c22 <_printf_i+0x152>
 8006cd0:	462a      	mov	r2, r5
 8006cd2:	4649      	mov	r1, r9
 8006cd4:	4640      	mov	r0, r8
 8006cd6:	6923      	ldr	r3, [r4, #16]
 8006cd8:	47d0      	blx	sl
 8006cda:	3001      	adds	r0, #1
 8006cdc:	d0ab      	beq.n	8006c36 <_printf_i+0x166>
 8006cde:	6823      	ldr	r3, [r4, #0]
 8006ce0:	079b      	lsls	r3, r3, #30
 8006ce2:	d413      	bmi.n	8006d0c <_printf_i+0x23c>
 8006ce4:	68e0      	ldr	r0, [r4, #12]
 8006ce6:	9b03      	ldr	r3, [sp, #12]
 8006ce8:	4298      	cmp	r0, r3
 8006cea:	bfb8      	it	lt
 8006cec:	4618      	movlt	r0, r3
 8006cee:	e7a4      	b.n	8006c3a <_printf_i+0x16a>
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	4632      	mov	r2, r6
 8006cf4:	4649      	mov	r1, r9
 8006cf6:	4640      	mov	r0, r8
 8006cf8:	47d0      	blx	sl
 8006cfa:	3001      	adds	r0, #1
 8006cfc:	d09b      	beq.n	8006c36 <_printf_i+0x166>
 8006cfe:	3501      	adds	r5, #1
 8006d00:	68e3      	ldr	r3, [r4, #12]
 8006d02:	9903      	ldr	r1, [sp, #12]
 8006d04:	1a5b      	subs	r3, r3, r1
 8006d06:	42ab      	cmp	r3, r5
 8006d08:	dcf2      	bgt.n	8006cf0 <_printf_i+0x220>
 8006d0a:	e7eb      	b.n	8006ce4 <_printf_i+0x214>
 8006d0c:	2500      	movs	r5, #0
 8006d0e:	f104 0619 	add.w	r6, r4, #25
 8006d12:	e7f5      	b.n	8006d00 <_printf_i+0x230>
 8006d14:	0800aa02 	.word	0x0800aa02
 8006d18:	0800aa13 	.word	0x0800aa13

08006d1c <siprintf>:
 8006d1c:	b40e      	push	{r1, r2, r3}
 8006d1e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d22:	b500      	push	{lr}
 8006d24:	b09c      	sub	sp, #112	; 0x70
 8006d26:	ab1d      	add	r3, sp, #116	; 0x74
 8006d28:	9002      	str	r0, [sp, #8]
 8006d2a:	9006      	str	r0, [sp, #24]
 8006d2c:	9107      	str	r1, [sp, #28]
 8006d2e:	9104      	str	r1, [sp, #16]
 8006d30:	4808      	ldr	r0, [pc, #32]	; (8006d54 <siprintf+0x38>)
 8006d32:	4909      	ldr	r1, [pc, #36]	; (8006d58 <siprintf+0x3c>)
 8006d34:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d38:	9105      	str	r1, [sp, #20]
 8006d3a:	6800      	ldr	r0, [r0, #0]
 8006d3c:	a902      	add	r1, sp, #8
 8006d3e:	9301      	str	r3, [sp, #4]
 8006d40:	f002 ff00 	bl	8009b44 <_svfiprintf_r>
 8006d44:	2200      	movs	r2, #0
 8006d46:	9b02      	ldr	r3, [sp, #8]
 8006d48:	701a      	strb	r2, [r3, #0]
 8006d4a:	b01c      	add	sp, #112	; 0x70
 8006d4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d50:	b003      	add	sp, #12
 8006d52:	4770      	bx	lr
 8006d54:	20000040 	.word	0x20000040
 8006d58:	ffff0208 	.word	0xffff0208

08006d5c <sulp>:
 8006d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d60:	460f      	mov	r7, r1
 8006d62:	4690      	mov	r8, r2
 8006d64:	f002 fc5a 	bl	800961c <__ulp>
 8006d68:	4604      	mov	r4, r0
 8006d6a:	460d      	mov	r5, r1
 8006d6c:	f1b8 0f00 	cmp.w	r8, #0
 8006d70:	d011      	beq.n	8006d96 <sulp+0x3a>
 8006d72:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006d76:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	dd0b      	ble.n	8006d96 <sulp+0x3a>
 8006d7e:	2400      	movs	r4, #0
 8006d80:	051b      	lsls	r3, r3, #20
 8006d82:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006d86:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006d8a:	4622      	mov	r2, r4
 8006d8c:	462b      	mov	r3, r5
 8006d8e:	f7f9 fba3 	bl	80004d8 <__aeabi_dmul>
 8006d92:	4604      	mov	r4, r0
 8006d94:	460d      	mov	r5, r1
 8006d96:	4620      	mov	r0, r4
 8006d98:	4629      	mov	r1, r5
 8006d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006da0 <_strtod_l>:
 8006da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da4:	469b      	mov	fp, r3
 8006da6:	2300      	movs	r3, #0
 8006da8:	b09f      	sub	sp, #124	; 0x7c
 8006daa:	931a      	str	r3, [sp, #104]	; 0x68
 8006dac:	4b9e      	ldr	r3, [pc, #632]	; (8007028 <_strtod_l+0x288>)
 8006dae:	4682      	mov	sl, r0
 8006db0:	681f      	ldr	r7, [r3, #0]
 8006db2:	460e      	mov	r6, r1
 8006db4:	4638      	mov	r0, r7
 8006db6:	9215      	str	r2, [sp, #84]	; 0x54
 8006db8:	f7f9 f9ca 	bl	8000150 <strlen>
 8006dbc:	f04f 0800 	mov.w	r8, #0
 8006dc0:	4604      	mov	r4, r0
 8006dc2:	f04f 0900 	mov.w	r9, #0
 8006dc6:	9619      	str	r6, [sp, #100]	; 0x64
 8006dc8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006dca:	781a      	ldrb	r2, [r3, #0]
 8006dcc:	2a2b      	cmp	r2, #43	; 0x2b
 8006dce:	d04c      	beq.n	8006e6a <_strtod_l+0xca>
 8006dd0:	d83a      	bhi.n	8006e48 <_strtod_l+0xa8>
 8006dd2:	2a0d      	cmp	r2, #13
 8006dd4:	d833      	bhi.n	8006e3e <_strtod_l+0x9e>
 8006dd6:	2a08      	cmp	r2, #8
 8006dd8:	d833      	bhi.n	8006e42 <_strtod_l+0xa2>
 8006dda:	2a00      	cmp	r2, #0
 8006ddc:	d03d      	beq.n	8006e5a <_strtod_l+0xba>
 8006dde:	2300      	movs	r3, #0
 8006de0:	930a      	str	r3, [sp, #40]	; 0x28
 8006de2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006de4:	782b      	ldrb	r3, [r5, #0]
 8006de6:	2b30      	cmp	r3, #48	; 0x30
 8006de8:	f040 80aa 	bne.w	8006f40 <_strtod_l+0x1a0>
 8006dec:	786b      	ldrb	r3, [r5, #1]
 8006dee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006df2:	2b58      	cmp	r3, #88	; 0x58
 8006df4:	d166      	bne.n	8006ec4 <_strtod_l+0x124>
 8006df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006df8:	4650      	mov	r0, sl
 8006dfa:	9301      	str	r3, [sp, #4]
 8006dfc:	ab1a      	add	r3, sp, #104	; 0x68
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	4a8a      	ldr	r2, [pc, #552]	; (800702c <_strtod_l+0x28c>)
 8006e02:	f8cd b008 	str.w	fp, [sp, #8]
 8006e06:	ab1b      	add	r3, sp, #108	; 0x6c
 8006e08:	a919      	add	r1, sp, #100	; 0x64
 8006e0a:	f001 fd5f 	bl	80088cc <__gethex>
 8006e0e:	f010 0607 	ands.w	r6, r0, #7
 8006e12:	4604      	mov	r4, r0
 8006e14:	d005      	beq.n	8006e22 <_strtod_l+0x82>
 8006e16:	2e06      	cmp	r6, #6
 8006e18:	d129      	bne.n	8006e6e <_strtod_l+0xce>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	3501      	adds	r5, #1
 8006e1e:	9519      	str	r5, [sp, #100]	; 0x64
 8006e20:	930a      	str	r3, [sp, #40]	; 0x28
 8006e22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f040 858a 	bne.w	800793e <_strtod_l+0xb9e>
 8006e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e2c:	b1d3      	cbz	r3, 8006e64 <_strtod_l+0xc4>
 8006e2e:	4642      	mov	r2, r8
 8006e30:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006e34:	4610      	mov	r0, r2
 8006e36:	4619      	mov	r1, r3
 8006e38:	b01f      	add	sp, #124	; 0x7c
 8006e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e3e:	2a20      	cmp	r2, #32
 8006e40:	d1cd      	bne.n	8006dde <_strtod_l+0x3e>
 8006e42:	3301      	adds	r3, #1
 8006e44:	9319      	str	r3, [sp, #100]	; 0x64
 8006e46:	e7bf      	b.n	8006dc8 <_strtod_l+0x28>
 8006e48:	2a2d      	cmp	r2, #45	; 0x2d
 8006e4a:	d1c8      	bne.n	8006dde <_strtod_l+0x3e>
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	920a      	str	r2, [sp, #40]	; 0x28
 8006e50:	1c5a      	adds	r2, r3, #1
 8006e52:	9219      	str	r2, [sp, #100]	; 0x64
 8006e54:	785b      	ldrb	r3, [r3, #1]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1c3      	bne.n	8006de2 <_strtod_l+0x42>
 8006e5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e5c:	9619      	str	r6, [sp, #100]	; 0x64
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f040 856b 	bne.w	800793a <_strtod_l+0xb9a>
 8006e64:	4642      	mov	r2, r8
 8006e66:	464b      	mov	r3, r9
 8006e68:	e7e4      	b.n	8006e34 <_strtod_l+0x94>
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	e7ef      	b.n	8006e4e <_strtod_l+0xae>
 8006e6e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006e70:	b13a      	cbz	r2, 8006e82 <_strtod_l+0xe2>
 8006e72:	2135      	movs	r1, #53	; 0x35
 8006e74:	a81c      	add	r0, sp, #112	; 0x70
 8006e76:	f002 fcd5 	bl	8009824 <__copybits>
 8006e7a:	4650      	mov	r0, sl
 8006e7c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006e7e:	f002 f89d 	bl	8008fbc <_Bfree>
 8006e82:	3e01      	subs	r6, #1
 8006e84:	2e04      	cmp	r6, #4
 8006e86:	d806      	bhi.n	8006e96 <_strtod_l+0xf6>
 8006e88:	e8df f006 	tbb	[pc, r6]
 8006e8c:	1714030a 	.word	0x1714030a
 8006e90:	0a          	.byte	0x0a
 8006e91:	00          	.byte	0x00
 8006e92:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006e96:	0721      	lsls	r1, r4, #28
 8006e98:	d5c3      	bpl.n	8006e22 <_strtod_l+0x82>
 8006e9a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006e9e:	e7c0      	b.n	8006e22 <_strtod_l+0x82>
 8006ea0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006ea2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8006ea6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006eaa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006eae:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006eb2:	e7f0      	b.n	8006e96 <_strtod_l+0xf6>
 8006eb4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007030 <_strtod_l+0x290>
 8006eb8:	e7ed      	b.n	8006e96 <_strtod_l+0xf6>
 8006eba:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006ebe:	f04f 38ff 	mov.w	r8, #4294967295
 8006ec2:	e7e8      	b.n	8006e96 <_strtod_l+0xf6>
 8006ec4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ec6:	1c5a      	adds	r2, r3, #1
 8006ec8:	9219      	str	r2, [sp, #100]	; 0x64
 8006eca:	785b      	ldrb	r3, [r3, #1]
 8006ecc:	2b30      	cmp	r3, #48	; 0x30
 8006ece:	d0f9      	beq.n	8006ec4 <_strtod_l+0x124>
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d0a6      	beq.n	8006e22 <_strtod_l+0x82>
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	9307      	str	r3, [sp, #28]
 8006ed8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006eda:	220a      	movs	r2, #10
 8006edc:	9308      	str	r3, [sp, #32]
 8006ede:	2300      	movs	r3, #0
 8006ee0:	469b      	mov	fp, r3
 8006ee2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006ee6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006ee8:	7805      	ldrb	r5, [r0, #0]
 8006eea:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006eee:	b2d9      	uxtb	r1, r3
 8006ef0:	2909      	cmp	r1, #9
 8006ef2:	d927      	bls.n	8006f44 <_strtod_l+0x1a4>
 8006ef4:	4622      	mov	r2, r4
 8006ef6:	4639      	mov	r1, r7
 8006ef8:	f002 ff3a 	bl	8009d70 <strncmp>
 8006efc:	2800      	cmp	r0, #0
 8006efe:	d033      	beq.n	8006f68 <_strtod_l+0x1c8>
 8006f00:	2000      	movs	r0, #0
 8006f02:	462a      	mov	r2, r5
 8006f04:	465c      	mov	r4, fp
 8006f06:	4603      	mov	r3, r0
 8006f08:	9004      	str	r0, [sp, #16]
 8006f0a:	2a65      	cmp	r2, #101	; 0x65
 8006f0c:	d001      	beq.n	8006f12 <_strtod_l+0x172>
 8006f0e:	2a45      	cmp	r2, #69	; 0x45
 8006f10:	d114      	bne.n	8006f3c <_strtod_l+0x19c>
 8006f12:	b91c      	cbnz	r4, 8006f1c <_strtod_l+0x17c>
 8006f14:	9a07      	ldr	r2, [sp, #28]
 8006f16:	4302      	orrs	r2, r0
 8006f18:	d09f      	beq.n	8006e5a <_strtod_l+0xba>
 8006f1a:	2400      	movs	r4, #0
 8006f1c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006f1e:	1c72      	adds	r2, r6, #1
 8006f20:	9219      	str	r2, [sp, #100]	; 0x64
 8006f22:	7872      	ldrb	r2, [r6, #1]
 8006f24:	2a2b      	cmp	r2, #43	; 0x2b
 8006f26:	d079      	beq.n	800701c <_strtod_l+0x27c>
 8006f28:	2a2d      	cmp	r2, #45	; 0x2d
 8006f2a:	f000 8083 	beq.w	8007034 <_strtod_l+0x294>
 8006f2e:	2700      	movs	r7, #0
 8006f30:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006f34:	2909      	cmp	r1, #9
 8006f36:	f240 8083 	bls.w	8007040 <_strtod_l+0x2a0>
 8006f3a:	9619      	str	r6, [sp, #100]	; 0x64
 8006f3c:	2500      	movs	r5, #0
 8006f3e:	e09f      	b.n	8007080 <_strtod_l+0x2e0>
 8006f40:	2300      	movs	r3, #0
 8006f42:	e7c8      	b.n	8006ed6 <_strtod_l+0x136>
 8006f44:	f1bb 0f08 	cmp.w	fp, #8
 8006f48:	bfd5      	itete	le
 8006f4a:	9906      	ldrle	r1, [sp, #24]
 8006f4c:	9905      	ldrgt	r1, [sp, #20]
 8006f4e:	fb02 3301 	mlale	r3, r2, r1, r3
 8006f52:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006f56:	f100 0001 	add.w	r0, r0, #1
 8006f5a:	bfd4      	ite	le
 8006f5c:	9306      	strle	r3, [sp, #24]
 8006f5e:	9305      	strgt	r3, [sp, #20]
 8006f60:	f10b 0b01 	add.w	fp, fp, #1
 8006f64:	9019      	str	r0, [sp, #100]	; 0x64
 8006f66:	e7be      	b.n	8006ee6 <_strtod_l+0x146>
 8006f68:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f6a:	191a      	adds	r2, r3, r4
 8006f6c:	9219      	str	r2, [sp, #100]	; 0x64
 8006f6e:	5d1a      	ldrb	r2, [r3, r4]
 8006f70:	f1bb 0f00 	cmp.w	fp, #0
 8006f74:	d036      	beq.n	8006fe4 <_strtod_l+0x244>
 8006f76:	465c      	mov	r4, fp
 8006f78:	9004      	str	r0, [sp, #16]
 8006f7a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006f7e:	2b09      	cmp	r3, #9
 8006f80:	d912      	bls.n	8006fa8 <_strtod_l+0x208>
 8006f82:	2301      	movs	r3, #1
 8006f84:	e7c1      	b.n	8006f0a <_strtod_l+0x16a>
 8006f86:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f88:	3001      	adds	r0, #1
 8006f8a:	1c5a      	adds	r2, r3, #1
 8006f8c:	9219      	str	r2, [sp, #100]	; 0x64
 8006f8e:	785a      	ldrb	r2, [r3, #1]
 8006f90:	2a30      	cmp	r2, #48	; 0x30
 8006f92:	d0f8      	beq.n	8006f86 <_strtod_l+0x1e6>
 8006f94:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006f98:	2b08      	cmp	r3, #8
 8006f9a:	f200 84d5 	bhi.w	8007948 <_strtod_l+0xba8>
 8006f9e:	9004      	str	r0, [sp, #16]
 8006fa0:	2000      	movs	r0, #0
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006fa6:	9308      	str	r3, [sp, #32]
 8006fa8:	3a30      	subs	r2, #48	; 0x30
 8006faa:	f100 0301 	add.w	r3, r0, #1
 8006fae:	d013      	beq.n	8006fd8 <_strtod_l+0x238>
 8006fb0:	9904      	ldr	r1, [sp, #16]
 8006fb2:	1905      	adds	r5, r0, r4
 8006fb4:	4419      	add	r1, r3
 8006fb6:	9104      	str	r1, [sp, #16]
 8006fb8:	4623      	mov	r3, r4
 8006fba:	210a      	movs	r1, #10
 8006fbc:	42ab      	cmp	r3, r5
 8006fbe:	d113      	bne.n	8006fe8 <_strtod_l+0x248>
 8006fc0:	1823      	adds	r3, r4, r0
 8006fc2:	2b08      	cmp	r3, #8
 8006fc4:	f104 0401 	add.w	r4, r4, #1
 8006fc8:	4404      	add	r4, r0
 8006fca:	dc1b      	bgt.n	8007004 <_strtod_l+0x264>
 8006fcc:	230a      	movs	r3, #10
 8006fce:	9906      	ldr	r1, [sp, #24]
 8006fd0:	fb03 2301 	mla	r3, r3, r1, r2
 8006fd4:	9306      	str	r3, [sp, #24]
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006fda:	4618      	mov	r0, r3
 8006fdc:	1c51      	adds	r1, r2, #1
 8006fde:	9119      	str	r1, [sp, #100]	; 0x64
 8006fe0:	7852      	ldrb	r2, [r2, #1]
 8006fe2:	e7ca      	b.n	8006f7a <_strtod_l+0x1da>
 8006fe4:	4658      	mov	r0, fp
 8006fe6:	e7d3      	b.n	8006f90 <_strtod_l+0x1f0>
 8006fe8:	2b08      	cmp	r3, #8
 8006fea:	dc04      	bgt.n	8006ff6 <_strtod_l+0x256>
 8006fec:	9f06      	ldr	r7, [sp, #24]
 8006fee:	434f      	muls	r7, r1
 8006ff0:	9706      	str	r7, [sp, #24]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	e7e2      	b.n	8006fbc <_strtod_l+0x21c>
 8006ff6:	1c5f      	adds	r7, r3, #1
 8006ff8:	2f10      	cmp	r7, #16
 8006ffa:	bfde      	ittt	le
 8006ffc:	9f05      	ldrle	r7, [sp, #20]
 8006ffe:	434f      	mulle	r7, r1
 8007000:	9705      	strle	r7, [sp, #20]
 8007002:	e7f6      	b.n	8006ff2 <_strtod_l+0x252>
 8007004:	2c10      	cmp	r4, #16
 8007006:	bfdf      	itttt	le
 8007008:	230a      	movle	r3, #10
 800700a:	9905      	ldrle	r1, [sp, #20]
 800700c:	fb03 2301 	mlale	r3, r3, r1, r2
 8007010:	9305      	strle	r3, [sp, #20]
 8007012:	e7e0      	b.n	8006fd6 <_strtod_l+0x236>
 8007014:	2300      	movs	r3, #0
 8007016:	9304      	str	r3, [sp, #16]
 8007018:	2301      	movs	r3, #1
 800701a:	e77b      	b.n	8006f14 <_strtod_l+0x174>
 800701c:	2700      	movs	r7, #0
 800701e:	1cb2      	adds	r2, r6, #2
 8007020:	9219      	str	r2, [sp, #100]	; 0x64
 8007022:	78b2      	ldrb	r2, [r6, #2]
 8007024:	e784      	b.n	8006f30 <_strtod_l+0x190>
 8007026:	bf00      	nop
 8007028:	0800ac70 	.word	0x0800ac70
 800702c:	0800aa24 	.word	0x0800aa24
 8007030:	7ff00000 	.word	0x7ff00000
 8007034:	2701      	movs	r7, #1
 8007036:	e7f2      	b.n	800701e <_strtod_l+0x27e>
 8007038:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800703a:	1c51      	adds	r1, r2, #1
 800703c:	9119      	str	r1, [sp, #100]	; 0x64
 800703e:	7852      	ldrb	r2, [r2, #1]
 8007040:	2a30      	cmp	r2, #48	; 0x30
 8007042:	d0f9      	beq.n	8007038 <_strtod_l+0x298>
 8007044:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007048:	2908      	cmp	r1, #8
 800704a:	f63f af77 	bhi.w	8006f3c <_strtod_l+0x19c>
 800704e:	f04f 0e0a 	mov.w	lr, #10
 8007052:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8007056:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007058:	9209      	str	r2, [sp, #36]	; 0x24
 800705a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800705c:	1c51      	adds	r1, r2, #1
 800705e:	9119      	str	r1, [sp, #100]	; 0x64
 8007060:	7852      	ldrb	r2, [r2, #1]
 8007062:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8007066:	2d09      	cmp	r5, #9
 8007068:	d935      	bls.n	80070d6 <_strtod_l+0x336>
 800706a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800706c:	1b49      	subs	r1, r1, r5
 800706e:	2908      	cmp	r1, #8
 8007070:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007074:	dc02      	bgt.n	800707c <_strtod_l+0x2dc>
 8007076:	4565      	cmp	r5, ip
 8007078:	bfa8      	it	ge
 800707a:	4665      	movge	r5, ip
 800707c:	b107      	cbz	r7, 8007080 <_strtod_l+0x2e0>
 800707e:	426d      	negs	r5, r5
 8007080:	2c00      	cmp	r4, #0
 8007082:	d14c      	bne.n	800711e <_strtod_l+0x37e>
 8007084:	9907      	ldr	r1, [sp, #28]
 8007086:	4301      	orrs	r1, r0
 8007088:	f47f aecb 	bne.w	8006e22 <_strtod_l+0x82>
 800708c:	2b00      	cmp	r3, #0
 800708e:	f47f aee4 	bne.w	8006e5a <_strtod_l+0xba>
 8007092:	2a69      	cmp	r2, #105	; 0x69
 8007094:	d026      	beq.n	80070e4 <_strtod_l+0x344>
 8007096:	dc23      	bgt.n	80070e0 <_strtod_l+0x340>
 8007098:	2a49      	cmp	r2, #73	; 0x49
 800709a:	d023      	beq.n	80070e4 <_strtod_l+0x344>
 800709c:	2a4e      	cmp	r2, #78	; 0x4e
 800709e:	f47f aedc 	bne.w	8006e5a <_strtod_l+0xba>
 80070a2:	499d      	ldr	r1, [pc, #628]	; (8007318 <_strtod_l+0x578>)
 80070a4:	a819      	add	r0, sp, #100	; 0x64
 80070a6:	f001 fe5f 	bl	8008d68 <__match>
 80070aa:	2800      	cmp	r0, #0
 80070ac:	f43f aed5 	beq.w	8006e5a <_strtod_l+0xba>
 80070b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	2b28      	cmp	r3, #40	; 0x28
 80070b6:	d12c      	bne.n	8007112 <_strtod_l+0x372>
 80070b8:	4998      	ldr	r1, [pc, #608]	; (800731c <_strtod_l+0x57c>)
 80070ba:	aa1c      	add	r2, sp, #112	; 0x70
 80070bc:	a819      	add	r0, sp, #100	; 0x64
 80070be:	f001 fe67 	bl	8008d90 <__hexnan>
 80070c2:	2805      	cmp	r0, #5
 80070c4:	d125      	bne.n	8007112 <_strtod_l+0x372>
 80070c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80070c8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80070cc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80070d0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80070d4:	e6a5      	b.n	8006e22 <_strtod_l+0x82>
 80070d6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80070da:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80070de:	e7bc      	b.n	800705a <_strtod_l+0x2ba>
 80070e0:	2a6e      	cmp	r2, #110	; 0x6e
 80070e2:	e7dc      	b.n	800709e <_strtod_l+0x2fe>
 80070e4:	498e      	ldr	r1, [pc, #568]	; (8007320 <_strtod_l+0x580>)
 80070e6:	a819      	add	r0, sp, #100	; 0x64
 80070e8:	f001 fe3e 	bl	8008d68 <__match>
 80070ec:	2800      	cmp	r0, #0
 80070ee:	f43f aeb4 	beq.w	8006e5a <_strtod_l+0xba>
 80070f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80070f4:	498b      	ldr	r1, [pc, #556]	; (8007324 <_strtod_l+0x584>)
 80070f6:	3b01      	subs	r3, #1
 80070f8:	a819      	add	r0, sp, #100	; 0x64
 80070fa:	9319      	str	r3, [sp, #100]	; 0x64
 80070fc:	f001 fe34 	bl	8008d68 <__match>
 8007100:	b910      	cbnz	r0, 8007108 <_strtod_l+0x368>
 8007102:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007104:	3301      	adds	r3, #1
 8007106:	9319      	str	r3, [sp, #100]	; 0x64
 8007108:	f04f 0800 	mov.w	r8, #0
 800710c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8007328 <_strtod_l+0x588>
 8007110:	e687      	b.n	8006e22 <_strtod_l+0x82>
 8007112:	4886      	ldr	r0, [pc, #536]	; (800732c <_strtod_l+0x58c>)
 8007114:	f002 fe16 	bl	8009d44 <nan>
 8007118:	4680      	mov	r8, r0
 800711a:	4689      	mov	r9, r1
 800711c:	e681      	b.n	8006e22 <_strtod_l+0x82>
 800711e:	9b04      	ldr	r3, [sp, #16]
 8007120:	f1bb 0f00 	cmp.w	fp, #0
 8007124:	bf08      	it	eq
 8007126:	46a3      	moveq	fp, r4
 8007128:	1aeb      	subs	r3, r5, r3
 800712a:	2c10      	cmp	r4, #16
 800712c:	9806      	ldr	r0, [sp, #24]
 800712e:	4626      	mov	r6, r4
 8007130:	9307      	str	r3, [sp, #28]
 8007132:	bfa8      	it	ge
 8007134:	2610      	movge	r6, #16
 8007136:	f7f9 f955 	bl	80003e4 <__aeabi_ui2d>
 800713a:	2c09      	cmp	r4, #9
 800713c:	4680      	mov	r8, r0
 800713e:	4689      	mov	r9, r1
 8007140:	dd13      	ble.n	800716a <_strtod_l+0x3ca>
 8007142:	4b7b      	ldr	r3, [pc, #492]	; (8007330 <_strtod_l+0x590>)
 8007144:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007148:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800714c:	f7f9 f9c4 	bl	80004d8 <__aeabi_dmul>
 8007150:	4680      	mov	r8, r0
 8007152:	9805      	ldr	r0, [sp, #20]
 8007154:	4689      	mov	r9, r1
 8007156:	f7f9 f945 	bl	80003e4 <__aeabi_ui2d>
 800715a:	4602      	mov	r2, r0
 800715c:	460b      	mov	r3, r1
 800715e:	4640      	mov	r0, r8
 8007160:	4649      	mov	r1, r9
 8007162:	f7f9 f803 	bl	800016c <__adddf3>
 8007166:	4680      	mov	r8, r0
 8007168:	4689      	mov	r9, r1
 800716a:	2c0f      	cmp	r4, #15
 800716c:	dc36      	bgt.n	80071dc <_strtod_l+0x43c>
 800716e:	9b07      	ldr	r3, [sp, #28]
 8007170:	2b00      	cmp	r3, #0
 8007172:	f43f ae56 	beq.w	8006e22 <_strtod_l+0x82>
 8007176:	dd22      	ble.n	80071be <_strtod_l+0x41e>
 8007178:	2b16      	cmp	r3, #22
 800717a:	dc09      	bgt.n	8007190 <_strtod_l+0x3f0>
 800717c:	496c      	ldr	r1, [pc, #432]	; (8007330 <_strtod_l+0x590>)
 800717e:	4642      	mov	r2, r8
 8007180:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007184:	464b      	mov	r3, r9
 8007186:	e9d1 0100 	ldrd	r0, r1, [r1]
 800718a:	f7f9 f9a5 	bl	80004d8 <__aeabi_dmul>
 800718e:	e7c3      	b.n	8007118 <_strtod_l+0x378>
 8007190:	9a07      	ldr	r2, [sp, #28]
 8007192:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007196:	4293      	cmp	r3, r2
 8007198:	db20      	blt.n	80071dc <_strtod_l+0x43c>
 800719a:	4d65      	ldr	r5, [pc, #404]	; (8007330 <_strtod_l+0x590>)
 800719c:	f1c4 040f 	rsb	r4, r4, #15
 80071a0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80071a4:	4642      	mov	r2, r8
 80071a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071aa:	464b      	mov	r3, r9
 80071ac:	f7f9 f994 	bl	80004d8 <__aeabi_dmul>
 80071b0:	9b07      	ldr	r3, [sp, #28]
 80071b2:	1b1c      	subs	r4, r3, r4
 80071b4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80071b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071bc:	e7e5      	b.n	800718a <_strtod_l+0x3ea>
 80071be:	9b07      	ldr	r3, [sp, #28]
 80071c0:	3316      	adds	r3, #22
 80071c2:	db0b      	blt.n	80071dc <_strtod_l+0x43c>
 80071c4:	9b04      	ldr	r3, [sp, #16]
 80071c6:	4640      	mov	r0, r8
 80071c8:	1b5d      	subs	r5, r3, r5
 80071ca:	4b59      	ldr	r3, [pc, #356]	; (8007330 <_strtod_l+0x590>)
 80071cc:	4649      	mov	r1, r9
 80071ce:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80071d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071d6:	f7f9 faa9 	bl	800072c <__aeabi_ddiv>
 80071da:	e79d      	b.n	8007118 <_strtod_l+0x378>
 80071dc:	9b07      	ldr	r3, [sp, #28]
 80071de:	1ba6      	subs	r6, r4, r6
 80071e0:	441e      	add	r6, r3
 80071e2:	2e00      	cmp	r6, #0
 80071e4:	dd74      	ble.n	80072d0 <_strtod_l+0x530>
 80071e6:	f016 030f 	ands.w	r3, r6, #15
 80071ea:	d00a      	beq.n	8007202 <_strtod_l+0x462>
 80071ec:	4950      	ldr	r1, [pc, #320]	; (8007330 <_strtod_l+0x590>)
 80071ee:	4642      	mov	r2, r8
 80071f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80071f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071f8:	464b      	mov	r3, r9
 80071fa:	f7f9 f96d 	bl	80004d8 <__aeabi_dmul>
 80071fe:	4680      	mov	r8, r0
 8007200:	4689      	mov	r9, r1
 8007202:	f036 060f 	bics.w	r6, r6, #15
 8007206:	d052      	beq.n	80072ae <_strtod_l+0x50e>
 8007208:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800720c:	dd27      	ble.n	800725e <_strtod_l+0x4be>
 800720e:	f04f 0b00 	mov.w	fp, #0
 8007212:	f8cd b010 	str.w	fp, [sp, #16]
 8007216:	f8cd b020 	str.w	fp, [sp, #32]
 800721a:	f8cd b018 	str.w	fp, [sp, #24]
 800721e:	2322      	movs	r3, #34	; 0x22
 8007220:	f04f 0800 	mov.w	r8, #0
 8007224:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007328 <_strtod_l+0x588>
 8007228:	f8ca 3000 	str.w	r3, [sl]
 800722c:	9b08      	ldr	r3, [sp, #32]
 800722e:	2b00      	cmp	r3, #0
 8007230:	f43f adf7 	beq.w	8006e22 <_strtod_l+0x82>
 8007234:	4650      	mov	r0, sl
 8007236:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007238:	f001 fec0 	bl	8008fbc <_Bfree>
 800723c:	4650      	mov	r0, sl
 800723e:	9906      	ldr	r1, [sp, #24]
 8007240:	f001 febc 	bl	8008fbc <_Bfree>
 8007244:	4650      	mov	r0, sl
 8007246:	9904      	ldr	r1, [sp, #16]
 8007248:	f001 feb8 	bl	8008fbc <_Bfree>
 800724c:	4650      	mov	r0, sl
 800724e:	9908      	ldr	r1, [sp, #32]
 8007250:	f001 feb4 	bl	8008fbc <_Bfree>
 8007254:	4659      	mov	r1, fp
 8007256:	4650      	mov	r0, sl
 8007258:	f001 feb0 	bl	8008fbc <_Bfree>
 800725c:	e5e1      	b.n	8006e22 <_strtod_l+0x82>
 800725e:	4b35      	ldr	r3, [pc, #212]	; (8007334 <_strtod_l+0x594>)
 8007260:	4640      	mov	r0, r8
 8007262:	9305      	str	r3, [sp, #20]
 8007264:	2300      	movs	r3, #0
 8007266:	4649      	mov	r1, r9
 8007268:	461f      	mov	r7, r3
 800726a:	1136      	asrs	r6, r6, #4
 800726c:	2e01      	cmp	r6, #1
 800726e:	dc21      	bgt.n	80072b4 <_strtod_l+0x514>
 8007270:	b10b      	cbz	r3, 8007276 <_strtod_l+0x4d6>
 8007272:	4680      	mov	r8, r0
 8007274:	4689      	mov	r9, r1
 8007276:	4b2f      	ldr	r3, [pc, #188]	; (8007334 <_strtod_l+0x594>)
 8007278:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800727c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007280:	4642      	mov	r2, r8
 8007282:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007286:	464b      	mov	r3, r9
 8007288:	f7f9 f926 	bl	80004d8 <__aeabi_dmul>
 800728c:	4b26      	ldr	r3, [pc, #152]	; (8007328 <_strtod_l+0x588>)
 800728e:	460a      	mov	r2, r1
 8007290:	400b      	ands	r3, r1
 8007292:	4929      	ldr	r1, [pc, #164]	; (8007338 <_strtod_l+0x598>)
 8007294:	4680      	mov	r8, r0
 8007296:	428b      	cmp	r3, r1
 8007298:	d8b9      	bhi.n	800720e <_strtod_l+0x46e>
 800729a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800729e:	428b      	cmp	r3, r1
 80072a0:	bf86      	itte	hi
 80072a2:	f04f 38ff 	movhi.w	r8, #4294967295
 80072a6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800733c <_strtod_l+0x59c>
 80072aa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80072ae:	2300      	movs	r3, #0
 80072b0:	9305      	str	r3, [sp, #20]
 80072b2:	e07f      	b.n	80073b4 <_strtod_l+0x614>
 80072b4:	07f2      	lsls	r2, r6, #31
 80072b6:	d505      	bpl.n	80072c4 <_strtod_l+0x524>
 80072b8:	9b05      	ldr	r3, [sp, #20]
 80072ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072be:	f7f9 f90b 	bl	80004d8 <__aeabi_dmul>
 80072c2:	2301      	movs	r3, #1
 80072c4:	9a05      	ldr	r2, [sp, #20]
 80072c6:	3701      	adds	r7, #1
 80072c8:	3208      	adds	r2, #8
 80072ca:	1076      	asrs	r6, r6, #1
 80072cc:	9205      	str	r2, [sp, #20]
 80072ce:	e7cd      	b.n	800726c <_strtod_l+0x4cc>
 80072d0:	d0ed      	beq.n	80072ae <_strtod_l+0x50e>
 80072d2:	4276      	negs	r6, r6
 80072d4:	f016 020f 	ands.w	r2, r6, #15
 80072d8:	d00a      	beq.n	80072f0 <_strtod_l+0x550>
 80072da:	4b15      	ldr	r3, [pc, #84]	; (8007330 <_strtod_l+0x590>)
 80072dc:	4640      	mov	r0, r8
 80072de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072e2:	4649      	mov	r1, r9
 80072e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e8:	f7f9 fa20 	bl	800072c <__aeabi_ddiv>
 80072ec:	4680      	mov	r8, r0
 80072ee:	4689      	mov	r9, r1
 80072f0:	1136      	asrs	r6, r6, #4
 80072f2:	d0dc      	beq.n	80072ae <_strtod_l+0x50e>
 80072f4:	2e1f      	cmp	r6, #31
 80072f6:	dd23      	ble.n	8007340 <_strtod_l+0x5a0>
 80072f8:	f04f 0b00 	mov.w	fp, #0
 80072fc:	f8cd b010 	str.w	fp, [sp, #16]
 8007300:	f8cd b020 	str.w	fp, [sp, #32]
 8007304:	f8cd b018 	str.w	fp, [sp, #24]
 8007308:	2322      	movs	r3, #34	; 0x22
 800730a:	f04f 0800 	mov.w	r8, #0
 800730e:	f04f 0900 	mov.w	r9, #0
 8007312:	f8ca 3000 	str.w	r3, [sl]
 8007316:	e789      	b.n	800722c <_strtod_l+0x48c>
 8007318:	0800a9fd 	.word	0x0800a9fd
 800731c:	0800aa38 	.word	0x0800aa38
 8007320:	0800a9f5 	.word	0x0800a9f5
 8007324:	0800ab7c 	.word	0x0800ab7c
 8007328:	7ff00000 	.word	0x7ff00000
 800732c:	0800ae28 	.word	0x0800ae28
 8007330:	0800ad08 	.word	0x0800ad08
 8007334:	0800ace0 	.word	0x0800ace0
 8007338:	7ca00000 	.word	0x7ca00000
 800733c:	7fefffff 	.word	0x7fefffff
 8007340:	f016 0310 	ands.w	r3, r6, #16
 8007344:	bf18      	it	ne
 8007346:	236a      	movne	r3, #106	; 0x6a
 8007348:	4640      	mov	r0, r8
 800734a:	9305      	str	r3, [sp, #20]
 800734c:	4649      	mov	r1, r9
 800734e:	2300      	movs	r3, #0
 8007350:	4fb0      	ldr	r7, [pc, #704]	; (8007614 <_strtod_l+0x874>)
 8007352:	07f2      	lsls	r2, r6, #31
 8007354:	d504      	bpl.n	8007360 <_strtod_l+0x5c0>
 8007356:	e9d7 2300 	ldrd	r2, r3, [r7]
 800735a:	f7f9 f8bd 	bl	80004d8 <__aeabi_dmul>
 800735e:	2301      	movs	r3, #1
 8007360:	1076      	asrs	r6, r6, #1
 8007362:	f107 0708 	add.w	r7, r7, #8
 8007366:	d1f4      	bne.n	8007352 <_strtod_l+0x5b2>
 8007368:	b10b      	cbz	r3, 800736e <_strtod_l+0x5ce>
 800736a:	4680      	mov	r8, r0
 800736c:	4689      	mov	r9, r1
 800736e:	9b05      	ldr	r3, [sp, #20]
 8007370:	b1c3      	cbz	r3, 80073a4 <_strtod_l+0x604>
 8007372:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007376:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800737a:	2b00      	cmp	r3, #0
 800737c:	4649      	mov	r1, r9
 800737e:	dd11      	ble.n	80073a4 <_strtod_l+0x604>
 8007380:	2b1f      	cmp	r3, #31
 8007382:	f340 8127 	ble.w	80075d4 <_strtod_l+0x834>
 8007386:	2b34      	cmp	r3, #52	; 0x34
 8007388:	bfd8      	it	le
 800738a:	f04f 33ff 	movle.w	r3, #4294967295
 800738e:	f04f 0800 	mov.w	r8, #0
 8007392:	bfcf      	iteee	gt
 8007394:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007398:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800739c:	fa03 f202 	lslle.w	r2, r3, r2
 80073a0:	ea02 0901 	andle.w	r9, r2, r1
 80073a4:	2200      	movs	r2, #0
 80073a6:	2300      	movs	r3, #0
 80073a8:	4640      	mov	r0, r8
 80073aa:	4649      	mov	r1, r9
 80073ac:	f7f9 fafc 	bl	80009a8 <__aeabi_dcmpeq>
 80073b0:	2800      	cmp	r0, #0
 80073b2:	d1a1      	bne.n	80072f8 <_strtod_l+0x558>
 80073b4:	9b06      	ldr	r3, [sp, #24]
 80073b6:	465a      	mov	r2, fp
 80073b8:	9300      	str	r3, [sp, #0]
 80073ba:	4650      	mov	r0, sl
 80073bc:	4623      	mov	r3, r4
 80073be:	9908      	ldr	r1, [sp, #32]
 80073c0:	f001 fe64 	bl	800908c <__s2b>
 80073c4:	9008      	str	r0, [sp, #32]
 80073c6:	2800      	cmp	r0, #0
 80073c8:	f43f af21 	beq.w	800720e <_strtod_l+0x46e>
 80073cc:	9b04      	ldr	r3, [sp, #16]
 80073ce:	f04f 0b00 	mov.w	fp, #0
 80073d2:	1b5d      	subs	r5, r3, r5
 80073d4:	9b07      	ldr	r3, [sp, #28]
 80073d6:	f8cd b010 	str.w	fp, [sp, #16]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	bfb4      	ite	lt
 80073de:	462b      	movlt	r3, r5
 80073e0:	2300      	movge	r3, #0
 80073e2:	930e      	str	r3, [sp, #56]	; 0x38
 80073e4:	9b07      	ldr	r3, [sp, #28]
 80073e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80073ea:	9314      	str	r3, [sp, #80]	; 0x50
 80073ec:	9b08      	ldr	r3, [sp, #32]
 80073ee:	4650      	mov	r0, sl
 80073f0:	6859      	ldr	r1, [r3, #4]
 80073f2:	f001 fda3 	bl	8008f3c <_Balloc>
 80073f6:	9006      	str	r0, [sp, #24]
 80073f8:	2800      	cmp	r0, #0
 80073fa:	f43f af10 	beq.w	800721e <_strtod_l+0x47e>
 80073fe:	9b08      	ldr	r3, [sp, #32]
 8007400:	300c      	adds	r0, #12
 8007402:	691a      	ldr	r2, [r3, #16]
 8007404:	f103 010c 	add.w	r1, r3, #12
 8007408:	3202      	adds	r2, #2
 800740a:	0092      	lsls	r2, r2, #2
 800740c:	f001 fd88 	bl	8008f20 <memcpy>
 8007410:	ab1c      	add	r3, sp, #112	; 0x70
 8007412:	9301      	str	r3, [sp, #4]
 8007414:	ab1b      	add	r3, sp, #108	; 0x6c
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	4642      	mov	r2, r8
 800741a:	464b      	mov	r3, r9
 800741c:	4650      	mov	r0, sl
 800741e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8007422:	f002 f975 	bl	8009710 <__d2b>
 8007426:	901a      	str	r0, [sp, #104]	; 0x68
 8007428:	2800      	cmp	r0, #0
 800742a:	f43f aef8 	beq.w	800721e <_strtod_l+0x47e>
 800742e:	2101      	movs	r1, #1
 8007430:	4650      	mov	r0, sl
 8007432:	f001 fec3 	bl	80091bc <__i2b>
 8007436:	4603      	mov	r3, r0
 8007438:	9004      	str	r0, [sp, #16]
 800743a:	2800      	cmp	r0, #0
 800743c:	f43f aeef 	beq.w	800721e <_strtod_l+0x47e>
 8007440:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007442:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007444:	2d00      	cmp	r5, #0
 8007446:	bfab      	itete	ge
 8007448:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800744a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800744c:	18ee      	addge	r6, r5, r3
 800744e:	1b5c      	sublt	r4, r3, r5
 8007450:	9b05      	ldr	r3, [sp, #20]
 8007452:	bfa8      	it	ge
 8007454:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8007456:	eba5 0503 	sub.w	r5, r5, r3
 800745a:	4415      	add	r5, r2
 800745c:	4b6e      	ldr	r3, [pc, #440]	; (8007618 <_strtod_l+0x878>)
 800745e:	f105 35ff 	add.w	r5, r5, #4294967295
 8007462:	bfb8      	it	lt
 8007464:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007466:	429d      	cmp	r5, r3
 8007468:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800746c:	f280 80c4 	bge.w	80075f8 <_strtod_l+0x858>
 8007470:	1b5b      	subs	r3, r3, r5
 8007472:	2b1f      	cmp	r3, #31
 8007474:	f04f 0701 	mov.w	r7, #1
 8007478:	eba2 0203 	sub.w	r2, r2, r3
 800747c:	f300 80b1 	bgt.w	80075e2 <_strtod_l+0x842>
 8007480:	2500      	movs	r5, #0
 8007482:	fa07 f303 	lsl.w	r3, r7, r3
 8007486:	930f      	str	r3, [sp, #60]	; 0x3c
 8007488:	18b7      	adds	r7, r6, r2
 800748a:	9b05      	ldr	r3, [sp, #20]
 800748c:	42be      	cmp	r6, r7
 800748e:	4414      	add	r4, r2
 8007490:	441c      	add	r4, r3
 8007492:	4633      	mov	r3, r6
 8007494:	bfa8      	it	ge
 8007496:	463b      	movge	r3, r7
 8007498:	42a3      	cmp	r3, r4
 800749a:	bfa8      	it	ge
 800749c:	4623      	movge	r3, r4
 800749e:	2b00      	cmp	r3, #0
 80074a0:	bfc2      	ittt	gt
 80074a2:	1aff      	subgt	r7, r7, r3
 80074a4:	1ae4      	subgt	r4, r4, r3
 80074a6:	1af6      	subgt	r6, r6, r3
 80074a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	dd17      	ble.n	80074de <_strtod_l+0x73e>
 80074ae:	461a      	mov	r2, r3
 80074b0:	4650      	mov	r0, sl
 80074b2:	9904      	ldr	r1, [sp, #16]
 80074b4:	f001 ff40 	bl	8009338 <__pow5mult>
 80074b8:	9004      	str	r0, [sp, #16]
 80074ba:	2800      	cmp	r0, #0
 80074bc:	f43f aeaf 	beq.w	800721e <_strtod_l+0x47e>
 80074c0:	4601      	mov	r1, r0
 80074c2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80074c4:	4650      	mov	r0, sl
 80074c6:	f001 fe8f 	bl	80091e8 <__multiply>
 80074ca:	9009      	str	r0, [sp, #36]	; 0x24
 80074cc:	2800      	cmp	r0, #0
 80074ce:	f43f aea6 	beq.w	800721e <_strtod_l+0x47e>
 80074d2:	4650      	mov	r0, sl
 80074d4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80074d6:	f001 fd71 	bl	8008fbc <_Bfree>
 80074da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074dc:	931a      	str	r3, [sp, #104]	; 0x68
 80074de:	2f00      	cmp	r7, #0
 80074e0:	f300 808e 	bgt.w	8007600 <_strtod_l+0x860>
 80074e4:	9b07      	ldr	r3, [sp, #28]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	dd08      	ble.n	80074fc <_strtod_l+0x75c>
 80074ea:	4650      	mov	r0, sl
 80074ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80074ee:	9906      	ldr	r1, [sp, #24]
 80074f0:	f001 ff22 	bl	8009338 <__pow5mult>
 80074f4:	9006      	str	r0, [sp, #24]
 80074f6:	2800      	cmp	r0, #0
 80074f8:	f43f ae91 	beq.w	800721e <_strtod_l+0x47e>
 80074fc:	2c00      	cmp	r4, #0
 80074fe:	dd08      	ble.n	8007512 <_strtod_l+0x772>
 8007500:	4622      	mov	r2, r4
 8007502:	4650      	mov	r0, sl
 8007504:	9906      	ldr	r1, [sp, #24]
 8007506:	f001 ff71 	bl	80093ec <__lshift>
 800750a:	9006      	str	r0, [sp, #24]
 800750c:	2800      	cmp	r0, #0
 800750e:	f43f ae86 	beq.w	800721e <_strtod_l+0x47e>
 8007512:	2e00      	cmp	r6, #0
 8007514:	dd08      	ble.n	8007528 <_strtod_l+0x788>
 8007516:	4632      	mov	r2, r6
 8007518:	4650      	mov	r0, sl
 800751a:	9904      	ldr	r1, [sp, #16]
 800751c:	f001 ff66 	bl	80093ec <__lshift>
 8007520:	9004      	str	r0, [sp, #16]
 8007522:	2800      	cmp	r0, #0
 8007524:	f43f ae7b 	beq.w	800721e <_strtod_l+0x47e>
 8007528:	4650      	mov	r0, sl
 800752a:	9a06      	ldr	r2, [sp, #24]
 800752c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800752e:	f001 ffe9 	bl	8009504 <__mdiff>
 8007532:	4683      	mov	fp, r0
 8007534:	2800      	cmp	r0, #0
 8007536:	f43f ae72 	beq.w	800721e <_strtod_l+0x47e>
 800753a:	2400      	movs	r4, #0
 800753c:	68c3      	ldr	r3, [r0, #12]
 800753e:	9904      	ldr	r1, [sp, #16]
 8007540:	60c4      	str	r4, [r0, #12]
 8007542:	930b      	str	r3, [sp, #44]	; 0x2c
 8007544:	f001 ffc2 	bl	80094cc <__mcmp>
 8007548:	42a0      	cmp	r0, r4
 800754a:	da6b      	bge.n	8007624 <_strtod_l+0x884>
 800754c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800754e:	ea53 0308 	orrs.w	r3, r3, r8
 8007552:	f040 8091 	bne.w	8007678 <_strtod_l+0x8d8>
 8007556:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800755a:	2b00      	cmp	r3, #0
 800755c:	f040 808c 	bne.w	8007678 <_strtod_l+0x8d8>
 8007560:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007564:	0d1b      	lsrs	r3, r3, #20
 8007566:	051b      	lsls	r3, r3, #20
 8007568:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800756c:	f240 8084 	bls.w	8007678 <_strtod_l+0x8d8>
 8007570:	f8db 3014 	ldr.w	r3, [fp, #20]
 8007574:	b91b      	cbnz	r3, 800757e <_strtod_l+0x7de>
 8007576:	f8db 3010 	ldr.w	r3, [fp, #16]
 800757a:	2b01      	cmp	r3, #1
 800757c:	dd7c      	ble.n	8007678 <_strtod_l+0x8d8>
 800757e:	4659      	mov	r1, fp
 8007580:	2201      	movs	r2, #1
 8007582:	4650      	mov	r0, sl
 8007584:	f001 ff32 	bl	80093ec <__lshift>
 8007588:	9904      	ldr	r1, [sp, #16]
 800758a:	4683      	mov	fp, r0
 800758c:	f001 ff9e 	bl	80094cc <__mcmp>
 8007590:	2800      	cmp	r0, #0
 8007592:	dd71      	ble.n	8007678 <_strtod_l+0x8d8>
 8007594:	9905      	ldr	r1, [sp, #20]
 8007596:	464b      	mov	r3, r9
 8007598:	4a20      	ldr	r2, [pc, #128]	; (800761c <_strtod_l+0x87c>)
 800759a:	2900      	cmp	r1, #0
 800759c:	f000 808c 	beq.w	80076b8 <_strtod_l+0x918>
 80075a0:	ea02 0109 	and.w	r1, r2, r9
 80075a4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80075a8:	f300 8086 	bgt.w	80076b8 <_strtod_l+0x918>
 80075ac:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80075b0:	f77f aeaa 	ble.w	8007308 <_strtod_l+0x568>
 80075b4:	4640      	mov	r0, r8
 80075b6:	4649      	mov	r1, r9
 80075b8:	4b19      	ldr	r3, [pc, #100]	; (8007620 <_strtod_l+0x880>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	f7f8 ff8c 	bl	80004d8 <__aeabi_dmul>
 80075c0:	460b      	mov	r3, r1
 80075c2:	4303      	orrs	r3, r0
 80075c4:	bf08      	it	eq
 80075c6:	2322      	moveq	r3, #34	; 0x22
 80075c8:	4680      	mov	r8, r0
 80075ca:	4689      	mov	r9, r1
 80075cc:	bf08      	it	eq
 80075ce:	f8ca 3000 	streq.w	r3, [sl]
 80075d2:	e62f      	b.n	8007234 <_strtod_l+0x494>
 80075d4:	f04f 32ff 	mov.w	r2, #4294967295
 80075d8:	fa02 f303 	lsl.w	r3, r2, r3
 80075dc:	ea03 0808 	and.w	r8, r3, r8
 80075e0:	e6e0      	b.n	80073a4 <_strtod_l+0x604>
 80075e2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80075e6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80075ea:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80075ee:	35e2      	adds	r5, #226	; 0xe2
 80075f0:	fa07 f505 	lsl.w	r5, r7, r5
 80075f4:	970f      	str	r7, [sp, #60]	; 0x3c
 80075f6:	e747      	b.n	8007488 <_strtod_l+0x6e8>
 80075f8:	2301      	movs	r3, #1
 80075fa:	2500      	movs	r5, #0
 80075fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80075fe:	e743      	b.n	8007488 <_strtod_l+0x6e8>
 8007600:	463a      	mov	r2, r7
 8007602:	4650      	mov	r0, sl
 8007604:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007606:	f001 fef1 	bl	80093ec <__lshift>
 800760a:	901a      	str	r0, [sp, #104]	; 0x68
 800760c:	2800      	cmp	r0, #0
 800760e:	f47f af69 	bne.w	80074e4 <_strtod_l+0x744>
 8007612:	e604      	b.n	800721e <_strtod_l+0x47e>
 8007614:	0800aa50 	.word	0x0800aa50
 8007618:	fffffc02 	.word	0xfffffc02
 800761c:	7ff00000 	.word	0x7ff00000
 8007620:	39500000 	.word	0x39500000
 8007624:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007628:	d165      	bne.n	80076f6 <_strtod_l+0x956>
 800762a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800762c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007630:	b35a      	cbz	r2, 800768a <_strtod_l+0x8ea>
 8007632:	4a99      	ldr	r2, [pc, #612]	; (8007898 <_strtod_l+0xaf8>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d12b      	bne.n	8007690 <_strtod_l+0x8f0>
 8007638:	9b05      	ldr	r3, [sp, #20]
 800763a:	4641      	mov	r1, r8
 800763c:	b303      	cbz	r3, 8007680 <_strtod_l+0x8e0>
 800763e:	464a      	mov	r2, r9
 8007640:	4b96      	ldr	r3, [pc, #600]	; (800789c <_strtod_l+0xafc>)
 8007642:	4013      	ands	r3, r2
 8007644:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007648:	f04f 32ff 	mov.w	r2, #4294967295
 800764c:	d81b      	bhi.n	8007686 <_strtod_l+0x8e6>
 800764e:	0d1b      	lsrs	r3, r3, #20
 8007650:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007654:	fa02 f303 	lsl.w	r3, r2, r3
 8007658:	4299      	cmp	r1, r3
 800765a:	d119      	bne.n	8007690 <_strtod_l+0x8f0>
 800765c:	4b90      	ldr	r3, [pc, #576]	; (80078a0 <_strtod_l+0xb00>)
 800765e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007660:	429a      	cmp	r2, r3
 8007662:	d102      	bne.n	800766a <_strtod_l+0x8ca>
 8007664:	3101      	adds	r1, #1
 8007666:	f43f adda 	beq.w	800721e <_strtod_l+0x47e>
 800766a:	f04f 0800 	mov.w	r8, #0
 800766e:	4b8b      	ldr	r3, [pc, #556]	; (800789c <_strtod_l+0xafc>)
 8007670:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007672:	401a      	ands	r2, r3
 8007674:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8007678:	9b05      	ldr	r3, [sp, #20]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d19a      	bne.n	80075b4 <_strtod_l+0x814>
 800767e:	e5d9      	b.n	8007234 <_strtod_l+0x494>
 8007680:	f04f 33ff 	mov.w	r3, #4294967295
 8007684:	e7e8      	b.n	8007658 <_strtod_l+0x8b8>
 8007686:	4613      	mov	r3, r2
 8007688:	e7e6      	b.n	8007658 <_strtod_l+0x8b8>
 800768a:	ea53 0308 	orrs.w	r3, r3, r8
 800768e:	d081      	beq.n	8007594 <_strtod_l+0x7f4>
 8007690:	b1e5      	cbz	r5, 80076cc <_strtod_l+0x92c>
 8007692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007694:	421d      	tst	r5, r3
 8007696:	d0ef      	beq.n	8007678 <_strtod_l+0x8d8>
 8007698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800769a:	4640      	mov	r0, r8
 800769c:	4649      	mov	r1, r9
 800769e:	9a05      	ldr	r2, [sp, #20]
 80076a0:	b1c3      	cbz	r3, 80076d4 <_strtod_l+0x934>
 80076a2:	f7ff fb5b 	bl	8006d5c <sulp>
 80076a6:	4602      	mov	r2, r0
 80076a8:	460b      	mov	r3, r1
 80076aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80076ae:	f7f8 fd5d 	bl	800016c <__adddf3>
 80076b2:	4680      	mov	r8, r0
 80076b4:	4689      	mov	r9, r1
 80076b6:	e7df      	b.n	8007678 <_strtod_l+0x8d8>
 80076b8:	4013      	ands	r3, r2
 80076ba:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80076be:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80076c2:	f04f 38ff 	mov.w	r8, #4294967295
 80076c6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80076ca:	e7d5      	b.n	8007678 <_strtod_l+0x8d8>
 80076cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076ce:	ea13 0f08 	tst.w	r3, r8
 80076d2:	e7e0      	b.n	8007696 <_strtod_l+0x8f6>
 80076d4:	f7ff fb42 	bl	8006d5c <sulp>
 80076d8:	4602      	mov	r2, r0
 80076da:	460b      	mov	r3, r1
 80076dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80076e0:	f7f8 fd42 	bl	8000168 <__aeabi_dsub>
 80076e4:	2200      	movs	r2, #0
 80076e6:	2300      	movs	r3, #0
 80076e8:	4680      	mov	r8, r0
 80076ea:	4689      	mov	r9, r1
 80076ec:	f7f9 f95c 	bl	80009a8 <__aeabi_dcmpeq>
 80076f0:	2800      	cmp	r0, #0
 80076f2:	d0c1      	beq.n	8007678 <_strtod_l+0x8d8>
 80076f4:	e608      	b.n	8007308 <_strtod_l+0x568>
 80076f6:	4658      	mov	r0, fp
 80076f8:	9904      	ldr	r1, [sp, #16]
 80076fa:	f002 f865 	bl	80097c8 <__ratio>
 80076fe:	2200      	movs	r2, #0
 8007700:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007704:	4606      	mov	r6, r0
 8007706:	460f      	mov	r7, r1
 8007708:	f7f9 f962 	bl	80009d0 <__aeabi_dcmple>
 800770c:	2800      	cmp	r0, #0
 800770e:	d070      	beq.n	80077f2 <_strtod_l+0xa52>
 8007710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007712:	2b00      	cmp	r3, #0
 8007714:	d042      	beq.n	800779c <_strtod_l+0x9fc>
 8007716:	2600      	movs	r6, #0
 8007718:	4f62      	ldr	r7, [pc, #392]	; (80078a4 <_strtod_l+0xb04>)
 800771a:	4d62      	ldr	r5, [pc, #392]	; (80078a4 <_strtod_l+0xb04>)
 800771c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800771e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007722:	0d1b      	lsrs	r3, r3, #20
 8007724:	051b      	lsls	r3, r3, #20
 8007726:	930f      	str	r3, [sp, #60]	; 0x3c
 8007728:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800772a:	4b5f      	ldr	r3, [pc, #380]	; (80078a8 <_strtod_l+0xb08>)
 800772c:	429a      	cmp	r2, r3
 800772e:	f040 80c3 	bne.w	80078b8 <_strtod_l+0xb18>
 8007732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007734:	4640      	mov	r0, r8
 8007736:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800773a:	4649      	mov	r1, r9
 800773c:	f001 ff6e 	bl	800961c <__ulp>
 8007740:	4602      	mov	r2, r0
 8007742:	460b      	mov	r3, r1
 8007744:	4630      	mov	r0, r6
 8007746:	4639      	mov	r1, r7
 8007748:	f7f8 fec6 	bl	80004d8 <__aeabi_dmul>
 800774c:	4642      	mov	r2, r8
 800774e:	464b      	mov	r3, r9
 8007750:	f7f8 fd0c 	bl	800016c <__adddf3>
 8007754:	460b      	mov	r3, r1
 8007756:	4951      	ldr	r1, [pc, #324]	; (800789c <_strtod_l+0xafc>)
 8007758:	4a54      	ldr	r2, [pc, #336]	; (80078ac <_strtod_l+0xb0c>)
 800775a:	4019      	ands	r1, r3
 800775c:	4291      	cmp	r1, r2
 800775e:	4680      	mov	r8, r0
 8007760:	d95d      	bls.n	800781e <_strtod_l+0xa7e>
 8007762:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007764:	4b4e      	ldr	r3, [pc, #312]	; (80078a0 <_strtod_l+0xb00>)
 8007766:	429a      	cmp	r2, r3
 8007768:	d103      	bne.n	8007772 <_strtod_l+0x9d2>
 800776a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800776c:	3301      	adds	r3, #1
 800776e:	f43f ad56 	beq.w	800721e <_strtod_l+0x47e>
 8007772:	f04f 38ff 	mov.w	r8, #4294967295
 8007776:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80078a0 <_strtod_l+0xb00>
 800777a:	4650      	mov	r0, sl
 800777c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800777e:	f001 fc1d 	bl	8008fbc <_Bfree>
 8007782:	4650      	mov	r0, sl
 8007784:	9906      	ldr	r1, [sp, #24]
 8007786:	f001 fc19 	bl	8008fbc <_Bfree>
 800778a:	4650      	mov	r0, sl
 800778c:	9904      	ldr	r1, [sp, #16]
 800778e:	f001 fc15 	bl	8008fbc <_Bfree>
 8007792:	4659      	mov	r1, fp
 8007794:	4650      	mov	r0, sl
 8007796:	f001 fc11 	bl	8008fbc <_Bfree>
 800779a:	e627      	b.n	80073ec <_strtod_l+0x64c>
 800779c:	f1b8 0f00 	cmp.w	r8, #0
 80077a0:	d119      	bne.n	80077d6 <_strtod_l+0xa36>
 80077a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077a8:	b9e3      	cbnz	r3, 80077e4 <_strtod_l+0xa44>
 80077aa:	2200      	movs	r2, #0
 80077ac:	4630      	mov	r0, r6
 80077ae:	4639      	mov	r1, r7
 80077b0:	4b3c      	ldr	r3, [pc, #240]	; (80078a4 <_strtod_l+0xb04>)
 80077b2:	f7f9 f903 	bl	80009bc <__aeabi_dcmplt>
 80077b6:	b9c8      	cbnz	r0, 80077ec <_strtod_l+0xa4c>
 80077b8:	2200      	movs	r2, #0
 80077ba:	4630      	mov	r0, r6
 80077bc:	4639      	mov	r1, r7
 80077be:	4b3c      	ldr	r3, [pc, #240]	; (80078b0 <_strtod_l+0xb10>)
 80077c0:	f7f8 fe8a 	bl	80004d8 <__aeabi_dmul>
 80077c4:	4604      	mov	r4, r0
 80077c6:	460d      	mov	r5, r1
 80077c8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80077cc:	9416      	str	r4, [sp, #88]	; 0x58
 80077ce:	9317      	str	r3, [sp, #92]	; 0x5c
 80077d0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80077d4:	e7a2      	b.n	800771c <_strtod_l+0x97c>
 80077d6:	f1b8 0f01 	cmp.w	r8, #1
 80077da:	d103      	bne.n	80077e4 <_strtod_l+0xa44>
 80077dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f43f ad92 	beq.w	8007308 <_strtod_l+0x568>
 80077e4:	2600      	movs	r6, #0
 80077e6:	2400      	movs	r4, #0
 80077e8:	4f32      	ldr	r7, [pc, #200]	; (80078b4 <_strtod_l+0xb14>)
 80077ea:	e796      	b.n	800771a <_strtod_l+0x97a>
 80077ec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80077ee:	4d30      	ldr	r5, [pc, #192]	; (80078b0 <_strtod_l+0xb10>)
 80077f0:	e7ea      	b.n	80077c8 <_strtod_l+0xa28>
 80077f2:	4b2f      	ldr	r3, [pc, #188]	; (80078b0 <_strtod_l+0xb10>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	4630      	mov	r0, r6
 80077f8:	4639      	mov	r1, r7
 80077fa:	f7f8 fe6d 	bl	80004d8 <__aeabi_dmul>
 80077fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007800:	4604      	mov	r4, r0
 8007802:	460d      	mov	r5, r1
 8007804:	b933      	cbnz	r3, 8007814 <_strtod_l+0xa74>
 8007806:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800780a:	9010      	str	r0, [sp, #64]	; 0x40
 800780c:	9311      	str	r3, [sp, #68]	; 0x44
 800780e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007812:	e783      	b.n	800771c <_strtod_l+0x97c>
 8007814:	4602      	mov	r2, r0
 8007816:	460b      	mov	r3, r1
 8007818:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800781c:	e7f7      	b.n	800780e <_strtod_l+0xa6e>
 800781e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007822:	9b05      	ldr	r3, [sp, #20]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d1a8      	bne.n	800777a <_strtod_l+0x9da>
 8007828:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800782c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800782e:	0d1b      	lsrs	r3, r3, #20
 8007830:	051b      	lsls	r3, r3, #20
 8007832:	429a      	cmp	r2, r3
 8007834:	d1a1      	bne.n	800777a <_strtod_l+0x9da>
 8007836:	4620      	mov	r0, r4
 8007838:	4629      	mov	r1, r5
 800783a:	f7f9 fc8f 	bl	800115c <__aeabi_d2lz>
 800783e:	f7f8 fe1d 	bl	800047c <__aeabi_l2d>
 8007842:	4602      	mov	r2, r0
 8007844:	460b      	mov	r3, r1
 8007846:	4620      	mov	r0, r4
 8007848:	4629      	mov	r1, r5
 800784a:	f7f8 fc8d 	bl	8000168 <__aeabi_dsub>
 800784e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007850:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007854:	ea43 0308 	orr.w	r3, r3, r8
 8007858:	4313      	orrs	r3, r2
 800785a:	4604      	mov	r4, r0
 800785c:	460d      	mov	r5, r1
 800785e:	d066      	beq.n	800792e <_strtod_l+0xb8e>
 8007860:	a309      	add	r3, pc, #36	; (adr r3, 8007888 <_strtod_l+0xae8>)
 8007862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007866:	f7f9 f8a9 	bl	80009bc <__aeabi_dcmplt>
 800786a:	2800      	cmp	r0, #0
 800786c:	f47f ace2 	bne.w	8007234 <_strtod_l+0x494>
 8007870:	a307      	add	r3, pc, #28	; (adr r3, 8007890 <_strtod_l+0xaf0>)
 8007872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007876:	4620      	mov	r0, r4
 8007878:	4629      	mov	r1, r5
 800787a:	f7f9 f8bd 	bl	80009f8 <__aeabi_dcmpgt>
 800787e:	2800      	cmp	r0, #0
 8007880:	f43f af7b 	beq.w	800777a <_strtod_l+0x9da>
 8007884:	e4d6      	b.n	8007234 <_strtod_l+0x494>
 8007886:	bf00      	nop
 8007888:	94a03595 	.word	0x94a03595
 800788c:	3fdfffff 	.word	0x3fdfffff
 8007890:	35afe535 	.word	0x35afe535
 8007894:	3fe00000 	.word	0x3fe00000
 8007898:	000fffff 	.word	0x000fffff
 800789c:	7ff00000 	.word	0x7ff00000
 80078a0:	7fefffff 	.word	0x7fefffff
 80078a4:	3ff00000 	.word	0x3ff00000
 80078a8:	7fe00000 	.word	0x7fe00000
 80078ac:	7c9fffff 	.word	0x7c9fffff
 80078b0:	3fe00000 	.word	0x3fe00000
 80078b4:	bff00000 	.word	0xbff00000
 80078b8:	9b05      	ldr	r3, [sp, #20]
 80078ba:	b313      	cbz	r3, 8007902 <_strtod_l+0xb62>
 80078bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80078c2:	d81e      	bhi.n	8007902 <_strtod_l+0xb62>
 80078c4:	a326      	add	r3, pc, #152	; (adr r3, 8007960 <_strtod_l+0xbc0>)
 80078c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ca:	4620      	mov	r0, r4
 80078cc:	4629      	mov	r1, r5
 80078ce:	f7f9 f87f 	bl	80009d0 <__aeabi_dcmple>
 80078d2:	b190      	cbz	r0, 80078fa <_strtod_l+0xb5a>
 80078d4:	4629      	mov	r1, r5
 80078d6:	4620      	mov	r0, r4
 80078d8:	f7f9 f8d6 	bl	8000a88 <__aeabi_d2uiz>
 80078dc:	2801      	cmp	r0, #1
 80078de:	bf38      	it	cc
 80078e0:	2001      	movcc	r0, #1
 80078e2:	f7f8 fd7f 	bl	80003e4 <__aeabi_ui2d>
 80078e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078e8:	4604      	mov	r4, r0
 80078ea:	460d      	mov	r5, r1
 80078ec:	b9d3      	cbnz	r3, 8007924 <_strtod_l+0xb84>
 80078ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078f2:	9012      	str	r0, [sp, #72]	; 0x48
 80078f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80078f6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80078fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078fc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007900:	1a9f      	subs	r7, r3, r2
 8007902:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007906:	f001 fe89 	bl	800961c <__ulp>
 800790a:	4602      	mov	r2, r0
 800790c:	460b      	mov	r3, r1
 800790e:	4630      	mov	r0, r6
 8007910:	4639      	mov	r1, r7
 8007912:	f7f8 fde1 	bl	80004d8 <__aeabi_dmul>
 8007916:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800791a:	f7f8 fc27 	bl	800016c <__adddf3>
 800791e:	4680      	mov	r8, r0
 8007920:	4689      	mov	r9, r1
 8007922:	e77e      	b.n	8007822 <_strtod_l+0xa82>
 8007924:	4602      	mov	r2, r0
 8007926:	460b      	mov	r3, r1
 8007928:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800792c:	e7e3      	b.n	80078f6 <_strtod_l+0xb56>
 800792e:	a30e      	add	r3, pc, #56	; (adr r3, 8007968 <_strtod_l+0xbc8>)
 8007930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007934:	f7f9 f842 	bl	80009bc <__aeabi_dcmplt>
 8007938:	e7a1      	b.n	800787e <_strtod_l+0xade>
 800793a:	2300      	movs	r3, #0
 800793c:	930a      	str	r3, [sp, #40]	; 0x28
 800793e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007940:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007942:	6013      	str	r3, [r2, #0]
 8007944:	f7ff ba71 	b.w	8006e2a <_strtod_l+0x8a>
 8007948:	2a65      	cmp	r2, #101	; 0x65
 800794a:	f43f ab63 	beq.w	8007014 <_strtod_l+0x274>
 800794e:	2a45      	cmp	r2, #69	; 0x45
 8007950:	f43f ab60 	beq.w	8007014 <_strtod_l+0x274>
 8007954:	2301      	movs	r3, #1
 8007956:	f7ff bb95 	b.w	8007084 <_strtod_l+0x2e4>
 800795a:	bf00      	nop
 800795c:	f3af 8000 	nop.w
 8007960:	ffc00000 	.word	0xffc00000
 8007964:	41dfffff 	.word	0x41dfffff
 8007968:	94a03595 	.word	0x94a03595
 800796c:	3fcfffff 	.word	0x3fcfffff

08007970 <strtod>:
 8007970:	460a      	mov	r2, r1
 8007972:	4601      	mov	r1, r0
 8007974:	4802      	ldr	r0, [pc, #8]	; (8007980 <strtod+0x10>)
 8007976:	4b03      	ldr	r3, [pc, #12]	; (8007984 <strtod+0x14>)
 8007978:	6800      	ldr	r0, [r0, #0]
 800797a:	f7ff ba11 	b.w	8006da0 <_strtod_l>
 800797e:	bf00      	nop
 8007980:	20000040 	.word	0x20000040
 8007984:	200000a8 	.word	0x200000a8

08007988 <_strtol_l.constprop.0>:
 8007988:	2b01      	cmp	r3, #1
 800798a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800798e:	4680      	mov	r8, r0
 8007990:	d001      	beq.n	8007996 <_strtol_l.constprop.0+0xe>
 8007992:	2b24      	cmp	r3, #36	; 0x24
 8007994:	d906      	bls.n	80079a4 <_strtol_l.constprop.0+0x1c>
 8007996:	f7fe fd2f 	bl	80063f8 <__errno>
 800799a:	2316      	movs	r3, #22
 800799c:	6003      	str	r3, [r0, #0]
 800799e:	2000      	movs	r0, #0
 80079a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079a4:	460d      	mov	r5, r1
 80079a6:	4f35      	ldr	r7, [pc, #212]	; (8007a7c <_strtol_l.constprop.0+0xf4>)
 80079a8:	4628      	mov	r0, r5
 80079aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079ae:	5de6      	ldrb	r6, [r4, r7]
 80079b0:	f016 0608 	ands.w	r6, r6, #8
 80079b4:	d1f8      	bne.n	80079a8 <_strtol_l.constprop.0+0x20>
 80079b6:	2c2d      	cmp	r4, #45	; 0x2d
 80079b8:	d12f      	bne.n	8007a1a <_strtol_l.constprop.0+0x92>
 80079ba:	2601      	movs	r6, #1
 80079bc:	782c      	ldrb	r4, [r5, #0]
 80079be:	1c85      	adds	r5, r0, #2
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d057      	beq.n	8007a74 <_strtol_l.constprop.0+0xec>
 80079c4:	2b10      	cmp	r3, #16
 80079c6:	d109      	bne.n	80079dc <_strtol_l.constprop.0+0x54>
 80079c8:	2c30      	cmp	r4, #48	; 0x30
 80079ca:	d107      	bne.n	80079dc <_strtol_l.constprop.0+0x54>
 80079cc:	7828      	ldrb	r0, [r5, #0]
 80079ce:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80079d2:	2858      	cmp	r0, #88	; 0x58
 80079d4:	d149      	bne.n	8007a6a <_strtol_l.constprop.0+0xe2>
 80079d6:	2310      	movs	r3, #16
 80079d8:	786c      	ldrb	r4, [r5, #1]
 80079da:	3502      	adds	r5, #2
 80079dc:	2700      	movs	r7, #0
 80079de:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80079e2:	f10e 3eff 	add.w	lr, lr, #4294967295
 80079e6:	fbbe f9f3 	udiv	r9, lr, r3
 80079ea:	4638      	mov	r0, r7
 80079ec:	fb03 ea19 	mls	sl, r3, r9, lr
 80079f0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80079f4:	f1bc 0f09 	cmp.w	ip, #9
 80079f8:	d814      	bhi.n	8007a24 <_strtol_l.constprop.0+0x9c>
 80079fa:	4664      	mov	r4, ip
 80079fc:	42a3      	cmp	r3, r4
 80079fe:	dd22      	ble.n	8007a46 <_strtol_l.constprop.0+0xbe>
 8007a00:	2f00      	cmp	r7, #0
 8007a02:	db1d      	blt.n	8007a40 <_strtol_l.constprop.0+0xb8>
 8007a04:	4581      	cmp	r9, r0
 8007a06:	d31b      	bcc.n	8007a40 <_strtol_l.constprop.0+0xb8>
 8007a08:	d101      	bne.n	8007a0e <_strtol_l.constprop.0+0x86>
 8007a0a:	45a2      	cmp	sl, r4
 8007a0c:	db18      	blt.n	8007a40 <_strtol_l.constprop.0+0xb8>
 8007a0e:	2701      	movs	r7, #1
 8007a10:	fb00 4003 	mla	r0, r0, r3, r4
 8007a14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a18:	e7ea      	b.n	80079f0 <_strtol_l.constprop.0+0x68>
 8007a1a:	2c2b      	cmp	r4, #43	; 0x2b
 8007a1c:	bf04      	itt	eq
 8007a1e:	782c      	ldrbeq	r4, [r5, #0]
 8007a20:	1c85      	addeq	r5, r0, #2
 8007a22:	e7cd      	b.n	80079c0 <_strtol_l.constprop.0+0x38>
 8007a24:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007a28:	f1bc 0f19 	cmp.w	ip, #25
 8007a2c:	d801      	bhi.n	8007a32 <_strtol_l.constprop.0+0xaa>
 8007a2e:	3c37      	subs	r4, #55	; 0x37
 8007a30:	e7e4      	b.n	80079fc <_strtol_l.constprop.0+0x74>
 8007a32:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007a36:	f1bc 0f19 	cmp.w	ip, #25
 8007a3a:	d804      	bhi.n	8007a46 <_strtol_l.constprop.0+0xbe>
 8007a3c:	3c57      	subs	r4, #87	; 0x57
 8007a3e:	e7dd      	b.n	80079fc <_strtol_l.constprop.0+0x74>
 8007a40:	f04f 37ff 	mov.w	r7, #4294967295
 8007a44:	e7e6      	b.n	8007a14 <_strtol_l.constprop.0+0x8c>
 8007a46:	2f00      	cmp	r7, #0
 8007a48:	da07      	bge.n	8007a5a <_strtol_l.constprop.0+0xd2>
 8007a4a:	2322      	movs	r3, #34	; 0x22
 8007a4c:	4670      	mov	r0, lr
 8007a4e:	f8c8 3000 	str.w	r3, [r8]
 8007a52:	2a00      	cmp	r2, #0
 8007a54:	d0a4      	beq.n	80079a0 <_strtol_l.constprop.0+0x18>
 8007a56:	1e69      	subs	r1, r5, #1
 8007a58:	e005      	b.n	8007a66 <_strtol_l.constprop.0+0xde>
 8007a5a:	b106      	cbz	r6, 8007a5e <_strtol_l.constprop.0+0xd6>
 8007a5c:	4240      	negs	r0, r0
 8007a5e:	2a00      	cmp	r2, #0
 8007a60:	d09e      	beq.n	80079a0 <_strtol_l.constprop.0+0x18>
 8007a62:	2f00      	cmp	r7, #0
 8007a64:	d1f7      	bne.n	8007a56 <_strtol_l.constprop.0+0xce>
 8007a66:	6011      	str	r1, [r2, #0]
 8007a68:	e79a      	b.n	80079a0 <_strtol_l.constprop.0+0x18>
 8007a6a:	2430      	movs	r4, #48	; 0x30
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1b5      	bne.n	80079dc <_strtol_l.constprop.0+0x54>
 8007a70:	2308      	movs	r3, #8
 8007a72:	e7b3      	b.n	80079dc <_strtol_l.constprop.0+0x54>
 8007a74:	2c30      	cmp	r4, #48	; 0x30
 8007a76:	d0a9      	beq.n	80079cc <_strtol_l.constprop.0+0x44>
 8007a78:	230a      	movs	r3, #10
 8007a7a:	e7af      	b.n	80079dc <_strtol_l.constprop.0+0x54>
 8007a7c:	0800aa79 	.word	0x0800aa79

08007a80 <strtol>:
 8007a80:	4613      	mov	r3, r2
 8007a82:	460a      	mov	r2, r1
 8007a84:	4601      	mov	r1, r0
 8007a86:	4802      	ldr	r0, [pc, #8]	; (8007a90 <strtol+0x10>)
 8007a88:	6800      	ldr	r0, [r0, #0]
 8007a8a:	f7ff bf7d 	b.w	8007988 <_strtol_l.constprop.0>
 8007a8e:	bf00      	nop
 8007a90:	20000040 	.word	0x20000040

08007a94 <_vsniprintf_r>:
 8007a94:	b530      	push	{r4, r5, lr}
 8007a96:	4614      	mov	r4, r2
 8007a98:	2c00      	cmp	r4, #0
 8007a9a:	4605      	mov	r5, r0
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	b09b      	sub	sp, #108	; 0x6c
 8007aa0:	da05      	bge.n	8007aae <_vsniprintf_r+0x1a>
 8007aa2:	238b      	movs	r3, #139	; 0x8b
 8007aa4:	6003      	str	r3, [r0, #0]
 8007aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8007aaa:	b01b      	add	sp, #108	; 0x6c
 8007aac:	bd30      	pop	{r4, r5, pc}
 8007aae:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007ab2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007ab6:	bf0c      	ite	eq
 8007ab8:	4623      	moveq	r3, r4
 8007aba:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007abe:	9302      	str	r3, [sp, #8]
 8007ac0:	9305      	str	r3, [sp, #20]
 8007ac2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007ac6:	9100      	str	r1, [sp, #0]
 8007ac8:	9104      	str	r1, [sp, #16]
 8007aca:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007ace:	4669      	mov	r1, sp
 8007ad0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007ad2:	f002 f837 	bl	8009b44 <_svfiprintf_r>
 8007ad6:	1c43      	adds	r3, r0, #1
 8007ad8:	bfbc      	itt	lt
 8007ada:	238b      	movlt	r3, #139	; 0x8b
 8007adc:	602b      	strlt	r3, [r5, #0]
 8007ade:	2c00      	cmp	r4, #0
 8007ae0:	d0e3      	beq.n	8007aaa <_vsniprintf_r+0x16>
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	9b00      	ldr	r3, [sp, #0]
 8007ae6:	701a      	strb	r2, [r3, #0]
 8007ae8:	e7df      	b.n	8007aaa <_vsniprintf_r+0x16>
	...

08007aec <vsniprintf>:
 8007aec:	b507      	push	{r0, r1, r2, lr}
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	4613      	mov	r3, r2
 8007af2:	460a      	mov	r2, r1
 8007af4:	4601      	mov	r1, r0
 8007af6:	4803      	ldr	r0, [pc, #12]	; (8007b04 <vsniprintf+0x18>)
 8007af8:	6800      	ldr	r0, [r0, #0]
 8007afa:	f7ff ffcb 	bl	8007a94 <_vsniprintf_r>
 8007afe:	b003      	add	sp, #12
 8007b00:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b04:	20000040 	.word	0x20000040

08007b08 <quorem>:
 8007b08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b0c:	6903      	ldr	r3, [r0, #16]
 8007b0e:	690c      	ldr	r4, [r1, #16]
 8007b10:	4607      	mov	r7, r0
 8007b12:	42a3      	cmp	r3, r4
 8007b14:	f2c0 8082 	blt.w	8007c1c <quorem+0x114>
 8007b18:	3c01      	subs	r4, #1
 8007b1a:	f100 0514 	add.w	r5, r0, #20
 8007b1e:	f101 0814 	add.w	r8, r1, #20
 8007b22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b26:	9301      	str	r3, [sp, #4]
 8007b28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b30:	3301      	adds	r3, #1
 8007b32:	429a      	cmp	r2, r3
 8007b34:	fbb2 f6f3 	udiv	r6, r2, r3
 8007b38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007b3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b40:	d331      	bcc.n	8007ba6 <quorem+0x9e>
 8007b42:	f04f 0e00 	mov.w	lr, #0
 8007b46:	4640      	mov	r0, r8
 8007b48:	46ac      	mov	ip, r5
 8007b4a:	46f2      	mov	sl, lr
 8007b4c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007b50:	b293      	uxth	r3, r2
 8007b52:	fb06 e303 	mla	r3, r6, r3, lr
 8007b56:	0c12      	lsrs	r2, r2, #16
 8007b58:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	fb06 e202 	mla	r2, r6, r2, lr
 8007b62:	ebaa 0303 	sub.w	r3, sl, r3
 8007b66:	f8dc a000 	ldr.w	sl, [ip]
 8007b6a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007b6e:	fa1f fa8a 	uxth.w	sl, sl
 8007b72:	4453      	add	r3, sl
 8007b74:	f8dc a000 	ldr.w	sl, [ip]
 8007b78:	b292      	uxth	r2, r2
 8007b7a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007b7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b88:	4581      	cmp	r9, r0
 8007b8a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007b8e:	f84c 3b04 	str.w	r3, [ip], #4
 8007b92:	d2db      	bcs.n	8007b4c <quorem+0x44>
 8007b94:	f855 300b 	ldr.w	r3, [r5, fp]
 8007b98:	b92b      	cbnz	r3, 8007ba6 <quorem+0x9e>
 8007b9a:	9b01      	ldr	r3, [sp, #4]
 8007b9c:	3b04      	subs	r3, #4
 8007b9e:	429d      	cmp	r5, r3
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	d32f      	bcc.n	8007c04 <quorem+0xfc>
 8007ba4:	613c      	str	r4, [r7, #16]
 8007ba6:	4638      	mov	r0, r7
 8007ba8:	f001 fc90 	bl	80094cc <__mcmp>
 8007bac:	2800      	cmp	r0, #0
 8007bae:	db25      	blt.n	8007bfc <quorem+0xf4>
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	f04f 0c00 	mov.w	ip, #0
 8007bb6:	3601      	adds	r6, #1
 8007bb8:	f858 1b04 	ldr.w	r1, [r8], #4
 8007bbc:	f8d0 e000 	ldr.w	lr, [r0]
 8007bc0:	b28b      	uxth	r3, r1
 8007bc2:	ebac 0303 	sub.w	r3, ip, r3
 8007bc6:	fa1f f28e 	uxth.w	r2, lr
 8007bca:	4413      	add	r3, r2
 8007bcc:	0c0a      	lsrs	r2, r1, #16
 8007bce:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007bd2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bdc:	45c1      	cmp	r9, r8
 8007bde:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007be2:	f840 3b04 	str.w	r3, [r0], #4
 8007be6:	d2e7      	bcs.n	8007bb8 <quorem+0xb0>
 8007be8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bf0:	b922      	cbnz	r2, 8007bfc <quorem+0xf4>
 8007bf2:	3b04      	subs	r3, #4
 8007bf4:	429d      	cmp	r5, r3
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	d30a      	bcc.n	8007c10 <quorem+0x108>
 8007bfa:	613c      	str	r4, [r7, #16]
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	b003      	add	sp, #12
 8007c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c04:	6812      	ldr	r2, [r2, #0]
 8007c06:	3b04      	subs	r3, #4
 8007c08:	2a00      	cmp	r2, #0
 8007c0a:	d1cb      	bne.n	8007ba4 <quorem+0x9c>
 8007c0c:	3c01      	subs	r4, #1
 8007c0e:	e7c6      	b.n	8007b9e <quorem+0x96>
 8007c10:	6812      	ldr	r2, [r2, #0]
 8007c12:	3b04      	subs	r3, #4
 8007c14:	2a00      	cmp	r2, #0
 8007c16:	d1f0      	bne.n	8007bfa <quorem+0xf2>
 8007c18:	3c01      	subs	r4, #1
 8007c1a:	e7eb      	b.n	8007bf4 <quorem+0xec>
 8007c1c:	2000      	movs	r0, #0
 8007c1e:	e7ee      	b.n	8007bfe <quorem+0xf6>

08007c20 <_dtoa_r>:
 8007c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c24:	4616      	mov	r6, r2
 8007c26:	461f      	mov	r7, r3
 8007c28:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007c2a:	b099      	sub	sp, #100	; 0x64
 8007c2c:	4605      	mov	r5, r0
 8007c2e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007c32:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007c36:	b974      	cbnz	r4, 8007c56 <_dtoa_r+0x36>
 8007c38:	2010      	movs	r0, #16
 8007c3a:	f001 f949 	bl	8008ed0 <malloc>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	6268      	str	r0, [r5, #36]	; 0x24
 8007c42:	b920      	cbnz	r0, 8007c4e <_dtoa_r+0x2e>
 8007c44:	21ea      	movs	r1, #234	; 0xea
 8007c46:	4ba8      	ldr	r3, [pc, #672]	; (8007ee8 <_dtoa_r+0x2c8>)
 8007c48:	48a8      	ldr	r0, [pc, #672]	; (8007eec <_dtoa_r+0x2cc>)
 8007c4a:	f002 f8b3 	bl	8009db4 <__assert_func>
 8007c4e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c52:	6004      	str	r4, [r0, #0]
 8007c54:	60c4      	str	r4, [r0, #12]
 8007c56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c58:	6819      	ldr	r1, [r3, #0]
 8007c5a:	b151      	cbz	r1, 8007c72 <_dtoa_r+0x52>
 8007c5c:	685a      	ldr	r2, [r3, #4]
 8007c5e:	2301      	movs	r3, #1
 8007c60:	4093      	lsls	r3, r2
 8007c62:	604a      	str	r2, [r1, #4]
 8007c64:	608b      	str	r3, [r1, #8]
 8007c66:	4628      	mov	r0, r5
 8007c68:	f001 f9a8 	bl	8008fbc <_Bfree>
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c70:	601a      	str	r2, [r3, #0]
 8007c72:	1e3b      	subs	r3, r7, #0
 8007c74:	bfaf      	iteee	ge
 8007c76:	2300      	movge	r3, #0
 8007c78:	2201      	movlt	r2, #1
 8007c7a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007c7e:	9305      	strlt	r3, [sp, #20]
 8007c80:	bfa8      	it	ge
 8007c82:	f8c8 3000 	strge.w	r3, [r8]
 8007c86:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007c8a:	4b99      	ldr	r3, [pc, #612]	; (8007ef0 <_dtoa_r+0x2d0>)
 8007c8c:	bfb8      	it	lt
 8007c8e:	f8c8 2000 	strlt.w	r2, [r8]
 8007c92:	ea33 0309 	bics.w	r3, r3, r9
 8007c96:	d119      	bne.n	8007ccc <_dtoa_r+0xac>
 8007c98:	f242 730f 	movw	r3, #9999	; 0x270f
 8007c9c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007c9e:	6013      	str	r3, [r2, #0]
 8007ca0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ca4:	4333      	orrs	r3, r6
 8007ca6:	f000 857f 	beq.w	80087a8 <_dtoa_r+0xb88>
 8007caa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007cac:	b953      	cbnz	r3, 8007cc4 <_dtoa_r+0xa4>
 8007cae:	4b91      	ldr	r3, [pc, #580]	; (8007ef4 <_dtoa_r+0x2d4>)
 8007cb0:	e022      	b.n	8007cf8 <_dtoa_r+0xd8>
 8007cb2:	4b91      	ldr	r3, [pc, #580]	; (8007ef8 <_dtoa_r+0x2d8>)
 8007cb4:	9303      	str	r3, [sp, #12]
 8007cb6:	3308      	adds	r3, #8
 8007cb8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007cba:	6013      	str	r3, [r2, #0]
 8007cbc:	9803      	ldr	r0, [sp, #12]
 8007cbe:	b019      	add	sp, #100	; 0x64
 8007cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cc4:	4b8b      	ldr	r3, [pc, #556]	; (8007ef4 <_dtoa_r+0x2d4>)
 8007cc6:	9303      	str	r3, [sp, #12]
 8007cc8:	3303      	adds	r3, #3
 8007cca:	e7f5      	b.n	8007cb8 <_dtoa_r+0x98>
 8007ccc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007cd0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007cd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007cd8:	2200      	movs	r2, #0
 8007cda:	2300      	movs	r3, #0
 8007cdc:	f7f8 fe64 	bl	80009a8 <__aeabi_dcmpeq>
 8007ce0:	4680      	mov	r8, r0
 8007ce2:	b158      	cbz	r0, 8007cfc <_dtoa_r+0xdc>
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007ce8:	6013      	str	r3, [r2, #0]
 8007cea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f000 8558 	beq.w	80087a2 <_dtoa_r+0xb82>
 8007cf2:	4882      	ldr	r0, [pc, #520]	; (8007efc <_dtoa_r+0x2dc>)
 8007cf4:	6018      	str	r0, [r3, #0]
 8007cf6:	1e43      	subs	r3, r0, #1
 8007cf8:	9303      	str	r3, [sp, #12]
 8007cfa:	e7df      	b.n	8007cbc <_dtoa_r+0x9c>
 8007cfc:	ab16      	add	r3, sp, #88	; 0x58
 8007cfe:	9301      	str	r3, [sp, #4]
 8007d00:	ab17      	add	r3, sp, #92	; 0x5c
 8007d02:	9300      	str	r3, [sp, #0]
 8007d04:	4628      	mov	r0, r5
 8007d06:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007d0a:	f001 fd01 	bl	8009710 <__d2b>
 8007d0e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007d12:	4683      	mov	fp, r0
 8007d14:	2c00      	cmp	r4, #0
 8007d16:	d07f      	beq.n	8007e18 <_dtoa_r+0x1f8>
 8007d18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d1e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007d22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d26:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007d2a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007d2e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007d32:	2200      	movs	r2, #0
 8007d34:	4b72      	ldr	r3, [pc, #456]	; (8007f00 <_dtoa_r+0x2e0>)
 8007d36:	f7f8 fa17 	bl	8000168 <__aeabi_dsub>
 8007d3a:	a365      	add	r3, pc, #404	; (adr r3, 8007ed0 <_dtoa_r+0x2b0>)
 8007d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d40:	f7f8 fbca 	bl	80004d8 <__aeabi_dmul>
 8007d44:	a364      	add	r3, pc, #400	; (adr r3, 8007ed8 <_dtoa_r+0x2b8>)
 8007d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4a:	f7f8 fa0f 	bl	800016c <__adddf3>
 8007d4e:	4606      	mov	r6, r0
 8007d50:	4620      	mov	r0, r4
 8007d52:	460f      	mov	r7, r1
 8007d54:	f7f8 fb56 	bl	8000404 <__aeabi_i2d>
 8007d58:	a361      	add	r3, pc, #388	; (adr r3, 8007ee0 <_dtoa_r+0x2c0>)
 8007d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5e:	f7f8 fbbb 	bl	80004d8 <__aeabi_dmul>
 8007d62:	4602      	mov	r2, r0
 8007d64:	460b      	mov	r3, r1
 8007d66:	4630      	mov	r0, r6
 8007d68:	4639      	mov	r1, r7
 8007d6a:	f7f8 f9ff 	bl	800016c <__adddf3>
 8007d6e:	4606      	mov	r6, r0
 8007d70:	460f      	mov	r7, r1
 8007d72:	f7f8 fe61 	bl	8000a38 <__aeabi_d2iz>
 8007d76:	2200      	movs	r2, #0
 8007d78:	4682      	mov	sl, r0
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	4630      	mov	r0, r6
 8007d7e:	4639      	mov	r1, r7
 8007d80:	f7f8 fe1c 	bl	80009bc <__aeabi_dcmplt>
 8007d84:	b148      	cbz	r0, 8007d9a <_dtoa_r+0x17a>
 8007d86:	4650      	mov	r0, sl
 8007d88:	f7f8 fb3c 	bl	8000404 <__aeabi_i2d>
 8007d8c:	4632      	mov	r2, r6
 8007d8e:	463b      	mov	r3, r7
 8007d90:	f7f8 fe0a 	bl	80009a8 <__aeabi_dcmpeq>
 8007d94:	b908      	cbnz	r0, 8007d9a <_dtoa_r+0x17a>
 8007d96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d9a:	f1ba 0f16 	cmp.w	sl, #22
 8007d9e:	d858      	bhi.n	8007e52 <_dtoa_r+0x232>
 8007da0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007da4:	4b57      	ldr	r3, [pc, #348]	; (8007f04 <_dtoa_r+0x2e4>)
 8007da6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dae:	f7f8 fe05 	bl	80009bc <__aeabi_dcmplt>
 8007db2:	2800      	cmp	r0, #0
 8007db4:	d04f      	beq.n	8007e56 <_dtoa_r+0x236>
 8007db6:	2300      	movs	r3, #0
 8007db8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007dbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8007dbe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007dc0:	1b1c      	subs	r4, r3, r4
 8007dc2:	1e63      	subs	r3, r4, #1
 8007dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8007dc6:	bf49      	itett	mi
 8007dc8:	f1c4 0301 	rsbmi	r3, r4, #1
 8007dcc:	2300      	movpl	r3, #0
 8007dce:	9306      	strmi	r3, [sp, #24]
 8007dd0:	2300      	movmi	r3, #0
 8007dd2:	bf54      	ite	pl
 8007dd4:	9306      	strpl	r3, [sp, #24]
 8007dd6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007dd8:	f1ba 0f00 	cmp.w	sl, #0
 8007ddc:	db3d      	blt.n	8007e5a <_dtoa_r+0x23a>
 8007dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007de0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007de4:	4453      	add	r3, sl
 8007de6:	9309      	str	r3, [sp, #36]	; 0x24
 8007de8:	2300      	movs	r3, #0
 8007dea:	930a      	str	r3, [sp, #40]	; 0x28
 8007dec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007dee:	2b09      	cmp	r3, #9
 8007df0:	f200 808c 	bhi.w	8007f0c <_dtoa_r+0x2ec>
 8007df4:	2b05      	cmp	r3, #5
 8007df6:	bfc4      	itt	gt
 8007df8:	3b04      	subgt	r3, #4
 8007dfa:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007dfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007dfe:	bfc8      	it	gt
 8007e00:	2400      	movgt	r4, #0
 8007e02:	f1a3 0302 	sub.w	r3, r3, #2
 8007e06:	bfd8      	it	le
 8007e08:	2401      	movle	r4, #1
 8007e0a:	2b03      	cmp	r3, #3
 8007e0c:	f200 808a 	bhi.w	8007f24 <_dtoa_r+0x304>
 8007e10:	e8df f003 	tbb	[pc, r3]
 8007e14:	5b4d4f2d 	.word	0x5b4d4f2d
 8007e18:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007e1c:	441c      	add	r4, r3
 8007e1e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007e22:	2b20      	cmp	r3, #32
 8007e24:	bfc3      	ittte	gt
 8007e26:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007e2a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007e2e:	fa09 f303 	lslgt.w	r3, r9, r3
 8007e32:	f1c3 0320 	rsble	r3, r3, #32
 8007e36:	bfc6      	itte	gt
 8007e38:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007e3c:	4318      	orrgt	r0, r3
 8007e3e:	fa06 f003 	lslle.w	r0, r6, r3
 8007e42:	f7f8 facf 	bl	80003e4 <__aeabi_ui2d>
 8007e46:	2301      	movs	r3, #1
 8007e48:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007e4c:	3c01      	subs	r4, #1
 8007e4e:	9313      	str	r3, [sp, #76]	; 0x4c
 8007e50:	e76f      	b.n	8007d32 <_dtoa_r+0x112>
 8007e52:	2301      	movs	r3, #1
 8007e54:	e7b2      	b.n	8007dbc <_dtoa_r+0x19c>
 8007e56:	900f      	str	r0, [sp, #60]	; 0x3c
 8007e58:	e7b1      	b.n	8007dbe <_dtoa_r+0x19e>
 8007e5a:	9b06      	ldr	r3, [sp, #24]
 8007e5c:	eba3 030a 	sub.w	r3, r3, sl
 8007e60:	9306      	str	r3, [sp, #24]
 8007e62:	f1ca 0300 	rsb	r3, sl, #0
 8007e66:	930a      	str	r3, [sp, #40]	; 0x28
 8007e68:	2300      	movs	r3, #0
 8007e6a:	930e      	str	r3, [sp, #56]	; 0x38
 8007e6c:	e7be      	b.n	8007dec <_dtoa_r+0x1cc>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	dc58      	bgt.n	8007f2a <_dtoa_r+0x30a>
 8007e78:	f04f 0901 	mov.w	r9, #1
 8007e7c:	464b      	mov	r3, r9
 8007e7e:	f8cd 9020 	str.w	r9, [sp, #32]
 8007e82:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007e86:	2200      	movs	r2, #0
 8007e88:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007e8a:	6042      	str	r2, [r0, #4]
 8007e8c:	2204      	movs	r2, #4
 8007e8e:	f102 0614 	add.w	r6, r2, #20
 8007e92:	429e      	cmp	r6, r3
 8007e94:	6841      	ldr	r1, [r0, #4]
 8007e96:	d94e      	bls.n	8007f36 <_dtoa_r+0x316>
 8007e98:	4628      	mov	r0, r5
 8007e9a:	f001 f84f 	bl	8008f3c <_Balloc>
 8007e9e:	9003      	str	r0, [sp, #12]
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	d14c      	bne.n	8007f3e <_dtoa_r+0x31e>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007eaa:	4b17      	ldr	r3, [pc, #92]	; (8007f08 <_dtoa_r+0x2e8>)
 8007eac:	e6cc      	b.n	8007c48 <_dtoa_r+0x28>
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e7de      	b.n	8007e70 <_dtoa_r+0x250>
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007eb6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007eb8:	eb0a 0903 	add.w	r9, sl, r3
 8007ebc:	f109 0301 	add.w	r3, r9, #1
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	9308      	str	r3, [sp, #32]
 8007ec4:	bfb8      	it	lt
 8007ec6:	2301      	movlt	r3, #1
 8007ec8:	e7dd      	b.n	8007e86 <_dtoa_r+0x266>
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e7f2      	b.n	8007eb4 <_dtoa_r+0x294>
 8007ece:	bf00      	nop
 8007ed0:	636f4361 	.word	0x636f4361
 8007ed4:	3fd287a7 	.word	0x3fd287a7
 8007ed8:	8b60c8b3 	.word	0x8b60c8b3
 8007edc:	3fc68a28 	.word	0x3fc68a28
 8007ee0:	509f79fb 	.word	0x509f79fb
 8007ee4:	3fd34413 	.word	0x3fd34413
 8007ee8:	0800ab86 	.word	0x0800ab86
 8007eec:	0800ab9d 	.word	0x0800ab9d
 8007ef0:	7ff00000 	.word	0x7ff00000
 8007ef4:	0800ab82 	.word	0x0800ab82
 8007ef8:	0800ab79 	.word	0x0800ab79
 8007efc:	0800aa01 	.word	0x0800aa01
 8007f00:	3ff80000 	.word	0x3ff80000
 8007f04:	0800ad08 	.word	0x0800ad08
 8007f08:	0800abf8 	.word	0x0800abf8
 8007f0c:	2401      	movs	r4, #1
 8007f0e:	2300      	movs	r3, #0
 8007f10:	940b      	str	r4, [sp, #44]	; 0x2c
 8007f12:	9322      	str	r3, [sp, #136]	; 0x88
 8007f14:	f04f 39ff 	mov.w	r9, #4294967295
 8007f18:	2200      	movs	r2, #0
 8007f1a:	2312      	movs	r3, #18
 8007f1c:	f8cd 9020 	str.w	r9, [sp, #32]
 8007f20:	9223      	str	r2, [sp, #140]	; 0x8c
 8007f22:	e7b0      	b.n	8007e86 <_dtoa_r+0x266>
 8007f24:	2301      	movs	r3, #1
 8007f26:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f28:	e7f4      	b.n	8007f14 <_dtoa_r+0x2f4>
 8007f2a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8007f2e:	464b      	mov	r3, r9
 8007f30:	f8cd 9020 	str.w	r9, [sp, #32]
 8007f34:	e7a7      	b.n	8007e86 <_dtoa_r+0x266>
 8007f36:	3101      	adds	r1, #1
 8007f38:	6041      	str	r1, [r0, #4]
 8007f3a:	0052      	lsls	r2, r2, #1
 8007f3c:	e7a7      	b.n	8007e8e <_dtoa_r+0x26e>
 8007f3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f40:	9a03      	ldr	r2, [sp, #12]
 8007f42:	601a      	str	r2, [r3, #0]
 8007f44:	9b08      	ldr	r3, [sp, #32]
 8007f46:	2b0e      	cmp	r3, #14
 8007f48:	f200 80a8 	bhi.w	800809c <_dtoa_r+0x47c>
 8007f4c:	2c00      	cmp	r4, #0
 8007f4e:	f000 80a5 	beq.w	800809c <_dtoa_r+0x47c>
 8007f52:	f1ba 0f00 	cmp.w	sl, #0
 8007f56:	dd34      	ble.n	8007fc2 <_dtoa_r+0x3a2>
 8007f58:	4a9a      	ldr	r2, [pc, #616]	; (80081c4 <_dtoa_r+0x5a4>)
 8007f5a:	f00a 030f 	and.w	r3, sl, #15
 8007f5e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007f62:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007f66:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007f6a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007f6e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8007f72:	d016      	beq.n	8007fa2 <_dtoa_r+0x382>
 8007f74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f78:	4b93      	ldr	r3, [pc, #588]	; (80081c8 <_dtoa_r+0x5a8>)
 8007f7a:	2703      	movs	r7, #3
 8007f7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f80:	f7f8 fbd4 	bl	800072c <__aeabi_ddiv>
 8007f84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f88:	f004 040f 	and.w	r4, r4, #15
 8007f8c:	4e8e      	ldr	r6, [pc, #568]	; (80081c8 <_dtoa_r+0x5a8>)
 8007f8e:	b954      	cbnz	r4, 8007fa6 <_dtoa_r+0x386>
 8007f90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007f94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f98:	f7f8 fbc8 	bl	800072c <__aeabi_ddiv>
 8007f9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fa0:	e029      	b.n	8007ff6 <_dtoa_r+0x3d6>
 8007fa2:	2702      	movs	r7, #2
 8007fa4:	e7f2      	b.n	8007f8c <_dtoa_r+0x36c>
 8007fa6:	07e1      	lsls	r1, r4, #31
 8007fa8:	d508      	bpl.n	8007fbc <_dtoa_r+0x39c>
 8007faa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007fae:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007fb2:	f7f8 fa91 	bl	80004d8 <__aeabi_dmul>
 8007fb6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007fba:	3701      	adds	r7, #1
 8007fbc:	1064      	asrs	r4, r4, #1
 8007fbe:	3608      	adds	r6, #8
 8007fc0:	e7e5      	b.n	8007f8e <_dtoa_r+0x36e>
 8007fc2:	f000 80a5 	beq.w	8008110 <_dtoa_r+0x4f0>
 8007fc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007fca:	f1ca 0400 	rsb	r4, sl, #0
 8007fce:	4b7d      	ldr	r3, [pc, #500]	; (80081c4 <_dtoa_r+0x5a4>)
 8007fd0:	f004 020f 	and.w	r2, r4, #15
 8007fd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fdc:	f7f8 fa7c 	bl	80004d8 <__aeabi_dmul>
 8007fe0:	2702      	movs	r7, #2
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fe8:	4e77      	ldr	r6, [pc, #476]	; (80081c8 <_dtoa_r+0x5a8>)
 8007fea:	1124      	asrs	r4, r4, #4
 8007fec:	2c00      	cmp	r4, #0
 8007fee:	f040 8084 	bne.w	80080fa <_dtoa_r+0x4da>
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1d2      	bne.n	8007f9c <_dtoa_r+0x37c>
 8007ff6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f000 808b 	beq.w	8008114 <_dtoa_r+0x4f4>
 8007ffe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008002:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008006:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800800a:	2200      	movs	r2, #0
 800800c:	4b6f      	ldr	r3, [pc, #444]	; (80081cc <_dtoa_r+0x5ac>)
 800800e:	f7f8 fcd5 	bl	80009bc <__aeabi_dcmplt>
 8008012:	2800      	cmp	r0, #0
 8008014:	d07e      	beq.n	8008114 <_dtoa_r+0x4f4>
 8008016:	9b08      	ldr	r3, [sp, #32]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d07b      	beq.n	8008114 <_dtoa_r+0x4f4>
 800801c:	f1b9 0f00 	cmp.w	r9, #0
 8008020:	dd38      	ble.n	8008094 <_dtoa_r+0x474>
 8008022:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008026:	2200      	movs	r2, #0
 8008028:	4b69      	ldr	r3, [pc, #420]	; (80081d0 <_dtoa_r+0x5b0>)
 800802a:	f7f8 fa55 	bl	80004d8 <__aeabi_dmul>
 800802e:	464c      	mov	r4, r9
 8008030:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008034:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008038:	3701      	adds	r7, #1
 800803a:	4638      	mov	r0, r7
 800803c:	f7f8 f9e2 	bl	8000404 <__aeabi_i2d>
 8008040:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008044:	f7f8 fa48 	bl	80004d8 <__aeabi_dmul>
 8008048:	2200      	movs	r2, #0
 800804a:	4b62      	ldr	r3, [pc, #392]	; (80081d4 <_dtoa_r+0x5b4>)
 800804c:	f7f8 f88e 	bl	800016c <__adddf3>
 8008050:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008054:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008058:	9611      	str	r6, [sp, #68]	; 0x44
 800805a:	2c00      	cmp	r4, #0
 800805c:	d15d      	bne.n	800811a <_dtoa_r+0x4fa>
 800805e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008062:	2200      	movs	r2, #0
 8008064:	4b5c      	ldr	r3, [pc, #368]	; (80081d8 <_dtoa_r+0x5b8>)
 8008066:	f7f8 f87f 	bl	8000168 <__aeabi_dsub>
 800806a:	4602      	mov	r2, r0
 800806c:	460b      	mov	r3, r1
 800806e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008072:	4633      	mov	r3, r6
 8008074:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008076:	f7f8 fcbf 	bl	80009f8 <__aeabi_dcmpgt>
 800807a:	2800      	cmp	r0, #0
 800807c:	f040 829c 	bne.w	80085b8 <_dtoa_r+0x998>
 8008080:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008084:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008086:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800808a:	f7f8 fc97 	bl	80009bc <__aeabi_dcmplt>
 800808e:	2800      	cmp	r0, #0
 8008090:	f040 8290 	bne.w	80085b4 <_dtoa_r+0x994>
 8008094:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008098:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800809c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f2c0 8152 	blt.w	8008348 <_dtoa_r+0x728>
 80080a4:	f1ba 0f0e 	cmp.w	sl, #14
 80080a8:	f300 814e 	bgt.w	8008348 <_dtoa_r+0x728>
 80080ac:	4b45      	ldr	r3, [pc, #276]	; (80081c4 <_dtoa_r+0x5a4>)
 80080ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80080b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80080b6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80080ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f280 80db 	bge.w	8008278 <_dtoa_r+0x658>
 80080c2:	9b08      	ldr	r3, [sp, #32]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f300 80d7 	bgt.w	8008278 <_dtoa_r+0x658>
 80080ca:	f040 8272 	bne.w	80085b2 <_dtoa_r+0x992>
 80080ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080d2:	2200      	movs	r2, #0
 80080d4:	4b40      	ldr	r3, [pc, #256]	; (80081d8 <_dtoa_r+0x5b8>)
 80080d6:	f7f8 f9ff 	bl	80004d8 <__aeabi_dmul>
 80080da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080de:	f7f8 fc81 	bl	80009e4 <__aeabi_dcmpge>
 80080e2:	9c08      	ldr	r4, [sp, #32]
 80080e4:	4626      	mov	r6, r4
 80080e6:	2800      	cmp	r0, #0
 80080e8:	f040 8248 	bne.w	800857c <_dtoa_r+0x95c>
 80080ec:	2331      	movs	r3, #49	; 0x31
 80080ee:	9f03      	ldr	r7, [sp, #12]
 80080f0:	f10a 0a01 	add.w	sl, sl, #1
 80080f4:	f807 3b01 	strb.w	r3, [r7], #1
 80080f8:	e244      	b.n	8008584 <_dtoa_r+0x964>
 80080fa:	07e2      	lsls	r2, r4, #31
 80080fc:	d505      	bpl.n	800810a <_dtoa_r+0x4ea>
 80080fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008102:	f7f8 f9e9 	bl	80004d8 <__aeabi_dmul>
 8008106:	2301      	movs	r3, #1
 8008108:	3701      	adds	r7, #1
 800810a:	1064      	asrs	r4, r4, #1
 800810c:	3608      	adds	r6, #8
 800810e:	e76d      	b.n	8007fec <_dtoa_r+0x3cc>
 8008110:	2702      	movs	r7, #2
 8008112:	e770      	b.n	8007ff6 <_dtoa_r+0x3d6>
 8008114:	46d0      	mov	r8, sl
 8008116:	9c08      	ldr	r4, [sp, #32]
 8008118:	e78f      	b.n	800803a <_dtoa_r+0x41a>
 800811a:	9903      	ldr	r1, [sp, #12]
 800811c:	4b29      	ldr	r3, [pc, #164]	; (80081c4 <_dtoa_r+0x5a4>)
 800811e:	4421      	add	r1, r4
 8008120:	9112      	str	r1, [sp, #72]	; 0x48
 8008122:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008124:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008128:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800812c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008130:	2900      	cmp	r1, #0
 8008132:	d055      	beq.n	80081e0 <_dtoa_r+0x5c0>
 8008134:	2000      	movs	r0, #0
 8008136:	4929      	ldr	r1, [pc, #164]	; (80081dc <_dtoa_r+0x5bc>)
 8008138:	f7f8 faf8 	bl	800072c <__aeabi_ddiv>
 800813c:	463b      	mov	r3, r7
 800813e:	4632      	mov	r2, r6
 8008140:	f7f8 f812 	bl	8000168 <__aeabi_dsub>
 8008144:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008148:	9f03      	ldr	r7, [sp, #12]
 800814a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800814e:	f7f8 fc73 	bl	8000a38 <__aeabi_d2iz>
 8008152:	4604      	mov	r4, r0
 8008154:	f7f8 f956 	bl	8000404 <__aeabi_i2d>
 8008158:	4602      	mov	r2, r0
 800815a:	460b      	mov	r3, r1
 800815c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008160:	f7f8 f802 	bl	8000168 <__aeabi_dsub>
 8008164:	4602      	mov	r2, r0
 8008166:	460b      	mov	r3, r1
 8008168:	3430      	adds	r4, #48	; 0x30
 800816a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800816e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008172:	f807 4b01 	strb.w	r4, [r7], #1
 8008176:	f7f8 fc21 	bl	80009bc <__aeabi_dcmplt>
 800817a:	2800      	cmp	r0, #0
 800817c:	d174      	bne.n	8008268 <_dtoa_r+0x648>
 800817e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008182:	2000      	movs	r0, #0
 8008184:	4911      	ldr	r1, [pc, #68]	; (80081cc <_dtoa_r+0x5ac>)
 8008186:	f7f7 ffef 	bl	8000168 <__aeabi_dsub>
 800818a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800818e:	f7f8 fc15 	bl	80009bc <__aeabi_dcmplt>
 8008192:	2800      	cmp	r0, #0
 8008194:	f040 80b7 	bne.w	8008306 <_dtoa_r+0x6e6>
 8008198:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800819a:	429f      	cmp	r7, r3
 800819c:	f43f af7a 	beq.w	8008094 <_dtoa_r+0x474>
 80081a0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80081a4:	2200      	movs	r2, #0
 80081a6:	4b0a      	ldr	r3, [pc, #40]	; (80081d0 <_dtoa_r+0x5b0>)
 80081a8:	f7f8 f996 	bl	80004d8 <__aeabi_dmul>
 80081ac:	2200      	movs	r2, #0
 80081ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80081b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081b6:	4b06      	ldr	r3, [pc, #24]	; (80081d0 <_dtoa_r+0x5b0>)
 80081b8:	f7f8 f98e 	bl	80004d8 <__aeabi_dmul>
 80081bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081c0:	e7c3      	b.n	800814a <_dtoa_r+0x52a>
 80081c2:	bf00      	nop
 80081c4:	0800ad08 	.word	0x0800ad08
 80081c8:	0800ace0 	.word	0x0800ace0
 80081cc:	3ff00000 	.word	0x3ff00000
 80081d0:	40240000 	.word	0x40240000
 80081d4:	401c0000 	.word	0x401c0000
 80081d8:	40140000 	.word	0x40140000
 80081dc:	3fe00000 	.word	0x3fe00000
 80081e0:	4630      	mov	r0, r6
 80081e2:	4639      	mov	r1, r7
 80081e4:	f7f8 f978 	bl	80004d8 <__aeabi_dmul>
 80081e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80081ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80081ee:	9c03      	ldr	r4, [sp, #12]
 80081f0:	9314      	str	r3, [sp, #80]	; 0x50
 80081f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081f6:	f7f8 fc1f 	bl	8000a38 <__aeabi_d2iz>
 80081fa:	9015      	str	r0, [sp, #84]	; 0x54
 80081fc:	f7f8 f902 	bl	8000404 <__aeabi_i2d>
 8008200:	4602      	mov	r2, r0
 8008202:	460b      	mov	r3, r1
 8008204:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008208:	f7f7 ffae 	bl	8000168 <__aeabi_dsub>
 800820c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800820e:	4606      	mov	r6, r0
 8008210:	3330      	adds	r3, #48	; 0x30
 8008212:	f804 3b01 	strb.w	r3, [r4], #1
 8008216:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008218:	460f      	mov	r7, r1
 800821a:	429c      	cmp	r4, r3
 800821c:	f04f 0200 	mov.w	r2, #0
 8008220:	d124      	bne.n	800826c <_dtoa_r+0x64c>
 8008222:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008226:	4bb0      	ldr	r3, [pc, #704]	; (80084e8 <_dtoa_r+0x8c8>)
 8008228:	f7f7 ffa0 	bl	800016c <__adddf3>
 800822c:	4602      	mov	r2, r0
 800822e:	460b      	mov	r3, r1
 8008230:	4630      	mov	r0, r6
 8008232:	4639      	mov	r1, r7
 8008234:	f7f8 fbe0 	bl	80009f8 <__aeabi_dcmpgt>
 8008238:	2800      	cmp	r0, #0
 800823a:	d163      	bne.n	8008304 <_dtoa_r+0x6e4>
 800823c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008240:	2000      	movs	r0, #0
 8008242:	49a9      	ldr	r1, [pc, #676]	; (80084e8 <_dtoa_r+0x8c8>)
 8008244:	f7f7 ff90 	bl	8000168 <__aeabi_dsub>
 8008248:	4602      	mov	r2, r0
 800824a:	460b      	mov	r3, r1
 800824c:	4630      	mov	r0, r6
 800824e:	4639      	mov	r1, r7
 8008250:	f7f8 fbb4 	bl	80009bc <__aeabi_dcmplt>
 8008254:	2800      	cmp	r0, #0
 8008256:	f43f af1d 	beq.w	8008094 <_dtoa_r+0x474>
 800825a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800825c:	1e7b      	subs	r3, r7, #1
 800825e:	9314      	str	r3, [sp, #80]	; 0x50
 8008260:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008264:	2b30      	cmp	r3, #48	; 0x30
 8008266:	d0f8      	beq.n	800825a <_dtoa_r+0x63a>
 8008268:	46c2      	mov	sl, r8
 800826a:	e03b      	b.n	80082e4 <_dtoa_r+0x6c4>
 800826c:	4b9f      	ldr	r3, [pc, #636]	; (80084ec <_dtoa_r+0x8cc>)
 800826e:	f7f8 f933 	bl	80004d8 <__aeabi_dmul>
 8008272:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008276:	e7bc      	b.n	80081f2 <_dtoa_r+0x5d2>
 8008278:	9f03      	ldr	r7, [sp, #12]
 800827a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800827e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008282:	4640      	mov	r0, r8
 8008284:	4649      	mov	r1, r9
 8008286:	f7f8 fa51 	bl	800072c <__aeabi_ddiv>
 800828a:	f7f8 fbd5 	bl	8000a38 <__aeabi_d2iz>
 800828e:	4604      	mov	r4, r0
 8008290:	f7f8 f8b8 	bl	8000404 <__aeabi_i2d>
 8008294:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008298:	f7f8 f91e 	bl	80004d8 <__aeabi_dmul>
 800829c:	4602      	mov	r2, r0
 800829e:	460b      	mov	r3, r1
 80082a0:	4640      	mov	r0, r8
 80082a2:	4649      	mov	r1, r9
 80082a4:	f7f7 ff60 	bl	8000168 <__aeabi_dsub>
 80082a8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80082ac:	f807 6b01 	strb.w	r6, [r7], #1
 80082b0:	9e03      	ldr	r6, [sp, #12]
 80082b2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80082b6:	1bbe      	subs	r6, r7, r6
 80082b8:	45b4      	cmp	ip, r6
 80082ba:	4602      	mov	r2, r0
 80082bc:	460b      	mov	r3, r1
 80082be:	d136      	bne.n	800832e <_dtoa_r+0x70e>
 80082c0:	f7f7 ff54 	bl	800016c <__adddf3>
 80082c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082c8:	4680      	mov	r8, r0
 80082ca:	4689      	mov	r9, r1
 80082cc:	f7f8 fb94 	bl	80009f8 <__aeabi_dcmpgt>
 80082d0:	bb58      	cbnz	r0, 800832a <_dtoa_r+0x70a>
 80082d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082d6:	4640      	mov	r0, r8
 80082d8:	4649      	mov	r1, r9
 80082da:	f7f8 fb65 	bl	80009a8 <__aeabi_dcmpeq>
 80082de:	b108      	cbz	r0, 80082e4 <_dtoa_r+0x6c4>
 80082e0:	07e1      	lsls	r1, r4, #31
 80082e2:	d422      	bmi.n	800832a <_dtoa_r+0x70a>
 80082e4:	4628      	mov	r0, r5
 80082e6:	4659      	mov	r1, fp
 80082e8:	f000 fe68 	bl	8008fbc <_Bfree>
 80082ec:	2300      	movs	r3, #0
 80082ee:	703b      	strb	r3, [r7, #0]
 80082f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80082f2:	f10a 0001 	add.w	r0, sl, #1
 80082f6:	6018      	str	r0, [r3, #0]
 80082f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f43f acde 	beq.w	8007cbc <_dtoa_r+0x9c>
 8008300:	601f      	str	r7, [r3, #0]
 8008302:	e4db      	b.n	8007cbc <_dtoa_r+0x9c>
 8008304:	4627      	mov	r7, r4
 8008306:	463b      	mov	r3, r7
 8008308:	461f      	mov	r7, r3
 800830a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800830e:	2a39      	cmp	r2, #57	; 0x39
 8008310:	d107      	bne.n	8008322 <_dtoa_r+0x702>
 8008312:	9a03      	ldr	r2, [sp, #12]
 8008314:	429a      	cmp	r2, r3
 8008316:	d1f7      	bne.n	8008308 <_dtoa_r+0x6e8>
 8008318:	2230      	movs	r2, #48	; 0x30
 800831a:	9903      	ldr	r1, [sp, #12]
 800831c:	f108 0801 	add.w	r8, r8, #1
 8008320:	700a      	strb	r2, [r1, #0]
 8008322:	781a      	ldrb	r2, [r3, #0]
 8008324:	3201      	adds	r2, #1
 8008326:	701a      	strb	r2, [r3, #0]
 8008328:	e79e      	b.n	8008268 <_dtoa_r+0x648>
 800832a:	46d0      	mov	r8, sl
 800832c:	e7eb      	b.n	8008306 <_dtoa_r+0x6e6>
 800832e:	2200      	movs	r2, #0
 8008330:	4b6e      	ldr	r3, [pc, #440]	; (80084ec <_dtoa_r+0x8cc>)
 8008332:	f7f8 f8d1 	bl	80004d8 <__aeabi_dmul>
 8008336:	2200      	movs	r2, #0
 8008338:	2300      	movs	r3, #0
 800833a:	4680      	mov	r8, r0
 800833c:	4689      	mov	r9, r1
 800833e:	f7f8 fb33 	bl	80009a8 <__aeabi_dcmpeq>
 8008342:	2800      	cmp	r0, #0
 8008344:	d09b      	beq.n	800827e <_dtoa_r+0x65e>
 8008346:	e7cd      	b.n	80082e4 <_dtoa_r+0x6c4>
 8008348:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800834a:	2a00      	cmp	r2, #0
 800834c:	f000 80d0 	beq.w	80084f0 <_dtoa_r+0x8d0>
 8008350:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008352:	2a01      	cmp	r2, #1
 8008354:	f300 80ae 	bgt.w	80084b4 <_dtoa_r+0x894>
 8008358:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800835a:	2a00      	cmp	r2, #0
 800835c:	f000 80a6 	beq.w	80084ac <_dtoa_r+0x88c>
 8008360:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008364:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008366:	9f06      	ldr	r7, [sp, #24]
 8008368:	9a06      	ldr	r2, [sp, #24]
 800836a:	2101      	movs	r1, #1
 800836c:	441a      	add	r2, r3
 800836e:	9206      	str	r2, [sp, #24]
 8008370:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008372:	4628      	mov	r0, r5
 8008374:	441a      	add	r2, r3
 8008376:	9209      	str	r2, [sp, #36]	; 0x24
 8008378:	f000 ff20 	bl	80091bc <__i2b>
 800837c:	4606      	mov	r6, r0
 800837e:	2f00      	cmp	r7, #0
 8008380:	dd0c      	ble.n	800839c <_dtoa_r+0x77c>
 8008382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008384:	2b00      	cmp	r3, #0
 8008386:	dd09      	ble.n	800839c <_dtoa_r+0x77c>
 8008388:	42bb      	cmp	r3, r7
 800838a:	bfa8      	it	ge
 800838c:	463b      	movge	r3, r7
 800838e:	9a06      	ldr	r2, [sp, #24]
 8008390:	1aff      	subs	r7, r7, r3
 8008392:	1ad2      	subs	r2, r2, r3
 8008394:	9206      	str	r2, [sp, #24]
 8008396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	9309      	str	r3, [sp, #36]	; 0x24
 800839c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800839e:	b1f3      	cbz	r3, 80083de <_dtoa_r+0x7be>
 80083a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f000 80a8 	beq.w	80084f8 <_dtoa_r+0x8d8>
 80083a8:	2c00      	cmp	r4, #0
 80083aa:	dd10      	ble.n	80083ce <_dtoa_r+0x7ae>
 80083ac:	4631      	mov	r1, r6
 80083ae:	4622      	mov	r2, r4
 80083b0:	4628      	mov	r0, r5
 80083b2:	f000 ffc1 	bl	8009338 <__pow5mult>
 80083b6:	465a      	mov	r2, fp
 80083b8:	4601      	mov	r1, r0
 80083ba:	4606      	mov	r6, r0
 80083bc:	4628      	mov	r0, r5
 80083be:	f000 ff13 	bl	80091e8 <__multiply>
 80083c2:	4680      	mov	r8, r0
 80083c4:	4659      	mov	r1, fp
 80083c6:	4628      	mov	r0, r5
 80083c8:	f000 fdf8 	bl	8008fbc <_Bfree>
 80083cc:	46c3      	mov	fp, r8
 80083ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083d0:	1b1a      	subs	r2, r3, r4
 80083d2:	d004      	beq.n	80083de <_dtoa_r+0x7be>
 80083d4:	4659      	mov	r1, fp
 80083d6:	4628      	mov	r0, r5
 80083d8:	f000 ffae 	bl	8009338 <__pow5mult>
 80083dc:	4683      	mov	fp, r0
 80083de:	2101      	movs	r1, #1
 80083e0:	4628      	mov	r0, r5
 80083e2:	f000 feeb 	bl	80091bc <__i2b>
 80083e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083e8:	4604      	mov	r4, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f340 8086 	ble.w	80084fc <_dtoa_r+0x8dc>
 80083f0:	461a      	mov	r2, r3
 80083f2:	4601      	mov	r1, r0
 80083f4:	4628      	mov	r0, r5
 80083f6:	f000 ff9f 	bl	8009338 <__pow5mult>
 80083fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083fc:	4604      	mov	r4, r0
 80083fe:	2b01      	cmp	r3, #1
 8008400:	dd7f      	ble.n	8008502 <_dtoa_r+0x8e2>
 8008402:	f04f 0800 	mov.w	r8, #0
 8008406:	6923      	ldr	r3, [r4, #16]
 8008408:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800840c:	6918      	ldr	r0, [r3, #16]
 800840e:	f000 fe87 	bl	8009120 <__hi0bits>
 8008412:	f1c0 0020 	rsb	r0, r0, #32
 8008416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008418:	4418      	add	r0, r3
 800841a:	f010 001f 	ands.w	r0, r0, #31
 800841e:	f000 8092 	beq.w	8008546 <_dtoa_r+0x926>
 8008422:	f1c0 0320 	rsb	r3, r0, #32
 8008426:	2b04      	cmp	r3, #4
 8008428:	f340 808a 	ble.w	8008540 <_dtoa_r+0x920>
 800842c:	f1c0 001c 	rsb	r0, r0, #28
 8008430:	9b06      	ldr	r3, [sp, #24]
 8008432:	4407      	add	r7, r0
 8008434:	4403      	add	r3, r0
 8008436:	9306      	str	r3, [sp, #24]
 8008438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800843a:	4403      	add	r3, r0
 800843c:	9309      	str	r3, [sp, #36]	; 0x24
 800843e:	9b06      	ldr	r3, [sp, #24]
 8008440:	2b00      	cmp	r3, #0
 8008442:	dd05      	ble.n	8008450 <_dtoa_r+0x830>
 8008444:	4659      	mov	r1, fp
 8008446:	461a      	mov	r2, r3
 8008448:	4628      	mov	r0, r5
 800844a:	f000 ffcf 	bl	80093ec <__lshift>
 800844e:	4683      	mov	fp, r0
 8008450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008452:	2b00      	cmp	r3, #0
 8008454:	dd05      	ble.n	8008462 <_dtoa_r+0x842>
 8008456:	4621      	mov	r1, r4
 8008458:	461a      	mov	r2, r3
 800845a:	4628      	mov	r0, r5
 800845c:	f000 ffc6 	bl	80093ec <__lshift>
 8008460:	4604      	mov	r4, r0
 8008462:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008464:	2b00      	cmp	r3, #0
 8008466:	d070      	beq.n	800854a <_dtoa_r+0x92a>
 8008468:	4621      	mov	r1, r4
 800846a:	4658      	mov	r0, fp
 800846c:	f001 f82e 	bl	80094cc <__mcmp>
 8008470:	2800      	cmp	r0, #0
 8008472:	da6a      	bge.n	800854a <_dtoa_r+0x92a>
 8008474:	2300      	movs	r3, #0
 8008476:	4659      	mov	r1, fp
 8008478:	220a      	movs	r2, #10
 800847a:	4628      	mov	r0, r5
 800847c:	f000 fdc0 	bl	8009000 <__multadd>
 8008480:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008482:	4683      	mov	fp, r0
 8008484:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008488:	2b00      	cmp	r3, #0
 800848a:	f000 8194 	beq.w	80087b6 <_dtoa_r+0xb96>
 800848e:	4631      	mov	r1, r6
 8008490:	2300      	movs	r3, #0
 8008492:	220a      	movs	r2, #10
 8008494:	4628      	mov	r0, r5
 8008496:	f000 fdb3 	bl	8009000 <__multadd>
 800849a:	f1b9 0f00 	cmp.w	r9, #0
 800849e:	4606      	mov	r6, r0
 80084a0:	f300 8093 	bgt.w	80085ca <_dtoa_r+0x9aa>
 80084a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	dc57      	bgt.n	800855a <_dtoa_r+0x93a>
 80084aa:	e08e      	b.n	80085ca <_dtoa_r+0x9aa>
 80084ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80084ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80084b2:	e757      	b.n	8008364 <_dtoa_r+0x744>
 80084b4:	9b08      	ldr	r3, [sp, #32]
 80084b6:	1e5c      	subs	r4, r3, #1
 80084b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ba:	42a3      	cmp	r3, r4
 80084bc:	bfb7      	itett	lt
 80084be:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80084c0:	1b1c      	subge	r4, r3, r4
 80084c2:	1ae2      	sublt	r2, r4, r3
 80084c4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80084c6:	bfbe      	ittt	lt
 80084c8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80084ca:	189b      	addlt	r3, r3, r2
 80084cc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80084ce:	9b08      	ldr	r3, [sp, #32]
 80084d0:	bfb8      	it	lt
 80084d2:	2400      	movlt	r4, #0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	bfbb      	ittet	lt
 80084d8:	9b06      	ldrlt	r3, [sp, #24]
 80084da:	9a08      	ldrlt	r2, [sp, #32]
 80084dc:	9f06      	ldrge	r7, [sp, #24]
 80084de:	1a9f      	sublt	r7, r3, r2
 80084e0:	bfac      	ite	ge
 80084e2:	9b08      	ldrge	r3, [sp, #32]
 80084e4:	2300      	movlt	r3, #0
 80084e6:	e73f      	b.n	8008368 <_dtoa_r+0x748>
 80084e8:	3fe00000 	.word	0x3fe00000
 80084ec:	40240000 	.word	0x40240000
 80084f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80084f2:	9f06      	ldr	r7, [sp, #24]
 80084f4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80084f6:	e742      	b.n	800837e <_dtoa_r+0x75e>
 80084f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084fa:	e76b      	b.n	80083d4 <_dtoa_r+0x7b4>
 80084fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084fe:	2b01      	cmp	r3, #1
 8008500:	dc19      	bgt.n	8008536 <_dtoa_r+0x916>
 8008502:	9b04      	ldr	r3, [sp, #16]
 8008504:	b9bb      	cbnz	r3, 8008536 <_dtoa_r+0x916>
 8008506:	9b05      	ldr	r3, [sp, #20]
 8008508:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800850c:	b99b      	cbnz	r3, 8008536 <_dtoa_r+0x916>
 800850e:	9b05      	ldr	r3, [sp, #20]
 8008510:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008514:	0d1b      	lsrs	r3, r3, #20
 8008516:	051b      	lsls	r3, r3, #20
 8008518:	b183      	cbz	r3, 800853c <_dtoa_r+0x91c>
 800851a:	f04f 0801 	mov.w	r8, #1
 800851e:	9b06      	ldr	r3, [sp, #24]
 8008520:	3301      	adds	r3, #1
 8008522:	9306      	str	r3, [sp, #24]
 8008524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008526:	3301      	adds	r3, #1
 8008528:	9309      	str	r3, [sp, #36]	; 0x24
 800852a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800852c:	2b00      	cmp	r3, #0
 800852e:	f47f af6a 	bne.w	8008406 <_dtoa_r+0x7e6>
 8008532:	2001      	movs	r0, #1
 8008534:	e76f      	b.n	8008416 <_dtoa_r+0x7f6>
 8008536:	f04f 0800 	mov.w	r8, #0
 800853a:	e7f6      	b.n	800852a <_dtoa_r+0x90a>
 800853c:	4698      	mov	r8, r3
 800853e:	e7f4      	b.n	800852a <_dtoa_r+0x90a>
 8008540:	f43f af7d 	beq.w	800843e <_dtoa_r+0x81e>
 8008544:	4618      	mov	r0, r3
 8008546:	301c      	adds	r0, #28
 8008548:	e772      	b.n	8008430 <_dtoa_r+0x810>
 800854a:	9b08      	ldr	r3, [sp, #32]
 800854c:	2b00      	cmp	r3, #0
 800854e:	dc36      	bgt.n	80085be <_dtoa_r+0x99e>
 8008550:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008552:	2b02      	cmp	r3, #2
 8008554:	dd33      	ble.n	80085be <_dtoa_r+0x99e>
 8008556:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800855a:	f1b9 0f00 	cmp.w	r9, #0
 800855e:	d10d      	bne.n	800857c <_dtoa_r+0x95c>
 8008560:	4621      	mov	r1, r4
 8008562:	464b      	mov	r3, r9
 8008564:	2205      	movs	r2, #5
 8008566:	4628      	mov	r0, r5
 8008568:	f000 fd4a 	bl	8009000 <__multadd>
 800856c:	4601      	mov	r1, r0
 800856e:	4604      	mov	r4, r0
 8008570:	4658      	mov	r0, fp
 8008572:	f000 ffab 	bl	80094cc <__mcmp>
 8008576:	2800      	cmp	r0, #0
 8008578:	f73f adb8 	bgt.w	80080ec <_dtoa_r+0x4cc>
 800857c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800857e:	9f03      	ldr	r7, [sp, #12]
 8008580:	ea6f 0a03 	mvn.w	sl, r3
 8008584:	f04f 0800 	mov.w	r8, #0
 8008588:	4621      	mov	r1, r4
 800858a:	4628      	mov	r0, r5
 800858c:	f000 fd16 	bl	8008fbc <_Bfree>
 8008590:	2e00      	cmp	r6, #0
 8008592:	f43f aea7 	beq.w	80082e4 <_dtoa_r+0x6c4>
 8008596:	f1b8 0f00 	cmp.w	r8, #0
 800859a:	d005      	beq.n	80085a8 <_dtoa_r+0x988>
 800859c:	45b0      	cmp	r8, r6
 800859e:	d003      	beq.n	80085a8 <_dtoa_r+0x988>
 80085a0:	4641      	mov	r1, r8
 80085a2:	4628      	mov	r0, r5
 80085a4:	f000 fd0a 	bl	8008fbc <_Bfree>
 80085a8:	4631      	mov	r1, r6
 80085aa:	4628      	mov	r0, r5
 80085ac:	f000 fd06 	bl	8008fbc <_Bfree>
 80085b0:	e698      	b.n	80082e4 <_dtoa_r+0x6c4>
 80085b2:	2400      	movs	r4, #0
 80085b4:	4626      	mov	r6, r4
 80085b6:	e7e1      	b.n	800857c <_dtoa_r+0x95c>
 80085b8:	46c2      	mov	sl, r8
 80085ba:	4626      	mov	r6, r4
 80085bc:	e596      	b.n	80080ec <_dtoa_r+0x4cc>
 80085be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	f000 80fd 	beq.w	80087c4 <_dtoa_r+0xba4>
 80085ca:	2f00      	cmp	r7, #0
 80085cc:	dd05      	ble.n	80085da <_dtoa_r+0x9ba>
 80085ce:	4631      	mov	r1, r6
 80085d0:	463a      	mov	r2, r7
 80085d2:	4628      	mov	r0, r5
 80085d4:	f000 ff0a 	bl	80093ec <__lshift>
 80085d8:	4606      	mov	r6, r0
 80085da:	f1b8 0f00 	cmp.w	r8, #0
 80085de:	d05c      	beq.n	800869a <_dtoa_r+0xa7a>
 80085e0:	4628      	mov	r0, r5
 80085e2:	6871      	ldr	r1, [r6, #4]
 80085e4:	f000 fcaa 	bl	8008f3c <_Balloc>
 80085e8:	4607      	mov	r7, r0
 80085ea:	b928      	cbnz	r0, 80085f8 <_dtoa_r+0x9d8>
 80085ec:	4602      	mov	r2, r0
 80085ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80085f2:	4b7f      	ldr	r3, [pc, #508]	; (80087f0 <_dtoa_r+0xbd0>)
 80085f4:	f7ff bb28 	b.w	8007c48 <_dtoa_r+0x28>
 80085f8:	6932      	ldr	r2, [r6, #16]
 80085fa:	f106 010c 	add.w	r1, r6, #12
 80085fe:	3202      	adds	r2, #2
 8008600:	0092      	lsls	r2, r2, #2
 8008602:	300c      	adds	r0, #12
 8008604:	f000 fc8c 	bl	8008f20 <memcpy>
 8008608:	2201      	movs	r2, #1
 800860a:	4639      	mov	r1, r7
 800860c:	4628      	mov	r0, r5
 800860e:	f000 feed 	bl	80093ec <__lshift>
 8008612:	46b0      	mov	r8, r6
 8008614:	4606      	mov	r6, r0
 8008616:	9b03      	ldr	r3, [sp, #12]
 8008618:	3301      	adds	r3, #1
 800861a:	9308      	str	r3, [sp, #32]
 800861c:	9b03      	ldr	r3, [sp, #12]
 800861e:	444b      	add	r3, r9
 8008620:	930a      	str	r3, [sp, #40]	; 0x28
 8008622:	9b04      	ldr	r3, [sp, #16]
 8008624:	f003 0301 	and.w	r3, r3, #1
 8008628:	9309      	str	r3, [sp, #36]	; 0x24
 800862a:	9b08      	ldr	r3, [sp, #32]
 800862c:	4621      	mov	r1, r4
 800862e:	3b01      	subs	r3, #1
 8008630:	4658      	mov	r0, fp
 8008632:	9304      	str	r3, [sp, #16]
 8008634:	f7ff fa68 	bl	8007b08 <quorem>
 8008638:	4603      	mov	r3, r0
 800863a:	4641      	mov	r1, r8
 800863c:	3330      	adds	r3, #48	; 0x30
 800863e:	9006      	str	r0, [sp, #24]
 8008640:	4658      	mov	r0, fp
 8008642:	930b      	str	r3, [sp, #44]	; 0x2c
 8008644:	f000 ff42 	bl	80094cc <__mcmp>
 8008648:	4632      	mov	r2, r6
 800864a:	4681      	mov	r9, r0
 800864c:	4621      	mov	r1, r4
 800864e:	4628      	mov	r0, r5
 8008650:	f000 ff58 	bl	8009504 <__mdiff>
 8008654:	68c2      	ldr	r2, [r0, #12]
 8008656:	4607      	mov	r7, r0
 8008658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800865a:	bb02      	cbnz	r2, 800869e <_dtoa_r+0xa7e>
 800865c:	4601      	mov	r1, r0
 800865e:	4658      	mov	r0, fp
 8008660:	f000 ff34 	bl	80094cc <__mcmp>
 8008664:	4602      	mov	r2, r0
 8008666:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008668:	4639      	mov	r1, r7
 800866a:	4628      	mov	r0, r5
 800866c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008670:	f000 fca4 	bl	8008fbc <_Bfree>
 8008674:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008676:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008678:	9f08      	ldr	r7, [sp, #32]
 800867a:	ea43 0102 	orr.w	r1, r3, r2
 800867e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008680:	430b      	orrs	r3, r1
 8008682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008684:	d10d      	bne.n	80086a2 <_dtoa_r+0xa82>
 8008686:	2b39      	cmp	r3, #57	; 0x39
 8008688:	d029      	beq.n	80086de <_dtoa_r+0xabe>
 800868a:	f1b9 0f00 	cmp.w	r9, #0
 800868e:	dd01      	ble.n	8008694 <_dtoa_r+0xa74>
 8008690:	9b06      	ldr	r3, [sp, #24]
 8008692:	3331      	adds	r3, #49	; 0x31
 8008694:	9a04      	ldr	r2, [sp, #16]
 8008696:	7013      	strb	r3, [r2, #0]
 8008698:	e776      	b.n	8008588 <_dtoa_r+0x968>
 800869a:	4630      	mov	r0, r6
 800869c:	e7b9      	b.n	8008612 <_dtoa_r+0x9f2>
 800869e:	2201      	movs	r2, #1
 80086a0:	e7e2      	b.n	8008668 <_dtoa_r+0xa48>
 80086a2:	f1b9 0f00 	cmp.w	r9, #0
 80086a6:	db06      	blt.n	80086b6 <_dtoa_r+0xa96>
 80086a8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80086aa:	ea41 0909 	orr.w	r9, r1, r9
 80086ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086b0:	ea59 0101 	orrs.w	r1, r9, r1
 80086b4:	d120      	bne.n	80086f8 <_dtoa_r+0xad8>
 80086b6:	2a00      	cmp	r2, #0
 80086b8:	ddec      	ble.n	8008694 <_dtoa_r+0xa74>
 80086ba:	4659      	mov	r1, fp
 80086bc:	2201      	movs	r2, #1
 80086be:	4628      	mov	r0, r5
 80086c0:	9308      	str	r3, [sp, #32]
 80086c2:	f000 fe93 	bl	80093ec <__lshift>
 80086c6:	4621      	mov	r1, r4
 80086c8:	4683      	mov	fp, r0
 80086ca:	f000 feff 	bl	80094cc <__mcmp>
 80086ce:	2800      	cmp	r0, #0
 80086d0:	9b08      	ldr	r3, [sp, #32]
 80086d2:	dc02      	bgt.n	80086da <_dtoa_r+0xaba>
 80086d4:	d1de      	bne.n	8008694 <_dtoa_r+0xa74>
 80086d6:	07da      	lsls	r2, r3, #31
 80086d8:	d5dc      	bpl.n	8008694 <_dtoa_r+0xa74>
 80086da:	2b39      	cmp	r3, #57	; 0x39
 80086dc:	d1d8      	bne.n	8008690 <_dtoa_r+0xa70>
 80086de:	2339      	movs	r3, #57	; 0x39
 80086e0:	9a04      	ldr	r2, [sp, #16]
 80086e2:	7013      	strb	r3, [r2, #0]
 80086e4:	463b      	mov	r3, r7
 80086e6:	461f      	mov	r7, r3
 80086e8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80086ec:	3b01      	subs	r3, #1
 80086ee:	2a39      	cmp	r2, #57	; 0x39
 80086f0:	d050      	beq.n	8008794 <_dtoa_r+0xb74>
 80086f2:	3201      	adds	r2, #1
 80086f4:	701a      	strb	r2, [r3, #0]
 80086f6:	e747      	b.n	8008588 <_dtoa_r+0x968>
 80086f8:	2a00      	cmp	r2, #0
 80086fa:	dd03      	ble.n	8008704 <_dtoa_r+0xae4>
 80086fc:	2b39      	cmp	r3, #57	; 0x39
 80086fe:	d0ee      	beq.n	80086de <_dtoa_r+0xabe>
 8008700:	3301      	adds	r3, #1
 8008702:	e7c7      	b.n	8008694 <_dtoa_r+0xa74>
 8008704:	9a08      	ldr	r2, [sp, #32]
 8008706:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008708:	f802 3c01 	strb.w	r3, [r2, #-1]
 800870c:	428a      	cmp	r2, r1
 800870e:	d02a      	beq.n	8008766 <_dtoa_r+0xb46>
 8008710:	4659      	mov	r1, fp
 8008712:	2300      	movs	r3, #0
 8008714:	220a      	movs	r2, #10
 8008716:	4628      	mov	r0, r5
 8008718:	f000 fc72 	bl	8009000 <__multadd>
 800871c:	45b0      	cmp	r8, r6
 800871e:	4683      	mov	fp, r0
 8008720:	f04f 0300 	mov.w	r3, #0
 8008724:	f04f 020a 	mov.w	r2, #10
 8008728:	4641      	mov	r1, r8
 800872a:	4628      	mov	r0, r5
 800872c:	d107      	bne.n	800873e <_dtoa_r+0xb1e>
 800872e:	f000 fc67 	bl	8009000 <__multadd>
 8008732:	4680      	mov	r8, r0
 8008734:	4606      	mov	r6, r0
 8008736:	9b08      	ldr	r3, [sp, #32]
 8008738:	3301      	adds	r3, #1
 800873a:	9308      	str	r3, [sp, #32]
 800873c:	e775      	b.n	800862a <_dtoa_r+0xa0a>
 800873e:	f000 fc5f 	bl	8009000 <__multadd>
 8008742:	4631      	mov	r1, r6
 8008744:	4680      	mov	r8, r0
 8008746:	2300      	movs	r3, #0
 8008748:	220a      	movs	r2, #10
 800874a:	4628      	mov	r0, r5
 800874c:	f000 fc58 	bl	8009000 <__multadd>
 8008750:	4606      	mov	r6, r0
 8008752:	e7f0      	b.n	8008736 <_dtoa_r+0xb16>
 8008754:	f1b9 0f00 	cmp.w	r9, #0
 8008758:	bfcc      	ite	gt
 800875a:	464f      	movgt	r7, r9
 800875c:	2701      	movle	r7, #1
 800875e:	f04f 0800 	mov.w	r8, #0
 8008762:	9a03      	ldr	r2, [sp, #12]
 8008764:	4417      	add	r7, r2
 8008766:	4659      	mov	r1, fp
 8008768:	2201      	movs	r2, #1
 800876a:	4628      	mov	r0, r5
 800876c:	9308      	str	r3, [sp, #32]
 800876e:	f000 fe3d 	bl	80093ec <__lshift>
 8008772:	4621      	mov	r1, r4
 8008774:	4683      	mov	fp, r0
 8008776:	f000 fea9 	bl	80094cc <__mcmp>
 800877a:	2800      	cmp	r0, #0
 800877c:	dcb2      	bgt.n	80086e4 <_dtoa_r+0xac4>
 800877e:	d102      	bne.n	8008786 <_dtoa_r+0xb66>
 8008780:	9b08      	ldr	r3, [sp, #32]
 8008782:	07db      	lsls	r3, r3, #31
 8008784:	d4ae      	bmi.n	80086e4 <_dtoa_r+0xac4>
 8008786:	463b      	mov	r3, r7
 8008788:	461f      	mov	r7, r3
 800878a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800878e:	2a30      	cmp	r2, #48	; 0x30
 8008790:	d0fa      	beq.n	8008788 <_dtoa_r+0xb68>
 8008792:	e6f9      	b.n	8008588 <_dtoa_r+0x968>
 8008794:	9a03      	ldr	r2, [sp, #12]
 8008796:	429a      	cmp	r2, r3
 8008798:	d1a5      	bne.n	80086e6 <_dtoa_r+0xac6>
 800879a:	2331      	movs	r3, #49	; 0x31
 800879c:	f10a 0a01 	add.w	sl, sl, #1
 80087a0:	e779      	b.n	8008696 <_dtoa_r+0xa76>
 80087a2:	4b14      	ldr	r3, [pc, #80]	; (80087f4 <_dtoa_r+0xbd4>)
 80087a4:	f7ff baa8 	b.w	8007cf8 <_dtoa_r+0xd8>
 80087a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	f47f aa81 	bne.w	8007cb2 <_dtoa_r+0x92>
 80087b0:	4b11      	ldr	r3, [pc, #68]	; (80087f8 <_dtoa_r+0xbd8>)
 80087b2:	f7ff baa1 	b.w	8007cf8 <_dtoa_r+0xd8>
 80087b6:	f1b9 0f00 	cmp.w	r9, #0
 80087ba:	dc03      	bgt.n	80087c4 <_dtoa_r+0xba4>
 80087bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80087be:	2b02      	cmp	r3, #2
 80087c0:	f73f aecb 	bgt.w	800855a <_dtoa_r+0x93a>
 80087c4:	9f03      	ldr	r7, [sp, #12]
 80087c6:	4621      	mov	r1, r4
 80087c8:	4658      	mov	r0, fp
 80087ca:	f7ff f99d 	bl	8007b08 <quorem>
 80087ce:	9a03      	ldr	r2, [sp, #12]
 80087d0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80087d4:	f807 3b01 	strb.w	r3, [r7], #1
 80087d8:	1aba      	subs	r2, r7, r2
 80087da:	4591      	cmp	r9, r2
 80087dc:	ddba      	ble.n	8008754 <_dtoa_r+0xb34>
 80087de:	4659      	mov	r1, fp
 80087e0:	2300      	movs	r3, #0
 80087e2:	220a      	movs	r2, #10
 80087e4:	4628      	mov	r0, r5
 80087e6:	f000 fc0b 	bl	8009000 <__multadd>
 80087ea:	4683      	mov	fp, r0
 80087ec:	e7eb      	b.n	80087c6 <_dtoa_r+0xba6>
 80087ee:	bf00      	nop
 80087f0:	0800abf8 	.word	0x0800abf8
 80087f4:	0800aa00 	.word	0x0800aa00
 80087f8:	0800ab79 	.word	0x0800ab79

080087fc <rshift>:
 80087fc:	6903      	ldr	r3, [r0, #16]
 80087fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008802:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008806:	f100 0414 	add.w	r4, r0, #20
 800880a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800880e:	dd46      	ble.n	800889e <rshift+0xa2>
 8008810:	f011 011f 	ands.w	r1, r1, #31
 8008814:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008818:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800881c:	d10c      	bne.n	8008838 <rshift+0x3c>
 800881e:	4629      	mov	r1, r5
 8008820:	f100 0710 	add.w	r7, r0, #16
 8008824:	42b1      	cmp	r1, r6
 8008826:	d335      	bcc.n	8008894 <rshift+0x98>
 8008828:	1a9b      	subs	r3, r3, r2
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	1eea      	subs	r2, r5, #3
 800882e:	4296      	cmp	r6, r2
 8008830:	bf38      	it	cc
 8008832:	2300      	movcc	r3, #0
 8008834:	4423      	add	r3, r4
 8008836:	e015      	b.n	8008864 <rshift+0x68>
 8008838:	46a1      	mov	r9, r4
 800883a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800883e:	f1c1 0820 	rsb	r8, r1, #32
 8008842:	40cf      	lsrs	r7, r1
 8008844:	f105 0e04 	add.w	lr, r5, #4
 8008848:	4576      	cmp	r6, lr
 800884a:	46f4      	mov	ip, lr
 800884c:	d816      	bhi.n	800887c <rshift+0x80>
 800884e:	1a9a      	subs	r2, r3, r2
 8008850:	0092      	lsls	r2, r2, #2
 8008852:	3a04      	subs	r2, #4
 8008854:	3501      	adds	r5, #1
 8008856:	42ae      	cmp	r6, r5
 8008858:	bf38      	it	cc
 800885a:	2200      	movcc	r2, #0
 800885c:	18a3      	adds	r3, r4, r2
 800885e:	50a7      	str	r7, [r4, r2]
 8008860:	b107      	cbz	r7, 8008864 <rshift+0x68>
 8008862:	3304      	adds	r3, #4
 8008864:	42a3      	cmp	r3, r4
 8008866:	eba3 0204 	sub.w	r2, r3, r4
 800886a:	bf08      	it	eq
 800886c:	2300      	moveq	r3, #0
 800886e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008872:	6102      	str	r2, [r0, #16]
 8008874:	bf08      	it	eq
 8008876:	6143      	streq	r3, [r0, #20]
 8008878:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800887c:	f8dc c000 	ldr.w	ip, [ip]
 8008880:	fa0c fc08 	lsl.w	ip, ip, r8
 8008884:	ea4c 0707 	orr.w	r7, ip, r7
 8008888:	f849 7b04 	str.w	r7, [r9], #4
 800888c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008890:	40cf      	lsrs	r7, r1
 8008892:	e7d9      	b.n	8008848 <rshift+0x4c>
 8008894:	f851 cb04 	ldr.w	ip, [r1], #4
 8008898:	f847 cf04 	str.w	ip, [r7, #4]!
 800889c:	e7c2      	b.n	8008824 <rshift+0x28>
 800889e:	4623      	mov	r3, r4
 80088a0:	e7e0      	b.n	8008864 <rshift+0x68>

080088a2 <__hexdig_fun>:
 80088a2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80088a6:	2b09      	cmp	r3, #9
 80088a8:	d802      	bhi.n	80088b0 <__hexdig_fun+0xe>
 80088aa:	3820      	subs	r0, #32
 80088ac:	b2c0      	uxtb	r0, r0
 80088ae:	4770      	bx	lr
 80088b0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80088b4:	2b05      	cmp	r3, #5
 80088b6:	d801      	bhi.n	80088bc <__hexdig_fun+0x1a>
 80088b8:	3847      	subs	r0, #71	; 0x47
 80088ba:	e7f7      	b.n	80088ac <__hexdig_fun+0xa>
 80088bc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80088c0:	2b05      	cmp	r3, #5
 80088c2:	d801      	bhi.n	80088c8 <__hexdig_fun+0x26>
 80088c4:	3827      	subs	r0, #39	; 0x27
 80088c6:	e7f1      	b.n	80088ac <__hexdig_fun+0xa>
 80088c8:	2000      	movs	r0, #0
 80088ca:	4770      	bx	lr

080088cc <__gethex>:
 80088cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d0:	b08b      	sub	sp, #44	; 0x2c
 80088d2:	9305      	str	r3, [sp, #20]
 80088d4:	4bb2      	ldr	r3, [pc, #712]	; (8008ba0 <__gethex+0x2d4>)
 80088d6:	9002      	str	r0, [sp, #8]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	468b      	mov	fp, r1
 80088dc:	4618      	mov	r0, r3
 80088de:	4690      	mov	r8, r2
 80088e0:	9303      	str	r3, [sp, #12]
 80088e2:	f7f7 fc35 	bl	8000150 <strlen>
 80088e6:	4682      	mov	sl, r0
 80088e8:	9b03      	ldr	r3, [sp, #12]
 80088ea:	f8db 2000 	ldr.w	r2, [fp]
 80088ee:	4403      	add	r3, r0
 80088f0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80088f4:	9306      	str	r3, [sp, #24]
 80088f6:	1c93      	adds	r3, r2, #2
 80088f8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80088fc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008900:	32fe      	adds	r2, #254	; 0xfe
 8008902:	18d1      	adds	r1, r2, r3
 8008904:	461f      	mov	r7, r3
 8008906:	f813 0b01 	ldrb.w	r0, [r3], #1
 800890a:	9101      	str	r1, [sp, #4]
 800890c:	2830      	cmp	r0, #48	; 0x30
 800890e:	d0f8      	beq.n	8008902 <__gethex+0x36>
 8008910:	f7ff ffc7 	bl	80088a2 <__hexdig_fun>
 8008914:	4604      	mov	r4, r0
 8008916:	2800      	cmp	r0, #0
 8008918:	d13a      	bne.n	8008990 <__gethex+0xc4>
 800891a:	4652      	mov	r2, sl
 800891c:	4638      	mov	r0, r7
 800891e:	9903      	ldr	r1, [sp, #12]
 8008920:	f001 fa26 	bl	8009d70 <strncmp>
 8008924:	4605      	mov	r5, r0
 8008926:	2800      	cmp	r0, #0
 8008928:	d166      	bne.n	80089f8 <__gethex+0x12c>
 800892a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800892e:	eb07 060a 	add.w	r6, r7, sl
 8008932:	f7ff ffb6 	bl	80088a2 <__hexdig_fun>
 8008936:	2800      	cmp	r0, #0
 8008938:	d060      	beq.n	80089fc <__gethex+0x130>
 800893a:	4633      	mov	r3, r6
 800893c:	7818      	ldrb	r0, [r3, #0]
 800893e:	461f      	mov	r7, r3
 8008940:	2830      	cmp	r0, #48	; 0x30
 8008942:	f103 0301 	add.w	r3, r3, #1
 8008946:	d0f9      	beq.n	800893c <__gethex+0x70>
 8008948:	f7ff ffab 	bl	80088a2 <__hexdig_fun>
 800894c:	2301      	movs	r3, #1
 800894e:	fab0 f480 	clz	r4, r0
 8008952:	4635      	mov	r5, r6
 8008954:	0964      	lsrs	r4, r4, #5
 8008956:	9301      	str	r3, [sp, #4]
 8008958:	463a      	mov	r2, r7
 800895a:	4616      	mov	r6, r2
 800895c:	7830      	ldrb	r0, [r6, #0]
 800895e:	3201      	adds	r2, #1
 8008960:	f7ff ff9f 	bl	80088a2 <__hexdig_fun>
 8008964:	2800      	cmp	r0, #0
 8008966:	d1f8      	bne.n	800895a <__gethex+0x8e>
 8008968:	4652      	mov	r2, sl
 800896a:	4630      	mov	r0, r6
 800896c:	9903      	ldr	r1, [sp, #12]
 800896e:	f001 f9ff 	bl	8009d70 <strncmp>
 8008972:	b980      	cbnz	r0, 8008996 <__gethex+0xca>
 8008974:	b94d      	cbnz	r5, 800898a <__gethex+0xbe>
 8008976:	eb06 050a 	add.w	r5, r6, sl
 800897a:	462a      	mov	r2, r5
 800897c:	4616      	mov	r6, r2
 800897e:	7830      	ldrb	r0, [r6, #0]
 8008980:	3201      	adds	r2, #1
 8008982:	f7ff ff8e 	bl	80088a2 <__hexdig_fun>
 8008986:	2800      	cmp	r0, #0
 8008988:	d1f8      	bne.n	800897c <__gethex+0xb0>
 800898a:	1bad      	subs	r5, r5, r6
 800898c:	00ad      	lsls	r5, r5, #2
 800898e:	e004      	b.n	800899a <__gethex+0xce>
 8008990:	2400      	movs	r4, #0
 8008992:	4625      	mov	r5, r4
 8008994:	e7e0      	b.n	8008958 <__gethex+0x8c>
 8008996:	2d00      	cmp	r5, #0
 8008998:	d1f7      	bne.n	800898a <__gethex+0xbe>
 800899a:	7833      	ldrb	r3, [r6, #0]
 800899c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80089a0:	2b50      	cmp	r3, #80	; 0x50
 80089a2:	d139      	bne.n	8008a18 <__gethex+0x14c>
 80089a4:	7873      	ldrb	r3, [r6, #1]
 80089a6:	2b2b      	cmp	r3, #43	; 0x2b
 80089a8:	d02a      	beq.n	8008a00 <__gethex+0x134>
 80089aa:	2b2d      	cmp	r3, #45	; 0x2d
 80089ac:	d02c      	beq.n	8008a08 <__gethex+0x13c>
 80089ae:	f04f 0900 	mov.w	r9, #0
 80089b2:	1c71      	adds	r1, r6, #1
 80089b4:	7808      	ldrb	r0, [r1, #0]
 80089b6:	f7ff ff74 	bl	80088a2 <__hexdig_fun>
 80089ba:	1e43      	subs	r3, r0, #1
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	2b18      	cmp	r3, #24
 80089c0:	d82a      	bhi.n	8008a18 <__gethex+0x14c>
 80089c2:	f1a0 0210 	sub.w	r2, r0, #16
 80089c6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80089ca:	f7ff ff6a 	bl	80088a2 <__hexdig_fun>
 80089ce:	1e43      	subs	r3, r0, #1
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	2b18      	cmp	r3, #24
 80089d4:	d91b      	bls.n	8008a0e <__gethex+0x142>
 80089d6:	f1b9 0f00 	cmp.w	r9, #0
 80089da:	d000      	beq.n	80089de <__gethex+0x112>
 80089dc:	4252      	negs	r2, r2
 80089de:	4415      	add	r5, r2
 80089e0:	f8cb 1000 	str.w	r1, [fp]
 80089e4:	b1d4      	cbz	r4, 8008a1c <__gethex+0x150>
 80089e6:	9b01      	ldr	r3, [sp, #4]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	bf14      	ite	ne
 80089ec:	2700      	movne	r7, #0
 80089ee:	2706      	moveq	r7, #6
 80089f0:	4638      	mov	r0, r7
 80089f2:	b00b      	add	sp, #44	; 0x2c
 80089f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f8:	463e      	mov	r6, r7
 80089fa:	4625      	mov	r5, r4
 80089fc:	2401      	movs	r4, #1
 80089fe:	e7cc      	b.n	800899a <__gethex+0xce>
 8008a00:	f04f 0900 	mov.w	r9, #0
 8008a04:	1cb1      	adds	r1, r6, #2
 8008a06:	e7d5      	b.n	80089b4 <__gethex+0xe8>
 8008a08:	f04f 0901 	mov.w	r9, #1
 8008a0c:	e7fa      	b.n	8008a04 <__gethex+0x138>
 8008a0e:	230a      	movs	r3, #10
 8008a10:	fb03 0202 	mla	r2, r3, r2, r0
 8008a14:	3a10      	subs	r2, #16
 8008a16:	e7d6      	b.n	80089c6 <__gethex+0xfa>
 8008a18:	4631      	mov	r1, r6
 8008a1a:	e7e1      	b.n	80089e0 <__gethex+0x114>
 8008a1c:	4621      	mov	r1, r4
 8008a1e:	1bf3      	subs	r3, r6, r7
 8008a20:	3b01      	subs	r3, #1
 8008a22:	2b07      	cmp	r3, #7
 8008a24:	dc0a      	bgt.n	8008a3c <__gethex+0x170>
 8008a26:	9802      	ldr	r0, [sp, #8]
 8008a28:	f000 fa88 	bl	8008f3c <_Balloc>
 8008a2c:	4604      	mov	r4, r0
 8008a2e:	b940      	cbnz	r0, 8008a42 <__gethex+0x176>
 8008a30:	4602      	mov	r2, r0
 8008a32:	21de      	movs	r1, #222	; 0xde
 8008a34:	4b5b      	ldr	r3, [pc, #364]	; (8008ba4 <__gethex+0x2d8>)
 8008a36:	485c      	ldr	r0, [pc, #368]	; (8008ba8 <__gethex+0x2dc>)
 8008a38:	f001 f9bc 	bl	8009db4 <__assert_func>
 8008a3c:	3101      	adds	r1, #1
 8008a3e:	105b      	asrs	r3, r3, #1
 8008a40:	e7ef      	b.n	8008a22 <__gethex+0x156>
 8008a42:	f04f 0b00 	mov.w	fp, #0
 8008a46:	f100 0914 	add.w	r9, r0, #20
 8008a4a:	f1ca 0301 	rsb	r3, sl, #1
 8008a4e:	f8cd 9010 	str.w	r9, [sp, #16]
 8008a52:	f8cd b004 	str.w	fp, [sp, #4]
 8008a56:	9308      	str	r3, [sp, #32]
 8008a58:	42b7      	cmp	r7, r6
 8008a5a:	d33f      	bcc.n	8008adc <__gethex+0x210>
 8008a5c:	9f04      	ldr	r7, [sp, #16]
 8008a5e:	9b01      	ldr	r3, [sp, #4]
 8008a60:	f847 3b04 	str.w	r3, [r7], #4
 8008a64:	eba7 0709 	sub.w	r7, r7, r9
 8008a68:	10bf      	asrs	r7, r7, #2
 8008a6a:	6127      	str	r7, [r4, #16]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f000 fb57 	bl	8009120 <__hi0bits>
 8008a72:	017f      	lsls	r7, r7, #5
 8008a74:	f8d8 6000 	ldr.w	r6, [r8]
 8008a78:	1a3f      	subs	r7, r7, r0
 8008a7a:	42b7      	cmp	r7, r6
 8008a7c:	dd62      	ble.n	8008b44 <__gethex+0x278>
 8008a7e:	1bbf      	subs	r7, r7, r6
 8008a80:	4639      	mov	r1, r7
 8008a82:	4620      	mov	r0, r4
 8008a84:	f000 fef1 	bl	800986a <__any_on>
 8008a88:	4682      	mov	sl, r0
 8008a8a:	b1a8      	cbz	r0, 8008ab8 <__gethex+0x1ec>
 8008a8c:	f04f 0a01 	mov.w	sl, #1
 8008a90:	1e7b      	subs	r3, r7, #1
 8008a92:	1159      	asrs	r1, r3, #5
 8008a94:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008a98:	f003 021f 	and.w	r2, r3, #31
 8008a9c:	fa0a f202 	lsl.w	r2, sl, r2
 8008aa0:	420a      	tst	r2, r1
 8008aa2:	d009      	beq.n	8008ab8 <__gethex+0x1ec>
 8008aa4:	4553      	cmp	r3, sl
 8008aa6:	dd05      	ble.n	8008ab4 <__gethex+0x1e8>
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	1eb9      	subs	r1, r7, #2
 8008aac:	f000 fedd 	bl	800986a <__any_on>
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	d144      	bne.n	8008b3e <__gethex+0x272>
 8008ab4:	f04f 0a02 	mov.w	sl, #2
 8008ab8:	4639      	mov	r1, r7
 8008aba:	4620      	mov	r0, r4
 8008abc:	f7ff fe9e 	bl	80087fc <rshift>
 8008ac0:	443d      	add	r5, r7
 8008ac2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ac6:	42ab      	cmp	r3, r5
 8008ac8:	da4a      	bge.n	8008b60 <__gethex+0x294>
 8008aca:	4621      	mov	r1, r4
 8008acc:	9802      	ldr	r0, [sp, #8]
 8008ace:	f000 fa75 	bl	8008fbc <_Bfree>
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ad6:	27a3      	movs	r7, #163	; 0xa3
 8008ad8:	6013      	str	r3, [r2, #0]
 8008ada:	e789      	b.n	80089f0 <__gethex+0x124>
 8008adc:	1e73      	subs	r3, r6, #1
 8008ade:	9a06      	ldr	r2, [sp, #24]
 8008ae0:	9307      	str	r3, [sp, #28]
 8008ae2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d019      	beq.n	8008b1e <__gethex+0x252>
 8008aea:	f1bb 0f20 	cmp.w	fp, #32
 8008aee:	d107      	bne.n	8008b00 <__gethex+0x234>
 8008af0:	9b04      	ldr	r3, [sp, #16]
 8008af2:	9a01      	ldr	r2, [sp, #4]
 8008af4:	f843 2b04 	str.w	r2, [r3], #4
 8008af8:	9304      	str	r3, [sp, #16]
 8008afa:	2300      	movs	r3, #0
 8008afc:	469b      	mov	fp, r3
 8008afe:	9301      	str	r3, [sp, #4]
 8008b00:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008b04:	f7ff fecd 	bl	80088a2 <__hexdig_fun>
 8008b08:	9b01      	ldr	r3, [sp, #4]
 8008b0a:	f000 000f 	and.w	r0, r0, #15
 8008b0e:	fa00 f00b 	lsl.w	r0, r0, fp
 8008b12:	4303      	orrs	r3, r0
 8008b14:	9301      	str	r3, [sp, #4]
 8008b16:	f10b 0b04 	add.w	fp, fp, #4
 8008b1a:	9b07      	ldr	r3, [sp, #28]
 8008b1c:	e00d      	b.n	8008b3a <__gethex+0x26e>
 8008b1e:	9a08      	ldr	r2, [sp, #32]
 8008b20:	1e73      	subs	r3, r6, #1
 8008b22:	4413      	add	r3, r2
 8008b24:	42bb      	cmp	r3, r7
 8008b26:	d3e0      	bcc.n	8008aea <__gethex+0x21e>
 8008b28:	4618      	mov	r0, r3
 8008b2a:	4652      	mov	r2, sl
 8008b2c:	9903      	ldr	r1, [sp, #12]
 8008b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b30:	f001 f91e 	bl	8009d70 <strncmp>
 8008b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b36:	2800      	cmp	r0, #0
 8008b38:	d1d7      	bne.n	8008aea <__gethex+0x21e>
 8008b3a:	461e      	mov	r6, r3
 8008b3c:	e78c      	b.n	8008a58 <__gethex+0x18c>
 8008b3e:	f04f 0a03 	mov.w	sl, #3
 8008b42:	e7b9      	b.n	8008ab8 <__gethex+0x1ec>
 8008b44:	da09      	bge.n	8008b5a <__gethex+0x28e>
 8008b46:	1bf7      	subs	r7, r6, r7
 8008b48:	4621      	mov	r1, r4
 8008b4a:	463a      	mov	r2, r7
 8008b4c:	9802      	ldr	r0, [sp, #8]
 8008b4e:	f000 fc4d 	bl	80093ec <__lshift>
 8008b52:	4604      	mov	r4, r0
 8008b54:	1bed      	subs	r5, r5, r7
 8008b56:	f100 0914 	add.w	r9, r0, #20
 8008b5a:	f04f 0a00 	mov.w	sl, #0
 8008b5e:	e7b0      	b.n	8008ac2 <__gethex+0x1f6>
 8008b60:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008b64:	42a8      	cmp	r0, r5
 8008b66:	dd72      	ble.n	8008c4e <__gethex+0x382>
 8008b68:	1b45      	subs	r5, r0, r5
 8008b6a:	42ae      	cmp	r6, r5
 8008b6c:	dc35      	bgt.n	8008bda <__gethex+0x30e>
 8008b6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	d029      	beq.n	8008bca <__gethex+0x2fe>
 8008b76:	2b03      	cmp	r3, #3
 8008b78:	d02b      	beq.n	8008bd2 <__gethex+0x306>
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d11c      	bne.n	8008bb8 <__gethex+0x2ec>
 8008b7e:	42ae      	cmp	r6, r5
 8008b80:	d11a      	bne.n	8008bb8 <__gethex+0x2ec>
 8008b82:	2e01      	cmp	r6, #1
 8008b84:	d112      	bne.n	8008bac <__gethex+0x2e0>
 8008b86:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008b8a:	9a05      	ldr	r2, [sp, #20]
 8008b8c:	2762      	movs	r7, #98	; 0x62
 8008b8e:	6013      	str	r3, [r2, #0]
 8008b90:	2301      	movs	r3, #1
 8008b92:	6123      	str	r3, [r4, #16]
 8008b94:	f8c9 3000 	str.w	r3, [r9]
 8008b98:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b9a:	601c      	str	r4, [r3, #0]
 8008b9c:	e728      	b.n	80089f0 <__gethex+0x124>
 8008b9e:	bf00      	nop
 8008ba0:	0800ac70 	.word	0x0800ac70
 8008ba4:	0800abf8 	.word	0x0800abf8
 8008ba8:	0800ac09 	.word	0x0800ac09
 8008bac:	4620      	mov	r0, r4
 8008bae:	1e71      	subs	r1, r6, #1
 8008bb0:	f000 fe5b 	bl	800986a <__any_on>
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	d1e6      	bne.n	8008b86 <__gethex+0x2ba>
 8008bb8:	4621      	mov	r1, r4
 8008bba:	9802      	ldr	r0, [sp, #8]
 8008bbc:	f000 f9fe 	bl	8008fbc <_Bfree>
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008bc4:	2750      	movs	r7, #80	; 0x50
 8008bc6:	6013      	str	r3, [r2, #0]
 8008bc8:	e712      	b.n	80089f0 <__gethex+0x124>
 8008bca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d1f3      	bne.n	8008bb8 <__gethex+0x2ec>
 8008bd0:	e7d9      	b.n	8008b86 <__gethex+0x2ba>
 8008bd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d1d6      	bne.n	8008b86 <__gethex+0x2ba>
 8008bd8:	e7ee      	b.n	8008bb8 <__gethex+0x2ec>
 8008bda:	1e6f      	subs	r7, r5, #1
 8008bdc:	f1ba 0f00 	cmp.w	sl, #0
 8008be0:	d132      	bne.n	8008c48 <__gethex+0x37c>
 8008be2:	b127      	cbz	r7, 8008bee <__gethex+0x322>
 8008be4:	4639      	mov	r1, r7
 8008be6:	4620      	mov	r0, r4
 8008be8:	f000 fe3f 	bl	800986a <__any_on>
 8008bec:	4682      	mov	sl, r0
 8008bee:	2101      	movs	r1, #1
 8008bf0:	117b      	asrs	r3, r7, #5
 8008bf2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008bf6:	f007 071f 	and.w	r7, r7, #31
 8008bfa:	fa01 f707 	lsl.w	r7, r1, r7
 8008bfe:	421f      	tst	r7, r3
 8008c00:	f04f 0702 	mov.w	r7, #2
 8008c04:	4629      	mov	r1, r5
 8008c06:	4620      	mov	r0, r4
 8008c08:	bf18      	it	ne
 8008c0a:	f04a 0a02 	orrne.w	sl, sl, #2
 8008c0e:	1b76      	subs	r6, r6, r5
 8008c10:	f7ff fdf4 	bl	80087fc <rshift>
 8008c14:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008c18:	f1ba 0f00 	cmp.w	sl, #0
 8008c1c:	d048      	beq.n	8008cb0 <__gethex+0x3e4>
 8008c1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c22:	2b02      	cmp	r3, #2
 8008c24:	d015      	beq.n	8008c52 <__gethex+0x386>
 8008c26:	2b03      	cmp	r3, #3
 8008c28:	d017      	beq.n	8008c5a <__gethex+0x38e>
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d109      	bne.n	8008c42 <__gethex+0x376>
 8008c2e:	f01a 0f02 	tst.w	sl, #2
 8008c32:	d006      	beq.n	8008c42 <__gethex+0x376>
 8008c34:	f8d9 0000 	ldr.w	r0, [r9]
 8008c38:	ea4a 0a00 	orr.w	sl, sl, r0
 8008c3c:	f01a 0f01 	tst.w	sl, #1
 8008c40:	d10e      	bne.n	8008c60 <__gethex+0x394>
 8008c42:	f047 0710 	orr.w	r7, r7, #16
 8008c46:	e033      	b.n	8008cb0 <__gethex+0x3e4>
 8008c48:	f04f 0a01 	mov.w	sl, #1
 8008c4c:	e7cf      	b.n	8008bee <__gethex+0x322>
 8008c4e:	2701      	movs	r7, #1
 8008c50:	e7e2      	b.n	8008c18 <__gethex+0x34c>
 8008c52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c54:	f1c3 0301 	rsb	r3, r3, #1
 8008c58:	9315      	str	r3, [sp, #84]	; 0x54
 8008c5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d0f0      	beq.n	8008c42 <__gethex+0x376>
 8008c60:	f04f 0c00 	mov.w	ip, #0
 8008c64:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008c68:	f104 0314 	add.w	r3, r4, #20
 8008c6c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008c70:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008c74:	4618      	mov	r0, r3
 8008c76:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c7a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008c7e:	d01c      	beq.n	8008cba <__gethex+0x3ee>
 8008c80:	3201      	adds	r2, #1
 8008c82:	6002      	str	r2, [r0, #0]
 8008c84:	2f02      	cmp	r7, #2
 8008c86:	f104 0314 	add.w	r3, r4, #20
 8008c8a:	d13d      	bne.n	8008d08 <__gethex+0x43c>
 8008c8c:	f8d8 2000 	ldr.w	r2, [r8]
 8008c90:	3a01      	subs	r2, #1
 8008c92:	42b2      	cmp	r2, r6
 8008c94:	d10a      	bne.n	8008cac <__gethex+0x3e0>
 8008c96:	2201      	movs	r2, #1
 8008c98:	1171      	asrs	r1, r6, #5
 8008c9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008c9e:	f006 061f 	and.w	r6, r6, #31
 8008ca2:	fa02 f606 	lsl.w	r6, r2, r6
 8008ca6:	421e      	tst	r6, r3
 8008ca8:	bf18      	it	ne
 8008caa:	4617      	movne	r7, r2
 8008cac:	f047 0720 	orr.w	r7, r7, #32
 8008cb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008cb2:	601c      	str	r4, [r3, #0]
 8008cb4:	9b05      	ldr	r3, [sp, #20]
 8008cb6:	601d      	str	r5, [r3, #0]
 8008cb8:	e69a      	b.n	80089f0 <__gethex+0x124>
 8008cba:	4299      	cmp	r1, r3
 8008cbc:	f843 cc04 	str.w	ip, [r3, #-4]
 8008cc0:	d8d8      	bhi.n	8008c74 <__gethex+0x3a8>
 8008cc2:	68a3      	ldr	r3, [r4, #8]
 8008cc4:	459b      	cmp	fp, r3
 8008cc6:	db17      	blt.n	8008cf8 <__gethex+0x42c>
 8008cc8:	6861      	ldr	r1, [r4, #4]
 8008cca:	9802      	ldr	r0, [sp, #8]
 8008ccc:	3101      	adds	r1, #1
 8008cce:	f000 f935 	bl	8008f3c <_Balloc>
 8008cd2:	4681      	mov	r9, r0
 8008cd4:	b918      	cbnz	r0, 8008cde <__gethex+0x412>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	2184      	movs	r1, #132	; 0x84
 8008cda:	4b19      	ldr	r3, [pc, #100]	; (8008d40 <__gethex+0x474>)
 8008cdc:	e6ab      	b.n	8008a36 <__gethex+0x16a>
 8008cde:	6922      	ldr	r2, [r4, #16]
 8008ce0:	f104 010c 	add.w	r1, r4, #12
 8008ce4:	3202      	adds	r2, #2
 8008ce6:	0092      	lsls	r2, r2, #2
 8008ce8:	300c      	adds	r0, #12
 8008cea:	f000 f919 	bl	8008f20 <memcpy>
 8008cee:	4621      	mov	r1, r4
 8008cf0:	9802      	ldr	r0, [sp, #8]
 8008cf2:	f000 f963 	bl	8008fbc <_Bfree>
 8008cf6:	464c      	mov	r4, r9
 8008cf8:	6923      	ldr	r3, [r4, #16]
 8008cfa:	1c5a      	adds	r2, r3, #1
 8008cfc:	6122      	str	r2, [r4, #16]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d04:	615a      	str	r2, [r3, #20]
 8008d06:	e7bd      	b.n	8008c84 <__gethex+0x3b8>
 8008d08:	6922      	ldr	r2, [r4, #16]
 8008d0a:	455a      	cmp	r2, fp
 8008d0c:	dd0b      	ble.n	8008d26 <__gethex+0x45a>
 8008d0e:	2101      	movs	r1, #1
 8008d10:	4620      	mov	r0, r4
 8008d12:	f7ff fd73 	bl	80087fc <rshift>
 8008d16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d1a:	3501      	adds	r5, #1
 8008d1c:	42ab      	cmp	r3, r5
 8008d1e:	f6ff aed4 	blt.w	8008aca <__gethex+0x1fe>
 8008d22:	2701      	movs	r7, #1
 8008d24:	e7c2      	b.n	8008cac <__gethex+0x3e0>
 8008d26:	f016 061f 	ands.w	r6, r6, #31
 8008d2a:	d0fa      	beq.n	8008d22 <__gethex+0x456>
 8008d2c:	4453      	add	r3, sl
 8008d2e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008d32:	f000 f9f5 	bl	8009120 <__hi0bits>
 8008d36:	f1c6 0620 	rsb	r6, r6, #32
 8008d3a:	42b0      	cmp	r0, r6
 8008d3c:	dbe7      	blt.n	8008d0e <__gethex+0x442>
 8008d3e:	e7f0      	b.n	8008d22 <__gethex+0x456>
 8008d40:	0800abf8 	.word	0x0800abf8

08008d44 <L_shift>:
 8008d44:	f1c2 0208 	rsb	r2, r2, #8
 8008d48:	0092      	lsls	r2, r2, #2
 8008d4a:	b570      	push	{r4, r5, r6, lr}
 8008d4c:	f1c2 0620 	rsb	r6, r2, #32
 8008d50:	6843      	ldr	r3, [r0, #4]
 8008d52:	6804      	ldr	r4, [r0, #0]
 8008d54:	fa03 f506 	lsl.w	r5, r3, r6
 8008d58:	432c      	orrs	r4, r5
 8008d5a:	40d3      	lsrs	r3, r2
 8008d5c:	6004      	str	r4, [r0, #0]
 8008d5e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008d62:	4288      	cmp	r0, r1
 8008d64:	d3f4      	bcc.n	8008d50 <L_shift+0xc>
 8008d66:	bd70      	pop	{r4, r5, r6, pc}

08008d68 <__match>:
 8008d68:	b530      	push	{r4, r5, lr}
 8008d6a:	6803      	ldr	r3, [r0, #0]
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d72:	b914      	cbnz	r4, 8008d7a <__match+0x12>
 8008d74:	6003      	str	r3, [r0, #0]
 8008d76:	2001      	movs	r0, #1
 8008d78:	bd30      	pop	{r4, r5, pc}
 8008d7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d7e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008d82:	2d19      	cmp	r5, #25
 8008d84:	bf98      	it	ls
 8008d86:	3220      	addls	r2, #32
 8008d88:	42a2      	cmp	r2, r4
 8008d8a:	d0f0      	beq.n	8008d6e <__match+0x6>
 8008d8c:	2000      	movs	r0, #0
 8008d8e:	e7f3      	b.n	8008d78 <__match+0x10>

08008d90 <__hexnan>:
 8008d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d94:	2500      	movs	r5, #0
 8008d96:	680b      	ldr	r3, [r1, #0]
 8008d98:	4682      	mov	sl, r0
 8008d9a:	115e      	asrs	r6, r3, #5
 8008d9c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008da0:	f013 031f 	ands.w	r3, r3, #31
 8008da4:	bf18      	it	ne
 8008da6:	3604      	addne	r6, #4
 8008da8:	1f37      	subs	r7, r6, #4
 8008daa:	46b9      	mov	r9, r7
 8008dac:	463c      	mov	r4, r7
 8008dae:	46ab      	mov	fp, r5
 8008db0:	b087      	sub	sp, #28
 8008db2:	4690      	mov	r8, r2
 8008db4:	6802      	ldr	r2, [r0, #0]
 8008db6:	9301      	str	r3, [sp, #4]
 8008db8:	f846 5c04 	str.w	r5, [r6, #-4]
 8008dbc:	9502      	str	r5, [sp, #8]
 8008dbe:	7851      	ldrb	r1, [r2, #1]
 8008dc0:	1c53      	adds	r3, r2, #1
 8008dc2:	9303      	str	r3, [sp, #12]
 8008dc4:	b341      	cbz	r1, 8008e18 <__hexnan+0x88>
 8008dc6:	4608      	mov	r0, r1
 8008dc8:	9205      	str	r2, [sp, #20]
 8008dca:	9104      	str	r1, [sp, #16]
 8008dcc:	f7ff fd69 	bl	80088a2 <__hexdig_fun>
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	d14f      	bne.n	8008e74 <__hexnan+0xe4>
 8008dd4:	9904      	ldr	r1, [sp, #16]
 8008dd6:	9a05      	ldr	r2, [sp, #20]
 8008dd8:	2920      	cmp	r1, #32
 8008dda:	d818      	bhi.n	8008e0e <__hexnan+0x7e>
 8008ddc:	9b02      	ldr	r3, [sp, #8]
 8008dde:	459b      	cmp	fp, r3
 8008de0:	dd13      	ble.n	8008e0a <__hexnan+0x7a>
 8008de2:	454c      	cmp	r4, r9
 8008de4:	d206      	bcs.n	8008df4 <__hexnan+0x64>
 8008de6:	2d07      	cmp	r5, #7
 8008de8:	dc04      	bgt.n	8008df4 <__hexnan+0x64>
 8008dea:	462a      	mov	r2, r5
 8008dec:	4649      	mov	r1, r9
 8008dee:	4620      	mov	r0, r4
 8008df0:	f7ff ffa8 	bl	8008d44 <L_shift>
 8008df4:	4544      	cmp	r4, r8
 8008df6:	d950      	bls.n	8008e9a <__hexnan+0x10a>
 8008df8:	2300      	movs	r3, #0
 8008dfa:	f1a4 0904 	sub.w	r9, r4, #4
 8008dfe:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e02:	461d      	mov	r5, r3
 8008e04:	464c      	mov	r4, r9
 8008e06:	f8cd b008 	str.w	fp, [sp, #8]
 8008e0a:	9a03      	ldr	r2, [sp, #12]
 8008e0c:	e7d7      	b.n	8008dbe <__hexnan+0x2e>
 8008e0e:	2929      	cmp	r1, #41	; 0x29
 8008e10:	d156      	bne.n	8008ec0 <__hexnan+0x130>
 8008e12:	3202      	adds	r2, #2
 8008e14:	f8ca 2000 	str.w	r2, [sl]
 8008e18:	f1bb 0f00 	cmp.w	fp, #0
 8008e1c:	d050      	beq.n	8008ec0 <__hexnan+0x130>
 8008e1e:	454c      	cmp	r4, r9
 8008e20:	d206      	bcs.n	8008e30 <__hexnan+0xa0>
 8008e22:	2d07      	cmp	r5, #7
 8008e24:	dc04      	bgt.n	8008e30 <__hexnan+0xa0>
 8008e26:	462a      	mov	r2, r5
 8008e28:	4649      	mov	r1, r9
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	f7ff ff8a 	bl	8008d44 <L_shift>
 8008e30:	4544      	cmp	r4, r8
 8008e32:	d934      	bls.n	8008e9e <__hexnan+0x10e>
 8008e34:	4623      	mov	r3, r4
 8008e36:	f1a8 0204 	sub.w	r2, r8, #4
 8008e3a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008e3e:	429f      	cmp	r7, r3
 8008e40:	f842 1f04 	str.w	r1, [r2, #4]!
 8008e44:	d2f9      	bcs.n	8008e3a <__hexnan+0xaa>
 8008e46:	1b3b      	subs	r3, r7, r4
 8008e48:	f023 0303 	bic.w	r3, r3, #3
 8008e4c:	3304      	adds	r3, #4
 8008e4e:	3401      	adds	r4, #1
 8008e50:	3e03      	subs	r6, #3
 8008e52:	42b4      	cmp	r4, r6
 8008e54:	bf88      	it	hi
 8008e56:	2304      	movhi	r3, #4
 8008e58:	2200      	movs	r2, #0
 8008e5a:	4443      	add	r3, r8
 8008e5c:	f843 2b04 	str.w	r2, [r3], #4
 8008e60:	429f      	cmp	r7, r3
 8008e62:	d2fb      	bcs.n	8008e5c <__hexnan+0xcc>
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	b91b      	cbnz	r3, 8008e70 <__hexnan+0xe0>
 8008e68:	4547      	cmp	r7, r8
 8008e6a:	d127      	bne.n	8008ebc <__hexnan+0x12c>
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	603b      	str	r3, [r7, #0]
 8008e70:	2005      	movs	r0, #5
 8008e72:	e026      	b.n	8008ec2 <__hexnan+0x132>
 8008e74:	3501      	adds	r5, #1
 8008e76:	2d08      	cmp	r5, #8
 8008e78:	f10b 0b01 	add.w	fp, fp, #1
 8008e7c:	dd06      	ble.n	8008e8c <__hexnan+0xfc>
 8008e7e:	4544      	cmp	r4, r8
 8008e80:	d9c3      	bls.n	8008e0a <__hexnan+0x7a>
 8008e82:	2300      	movs	r3, #0
 8008e84:	2501      	movs	r5, #1
 8008e86:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e8a:	3c04      	subs	r4, #4
 8008e8c:	6822      	ldr	r2, [r4, #0]
 8008e8e:	f000 000f 	and.w	r0, r0, #15
 8008e92:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008e96:	6022      	str	r2, [r4, #0]
 8008e98:	e7b7      	b.n	8008e0a <__hexnan+0x7a>
 8008e9a:	2508      	movs	r5, #8
 8008e9c:	e7b5      	b.n	8008e0a <__hexnan+0x7a>
 8008e9e:	9b01      	ldr	r3, [sp, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d0df      	beq.n	8008e64 <__hexnan+0xd4>
 8008ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ea8:	f1c3 0320 	rsb	r3, r3, #32
 8008eac:	fa22 f303 	lsr.w	r3, r2, r3
 8008eb0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008eb4:	401a      	ands	r2, r3
 8008eb6:	f846 2c04 	str.w	r2, [r6, #-4]
 8008eba:	e7d3      	b.n	8008e64 <__hexnan+0xd4>
 8008ebc:	3f04      	subs	r7, #4
 8008ebe:	e7d1      	b.n	8008e64 <__hexnan+0xd4>
 8008ec0:	2004      	movs	r0, #4
 8008ec2:	b007      	add	sp, #28
 8008ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008ec8 <_localeconv_r>:
 8008ec8:	4800      	ldr	r0, [pc, #0]	; (8008ecc <_localeconv_r+0x4>)
 8008eca:	4770      	bx	lr
 8008ecc:	20000198 	.word	0x20000198

08008ed0 <malloc>:
 8008ed0:	4b02      	ldr	r3, [pc, #8]	; (8008edc <malloc+0xc>)
 8008ed2:	4601      	mov	r1, r0
 8008ed4:	6818      	ldr	r0, [r3, #0]
 8008ed6:	f000 bd65 	b.w	80099a4 <_malloc_r>
 8008eda:	bf00      	nop
 8008edc:	20000040 	.word	0x20000040

08008ee0 <__ascii_mbtowc>:
 8008ee0:	b082      	sub	sp, #8
 8008ee2:	b901      	cbnz	r1, 8008ee6 <__ascii_mbtowc+0x6>
 8008ee4:	a901      	add	r1, sp, #4
 8008ee6:	b142      	cbz	r2, 8008efa <__ascii_mbtowc+0x1a>
 8008ee8:	b14b      	cbz	r3, 8008efe <__ascii_mbtowc+0x1e>
 8008eea:	7813      	ldrb	r3, [r2, #0]
 8008eec:	600b      	str	r3, [r1, #0]
 8008eee:	7812      	ldrb	r2, [r2, #0]
 8008ef0:	1e10      	subs	r0, r2, #0
 8008ef2:	bf18      	it	ne
 8008ef4:	2001      	movne	r0, #1
 8008ef6:	b002      	add	sp, #8
 8008ef8:	4770      	bx	lr
 8008efa:	4610      	mov	r0, r2
 8008efc:	e7fb      	b.n	8008ef6 <__ascii_mbtowc+0x16>
 8008efe:	f06f 0001 	mvn.w	r0, #1
 8008f02:	e7f8      	b.n	8008ef6 <__ascii_mbtowc+0x16>

08008f04 <memchr>:
 8008f04:	4603      	mov	r3, r0
 8008f06:	b510      	push	{r4, lr}
 8008f08:	b2c9      	uxtb	r1, r1
 8008f0a:	4402      	add	r2, r0
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	4618      	mov	r0, r3
 8008f10:	d101      	bne.n	8008f16 <memchr+0x12>
 8008f12:	2000      	movs	r0, #0
 8008f14:	e003      	b.n	8008f1e <memchr+0x1a>
 8008f16:	7804      	ldrb	r4, [r0, #0]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	428c      	cmp	r4, r1
 8008f1c:	d1f6      	bne.n	8008f0c <memchr+0x8>
 8008f1e:	bd10      	pop	{r4, pc}

08008f20 <memcpy>:
 8008f20:	440a      	add	r2, r1
 8008f22:	4291      	cmp	r1, r2
 8008f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f28:	d100      	bne.n	8008f2c <memcpy+0xc>
 8008f2a:	4770      	bx	lr
 8008f2c:	b510      	push	{r4, lr}
 8008f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f32:	4291      	cmp	r1, r2
 8008f34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f38:	d1f9      	bne.n	8008f2e <memcpy+0xe>
 8008f3a:	bd10      	pop	{r4, pc}

08008f3c <_Balloc>:
 8008f3c:	b570      	push	{r4, r5, r6, lr}
 8008f3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f40:	4604      	mov	r4, r0
 8008f42:	460d      	mov	r5, r1
 8008f44:	b976      	cbnz	r6, 8008f64 <_Balloc+0x28>
 8008f46:	2010      	movs	r0, #16
 8008f48:	f7ff ffc2 	bl	8008ed0 <malloc>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	6260      	str	r0, [r4, #36]	; 0x24
 8008f50:	b920      	cbnz	r0, 8008f5c <_Balloc+0x20>
 8008f52:	2166      	movs	r1, #102	; 0x66
 8008f54:	4b17      	ldr	r3, [pc, #92]	; (8008fb4 <_Balloc+0x78>)
 8008f56:	4818      	ldr	r0, [pc, #96]	; (8008fb8 <_Balloc+0x7c>)
 8008f58:	f000 ff2c 	bl	8009db4 <__assert_func>
 8008f5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f60:	6006      	str	r6, [r0, #0]
 8008f62:	60c6      	str	r6, [r0, #12]
 8008f64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008f66:	68f3      	ldr	r3, [r6, #12]
 8008f68:	b183      	cbz	r3, 8008f8c <_Balloc+0x50>
 8008f6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f72:	b9b8      	cbnz	r0, 8008fa4 <_Balloc+0x68>
 8008f74:	2101      	movs	r1, #1
 8008f76:	fa01 f605 	lsl.w	r6, r1, r5
 8008f7a:	1d72      	adds	r2, r6, #5
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	0092      	lsls	r2, r2, #2
 8008f80:	f000 fc94 	bl	80098ac <_calloc_r>
 8008f84:	b160      	cbz	r0, 8008fa0 <_Balloc+0x64>
 8008f86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f8a:	e00e      	b.n	8008faa <_Balloc+0x6e>
 8008f8c:	2221      	movs	r2, #33	; 0x21
 8008f8e:	2104      	movs	r1, #4
 8008f90:	4620      	mov	r0, r4
 8008f92:	f000 fc8b 	bl	80098ac <_calloc_r>
 8008f96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f98:	60f0      	str	r0, [r6, #12]
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1e4      	bne.n	8008f6a <_Balloc+0x2e>
 8008fa0:	2000      	movs	r0, #0
 8008fa2:	bd70      	pop	{r4, r5, r6, pc}
 8008fa4:	6802      	ldr	r2, [r0, #0]
 8008fa6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008faa:	2300      	movs	r3, #0
 8008fac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008fb0:	e7f7      	b.n	8008fa2 <_Balloc+0x66>
 8008fb2:	bf00      	nop
 8008fb4:	0800ab86 	.word	0x0800ab86
 8008fb8:	0800ac84 	.word	0x0800ac84

08008fbc <_Bfree>:
 8008fbc:	b570      	push	{r4, r5, r6, lr}
 8008fbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008fc0:	4605      	mov	r5, r0
 8008fc2:	460c      	mov	r4, r1
 8008fc4:	b976      	cbnz	r6, 8008fe4 <_Bfree+0x28>
 8008fc6:	2010      	movs	r0, #16
 8008fc8:	f7ff ff82 	bl	8008ed0 <malloc>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	6268      	str	r0, [r5, #36]	; 0x24
 8008fd0:	b920      	cbnz	r0, 8008fdc <_Bfree+0x20>
 8008fd2:	218a      	movs	r1, #138	; 0x8a
 8008fd4:	4b08      	ldr	r3, [pc, #32]	; (8008ff8 <_Bfree+0x3c>)
 8008fd6:	4809      	ldr	r0, [pc, #36]	; (8008ffc <_Bfree+0x40>)
 8008fd8:	f000 feec 	bl	8009db4 <__assert_func>
 8008fdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fe0:	6006      	str	r6, [r0, #0]
 8008fe2:	60c6      	str	r6, [r0, #12]
 8008fe4:	b13c      	cbz	r4, 8008ff6 <_Bfree+0x3a>
 8008fe6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008fe8:	6862      	ldr	r2, [r4, #4]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ff0:	6021      	str	r1, [r4, #0]
 8008ff2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008ff6:	bd70      	pop	{r4, r5, r6, pc}
 8008ff8:	0800ab86 	.word	0x0800ab86
 8008ffc:	0800ac84 	.word	0x0800ac84

08009000 <__multadd>:
 8009000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009004:	4607      	mov	r7, r0
 8009006:	460c      	mov	r4, r1
 8009008:	461e      	mov	r6, r3
 800900a:	2000      	movs	r0, #0
 800900c:	690d      	ldr	r5, [r1, #16]
 800900e:	f101 0c14 	add.w	ip, r1, #20
 8009012:	f8dc 3000 	ldr.w	r3, [ip]
 8009016:	3001      	adds	r0, #1
 8009018:	b299      	uxth	r1, r3
 800901a:	fb02 6101 	mla	r1, r2, r1, r6
 800901e:	0c1e      	lsrs	r6, r3, #16
 8009020:	0c0b      	lsrs	r3, r1, #16
 8009022:	fb02 3306 	mla	r3, r2, r6, r3
 8009026:	b289      	uxth	r1, r1
 8009028:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800902c:	4285      	cmp	r5, r0
 800902e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009032:	f84c 1b04 	str.w	r1, [ip], #4
 8009036:	dcec      	bgt.n	8009012 <__multadd+0x12>
 8009038:	b30e      	cbz	r6, 800907e <__multadd+0x7e>
 800903a:	68a3      	ldr	r3, [r4, #8]
 800903c:	42ab      	cmp	r3, r5
 800903e:	dc19      	bgt.n	8009074 <__multadd+0x74>
 8009040:	6861      	ldr	r1, [r4, #4]
 8009042:	4638      	mov	r0, r7
 8009044:	3101      	adds	r1, #1
 8009046:	f7ff ff79 	bl	8008f3c <_Balloc>
 800904a:	4680      	mov	r8, r0
 800904c:	b928      	cbnz	r0, 800905a <__multadd+0x5a>
 800904e:	4602      	mov	r2, r0
 8009050:	21b5      	movs	r1, #181	; 0xb5
 8009052:	4b0c      	ldr	r3, [pc, #48]	; (8009084 <__multadd+0x84>)
 8009054:	480c      	ldr	r0, [pc, #48]	; (8009088 <__multadd+0x88>)
 8009056:	f000 fead 	bl	8009db4 <__assert_func>
 800905a:	6922      	ldr	r2, [r4, #16]
 800905c:	f104 010c 	add.w	r1, r4, #12
 8009060:	3202      	adds	r2, #2
 8009062:	0092      	lsls	r2, r2, #2
 8009064:	300c      	adds	r0, #12
 8009066:	f7ff ff5b 	bl	8008f20 <memcpy>
 800906a:	4621      	mov	r1, r4
 800906c:	4638      	mov	r0, r7
 800906e:	f7ff ffa5 	bl	8008fbc <_Bfree>
 8009072:	4644      	mov	r4, r8
 8009074:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009078:	3501      	adds	r5, #1
 800907a:	615e      	str	r6, [r3, #20]
 800907c:	6125      	str	r5, [r4, #16]
 800907e:	4620      	mov	r0, r4
 8009080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009084:	0800abf8 	.word	0x0800abf8
 8009088:	0800ac84 	.word	0x0800ac84

0800908c <__s2b>:
 800908c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009090:	4615      	mov	r5, r2
 8009092:	2209      	movs	r2, #9
 8009094:	461f      	mov	r7, r3
 8009096:	3308      	adds	r3, #8
 8009098:	460c      	mov	r4, r1
 800909a:	fb93 f3f2 	sdiv	r3, r3, r2
 800909e:	4606      	mov	r6, r0
 80090a0:	2201      	movs	r2, #1
 80090a2:	2100      	movs	r1, #0
 80090a4:	429a      	cmp	r2, r3
 80090a6:	db09      	blt.n	80090bc <__s2b+0x30>
 80090a8:	4630      	mov	r0, r6
 80090aa:	f7ff ff47 	bl	8008f3c <_Balloc>
 80090ae:	b940      	cbnz	r0, 80090c2 <__s2b+0x36>
 80090b0:	4602      	mov	r2, r0
 80090b2:	21ce      	movs	r1, #206	; 0xce
 80090b4:	4b18      	ldr	r3, [pc, #96]	; (8009118 <__s2b+0x8c>)
 80090b6:	4819      	ldr	r0, [pc, #100]	; (800911c <__s2b+0x90>)
 80090b8:	f000 fe7c 	bl	8009db4 <__assert_func>
 80090bc:	0052      	lsls	r2, r2, #1
 80090be:	3101      	adds	r1, #1
 80090c0:	e7f0      	b.n	80090a4 <__s2b+0x18>
 80090c2:	9b08      	ldr	r3, [sp, #32]
 80090c4:	2d09      	cmp	r5, #9
 80090c6:	6143      	str	r3, [r0, #20]
 80090c8:	f04f 0301 	mov.w	r3, #1
 80090cc:	6103      	str	r3, [r0, #16]
 80090ce:	dd16      	ble.n	80090fe <__s2b+0x72>
 80090d0:	f104 0909 	add.w	r9, r4, #9
 80090d4:	46c8      	mov	r8, r9
 80090d6:	442c      	add	r4, r5
 80090d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80090dc:	4601      	mov	r1, r0
 80090de:	220a      	movs	r2, #10
 80090e0:	4630      	mov	r0, r6
 80090e2:	3b30      	subs	r3, #48	; 0x30
 80090e4:	f7ff ff8c 	bl	8009000 <__multadd>
 80090e8:	45a0      	cmp	r8, r4
 80090ea:	d1f5      	bne.n	80090d8 <__s2b+0x4c>
 80090ec:	f1a5 0408 	sub.w	r4, r5, #8
 80090f0:	444c      	add	r4, r9
 80090f2:	1b2d      	subs	r5, r5, r4
 80090f4:	1963      	adds	r3, r4, r5
 80090f6:	42bb      	cmp	r3, r7
 80090f8:	db04      	blt.n	8009104 <__s2b+0x78>
 80090fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090fe:	2509      	movs	r5, #9
 8009100:	340a      	adds	r4, #10
 8009102:	e7f6      	b.n	80090f2 <__s2b+0x66>
 8009104:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009108:	4601      	mov	r1, r0
 800910a:	220a      	movs	r2, #10
 800910c:	4630      	mov	r0, r6
 800910e:	3b30      	subs	r3, #48	; 0x30
 8009110:	f7ff ff76 	bl	8009000 <__multadd>
 8009114:	e7ee      	b.n	80090f4 <__s2b+0x68>
 8009116:	bf00      	nop
 8009118:	0800abf8 	.word	0x0800abf8
 800911c:	0800ac84 	.word	0x0800ac84

08009120 <__hi0bits>:
 8009120:	0c02      	lsrs	r2, r0, #16
 8009122:	0412      	lsls	r2, r2, #16
 8009124:	4603      	mov	r3, r0
 8009126:	b9ca      	cbnz	r2, 800915c <__hi0bits+0x3c>
 8009128:	0403      	lsls	r3, r0, #16
 800912a:	2010      	movs	r0, #16
 800912c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009130:	bf04      	itt	eq
 8009132:	021b      	lsleq	r3, r3, #8
 8009134:	3008      	addeq	r0, #8
 8009136:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800913a:	bf04      	itt	eq
 800913c:	011b      	lsleq	r3, r3, #4
 800913e:	3004      	addeq	r0, #4
 8009140:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009144:	bf04      	itt	eq
 8009146:	009b      	lsleq	r3, r3, #2
 8009148:	3002      	addeq	r0, #2
 800914a:	2b00      	cmp	r3, #0
 800914c:	db05      	blt.n	800915a <__hi0bits+0x3a>
 800914e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009152:	f100 0001 	add.w	r0, r0, #1
 8009156:	bf08      	it	eq
 8009158:	2020      	moveq	r0, #32
 800915a:	4770      	bx	lr
 800915c:	2000      	movs	r0, #0
 800915e:	e7e5      	b.n	800912c <__hi0bits+0xc>

08009160 <__lo0bits>:
 8009160:	6803      	ldr	r3, [r0, #0]
 8009162:	4602      	mov	r2, r0
 8009164:	f013 0007 	ands.w	r0, r3, #7
 8009168:	d00b      	beq.n	8009182 <__lo0bits+0x22>
 800916a:	07d9      	lsls	r1, r3, #31
 800916c:	d421      	bmi.n	80091b2 <__lo0bits+0x52>
 800916e:	0798      	lsls	r0, r3, #30
 8009170:	bf49      	itett	mi
 8009172:	085b      	lsrmi	r3, r3, #1
 8009174:	089b      	lsrpl	r3, r3, #2
 8009176:	2001      	movmi	r0, #1
 8009178:	6013      	strmi	r3, [r2, #0]
 800917a:	bf5c      	itt	pl
 800917c:	2002      	movpl	r0, #2
 800917e:	6013      	strpl	r3, [r2, #0]
 8009180:	4770      	bx	lr
 8009182:	b299      	uxth	r1, r3
 8009184:	b909      	cbnz	r1, 800918a <__lo0bits+0x2a>
 8009186:	2010      	movs	r0, #16
 8009188:	0c1b      	lsrs	r3, r3, #16
 800918a:	b2d9      	uxtb	r1, r3
 800918c:	b909      	cbnz	r1, 8009192 <__lo0bits+0x32>
 800918e:	3008      	adds	r0, #8
 8009190:	0a1b      	lsrs	r3, r3, #8
 8009192:	0719      	lsls	r1, r3, #28
 8009194:	bf04      	itt	eq
 8009196:	091b      	lsreq	r3, r3, #4
 8009198:	3004      	addeq	r0, #4
 800919a:	0799      	lsls	r1, r3, #30
 800919c:	bf04      	itt	eq
 800919e:	089b      	lsreq	r3, r3, #2
 80091a0:	3002      	addeq	r0, #2
 80091a2:	07d9      	lsls	r1, r3, #31
 80091a4:	d403      	bmi.n	80091ae <__lo0bits+0x4e>
 80091a6:	085b      	lsrs	r3, r3, #1
 80091a8:	f100 0001 	add.w	r0, r0, #1
 80091ac:	d003      	beq.n	80091b6 <__lo0bits+0x56>
 80091ae:	6013      	str	r3, [r2, #0]
 80091b0:	4770      	bx	lr
 80091b2:	2000      	movs	r0, #0
 80091b4:	4770      	bx	lr
 80091b6:	2020      	movs	r0, #32
 80091b8:	4770      	bx	lr
	...

080091bc <__i2b>:
 80091bc:	b510      	push	{r4, lr}
 80091be:	460c      	mov	r4, r1
 80091c0:	2101      	movs	r1, #1
 80091c2:	f7ff febb 	bl	8008f3c <_Balloc>
 80091c6:	4602      	mov	r2, r0
 80091c8:	b928      	cbnz	r0, 80091d6 <__i2b+0x1a>
 80091ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80091ce:	4b04      	ldr	r3, [pc, #16]	; (80091e0 <__i2b+0x24>)
 80091d0:	4804      	ldr	r0, [pc, #16]	; (80091e4 <__i2b+0x28>)
 80091d2:	f000 fdef 	bl	8009db4 <__assert_func>
 80091d6:	2301      	movs	r3, #1
 80091d8:	6144      	str	r4, [r0, #20]
 80091da:	6103      	str	r3, [r0, #16]
 80091dc:	bd10      	pop	{r4, pc}
 80091de:	bf00      	nop
 80091e0:	0800abf8 	.word	0x0800abf8
 80091e4:	0800ac84 	.word	0x0800ac84

080091e8 <__multiply>:
 80091e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ec:	4691      	mov	r9, r2
 80091ee:	690a      	ldr	r2, [r1, #16]
 80091f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80091f4:	460c      	mov	r4, r1
 80091f6:	429a      	cmp	r2, r3
 80091f8:	bfbe      	ittt	lt
 80091fa:	460b      	movlt	r3, r1
 80091fc:	464c      	movlt	r4, r9
 80091fe:	4699      	movlt	r9, r3
 8009200:	6927      	ldr	r7, [r4, #16]
 8009202:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009206:	68a3      	ldr	r3, [r4, #8]
 8009208:	6861      	ldr	r1, [r4, #4]
 800920a:	eb07 060a 	add.w	r6, r7, sl
 800920e:	42b3      	cmp	r3, r6
 8009210:	b085      	sub	sp, #20
 8009212:	bfb8      	it	lt
 8009214:	3101      	addlt	r1, #1
 8009216:	f7ff fe91 	bl	8008f3c <_Balloc>
 800921a:	b930      	cbnz	r0, 800922a <__multiply+0x42>
 800921c:	4602      	mov	r2, r0
 800921e:	f240 115d 	movw	r1, #349	; 0x15d
 8009222:	4b43      	ldr	r3, [pc, #268]	; (8009330 <__multiply+0x148>)
 8009224:	4843      	ldr	r0, [pc, #268]	; (8009334 <__multiply+0x14c>)
 8009226:	f000 fdc5 	bl	8009db4 <__assert_func>
 800922a:	f100 0514 	add.w	r5, r0, #20
 800922e:	462b      	mov	r3, r5
 8009230:	2200      	movs	r2, #0
 8009232:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009236:	4543      	cmp	r3, r8
 8009238:	d321      	bcc.n	800927e <__multiply+0x96>
 800923a:	f104 0314 	add.w	r3, r4, #20
 800923e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009242:	f109 0314 	add.w	r3, r9, #20
 8009246:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800924a:	9202      	str	r2, [sp, #8]
 800924c:	1b3a      	subs	r2, r7, r4
 800924e:	3a15      	subs	r2, #21
 8009250:	f022 0203 	bic.w	r2, r2, #3
 8009254:	3204      	adds	r2, #4
 8009256:	f104 0115 	add.w	r1, r4, #21
 800925a:	428f      	cmp	r7, r1
 800925c:	bf38      	it	cc
 800925e:	2204      	movcc	r2, #4
 8009260:	9201      	str	r2, [sp, #4]
 8009262:	9a02      	ldr	r2, [sp, #8]
 8009264:	9303      	str	r3, [sp, #12]
 8009266:	429a      	cmp	r2, r3
 8009268:	d80c      	bhi.n	8009284 <__multiply+0x9c>
 800926a:	2e00      	cmp	r6, #0
 800926c:	dd03      	ble.n	8009276 <__multiply+0x8e>
 800926e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009272:	2b00      	cmp	r3, #0
 8009274:	d059      	beq.n	800932a <__multiply+0x142>
 8009276:	6106      	str	r6, [r0, #16]
 8009278:	b005      	add	sp, #20
 800927a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800927e:	f843 2b04 	str.w	r2, [r3], #4
 8009282:	e7d8      	b.n	8009236 <__multiply+0x4e>
 8009284:	f8b3 a000 	ldrh.w	sl, [r3]
 8009288:	f1ba 0f00 	cmp.w	sl, #0
 800928c:	d023      	beq.n	80092d6 <__multiply+0xee>
 800928e:	46a9      	mov	r9, r5
 8009290:	f04f 0c00 	mov.w	ip, #0
 8009294:	f104 0e14 	add.w	lr, r4, #20
 8009298:	f85e 2b04 	ldr.w	r2, [lr], #4
 800929c:	f8d9 1000 	ldr.w	r1, [r9]
 80092a0:	fa1f fb82 	uxth.w	fp, r2
 80092a4:	b289      	uxth	r1, r1
 80092a6:	fb0a 110b 	mla	r1, sl, fp, r1
 80092aa:	4461      	add	r1, ip
 80092ac:	f8d9 c000 	ldr.w	ip, [r9]
 80092b0:	0c12      	lsrs	r2, r2, #16
 80092b2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80092b6:	fb0a c202 	mla	r2, sl, r2, ip
 80092ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80092be:	b289      	uxth	r1, r1
 80092c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80092c4:	4577      	cmp	r7, lr
 80092c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80092ca:	f849 1b04 	str.w	r1, [r9], #4
 80092ce:	d8e3      	bhi.n	8009298 <__multiply+0xb0>
 80092d0:	9a01      	ldr	r2, [sp, #4]
 80092d2:	f845 c002 	str.w	ip, [r5, r2]
 80092d6:	9a03      	ldr	r2, [sp, #12]
 80092d8:	3304      	adds	r3, #4
 80092da:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80092de:	f1b9 0f00 	cmp.w	r9, #0
 80092e2:	d020      	beq.n	8009326 <__multiply+0x13e>
 80092e4:	46ae      	mov	lr, r5
 80092e6:	f04f 0a00 	mov.w	sl, #0
 80092ea:	6829      	ldr	r1, [r5, #0]
 80092ec:	f104 0c14 	add.w	ip, r4, #20
 80092f0:	f8bc b000 	ldrh.w	fp, [ip]
 80092f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80092f8:	b289      	uxth	r1, r1
 80092fa:	fb09 220b 	mla	r2, r9, fp, r2
 80092fe:	4492      	add	sl, r2
 8009300:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009304:	f84e 1b04 	str.w	r1, [lr], #4
 8009308:	f85c 2b04 	ldr.w	r2, [ip], #4
 800930c:	f8be 1000 	ldrh.w	r1, [lr]
 8009310:	0c12      	lsrs	r2, r2, #16
 8009312:	fb09 1102 	mla	r1, r9, r2, r1
 8009316:	4567      	cmp	r7, ip
 8009318:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800931c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009320:	d8e6      	bhi.n	80092f0 <__multiply+0x108>
 8009322:	9a01      	ldr	r2, [sp, #4]
 8009324:	50a9      	str	r1, [r5, r2]
 8009326:	3504      	adds	r5, #4
 8009328:	e79b      	b.n	8009262 <__multiply+0x7a>
 800932a:	3e01      	subs	r6, #1
 800932c:	e79d      	b.n	800926a <__multiply+0x82>
 800932e:	bf00      	nop
 8009330:	0800abf8 	.word	0x0800abf8
 8009334:	0800ac84 	.word	0x0800ac84

08009338 <__pow5mult>:
 8009338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800933c:	4615      	mov	r5, r2
 800933e:	f012 0203 	ands.w	r2, r2, #3
 8009342:	4606      	mov	r6, r0
 8009344:	460f      	mov	r7, r1
 8009346:	d007      	beq.n	8009358 <__pow5mult+0x20>
 8009348:	4c25      	ldr	r4, [pc, #148]	; (80093e0 <__pow5mult+0xa8>)
 800934a:	3a01      	subs	r2, #1
 800934c:	2300      	movs	r3, #0
 800934e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009352:	f7ff fe55 	bl	8009000 <__multadd>
 8009356:	4607      	mov	r7, r0
 8009358:	10ad      	asrs	r5, r5, #2
 800935a:	d03d      	beq.n	80093d8 <__pow5mult+0xa0>
 800935c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800935e:	b97c      	cbnz	r4, 8009380 <__pow5mult+0x48>
 8009360:	2010      	movs	r0, #16
 8009362:	f7ff fdb5 	bl	8008ed0 <malloc>
 8009366:	4602      	mov	r2, r0
 8009368:	6270      	str	r0, [r6, #36]	; 0x24
 800936a:	b928      	cbnz	r0, 8009378 <__pow5mult+0x40>
 800936c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009370:	4b1c      	ldr	r3, [pc, #112]	; (80093e4 <__pow5mult+0xac>)
 8009372:	481d      	ldr	r0, [pc, #116]	; (80093e8 <__pow5mult+0xb0>)
 8009374:	f000 fd1e 	bl	8009db4 <__assert_func>
 8009378:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800937c:	6004      	str	r4, [r0, #0]
 800937e:	60c4      	str	r4, [r0, #12]
 8009380:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009384:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009388:	b94c      	cbnz	r4, 800939e <__pow5mult+0x66>
 800938a:	f240 2171 	movw	r1, #625	; 0x271
 800938e:	4630      	mov	r0, r6
 8009390:	f7ff ff14 	bl	80091bc <__i2b>
 8009394:	2300      	movs	r3, #0
 8009396:	4604      	mov	r4, r0
 8009398:	f8c8 0008 	str.w	r0, [r8, #8]
 800939c:	6003      	str	r3, [r0, #0]
 800939e:	f04f 0900 	mov.w	r9, #0
 80093a2:	07eb      	lsls	r3, r5, #31
 80093a4:	d50a      	bpl.n	80093bc <__pow5mult+0x84>
 80093a6:	4639      	mov	r1, r7
 80093a8:	4622      	mov	r2, r4
 80093aa:	4630      	mov	r0, r6
 80093ac:	f7ff ff1c 	bl	80091e8 <__multiply>
 80093b0:	4680      	mov	r8, r0
 80093b2:	4639      	mov	r1, r7
 80093b4:	4630      	mov	r0, r6
 80093b6:	f7ff fe01 	bl	8008fbc <_Bfree>
 80093ba:	4647      	mov	r7, r8
 80093bc:	106d      	asrs	r5, r5, #1
 80093be:	d00b      	beq.n	80093d8 <__pow5mult+0xa0>
 80093c0:	6820      	ldr	r0, [r4, #0]
 80093c2:	b938      	cbnz	r0, 80093d4 <__pow5mult+0x9c>
 80093c4:	4622      	mov	r2, r4
 80093c6:	4621      	mov	r1, r4
 80093c8:	4630      	mov	r0, r6
 80093ca:	f7ff ff0d 	bl	80091e8 <__multiply>
 80093ce:	6020      	str	r0, [r4, #0]
 80093d0:	f8c0 9000 	str.w	r9, [r0]
 80093d4:	4604      	mov	r4, r0
 80093d6:	e7e4      	b.n	80093a2 <__pow5mult+0x6a>
 80093d8:	4638      	mov	r0, r7
 80093da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093de:	bf00      	nop
 80093e0:	0800add0 	.word	0x0800add0
 80093e4:	0800ab86 	.word	0x0800ab86
 80093e8:	0800ac84 	.word	0x0800ac84

080093ec <__lshift>:
 80093ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093f0:	460c      	mov	r4, r1
 80093f2:	4607      	mov	r7, r0
 80093f4:	4691      	mov	r9, r2
 80093f6:	6923      	ldr	r3, [r4, #16]
 80093f8:	6849      	ldr	r1, [r1, #4]
 80093fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80093fe:	68a3      	ldr	r3, [r4, #8]
 8009400:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009404:	f108 0601 	add.w	r6, r8, #1
 8009408:	42b3      	cmp	r3, r6
 800940a:	db0b      	blt.n	8009424 <__lshift+0x38>
 800940c:	4638      	mov	r0, r7
 800940e:	f7ff fd95 	bl	8008f3c <_Balloc>
 8009412:	4605      	mov	r5, r0
 8009414:	b948      	cbnz	r0, 800942a <__lshift+0x3e>
 8009416:	4602      	mov	r2, r0
 8009418:	f240 11d9 	movw	r1, #473	; 0x1d9
 800941c:	4b29      	ldr	r3, [pc, #164]	; (80094c4 <__lshift+0xd8>)
 800941e:	482a      	ldr	r0, [pc, #168]	; (80094c8 <__lshift+0xdc>)
 8009420:	f000 fcc8 	bl	8009db4 <__assert_func>
 8009424:	3101      	adds	r1, #1
 8009426:	005b      	lsls	r3, r3, #1
 8009428:	e7ee      	b.n	8009408 <__lshift+0x1c>
 800942a:	2300      	movs	r3, #0
 800942c:	f100 0114 	add.w	r1, r0, #20
 8009430:	f100 0210 	add.w	r2, r0, #16
 8009434:	4618      	mov	r0, r3
 8009436:	4553      	cmp	r3, sl
 8009438:	db37      	blt.n	80094aa <__lshift+0xbe>
 800943a:	6920      	ldr	r0, [r4, #16]
 800943c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009440:	f104 0314 	add.w	r3, r4, #20
 8009444:	f019 091f 	ands.w	r9, r9, #31
 8009448:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800944c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009450:	d02f      	beq.n	80094b2 <__lshift+0xc6>
 8009452:	468a      	mov	sl, r1
 8009454:	f04f 0c00 	mov.w	ip, #0
 8009458:	f1c9 0e20 	rsb	lr, r9, #32
 800945c:	681a      	ldr	r2, [r3, #0]
 800945e:	fa02 f209 	lsl.w	r2, r2, r9
 8009462:	ea42 020c 	orr.w	r2, r2, ip
 8009466:	f84a 2b04 	str.w	r2, [sl], #4
 800946a:	f853 2b04 	ldr.w	r2, [r3], #4
 800946e:	4298      	cmp	r0, r3
 8009470:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009474:	d8f2      	bhi.n	800945c <__lshift+0x70>
 8009476:	1b03      	subs	r3, r0, r4
 8009478:	3b15      	subs	r3, #21
 800947a:	f023 0303 	bic.w	r3, r3, #3
 800947e:	3304      	adds	r3, #4
 8009480:	f104 0215 	add.w	r2, r4, #21
 8009484:	4290      	cmp	r0, r2
 8009486:	bf38      	it	cc
 8009488:	2304      	movcc	r3, #4
 800948a:	f841 c003 	str.w	ip, [r1, r3]
 800948e:	f1bc 0f00 	cmp.w	ip, #0
 8009492:	d001      	beq.n	8009498 <__lshift+0xac>
 8009494:	f108 0602 	add.w	r6, r8, #2
 8009498:	3e01      	subs	r6, #1
 800949a:	4638      	mov	r0, r7
 800949c:	4621      	mov	r1, r4
 800949e:	612e      	str	r6, [r5, #16]
 80094a0:	f7ff fd8c 	bl	8008fbc <_Bfree>
 80094a4:	4628      	mov	r0, r5
 80094a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80094ae:	3301      	adds	r3, #1
 80094b0:	e7c1      	b.n	8009436 <__lshift+0x4a>
 80094b2:	3904      	subs	r1, #4
 80094b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80094b8:	4298      	cmp	r0, r3
 80094ba:	f841 2f04 	str.w	r2, [r1, #4]!
 80094be:	d8f9      	bhi.n	80094b4 <__lshift+0xc8>
 80094c0:	e7ea      	b.n	8009498 <__lshift+0xac>
 80094c2:	bf00      	nop
 80094c4:	0800abf8 	.word	0x0800abf8
 80094c8:	0800ac84 	.word	0x0800ac84

080094cc <__mcmp>:
 80094cc:	4603      	mov	r3, r0
 80094ce:	690a      	ldr	r2, [r1, #16]
 80094d0:	6900      	ldr	r0, [r0, #16]
 80094d2:	b530      	push	{r4, r5, lr}
 80094d4:	1a80      	subs	r0, r0, r2
 80094d6:	d10d      	bne.n	80094f4 <__mcmp+0x28>
 80094d8:	3314      	adds	r3, #20
 80094da:	3114      	adds	r1, #20
 80094dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80094e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80094e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80094e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80094ec:	4295      	cmp	r5, r2
 80094ee:	d002      	beq.n	80094f6 <__mcmp+0x2a>
 80094f0:	d304      	bcc.n	80094fc <__mcmp+0x30>
 80094f2:	2001      	movs	r0, #1
 80094f4:	bd30      	pop	{r4, r5, pc}
 80094f6:	42a3      	cmp	r3, r4
 80094f8:	d3f4      	bcc.n	80094e4 <__mcmp+0x18>
 80094fa:	e7fb      	b.n	80094f4 <__mcmp+0x28>
 80094fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009500:	e7f8      	b.n	80094f4 <__mcmp+0x28>
	...

08009504 <__mdiff>:
 8009504:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009508:	460d      	mov	r5, r1
 800950a:	4607      	mov	r7, r0
 800950c:	4611      	mov	r1, r2
 800950e:	4628      	mov	r0, r5
 8009510:	4614      	mov	r4, r2
 8009512:	f7ff ffdb 	bl	80094cc <__mcmp>
 8009516:	1e06      	subs	r6, r0, #0
 8009518:	d111      	bne.n	800953e <__mdiff+0x3a>
 800951a:	4631      	mov	r1, r6
 800951c:	4638      	mov	r0, r7
 800951e:	f7ff fd0d 	bl	8008f3c <_Balloc>
 8009522:	4602      	mov	r2, r0
 8009524:	b928      	cbnz	r0, 8009532 <__mdiff+0x2e>
 8009526:	f240 2132 	movw	r1, #562	; 0x232
 800952a:	4b3a      	ldr	r3, [pc, #232]	; (8009614 <__mdiff+0x110>)
 800952c:	483a      	ldr	r0, [pc, #232]	; (8009618 <__mdiff+0x114>)
 800952e:	f000 fc41 	bl	8009db4 <__assert_func>
 8009532:	2301      	movs	r3, #1
 8009534:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009538:	4610      	mov	r0, r2
 800953a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800953e:	bfa4      	itt	ge
 8009540:	4623      	movge	r3, r4
 8009542:	462c      	movge	r4, r5
 8009544:	4638      	mov	r0, r7
 8009546:	6861      	ldr	r1, [r4, #4]
 8009548:	bfa6      	itte	ge
 800954a:	461d      	movge	r5, r3
 800954c:	2600      	movge	r6, #0
 800954e:	2601      	movlt	r6, #1
 8009550:	f7ff fcf4 	bl	8008f3c <_Balloc>
 8009554:	4602      	mov	r2, r0
 8009556:	b918      	cbnz	r0, 8009560 <__mdiff+0x5c>
 8009558:	f44f 7110 	mov.w	r1, #576	; 0x240
 800955c:	4b2d      	ldr	r3, [pc, #180]	; (8009614 <__mdiff+0x110>)
 800955e:	e7e5      	b.n	800952c <__mdiff+0x28>
 8009560:	f102 0814 	add.w	r8, r2, #20
 8009564:	46c2      	mov	sl, r8
 8009566:	f04f 0c00 	mov.w	ip, #0
 800956a:	6927      	ldr	r7, [r4, #16]
 800956c:	60c6      	str	r6, [r0, #12]
 800956e:	692e      	ldr	r6, [r5, #16]
 8009570:	f104 0014 	add.w	r0, r4, #20
 8009574:	f105 0914 	add.w	r9, r5, #20
 8009578:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800957c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009580:	3410      	adds	r4, #16
 8009582:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009586:	f859 3b04 	ldr.w	r3, [r9], #4
 800958a:	fa1f f18b 	uxth.w	r1, fp
 800958e:	448c      	add	ip, r1
 8009590:	b299      	uxth	r1, r3
 8009592:	0c1b      	lsrs	r3, r3, #16
 8009594:	ebac 0101 	sub.w	r1, ip, r1
 8009598:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800959c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80095a0:	b289      	uxth	r1, r1
 80095a2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80095a6:	454e      	cmp	r6, r9
 80095a8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80095ac:	f84a 3b04 	str.w	r3, [sl], #4
 80095b0:	d8e7      	bhi.n	8009582 <__mdiff+0x7e>
 80095b2:	1b73      	subs	r3, r6, r5
 80095b4:	3b15      	subs	r3, #21
 80095b6:	f023 0303 	bic.w	r3, r3, #3
 80095ba:	3515      	adds	r5, #21
 80095bc:	3304      	adds	r3, #4
 80095be:	42ae      	cmp	r6, r5
 80095c0:	bf38      	it	cc
 80095c2:	2304      	movcc	r3, #4
 80095c4:	4418      	add	r0, r3
 80095c6:	4443      	add	r3, r8
 80095c8:	461e      	mov	r6, r3
 80095ca:	4605      	mov	r5, r0
 80095cc:	4575      	cmp	r5, lr
 80095ce:	d30e      	bcc.n	80095ee <__mdiff+0xea>
 80095d0:	f10e 0103 	add.w	r1, lr, #3
 80095d4:	1a09      	subs	r1, r1, r0
 80095d6:	f021 0103 	bic.w	r1, r1, #3
 80095da:	3803      	subs	r0, #3
 80095dc:	4586      	cmp	lr, r0
 80095de:	bf38      	it	cc
 80095e0:	2100      	movcc	r1, #0
 80095e2:	4419      	add	r1, r3
 80095e4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80095e8:	b18b      	cbz	r3, 800960e <__mdiff+0x10a>
 80095ea:	6117      	str	r7, [r2, #16]
 80095ec:	e7a4      	b.n	8009538 <__mdiff+0x34>
 80095ee:	f855 8b04 	ldr.w	r8, [r5], #4
 80095f2:	fa1f f188 	uxth.w	r1, r8
 80095f6:	4461      	add	r1, ip
 80095f8:	140c      	asrs	r4, r1, #16
 80095fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80095fe:	b289      	uxth	r1, r1
 8009600:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009604:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009608:	f846 1b04 	str.w	r1, [r6], #4
 800960c:	e7de      	b.n	80095cc <__mdiff+0xc8>
 800960e:	3f01      	subs	r7, #1
 8009610:	e7e8      	b.n	80095e4 <__mdiff+0xe0>
 8009612:	bf00      	nop
 8009614:	0800abf8 	.word	0x0800abf8
 8009618:	0800ac84 	.word	0x0800ac84

0800961c <__ulp>:
 800961c:	4b11      	ldr	r3, [pc, #68]	; (8009664 <__ulp+0x48>)
 800961e:	400b      	ands	r3, r1
 8009620:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009624:	2b00      	cmp	r3, #0
 8009626:	dd02      	ble.n	800962e <__ulp+0x12>
 8009628:	2000      	movs	r0, #0
 800962a:	4619      	mov	r1, r3
 800962c:	4770      	bx	lr
 800962e:	425b      	negs	r3, r3
 8009630:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009634:	f04f 0000 	mov.w	r0, #0
 8009638:	f04f 0100 	mov.w	r1, #0
 800963c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009640:	da04      	bge.n	800964c <__ulp+0x30>
 8009642:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009646:	fa43 f102 	asr.w	r1, r3, r2
 800964a:	4770      	bx	lr
 800964c:	f1a2 0314 	sub.w	r3, r2, #20
 8009650:	2b1e      	cmp	r3, #30
 8009652:	bfd6      	itet	le
 8009654:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009658:	2301      	movgt	r3, #1
 800965a:	fa22 f303 	lsrle.w	r3, r2, r3
 800965e:	4618      	mov	r0, r3
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	7ff00000 	.word	0x7ff00000

08009668 <__b2d>:
 8009668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800966c:	6907      	ldr	r7, [r0, #16]
 800966e:	f100 0914 	add.w	r9, r0, #20
 8009672:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009676:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800967a:	f1a7 0804 	sub.w	r8, r7, #4
 800967e:	4630      	mov	r0, r6
 8009680:	f7ff fd4e 	bl	8009120 <__hi0bits>
 8009684:	f1c0 0320 	rsb	r3, r0, #32
 8009688:	280a      	cmp	r0, #10
 800968a:	600b      	str	r3, [r1, #0]
 800968c:	491f      	ldr	r1, [pc, #124]	; (800970c <__b2d+0xa4>)
 800968e:	dc17      	bgt.n	80096c0 <__b2d+0x58>
 8009690:	45c1      	cmp	r9, r8
 8009692:	bf28      	it	cs
 8009694:	2200      	movcs	r2, #0
 8009696:	f1c0 0c0b 	rsb	ip, r0, #11
 800969a:	fa26 f30c 	lsr.w	r3, r6, ip
 800969e:	bf38      	it	cc
 80096a0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80096a4:	ea43 0501 	orr.w	r5, r3, r1
 80096a8:	f100 0315 	add.w	r3, r0, #21
 80096ac:	fa06 f303 	lsl.w	r3, r6, r3
 80096b0:	fa22 f20c 	lsr.w	r2, r2, ip
 80096b4:	ea43 0402 	orr.w	r4, r3, r2
 80096b8:	4620      	mov	r0, r4
 80096ba:	4629      	mov	r1, r5
 80096bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096c0:	45c1      	cmp	r9, r8
 80096c2:	bf2e      	itee	cs
 80096c4:	2200      	movcs	r2, #0
 80096c6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80096ca:	f1a7 0808 	subcc.w	r8, r7, #8
 80096ce:	f1b0 030b 	subs.w	r3, r0, #11
 80096d2:	d016      	beq.n	8009702 <__b2d+0x9a>
 80096d4:	f1c3 0720 	rsb	r7, r3, #32
 80096d8:	fa22 f107 	lsr.w	r1, r2, r7
 80096dc:	45c8      	cmp	r8, r9
 80096de:	fa06 f603 	lsl.w	r6, r6, r3
 80096e2:	ea46 0601 	orr.w	r6, r6, r1
 80096e6:	bf94      	ite	ls
 80096e8:	2100      	movls	r1, #0
 80096ea:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80096ee:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80096f2:	fa02 f003 	lsl.w	r0, r2, r3
 80096f6:	40f9      	lsrs	r1, r7
 80096f8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80096fc:	ea40 0401 	orr.w	r4, r0, r1
 8009700:	e7da      	b.n	80096b8 <__b2d+0x50>
 8009702:	4614      	mov	r4, r2
 8009704:	ea46 0501 	orr.w	r5, r6, r1
 8009708:	e7d6      	b.n	80096b8 <__b2d+0x50>
 800970a:	bf00      	nop
 800970c:	3ff00000 	.word	0x3ff00000

08009710 <__d2b>:
 8009710:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009714:	2101      	movs	r1, #1
 8009716:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800971a:	4690      	mov	r8, r2
 800971c:	461d      	mov	r5, r3
 800971e:	f7ff fc0d 	bl	8008f3c <_Balloc>
 8009722:	4604      	mov	r4, r0
 8009724:	b930      	cbnz	r0, 8009734 <__d2b+0x24>
 8009726:	4602      	mov	r2, r0
 8009728:	f240 310a 	movw	r1, #778	; 0x30a
 800972c:	4b24      	ldr	r3, [pc, #144]	; (80097c0 <__d2b+0xb0>)
 800972e:	4825      	ldr	r0, [pc, #148]	; (80097c4 <__d2b+0xb4>)
 8009730:	f000 fb40 	bl	8009db4 <__assert_func>
 8009734:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009738:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800973c:	bb2d      	cbnz	r5, 800978a <__d2b+0x7a>
 800973e:	9301      	str	r3, [sp, #4]
 8009740:	f1b8 0300 	subs.w	r3, r8, #0
 8009744:	d026      	beq.n	8009794 <__d2b+0x84>
 8009746:	4668      	mov	r0, sp
 8009748:	9300      	str	r3, [sp, #0]
 800974a:	f7ff fd09 	bl	8009160 <__lo0bits>
 800974e:	9900      	ldr	r1, [sp, #0]
 8009750:	b1f0      	cbz	r0, 8009790 <__d2b+0x80>
 8009752:	9a01      	ldr	r2, [sp, #4]
 8009754:	f1c0 0320 	rsb	r3, r0, #32
 8009758:	fa02 f303 	lsl.w	r3, r2, r3
 800975c:	430b      	orrs	r3, r1
 800975e:	40c2      	lsrs	r2, r0
 8009760:	6163      	str	r3, [r4, #20]
 8009762:	9201      	str	r2, [sp, #4]
 8009764:	9b01      	ldr	r3, [sp, #4]
 8009766:	2b00      	cmp	r3, #0
 8009768:	bf14      	ite	ne
 800976a:	2102      	movne	r1, #2
 800976c:	2101      	moveq	r1, #1
 800976e:	61a3      	str	r3, [r4, #24]
 8009770:	6121      	str	r1, [r4, #16]
 8009772:	b1c5      	cbz	r5, 80097a6 <__d2b+0x96>
 8009774:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009778:	4405      	add	r5, r0
 800977a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800977e:	603d      	str	r5, [r7, #0]
 8009780:	6030      	str	r0, [r6, #0]
 8009782:	4620      	mov	r0, r4
 8009784:	b002      	add	sp, #8
 8009786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800978a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800978e:	e7d6      	b.n	800973e <__d2b+0x2e>
 8009790:	6161      	str	r1, [r4, #20]
 8009792:	e7e7      	b.n	8009764 <__d2b+0x54>
 8009794:	a801      	add	r0, sp, #4
 8009796:	f7ff fce3 	bl	8009160 <__lo0bits>
 800979a:	2101      	movs	r1, #1
 800979c:	9b01      	ldr	r3, [sp, #4]
 800979e:	6121      	str	r1, [r4, #16]
 80097a0:	6163      	str	r3, [r4, #20]
 80097a2:	3020      	adds	r0, #32
 80097a4:	e7e5      	b.n	8009772 <__d2b+0x62>
 80097a6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80097aa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80097ae:	6038      	str	r0, [r7, #0]
 80097b0:	6918      	ldr	r0, [r3, #16]
 80097b2:	f7ff fcb5 	bl	8009120 <__hi0bits>
 80097b6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80097ba:	6031      	str	r1, [r6, #0]
 80097bc:	e7e1      	b.n	8009782 <__d2b+0x72>
 80097be:	bf00      	nop
 80097c0:	0800abf8 	.word	0x0800abf8
 80097c4:	0800ac84 	.word	0x0800ac84

080097c8 <__ratio>:
 80097c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097cc:	4688      	mov	r8, r1
 80097ce:	4669      	mov	r1, sp
 80097d0:	4681      	mov	r9, r0
 80097d2:	f7ff ff49 	bl	8009668 <__b2d>
 80097d6:	460f      	mov	r7, r1
 80097d8:	4604      	mov	r4, r0
 80097da:	460d      	mov	r5, r1
 80097dc:	4640      	mov	r0, r8
 80097de:	a901      	add	r1, sp, #4
 80097e0:	f7ff ff42 	bl	8009668 <__b2d>
 80097e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80097e8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80097ec:	468b      	mov	fp, r1
 80097ee:	eba3 0c02 	sub.w	ip, r3, r2
 80097f2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80097f6:	1a9b      	subs	r3, r3, r2
 80097f8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	bfd5      	itete	le
 8009800:	460a      	movle	r2, r1
 8009802:	462a      	movgt	r2, r5
 8009804:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009808:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800980c:	bfd8      	it	le
 800980e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009812:	465b      	mov	r3, fp
 8009814:	4602      	mov	r2, r0
 8009816:	4639      	mov	r1, r7
 8009818:	4620      	mov	r0, r4
 800981a:	f7f6 ff87 	bl	800072c <__aeabi_ddiv>
 800981e:	b003      	add	sp, #12
 8009820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009824 <__copybits>:
 8009824:	3901      	subs	r1, #1
 8009826:	b570      	push	{r4, r5, r6, lr}
 8009828:	1149      	asrs	r1, r1, #5
 800982a:	6914      	ldr	r4, [r2, #16]
 800982c:	3101      	adds	r1, #1
 800982e:	f102 0314 	add.w	r3, r2, #20
 8009832:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009836:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800983a:	1f05      	subs	r5, r0, #4
 800983c:	42a3      	cmp	r3, r4
 800983e:	d30c      	bcc.n	800985a <__copybits+0x36>
 8009840:	1aa3      	subs	r3, r4, r2
 8009842:	3b11      	subs	r3, #17
 8009844:	f023 0303 	bic.w	r3, r3, #3
 8009848:	3211      	adds	r2, #17
 800984a:	42a2      	cmp	r2, r4
 800984c:	bf88      	it	hi
 800984e:	2300      	movhi	r3, #0
 8009850:	4418      	add	r0, r3
 8009852:	2300      	movs	r3, #0
 8009854:	4288      	cmp	r0, r1
 8009856:	d305      	bcc.n	8009864 <__copybits+0x40>
 8009858:	bd70      	pop	{r4, r5, r6, pc}
 800985a:	f853 6b04 	ldr.w	r6, [r3], #4
 800985e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009862:	e7eb      	b.n	800983c <__copybits+0x18>
 8009864:	f840 3b04 	str.w	r3, [r0], #4
 8009868:	e7f4      	b.n	8009854 <__copybits+0x30>

0800986a <__any_on>:
 800986a:	f100 0214 	add.w	r2, r0, #20
 800986e:	6900      	ldr	r0, [r0, #16]
 8009870:	114b      	asrs	r3, r1, #5
 8009872:	4298      	cmp	r0, r3
 8009874:	b510      	push	{r4, lr}
 8009876:	db11      	blt.n	800989c <__any_on+0x32>
 8009878:	dd0a      	ble.n	8009890 <__any_on+0x26>
 800987a:	f011 011f 	ands.w	r1, r1, #31
 800987e:	d007      	beq.n	8009890 <__any_on+0x26>
 8009880:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009884:	fa24 f001 	lsr.w	r0, r4, r1
 8009888:	fa00 f101 	lsl.w	r1, r0, r1
 800988c:	428c      	cmp	r4, r1
 800988e:	d10b      	bne.n	80098a8 <__any_on+0x3e>
 8009890:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009894:	4293      	cmp	r3, r2
 8009896:	d803      	bhi.n	80098a0 <__any_on+0x36>
 8009898:	2000      	movs	r0, #0
 800989a:	bd10      	pop	{r4, pc}
 800989c:	4603      	mov	r3, r0
 800989e:	e7f7      	b.n	8009890 <__any_on+0x26>
 80098a0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80098a4:	2900      	cmp	r1, #0
 80098a6:	d0f5      	beq.n	8009894 <__any_on+0x2a>
 80098a8:	2001      	movs	r0, #1
 80098aa:	e7f6      	b.n	800989a <__any_on+0x30>

080098ac <_calloc_r>:
 80098ac:	b570      	push	{r4, r5, r6, lr}
 80098ae:	fba1 5402 	umull	r5, r4, r1, r2
 80098b2:	b934      	cbnz	r4, 80098c2 <_calloc_r+0x16>
 80098b4:	4629      	mov	r1, r5
 80098b6:	f000 f875 	bl	80099a4 <_malloc_r>
 80098ba:	4606      	mov	r6, r0
 80098bc:	b928      	cbnz	r0, 80098ca <_calloc_r+0x1e>
 80098be:	4630      	mov	r0, r6
 80098c0:	bd70      	pop	{r4, r5, r6, pc}
 80098c2:	220c      	movs	r2, #12
 80098c4:	2600      	movs	r6, #0
 80098c6:	6002      	str	r2, [r0, #0]
 80098c8:	e7f9      	b.n	80098be <_calloc_r+0x12>
 80098ca:	462a      	mov	r2, r5
 80098cc:	4621      	mov	r1, r4
 80098ce:	f7fc fdbd 	bl	800644c <memset>
 80098d2:	e7f4      	b.n	80098be <_calloc_r+0x12>

080098d4 <_free_r>:
 80098d4:	b538      	push	{r3, r4, r5, lr}
 80098d6:	4605      	mov	r5, r0
 80098d8:	2900      	cmp	r1, #0
 80098da:	d040      	beq.n	800995e <_free_r+0x8a>
 80098dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098e0:	1f0c      	subs	r4, r1, #4
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	bfb8      	it	lt
 80098e6:	18e4      	addlt	r4, r4, r3
 80098e8:	f000 faae 	bl	8009e48 <__malloc_lock>
 80098ec:	4a1c      	ldr	r2, [pc, #112]	; (8009960 <_free_r+0x8c>)
 80098ee:	6813      	ldr	r3, [r2, #0]
 80098f0:	b933      	cbnz	r3, 8009900 <_free_r+0x2c>
 80098f2:	6063      	str	r3, [r4, #4]
 80098f4:	6014      	str	r4, [r2, #0]
 80098f6:	4628      	mov	r0, r5
 80098f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098fc:	f000 baaa 	b.w	8009e54 <__malloc_unlock>
 8009900:	42a3      	cmp	r3, r4
 8009902:	d908      	bls.n	8009916 <_free_r+0x42>
 8009904:	6820      	ldr	r0, [r4, #0]
 8009906:	1821      	adds	r1, r4, r0
 8009908:	428b      	cmp	r3, r1
 800990a:	bf01      	itttt	eq
 800990c:	6819      	ldreq	r1, [r3, #0]
 800990e:	685b      	ldreq	r3, [r3, #4]
 8009910:	1809      	addeq	r1, r1, r0
 8009912:	6021      	streq	r1, [r4, #0]
 8009914:	e7ed      	b.n	80098f2 <_free_r+0x1e>
 8009916:	461a      	mov	r2, r3
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	b10b      	cbz	r3, 8009920 <_free_r+0x4c>
 800991c:	42a3      	cmp	r3, r4
 800991e:	d9fa      	bls.n	8009916 <_free_r+0x42>
 8009920:	6811      	ldr	r1, [r2, #0]
 8009922:	1850      	adds	r0, r2, r1
 8009924:	42a0      	cmp	r0, r4
 8009926:	d10b      	bne.n	8009940 <_free_r+0x6c>
 8009928:	6820      	ldr	r0, [r4, #0]
 800992a:	4401      	add	r1, r0
 800992c:	1850      	adds	r0, r2, r1
 800992e:	4283      	cmp	r3, r0
 8009930:	6011      	str	r1, [r2, #0]
 8009932:	d1e0      	bne.n	80098f6 <_free_r+0x22>
 8009934:	6818      	ldr	r0, [r3, #0]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	4401      	add	r1, r0
 800993a:	6011      	str	r1, [r2, #0]
 800993c:	6053      	str	r3, [r2, #4]
 800993e:	e7da      	b.n	80098f6 <_free_r+0x22>
 8009940:	d902      	bls.n	8009948 <_free_r+0x74>
 8009942:	230c      	movs	r3, #12
 8009944:	602b      	str	r3, [r5, #0]
 8009946:	e7d6      	b.n	80098f6 <_free_r+0x22>
 8009948:	6820      	ldr	r0, [r4, #0]
 800994a:	1821      	adds	r1, r4, r0
 800994c:	428b      	cmp	r3, r1
 800994e:	bf01      	itttt	eq
 8009950:	6819      	ldreq	r1, [r3, #0]
 8009952:	685b      	ldreq	r3, [r3, #4]
 8009954:	1809      	addeq	r1, r1, r0
 8009956:	6021      	streq	r1, [r4, #0]
 8009958:	6063      	str	r3, [r4, #4]
 800995a:	6054      	str	r4, [r2, #4]
 800995c:	e7cb      	b.n	80098f6 <_free_r+0x22>
 800995e:	bd38      	pop	{r3, r4, r5, pc}
 8009960:	2000044c 	.word	0x2000044c

08009964 <sbrk_aligned>:
 8009964:	b570      	push	{r4, r5, r6, lr}
 8009966:	4e0e      	ldr	r6, [pc, #56]	; (80099a0 <sbrk_aligned+0x3c>)
 8009968:	460c      	mov	r4, r1
 800996a:	6831      	ldr	r1, [r6, #0]
 800996c:	4605      	mov	r5, r0
 800996e:	b911      	cbnz	r1, 8009976 <sbrk_aligned+0x12>
 8009970:	f000 f9ee 	bl	8009d50 <_sbrk_r>
 8009974:	6030      	str	r0, [r6, #0]
 8009976:	4621      	mov	r1, r4
 8009978:	4628      	mov	r0, r5
 800997a:	f000 f9e9 	bl	8009d50 <_sbrk_r>
 800997e:	1c43      	adds	r3, r0, #1
 8009980:	d00a      	beq.n	8009998 <sbrk_aligned+0x34>
 8009982:	1cc4      	adds	r4, r0, #3
 8009984:	f024 0403 	bic.w	r4, r4, #3
 8009988:	42a0      	cmp	r0, r4
 800998a:	d007      	beq.n	800999c <sbrk_aligned+0x38>
 800998c:	1a21      	subs	r1, r4, r0
 800998e:	4628      	mov	r0, r5
 8009990:	f000 f9de 	bl	8009d50 <_sbrk_r>
 8009994:	3001      	adds	r0, #1
 8009996:	d101      	bne.n	800999c <sbrk_aligned+0x38>
 8009998:	f04f 34ff 	mov.w	r4, #4294967295
 800999c:	4620      	mov	r0, r4
 800999e:	bd70      	pop	{r4, r5, r6, pc}
 80099a0:	20000450 	.word	0x20000450

080099a4 <_malloc_r>:
 80099a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099a8:	1ccd      	adds	r5, r1, #3
 80099aa:	f025 0503 	bic.w	r5, r5, #3
 80099ae:	3508      	adds	r5, #8
 80099b0:	2d0c      	cmp	r5, #12
 80099b2:	bf38      	it	cc
 80099b4:	250c      	movcc	r5, #12
 80099b6:	2d00      	cmp	r5, #0
 80099b8:	4607      	mov	r7, r0
 80099ba:	db01      	blt.n	80099c0 <_malloc_r+0x1c>
 80099bc:	42a9      	cmp	r1, r5
 80099be:	d905      	bls.n	80099cc <_malloc_r+0x28>
 80099c0:	230c      	movs	r3, #12
 80099c2:	2600      	movs	r6, #0
 80099c4:	603b      	str	r3, [r7, #0]
 80099c6:	4630      	mov	r0, r6
 80099c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099cc:	4e2e      	ldr	r6, [pc, #184]	; (8009a88 <_malloc_r+0xe4>)
 80099ce:	f000 fa3b 	bl	8009e48 <__malloc_lock>
 80099d2:	6833      	ldr	r3, [r6, #0]
 80099d4:	461c      	mov	r4, r3
 80099d6:	bb34      	cbnz	r4, 8009a26 <_malloc_r+0x82>
 80099d8:	4629      	mov	r1, r5
 80099da:	4638      	mov	r0, r7
 80099dc:	f7ff ffc2 	bl	8009964 <sbrk_aligned>
 80099e0:	1c43      	adds	r3, r0, #1
 80099e2:	4604      	mov	r4, r0
 80099e4:	d14d      	bne.n	8009a82 <_malloc_r+0xde>
 80099e6:	6834      	ldr	r4, [r6, #0]
 80099e8:	4626      	mov	r6, r4
 80099ea:	2e00      	cmp	r6, #0
 80099ec:	d140      	bne.n	8009a70 <_malloc_r+0xcc>
 80099ee:	6823      	ldr	r3, [r4, #0]
 80099f0:	4631      	mov	r1, r6
 80099f2:	4638      	mov	r0, r7
 80099f4:	eb04 0803 	add.w	r8, r4, r3
 80099f8:	f000 f9aa 	bl	8009d50 <_sbrk_r>
 80099fc:	4580      	cmp	r8, r0
 80099fe:	d13a      	bne.n	8009a76 <_malloc_r+0xd2>
 8009a00:	6821      	ldr	r1, [r4, #0]
 8009a02:	3503      	adds	r5, #3
 8009a04:	1a6d      	subs	r5, r5, r1
 8009a06:	f025 0503 	bic.w	r5, r5, #3
 8009a0a:	3508      	adds	r5, #8
 8009a0c:	2d0c      	cmp	r5, #12
 8009a0e:	bf38      	it	cc
 8009a10:	250c      	movcc	r5, #12
 8009a12:	4638      	mov	r0, r7
 8009a14:	4629      	mov	r1, r5
 8009a16:	f7ff ffa5 	bl	8009964 <sbrk_aligned>
 8009a1a:	3001      	adds	r0, #1
 8009a1c:	d02b      	beq.n	8009a76 <_malloc_r+0xd2>
 8009a1e:	6823      	ldr	r3, [r4, #0]
 8009a20:	442b      	add	r3, r5
 8009a22:	6023      	str	r3, [r4, #0]
 8009a24:	e00e      	b.n	8009a44 <_malloc_r+0xa0>
 8009a26:	6822      	ldr	r2, [r4, #0]
 8009a28:	1b52      	subs	r2, r2, r5
 8009a2a:	d41e      	bmi.n	8009a6a <_malloc_r+0xc6>
 8009a2c:	2a0b      	cmp	r2, #11
 8009a2e:	d916      	bls.n	8009a5e <_malloc_r+0xba>
 8009a30:	1961      	adds	r1, r4, r5
 8009a32:	42a3      	cmp	r3, r4
 8009a34:	6025      	str	r5, [r4, #0]
 8009a36:	bf18      	it	ne
 8009a38:	6059      	strne	r1, [r3, #4]
 8009a3a:	6863      	ldr	r3, [r4, #4]
 8009a3c:	bf08      	it	eq
 8009a3e:	6031      	streq	r1, [r6, #0]
 8009a40:	5162      	str	r2, [r4, r5]
 8009a42:	604b      	str	r3, [r1, #4]
 8009a44:	4638      	mov	r0, r7
 8009a46:	f104 060b 	add.w	r6, r4, #11
 8009a4a:	f000 fa03 	bl	8009e54 <__malloc_unlock>
 8009a4e:	f026 0607 	bic.w	r6, r6, #7
 8009a52:	1d23      	adds	r3, r4, #4
 8009a54:	1af2      	subs	r2, r6, r3
 8009a56:	d0b6      	beq.n	80099c6 <_malloc_r+0x22>
 8009a58:	1b9b      	subs	r3, r3, r6
 8009a5a:	50a3      	str	r3, [r4, r2]
 8009a5c:	e7b3      	b.n	80099c6 <_malloc_r+0x22>
 8009a5e:	6862      	ldr	r2, [r4, #4]
 8009a60:	42a3      	cmp	r3, r4
 8009a62:	bf0c      	ite	eq
 8009a64:	6032      	streq	r2, [r6, #0]
 8009a66:	605a      	strne	r2, [r3, #4]
 8009a68:	e7ec      	b.n	8009a44 <_malloc_r+0xa0>
 8009a6a:	4623      	mov	r3, r4
 8009a6c:	6864      	ldr	r4, [r4, #4]
 8009a6e:	e7b2      	b.n	80099d6 <_malloc_r+0x32>
 8009a70:	4634      	mov	r4, r6
 8009a72:	6876      	ldr	r6, [r6, #4]
 8009a74:	e7b9      	b.n	80099ea <_malloc_r+0x46>
 8009a76:	230c      	movs	r3, #12
 8009a78:	4638      	mov	r0, r7
 8009a7a:	603b      	str	r3, [r7, #0]
 8009a7c:	f000 f9ea 	bl	8009e54 <__malloc_unlock>
 8009a80:	e7a1      	b.n	80099c6 <_malloc_r+0x22>
 8009a82:	6025      	str	r5, [r4, #0]
 8009a84:	e7de      	b.n	8009a44 <_malloc_r+0xa0>
 8009a86:	bf00      	nop
 8009a88:	2000044c 	.word	0x2000044c

08009a8c <__ssputs_r>:
 8009a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a90:	688e      	ldr	r6, [r1, #8]
 8009a92:	4682      	mov	sl, r0
 8009a94:	429e      	cmp	r6, r3
 8009a96:	460c      	mov	r4, r1
 8009a98:	4690      	mov	r8, r2
 8009a9a:	461f      	mov	r7, r3
 8009a9c:	d838      	bhi.n	8009b10 <__ssputs_r+0x84>
 8009a9e:	898a      	ldrh	r2, [r1, #12]
 8009aa0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009aa4:	d032      	beq.n	8009b0c <__ssputs_r+0x80>
 8009aa6:	6825      	ldr	r5, [r4, #0]
 8009aa8:	6909      	ldr	r1, [r1, #16]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	eba5 0901 	sub.w	r9, r5, r1
 8009ab0:	6965      	ldr	r5, [r4, #20]
 8009ab2:	444b      	add	r3, r9
 8009ab4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ab8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009abc:	106d      	asrs	r5, r5, #1
 8009abe:	429d      	cmp	r5, r3
 8009ac0:	bf38      	it	cc
 8009ac2:	461d      	movcc	r5, r3
 8009ac4:	0553      	lsls	r3, r2, #21
 8009ac6:	d531      	bpl.n	8009b2c <__ssputs_r+0xa0>
 8009ac8:	4629      	mov	r1, r5
 8009aca:	f7ff ff6b 	bl	80099a4 <_malloc_r>
 8009ace:	4606      	mov	r6, r0
 8009ad0:	b950      	cbnz	r0, 8009ae8 <__ssputs_r+0x5c>
 8009ad2:	230c      	movs	r3, #12
 8009ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad8:	f8ca 3000 	str.w	r3, [sl]
 8009adc:	89a3      	ldrh	r3, [r4, #12]
 8009ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ae2:	81a3      	strh	r3, [r4, #12]
 8009ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ae8:	464a      	mov	r2, r9
 8009aea:	6921      	ldr	r1, [r4, #16]
 8009aec:	f7ff fa18 	bl	8008f20 <memcpy>
 8009af0:	89a3      	ldrh	r3, [r4, #12]
 8009af2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009afa:	81a3      	strh	r3, [r4, #12]
 8009afc:	6126      	str	r6, [r4, #16]
 8009afe:	444e      	add	r6, r9
 8009b00:	6026      	str	r6, [r4, #0]
 8009b02:	463e      	mov	r6, r7
 8009b04:	6165      	str	r5, [r4, #20]
 8009b06:	eba5 0509 	sub.w	r5, r5, r9
 8009b0a:	60a5      	str	r5, [r4, #8]
 8009b0c:	42be      	cmp	r6, r7
 8009b0e:	d900      	bls.n	8009b12 <__ssputs_r+0x86>
 8009b10:	463e      	mov	r6, r7
 8009b12:	4632      	mov	r2, r6
 8009b14:	4641      	mov	r1, r8
 8009b16:	6820      	ldr	r0, [r4, #0]
 8009b18:	f000 f97c 	bl	8009e14 <memmove>
 8009b1c:	68a3      	ldr	r3, [r4, #8]
 8009b1e:	2000      	movs	r0, #0
 8009b20:	1b9b      	subs	r3, r3, r6
 8009b22:	60a3      	str	r3, [r4, #8]
 8009b24:	6823      	ldr	r3, [r4, #0]
 8009b26:	4433      	add	r3, r6
 8009b28:	6023      	str	r3, [r4, #0]
 8009b2a:	e7db      	b.n	8009ae4 <__ssputs_r+0x58>
 8009b2c:	462a      	mov	r2, r5
 8009b2e:	f000 f997 	bl	8009e60 <_realloc_r>
 8009b32:	4606      	mov	r6, r0
 8009b34:	2800      	cmp	r0, #0
 8009b36:	d1e1      	bne.n	8009afc <__ssputs_r+0x70>
 8009b38:	4650      	mov	r0, sl
 8009b3a:	6921      	ldr	r1, [r4, #16]
 8009b3c:	f7ff feca 	bl	80098d4 <_free_r>
 8009b40:	e7c7      	b.n	8009ad2 <__ssputs_r+0x46>
	...

08009b44 <_svfiprintf_r>:
 8009b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b48:	4698      	mov	r8, r3
 8009b4a:	898b      	ldrh	r3, [r1, #12]
 8009b4c:	4607      	mov	r7, r0
 8009b4e:	061b      	lsls	r3, r3, #24
 8009b50:	460d      	mov	r5, r1
 8009b52:	4614      	mov	r4, r2
 8009b54:	b09d      	sub	sp, #116	; 0x74
 8009b56:	d50e      	bpl.n	8009b76 <_svfiprintf_r+0x32>
 8009b58:	690b      	ldr	r3, [r1, #16]
 8009b5a:	b963      	cbnz	r3, 8009b76 <_svfiprintf_r+0x32>
 8009b5c:	2140      	movs	r1, #64	; 0x40
 8009b5e:	f7ff ff21 	bl	80099a4 <_malloc_r>
 8009b62:	6028      	str	r0, [r5, #0]
 8009b64:	6128      	str	r0, [r5, #16]
 8009b66:	b920      	cbnz	r0, 8009b72 <_svfiprintf_r+0x2e>
 8009b68:	230c      	movs	r3, #12
 8009b6a:	603b      	str	r3, [r7, #0]
 8009b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b70:	e0d1      	b.n	8009d16 <_svfiprintf_r+0x1d2>
 8009b72:	2340      	movs	r3, #64	; 0x40
 8009b74:	616b      	str	r3, [r5, #20]
 8009b76:	2300      	movs	r3, #0
 8009b78:	9309      	str	r3, [sp, #36]	; 0x24
 8009b7a:	2320      	movs	r3, #32
 8009b7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b80:	2330      	movs	r3, #48	; 0x30
 8009b82:	f04f 0901 	mov.w	r9, #1
 8009b86:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009d30 <_svfiprintf_r+0x1ec>
 8009b8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b92:	4623      	mov	r3, r4
 8009b94:	469a      	mov	sl, r3
 8009b96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b9a:	b10a      	cbz	r2, 8009ba0 <_svfiprintf_r+0x5c>
 8009b9c:	2a25      	cmp	r2, #37	; 0x25
 8009b9e:	d1f9      	bne.n	8009b94 <_svfiprintf_r+0x50>
 8009ba0:	ebba 0b04 	subs.w	fp, sl, r4
 8009ba4:	d00b      	beq.n	8009bbe <_svfiprintf_r+0x7a>
 8009ba6:	465b      	mov	r3, fp
 8009ba8:	4622      	mov	r2, r4
 8009baa:	4629      	mov	r1, r5
 8009bac:	4638      	mov	r0, r7
 8009bae:	f7ff ff6d 	bl	8009a8c <__ssputs_r>
 8009bb2:	3001      	adds	r0, #1
 8009bb4:	f000 80aa 	beq.w	8009d0c <_svfiprintf_r+0x1c8>
 8009bb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bba:	445a      	add	r2, fp
 8009bbc:	9209      	str	r2, [sp, #36]	; 0x24
 8009bbe:	f89a 3000 	ldrb.w	r3, [sl]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	f000 80a2 	beq.w	8009d0c <_svfiprintf_r+0x1c8>
 8009bc8:	2300      	movs	r3, #0
 8009bca:	f04f 32ff 	mov.w	r2, #4294967295
 8009bce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bd2:	f10a 0a01 	add.w	sl, sl, #1
 8009bd6:	9304      	str	r3, [sp, #16]
 8009bd8:	9307      	str	r3, [sp, #28]
 8009bda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bde:	931a      	str	r3, [sp, #104]	; 0x68
 8009be0:	4654      	mov	r4, sl
 8009be2:	2205      	movs	r2, #5
 8009be4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009be8:	4851      	ldr	r0, [pc, #324]	; (8009d30 <_svfiprintf_r+0x1ec>)
 8009bea:	f7ff f98b 	bl	8008f04 <memchr>
 8009bee:	9a04      	ldr	r2, [sp, #16]
 8009bf0:	b9d8      	cbnz	r0, 8009c2a <_svfiprintf_r+0xe6>
 8009bf2:	06d0      	lsls	r0, r2, #27
 8009bf4:	bf44      	itt	mi
 8009bf6:	2320      	movmi	r3, #32
 8009bf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bfc:	0711      	lsls	r1, r2, #28
 8009bfe:	bf44      	itt	mi
 8009c00:	232b      	movmi	r3, #43	; 0x2b
 8009c02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c06:	f89a 3000 	ldrb.w	r3, [sl]
 8009c0a:	2b2a      	cmp	r3, #42	; 0x2a
 8009c0c:	d015      	beq.n	8009c3a <_svfiprintf_r+0xf6>
 8009c0e:	4654      	mov	r4, sl
 8009c10:	2000      	movs	r0, #0
 8009c12:	f04f 0c0a 	mov.w	ip, #10
 8009c16:	9a07      	ldr	r2, [sp, #28]
 8009c18:	4621      	mov	r1, r4
 8009c1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c1e:	3b30      	subs	r3, #48	; 0x30
 8009c20:	2b09      	cmp	r3, #9
 8009c22:	d94e      	bls.n	8009cc2 <_svfiprintf_r+0x17e>
 8009c24:	b1b0      	cbz	r0, 8009c54 <_svfiprintf_r+0x110>
 8009c26:	9207      	str	r2, [sp, #28]
 8009c28:	e014      	b.n	8009c54 <_svfiprintf_r+0x110>
 8009c2a:	eba0 0308 	sub.w	r3, r0, r8
 8009c2e:	fa09 f303 	lsl.w	r3, r9, r3
 8009c32:	4313      	orrs	r3, r2
 8009c34:	46a2      	mov	sl, r4
 8009c36:	9304      	str	r3, [sp, #16]
 8009c38:	e7d2      	b.n	8009be0 <_svfiprintf_r+0x9c>
 8009c3a:	9b03      	ldr	r3, [sp, #12]
 8009c3c:	1d19      	adds	r1, r3, #4
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	9103      	str	r1, [sp, #12]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	bfbb      	ittet	lt
 8009c46:	425b      	neglt	r3, r3
 8009c48:	f042 0202 	orrlt.w	r2, r2, #2
 8009c4c:	9307      	strge	r3, [sp, #28]
 8009c4e:	9307      	strlt	r3, [sp, #28]
 8009c50:	bfb8      	it	lt
 8009c52:	9204      	strlt	r2, [sp, #16]
 8009c54:	7823      	ldrb	r3, [r4, #0]
 8009c56:	2b2e      	cmp	r3, #46	; 0x2e
 8009c58:	d10c      	bne.n	8009c74 <_svfiprintf_r+0x130>
 8009c5a:	7863      	ldrb	r3, [r4, #1]
 8009c5c:	2b2a      	cmp	r3, #42	; 0x2a
 8009c5e:	d135      	bne.n	8009ccc <_svfiprintf_r+0x188>
 8009c60:	9b03      	ldr	r3, [sp, #12]
 8009c62:	3402      	adds	r4, #2
 8009c64:	1d1a      	adds	r2, r3, #4
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	9203      	str	r2, [sp, #12]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	bfb8      	it	lt
 8009c6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c72:	9305      	str	r3, [sp, #20]
 8009c74:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009d34 <_svfiprintf_r+0x1f0>
 8009c78:	2203      	movs	r2, #3
 8009c7a:	4650      	mov	r0, sl
 8009c7c:	7821      	ldrb	r1, [r4, #0]
 8009c7e:	f7ff f941 	bl	8008f04 <memchr>
 8009c82:	b140      	cbz	r0, 8009c96 <_svfiprintf_r+0x152>
 8009c84:	2340      	movs	r3, #64	; 0x40
 8009c86:	eba0 000a 	sub.w	r0, r0, sl
 8009c8a:	fa03 f000 	lsl.w	r0, r3, r0
 8009c8e:	9b04      	ldr	r3, [sp, #16]
 8009c90:	3401      	adds	r4, #1
 8009c92:	4303      	orrs	r3, r0
 8009c94:	9304      	str	r3, [sp, #16]
 8009c96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c9a:	2206      	movs	r2, #6
 8009c9c:	4826      	ldr	r0, [pc, #152]	; (8009d38 <_svfiprintf_r+0x1f4>)
 8009c9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ca2:	f7ff f92f 	bl	8008f04 <memchr>
 8009ca6:	2800      	cmp	r0, #0
 8009ca8:	d038      	beq.n	8009d1c <_svfiprintf_r+0x1d8>
 8009caa:	4b24      	ldr	r3, [pc, #144]	; (8009d3c <_svfiprintf_r+0x1f8>)
 8009cac:	bb1b      	cbnz	r3, 8009cf6 <_svfiprintf_r+0x1b2>
 8009cae:	9b03      	ldr	r3, [sp, #12]
 8009cb0:	3307      	adds	r3, #7
 8009cb2:	f023 0307 	bic.w	r3, r3, #7
 8009cb6:	3308      	adds	r3, #8
 8009cb8:	9303      	str	r3, [sp, #12]
 8009cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cbc:	4433      	add	r3, r6
 8009cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8009cc0:	e767      	b.n	8009b92 <_svfiprintf_r+0x4e>
 8009cc2:	460c      	mov	r4, r1
 8009cc4:	2001      	movs	r0, #1
 8009cc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cca:	e7a5      	b.n	8009c18 <_svfiprintf_r+0xd4>
 8009ccc:	2300      	movs	r3, #0
 8009cce:	f04f 0c0a 	mov.w	ip, #10
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	3401      	adds	r4, #1
 8009cd6:	9305      	str	r3, [sp, #20]
 8009cd8:	4620      	mov	r0, r4
 8009cda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cde:	3a30      	subs	r2, #48	; 0x30
 8009ce0:	2a09      	cmp	r2, #9
 8009ce2:	d903      	bls.n	8009cec <_svfiprintf_r+0x1a8>
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d0c5      	beq.n	8009c74 <_svfiprintf_r+0x130>
 8009ce8:	9105      	str	r1, [sp, #20]
 8009cea:	e7c3      	b.n	8009c74 <_svfiprintf_r+0x130>
 8009cec:	4604      	mov	r4, r0
 8009cee:	2301      	movs	r3, #1
 8009cf0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cf4:	e7f0      	b.n	8009cd8 <_svfiprintf_r+0x194>
 8009cf6:	ab03      	add	r3, sp, #12
 8009cf8:	9300      	str	r3, [sp, #0]
 8009cfa:	462a      	mov	r2, r5
 8009cfc:	4638      	mov	r0, r7
 8009cfe:	4b10      	ldr	r3, [pc, #64]	; (8009d40 <_svfiprintf_r+0x1fc>)
 8009d00:	a904      	add	r1, sp, #16
 8009d02:	f7fc fc49 	bl	8006598 <_printf_float>
 8009d06:	1c42      	adds	r2, r0, #1
 8009d08:	4606      	mov	r6, r0
 8009d0a:	d1d6      	bne.n	8009cba <_svfiprintf_r+0x176>
 8009d0c:	89ab      	ldrh	r3, [r5, #12]
 8009d0e:	065b      	lsls	r3, r3, #25
 8009d10:	f53f af2c 	bmi.w	8009b6c <_svfiprintf_r+0x28>
 8009d14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d16:	b01d      	add	sp, #116	; 0x74
 8009d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d1c:	ab03      	add	r3, sp, #12
 8009d1e:	9300      	str	r3, [sp, #0]
 8009d20:	462a      	mov	r2, r5
 8009d22:	4638      	mov	r0, r7
 8009d24:	4b06      	ldr	r3, [pc, #24]	; (8009d40 <_svfiprintf_r+0x1fc>)
 8009d26:	a904      	add	r1, sp, #16
 8009d28:	f7fc fed2 	bl	8006ad0 <_printf_i>
 8009d2c:	e7eb      	b.n	8009d06 <_svfiprintf_r+0x1c2>
 8009d2e:	bf00      	nop
 8009d30:	0800addc 	.word	0x0800addc
 8009d34:	0800ade2 	.word	0x0800ade2
 8009d38:	0800ade6 	.word	0x0800ade6
 8009d3c:	08006599 	.word	0x08006599
 8009d40:	08009a8d 	.word	0x08009a8d

08009d44 <nan>:
 8009d44:	2000      	movs	r0, #0
 8009d46:	4901      	ldr	r1, [pc, #4]	; (8009d4c <nan+0x8>)
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop
 8009d4c:	7ff80000 	.word	0x7ff80000

08009d50 <_sbrk_r>:
 8009d50:	b538      	push	{r3, r4, r5, lr}
 8009d52:	2300      	movs	r3, #0
 8009d54:	4d05      	ldr	r5, [pc, #20]	; (8009d6c <_sbrk_r+0x1c>)
 8009d56:	4604      	mov	r4, r0
 8009d58:	4608      	mov	r0, r1
 8009d5a:	602b      	str	r3, [r5, #0]
 8009d5c:	f7f8 fd60 	bl	8002820 <_sbrk>
 8009d60:	1c43      	adds	r3, r0, #1
 8009d62:	d102      	bne.n	8009d6a <_sbrk_r+0x1a>
 8009d64:	682b      	ldr	r3, [r5, #0]
 8009d66:	b103      	cbz	r3, 8009d6a <_sbrk_r+0x1a>
 8009d68:	6023      	str	r3, [r4, #0]
 8009d6a:	bd38      	pop	{r3, r4, r5, pc}
 8009d6c:	20000454 	.word	0x20000454

08009d70 <strncmp>:
 8009d70:	4603      	mov	r3, r0
 8009d72:	b510      	push	{r4, lr}
 8009d74:	b172      	cbz	r2, 8009d94 <strncmp+0x24>
 8009d76:	3901      	subs	r1, #1
 8009d78:	1884      	adds	r4, r0, r2
 8009d7a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009d7e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009d82:	4290      	cmp	r0, r2
 8009d84:	d101      	bne.n	8009d8a <strncmp+0x1a>
 8009d86:	42a3      	cmp	r3, r4
 8009d88:	d101      	bne.n	8009d8e <strncmp+0x1e>
 8009d8a:	1a80      	subs	r0, r0, r2
 8009d8c:	bd10      	pop	{r4, pc}
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	d1f3      	bne.n	8009d7a <strncmp+0xa>
 8009d92:	e7fa      	b.n	8009d8a <strncmp+0x1a>
 8009d94:	4610      	mov	r0, r2
 8009d96:	e7f9      	b.n	8009d8c <strncmp+0x1c>

08009d98 <__ascii_wctomb>:
 8009d98:	4603      	mov	r3, r0
 8009d9a:	4608      	mov	r0, r1
 8009d9c:	b141      	cbz	r1, 8009db0 <__ascii_wctomb+0x18>
 8009d9e:	2aff      	cmp	r2, #255	; 0xff
 8009da0:	d904      	bls.n	8009dac <__ascii_wctomb+0x14>
 8009da2:	228a      	movs	r2, #138	; 0x8a
 8009da4:	f04f 30ff 	mov.w	r0, #4294967295
 8009da8:	601a      	str	r2, [r3, #0]
 8009daa:	4770      	bx	lr
 8009dac:	2001      	movs	r0, #1
 8009dae:	700a      	strb	r2, [r1, #0]
 8009db0:	4770      	bx	lr
	...

08009db4 <__assert_func>:
 8009db4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009db6:	4614      	mov	r4, r2
 8009db8:	461a      	mov	r2, r3
 8009dba:	4b09      	ldr	r3, [pc, #36]	; (8009de0 <__assert_func+0x2c>)
 8009dbc:	4605      	mov	r5, r0
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	68d8      	ldr	r0, [r3, #12]
 8009dc2:	b14c      	cbz	r4, 8009dd8 <__assert_func+0x24>
 8009dc4:	4b07      	ldr	r3, [pc, #28]	; (8009de4 <__assert_func+0x30>)
 8009dc6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009dca:	9100      	str	r1, [sp, #0]
 8009dcc:	462b      	mov	r3, r5
 8009dce:	4906      	ldr	r1, [pc, #24]	; (8009de8 <__assert_func+0x34>)
 8009dd0:	f000 f80e 	bl	8009df0 <fiprintf>
 8009dd4:	f000 fa8a 	bl	800a2ec <abort>
 8009dd8:	4b04      	ldr	r3, [pc, #16]	; (8009dec <__assert_func+0x38>)
 8009dda:	461c      	mov	r4, r3
 8009ddc:	e7f3      	b.n	8009dc6 <__assert_func+0x12>
 8009dde:	bf00      	nop
 8009de0:	20000040 	.word	0x20000040
 8009de4:	0800aded 	.word	0x0800aded
 8009de8:	0800adfa 	.word	0x0800adfa
 8009dec:	0800ae28 	.word	0x0800ae28

08009df0 <fiprintf>:
 8009df0:	b40e      	push	{r1, r2, r3}
 8009df2:	b503      	push	{r0, r1, lr}
 8009df4:	4601      	mov	r1, r0
 8009df6:	ab03      	add	r3, sp, #12
 8009df8:	4805      	ldr	r0, [pc, #20]	; (8009e10 <fiprintf+0x20>)
 8009dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dfe:	6800      	ldr	r0, [r0, #0]
 8009e00:	9301      	str	r3, [sp, #4]
 8009e02:	f000 f883 	bl	8009f0c <_vfiprintf_r>
 8009e06:	b002      	add	sp, #8
 8009e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e0c:	b003      	add	sp, #12
 8009e0e:	4770      	bx	lr
 8009e10:	20000040 	.word	0x20000040

08009e14 <memmove>:
 8009e14:	4288      	cmp	r0, r1
 8009e16:	b510      	push	{r4, lr}
 8009e18:	eb01 0402 	add.w	r4, r1, r2
 8009e1c:	d902      	bls.n	8009e24 <memmove+0x10>
 8009e1e:	4284      	cmp	r4, r0
 8009e20:	4623      	mov	r3, r4
 8009e22:	d807      	bhi.n	8009e34 <memmove+0x20>
 8009e24:	1e43      	subs	r3, r0, #1
 8009e26:	42a1      	cmp	r1, r4
 8009e28:	d008      	beq.n	8009e3c <memmove+0x28>
 8009e2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e32:	e7f8      	b.n	8009e26 <memmove+0x12>
 8009e34:	4601      	mov	r1, r0
 8009e36:	4402      	add	r2, r0
 8009e38:	428a      	cmp	r2, r1
 8009e3a:	d100      	bne.n	8009e3e <memmove+0x2a>
 8009e3c:	bd10      	pop	{r4, pc}
 8009e3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e46:	e7f7      	b.n	8009e38 <memmove+0x24>

08009e48 <__malloc_lock>:
 8009e48:	4801      	ldr	r0, [pc, #4]	; (8009e50 <__malloc_lock+0x8>)
 8009e4a:	f000 bc0b 	b.w	800a664 <__retarget_lock_acquire_recursive>
 8009e4e:	bf00      	nop
 8009e50:	20000458 	.word	0x20000458

08009e54 <__malloc_unlock>:
 8009e54:	4801      	ldr	r0, [pc, #4]	; (8009e5c <__malloc_unlock+0x8>)
 8009e56:	f000 bc06 	b.w	800a666 <__retarget_lock_release_recursive>
 8009e5a:	bf00      	nop
 8009e5c:	20000458 	.word	0x20000458

08009e60 <_realloc_r>:
 8009e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e64:	4680      	mov	r8, r0
 8009e66:	4614      	mov	r4, r2
 8009e68:	460e      	mov	r6, r1
 8009e6a:	b921      	cbnz	r1, 8009e76 <_realloc_r+0x16>
 8009e6c:	4611      	mov	r1, r2
 8009e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e72:	f7ff bd97 	b.w	80099a4 <_malloc_r>
 8009e76:	b92a      	cbnz	r2, 8009e84 <_realloc_r+0x24>
 8009e78:	f7ff fd2c 	bl	80098d4 <_free_r>
 8009e7c:	4625      	mov	r5, r4
 8009e7e:	4628      	mov	r0, r5
 8009e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e84:	f000 fc56 	bl	800a734 <_malloc_usable_size_r>
 8009e88:	4284      	cmp	r4, r0
 8009e8a:	4607      	mov	r7, r0
 8009e8c:	d802      	bhi.n	8009e94 <_realloc_r+0x34>
 8009e8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e92:	d812      	bhi.n	8009eba <_realloc_r+0x5a>
 8009e94:	4621      	mov	r1, r4
 8009e96:	4640      	mov	r0, r8
 8009e98:	f7ff fd84 	bl	80099a4 <_malloc_r>
 8009e9c:	4605      	mov	r5, r0
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	d0ed      	beq.n	8009e7e <_realloc_r+0x1e>
 8009ea2:	42bc      	cmp	r4, r7
 8009ea4:	4622      	mov	r2, r4
 8009ea6:	4631      	mov	r1, r6
 8009ea8:	bf28      	it	cs
 8009eaa:	463a      	movcs	r2, r7
 8009eac:	f7ff f838 	bl	8008f20 <memcpy>
 8009eb0:	4631      	mov	r1, r6
 8009eb2:	4640      	mov	r0, r8
 8009eb4:	f7ff fd0e 	bl	80098d4 <_free_r>
 8009eb8:	e7e1      	b.n	8009e7e <_realloc_r+0x1e>
 8009eba:	4635      	mov	r5, r6
 8009ebc:	e7df      	b.n	8009e7e <_realloc_r+0x1e>

08009ebe <__sfputc_r>:
 8009ebe:	6893      	ldr	r3, [r2, #8]
 8009ec0:	b410      	push	{r4}
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	6093      	str	r3, [r2, #8]
 8009ec8:	da07      	bge.n	8009eda <__sfputc_r+0x1c>
 8009eca:	6994      	ldr	r4, [r2, #24]
 8009ecc:	42a3      	cmp	r3, r4
 8009ece:	db01      	blt.n	8009ed4 <__sfputc_r+0x16>
 8009ed0:	290a      	cmp	r1, #10
 8009ed2:	d102      	bne.n	8009eda <__sfputc_r+0x1c>
 8009ed4:	bc10      	pop	{r4}
 8009ed6:	f000 b949 	b.w	800a16c <__swbuf_r>
 8009eda:	6813      	ldr	r3, [r2, #0]
 8009edc:	1c58      	adds	r0, r3, #1
 8009ede:	6010      	str	r0, [r2, #0]
 8009ee0:	7019      	strb	r1, [r3, #0]
 8009ee2:	4608      	mov	r0, r1
 8009ee4:	bc10      	pop	{r4}
 8009ee6:	4770      	bx	lr

08009ee8 <__sfputs_r>:
 8009ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eea:	4606      	mov	r6, r0
 8009eec:	460f      	mov	r7, r1
 8009eee:	4614      	mov	r4, r2
 8009ef0:	18d5      	adds	r5, r2, r3
 8009ef2:	42ac      	cmp	r4, r5
 8009ef4:	d101      	bne.n	8009efa <__sfputs_r+0x12>
 8009ef6:	2000      	movs	r0, #0
 8009ef8:	e007      	b.n	8009f0a <__sfputs_r+0x22>
 8009efa:	463a      	mov	r2, r7
 8009efc:	4630      	mov	r0, r6
 8009efe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f02:	f7ff ffdc 	bl	8009ebe <__sfputc_r>
 8009f06:	1c43      	adds	r3, r0, #1
 8009f08:	d1f3      	bne.n	8009ef2 <__sfputs_r+0xa>
 8009f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009f0c <_vfiprintf_r>:
 8009f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f10:	460d      	mov	r5, r1
 8009f12:	4614      	mov	r4, r2
 8009f14:	4698      	mov	r8, r3
 8009f16:	4606      	mov	r6, r0
 8009f18:	b09d      	sub	sp, #116	; 0x74
 8009f1a:	b118      	cbz	r0, 8009f24 <_vfiprintf_r+0x18>
 8009f1c:	6983      	ldr	r3, [r0, #24]
 8009f1e:	b90b      	cbnz	r3, 8009f24 <_vfiprintf_r+0x18>
 8009f20:	f000 fb02 	bl	800a528 <__sinit>
 8009f24:	4b89      	ldr	r3, [pc, #548]	; (800a14c <_vfiprintf_r+0x240>)
 8009f26:	429d      	cmp	r5, r3
 8009f28:	d11b      	bne.n	8009f62 <_vfiprintf_r+0x56>
 8009f2a:	6875      	ldr	r5, [r6, #4]
 8009f2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f2e:	07d9      	lsls	r1, r3, #31
 8009f30:	d405      	bmi.n	8009f3e <_vfiprintf_r+0x32>
 8009f32:	89ab      	ldrh	r3, [r5, #12]
 8009f34:	059a      	lsls	r2, r3, #22
 8009f36:	d402      	bmi.n	8009f3e <_vfiprintf_r+0x32>
 8009f38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f3a:	f000 fb93 	bl	800a664 <__retarget_lock_acquire_recursive>
 8009f3e:	89ab      	ldrh	r3, [r5, #12]
 8009f40:	071b      	lsls	r3, r3, #28
 8009f42:	d501      	bpl.n	8009f48 <_vfiprintf_r+0x3c>
 8009f44:	692b      	ldr	r3, [r5, #16]
 8009f46:	b9eb      	cbnz	r3, 8009f84 <_vfiprintf_r+0x78>
 8009f48:	4629      	mov	r1, r5
 8009f4a:	4630      	mov	r0, r6
 8009f4c:	f000 f960 	bl	800a210 <__swsetup_r>
 8009f50:	b1c0      	cbz	r0, 8009f84 <_vfiprintf_r+0x78>
 8009f52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f54:	07dc      	lsls	r4, r3, #31
 8009f56:	d50e      	bpl.n	8009f76 <_vfiprintf_r+0x6a>
 8009f58:	f04f 30ff 	mov.w	r0, #4294967295
 8009f5c:	b01d      	add	sp, #116	; 0x74
 8009f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f62:	4b7b      	ldr	r3, [pc, #492]	; (800a150 <_vfiprintf_r+0x244>)
 8009f64:	429d      	cmp	r5, r3
 8009f66:	d101      	bne.n	8009f6c <_vfiprintf_r+0x60>
 8009f68:	68b5      	ldr	r5, [r6, #8]
 8009f6a:	e7df      	b.n	8009f2c <_vfiprintf_r+0x20>
 8009f6c:	4b79      	ldr	r3, [pc, #484]	; (800a154 <_vfiprintf_r+0x248>)
 8009f6e:	429d      	cmp	r5, r3
 8009f70:	bf08      	it	eq
 8009f72:	68f5      	ldreq	r5, [r6, #12]
 8009f74:	e7da      	b.n	8009f2c <_vfiprintf_r+0x20>
 8009f76:	89ab      	ldrh	r3, [r5, #12]
 8009f78:	0598      	lsls	r0, r3, #22
 8009f7a:	d4ed      	bmi.n	8009f58 <_vfiprintf_r+0x4c>
 8009f7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f7e:	f000 fb72 	bl	800a666 <__retarget_lock_release_recursive>
 8009f82:	e7e9      	b.n	8009f58 <_vfiprintf_r+0x4c>
 8009f84:	2300      	movs	r3, #0
 8009f86:	9309      	str	r3, [sp, #36]	; 0x24
 8009f88:	2320      	movs	r3, #32
 8009f8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f8e:	2330      	movs	r3, #48	; 0x30
 8009f90:	f04f 0901 	mov.w	r9, #1
 8009f94:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f98:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a158 <_vfiprintf_r+0x24c>
 8009f9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fa0:	4623      	mov	r3, r4
 8009fa2:	469a      	mov	sl, r3
 8009fa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fa8:	b10a      	cbz	r2, 8009fae <_vfiprintf_r+0xa2>
 8009faa:	2a25      	cmp	r2, #37	; 0x25
 8009fac:	d1f9      	bne.n	8009fa2 <_vfiprintf_r+0x96>
 8009fae:	ebba 0b04 	subs.w	fp, sl, r4
 8009fb2:	d00b      	beq.n	8009fcc <_vfiprintf_r+0xc0>
 8009fb4:	465b      	mov	r3, fp
 8009fb6:	4622      	mov	r2, r4
 8009fb8:	4629      	mov	r1, r5
 8009fba:	4630      	mov	r0, r6
 8009fbc:	f7ff ff94 	bl	8009ee8 <__sfputs_r>
 8009fc0:	3001      	adds	r0, #1
 8009fc2:	f000 80aa 	beq.w	800a11a <_vfiprintf_r+0x20e>
 8009fc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fc8:	445a      	add	r2, fp
 8009fca:	9209      	str	r2, [sp, #36]	; 0x24
 8009fcc:	f89a 3000 	ldrb.w	r3, [sl]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f000 80a2 	beq.w	800a11a <_vfiprintf_r+0x20e>
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8009fdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fe0:	f10a 0a01 	add.w	sl, sl, #1
 8009fe4:	9304      	str	r3, [sp, #16]
 8009fe6:	9307      	str	r3, [sp, #28]
 8009fe8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fec:	931a      	str	r3, [sp, #104]	; 0x68
 8009fee:	4654      	mov	r4, sl
 8009ff0:	2205      	movs	r2, #5
 8009ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ff6:	4858      	ldr	r0, [pc, #352]	; (800a158 <_vfiprintf_r+0x24c>)
 8009ff8:	f7fe ff84 	bl	8008f04 <memchr>
 8009ffc:	9a04      	ldr	r2, [sp, #16]
 8009ffe:	b9d8      	cbnz	r0, 800a038 <_vfiprintf_r+0x12c>
 800a000:	06d1      	lsls	r1, r2, #27
 800a002:	bf44      	itt	mi
 800a004:	2320      	movmi	r3, #32
 800a006:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a00a:	0713      	lsls	r3, r2, #28
 800a00c:	bf44      	itt	mi
 800a00e:	232b      	movmi	r3, #43	; 0x2b
 800a010:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a014:	f89a 3000 	ldrb.w	r3, [sl]
 800a018:	2b2a      	cmp	r3, #42	; 0x2a
 800a01a:	d015      	beq.n	800a048 <_vfiprintf_r+0x13c>
 800a01c:	4654      	mov	r4, sl
 800a01e:	2000      	movs	r0, #0
 800a020:	f04f 0c0a 	mov.w	ip, #10
 800a024:	9a07      	ldr	r2, [sp, #28]
 800a026:	4621      	mov	r1, r4
 800a028:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a02c:	3b30      	subs	r3, #48	; 0x30
 800a02e:	2b09      	cmp	r3, #9
 800a030:	d94e      	bls.n	800a0d0 <_vfiprintf_r+0x1c4>
 800a032:	b1b0      	cbz	r0, 800a062 <_vfiprintf_r+0x156>
 800a034:	9207      	str	r2, [sp, #28]
 800a036:	e014      	b.n	800a062 <_vfiprintf_r+0x156>
 800a038:	eba0 0308 	sub.w	r3, r0, r8
 800a03c:	fa09 f303 	lsl.w	r3, r9, r3
 800a040:	4313      	orrs	r3, r2
 800a042:	46a2      	mov	sl, r4
 800a044:	9304      	str	r3, [sp, #16]
 800a046:	e7d2      	b.n	8009fee <_vfiprintf_r+0xe2>
 800a048:	9b03      	ldr	r3, [sp, #12]
 800a04a:	1d19      	adds	r1, r3, #4
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	9103      	str	r1, [sp, #12]
 800a050:	2b00      	cmp	r3, #0
 800a052:	bfbb      	ittet	lt
 800a054:	425b      	neglt	r3, r3
 800a056:	f042 0202 	orrlt.w	r2, r2, #2
 800a05a:	9307      	strge	r3, [sp, #28]
 800a05c:	9307      	strlt	r3, [sp, #28]
 800a05e:	bfb8      	it	lt
 800a060:	9204      	strlt	r2, [sp, #16]
 800a062:	7823      	ldrb	r3, [r4, #0]
 800a064:	2b2e      	cmp	r3, #46	; 0x2e
 800a066:	d10c      	bne.n	800a082 <_vfiprintf_r+0x176>
 800a068:	7863      	ldrb	r3, [r4, #1]
 800a06a:	2b2a      	cmp	r3, #42	; 0x2a
 800a06c:	d135      	bne.n	800a0da <_vfiprintf_r+0x1ce>
 800a06e:	9b03      	ldr	r3, [sp, #12]
 800a070:	3402      	adds	r4, #2
 800a072:	1d1a      	adds	r2, r3, #4
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	9203      	str	r2, [sp, #12]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	bfb8      	it	lt
 800a07c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a080:	9305      	str	r3, [sp, #20]
 800a082:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a15c <_vfiprintf_r+0x250>
 800a086:	2203      	movs	r2, #3
 800a088:	4650      	mov	r0, sl
 800a08a:	7821      	ldrb	r1, [r4, #0]
 800a08c:	f7fe ff3a 	bl	8008f04 <memchr>
 800a090:	b140      	cbz	r0, 800a0a4 <_vfiprintf_r+0x198>
 800a092:	2340      	movs	r3, #64	; 0x40
 800a094:	eba0 000a 	sub.w	r0, r0, sl
 800a098:	fa03 f000 	lsl.w	r0, r3, r0
 800a09c:	9b04      	ldr	r3, [sp, #16]
 800a09e:	3401      	adds	r4, #1
 800a0a0:	4303      	orrs	r3, r0
 800a0a2:	9304      	str	r3, [sp, #16]
 800a0a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0a8:	2206      	movs	r2, #6
 800a0aa:	482d      	ldr	r0, [pc, #180]	; (800a160 <_vfiprintf_r+0x254>)
 800a0ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0b0:	f7fe ff28 	bl	8008f04 <memchr>
 800a0b4:	2800      	cmp	r0, #0
 800a0b6:	d03f      	beq.n	800a138 <_vfiprintf_r+0x22c>
 800a0b8:	4b2a      	ldr	r3, [pc, #168]	; (800a164 <_vfiprintf_r+0x258>)
 800a0ba:	bb1b      	cbnz	r3, 800a104 <_vfiprintf_r+0x1f8>
 800a0bc:	9b03      	ldr	r3, [sp, #12]
 800a0be:	3307      	adds	r3, #7
 800a0c0:	f023 0307 	bic.w	r3, r3, #7
 800a0c4:	3308      	adds	r3, #8
 800a0c6:	9303      	str	r3, [sp, #12]
 800a0c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ca:	443b      	add	r3, r7
 800a0cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a0ce:	e767      	b.n	8009fa0 <_vfiprintf_r+0x94>
 800a0d0:	460c      	mov	r4, r1
 800a0d2:	2001      	movs	r0, #1
 800a0d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0d8:	e7a5      	b.n	800a026 <_vfiprintf_r+0x11a>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	f04f 0c0a 	mov.w	ip, #10
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	3401      	adds	r4, #1
 800a0e4:	9305      	str	r3, [sp, #20]
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0ec:	3a30      	subs	r2, #48	; 0x30
 800a0ee:	2a09      	cmp	r2, #9
 800a0f0:	d903      	bls.n	800a0fa <_vfiprintf_r+0x1ee>
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d0c5      	beq.n	800a082 <_vfiprintf_r+0x176>
 800a0f6:	9105      	str	r1, [sp, #20]
 800a0f8:	e7c3      	b.n	800a082 <_vfiprintf_r+0x176>
 800a0fa:	4604      	mov	r4, r0
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800a102:	e7f0      	b.n	800a0e6 <_vfiprintf_r+0x1da>
 800a104:	ab03      	add	r3, sp, #12
 800a106:	9300      	str	r3, [sp, #0]
 800a108:	462a      	mov	r2, r5
 800a10a:	4630      	mov	r0, r6
 800a10c:	4b16      	ldr	r3, [pc, #88]	; (800a168 <_vfiprintf_r+0x25c>)
 800a10e:	a904      	add	r1, sp, #16
 800a110:	f7fc fa42 	bl	8006598 <_printf_float>
 800a114:	4607      	mov	r7, r0
 800a116:	1c78      	adds	r0, r7, #1
 800a118:	d1d6      	bne.n	800a0c8 <_vfiprintf_r+0x1bc>
 800a11a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a11c:	07d9      	lsls	r1, r3, #31
 800a11e:	d405      	bmi.n	800a12c <_vfiprintf_r+0x220>
 800a120:	89ab      	ldrh	r3, [r5, #12]
 800a122:	059a      	lsls	r2, r3, #22
 800a124:	d402      	bmi.n	800a12c <_vfiprintf_r+0x220>
 800a126:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a128:	f000 fa9d 	bl	800a666 <__retarget_lock_release_recursive>
 800a12c:	89ab      	ldrh	r3, [r5, #12]
 800a12e:	065b      	lsls	r3, r3, #25
 800a130:	f53f af12 	bmi.w	8009f58 <_vfiprintf_r+0x4c>
 800a134:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a136:	e711      	b.n	8009f5c <_vfiprintf_r+0x50>
 800a138:	ab03      	add	r3, sp, #12
 800a13a:	9300      	str	r3, [sp, #0]
 800a13c:	462a      	mov	r2, r5
 800a13e:	4630      	mov	r0, r6
 800a140:	4b09      	ldr	r3, [pc, #36]	; (800a168 <_vfiprintf_r+0x25c>)
 800a142:	a904      	add	r1, sp, #16
 800a144:	f7fc fcc4 	bl	8006ad0 <_printf_i>
 800a148:	e7e4      	b.n	800a114 <_vfiprintf_r+0x208>
 800a14a:	bf00      	nop
 800a14c:	0800ae4c 	.word	0x0800ae4c
 800a150:	0800ae6c 	.word	0x0800ae6c
 800a154:	0800ae2c 	.word	0x0800ae2c
 800a158:	0800addc 	.word	0x0800addc
 800a15c:	0800ade2 	.word	0x0800ade2
 800a160:	0800ade6 	.word	0x0800ade6
 800a164:	08006599 	.word	0x08006599
 800a168:	08009ee9 	.word	0x08009ee9

0800a16c <__swbuf_r>:
 800a16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a16e:	460e      	mov	r6, r1
 800a170:	4614      	mov	r4, r2
 800a172:	4605      	mov	r5, r0
 800a174:	b118      	cbz	r0, 800a17e <__swbuf_r+0x12>
 800a176:	6983      	ldr	r3, [r0, #24]
 800a178:	b90b      	cbnz	r3, 800a17e <__swbuf_r+0x12>
 800a17a:	f000 f9d5 	bl	800a528 <__sinit>
 800a17e:	4b21      	ldr	r3, [pc, #132]	; (800a204 <__swbuf_r+0x98>)
 800a180:	429c      	cmp	r4, r3
 800a182:	d12b      	bne.n	800a1dc <__swbuf_r+0x70>
 800a184:	686c      	ldr	r4, [r5, #4]
 800a186:	69a3      	ldr	r3, [r4, #24]
 800a188:	60a3      	str	r3, [r4, #8]
 800a18a:	89a3      	ldrh	r3, [r4, #12]
 800a18c:	071a      	lsls	r2, r3, #28
 800a18e:	d52f      	bpl.n	800a1f0 <__swbuf_r+0x84>
 800a190:	6923      	ldr	r3, [r4, #16]
 800a192:	b36b      	cbz	r3, 800a1f0 <__swbuf_r+0x84>
 800a194:	6923      	ldr	r3, [r4, #16]
 800a196:	6820      	ldr	r0, [r4, #0]
 800a198:	b2f6      	uxtb	r6, r6
 800a19a:	1ac0      	subs	r0, r0, r3
 800a19c:	6963      	ldr	r3, [r4, #20]
 800a19e:	4637      	mov	r7, r6
 800a1a0:	4283      	cmp	r3, r0
 800a1a2:	dc04      	bgt.n	800a1ae <__swbuf_r+0x42>
 800a1a4:	4621      	mov	r1, r4
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	f000 f92a 	bl	800a400 <_fflush_r>
 800a1ac:	bb30      	cbnz	r0, 800a1fc <__swbuf_r+0x90>
 800a1ae:	68a3      	ldr	r3, [r4, #8]
 800a1b0:	3001      	adds	r0, #1
 800a1b2:	3b01      	subs	r3, #1
 800a1b4:	60a3      	str	r3, [r4, #8]
 800a1b6:	6823      	ldr	r3, [r4, #0]
 800a1b8:	1c5a      	adds	r2, r3, #1
 800a1ba:	6022      	str	r2, [r4, #0]
 800a1bc:	701e      	strb	r6, [r3, #0]
 800a1be:	6963      	ldr	r3, [r4, #20]
 800a1c0:	4283      	cmp	r3, r0
 800a1c2:	d004      	beq.n	800a1ce <__swbuf_r+0x62>
 800a1c4:	89a3      	ldrh	r3, [r4, #12]
 800a1c6:	07db      	lsls	r3, r3, #31
 800a1c8:	d506      	bpl.n	800a1d8 <__swbuf_r+0x6c>
 800a1ca:	2e0a      	cmp	r6, #10
 800a1cc:	d104      	bne.n	800a1d8 <__swbuf_r+0x6c>
 800a1ce:	4621      	mov	r1, r4
 800a1d0:	4628      	mov	r0, r5
 800a1d2:	f000 f915 	bl	800a400 <_fflush_r>
 800a1d6:	b988      	cbnz	r0, 800a1fc <__swbuf_r+0x90>
 800a1d8:	4638      	mov	r0, r7
 800a1da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1dc:	4b0a      	ldr	r3, [pc, #40]	; (800a208 <__swbuf_r+0x9c>)
 800a1de:	429c      	cmp	r4, r3
 800a1e0:	d101      	bne.n	800a1e6 <__swbuf_r+0x7a>
 800a1e2:	68ac      	ldr	r4, [r5, #8]
 800a1e4:	e7cf      	b.n	800a186 <__swbuf_r+0x1a>
 800a1e6:	4b09      	ldr	r3, [pc, #36]	; (800a20c <__swbuf_r+0xa0>)
 800a1e8:	429c      	cmp	r4, r3
 800a1ea:	bf08      	it	eq
 800a1ec:	68ec      	ldreq	r4, [r5, #12]
 800a1ee:	e7ca      	b.n	800a186 <__swbuf_r+0x1a>
 800a1f0:	4621      	mov	r1, r4
 800a1f2:	4628      	mov	r0, r5
 800a1f4:	f000 f80c 	bl	800a210 <__swsetup_r>
 800a1f8:	2800      	cmp	r0, #0
 800a1fa:	d0cb      	beq.n	800a194 <__swbuf_r+0x28>
 800a1fc:	f04f 37ff 	mov.w	r7, #4294967295
 800a200:	e7ea      	b.n	800a1d8 <__swbuf_r+0x6c>
 800a202:	bf00      	nop
 800a204:	0800ae4c 	.word	0x0800ae4c
 800a208:	0800ae6c 	.word	0x0800ae6c
 800a20c:	0800ae2c 	.word	0x0800ae2c

0800a210 <__swsetup_r>:
 800a210:	4b32      	ldr	r3, [pc, #200]	; (800a2dc <__swsetup_r+0xcc>)
 800a212:	b570      	push	{r4, r5, r6, lr}
 800a214:	681d      	ldr	r5, [r3, #0]
 800a216:	4606      	mov	r6, r0
 800a218:	460c      	mov	r4, r1
 800a21a:	b125      	cbz	r5, 800a226 <__swsetup_r+0x16>
 800a21c:	69ab      	ldr	r3, [r5, #24]
 800a21e:	b913      	cbnz	r3, 800a226 <__swsetup_r+0x16>
 800a220:	4628      	mov	r0, r5
 800a222:	f000 f981 	bl	800a528 <__sinit>
 800a226:	4b2e      	ldr	r3, [pc, #184]	; (800a2e0 <__swsetup_r+0xd0>)
 800a228:	429c      	cmp	r4, r3
 800a22a:	d10f      	bne.n	800a24c <__swsetup_r+0x3c>
 800a22c:	686c      	ldr	r4, [r5, #4]
 800a22e:	89a3      	ldrh	r3, [r4, #12]
 800a230:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a234:	0719      	lsls	r1, r3, #28
 800a236:	d42c      	bmi.n	800a292 <__swsetup_r+0x82>
 800a238:	06dd      	lsls	r5, r3, #27
 800a23a:	d411      	bmi.n	800a260 <__swsetup_r+0x50>
 800a23c:	2309      	movs	r3, #9
 800a23e:	6033      	str	r3, [r6, #0]
 800a240:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a244:	f04f 30ff 	mov.w	r0, #4294967295
 800a248:	81a3      	strh	r3, [r4, #12]
 800a24a:	e03e      	b.n	800a2ca <__swsetup_r+0xba>
 800a24c:	4b25      	ldr	r3, [pc, #148]	; (800a2e4 <__swsetup_r+0xd4>)
 800a24e:	429c      	cmp	r4, r3
 800a250:	d101      	bne.n	800a256 <__swsetup_r+0x46>
 800a252:	68ac      	ldr	r4, [r5, #8]
 800a254:	e7eb      	b.n	800a22e <__swsetup_r+0x1e>
 800a256:	4b24      	ldr	r3, [pc, #144]	; (800a2e8 <__swsetup_r+0xd8>)
 800a258:	429c      	cmp	r4, r3
 800a25a:	bf08      	it	eq
 800a25c:	68ec      	ldreq	r4, [r5, #12]
 800a25e:	e7e6      	b.n	800a22e <__swsetup_r+0x1e>
 800a260:	0758      	lsls	r0, r3, #29
 800a262:	d512      	bpl.n	800a28a <__swsetup_r+0x7a>
 800a264:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a266:	b141      	cbz	r1, 800a27a <__swsetup_r+0x6a>
 800a268:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a26c:	4299      	cmp	r1, r3
 800a26e:	d002      	beq.n	800a276 <__swsetup_r+0x66>
 800a270:	4630      	mov	r0, r6
 800a272:	f7ff fb2f 	bl	80098d4 <_free_r>
 800a276:	2300      	movs	r3, #0
 800a278:	6363      	str	r3, [r4, #52]	; 0x34
 800a27a:	89a3      	ldrh	r3, [r4, #12]
 800a27c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a280:	81a3      	strh	r3, [r4, #12]
 800a282:	2300      	movs	r3, #0
 800a284:	6063      	str	r3, [r4, #4]
 800a286:	6923      	ldr	r3, [r4, #16]
 800a288:	6023      	str	r3, [r4, #0]
 800a28a:	89a3      	ldrh	r3, [r4, #12]
 800a28c:	f043 0308 	orr.w	r3, r3, #8
 800a290:	81a3      	strh	r3, [r4, #12]
 800a292:	6923      	ldr	r3, [r4, #16]
 800a294:	b94b      	cbnz	r3, 800a2aa <__swsetup_r+0x9a>
 800a296:	89a3      	ldrh	r3, [r4, #12]
 800a298:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a29c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2a0:	d003      	beq.n	800a2aa <__swsetup_r+0x9a>
 800a2a2:	4621      	mov	r1, r4
 800a2a4:	4630      	mov	r0, r6
 800a2a6:	f000 fa05 	bl	800a6b4 <__smakebuf_r>
 800a2aa:	89a0      	ldrh	r0, [r4, #12]
 800a2ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2b0:	f010 0301 	ands.w	r3, r0, #1
 800a2b4:	d00a      	beq.n	800a2cc <__swsetup_r+0xbc>
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	60a3      	str	r3, [r4, #8]
 800a2ba:	6963      	ldr	r3, [r4, #20]
 800a2bc:	425b      	negs	r3, r3
 800a2be:	61a3      	str	r3, [r4, #24]
 800a2c0:	6923      	ldr	r3, [r4, #16]
 800a2c2:	b943      	cbnz	r3, 800a2d6 <__swsetup_r+0xc6>
 800a2c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a2c8:	d1ba      	bne.n	800a240 <__swsetup_r+0x30>
 800a2ca:	bd70      	pop	{r4, r5, r6, pc}
 800a2cc:	0781      	lsls	r1, r0, #30
 800a2ce:	bf58      	it	pl
 800a2d0:	6963      	ldrpl	r3, [r4, #20]
 800a2d2:	60a3      	str	r3, [r4, #8]
 800a2d4:	e7f4      	b.n	800a2c0 <__swsetup_r+0xb0>
 800a2d6:	2000      	movs	r0, #0
 800a2d8:	e7f7      	b.n	800a2ca <__swsetup_r+0xba>
 800a2da:	bf00      	nop
 800a2dc:	20000040 	.word	0x20000040
 800a2e0:	0800ae4c 	.word	0x0800ae4c
 800a2e4:	0800ae6c 	.word	0x0800ae6c
 800a2e8:	0800ae2c 	.word	0x0800ae2c

0800a2ec <abort>:
 800a2ec:	2006      	movs	r0, #6
 800a2ee:	b508      	push	{r3, lr}
 800a2f0:	f000 fa50 	bl	800a794 <raise>
 800a2f4:	2001      	movs	r0, #1
 800a2f6:	f7f8 fa20 	bl	800273a <_exit>
	...

0800a2fc <__sflush_r>:
 800a2fc:	898a      	ldrh	r2, [r1, #12]
 800a2fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a300:	4605      	mov	r5, r0
 800a302:	0710      	lsls	r0, r2, #28
 800a304:	460c      	mov	r4, r1
 800a306:	d457      	bmi.n	800a3b8 <__sflush_r+0xbc>
 800a308:	684b      	ldr	r3, [r1, #4]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	dc04      	bgt.n	800a318 <__sflush_r+0x1c>
 800a30e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a310:	2b00      	cmp	r3, #0
 800a312:	dc01      	bgt.n	800a318 <__sflush_r+0x1c>
 800a314:	2000      	movs	r0, #0
 800a316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a318:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a31a:	2e00      	cmp	r6, #0
 800a31c:	d0fa      	beq.n	800a314 <__sflush_r+0x18>
 800a31e:	2300      	movs	r3, #0
 800a320:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a324:	682f      	ldr	r7, [r5, #0]
 800a326:	602b      	str	r3, [r5, #0]
 800a328:	d032      	beq.n	800a390 <__sflush_r+0x94>
 800a32a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a32c:	89a3      	ldrh	r3, [r4, #12]
 800a32e:	075a      	lsls	r2, r3, #29
 800a330:	d505      	bpl.n	800a33e <__sflush_r+0x42>
 800a332:	6863      	ldr	r3, [r4, #4]
 800a334:	1ac0      	subs	r0, r0, r3
 800a336:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a338:	b10b      	cbz	r3, 800a33e <__sflush_r+0x42>
 800a33a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a33c:	1ac0      	subs	r0, r0, r3
 800a33e:	2300      	movs	r3, #0
 800a340:	4602      	mov	r2, r0
 800a342:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a344:	4628      	mov	r0, r5
 800a346:	6a21      	ldr	r1, [r4, #32]
 800a348:	47b0      	blx	r6
 800a34a:	1c43      	adds	r3, r0, #1
 800a34c:	89a3      	ldrh	r3, [r4, #12]
 800a34e:	d106      	bne.n	800a35e <__sflush_r+0x62>
 800a350:	6829      	ldr	r1, [r5, #0]
 800a352:	291d      	cmp	r1, #29
 800a354:	d82c      	bhi.n	800a3b0 <__sflush_r+0xb4>
 800a356:	4a29      	ldr	r2, [pc, #164]	; (800a3fc <__sflush_r+0x100>)
 800a358:	40ca      	lsrs	r2, r1
 800a35a:	07d6      	lsls	r6, r2, #31
 800a35c:	d528      	bpl.n	800a3b0 <__sflush_r+0xb4>
 800a35e:	2200      	movs	r2, #0
 800a360:	6062      	str	r2, [r4, #4]
 800a362:	6922      	ldr	r2, [r4, #16]
 800a364:	04d9      	lsls	r1, r3, #19
 800a366:	6022      	str	r2, [r4, #0]
 800a368:	d504      	bpl.n	800a374 <__sflush_r+0x78>
 800a36a:	1c42      	adds	r2, r0, #1
 800a36c:	d101      	bne.n	800a372 <__sflush_r+0x76>
 800a36e:	682b      	ldr	r3, [r5, #0]
 800a370:	b903      	cbnz	r3, 800a374 <__sflush_r+0x78>
 800a372:	6560      	str	r0, [r4, #84]	; 0x54
 800a374:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a376:	602f      	str	r7, [r5, #0]
 800a378:	2900      	cmp	r1, #0
 800a37a:	d0cb      	beq.n	800a314 <__sflush_r+0x18>
 800a37c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a380:	4299      	cmp	r1, r3
 800a382:	d002      	beq.n	800a38a <__sflush_r+0x8e>
 800a384:	4628      	mov	r0, r5
 800a386:	f7ff faa5 	bl	80098d4 <_free_r>
 800a38a:	2000      	movs	r0, #0
 800a38c:	6360      	str	r0, [r4, #52]	; 0x34
 800a38e:	e7c2      	b.n	800a316 <__sflush_r+0x1a>
 800a390:	6a21      	ldr	r1, [r4, #32]
 800a392:	2301      	movs	r3, #1
 800a394:	4628      	mov	r0, r5
 800a396:	47b0      	blx	r6
 800a398:	1c41      	adds	r1, r0, #1
 800a39a:	d1c7      	bne.n	800a32c <__sflush_r+0x30>
 800a39c:	682b      	ldr	r3, [r5, #0]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d0c4      	beq.n	800a32c <__sflush_r+0x30>
 800a3a2:	2b1d      	cmp	r3, #29
 800a3a4:	d001      	beq.n	800a3aa <__sflush_r+0xae>
 800a3a6:	2b16      	cmp	r3, #22
 800a3a8:	d101      	bne.n	800a3ae <__sflush_r+0xb2>
 800a3aa:	602f      	str	r7, [r5, #0]
 800a3ac:	e7b2      	b.n	800a314 <__sflush_r+0x18>
 800a3ae:	89a3      	ldrh	r3, [r4, #12]
 800a3b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3b4:	81a3      	strh	r3, [r4, #12]
 800a3b6:	e7ae      	b.n	800a316 <__sflush_r+0x1a>
 800a3b8:	690f      	ldr	r7, [r1, #16]
 800a3ba:	2f00      	cmp	r7, #0
 800a3bc:	d0aa      	beq.n	800a314 <__sflush_r+0x18>
 800a3be:	0793      	lsls	r3, r2, #30
 800a3c0:	bf18      	it	ne
 800a3c2:	2300      	movne	r3, #0
 800a3c4:	680e      	ldr	r6, [r1, #0]
 800a3c6:	bf08      	it	eq
 800a3c8:	694b      	ldreq	r3, [r1, #20]
 800a3ca:	1bf6      	subs	r6, r6, r7
 800a3cc:	600f      	str	r7, [r1, #0]
 800a3ce:	608b      	str	r3, [r1, #8]
 800a3d0:	2e00      	cmp	r6, #0
 800a3d2:	dd9f      	ble.n	800a314 <__sflush_r+0x18>
 800a3d4:	4633      	mov	r3, r6
 800a3d6:	463a      	mov	r2, r7
 800a3d8:	4628      	mov	r0, r5
 800a3da:	6a21      	ldr	r1, [r4, #32]
 800a3dc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a3e0:	47e0      	blx	ip
 800a3e2:	2800      	cmp	r0, #0
 800a3e4:	dc06      	bgt.n	800a3f4 <__sflush_r+0xf8>
 800a3e6:	89a3      	ldrh	r3, [r4, #12]
 800a3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3f0:	81a3      	strh	r3, [r4, #12]
 800a3f2:	e790      	b.n	800a316 <__sflush_r+0x1a>
 800a3f4:	4407      	add	r7, r0
 800a3f6:	1a36      	subs	r6, r6, r0
 800a3f8:	e7ea      	b.n	800a3d0 <__sflush_r+0xd4>
 800a3fa:	bf00      	nop
 800a3fc:	20400001 	.word	0x20400001

0800a400 <_fflush_r>:
 800a400:	b538      	push	{r3, r4, r5, lr}
 800a402:	690b      	ldr	r3, [r1, #16]
 800a404:	4605      	mov	r5, r0
 800a406:	460c      	mov	r4, r1
 800a408:	b913      	cbnz	r3, 800a410 <_fflush_r+0x10>
 800a40a:	2500      	movs	r5, #0
 800a40c:	4628      	mov	r0, r5
 800a40e:	bd38      	pop	{r3, r4, r5, pc}
 800a410:	b118      	cbz	r0, 800a41a <_fflush_r+0x1a>
 800a412:	6983      	ldr	r3, [r0, #24]
 800a414:	b90b      	cbnz	r3, 800a41a <_fflush_r+0x1a>
 800a416:	f000 f887 	bl	800a528 <__sinit>
 800a41a:	4b14      	ldr	r3, [pc, #80]	; (800a46c <_fflush_r+0x6c>)
 800a41c:	429c      	cmp	r4, r3
 800a41e:	d11b      	bne.n	800a458 <_fflush_r+0x58>
 800a420:	686c      	ldr	r4, [r5, #4]
 800a422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d0ef      	beq.n	800a40a <_fflush_r+0xa>
 800a42a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a42c:	07d0      	lsls	r0, r2, #31
 800a42e:	d404      	bmi.n	800a43a <_fflush_r+0x3a>
 800a430:	0599      	lsls	r1, r3, #22
 800a432:	d402      	bmi.n	800a43a <_fflush_r+0x3a>
 800a434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a436:	f000 f915 	bl	800a664 <__retarget_lock_acquire_recursive>
 800a43a:	4628      	mov	r0, r5
 800a43c:	4621      	mov	r1, r4
 800a43e:	f7ff ff5d 	bl	800a2fc <__sflush_r>
 800a442:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a444:	4605      	mov	r5, r0
 800a446:	07da      	lsls	r2, r3, #31
 800a448:	d4e0      	bmi.n	800a40c <_fflush_r+0xc>
 800a44a:	89a3      	ldrh	r3, [r4, #12]
 800a44c:	059b      	lsls	r3, r3, #22
 800a44e:	d4dd      	bmi.n	800a40c <_fflush_r+0xc>
 800a450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a452:	f000 f908 	bl	800a666 <__retarget_lock_release_recursive>
 800a456:	e7d9      	b.n	800a40c <_fflush_r+0xc>
 800a458:	4b05      	ldr	r3, [pc, #20]	; (800a470 <_fflush_r+0x70>)
 800a45a:	429c      	cmp	r4, r3
 800a45c:	d101      	bne.n	800a462 <_fflush_r+0x62>
 800a45e:	68ac      	ldr	r4, [r5, #8]
 800a460:	e7df      	b.n	800a422 <_fflush_r+0x22>
 800a462:	4b04      	ldr	r3, [pc, #16]	; (800a474 <_fflush_r+0x74>)
 800a464:	429c      	cmp	r4, r3
 800a466:	bf08      	it	eq
 800a468:	68ec      	ldreq	r4, [r5, #12]
 800a46a:	e7da      	b.n	800a422 <_fflush_r+0x22>
 800a46c:	0800ae4c 	.word	0x0800ae4c
 800a470:	0800ae6c 	.word	0x0800ae6c
 800a474:	0800ae2c 	.word	0x0800ae2c

0800a478 <std>:
 800a478:	2300      	movs	r3, #0
 800a47a:	b510      	push	{r4, lr}
 800a47c:	4604      	mov	r4, r0
 800a47e:	e9c0 3300 	strd	r3, r3, [r0]
 800a482:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a486:	6083      	str	r3, [r0, #8]
 800a488:	8181      	strh	r1, [r0, #12]
 800a48a:	6643      	str	r3, [r0, #100]	; 0x64
 800a48c:	81c2      	strh	r2, [r0, #14]
 800a48e:	6183      	str	r3, [r0, #24]
 800a490:	4619      	mov	r1, r3
 800a492:	2208      	movs	r2, #8
 800a494:	305c      	adds	r0, #92	; 0x5c
 800a496:	f7fb ffd9 	bl	800644c <memset>
 800a49a:	4b05      	ldr	r3, [pc, #20]	; (800a4b0 <std+0x38>)
 800a49c:	6224      	str	r4, [r4, #32]
 800a49e:	6263      	str	r3, [r4, #36]	; 0x24
 800a4a0:	4b04      	ldr	r3, [pc, #16]	; (800a4b4 <std+0x3c>)
 800a4a2:	62a3      	str	r3, [r4, #40]	; 0x28
 800a4a4:	4b04      	ldr	r3, [pc, #16]	; (800a4b8 <std+0x40>)
 800a4a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a4a8:	4b04      	ldr	r3, [pc, #16]	; (800a4bc <std+0x44>)
 800a4aa:	6323      	str	r3, [r4, #48]	; 0x30
 800a4ac:	bd10      	pop	{r4, pc}
 800a4ae:	bf00      	nop
 800a4b0:	0800a7cd 	.word	0x0800a7cd
 800a4b4:	0800a7ef 	.word	0x0800a7ef
 800a4b8:	0800a827 	.word	0x0800a827
 800a4bc:	0800a84b 	.word	0x0800a84b

0800a4c0 <_cleanup_r>:
 800a4c0:	4901      	ldr	r1, [pc, #4]	; (800a4c8 <_cleanup_r+0x8>)
 800a4c2:	f000 b8af 	b.w	800a624 <_fwalk_reent>
 800a4c6:	bf00      	nop
 800a4c8:	0800a401 	.word	0x0800a401

0800a4cc <__sfmoreglue>:
 800a4cc:	2268      	movs	r2, #104	; 0x68
 800a4ce:	b570      	push	{r4, r5, r6, lr}
 800a4d0:	1e4d      	subs	r5, r1, #1
 800a4d2:	4355      	muls	r5, r2
 800a4d4:	460e      	mov	r6, r1
 800a4d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a4da:	f7ff fa63 	bl	80099a4 <_malloc_r>
 800a4de:	4604      	mov	r4, r0
 800a4e0:	b140      	cbz	r0, 800a4f4 <__sfmoreglue+0x28>
 800a4e2:	2100      	movs	r1, #0
 800a4e4:	e9c0 1600 	strd	r1, r6, [r0]
 800a4e8:	300c      	adds	r0, #12
 800a4ea:	60a0      	str	r0, [r4, #8]
 800a4ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a4f0:	f7fb ffac 	bl	800644c <memset>
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	bd70      	pop	{r4, r5, r6, pc}

0800a4f8 <__sfp_lock_acquire>:
 800a4f8:	4801      	ldr	r0, [pc, #4]	; (800a500 <__sfp_lock_acquire+0x8>)
 800a4fa:	f000 b8b3 	b.w	800a664 <__retarget_lock_acquire_recursive>
 800a4fe:	bf00      	nop
 800a500:	20000459 	.word	0x20000459

0800a504 <__sfp_lock_release>:
 800a504:	4801      	ldr	r0, [pc, #4]	; (800a50c <__sfp_lock_release+0x8>)
 800a506:	f000 b8ae 	b.w	800a666 <__retarget_lock_release_recursive>
 800a50a:	bf00      	nop
 800a50c:	20000459 	.word	0x20000459

0800a510 <__sinit_lock_acquire>:
 800a510:	4801      	ldr	r0, [pc, #4]	; (800a518 <__sinit_lock_acquire+0x8>)
 800a512:	f000 b8a7 	b.w	800a664 <__retarget_lock_acquire_recursive>
 800a516:	bf00      	nop
 800a518:	2000045a 	.word	0x2000045a

0800a51c <__sinit_lock_release>:
 800a51c:	4801      	ldr	r0, [pc, #4]	; (800a524 <__sinit_lock_release+0x8>)
 800a51e:	f000 b8a2 	b.w	800a666 <__retarget_lock_release_recursive>
 800a522:	bf00      	nop
 800a524:	2000045a 	.word	0x2000045a

0800a528 <__sinit>:
 800a528:	b510      	push	{r4, lr}
 800a52a:	4604      	mov	r4, r0
 800a52c:	f7ff fff0 	bl	800a510 <__sinit_lock_acquire>
 800a530:	69a3      	ldr	r3, [r4, #24]
 800a532:	b11b      	cbz	r3, 800a53c <__sinit+0x14>
 800a534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a538:	f7ff bff0 	b.w	800a51c <__sinit_lock_release>
 800a53c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a540:	6523      	str	r3, [r4, #80]	; 0x50
 800a542:	4b13      	ldr	r3, [pc, #76]	; (800a590 <__sinit+0x68>)
 800a544:	4a13      	ldr	r2, [pc, #76]	; (800a594 <__sinit+0x6c>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	62a2      	str	r2, [r4, #40]	; 0x28
 800a54a:	42a3      	cmp	r3, r4
 800a54c:	bf08      	it	eq
 800a54e:	2301      	moveq	r3, #1
 800a550:	4620      	mov	r0, r4
 800a552:	bf08      	it	eq
 800a554:	61a3      	streq	r3, [r4, #24]
 800a556:	f000 f81f 	bl	800a598 <__sfp>
 800a55a:	6060      	str	r0, [r4, #4]
 800a55c:	4620      	mov	r0, r4
 800a55e:	f000 f81b 	bl	800a598 <__sfp>
 800a562:	60a0      	str	r0, [r4, #8]
 800a564:	4620      	mov	r0, r4
 800a566:	f000 f817 	bl	800a598 <__sfp>
 800a56a:	2200      	movs	r2, #0
 800a56c:	2104      	movs	r1, #4
 800a56e:	60e0      	str	r0, [r4, #12]
 800a570:	6860      	ldr	r0, [r4, #4]
 800a572:	f7ff ff81 	bl	800a478 <std>
 800a576:	2201      	movs	r2, #1
 800a578:	2109      	movs	r1, #9
 800a57a:	68a0      	ldr	r0, [r4, #8]
 800a57c:	f7ff ff7c 	bl	800a478 <std>
 800a580:	2202      	movs	r2, #2
 800a582:	2112      	movs	r1, #18
 800a584:	68e0      	ldr	r0, [r4, #12]
 800a586:	f7ff ff77 	bl	800a478 <std>
 800a58a:	2301      	movs	r3, #1
 800a58c:	61a3      	str	r3, [r4, #24]
 800a58e:	e7d1      	b.n	800a534 <__sinit+0xc>
 800a590:	0800a9ec 	.word	0x0800a9ec
 800a594:	0800a4c1 	.word	0x0800a4c1

0800a598 <__sfp>:
 800a598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a59a:	4607      	mov	r7, r0
 800a59c:	f7ff ffac 	bl	800a4f8 <__sfp_lock_acquire>
 800a5a0:	4b1e      	ldr	r3, [pc, #120]	; (800a61c <__sfp+0x84>)
 800a5a2:	681e      	ldr	r6, [r3, #0]
 800a5a4:	69b3      	ldr	r3, [r6, #24]
 800a5a6:	b913      	cbnz	r3, 800a5ae <__sfp+0x16>
 800a5a8:	4630      	mov	r0, r6
 800a5aa:	f7ff ffbd 	bl	800a528 <__sinit>
 800a5ae:	3648      	adds	r6, #72	; 0x48
 800a5b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a5b4:	3b01      	subs	r3, #1
 800a5b6:	d503      	bpl.n	800a5c0 <__sfp+0x28>
 800a5b8:	6833      	ldr	r3, [r6, #0]
 800a5ba:	b30b      	cbz	r3, 800a600 <__sfp+0x68>
 800a5bc:	6836      	ldr	r6, [r6, #0]
 800a5be:	e7f7      	b.n	800a5b0 <__sfp+0x18>
 800a5c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a5c4:	b9d5      	cbnz	r5, 800a5fc <__sfp+0x64>
 800a5c6:	4b16      	ldr	r3, [pc, #88]	; (800a620 <__sfp+0x88>)
 800a5c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a5cc:	60e3      	str	r3, [r4, #12]
 800a5ce:	6665      	str	r5, [r4, #100]	; 0x64
 800a5d0:	f000 f847 	bl	800a662 <__retarget_lock_init_recursive>
 800a5d4:	f7ff ff96 	bl	800a504 <__sfp_lock_release>
 800a5d8:	2208      	movs	r2, #8
 800a5da:	4629      	mov	r1, r5
 800a5dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a5e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a5e4:	6025      	str	r5, [r4, #0]
 800a5e6:	61a5      	str	r5, [r4, #24]
 800a5e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a5ec:	f7fb ff2e 	bl	800644c <memset>
 800a5f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a5f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5fc:	3468      	adds	r4, #104	; 0x68
 800a5fe:	e7d9      	b.n	800a5b4 <__sfp+0x1c>
 800a600:	2104      	movs	r1, #4
 800a602:	4638      	mov	r0, r7
 800a604:	f7ff ff62 	bl	800a4cc <__sfmoreglue>
 800a608:	4604      	mov	r4, r0
 800a60a:	6030      	str	r0, [r6, #0]
 800a60c:	2800      	cmp	r0, #0
 800a60e:	d1d5      	bne.n	800a5bc <__sfp+0x24>
 800a610:	f7ff ff78 	bl	800a504 <__sfp_lock_release>
 800a614:	230c      	movs	r3, #12
 800a616:	603b      	str	r3, [r7, #0]
 800a618:	e7ee      	b.n	800a5f8 <__sfp+0x60>
 800a61a:	bf00      	nop
 800a61c:	0800a9ec 	.word	0x0800a9ec
 800a620:	ffff0001 	.word	0xffff0001

0800a624 <_fwalk_reent>:
 800a624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a628:	4606      	mov	r6, r0
 800a62a:	4688      	mov	r8, r1
 800a62c:	2700      	movs	r7, #0
 800a62e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a632:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a636:	f1b9 0901 	subs.w	r9, r9, #1
 800a63a:	d505      	bpl.n	800a648 <_fwalk_reent+0x24>
 800a63c:	6824      	ldr	r4, [r4, #0]
 800a63e:	2c00      	cmp	r4, #0
 800a640:	d1f7      	bne.n	800a632 <_fwalk_reent+0xe>
 800a642:	4638      	mov	r0, r7
 800a644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a648:	89ab      	ldrh	r3, [r5, #12]
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d907      	bls.n	800a65e <_fwalk_reent+0x3a>
 800a64e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a652:	3301      	adds	r3, #1
 800a654:	d003      	beq.n	800a65e <_fwalk_reent+0x3a>
 800a656:	4629      	mov	r1, r5
 800a658:	4630      	mov	r0, r6
 800a65a:	47c0      	blx	r8
 800a65c:	4307      	orrs	r7, r0
 800a65e:	3568      	adds	r5, #104	; 0x68
 800a660:	e7e9      	b.n	800a636 <_fwalk_reent+0x12>

0800a662 <__retarget_lock_init_recursive>:
 800a662:	4770      	bx	lr

0800a664 <__retarget_lock_acquire_recursive>:
 800a664:	4770      	bx	lr

0800a666 <__retarget_lock_release_recursive>:
 800a666:	4770      	bx	lr

0800a668 <__swhatbuf_r>:
 800a668:	b570      	push	{r4, r5, r6, lr}
 800a66a:	460e      	mov	r6, r1
 800a66c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a670:	4614      	mov	r4, r2
 800a672:	2900      	cmp	r1, #0
 800a674:	461d      	mov	r5, r3
 800a676:	b096      	sub	sp, #88	; 0x58
 800a678:	da08      	bge.n	800a68c <__swhatbuf_r+0x24>
 800a67a:	2200      	movs	r2, #0
 800a67c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a680:	602a      	str	r2, [r5, #0]
 800a682:	061a      	lsls	r2, r3, #24
 800a684:	d410      	bmi.n	800a6a8 <__swhatbuf_r+0x40>
 800a686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a68a:	e00e      	b.n	800a6aa <__swhatbuf_r+0x42>
 800a68c:	466a      	mov	r2, sp
 800a68e:	f000 f903 	bl	800a898 <_fstat_r>
 800a692:	2800      	cmp	r0, #0
 800a694:	dbf1      	blt.n	800a67a <__swhatbuf_r+0x12>
 800a696:	9a01      	ldr	r2, [sp, #4]
 800a698:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a69c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a6a0:	425a      	negs	r2, r3
 800a6a2:	415a      	adcs	r2, r3
 800a6a4:	602a      	str	r2, [r5, #0]
 800a6a6:	e7ee      	b.n	800a686 <__swhatbuf_r+0x1e>
 800a6a8:	2340      	movs	r3, #64	; 0x40
 800a6aa:	2000      	movs	r0, #0
 800a6ac:	6023      	str	r3, [r4, #0]
 800a6ae:	b016      	add	sp, #88	; 0x58
 800a6b0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a6b4 <__smakebuf_r>:
 800a6b4:	898b      	ldrh	r3, [r1, #12]
 800a6b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a6b8:	079d      	lsls	r5, r3, #30
 800a6ba:	4606      	mov	r6, r0
 800a6bc:	460c      	mov	r4, r1
 800a6be:	d507      	bpl.n	800a6d0 <__smakebuf_r+0x1c>
 800a6c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a6c4:	6023      	str	r3, [r4, #0]
 800a6c6:	6123      	str	r3, [r4, #16]
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	6163      	str	r3, [r4, #20]
 800a6cc:	b002      	add	sp, #8
 800a6ce:	bd70      	pop	{r4, r5, r6, pc}
 800a6d0:	466a      	mov	r2, sp
 800a6d2:	ab01      	add	r3, sp, #4
 800a6d4:	f7ff ffc8 	bl	800a668 <__swhatbuf_r>
 800a6d8:	9900      	ldr	r1, [sp, #0]
 800a6da:	4605      	mov	r5, r0
 800a6dc:	4630      	mov	r0, r6
 800a6de:	f7ff f961 	bl	80099a4 <_malloc_r>
 800a6e2:	b948      	cbnz	r0, 800a6f8 <__smakebuf_r+0x44>
 800a6e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6e8:	059a      	lsls	r2, r3, #22
 800a6ea:	d4ef      	bmi.n	800a6cc <__smakebuf_r+0x18>
 800a6ec:	f023 0303 	bic.w	r3, r3, #3
 800a6f0:	f043 0302 	orr.w	r3, r3, #2
 800a6f4:	81a3      	strh	r3, [r4, #12]
 800a6f6:	e7e3      	b.n	800a6c0 <__smakebuf_r+0xc>
 800a6f8:	4b0d      	ldr	r3, [pc, #52]	; (800a730 <__smakebuf_r+0x7c>)
 800a6fa:	62b3      	str	r3, [r6, #40]	; 0x28
 800a6fc:	89a3      	ldrh	r3, [r4, #12]
 800a6fe:	6020      	str	r0, [r4, #0]
 800a700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a704:	81a3      	strh	r3, [r4, #12]
 800a706:	9b00      	ldr	r3, [sp, #0]
 800a708:	6120      	str	r0, [r4, #16]
 800a70a:	6163      	str	r3, [r4, #20]
 800a70c:	9b01      	ldr	r3, [sp, #4]
 800a70e:	b15b      	cbz	r3, 800a728 <__smakebuf_r+0x74>
 800a710:	4630      	mov	r0, r6
 800a712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a716:	f000 f8d1 	bl	800a8bc <_isatty_r>
 800a71a:	b128      	cbz	r0, 800a728 <__smakebuf_r+0x74>
 800a71c:	89a3      	ldrh	r3, [r4, #12]
 800a71e:	f023 0303 	bic.w	r3, r3, #3
 800a722:	f043 0301 	orr.w	r3, r3, #1
 800a726:	81a3      	strh	r3, [r4, #12]
 800a728:	89a0      	ldrh	r0, [r4, #12]
 800a72a:	4305      	orrs	r5, r0
 800a72c:	81a5      	strh	r5, [r4, #12]
 800a72e:	e7cd      	b.n	800a6cc <__smakebuf_r+0x18>
 800a730:	0800a4c1 	.word	0x0800a4c1

0800a734 <_malloc_usable_size_r>:
 800a734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a738:	1f18      	subs	r0, r3, #4
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	bfbc      	itt	lt
 800a73e:	580b      	ldrlt	r3, [r1, r0]
 800a740:	18c0      	addlt	r0, r0, r3
 800a742:	4770      	bx	lr

0800a744 <_raise_r>:
 800a744:	291f      	cmp	r1, #31
 800a746:	b538      	push	{r3, r4, r5, lr}
 800a748:	4604      	mov	r4, r0
 800a74a:	460d      	mov	r5, r1
 800a74c:	d904      	bls.n	800a758 <_raise_r+0x14>
 800a74e:	2316      	movs	r3, #22
 800a750:	6003      	str	r3, [r0, #0]
 800a752:	f04f 30ff 	mov.w	r0, #4294967295
 800a756:	bd38      	pop	{r3, r4, r5, pc}
 800a758:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a75a:	b112      	cbz	r2, 800a762 <_raise_r+0x1e>
 800a75c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a760:	b94b      	cbnz	r3, 800a776 <_raise_r+0x32>
 800a762:	4620      	mov	r0, r4
 800a764:	f000 f830 	bl	800a7c8 <_getpid_r>
 800a768:	462a      	mov	r2, r5
 800a76a:	4601      	mov	r1, r0
 800a76c:	4620      	mov	r0, r4
 800a76e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a772:	f000 b817 	b.w	800a7a4 <_kill_r>
 800a776:	2b01      	cmp	r3, #1
 800a778:	d00a      	beq.n	800a790 <_raise_r+0x4c>
 800a77a:	1c59      	adds	r1, r3, #1
 800a77c:	d103      	bne.n	800a786 <_raise_r+0x42>
 800a77e:	2316      	movs	r3, #22
 800a780:	6003      	str	r3, [r0, #0]
 800a782:	2001      	movs	r0, #1
 800a784:	e7e7      	b.n	800a756 <_raise_r+0x12>
 800a786:	2400      	movs	r4, #0
 800a788:	4628      	mov	r0, r5
 800a78a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a78e:	4798      	blx	r3
 800a790:	2000      	movs	r0, #0
 800a792:	e7e0      	b.n	800a756 <_raise_r+0x12>

0800a794 <raise>:
 800a794:	4b02      	ldr	r3, [pc, #8]	; (800a7a0 <raise+0xc>)
 800a796:	4601      	mov	r1, r0
 800a798:	6818      	ldr	r0, [r3, #0]
 800a79a:	f7ff bfd3 	b.w	800a744 <_raise_r>
 800a79e:	bf00      	nop
 800a7a0:	20000040 	.word	0x20000040

0800a7a4 <_kill_r>:
 800a7a4:	b538      	push	{r3, r4, r5, lr}
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	4d06      	ldr	r5, [pc, #24]	; (800a7c4 <_kill_r+0x20>)
 800a7aa:	4604      	mov	r4, r0
 800a7ac:	4608      	mov	r0, r1
 800a7ae:	4611      	mov	r1, r2
 800a7b0:	602b      	str	r3, [r5, #0]
 800a7b2:	f7f7 ffb2 	bl	800271a <_kill>
 800a7b6:	1c43      	adds	r3, r0, #1
 800a7b8:	d102      	bne.n	800a7c0 <_kill_r+0x1c>
 800a7ba:	682b      	ldr	r3, [r5, #0]
 800a7bc:	b103      	cbz	r3, 800a7c0 <_kill_r+0x1c>
 800a7be:	6023      	str	r3, [r4, #0]
 800a7c0:	bd38      	pop	{r3, r4, r5, pc}
 800a7c2:	bf00      	nop
 800a7c4:	20000454 	.word	0x20000454

0800a7c8 <_getpid_r>:
 800a7c8:	f7f7 bfa0 	b.w	800270c <_getpid>

0800a7cc <__sread>:
 800a7cc:	b510      	push	{r4, lr}
 800a7ce:	460c      	mov	r4, r1
 800a7d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7d4:	f000 f894 	bl	800a900 <_read_r>
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	bfab      	itete	ge
 800a7dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a7de:	89a3      	ldrhlt	r3, [r4, #12]
 800a7e0:	181b      	addge	r3, r3, r0
 800a7e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a7e6:	bfac      	ite	ge
 800a7e8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a7ea:	81a3      	strhlt	r3, [r4, #12]
 800a7ec:	bd10      	pop	{r4, pc}

0800a7ee <__swrite>:
 800a7ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7f2:	461f      	mov	r7, r3
 800a7f4:	898b      	ldrh	r3, [r1, #12]
 800a7f6:	4605      	mov	r5, r0
 800a7f8:	05db      	lsls	r3, r3, #23
 800a7fa:	460c      	mov	r4, r1
 800a7fc:	4616      	mov	r6, r2
 800a7fe:	d505      	bpl.n	800a80c <__swrite+0x1e>
 800a800:	2302      	movs	r3, #2
 800a802:	2200      	movs	r2, #0
 800a804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a808:	f000 f868 	bl	800a8dc <_lseek_r>
 800a80c:	89a3      	ldrh	r3, [r4, #12]
 800a80e:	4632      	mov	r2, r6
 800a810:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a814:	81a3      	strh	r3, [r4, #12]
 800a816:	4628      	mov	r0, r5
 800a818:	463b      	mov	r3, r7
 800a81a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a81e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a822:	f000 b817 	b.w	800a854 <_write_r>

0800a826 <__sseek>:
 800a826:	b510      	push	{r4, lr}
 800a828:	460c      	mov	r4, r1
 800a82a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a82e:	f000 f855 	bl	800a8dc <_lseek_r>
 800a832:	1c43      	adds	r3, r0, #1
 800a834:	89a3      	ldrh	r3, [r4, #12]
 800a836:	bf15      	itete	ne
 800a838:	6560      	strne	r0, [r4, #84]	; 0x54
 800a83a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a83e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a842:	81a3      	strheq	r3, [r4, #12]
 800a844:	bf18      	it	ne
 800a846:	81a3      	strhne	r3, [r4, #12]
 800a848:	bd10      	pop	{r4, pc}

0800a84a <__sclose>:
 800a84a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a84e:	f000 b813 	b.w	800a878 <_close_r>
	...

0800a854 <_write_r>:
 800a854:	b538      	push	{r3, r4, r5, lr}
 800a856:	4604      	mov	r4, r0
 800a858:	4608      	mov	r0, r1
 800a85a:	4611      	mov	r1, r2
 800a85c:	2200      	movs	r2, #0
 800a85e:	4d05      	ldr	r5, [pc, #20]	; (800a874 <_write_r+0x20>)
 800a860:	602a      	str	r2, [r5, #0]
 800a862:	461a      	mov	r2, r3
 800a864:	f7f7 ff90 	bl	8002788 <_write>
 800a868:	1c43      	adds	r3, r0, #1
 800a86a:	d102      	bne.n	800a872 <_write_r+0x1e>
 800a86c:	682b      	ldr	r3, [r5, #0]
 800a86e:	b103      	cbz	r3, 800a872 <_write_r+0x1e>
 800a870:	6023      	str	r3, [r4, #0]
 800a872:	bd38      	pop	{r3, r4, r5, pc}
 800a874:	20000454 	.word	0x20000454

0800a878 <_close_r>:
 800a878:	b538      	push	{r3, r4, r5, lr}
 800a87a:	2300      	movs	r3, #0
 800a87c:	4d05      	ldr	r5, [pc, #20]	; (800a894 <_close_r+0x1c>)
 800a87e:	4604      	mov	r4, r0
 800a880:	4608      	mov	r0, r1
 800a882:	602b      	str	r3, [r5, #0]
 800a884:	f7f7 ff9c 	bl	80027c0 <_close>
 800a888:	1c43      	adds	r3, r0, #1
 800a88a:	d102      	bne.n	800a892 <_close_r+0x1a>
 800a88c:	682b      	ldr	r3, [r5, #0]
 800a88e:	b103      	cbz	r3, 800a892 <_close_r+0x1a>
 800a890:	6023      	str	r3, [r4, #0]
 800a892:	bd38      	pop	{r3, r4, r5, pc}
 800a894:	20000454 	.word	0x20000454

0800a898 <_fstat_r>:
 800a898:	b538      	push	{r3, r4, r5, lr}
 800a89a:	2300      	movs	r3, #0
 800a89c:	4d06      	ldr	r5, [pc, #24]	; (800a8b8 <_fstat_r+0x20>)
 800a89e:	4604      	mov	r4, r0
 800a8a0:	4608      	mov	r0, r1
 800a8a2:	4611      	mov	r1, r2
 800a8a4:	602b      	str	r3, [r5, #0]
 800a8a6:	f7f7 ff96 	bl	80027d6 <_fstat>
 800a8aa:	1c43      	adds	r3, r0, #1
 800a8ac:	d102      	bne.n	800a8b4 <_fstat_r+0x1c>
 800a8ae:	682b      	ldr	r3, [r5, #0]
 800a8b0:	b103      	cbz	r3, 800a8b4 <_fstat_r+0x1c>
 800a8b2:	6023      	str	r3, [r4, #0]
 800a8b4:	bd38      	pop	{r3, r4, r5, pc}
 800a8b6:	bf00      	nop
 800a8b8:	20000454 	.word	0x20000454

0800a8bc <_isatty_r>:
 800a8bc:	b538      	push	{r3, r4, r5, lr}
 800a8be:	2300      	movs	r3, #0
 800a8c0:	4d05      	ldr	r5, [pc, #20]	; (800a8d8 <_isatty_r+0x1c>)
 800a8c2:	4604      	mov	r4, r0
 800a8c4:	4608      	mov	r0, r1
 800a8c6:	602b      	str	r3, [r5, #0]
 800a8c8:	f7f7 ff94 	bl	80027f4 <_isatty>
 800a8cc:	1c43      	adds	r3, r0, #1
 800a8ce:	d102      	bne.n	800a8d6 <_isatty_r+0x1a>
 800a8d0:	682b      	ldr	r3, [r5, #0]
 800a8d2:	b103      	cbz	r3, 800a8d6 <_isatty_r+0x1a>
 800a8d4:	6023      	str	r3, [r4, #0]
 800a8d6:	bd38      	pop	{r3, r4, r5, pc}
 800a8d8:	20000454 	.word	0x20000454

0800a8dc <_lseek_r>:
 800a8dc:	b538      	push	{r3, r4, r5, lr}
 800a8de:	4604      	mov	r4, r0
 800a8e0:	4608      	mov	r0, r1
 800a8e2:	4611      	mov	r1, r2
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	4d05      	ldr	r5, [pc, #20]	; (800a8fc <_lseek_r+0x20>)
 800a8e8:	602a      	str	r2, [r5, #0]
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	f7f7 ff8c 	bl	8002808 <_lseek>
 800a8f0:	1c43      	adds	r3, r0, #1
 800a8f2:	d102      	bne.n	800a8fa <_lseek_r+0x1e>
 800a8f4:	682b      	ldr	r3, [r5, #0]
 800a8f6:	b103      	cbz	r3, 800a8fa <_lseek_r+0x1e>
 800a8f8:	6023      	str	r3, [r4, #0]
 800a8fa:	bd38      	pop	{r3, r4, r5, pc}
 800a8fc:	20000454 	.word	0x20000454

0800a900 <_read_r>:
 800a900:	b538      	push	{r3, r4, r5, lr}
 800a902:	4604      	mov	r4, r0
 800a904:	4608      	mov	r0, r1
 800a906:	4611      	mov	r1, r2
 800a908:	2200      	movs	r2, #0
 800a90a:	4d05      	ldr	r5, [pc, #20]	; (800a920 <_read_r+0x20>)
 800a90c:	602a      	str	r2, [r5, #0]
 800a90e:	461a      	mov	r2, r3
 800a910:	f7f7 ff1d 	bl	800274e <_read>
 800a914:	1c43      	adds	r3, r0, #1
 800a916:	d102      	bne.n	800a91e <_read_r+0x1e>
 800a918:	682b      	ldr	r3, [r5, #0]
 800a91a:	b103      	cbz	r3, 800a91e <_read_r+0x1e>
 800a91c:	6023      	str	r3, [r4, #0]
 800a91e:	bd38      	pop	{r3, r4, r5, pc}
 800a920:	20000454 	.word	0x20000454

0800a924 <_init>:
 800a924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a926:	bf00      	nop
 800a928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a92a:	bc08      	pop	{r3}
 800a92c:	469e      	mov	lr, r3
 800a92e:	4770      	bx	lr

0800a930 <_fini>:
 800a930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a932:	bf00      	nop
 800a934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a936:	bc08      	pop	{r3}
 800a938:	469e      	mov	lr, r3
 800a93a:	4770      	bx	lr
