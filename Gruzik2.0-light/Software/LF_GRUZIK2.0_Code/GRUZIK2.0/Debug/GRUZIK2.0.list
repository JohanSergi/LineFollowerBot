
GRUZIK2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3ec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  0800b500  0800b500  0001b500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb20  0800bb20  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800bb20  0800bb20  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bb20  0800bb20  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb20  0800bb20  0001bb20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb24  0800bb24  0001bb24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800bb28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  200001e4  0800bd0c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000538  0800bd0c  00020538  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010cef  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c09  00000000  00000000  00030efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  00033b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e50  00000000  00000000  00034aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003723  00000000  00000000  000358f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013230  00000000  00000000  00039013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091397  00000000  00000000  0004c243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd5da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055b0  00000000  00000000  000dd62c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b4e4 	.word	0x0800b4e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800b4e4 	.word	0x0800b4e4

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_f2iz>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800112c:	d30f      	bcc.n	800114e <__aeabi_f2iz+0x2a>
 800112e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001132:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001136:	d90d      	bls.n	8001154 <__aeabi_f2iz+0x30>
 8001138:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800113c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001140:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001144:	fa23 f002 	lsr.w	r0, r3, r2
 8001148:	bf18      	it	ne
 800114a:	4240      	negne	r0, r0
 800114c:	4770      	bx	lr
 800114e:	f04f 0000 	mov.w	r0, #0
 8001152:	4770      	bx	lr
 8001154:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001158:	d101      	bne.n	800115e <__aeabi_f2iz+0x3a>
 800115a:	0242      	lsls	r2, r0, #9
 800115c:	d105      	bne.n	800116a <__aeabi_f2iz+0x46>
 800115e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001162:	bf08      	it	eq
 8001164:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr

08001170 <__aeabi_d2lz>:
 8001170:	b538      	push	{r3, r4, r5, lr}
 8001172:	4605      	mov	r5, r0
 8001174:	460c      	mov	r4, r1
 8001176:	2200      	movs	r2, #0
 8001178:	2300      	movs	r3, #0
 800117a:	4628      	mov	r0, r5
 800117c:	4621      	mov	r1, r4
 800117e:	f7ff fc27 	bl	80009d0 <__aeabi_dcmplt>
 8001182:	b928      	cbnz	r0, 8001190 <__aeabi_d2lz+0x20>
 8001184:	4628      	mov	r0, r5
 8001186:	4621      	mov	r1, r4
 8001188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800118c:	f000 b80a 	b.w	80011a4 <__aeabi_d2ulz>
 8001190:	4628      	mov	r0, r5
 8001192:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001196:	f000 f805 	bl	80011a4 <__aeabi_d2ulz>
 800119a:	4240      	negs	r0, r0
 800119c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011a0:	bd38      	pop	{r3, r4, r5, pc}
 80011a2:	bf00      	nop

080011a4 <__aeabi_d2ulz>:
 80011a4:	b5d0      	push	{r4, r6, r7, lr}
 80011a6:	2200      	movs	r2, #0
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <__aeabi_d2ulz+0x34>)
 80011aa:	4606      	mov	r6, r0
 80011ac:	460f      	mov	r7, r1
 80011ae:	f7ff f99d 	bl	80004ec <__aeabi_dmul>
 80011b2:	f7ff fc73 	bl	8000a9c <__aeabi_d2uiz>
 80011b6:	4604      	mov	r4, r0
 80011b8:	f7ff f91e 	bl	80003f8 <__aeabi_ui2d>
 80011bc:	2200      	movs	r2, #0
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <__aeabi_d2ulz+0x38>)
 80011c0:	f7ff f994 	bl	80004ec <__aeabi_dmul>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4630      	mov	r0, r6
 80011ca:	4639      	mov	r1, r7
 80011cc:	f7fe ffd6 	bl	800017c <__aeabi_dsub>
 80011d0:	f7ff fc64 	bl	8000a9c <__aeabi_d2uiz>
 80011d4:	4621      	mov	r1, r4
 80011d6:	bdd0      	pop	{r4, r6, r7, pc}
 80011d8:	3df00000 	.word	0x3df00000
 80011dc:	41f00000 	.word	0x41f00000

080011e0 <RB_Write>:
 */
#include "main.h"
#include "RingBuffer.h"

RB_Status RB_Write(RingBuffer_t *Buf, uint8_t value)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	70fb      	strb	r3, [r7, #3]
	uint8_t HeadTmp = (Buf->Head + 1) % RING_BUFFER_SIZE;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	3301      	adds	r3, #1
 80011f2:	425a      	negs	r2, r3
 80011f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011f8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80011fc:	bf58      	it	pl
 80011fe:	4253      	negpl	r3, r2
 8001200:	73fb      	strb	r3, [r7, #15]

	if(HeadTmp == Buf->Tail)
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	b29a      	uxth	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	885b      	ldrh	r3, [r3, #2]
 800120a:	429a      	cmp	r2, r3
 800120c:	d101      	bne.n	8001212 <RB_Write+0x32>
	{
		return RB_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e00b      	b.n	800122a <RB_Write+0x4a>
	}

	Buf->Buffer[Buf->Head] = value;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	461a      	mov	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4413      	add	r3, r2
 800121c:	78fa      	ldrb	r2, [r7, #3]
 800121e:	711a      	strb	r2, [r3, #4]

	Buf->Head = HeadTmp;
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	b29a      	uxth	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	801a      	strh	r2, [r3, #0]

	return RB_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr

08001234 <RB_Read>:

RB_Status RB_Read(RingBuffer_t *Buf, uint8_t *value)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
	if(Buf->Head == Buf->Tail)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	881a      	ldrh	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	885b      	ldrh	r3, [r3, #2]
 8001246:	429a      	cmp	r2, r3
 8001248:	d101      	bne.n	800124e <RB_Read+0x1a>
	{
		return RB_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e015      	b.n	800127a <RB_Read+0x46>
	}

	*value = Buf->Buffer[Buf->Tail];
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	885b      	ldrh	r3, [r3, #2]
 8001252:	461a      	mov	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4413      	add	r3, r2
 8001258:	791a      	ldrb	r2, [r3, #4]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	701a      	strb	r2, [r3, #0]

	Buf->Tail = (Buf->Tail + 1) % RING_BUFFER_SIZE;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	885b      	ldrh	r3, [r3, #2]
 8001262:	3301      	adds	r3, #1
 8001264:	425a      	negs	r2, r3
 8001266:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800126a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800126e:	bf58      	it	pl
 8001270:	4253      	negpl	r3, r2
 8001272:	b29a      	uxth	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	805a      	strh	r2, [r3, #2]

	return RB_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <Parser_TakeLine>:
#include "SimpleParser.h"
#include "Line_Follower.h"
char My_Name[32] = "GRUZIK2.0";

void Parser_TakeLine(RingBuffer_t *Buf, uint8_t *ReceivedData)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
	uint8_t Tmp;
	uint8_t i = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	73fb      	strb	r3, [r7, #15]
	do
	{
		RB_Read(Buf, &Tmp);
 8001292:	f107 030e 	add.w	r3, r7, #14
 8001296:	4619      	mov	r1, r3
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff ffcb 	bl	8001234 <RB_Read>

		if(Tmp == ENDLINE)
 800129e:	7bbb      	ldrb	r3, [r7, #14]
 80012a0:	2b0a      	cmp	r3, #10
 80012a2:	d105      	bne.n	80012b0 <Parser_TakeLine+0x2c>
		{
			ReceivedData[i] = 0;
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	4413      	add	r3, r2
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
 80012ae:	e004      	b.n	80012ba <Parser_TakeLine+0x36>

		}

		else
		{
			ReceivedData[i] = Tmp;
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	4413      	add	r3, r2
 80012b6:	7bba      	ldrb	r2, [r7, #14]
 80012b8:	701a      	strb	r2, [r3, #0]
		}
		i++;
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	3301      	adds	r3, #1
 80012be:	73fb      	strb	r3, [r7, #15]

	} while(Tmp != ENDLINE);
 80012c0:	7bbb      	ldrb	r3, [r7, #14]
 80012c2:	2b0a      	cmp	r3, #10
 80012c4:	d1e5      	bne.n	8001292 <Parser_TakeLine+0xe>

}
 80012c6:	bf00      	nop
 80012c8:	bf00      	nop
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <kp_change>:

static void kp_change(LineFollower_t *LF)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 80012d8:	490f      	ldr	r1, [pc, #60]	; (8001318 <kp_change+0x48>)
 80012da:	2000      	movs	r0, #0
 80012dc:	f007 f994 	bl	8008608 <strtok>
 80012e0:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d011      	beq.n	800130e <kp_change+0x3e>
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f7fe ff3a 	bl	8000164 <strlen>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b1f      	cmp	r3, #31
 80012f4:	d80b      	bhi.n	800130e <kp_change+0x3e>
	{
		LF->Kp = atof(ParsePointer);
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f005 feb8 	bl	800706c <atof>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4610      	mov	r0, r2
 8001302:	4619      	mov	r1, r3
 8001304:	f7ff fbea 	bl	8000adc <__aeabi_d2f>
 8001308:	4602      	mov	r2, r0
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	601a      	str	r2, [r3, #0]
	}

}
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	0800b500 	.word	0x0800b500

0800131c <kd_change>:
static void kd_change(LineFollower_t *LF)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001324:	490f      	ldr	r1, [pc, #60]	; (8001364 <kd_change+0x48>)
 8001326:	2000      	movs	r0, #0
 8001328:	f007 f96e 	bl	8008608 <strtok>
 800132c:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d011      	beq.n	800135a <kd_change+0x3e>
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f7fe ff14 	bl	8000164 <strlen>
 800133c:	4603      	mov	r3, r0
 800133e:	2b1f      	cmp	r3, #31
 8001340:	d80b      	bhi.n	800135a <kd_change+0x3e>
	{
		LF->Kd = atof(ParsePointer);
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f005 fe92 	bl	800706c <atof>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	f7ff fbc4 	bl	8000adc <__aeabi_d2f>
 8001354:	4602      	mov	r2, r0
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	605a      	str	r2, [r3, #4]
	}
}
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	0800b500 	.word	0x0800b500

08001368 <Base_speed_change>:
static void Base_speed_change(LineFollower_t *LF)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001370:	4915      	ldr	r1, [pc, #84]	; (80013c8 <Base_speed_change+0x60>)
 8001372:	2000      	movs	r0, #0
 8001374:	f007 f948 	bl	8008608 <strtok>
 8001378:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d01d      	beq.n	80013be <Base_speed_change+0x56>
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f7fe feee 	bl	8000164 <strlen>
 8001388:	4603      	mov	r3, r0
 800138a:	2b1f      	cmp	r3, #31
 800138c:	d817      	bhi.n	80013be <Base_speed_change+0x56>
	{
		LF->Base_speed_R = atof(ParsePointer);
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f005 fe6c 	bl	800706c <atof>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4610      	mov	r0, r2
 800139a:	4619      	mov	r1, r3
 800139c:	f7ff fb56 	bl	8000a4c <__aeabi_d2iz>
 80013a0:	4602      	mov	r2, r0
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	609a      	str	r2, [r3, #8]
		LF->Base_speed_L = atof(ParsePointer);
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f005 fe60 	bl	800706c <atof>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4610      	mov	r0, r2
 80013b2:	4619      	mov	r1, r3
 80013b4:	f7ff fb4a 	bl	8000a4c <__aeabi_d2iz>
 80013b8:	4602      	mov	r2, r0
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	60da      	str	r2, [r3, #12]
	}
}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	0800b500 	.word	0x0800b500

080013cc <Max_speed_change>:

static void Max_speed_change(LineFollower_t *LF)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 80013d4:	4915      	ldr	r1, [pc, #84]	; (800142c <Max_speed_change+0x60>)
 80013d6:	2000      	movs	r0, #0
 80013d8:	f007 f916 	bl	8008608 <strtok>
 80013dc:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d01d      	beq.n	8001422 <Max_speed_change+0x56>
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f7fe febc 	bl	8000164 <strlen>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b1f      	cmp	r3, #31
 80013f0:	d817      	bhi.n	8001422 <Max_speed_change+0x56>
	{
		LF->Max_speed_R = atof(ParsePointer);
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f005 fe3a 	bl	800706c <atof>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	4610      	mov	r0, r2
 80013fe:	4619      	mov	r1, r3
 8001400:	f7ff fb24 	bl	8000a4c <__aeabi_d2iz>
 8001404:	4602      	mov	r2, r0
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	611a      	str	r2, [r3, #16]
		LF->Max_speed_L = atof(ParsePointer);
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f005 fe2e 	bl	800706c <atof>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4610      	mov	r0, r2
 8001416:	4619      	mov	r1, r3
 8001418:	f7ff fb18 	bl	8000a4c <__aeabi_d2iz>
 800141c:	4602      	mov	r2, r0
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	615a      	str	r2, [r3, #20]
	}
}
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	0800b500 	.word	0x0800b500

08001430 <Sharp_bend_speed_right_change>:
static void Sharp_bend_speed_right_change(LineFollower_t *LF)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001438:	490f      	ldr	r1, [pc, #60]	; (8001478 <Sharp_bend_speed_right_change+0x48>)
 800143a:	2000      	movs	r0, #0
 800143c:	f007 f8e4 	bl	8008608 <strtok>
 8001440:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d011      	beq.n	800146e <Sharp_bend_speed_right_change+0x3e>
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f7fe fe8a 	bl	8000164 <strlen>
 8001450:	4603      	mov	r3, r0
 8001452:	2b1f      	cmp	r3, #31
 8001454:	d80b      	bhi.n	800146e <Sharp_bend_speed_right_change+0x3e>
	{
	LF->Sharp_bend_speed_right = atof(ParsePointer);
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f005 fe08 	bl	800706c <atof>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff faf2 	bl	8000a4c <__aeabi_d2iz>
 8001468:	4602      	mov	r2, r0
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	619a      	str	r2, [r3, #24]
	}
}
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	0800b500 	.word	0x0800b500

0800147c <Sharp_bend_speed_left_change>:
static void Sharp_bend_speed_left_change(LineFollower_t *LF)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001484:	490f      	ldr	r1, [pc, #60]	; (80014c4 <Sharp_bend_speed_left_change+0x48>)
 8001486:	2000      	movs	r0, #0
 8001488:	f007 f8be 	bl	8008608 <strtok>
 800148c:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d011      	beq.n	80014ba <Sharp_bend_speed_left_change+0x3e>
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	f7fe fe64 	bl	8000164 <strlen>
 800149c:	4603      	mov	r3, r0
 800149e:	2b1f      	cmp	r3, #31
 80014a0:	d80b      	bhi.n	80014ba <Sharp_bend_speed_left_change+0x3e>
	{
	LF->Sharp_bend_speed_left = atof(ParsePointer);
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f005 fde2 	bl	800706c <atof>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	f7ff facc 	bl	8000a4c <__aeabi_d2iz>
 80014b4:	4602      	mov	r2, r0
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	61da      	str	r2, [r3, #28]
	}
}
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	0800b500 	.word	0x0800b500

080014c8 <Bend_speed_right_change>:
static void Bend_speed_right_change(LineFollower_t *LF)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 80014d0:	490f      	ldr	r1, [pc, #60]	; (8001510 <Bend_speed_right_change+0x48>)
 80014d2:	2000      	movs	r0, #0
 80014d4:	f007 f898 	bl	8008608 <strtok>
 80014d8:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d011      	beq.n	8001506 <Bend_speed_right_change+0x3e>
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f7fe fe3e 	bl	8000164 <strlen>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b1f      	cmp	r3, #31
 80014ec:	d80b      	bhi.n	8001506 <Bend_speed_right_change+0x3e>
	{
	LF->Bend_speed_right = atof(ParsePointer);
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f005 fdbc 	bl	800706c <atof>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	f7ff faa6 	bl	8000a4c <__aeabi_d2iz>
 8001500:	4602      	mov	r2, r0
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	621a      	str	r2, [r3, #32]
	}
}
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	0800b500 	.word	0x0800b500

08001514 <Bend_speed_left_change>:
static void Bend_speed_left_change(LineFollower_t *LF)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 800151c:	490f      	ldr	r1, [pc, #60]	; (800155c <Bend_speed_left_change+0x48>)
 800151e:	2000      	movs	r0, #0
 8001520:	f007 f872 	bl	8008608 <strtok>
 8001524:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d011      	beq.n	8001552 <Bend_speed_left_change+0x3e>
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f7fe fe18 	bl	8000164 <strlen>
 8001534:	4603      	mov	r3, r0
 8001536:	2b1f      	cmp	r3, #31
 8001538:	d80b      	bhi.n	8001552 <Bend_speed_left_change+0x3e>
	{
	LF->Bend_speed_left = atof(ParsePointer);
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f005 fd96 	bl	800706c <atof>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f7ff fa80 	bl	8000a4c <__aeabi_d2iz>
 800154c:	4602      	mov	r2, r0
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	0800b500 	.word	0x0800b500

08001560 <App_Controll>:
static void App_Controll(char RxData, LineFollower_t *LineFollower)
{
 8001560:	b5b0      	push	{r4, r5, r7, lr}
 8001562:	b092      	sub	sp, #72	; 0x48
 8001564:	af02      	add	r7, sp, #8
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	71fb      	strb	r3, [r7, #7]
	/*Stop robot*/
	if(RxData == 'N')
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	2b4e      	cmp	r3, #78	; 0x4e
 8001570:	d145      	bne.n	80015fe <App_Controll+0x9e>
	{
		uint8_t buffer[48];
		/*Stop GRUZIK2.0 and turn off the LED*/
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001572:	2200      	movs	r2, #0
 8001574:	2140      	movs	r1, #64	; 0x40
 8001576:	4858      	ldr	r0, [pc, #352]	; (80016d8 <App_Controll+0x178>)
 8001578:	f003 f9b5 	bl	80048e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800157c:	2200      	movs	r2, #0
 800157e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001582:	4856      	ldr	r0, [pc, #344]	; (80016dc <App_Controll+0x17c>)
 8001584:	f003 f9af 	bl	80048e6 <HAL_GPIO_WritePin>

		/*Send battery voltage*/
		LineFollower->battery_voltage = (LineFollower->Adc_Value * 8.3)/3831;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800158c:	4618      	mov	r0, r3
 800158e:	f7fe ff43 	bl	8000418 <__aeabi_i2d>
 8001592:	a349      	add	r3, pc, #292	; (adr r3, 80016b8 <App_Controll+0x158>)
 8001594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001598:	f7fe ffa8 	bl	80004ec <__aeabi_dmul>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4610      	mov	r0, r2
 80015a2:	4619      	mov	r1, r3
 80015a4:	a346      	add	r3, pc, #280	; (adr r3, 80016c0 <App_Controll+0x160>)
 80015a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015aa:	f7ff f8c9 	bl	8000740 <__aeabi_ddiv>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	f7ff fa91 	bl	8000adc <__aeabi_d2f>
 80015ba:	4602      	mov	r2, r0
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	629a      	str	r2, [r3, #40]	; 0x28
		sprintf((char*)buffer, "ADC_Value = %d \r\n Battery_Voltage = %0.2f V \r\n", LineFollower->Adc_Value, LineFollower->battery_voltage);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80015c4:	461c      	mov	r4, r3
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ff36 	bl	800043c <__aeabi_f2d>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	f107 000c 	add.w	r0, r7, #12
 80015d8:	e9cd 2300 	strd	r2, r3, [sp]
 80015dc:	4622      	mov	r2, r4
 80015de:	4940      	ldr	r1, [pc, #256]	; (80016e0 <App_Controll+0x180>)
 80015e0:	f006 f9da 	bl	8007998 <siprintf>
		HAL_UART_Transmit(&huart1, buffer, strlen((char*)buffer), 100);
 80015e4:	f107 030c 	add.w	r3, r7, #12
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe fdbb 	bl	8000164 <strlen>
 80015ee:	4603      	mov	r3, r0
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	f107 010c 	add.w	r1, r7, #12
 80015f6:	2364      	movs	r3, #100	; 0x64
 80015f8:	483a      	ldr	r0, [pc, #232]	; (80016e4 <App_Controll+0x184>)
 80015fa:	f004 ff0f 	bl	800641c <HAL_UART_Transmit>
	}
	/*Start robot*/
	if (RxData == 'Y')
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	2b59      	cmp	r3, #89	; 0x59
 8001602:	f040 8105 	bne.w	8001810 <App_Controll+0x2b0>
		/*Proportional to battery percentage boost for motors
		 * to keep roughly same speed as with full battery*/
		float battery_percentage;
		uint8_t buffer[48];
		//Calculate battery percentage based on battery voltage
		LineFollower->battery_voltage = (LineFollower->Adc_Value * 8.3)/3831;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ff04 	bl	8000418 <__aeabi_i2d>
 8001610:	a329      	add	r3, pc, #164	; (adr r3, 80016b8 <App_Controll+0x158>)
 8001612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001616:	f7fe ff69 	bl	80004ec <__aeabi_dmul>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	a327      	add	r3, pc, #156	; (adr r3, 80016c0 <App_Controll+0x160>)
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	f7ff f88a 	bl	8000740 <__aeabi_ddiv>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f7ff fa52 	bl	8000adc <__aeabi_d2f>
 8001638:	4602      	mov	r2, r0
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	629a      	str	r2, [r3, #40]	; 0x28

		//Full battery voltage in working line follower is about 8.24V
		battery_percentage = (LineFollower->battery_voltage / 8.24) * 100;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe fefa 	bl	800043c <__aeabi_f2d>
 8001648:	a31f      	add	r3, pc, #124	; (adr r3, 80016c8 <App_Controll+0x168>)
 800164a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164e:	f7ff f877 	bl	8000740 <__aeabi_ddiv>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <App_Controll+0x188>)
 8001660:	f7fe ff44 	bl	80004ec <__aeabi_dmul>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4610      	mov	r0, r2
 800166a:	4619      	mov	r1, r3
 800166c:	f7ff fa36 	bl	8000adc <__aeabi_d2f>
 8001670:	4603      	mov	r3, r0
 8001672:	63fb      	str	r3, [r7, #60]	; 0x3c

		/*To don't damage 2s LiPo battery Line follower can't start with battery below 7.2V*/
		if (LineFollower->battery_voltage < 7.2)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe fedf 	bl	800043c <__aeabi_f2d>
 800167e:	a314      	add	r3, pc, #80	; (adr r3, 80016d0 <App_Controll+0x170>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	f7ff f9a4 	bl	80009d0 <__aeabi_dcmplt>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d030      	beq.n	80016f0 <App_Controll+0x190>
		{
			sprintf((char*)buffer, "! Low Battery !\r\n");
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	4916      	ldr	r1, [pc, #88]	; (80016ec <App_Controll+0x18c>)
 8001694:	4618      	mov	r0, r3
 8001696:	f006 f97f 	bl	8007998 <siprintf>
			HAL_UART_Transmit(&huart1, buffer, strlen((char*)buffer), 100);
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe fd60 	bl	8000164 <strlen>
 80016a4:	4603      	mov	r3, r0
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	f107 010c 	add.w	r1, r7, #12
 80016ac:	2364      	movs	r3, #100	; 0x64
 80016ae:	480d      	ldr	r0, [pc, #52]	; (80016e4 <App_Controll+0x184>)
 80016b0:	f004 feb4 	bl	800641c <HAL_UART_Transmit>
 80016b4:	e339      	b.n	8001d2a <App_Controll+0x7ca>
 80016b6:	bf00      	nop
 80016b8:	9999999a 	.word	0x9999999a
 80016bc:	40209999 	.word	0x40209999
 80016c0:	00000000 	.word	0x00000000
 80016c4:	40adee00 	.word	0x40adee00
 80016c8:	47ae147b 	.word	0x47ae147b
 80016cc:	40207ae1 	.word	0x40207ae1
 80016d0:	cccccccd 	.word	0xcccccccd
 80016d4:	401ccccc 	.word	0x401ccccc
 80016d8:	40010c00 	.word	0x40010c00
 80016dc:	40011000 	.word	0x40011000
 80016e0:	0800b504 	.word	0x0800b504
 80016e4:	20000494 	.word	0x20000494
 80016e8:	40590000 	.word	0x40590000
 80016ec:	0800b534 	.word	0x0800b534
			return;
		}
		/*Motor speed*/
		LineFollower->Speed_level = ((100 - battery_percentage + 100) / 100) - LineFollower->Speed_offset;
 80016f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80016f2:	48a5      	ldr	r0, [pc, #660]	; (8001988 <App_Controll+0x428>)
 80016f4:	f7ff fa46 	bl	8000b84 <__aeabi_fsub>
 80016f8:	4603      	mov	r3, r0
 80016fa:	49a3      	ldr	r1, [pc, #652]	; (8001988 <App_Controll+0x428>)
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fa43 	bl	8000b88 <__addsf3>
 8001702:	4603      	mov	r3, r0
 8001704:	49a0      	ldr	r1, [pc, #640]	; (8001988 <App_Controll+0x428>)
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fbfa 	bl	8000f00 <__aeabi_fdiv>
 800170c:	4603      	mov	r3, r0
 800170e:	461a      	mov	r2, r3
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001714:	4619      	mov	r1, r3
 8001716:	4610      	mov	r0, r2
 8001718:	f7ff fa34 	bl	8000b84 <__aeabi_fsub>
 800171c:	4603      	mov	r3, r0
 800171e:	461a      	mov	r2, r3
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	631a      	str	r2, [r3, #48]	; 0x30

		if(LineFollower->Speed_level < 1)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001728:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fcd1 	bl	80010d4 <__aeabi_fcmplt>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <App_Controll+0x1e0>
		{
			LineFollower->Speed_level = 1;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800173e:	631a      	str	r2, [r3, #48]	; 0x30
		}

		/*Send battery data*/
		LineFollower->battery_voltage = (LineFollower->Adc_Value * 8.3)/3831;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe fe67 	bl	8000418 <__aeabi_i2d>
 800174a:	a38b      	add	r3, pc, #556	; (adr r3, 8001978 <App_Controll+0x418>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7fe fecc 	bl	80004ec <__aeabi_dmul>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	a388      	add	r3, pc, #544	; (adr r3, 8001980 <App_Controll+0x420>)
 800175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001762:	f7fe ffed 	bl	8000740 <__aeabi_ddiv>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	f7ff f9b5 	bl	8000adc <__aeabi_d2f>
 8001772:	4602      	mov	r2, r0
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	629a      	str	r2, [r3, #40]	; 0x28
		sprintf((char*)buffer, "ADC_Value = %d \r\n Battery_Voltage = %0.2f V \r\n", LineFollower->Adc_Value, LineFollower->battery_voltage);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800177c:	461c      	mov	r4, r3
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fe5a 	bl	800043c <__aeabi_f2d>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	f107 000c 	add.w	r0, r7, #12
 8001790:	e9cd 2300 	strd	r2, r3, [sp]
 8001794:	4622      	mov	r2, r4
 8001796:	497d      	ldr	r1, [pc, #500]	; (800198c <App_Controll+0x42c>)
 8001798:	f006 f8fe 	bl	8007998 <siprintf>
		HAL_UART_Transmit(&huart1, buffer, strlen((char*)buffer), 100);
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fcdf 	bl	8000164 <strlen>
 80017a6:	4603      	mov	r3, r0
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	f107 010c 	add.w	r1, r7, #12
 80017ae:	2364      	movs	r3, #100	; 0x64
 80017b0:	4877      	ldr	r0, [pc, #476]	; (8001990 <App_Controll+0x430>)
 80017b2:	f004 fe33 	bl	800641c <HAL_UART_Transmit>


		sprintf((char*)buffer, "Percentage = %0.2f \r\n Speed_level = %0.2f \r\n", battery_percentage, LineFollower->Speed_level);
 80017b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80017b8:	f7fe fe40 	bl	800043c <__aeabi_f2d>
 80017bc:	4604      	mov	r4, r0
 80017be:	460d      	mov	r5, r1
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fe39 	bl	800043c <__aeabi_f2d>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	f107 000c 	add.w	r0, r7, #12
 80017d2:	e9cd 2300 	strd	r2, r3, [sp]
 80017d6:	4622      	mov	r2, r4
 80017d8:	462b      	mov	r3, r5
 80017da:	496e      	ldr	r1, [pc, #440]	; (8001994 <App_Controll+0x434>)
 80017dc:	f006 f8dc 	bl	8007998 <siprintf>
		HAL_UART_Transmit(&huart1, buffer, strlen((char*)buffer), 100);
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe fcbd 	bl	8000164 <strlen>
 80017ea:	4603      	mov	r3, r0
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	f107 010c 	add.w	r1, r7, #12
 80017f2:	2364      	movs	r3, #100	; 0x64
 80017f4:	4866      	ldr	r0, [pc, #408]	; (8001990 <App_Controll+0x430>)
 80017f6:	f004 fe11 	bl	800641c <HAL_UART_Transmit>

		/*Stop LineFollower and turn on the LED*/
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80017fa:	2201      	movs	r2, #1
 80017fc:	2140      	movs	r1, #64	; 0x40
 80017fe:	4866      	ldr	r0, [pc, #408]	; (8001998 <App_Controll+0x438>)
 8001800:	f003 f871 	bl	80048e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001804:	2201      	movs	r2, #1
 8001806:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800180a:	4864      	ldr	r0, [pc, #400]	; (800199c <App_Controll+0x43c>)
 800180c:	f003 f86b 	bl	80048e6 <HAL_GPIO_WritePin>
	}
	/*LOW mode*/
	if(RxData == 'a')
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	2b61      	cmp	r3, #97	; 0x61
 8001814:	d11f      	bne.n	8001856 <App_Controll+0x2f6>
	{
		LineFollower->Base_speed_R = 100;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2264      	movs	r2, #100	; 0x64
 800181a:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 100;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	2264      	movs	r2, #100	; 0x64
 8001820:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 100;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	2264      	movs	r2, #100	; 0x64
 8001826:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 100;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	2264      	movs	r2, #100	; 0x64
 800182c:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right =- 50;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001834:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 50;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	2232      	movs	r2, #50	; 0x32
 800183a:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001842:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 50;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	2232      	movs	r2, #50	; 0x32
 8001848:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	4a54      	ldr	r2, [pc, #336]	; (80019a0 <App_Controll+0x440>)
 800184e:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.1;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	4a54      	ldr	r2, [pc, #336]	; (80019a4 <App_Controll+0x444>)
 8001854:	605a      	str	r2, [r3, #4]
	}
	/*LOW+ mode*/
	if(RxData == 'd')
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	2b64      	cmp	r3, #100	; 0x64
 800185a:	d11f      	bne.n	800189c <App_Controll+0x33c>
	{
		LineFollower->Base_speed_R = 105;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	2269      	movs	r2, #105	; 0x69
 8001860:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 105;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	2269      	movs	r2, #105	; 0x69
 8001866:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 105;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	2269      	movs	r2, #105	; 0x69
 800186c:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 105;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	2269      	movs	r2, #105	; 0x69
 8001872:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -60;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 800187a:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 50;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	2232      	movs	r2, #50	; 0x32
 8001880:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -60;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 8001888:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 50;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	2232      	movs	r2, #50	; 0x32
 800188e:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	4a43      	ldr	r2, [pc, #268]	; (80019a0 <App_Controll+0x440>)
 8001894:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.1;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	4a42      	ldr	r2, [pc, #264]	; (80019a4 <App_Controll+0x444>)
 800189a:	605a      	str	r2, [r3, #4]
	}
	/*Medium mode*/
	if(RxData == 'b')
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	2b62      	cmp	r3, #98	; 0x62
 80018a0:	d120      	bne.n	80018e4 <App_Controll+0x384>
	{
		LineFollower->Base_speed_R = 115;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	2273      	movs	r2, #115	; 0x73
 80018a6:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 115;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	2273      	movs	r2, #115	; 0x73
 80018ac:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 115;
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	2273      	movs	r2, #115	; 0x73
 80018b2:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 115;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	2273      	movs	r2, #115	; 0x73
 80018b8:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -70;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	f06f 0245 	mvn.w	r2, #69	; 0x45
 80018c0:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 85;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	2255      	movs	r2, #85	; 0x55
 80018c6:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	f06f 0231 	mvn.w	r2, #49	; 0x31
 80018ce:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 110;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	226e      	movs	r2, #110	; 0x6e
 80018d4:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	4a31      	ldr	r2, [pc, #196]	; (80019a0 <App_Controll+0x440>)
 80018da:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.25;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80018e2:	605a      	str	r2, [r3, #4]
	}
	/*Medium+ mode*/
	if(RxData == 'e')
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	2b65      	cmp	r3, #101	; 0x65
 80018e8:	d120      	bne.n	800192c <App_Controll+0x3cc>
	{
		LineFollower->Base_speed_R = 120;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	2278      	movs	r2, #120	; 0x78
 80018ee:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 120;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	2278      	movs	r2, #120	; 0x78
 80018f4:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 120;
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	2278      	movs	r2, #120	; 0x78
 80018fa:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 120;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	2278      	movs	r2, #120	; 0x78
 8001900:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -70;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	f06f 0245 	mvn.w	r2, #69	; 0x45
 8001908:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 85;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	2255      	movs	r2, #85	; 0x55
 800190e:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001916:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 110;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	226e      	movs	r2, #110	; 0x6e
 800191c:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	4a1f      	ldr	r2, [pc, #124]	; (80019a0 <App_Controll+0x440>)
 8001922:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.25;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800192a:	605a      	str	r2, [r3, #4]
	}
	/*HIGH mode*/
	if(RxData == 'c')
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	2b63      	cmp	r3, #99	; 0x63
 8001930:	d13c      	bne.n	80019ac <App_Controll+0x44c>
	{
		LineFollower->Base_speed_R = 125;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	227d      	movs	r2, #125	; 0x7d
 8001936:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 125;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	227d      	movs	r2, #125	; 0x7d
 800193c:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 125;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	227d      	movs	r2, #125	; 0x7d
 8001942:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 125;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	227d      	movs	r2, #125	; 0x7d
 8001948:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -70;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	f06f 0245 	mvn.w	r2, #69	; 0x45
 8001950:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 85;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	2255      	movs	r2, #85	; 0x55
 8001956:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	f06f 0231 	mvn.w	r2, #49	; 0x31
 800195e:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 110;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	226e      	movs	r2, #110	; 0x6e
 8001964:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	4a0d      	ldr	r2, [pc, #52]	; (80019a0 <App_Controll+0x440>)
 800196a:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.4;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	4a0e      	ldr	r2, [pc, #56]	; (80019a8 <App_Controll+0x448>)
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	e01b      	b.n	80019ac <App_Controll+0x44c>
 8001974:	f3af 8000 	nop.w
 8001978:	9999999a 	.word	0x9999999a
 800197c:	40209999 	.word	0x40209999
 8001980:	00000000 	.word	0x00000000
 8001984:	40adee00 	.word	0x40adee00
 8001988:	42c80000 	.word	0x42c80000
 800198c:	0800b504 	.word	0x0800b504
 8001990:	20000494 	.word	0x20000494
 8001994:	0800b548 	.word	0x0800b548
 8001998:	40010c00 	.word	0x40010c00
 800199c:	40011000 	.word	0x40011000
 80019a0:	3c75c28f 	.word	0x3c75c28f
 80019a4:	3dcccccd 	.word	0x3dcccccd
 80019a8:	3ecccccd 	.word	0x3ecccccd
	}
	/*HIGH+ mode*/
	if(RxData == 'f')
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	2b66      	cmp	r3, #102	; 0x66
 80019b0:	d11f      	bne.n	80019f2 <App_Controll+0x492>
	{
		LineFollower->Base_speed_R = 130;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	2282      	movs	r2, #130	; 0x82
 80019b6:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 130;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	2282      	movs	r2, #130	; 0x82
 80019bc:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 130;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	2282      	movs	r2, #130	; 0x82
 80019c2:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 130;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	2282      	movs	r2, #130	; 0x82
 80019c8:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -70;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	f06f 0245 	mvn.w	r2, #69	; 0x45
 80019d0:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 85;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	2255      	movs	r2, #85	; 0x55
 80019d6:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	f06f 0231 	mvn.w	r2, #49	; 0x31
 80019de:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 110;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	226e      	movs	r2, #110	; 0x6e
 80019e4:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	4a91      	ldr	r2, [pc, #580]	; (8001c30 <App_Controll+0x6d0>)
 80019ea:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.4;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	4a91      	ldr	r2, [pc, #580]	; (8001c34 <App_Controll+0x6d4>)
 80019f0:	605a      	str	r2, [r3, #4]
	}
	/*TRUBO mode*/
	if(RxData == 'i')
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	2b69      	cmp	r3, #105	; 0x69
 80019f6:	d121      	bne.n	8001a3c <App_Controll+0x4dc>
	{
		LineFollower->Base_speed_R = 270;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80019fe:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 270;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001a06:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 150;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	2296      	movs	r2, #150	; 0x96
 8001a0c:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 150;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2296      	movs	r2, #150	; 0x96
 8001a12:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -65;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a1a:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 70;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	2246      	movs	r2, #70	; 0x46
 8001a20:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -76;
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8001a28:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 130;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	2282      	movs	r2, #130	; 0x82
 8001a2e:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.045;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	4a81      	ldr	r2, [pc, #516]	; (8001c38 <App_Controll+0x6d8>)
 8001a34:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 75;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	4a80      	ldr	r2, [pc, #512]	; (8001c3c <App_Controll+0x6dc>)
 8001a3a:	605a      	str	r2, [r3, #4]
	}
	/*TRUBO+ mode*/
	if(RxData == 'j')
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	2b6a      	cmp	r3, #106	; 0x6a
 8001a40:	d121      	bne.n	8001a86 <App_Controll+0x526>
	{
	   LineFollower->Base_speed_R = 295;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	f240 1227 	movw	r2, #295	; 0x127
 8001a48:	609a      	str	r2, [r3, #8]
	   LineFollower->Base_speed_L = 295;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	f240 1227 	movw	r2, #295	; 0x127
 8001a50:	60da      	str	r2, [r3, #12]
	   LineFollower->Max_speed_L = 165;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	22a5      	movs	r2, #165	; 0xa5
 8001a56:	615a      	str	r2, [r3, #20]
	   LineFollower->Max_speed_R = 165;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	22a5      	movs	r2, #165	; 0xa5
 8001a5c:	611a      	str	r2, [r3, #16]
	   LineFollower->Sharp_bend_speed_right = -70;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	f06f 0245 	mvn.w	r2, #69	; 0x45
 8001a64:	619a      	str	r2, [r3, #24]
	   LineFollower->Sharp_bend_speed_left = 73;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	2249      	movs	r2, #73	; 0x49
 8001a6a:	61da      	str	r2, [r3, #28]
	   LineFollower->Bend_speed_right = -76;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8001a72:	621a      	str	r2, [r3, #32]
	   LineFollower->Bend_speed_left = 130;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	2282      	movs	r2, #130	; 0x82
 8001a78:	625a      	str	r2, [r3, #36]	; 0x24
	   LineFollower->Kp = 0.05;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	4a70      	ldr	r2, [pc, #448]	; (8001c40 <App_Controll+0x6e0>)
 8001a7e:	601a      	str	r2, [r3, #0]
	   LineFollower->Kd = 80;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	4a70      	ldr	r2, [pc, #448]	; (8001c44 <App_Controll+0x6e4>)
 8001a84:	605a      	str	r2, [r3, #4]
	}
	/*ULTRA mode*/
	if(RxData == 'k')
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	2b6b      	cmp	r3, #107	; 0x6b
 8001a8a:	d121      	bne.n	8001ad0 <App_Controll+0x570>
	{
		LineFollower->Base_speed_R = 315;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	f240 123b 	movw	r2, #315	; 0x13b
 8001a92:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 315;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	f240 123b 	movw	r2, #315	; 0x13b
 8001a9a:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 168;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	22a8      	movs	r2, #168	; 0xa8
 8001aa0:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 168;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	22a8      	movs	r2, #168	; 0xa8
 8001aa6:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -70;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	f06f 0245 	mvn.w	r2, #69	; 0x45
 8001aae:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 73;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	2249      	movs	r2, #73	; 0x49
 8001ab4:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -76;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8001abc:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 128;
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	2280      	movs	r2, #128	; 0x80
 8001ac2:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.067;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	4a60      	ldr	r2, [pc, #384]	; (8001c48 <App_Controll+0x6e8>)
 8001ac8:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 95;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	4a5f      	ldr	r2, [pc, #380]	; (8001c4c <App_Controll+0x6ec>)
 8001ace:	605a      	str	r2, [r3, #4]
	 }
	 /*ULTRA+ mode*/
	 if(RxData == 'l')
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	2b6c      	cmp	r3, #108	; 0x6c
 8001ad4:	d11f      	bne.n	8001b16 <App_Controll+0x5b6>
	 {
		LineFollower->Base_speed_R = 102;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	2266      	movs	r2, #102	; 0x66
 8001ada:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 102;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	2266      	movs	r2, #102	; 0x66
 8001ae0:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 155;
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	229b      	movs	r2, #155	; 0x9b
 8001ae6:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 155;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	229b      	movs	r2, #155	; 0x9b
 8001aec:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -90;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8001af4:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 185;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	22b9      	movs	r2, #185	; 0xb9
 8001afa:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001b02:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 100;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	2264      	movs	r2, #100	; 0x64
 8001b08:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.02;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	4a50      	ldr	r2, [pc, #320]	; (8001c50 <App_Controll+0x6f0>)
 8001b0e:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 350;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	4a50      	ldr	r2, [pc, #320]	; (8001c54 <App_Controll+0x6f4>)
 8001b14:	605a      	str	r2, [r3, #4]
	  }
	  /*EXTREME mode*/
	  if(RxData == 'm')
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	2b6d      	cmp	r3, #109	; 0x6d
 8001b1a:	d11f      	bne.n	8001b5c <App_Controll+0x5fc>
	  {
		 LineFollower->Base_speed_R = 107;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	226b      	movs	r2, #107	; 0x6b
 8001b20:	609a      	str	r2, [r3, #8]
		 LineFollower->Base_speed_L = 107;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	226b      	movs	r2, #107	; 0x6b
 8001b26:	60da      	str	r2, [r3, #12]
		 LineFollower->Max_speed_L = 159;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	229f      	movs	r2, #159	; 0x9f
 8001b2c:	615a      	str	r2, [r3, #20]
		 LineFollower->Max_speed_R = 159;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	229f      	movs	r2, #159	; 0x9f
 8001b32:	611a      	str	r2, [r3, #16]
		 LineFollower->Sharp_bend_speed_right = -90;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8001b3a:	619a      	str	r2, [r3, #24]
		 LineFollower->Sharp_bend_speed_left = 185;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	22b9      	movs	r2, #185	; 0xb9
 8001b40:	61da      	str	r2, [r3, #28]
		 LineFollower->Bend_speed_right = -50;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001b48:	621a      	str	r2, [r3, #32]
		 LineFollower->Bend_speed_left = 100;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	2264      	movs	r2, #100	; 0x64
 8001b4e:	625a      	str	r2, [r3, #36]	; 0x24
		 LineFollower->Kp = 0.02;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	4a3f      	ldr	r2, [pc, #252]	; (8001c50 <App_Controll+0x6f0>)
 8001b54:	601a      	str	r2, [r3, #0]
		 LineFollower->Kd = 350;
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	4a3e      	ldr	r2, [pc, #248]	; (8001c54 <App_Controll+0x6f4>)
 8001b5a:	605a      	str	r2, [r3, #4]
	  }

 	  /*EXTREME+ mode*/
 	  if(RxData == 'n')
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	2b6e      	cmp	r3, #110	; 0x6e
 8001b60:	d11f      	bne.n	8001ba2 <App_Controll+0x642>
 	  {
 	    LineFollower->Base_speed_R = 116;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	2274      	movs	r2, #116	; 0x74
 8001b66:	609a      	str	r2, [r3, #8]
 	    LineFollower->Base_speed_L = 116;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	2274      	movs	r2, #116	; 0x74
 8001b6c:	60da      	str	r2, [r3, #12]
 	    LineFollower->Max_speed_L = 167;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	22a7      	movs	r2, #167	; 0xa7
 8001b72:	615a      	str	r2, [r3, #20]
 	  	LineFollower->Max_speed_R = 167;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	22a7      	movs	r2, #167	; 0xa7
 8001b78:	611a      	str	r2, [r3, #16]
 	 	LineFollower->Sharp_bend_speed_right = -96;
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	f06f 025f 	mvn.w	r2, #95	; 0x5f
 8001b80:	619a      	str	r2, [r3, #24]
 		LineFollower->Sharp_bend_speed_left = 185;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	22b9      	movs	r2, #185	; 0xb9
 8001b86:	61da      	str	r2, [r3, #28]
 		LineFollower->Bend_speed_right = -50;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001b8e:	621a      	str	r2, [r3, #32]
 		LineFollower->Bend_speed_left = 100;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	2264      	movs	r2, #100	; 0x64
 8001b94:	625a      	str	r2, [r3, #36]	; 0x24
 		LineFollower->Kp = 0.02;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	4a2d      	ldr	r2, [pc, #180]	; (8001c50 <App_Controll+0x6f0>)
 8001b9a:	601a      	str	r2, [r3, #0]
 		LineFollower->Kd = 350;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	4a2d      	ldr	r2, [pc, #180]	; (8001c54 <App_Controll+0x6f4>)
 8001ba0:	605a      	str	r2, [r3, #4]
 	  }
 	  /*SPECIAL mode*/
 	  if(RxData == 'h')
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	2b68      	cmp	r3, #104	; 0x68
 8001ba6:	d11f      	bne.n	8001be8 <App_Controll+0x688>
 	  {
 	    LineFollower->Base_speed_R = 123;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	227b      	movs	r2, #123	; 0x7b
 8001bac:	609a      	str	r2, [r3, #8]
 	    LineFollower->Base_speed_L = 123;
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	227b      	movs	r2, #123	; 0x7b
 8001bb2:	60da      	str	r2, [r3, #12]
 	    LineFollower->Max_speed_L = 172;
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	22ac      	movs	r2, #172	; 0xac
 8001bb8:	615a      	str	r2, [r3, #20]
 	    LineFollower->Max_speed_R = 172;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	22ac      	movs	r2, #172	; 0xac
 8001bbe:	611a      	str	r2, [r3, #16]
 	 	LineFollower->Sharp_bend_speed_right = -90;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8001bc6:	619a      	str	r2, [r3, #24]
 		LineFollower->Sharp_bend_speed_left = 185;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	22b9      	movs	r2, #185	; 0xb9
 8001bcc:	61da      	str	r2, [r3, #28]
 		LineFollower->Bend_speed_right = -50;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001bd4:	621a      	str	r2, [r3, #32]
 		LineFollower->Bend_speed_left = 100;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	2264      	movs	r2, #100	; 0x64
 8001bda:	625a      	str	r2, [r3, #36]	; 0x24
 		LineFollower->Kp = 0.02;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	4a1c      	ldr	r2, [pc, #112]	; (8001c50 <App_Controll+0x6f0>)
 8001be0:	601a      	str	r2, [r3, #0]
 		LineFollower->Kd = 350;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	4a1b      	ldr	r2, [pc, #108]	; (8001c54 <App_Controll+0x6f4>)
 8001be6:	605a      	str	r2, [r3, #4]
 	  }
 	  /*RA-1-final-slower*/
 	  if(RxData == 'o')
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	2b6f      	cmp	r3, #111	; 0x6f
 8001bec:	d134      	bne.n	8001c58 <App_Controll+0x6f8>
 	  {
 	    LineFollower->Base_speed_R = 143;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	228f      	movs	r2, #143	; 0x8f
 8001bf2:	609a      	str	r2, [r3, #8]
 	    LineFollower->Base_speed_L = 143;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	228f      	movs	r2, #143	; 0x8f
 8001bf8:	60da      	str	r2, [r3, #12]
 	   	LineFollower->Max_speed_L = 182;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	22b6      	movs	r2, #182	; 0xb6
 8001bfe:	615a      	str	r2, [r3, #20]
 	  	LineFollower->Max_speed_R = 182;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	22b6      	movs	r2, #182	; 0xb6
 8001c04:	611a      	str	r2, [r3, #16]
 	  	LineFollower->Sharp_bend_speed_right = -76;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8001c0c:	619a      	str	r2, [r3, #24]
 		LineFollower->Sharp_bend_speed_left = 90;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	225a      	movs	r2, #90	; 0x5a
 8001c12:	61da      	str	r2, [r3, #28]
 		LineFollower->Bend_speed_right = -50;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001c1a:	621a      	str	r2, [r3, #32]
 		LineFollower->Bend_speed_left = 100;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	2264      	movs	r2, #100	; 0x64
 8001c20:	625a      	str	r2, [r3, #36]	; 0x24
 		LineFollower->Kp = 0.02;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	4a0a      	ldr	r2, [pc, #40]	; (8001c50 <App_Controll+0x6f0>)
 8001c26:	601a      	str	r2, [r3, #0]
 		LineFollower->Kd = 350;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	4a0a      	ldr	r2, [pc, #40]	; (8001c54 <App_Controll+0x6f4>)
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	e013      	b.n	8001c58 <App_Controll+0x6f8>
 8001c30:	3c75c28f 	.word	0x3c75c28f
 8001c34:	3ecccccd 	.word	0x3ecccccd
 8001c38:	3d3851ec 	.word	0x3d3851ec
 8001c3c:	42960000 	.word	0x42960000
 8001c40:	3d4ccccd 	.word	0x3d4ccccd
 8001c44:	42a00000 	.word	0x42a00000
 8001c48:	3d89374c 	.word	0x3d89374c
 8001c4c:	42be0000 	.word	0x42be0000
 8001c50:	3ca3d70a 	.word	0x3ca3d70a
 8001c54:	43af0000 	.word	0x43af0000
 	   }
 	   /*RA-2-eliminations-faster*/
 	   if(RxData == 'u')
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	2b75      	cmp	r3, #117	; 0x75
 8001c5c:	d11f      	bne.n	8001c9e <App_Controll+0x73e>
 	   {
 	     LineFollower->Base_speed_R = 153;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	2299      	movs	r2, #153	; 0x99
 8001c62:	609a      	str	r2, [r3, #8]
 	     LineFollower->Base_speed_L = 153;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	2299      	movs	r2, #153	; 0x99
 8001c68:	60da      	str	r2, [r3, #12]
 	     LineFollower->Max_speed_L = 187;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	22bb      	movs	r2, #187	; 0xbb
 8001c6e:	615a      	str	r2, [r3, #20]
 	   	 LineFollower->Max_speed_R = 187;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	22bb      	movs	r2, #187	; 0xbb
 8001c74:	611a      	str	r2, [r3, #16]
 	  	 LineFollower->Sharp_bend_speed_right = -76;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8001c7c:	619a      	str	r2, [r3, #24]
 	 	 LineFollower->Sharp_bend_speed_left = 90;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	225a      	movs	r2, #90	; 0x5a
 8001c82:	61da      	str	r2, [r3, #28]
 	 	 LineFollower->Bend_speed_right = -50;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001c8a:	621a      	str	r2, [r3, #32]
 	 	 LineFollower->Bend_speed_left = 100;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	2264      	movs	r2, #100	; 0x64
 8001c90:	625a      	str	r2, [r3, #36]	; 0x24
 	 	 LineFollower->Kp = 0.02;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	4a26      	ldr	r2, [pc, #152]	; (8001d30 <App_Controll+0x7d0>)
 8001c96:	601a      	str	r2, [r3, #0]
 	 	 LineFollower->Kd = 350;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	4a26      	ldr	r2, [pc, #152]	; (8001d34 <App_Controll+0x7d4>)
 8001c9c:	605a      	str	r2, [r3, #4]
 	   }
 	  /*Gruzik2.1 Robo Comp 2024r 1*/
 	  if(RxData == 'p')
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	2b70      	cmp	r3, #112	; 0x70
 8001ca2:	d11f      	bne.n	8001ce4 <App_Controll+0x784>
 	  {
 		 LineFollower->Base_speed_R = 143;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	228f      	movs	r2, #143	; 0x8f
 8001ca8:	609a      	str	r2, [r3, #8]
 		 LineFollower->Base_speed_L = 143;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	228f      	movs	r2, #143	; 0x8f
 8001cae:	60da      	str	r2, [r3, #12]
 		 LineFollower->Max_speed_L = 182;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	22b6      	movs	r2, #182	; 0xb6
 8001cb4:	615a      	str	r2, [r3, #20]
 		 LineFollower->Max_speed_R = 182;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	22b6      	movs	r2, #182	; 0xb6
 8001cba:	611a      	str	r2, [r3, #16]
 		 LineFollower->Sharp_bend_speed_right = -76;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8001cc2:	619a      	str	r2, [r3, #24]
 		 LineFollower->Sharp_bend_speed_left = 90;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	225a      	movs	r2, #90	; 0x5a
 8001cc8:	61da      	str	r2, [r3, #28]
 		 LineFollower->Bend_speed_right = -40;//40
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	f06f 0227 	mvn.w	r2, #39	; 0x27
 8001cd0:	621a      	str	r2, [r3, #32]
 		 LineFollower->Bend_speed_left = 110;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	226e      	movs	r2, #110	; 0x6e
 8001cd6:	625a      	str	r2, [r3, #36]	; 0x24
 		 LineFollower->Kp = 0.02;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	4a15      	ldr	r2, [pc, #84]	; (8001d30 <App_Controll+0x7d0>)
 8001cdc:	601a      	str	r2, [r3, #0]
 		 LineFollower->Kd = 350;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	4a14      	ldr	r2, [pc, #80]	; (8001d34 <App_Controll+0x7d4>)
 8001ce2:	605a      	str	r2, [r3, #4]
 	  }
 	  /*Gruzik2.1 Robo Comp 2024 2*/
 	  if(RxData == 'r')
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	2b72      	cmp	r3, #114	; 0x72
 8001ce8:	d11f      	bne.n	8001d2a <App_Controll+0x7ca>
 	  {
 		 LineFollower->Base_speed_R = 153;
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	2299      	movs	r2, #153	; 0x99
 8001cee:	609a      	str	r2, [r3, #8]
 		 LineFollower->Base_speed_L = 153;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	2299      	movs	r2, #153	; 0x99
 8001cf4:	60da      	str	r2, [r3, #12]
 		 LineFollower->Max_speed_L = 187;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	22bb      	movs	r2, #187	; 0xbb
 8001cfa:	615a      	str	r2, [r3, #20]
 		 LineFollower->Max_speed_R = 187;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	22bb      	movs	r2, #187	; 0xbb
 8001d00:	611a      	str	r2, [r3, #16]
 		 LineFollower->Sharp_bend_speed_right = -76;
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8001d08:	619a      	str	r2, [r3, #24]
 		 LineFollower->Sharp_bend_speed_left = 90;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	225a      	movs	r2, #90	; 0x5a
 8001d0e:	61da      	str	r2, [r3, #28]
 		 LineFollower->Bend_speed_right = -40;//40
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	f06f 0227 	mvn.w	r2, #39	; 0x27
 8001d16:	621a      	str	r2, [r3, #32]
 		 LineFollower->Bend_speed_left = 110;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	226e      	movs	r2, #110	; 0x6e
 8001d1c:	625a      	str	r2, [r3, #36]	; 0x24
 		 LineFollower->Kp = 0.02;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	4a03      	ldr	r2, [pc, #12]	; (8001d30 <App_Controll+0x7d0>)
 8001d22:	601a      	str	r2, [r3, #0]
 		 LineFollower->Kd = 350;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	4a03      	ldr	r2, [pc, #12]	; (8001d34 <App_Controll+0x7d4>)
 8001d28:	605a      	str	r2, [r3, #4]
 	   }
}
 8001d2a:	3740      	adds	r7, #64	; 0x40
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d30:	3ca3d70a 	.word	0x3ca3d70a
 8001d34:	43af0000 	.word	0x43af0000

08001d38 <Mode_change>:

static void Mode_change(LineFollower_t *LF)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001d40:	490c      	ldr	r1, [pc, #48]	; (8001d74 <Mode_change+0x3c>)
 8001d42:	2000      	movs	r0, #0
 8001d44:	f006 fc60 	bl	8008608 <strtok>
 8001d48:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 2)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00b      	beq.n	8001d6a <Mode_change+0x32>
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f7fe fa06 	bl	8000164 <strlen>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d805      	bhi.n	8001d6a <Mode_change+0x32>
	{
		App_Controll(ParsePointer[0], LF);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fbfb 	bl	8001560 <App_Controll>
	}
}
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	0800b500 	.word	0x0800b500

08001d78 <Parser_Parse>:
void Parser_Parse(uint8_t *ReceivedData, LineFollower_t *LineFollower)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
	char *ParsePointer = strtok((char*)ReceivedData, "=");
 8001d82:	4935      	ldr	r1, [pc, #212]	; (8001e58 <Parser_Parse+0xe0>)
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f006 fc3f 	bl	8008608 <strtok>
 8001d8a:	60f8      	str	r0, [r7, #12]

	if(!strcmp("Kp",ParsePointer))
 8001d8c:	68f9      	ldr	r1, [r7, #12]
 8001d8e:	4833      	ldr	r0, [pc, #204]	; (8001e5c <Parser_Parse+0xe4>)
 8001d90:	f7fe f9de 	bl	8000150 <strcmp>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d103      	bne.n	8001da2 <Parser_Parse+0x2a>
	{
		kp_change(LineFollower);
 8001d9a:	6838      	ldr	r0, [r7, #0]
 8001d9c:	f7ff fa98 	bl	80012d0 <kp_change>
	}
	else if(!strcmp("Mode",ParsePointer))
	{
		Mode_change(LineFollower);
	}
}
 8001da0:	e056      	b.n	8001e50 <Parser_Parse+0xd8>
	else if(!strcmp("Kd",ParsePointer))
 8001da2:	68f9      	ldr	r1, [r7, #12]
 8001da4:	482e      	ldr	r0, [pc, #184]	; (8001e60 <Parser_Parse+0xe8>)
 8001da6:	f7fe f9d3 	bl	8000150 <strcmp>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d103      	bne.n	8001db8 <Parser_Parse+0x40>
		kd_change(LineFollower);
 8001db0:	6838      	ldr	r0, [r7, #0]
 8001db2:	f7ff fab3 	bl	800131c <kd_change>
}
 8001db6:	e04b      	b.n	8001e50 <Parser_Parse+0xd8>
	else if(!strcmp("Base_speed",ParsePointer))
 8001db8:	68f9      	ldr	r1, [r7, #12]
 8001dba:	482a      	ldr	r0, [pc, #168]	; (8001e64 <Parser_Parse+0xec>)
 8001dbc:	f7fe f9c8 	bl	8000150 <strcmp>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d103      	bne.n	8001dce <Parser_Parse+0x56>
		Base_speed_change(LineFollower);
 8001dc6:	6838      	ldr	r0, [r7, #0]
 8001dc8:	f7ff face 	bl	8001368 <Base_speed_change>
}
 8001dcc:	e040      	b.n	8001e50 <Parser_Parse+0xd8>
	else if(!strcmp("Max_speed",ParsePointer))
 8001dce:	68f9      	ldr	r1, [r7, #12]
 8001dd0:	4825      	ldr	r0, [pc, #148]	; (8001e68 <Parser_Parse+0xf0>)
 8001dd2:	f7fe f9bd 	bl	8000150 <strcmp>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d103      	bne.n	8001de4 <Parser_Parse+0x6c>
		Max_speed_change(LineFollower);
 8001ddc:	6838      	ldr	r0, [r7, #0]
 8001dde:	f7ff faf5 	bl	80013cc <Max_speed_change>
}
 8001de2:	e035      	b.n	8001e50 <Parser_Parse+0xd8>
	else if(!strcmp("Sharp_bend_speed_right",ParsePointer))
 8001de4:	68f9      	ldr	r1, [r7, #12]
 8001de6:	4821      	ldr	r0, [pc, #132]	; (8001e6c <Parser_Parse+0xf4>)
 8001de8:	f7fe f9b2 	bl	8000150 <strcmp>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d103      	bne.n	8001dfa <Parser_Parse+0x82>
		Sharp_bend_speed_right_change(LineFollower);
 8001df2:	6838      	ldr	r0, [r7, #0]
 8001df4:	f7ff fb1c 	bl	8001430 <Sharp_bend_speed_right_change>
}
 8001df8:	e02a      	b.n	8001e50 <Parser_Parse+0xd8>
	else if(!strcmp("Sharp_bend_speed_left",ParsePointer))
 8001dfa:	68f9      	ldr	r1, [r7, #12]
 8001dfc:	481c      	ldr	r0, [pc, #112]	; (8001e70 <Parser_Parse+0xf8>)
 8001dfe:	f7fe f9a7 	bl	8000150 <strcmp>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d103      	bne.n	8001e10 <Parser_Parse+0x98>
		Sharp_bend_speed_left_change(LineFollower);
 8001e08:	6838      	ldr	r0, [r7, #0]
 8001e0a:	f7ff fb37 	bl	800147c <Sharp_bend_speed_left_change>
}
 8001e0e:	e01f      	b.n	8001e50 <Parser_Parse+0xd8>
	else if(!strcmp("Bend_speed_right",ParsePointer))
 8001e10:	68f9      	ldr	r1, [r7, #12]
 8001e12:	4818      	ldr	r0, [pc, #96]	; (8001e74 <Parser_Parse+0xfc>)
 8001e14:	f7fe f99c 	bl	8000150 <strcmp>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d103      	bne.n	8001e26 <Parser_Parse+0xae>
		Bend_speed_right_change(LineFollower);
 8001e1e:	6838      	ldr	r0, [r7, #0]
 8001e20:	f7ff fb52 	bl	80014c8 <Bend_speed_right_change>
}
 8001e24:	e014      	b.n	8001e50 <Parser_Parse+0xd8>
	else if(!strcmp("Bend_speed_left",ParsePointer))
 8001e26:	68f9      	ldr	r1, [r7, #12]
 8001e28:	4813      	ldr	r0, [pc, #76]	; (8001e78 <Parser_Parse+0x100>)
 8001e2a:	f7fe f991 	bl	8000150 <strcmp>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d103      	bne.n	8001e3c <Parser_Parse+0xc4>
		Bend_speed_left_change(LineFollower);
 8001e34:	6838      	ldr	r0, [r7, #0]
 8001e36:	f7ff fb6d 	bl	8001514 <Bend_speed_left_change>
}
 8001e3a:	e009      	b.n	8001e50 <Parser_Parse+0xd8>
	else if(!strcmp("Mode",ParsePointer))
 8001e3c:	68f9      	ldr	r1, [r7, #12]
 8001e3e:	480f      	ldr	r0, [pc, #60]	; (8001e7c <Parser_Parse+0x104>)
 8001e40:	f7fe f986 	bl	8000150 <strcmp>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d102      	bne.n	8001e50 <Parser_Parse+0xd8>
		Mode_change(LineFollower);
 8001e4a:	6838      	ldr	r0, [r7, #0]
 8001e4c:	f7ff ff74 	bl	8001d38 <Mode_change>
}
 8001e50:	bf00      	nop
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	0800b578 	.word	0x0800b578
 8001e5c:	0800b57c 	.word	0x0800b57c
 8001e60:	0800b580 	.word	0x0800b580
 8001e64:	0800b584 	.word	0x0800b584
 8001e68:	0800b590 	.word	0x0800b590
 8001e6c:	0800b59c 	.word	0x0800b59c
 8001e70:	0800b5b4 	.word	0x0800b5b4
 8001e74:	0800b5cc 	.word	0x0800b5cc
 8001e78:	0800b5e0 	.word	0x0800b5e0
 8001e7c:	0800b5f0 	.word	0x0800b5f0

08001e80 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	; 0x28
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001e86:	f107 0310 	add.w	r3, r7, #16
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	609a      	str	r2, [r3, #8]
 8001e92:	60da      	str	r2, [r3, #12]
 8001e94:	611a      	str	r2, [r3, #16]
 8001e96:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001e98:	1d3b      	adds	r3, r7, #4
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001ea2:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <MX_ADC1_Init+0xb4>)
 8001ea4:	4a24      	ldr	r2, [pc, #144]	; (8001f38 <MX_ADC1_Init+0xb8>)
 8001ea6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ea8:	4b22      	ldr	r3, [pc, #136]	; (8001f34 <MX_ADC1_Init+0xb4>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001eae:	4b21      	ldr	r3, [pc, #132]	; (8001f34 <MX_ADC1_Init+0xb4>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001eb4:	4b1f      	ldr	r3, [pc, #124]	; (8001f34 <MX_ADC1_Init+0xb4>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001eba:	4b1e      	ldr	r3, [pc, #120]	; (8001f34 <MX_ADC1_Init+0xb4>)
 8001ebc:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001ec0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ec2:	4b1c      	ldr	r3, [pc, #112]	; (8001f34 <MX_ADC1_Init+0xb4>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001ec8:	4b1a      	ldr	r3, [pc, #104]	; (8001f34 <MX_ADC1_Init+0xb4>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ece:	4819      	ldr	r0, [pc, #100]	; (8001f34 <MX_ADC1_Init+0xb4>)
 8001ed0:	f001 fb9c 	bl	800360c <HAL_ADC_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_ADC1_Init+0x5e>
  {
    Error_Handler();
 8001eda:	f000 fe99 	bl	8002c10 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8001ede:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <MX_ADC1_Init+0xbc>)
 8001ee0:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 4095;
 8001ee2:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001ee6:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 3230;
 8001ee8:	f640 439e 	movw	r3, #3230	; 0xc9e
 8001eec:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.Channel = ADC_CHANNEL_9;
 8001eee:	2309      	movs	r3, #9
 8001ef0:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.ITMode = DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	763b      	strb	r3, [r7, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8001ef6:	f107 0310 	add.w	r3, r7, #16
 8001efa:	4619      	mov	r1, r3
 8001efc:	480d      	ldr	r0, [pc, #52]	; (8001f34 <MX_ADC1_Init+0xb4>)
 8001efe:	f001 fe4f 	bl	8003ba0 <HAL_ADC_AnalogWDGConfig>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001f08:	f000 fe82 	bl	8002c10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001f0c:	2309      	movs	r3, #9
 8001f0e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f10:	2301      	movs	r3, #1
 8001f12:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001f14:	2307      	movs	r3, #7
 8001f16:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f18:	1d3b      	adds	r3, r7, #4
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4805      	ldr	r0, [pc, #20]	; (8001f34 <MX_ADC1_Init+0xb4>)
 8001f1e:	f001 fd47 	bl	80039b0 <HAL_ADC_ConfigChannel>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001f28:	f000 fe72 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f2c:	bf00      	nop
 8001f2e:	3728      	adds	r7, #40	; 0x28
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000200 	.word	0x20000200
 8001f38:	40012400 	.word	0x40012400
 8001f3c:	00800200 	.word	0x00800200

08001f40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 0310 	add.w	r3, r7, #16
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a28      	ldr	r2, [pc, #160]	; (8001ffc <HAL_ADC_MspInit+0xbc>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d149      	bne.n	8001ff4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f60:	4b27      	ldr	r3, [pc, #156]	; (8002000 <HAL_ADC_MspInit+0xc0>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	4a26      	ldr	r2, [pc, #152]	; (8002000 <HAL_ADC_MspInit+0xc0>)
 8001f66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f6a:	6193      	str	r3, [r2, #24]
 8001f6c:	4b24      	ldr	r3, [pc, #144]	; (8002000 <HAL_ADC_MspInit+0xc0>)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f78:	4b21      	ldr	r3, [pc, #132]	; (8002000 <HAL_ADC_MspInit+0xc0>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	4a20      	ldr	r2, [pc, #128]	; (8002000 <HAL_ADC_MspInit+0xc0>)
 8001f7e:	f043 0308 	orr.w	r3, r3, #8
 8001f82:	6193      	str	r3, [r2, #24]
 8001f84:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <HAL_ADC_MspInit+0xc0>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f90:	2302      	movs	r3, #2
 8001f92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f94:	2303      	movs	r3, #3
 8001f96:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f98:	f107 0310 	add.w	r3, r7, #16
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4819      	ldr	r0, [pc, #100]	; (8002004 <HAL_ADC_MspInit+0xc4>)
 8001fa0:	f002 fb06 	bl	80045b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001fa4:	4b18      	ldr	r3, [pc, #96]	; (8002008 <HAL_ADC_MspInit+0xc8>)
 8001fa6:	4a19      	ldr	r2, [pc, #100]	; (800200c <HAL_ADC_MspInit+0xcc>)
 8001fa8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001faa:	4b17      	ldr	r3, [pc, #92]	; (8002008 <HAL_ADC_MspInit+0xc8>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb0:	4b15      	ldr	r3, [pc, #84]	; (8002008 <HAL_ADC_MspInit+0xc8>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001fb6:	4b14      	ldr	r3, [pc, #80]	; (8002008 <HAL_ADC_MspInit+0xc8>)
 8001fb8:	2280      	movs	r2, #128	; 0x80
 8001fba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fbc:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_ADC_MspInit+0xc8>)
 8001fbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fc2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fc4:	4b10      	ldr	r3, [pc, #64]	; (8002008 <HAL_ADC_MspInit+0xc8>)
 8001fc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001fcc:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <HAL_ADC_MspInit+0xc8>)
 8001fce:	2220      	movs	r2, #32
 8001fd0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <HAL_ADC_MspInit+0xc8>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001fd8:	480b      	ldr	r0, [pc, #44]	; (8002008 <HAL_ADC_MspInit+0xc8>)
 8001fda:	f002 f847 	bl	800406c <HAL_DMA_Init>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001fe4:	f000 fe14 	bl	8002c10 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a07      	ldr	r2, [pc, #28]	; (8002008 <HAL_ADC_MspInit+0xc8>)
 8001fec:	621a      	str	r2, [r3, #32]
 8001fee:	4a06      	ldr	r2, [pc, #24]	; (8002008 <HAL_ADC_MspInit+0xc8>)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	3720      	adds	r7, #32
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40012400 	.word	0x40012400
 8002000:	40021000 	.word	0x40021000
 8002004:	40010c00 	.word	0x40010c00
 8002008:	20000230 	.word	0x20000230
 800200c:	40020008 	.word	0x40020008

08002010 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002016:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <MX_DMA_Init+0x38>)
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	4a0b      	ldr	r2, [pc, #44]	; (8002048 <MX_DMA_Init+0x38>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6153      	str	r3, [r2, #20]
 8002022:	4b09      	ldr	r3, [pc, #36]	; (8002048 <MX_DMA_Init+0x38>)
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800202e:	2200      	movs	r2, #0
 8002030:	2100      	movs	r1, #0
 8002032:	200b      	movs	r0, #11
 8002034:	f001 ffe3 	bl	8003ffe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002038:	200b      	movs	r0, #11
 800203a:	f001 fffc 	bl	8004036 <HAL_NVIC_EnableIRQ>

}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40021000 	.word	0x40021000

0800204c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002052:	f107 0310 	add.w	r3, r7, #16
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	609a      	str	r2, [r3, #8]
 800205e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002060:	4b46      	ldr	r3, [pc, #280]	; (800217c <MX_GPIO_Init+0x130>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	4a45      	ldr	r2, [pc, #276]	; (800217c <MX_GPIO_Init+0x130>)
 8002066:	f043 0310 	orr.w	r3, r3, #16
 800206a:	6193      	str	r3, [r2, #24]
 800206c:	4b43      	ldr	r3, [pc, #268]	; (800217c <MX_GPIO_Init+0x130>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	f003 0310 	and.w	r3, r3, #16
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002078:	4b40      	ldr	r3, [pc, #256]	; (800217c <MX_GPIO_Init+0x130>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	4a3f      	ldr	r2, [pc, #252]	; (800217c <MX_GPIO_Init+0x130>)
 800207e:	f043 0320 	orr.w	r3, r3, #32
 8002082:	6193      	str	r3, [r2, #24]
 8002084:	4b3d      	ldr	r3, [pc, #244]	; (800217c <MX_GPIO_Init+0x130>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	f003 0320 	and.w	r3, r3, #32
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002090:	4b3a      	ldr	r3, [pc, #232]	; (800217c <MX_GPIO_Init+0x130>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	4a39      	ldr	r2, [pc, #228]	; (800217c <MX_GPIO_Init+0x130>)
 8002096:	f043 0304 	orr.w	r3, r3, #4
 800209a:	6193      	str	r3, [r2, #24]
 800209c:	4b37      	ldr	r3, [pc, #220]	; (800217c <MX_GPIO_Init+0x130>)
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	607b      	str	r3, [r7, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a8:	4b34      	ldr	r3, [pc, #208]	; (800217c <MX_GPIO_Init+0x130>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	4a33      	ldr	r2, [pc, #204]	; (800217c <MX_GPIO_Init+0x130>)
 80020ae:	f043 0308 	orr.w	r3, r3, #8
 80020b2:	6193      	str	r3, [r2, #24]
 80020b4:	4b31      	ldr	r3, [pc, #196]	; (800217c <MX_GPIO_Init+0x130>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	603b      	str	r3, [r7, #0]
 80020be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_GPIO_Port, LD_Pin, GPIO_PIN_SET);
 80020c0:	2201      	movs	r2, #1
 80020c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020c6:	482e      	ldr	r0, [pc, #184]	; (8002180 <MX_GPIO_Init+0x134>)
 80020c8:	f002 fc0d 	bl	80048e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSOR8_Pin|SENSOR7_Pin|SENSOR6_Pin|SENSOR5_Pin
 80020cc:	2200      	movs	r2, #0
 80020ce:	21ff      	movs	r1, #255	; 0xff
 80020d0:	482c      	ldr	r0, [pc, #176]	; (8002184 <MX_GPIO_Init+0x138>)
 80020d2:	f002 fc08 	bl	80048e6 <HAL_GPIO_WritePin>
                          |SENSOR4_Pin|SENSOR3_Pin|SENSOR2_Pin|SENSOR1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDON_Pin|BIN1L_Pin|BIN1R_Pin|AIN2L_Pin
 80020d6:	2200      	movs	r2, #0
 80020d8:	f24c 0171 	movw	r1, #49265	; 0xc071
 80020dc:	482a      	ldr	r0, [pc, #168]	; (8002188 <MX_GPIO_Init+0x13c>)
 80020de:	f002 fc02 	bl	80048e6 <HAL_GPIO_WritePin>
                          |AIN1R_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_Pin;
 80020e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e8:	2301      	movs	r3, #1
 80020ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f0:	2302      	movs	r3, #2
 80020f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD_GPIO_Port, &GPIO_InitStruct);
 80020f4:	f107 0310 	add.w	r3, r7, #16
 80020f8:	4619      	mov	r1, r3
 80020fa:	4821      	ldr	r0, [pc, #132]	; (8002180 <MX_GPIO_Init+0x134>)
 80020fc:	f002 fa58 	bl	80045b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR8_Pin|SENSOR7_Pin|SENSOR6_Pin|SENSOR5_Pin
 8002100:	23bf      	movs	r3, #191	; 0xbf
 8002102:	613b      	str	r3, [r7, #16]
                          |SENSOR4_Pin|SENSOR3_Pin|SENSOR1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002104:	2301      	movs	r3, #1
 8002106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800210c:	2303      	movs	r3, #3
 800210e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002110:	f107 0310 	add.w	r3, r7, #16
 8002114:	4619      	mov	r1, r3
 8002116:	481b      	ldr	r0, [pc, #108]	; (8002184 <MX_GPIO_Init+0x138>)
 8002118:	f002 fa4a 	bl	80045b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSOR2_Pin;
 800211c:	2340      	movs	r3, #64	; 0x40
 800211e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002120:	2301      	movs	r3, #1
 8002122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002128:	2302      	movs	r3, #2
 800212a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSOR2_GPIO_Port, &GPIO_InitStruct);
 800212c:	f107 0310 	add.w	r3, r7, #16
 8002130:	4619      	mov	r1, r3
 8002132:	4814      	ldr	r0, [pc, #80]	; (8002184 <MX_GPIO_Init+0x138>)
 8002134:	f002 fa3c 	bl	80045b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LEDON_Pin|BIN1L_Pin|BIN1R_Pin|AIN2L_Pin
 8002138:	f24c 0331 	movw	r3, #49201	; 0xc031
 800213c:	613b      	str	r3, [r7, #16]
                          |AIN1R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213e:	2301      	movs	r3, #1
 8002140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002146:	2303      	movs	r3, #3
 8002148:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214a:	f107 0310 	add.w	r3, r7, #16
 800214e:	4619      	mov	r1, r3
 8002150:	480d      	ldr	r0, [pc, #52]	; (8002188 <MX_GPIO_Init+0x13c>)
 8002152:	f002 fa2d 	bl	80045b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002156:	2340      	movs	r3, #64	; 0x40
 8002158:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800215a:	2301      	movs	r3, #1
 800215c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002162:	2301      	movs	r3, #1
 8002164:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002166:	f107 0310 	add.w	r3, r7, #16
 800216a:	4619      	mov	r1, r3
 800216c:	4806      	ldr	r0, [pc, #24]	; (8002188 <MX_GPIO_Init+0x13c>)
 800216e:	f002 fa1f 	bl	80045b0 <HAL_GPIO_Init>

}
 8002172:	bf00      	nop
 8002174:	3720      	adds	r7, #32
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40021000 	.word	0x40021000
 8002180:	40011000 	.word	0x40011000
 8002184:	40010800 	.word	0x40010800
 8002188:	40010c00 	.word	0x40010c00

0800218c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002190:	f001 f9da 	bl	8003548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002194:	f000 f886 	bl	80022a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002198:	f7ff ff58 	bl	800204c <MX_GPIO_Init>
  MX_DMA_Init();
 800219c:	f7ff ff38 	bl	8002010 <MX_DMA_Init>
  MX_TIM1_Init();
 80021a0:	f000 fe98 	bl	8002ed4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80021a4:	f000 ff34 	bl	8003010 <MX_TIM3_Init>
  MX_TIM4_Init();
 80021a8:	f000 ff80 	bl	80030ac <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80021ac:	f001 f8c2 	bl	8003334 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80021b0:	f001 f8ea 	bl	8003388 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80021b4:	f7ff fe64 	bl	8001e80 <MX_ADC1_Init>
  MX_TIM2_Init();
 80021b8:	f000 fede 	bl	8002f78 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /*Initial values for PID*/
  /*Start ADC with DMA measurement*/
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&GRUZIK.Adc_Value, 1);
 80021bc:	2201      	movs	r2, #1
 80021be:	492b      	ldr	r1, [pc, #172]	; (800226c <main+0xe0>)
 80021c0:	482b      	ldr	r0, [pc, #172]	; (8002270 <main+0xe4>)
 80021c2:	f001 fafb 	bl	80037bc <HAL_ADC_Start_DMA>

  	GRUZIK.Kp = 0.02;
 80021c6:	4b2b      	ldr	r3, [pc, #172]	; (8002274 <main+0xe8>)
 80021c8:	4a2b      	ldr	r2, [pc, #172]	; (8002278 <main+0xec>)
 80021ca:	601a      	str	r2, [r3, #0]
	GRUZIK.Kd = 0.1;
 80021cc:	4b29      	ldr	r3, [pc, #164]	; (8002274 <main+0xe8>)
 80021ce:	4a2b      	ldr	r2, [pc, #172]	; (800227c <main+0xf0>)
 80021d0:	605a      	str	r2, [r3, #4]
	GRUZIK.Speed_offset = 0.014;
 80021d2:	4b28      	ldr	r3, [pc, #160]	; (8002274 <main+0xe8>)
 80021d4:	4a2a      	ldr	r2, [pc, #168]	; (8002280 <main+0xf4>)
 80021d6:	635a      	str	r2, [r3, #52]	; 0x34

	GRUZIK.Base_speed_R = 120;
 80021d8:	4b26      	ldr	r3, [pc, #152]	; (8002274 <main+0xe8>)
 80021da:	2278      	movs	r2, #120	; 0x78
 80021dc:	609a      	str	r2, [r3, #8]
	GRUZIK.Base_speed_L = 120;
 80021de:	4b25      	ldr	r3, [pc, #148]	; (8002274 <main+0xe8>)
 80021e0:	2278      	movs	r2, #120	; 0x78
 80021e2:	60da      	str	r2, [r3, #12]
	GRUZIK.Max_speed_R = 120;
 80021e4:	4b23      	ldr	r3, [pc, #140]	; (8002274 <main+0xe8>)
 80021e6:	2278      	movs	r2, #120	; 0x78
 80021e8:	611a      	str	r2, [r3, #16]
	GRUZIK.Max_speed_L = 120;
 80021ea:	4b22      	ldr	r3, [pc, #136]	; (8002274 <main+0xe8>)
 80021ec:	2278      	movs	r2, #120	; 0x78
 80021ee:	615a      	str	r2, [r3, #20]

	/*Sharp turn speed*/
	GRUZIK.Sharp_bend_speed_right=-70;
 80021f0:	4b20      	ldr	r3, [pc, #128]	; (8002274 <main+0xe8>)
 80021f2:	f06f 0245 	mvn.w	r2, #69	; 0x45
 80021f6:	619a      	str	r2, [r3, #24]
	GRUZIK.Sharp_bend_speed_left=85;
 80021f8:	4b1e      	ldr	r3, [pc, #120]	; (8002274 <main+0xe8>)
 80021fa:	2255      	movs	r2, #85	; 0x55
 80021fc:	61da      	str	r2, [r3, #28]
	GRUZIK.Bend_speed_right=-50;
 80021fe:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <main+0xe8>)
 8002200:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8002204:	621a      	str	r2, [r3, #32]
	GRUZIK.Bend_speed_left=110;
 8002206:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <main+0xe8>)
 8002208:	226e      	movs	r2, #110	; 0x6e
 800220a:	625a      	str	r2, [r3, #36]	; 0x24

  /*Start receiving data from Blue tooth*/
   HAL_UART_Receive_IT(&huart1, &RxData, 1);
 800220c:	2201      	movs	r2, #1
 800220e:	491d      	ldr	r1, [pc, #116]	; (8002284 <main+0xf8>)
 8002210:	481d      	ldr	r0, [pc, #116]	; (8002288 <main+0xfc>)
 8002212:	f004 f986 	bl	8006522 <HAL_UART_Receive_IT>

   /*Start timers and PWM on channels*/
   HAL_TIM_Base_Start_IT(&htim1);
 8002216:	481d      	ldr	r0, [pc, #116]	; (800228c <main+0x100>)
 8002218:	f003 f8de 	bl	80053d8 <HAL_TIM_Base_Start_IT>
   HAL_TIM_Base_Start(&htim2);
 800221c:	481c      	ldr	r0, [pc, #112]	; (8002290 <main+0x104>)
 800221e:	f003 f891 	bl	8005344 <HAL_TIM_Base_Start>

   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002222:	2100      	movs	r1, #0
 8002224:	481b      	ldr	r0, [pc, #108]	; (8002294 <main+0x108>)
 8002226:	f003 f9d9 	bl	80055dc <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800222a:	2104      	movs	r1, #4
 800222c:	4819      	ldr	r0, [pc, #100]	; (8002294 <main+0x108>)
 800222e:	f003 f9d5 	bl	80055dc <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002232:	2108      	movs	r1, #8
 8002234:	4817      	ldr	r0, [pc, #92]	; (8002294 <main+0x108>)
 8002236:	f003 f9d1 	bl	80055dc <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800223a:	210c      	movs	r1, #12
 800223c:	4815      	ldr	r0, [pc, #84]	; (8002294 <main+0x108>)
 800223e:	f003 f9cd 	bl	80055dc <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  PID_control();
 8002242:	f000 fc1d 	bl	8002a80 <PID_control>

	  if(ReceivedLines > 0)
 8002246:	4b14      	ldr	r3, [pc, #80]	; (8002298 <main+0x10c>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f9      	beq.n	8002242 <main+0xb6>
	  {
		  Parser_TakeLine(&ReceiveBuffer, ReceivedData);
 800224e:	4913      	ldr	r1, [pc, #76]	; (800229c <main+0x110>)
 8002250:	4813      	ldr	r0, [pc, #76]	; (80022a0 <main+0x114>)
 8002252:	f7ff f817 	bl	8001284 <Parser_TakeLine>
		  Parser_Parse(ReceivedData,&GRUZIK);
 8002256:	4907      	ldr	r1, [pc, #28]	; (8002274 <main+0xe8>)
 8002258:	4810      	ldr	r0, [pc, #64]	; (800229c <main+0x110>)
 800225a:	f7ff fd8d 	bl	8001d78 <Parser_Parse>

		  ReceivedLines--;
 800225e:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <main+0x10c>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	3b01      	subs	r3, #1
 8002264:	b2da      	uxtb	r2, r3
 8002266:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <main+0x10c>)
 8002268:	701a      	strb	r2, [r3, #0]
	  PID_control();
 800226a:	e7ea      	b.n	8002242 <main+0xb6>
 800226c:	200002a0 	.word	0x200002a0
 8002270:	20000200 	.word	0x20000200
 8002274:	20000274 	.word	0x20000274
 8002278:	3ca3d70a 	.word	0x3ca3d70a
 800227c:	3dcccccd 	.word	0x3dcccccd
 8002280:	3c656042 	.word	0x3c656042
 8002284:	20000304 	.word	0x20000304
 8002288:	20000494 	.word	0x20000494
 800228c:	20000374 	.word	0x20000374
 8002290:	200003bc 	.word	0x200003bc
 8002294:	2000044c 	.word	0x2000044c
 8002298:	2000036c 	.word	0x2000036c
 800229c:	2000034c 	.word	0x2000034c
 80022a0:	20000308 	.word	0x20000308

080022a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b094      	sub	sp, #80	; 0x50
 80022a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022ae:	2228      	movs	r2, #40	; 0x28
 80022b0:	2100      	movs	r1, #0
 80022b2:	4618      	mov	r0, r3
 80022b4:	f004 ff08 	bl	80070c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022c8:	1d3b      	adds	r3, r7, #4
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	609a      	str	r2, [r3, #8]
 80022d2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022d4:	2301      	movs	r3, #1
 80022d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80022de:	2300      	movs	r3, #0
 80022e0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022e2:	2301      	movs	r3, #1
 80022e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022e6:	2302      	movs	r3, #2
 80022e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80022f0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80022f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022fa:	4618      	mov	r0, r3
 80022fc:	f002 fb0c 	bl	8004918 <HAL_RCC_OscConfig>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002306:	f000 fc83 	bl	8002c10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800230a:	230f      	movs	r3, #15
 800230c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800230e:	2302      	movs	r3, #2
 8002310:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8002316:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800231a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 800231c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002320:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002322:	f107 0314 	add.w	r3, r7, #20
 8002326:	2102      	movs	r1, #2
 8002328:	4618      	mov	r0, r3
 800232a:	f002 fd77 	bl	8004e1c <HAL_RCC_ClockConfig>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002334:	f000 fc6c 	bl	8002c10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002338:	2302      	movs	r3, #2
 800233a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800233c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002340:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002342:	1d3b      	adds	r3, r7, #4
 8002344:	4618      	mov	r0, r3
 8002346:	f002 fef7 	bl	8005138 <HAL_RCCEx_PeriphCLKConfig>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002350:	f000 fc5e 	bl	8002c10 <Error_Handler>
  }
}
 8002354:	bf00      	nop
 8002356:	3750      	adds	r7, #80	; 0x50
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a0f      	ldr	r2, [pc, #60]	; (80023a8 <HAL_UART_RxCpltCallback+0x4c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d117      	bne.n	800239e <HAL_UART_RxCpltCallback+0x42>
	{
		if(RB_Write(&ReceiveBuffer, RxData) == RB_OK)
 800236e:	4b0f      	ldr	r3, [pc, #60]	; (80023ac <HAL_UART_RxCpltCallback+0x50>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	4619      	mov	r1, r3
 8002374:	480e      	ldr	r0, [pc, #56]	; (80023b0 <HAL_UART_RxCpltCallback+0x54>)
 8002376:	f7fe ff33 	bl	80011e0 <RB_Write>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d109      	bne.n	8002394 <HAL_UART_RxCpltCallback+0x38>
		{
			if(RxData == ENDLINE)
 8002380:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <HAL_UART_RxCpltCallback+0x50>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b0a      	cmp	r3, #10
 8002386:	d105      	bne.n	8002394 <HAL_UART_RxCpltCallback+0x38>
			{
				ReceivedLines++;
 8002388:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <HAL_UART_RxCpltCallback+0x58>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	3301      	adds	r3, #1
 800238e:	b2da      	uxtb	r2, r3
 8002390:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <HAL_UART_RxCpltCallback+0x58>)
 8002392:	701a      	strb	r2, [r3, #0]
			}
		}
    	HAL_UART_Receive_IT(&huart1,&RxData, 1);
 8002394:	2201      	movs	r2, #1
 8002396:	4905      	ldr	r1, [pc, #20]	; (80023ac <HAL_UART_RxCpltCallback+0x50>)
 8002398:	4807      	ldr	r0, [pc, #28]	; (80023b8 <HAL_UART_RxCpltCallback+0x5c>)
 800239a:	f004 f8c2 	bl	8006522 <HAL_UART_Receive_IT>
	}
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40013800 	.word	0x40013800
 80023ac:	20000304 	.word	0x20000304
 80023b0:	20000308 	.word	0x20000308
 80023b4:	2000036c 	.word	0x2000036c
 80023b8:	20000494 	.word	0x20000494

080023bc <delay_us>:
void delay_us (uint16_t us) //Blocking function
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 80023c6:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <delay_us+0x2c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2200      	movs	r2, #0
 80023cc:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 80023ce:	bf00      	nop
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <delay_us+0x2c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023d6:	88fb      	ldrh	r3, [r7, #6]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d3f9      	bcc.n	80023d0 <delay_us+0x14>
}
 80023dc:	bf00      	nop
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	200003bc 	.word	0x200003bc

080023ec <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	f107 0308 	add.w	r3, r7, #8
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8002406:	887b      	ldrh	r3, [r7, #2]
 8002408:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800240a:	2301      	movs	r3, #1
 800240c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240e:	2302      	movs	r3, #2
 8002410:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002412:	f107 0308 	add.w	r3, r7, #8
 8002416:	4619      	mov	r1, r3
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f002 f8c9 	bl	80045b0 <HAL_GPIO_Init>
}
 800241e:	bf00      	nop
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b086      	sub	sp, #24
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	460b      	mov	r3, r1
 8002430:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002432:	f107 0308 	add.w	r3, r7, #8
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	605a      	str	r2, [r3, #4]
 800243c:	609a      	str	r2, [r3, #8]
 800243e:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8002440:	887b      	ldrh	r3, [r7, #2]
 8002442:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002444:	2300      	movs	r3, #0
 8002446:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002448:	2301      	movs	r3, #1
 800244a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800244c:	f107 0308 	add.w	r3, r7, #8
 8002450:	4619      	mov	r1, r3
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f002 f8ac 	bl	80045b0 <HAL_GPIO_Init>
}
 8002458:	bf00      	nop
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <motor_control>:


void motor_control (double pos_right, double pos_left)
{
 8002460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002464:	b085      	sub	sp, #20
 8002466:	af00      	add	r7, sp, #0
 8002468:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800246c:	e9c7 2300 	strd	r2, r3, [r7]
	if (pos_left < 0 )
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	e9d7 0100 	ldrd	r0, r1, [r7]
 800247c:	f7fe faa8 	bl	80009d0 <__aeabi_dcmplt>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d02f      	beq.n	80024e6 <motor_control+0x86>
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_2, (uint32_t)((ARR*pos_left*-1) * GRUZIK.Speed_level));
 8002486:	4b64      	ldr	r3, [pc, #400]	; (8002618 <motor_control+0x1b8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f7fd ffc4 	bl	8000418 <__aeabi_i2d>
 8002490:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002494:	f7fe f82a 	bl	80004ec <__aeabi_dmul>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4690      	mov	r8, r2
 800249e:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80024a2:	4b5e      	ldr	r3, [pc, #376]	; (800261c <motor_control+0x1bc>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fd ffc8 	bl	800043c <__aeabi_f2d>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4640      	mov	r0, r8
 80024b2:	4649      	mov	r1, r9
 80024b4:	f7fe f81a 	bl	80004ec <__aeabi_dmul>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4958      	ldr	r1, [pc, #352]	; (8002620 <motor_control+0x1c0>)
 80024be:	680e      	ldr	r6, [r1, #0]
 80024c0:	4610      	mov	r0, r2
 80024c2:	4619      	mov	r1, r3
 80024c4:	f7fe faea 	bl	8000a9c <__aeabi_d2uiz>
 80024c8:	4603      	mov	r3, r0
 80024ca:	63b3      	str	r3, [r6, #56]	; 0x38
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80024cc:	2201      	movs	r2, #1
 80024ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024d2:	4854      	ldr	r0, [pc, #336]	; (8002624 <motor_control+0x1c4>)
 80024d4:	f002 fa07 	bl	80048e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80024d8:	2200      	movs	r2, #0
 80024da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024de:	4851      	ldr	r0, [pc, #324]	; (8002624 <motor_control+0x1c4>)
 80024e0:	f002 fa01 	bl	80048e6 <HAL_GPIO_WritePin>
 80024e4:	e02d      	b.n	8002542 <motor_control+0xe2>
	}
	else
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_2, (uint32_t)((ARR*pos_left) * GRUZIK.Speed_level));
 80024e6:	4b4c      	ldr	r3, [pc, #304]	; (8002618 <motor_control+0x1b8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fd ff94 	bl	8000418 <__aeabi_i2d>
 80024f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024f4:	f7fd fffa 	bl	80004ec <__aeabi_dmul>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4690      	mov	r8, r2
 80024fe:	4699      	mov	r9, r3
 8002500:	4b46      	ldr	r3, [pc, #280]	; (800261c <motor_control+0x1bc>)
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002504:	4618      	mov	r0, r3
 8002506:	f7fd ff99 	bl	800043c <__aeabi_f2d>
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	4640      	mov	r0, r8
 8002510:	4649      	mov	r1, r9
 8002512:	f7fd ffeb 	bl	80004ec <__aeabi_dmul>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4941      	ldr	r1, [pc, #260]	; (8002620 <motor_control+0x1c0>)
 800251c:	680e      	ldr	r6, [r1, #0]
 800251e:	4610      	mov	r0, r2
 8002520:	4619      	mov	r1, r3
 8002522:	f7fe fabb 	bl	8000a9c <__aeabi_d2uiz>
 8002526:	4603      	mov	r3, r0
 8002528:	63b3      	str	r3, [r6, #56]	; 0x38
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800252a:	2200      	movs	r2, #0
 800252c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002530:	483c      	ldr	r0, [pc, #240]	; (8002624 <motor_control+0x1c4>)
 8002532:	f002 f9d8 	bl	80048e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8002536:	2201      	movs	r2, #1
 8002538:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800253c:	4839      	ldr	r0, [pc, #228]	; (8002624 <motor_control+0x1c4>)
 800253e:	f002 f9d2 	bl	80048e6 <HAL_GPIO_WritePin>
	}
	if (pos_right < 0 )
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	f04f 0300 	mov.w	r3, #0
 800254a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800254e:	f7fe fa3f 	bl	80009d0 <__aeabi_dcmplt>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d02d      	beq.n	80025b4 <motor_control+0x154>
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_4, (uint32_t)((ARR*pos_right* -1) * GRUZIK.Speed_level));
 8002558:	4b2f      	ldr	r3, [pc, #188]	; (8002618 <motor_control+0x1b8>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f7fd ff5b 	bl	8000418 <__aeabi_i2d>
 8002562:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002566:	f7fd ffc1 	bl	80004ec <__aeabi_dmul>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4614      	mov	r4, r2
 8002570:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002574:	4b29      	ldr	r3, [pc, #164]	; (800261c <motor_control+0x1bc>)
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002578:	4618      	mov	r0, r3
 800257a:	f7fd ff5f 	bl	800043c <__aeabi_f2d>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4620      	mov	r0, r4
 8002584:	4629      	mov	r1, r5
 8002586:	f7fd ffb1 	bl	80004ec <__aeabi_dmul>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4924      	ldr	r1, [pc, #144]	; (8002620 <motor_control+0x1c0>)
 8002590:	680c      	ldr	r4, [r1, #0]
 8002592:	4610      	mov	r0, r2
 8002594:	4619      	mov	r1, r3
 8002596:	f7fe fa81 	bl	8000a9c <__aeabi_d2uiz>
 800259a:	4603      	mov	r3, r0
 800259c:	6423      	str	r3, [r4, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800259e:	2201      	movs	r2, #1
 80025a0:	2120      	movs	r1, #32
 80025a2:	4820      	ldr	r0, [pc, #128]	; (8002624 <motor_control+0x1c4>)
 80025a4:	f002 f99f 	bl	80048e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80025a8:	2200      	movs	r2, #0
 80025aa:	2110      	movs	r1, #16
 80025ac:	481d      	ldr	r0, [pc, #116]	; (8002624 <motor_control+0x1c4>)
 80025ae:	f002 f99a 	bl	80048e6 <HAL_GPIO_WritePin>
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_4, (uint32_t)((ARR*pos_right) * GRUZIK.Speed_level));
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
	}
}
 80025b2:	e02b      	b.n	800260c <motor_control+0x1ac>
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_4, (uint32_t)((ARR*pos_right) * GRUZIK.Speed_level));
 80025b4:	4b18      	ldr	r3, [pc, #96]	; (8002618 <motor_control+0x1b8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fd ff2d 	bl	8000418 <__aeabi_i2d>
 80025be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025c2:	f7fd ff93 	bl	80004ec <__aeabi_dmul>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4614      	mov	r4, r2
 80025cc:	461d      	mov	r5, r3
 80025ce:	4b13      	ldr	r3, [pc, #76]	; (800261c <motor_control+0x1bc>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fd ff32 	bl	800043c <__aeabi_f2d>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4620      	mov	r0, r4
 80025de:	4629      	mov	r1, r5
 80025e0:	f7fd ff84 	bl	80004ec <__aeabi_dmul>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	490d      	ldr	r1, [pc, #52]	; (8002620 <motor_control+0x1c0>)
 80025ea:	680c      	ldr	r4, [r1, #0]
 80025ec:	4610      	mov	r0, r2
 80025ee:	4619      	mov	r1, r3
 80025f0:	f7fe fa54 	bl	8000a9c <__aeabi_d2uiz>
 80025f4:	4603      	mov	r3, r0
 80025f6:	6423      	str	r3, [r4, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80025f8:	2200      	movs	r2, #0
 80025fa:	2120      	movs	r1, #32
 80025fc:	4809      	ldr	r0, [pc, #36]	; (8002624 <motor_control+0x1c4>)
 80025fe:	f002 f972 	bl	80048e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8002602:	2201      	movs	r2, #1
 8002604:	2110      	movs	r1, #16
 8002606:	4807      	ldr	r0, [pc, #28]	; (8002624 <motor_control+0x1c4>)
 8002608:	f002 f96d 	bl	80048e6 <HAL_GPIO_WritePin>
}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002616:	bf00      	nop
 8002618:	20000000 	.word	0x20000000
 800261c:	20000274 	.word	0x20000274
 8002620:	2000044c 	.word	0x2000044c
 8002624:	40010c00 	.word	0x40010c00

08002628 <sharp_turn>:


void sharp_turn ()
{
 8002628:	b5b0      	push	{r4, r5, r7, lr}
 800262a:	af00      	add	r7, sp, #0

	if (Last_idle < 25)
 800262c:	4b2c      	ldr	r3, [pc, #176]	; (80026e0 <sharp_turn+0xb8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b18      	cmp	r3, #24
 8002632:	dc29      	bgt.n	8002688 <sharp_turn+0x60>
	{
		if (Last_end == 1)
 8002634:	4b2b      	ldr	r3, [pc, #172]	; (80026e4 <sharp_turn+0xbc>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d112      	bne.n	8002662 <sharp_turn+0x3a>
			motor_control(GRUZIK.Sharp_bend_speed_right, GRUZIK.Sharp_bend_speed_left);
 800263c:	4b2a      	ldr	r3, [pc, #168]	; (80026e8 <sharp_turn+0xc0>)
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	4618      	mov	r0, r3
 8002642:	f7fd fee9 	bl	8000418 <__aeabi_i2d>
 8002646:	4604      	mov	r4, r0
 8002648:	460d      	mov	r5, r1
 800264a:	4b27      	ldr	r3, [pc, #156]	; (80026e8 <sharp_turn+0xc0>)
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fd fee2 	bl	8000418 <__aeabi_i2d>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4620      	mov	r0, r4
 800265a:	4629      	mov	r1, r5
 800265c:	f7ff ff00 	bl	8002460 <motor_control>
		if (Last_end == 1)
			motor_control(GRUZIK.Bend_speed_right, GRUZIK.Bend_speed_left);
		else
			motor_control(GRUZIK.Bend_speed_left, GRUZIK.Bend_speed_right);
	}
}
 8002660:	e03b      	b.n	80026da <sharp_turn+0xb2>
			motor_control(GRUZIK.Sharp_bend_speed_left, GRUZIK.Sharp_bend_speed_right);
 8002662:	4b21      	ldr	r3, [pc, #132]	; (80026e8 <sharp_turn+0xc0>)
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	4618      	mov	r0, r3
 8002668:	f7fd fed6 	bl	8000418 <__aeabi_i2d>
 800266c:	4604      	mov	r4, r0
 800266e:	460d      	mov	r5, r1
 8002670:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <sharp_turn+0xc0>)
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	4618      	mov	r0, r3
 8002676:	f7fd fecf 	bl	8000418 <__aeabi_i2d>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	4620      	mov	r0, r4
 8002680:	4629      	mov	r1, r5
 8002682:	f7ff feed 	bl	8002460 <motor_control>
}
 8002686:	e028      	b.n	80026da <sharp_turn+0xb2>
		if (Last_end == 1)
 8002688:	4b16      	ldr	r3, [pc, #88]	; (80026e4 <sharp_turn+0xbc>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d112      	bne.n	80026b6 <sharp_turn+0x8e>
			motor_control(GRUZIK.Bend_speed_right, GRUZIK.Bend_speed_left);
 8002690:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <sharp_turn+0xc0>)
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	4618      	mov	r0, r3
 8002696:	f7fd febf 	bl	8000418 <__aeabi_i2d>
 800269a:	4604      	mov	r4, r0
 800269c:	460d      	mov	r5, r1
 800269e:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <sharp_turn+0xc0>)
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fd feb8 	bl	8000418 <__aeabi_i2d>
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4620      	mov	r0, r4
 80026ae:	4629      	mov	r1, r5
 80026b0:	f7ff fed6 	bl	8002460 <motor_control>
}
 80026b4:	e011      	b.n	80026da <sharp_turn+0xb2>
			motor_control(GRUZIK.Bend_speed_left, GRUZIK.Bend_speed_right);
 80026b6:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <sharp_turn+0xc0>)
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fd feac 	bl	8000418 <__aeabi_i2d>
 80026c0:	4604      	mov	r4, r0
 80026c2:	460d      	mov	r5, r1
 80026c4:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <sharp_turn+0xc0>)
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fd fea5 	bl	8000418 <__aeabi_i2d>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	4620      	mov	r0, r4
 80026d4:	4629      	mov	r1, r5
 80026d6:	f7ff fec3 	bl	8002460 <motor_control>
}
 80026da:	bf00      	nop
 80026dc:	bdb0      	pop	{r4, r5, r7, pc}
 80026de:	bf00      	nop
 80026e0:	200002fc 	.word	0x200002fc
 80026e4:	200002f8 	.word	0x200002f8
 80026e8:	20000274 	.word	0x20000274

080026ec <QTR8_read>:
int QTR8_read ()
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDON_GPIO_Port, LEDON_Pin, 1);
 80026f2:	2201      	movs	r2, #1
 80026f4:	2101      	movs	r1, #1
 80026f6:	48a2      	ldr	r0, [pc, #648]	; (8002980 <QTR8_read+0x294>)
 80026f8:	f002 f8f5 	bl	80048e6 <HAL_GPIO_WritePin>

	Set_Pin_Output(SENSOR1_GPIO_Port, SENSOR1_Pin);
 80026fc:	2180      	movs	r1, #128	; 0x80
 80026fe:	48a1      	ldr	r0, [pc, #644]	; (8002984 <QTR8_read+0x298>)
 8002700:	f7ff fe74 	bl	80023ec <Set_Pin_Output>
	Set_Pin_Output(SENSOR2_GPIO_Port, SENSOR2_Pin);
 8002704:	2140      	movs	r1, #64	; 0x40
 8002706:	489f      	ldr	r0, [pc, #636]	; (8002984 <QTR8_read+0x298>)
 8002708:	f7ff fe70 	bl	80023ec <Set_Pin_Output>
	Set_Pin_Output(SENSOR3_GPIO_Port, SENSOR3_Pin);
 800270c:	2120      	movs	r1, #32
 800270e:	489d      	ldr	r0, [pc, #628]	; (8002984 <QTR8_read+0x298>)
 8002710:	f7ff fe6c 	bl	80023ec <Set_Pin_Output>
	Set_Pin_Output(SENSOR4_GPIO_Port, SENSOR4_Pin);
 8002714:	2110      	movs	r1, #16
 8002716:	489b      	ldr	r0, [pc, #620]	; (8002984 <QTR8_read+0x298>)
 8002718:	f7ff fe68 	bl	80023ec <Set_Pin_Output>
	Set_Pin_Output(SENSOR5_GPIO_Port, SENSOR5_Pin);
 800271c:	2108      	movs	r1, #8
 800271e:	4899      	ldr	r0, [pc, #612]	; (8002984 <QTR8_read+0x298>)
 8002720:	f7ff fe64 	bl	80023ec <Set_Pin_Output>
	Set_Pin_Output(SENSOR6_GPIO_Port, SENSOR6_Pin);
 8002724:	2104      	movs	r1, #4
 8002726:	4897      	ldr	r0, [pc, #604]	; (8002984 <QTR8_read+0x298>)
 8002728:	f7ff fe60 	bl	80023ec <Set_Pin_Output>
	Set_Pin_Output(SENSOR7_GPIO_Port, SENSOR7_Pin);
 800272c:	2102      	movs	r1, #2
 800272e:	4895      	ldr	r0, [pc, #596]	; (8002984 <QTR8_read+0x298>)
 8002730:	f7ff fe5c 	bl	80023ec <Set_Pin_Output>
	Set_Pin_Output(SENSOR8_GPIO_Port, SENSOR8_Pin);
 8002734:	2101      	movs	r1, #1
 8002736:	4893      	ldr	r0, [pc, #588]	; (8002984 <QTR8_read+0x298>)
 8002738:	f7ff fe58 	bl	80023ec <Set_Pin_Output>

	HAL_GPIO_WritePin (SENSOR1_GPIO_Port, SENSOR1_Pin, 1);
 800273c:	2201      	movs	r2, #1
 800273e:	2180      	movs	r1, #128	; 0x80
 8002740:	4890      	ldr	r0, [pc, #576]	; (8002984 <QTR8_read+0x298>)
 8002742:	f002 f8d0 	bl	80048e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR2_GPIO_Port, SENSOR2_Pin, 1);
 8002746:	2201      	movs	r2, #1
 8002748:	2140      	movs	r1, #64	; 0x40
 800274a:	488e      	ldr	r0, [pc, #568]	; (8002984 <QTR8_read+0x298>)
 800274c:	f002 f8cb 	bl	80048e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR3_GPIO_Port, SENSOR3_Pin, 1);
 8002750:	2201      	movs	r2, #1
 8002752:	2120      	movs	r1, #32
 8002754:	488b      	ldr	r0, [pc, #556]	; (8002984 <QTR8_read+0x298>)
 8002756:	f002 f8c6 	bl	80048e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR4_GPIO_Port, SENSOR4_Pin, 1);
 800275a:	2201      	movs	r2, #1
 800275c:	2110      	movs	r1, #16
 800275e:	4889      	ldr	r0, [pc, #548]	; (8002984 <QTR8_read+0x298>)
 8002760:	f002 f8c1 	bl	80048e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR5_GPIO_Port, SENSOR5_Pin, 1);
 8002764:	2201      	movs	r2, #1
 8002766:	2108      	movs	r1, #8
 8002768:	4886      	ldr	r0, [pc, #536]	; (8002984 <QTR8_read+0x298>)
 800276a:	f002 f8bc 	bl	80048e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR6_GPIO_Port, SENSOR6_Pin, 1);
 800276e:	2201      	movs	r2, #1
 8002770:	2104      	movs	r1, #4
 8002772:	4884      	ldr	r0, [pc, #528]	; (8002984 <QTR8_read+0x298>)
 8002774:	f002 f8b7 	bl	80048e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR7_GPIO_Port, SENSOR7_Pin, 1);
 8002778:	2201      	movs	r2, #1
 800277a:	2102      	movs	r1, #2
 800277c:	4881      	ldr	r0, [pc, #516]	; (8002984 <QTR8_read+0x298>)
 800277e:	f002 f8b2 	bl	80048e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR8_GPIO_Port, SENSOR8_Pin, 1);
 8002782:	2201      	movs	r2, #1
 8002784:	2101      	movs	r1, #1
 8002786:	487f      	ldr	r0, [pc, #508]	; (8002984 <QTR8_read+0x298>)
 8002788:	f002 f8ad 	bl	80048e6 <HAL_GPIO_WritePin>

	delay_us(10);
 800278c:	200a      	movs	r0, #10
 800278e:	f7ff fe15 	bl	80023bc <delay_us>

	Set_Pin_Input(SENSOR1_GPIO_Port, SENSOR1_Pin);
 8002792:	2180      	movs	r1, #128	; 0x80
 8002794:	487b      	ldr	r0, [pc, #492]	; (8002984 <QTR8_read+0x298>)
 8002796:	f7ff fe46 	bl	8002426 <Set_Pin_Input>
	Set_Pin_Input(SENSOR2_GPIO_Port, SENSOR2_Pin);
 800279a:	2140      	movs	r1, #64	; 0x40
 800279c:	4879      	ldr	r0, [pc, #484]	; (8002984 <QTR8_read+0x298>)
 800279e:	f7ff fe42 	bl	8002426 <Set_Pin_Input>
	Set_Pin_Input(SENSOR3_GPIO_Port, SENSOR3_Pin);
 80027a2:	2120      	movs	r1, #32
 80027a4:	4877      	ldr	r0, [pc, #476]	; (8002984 <QTR8_read+0x298>)
 80027a6:	f7ff fe3e 	bl	8002426 <Set_Pin_Input>
	Set_Pin_Input(SENSOR4_GPIO_Port, SENSOR4_Pin);
 80027aa:	2110      	movs	r1, #16
 80027ac:	4875      	ldr	r0, [pc, #468]	; (8002984 <QTR8_read+0x298>)
 80027ae:	f7ff fe3a 	bl	8002426 <Set_Pin_Input>
	Set_Pin_Input(SENSOR5_GPIO_Port, SENSOR5_Pin);
 80027b2:	2108      	movs	r1, #8
 80027b4:	4873      	ldr	r0, [pc, #460]	; (8002984 <QTR8_read+0x298>)
 80027b6:	f7ff fe36 	bl	8002426 <Set_Pin_Input>
	Set_Pin_Input(SENSOR6_GPIO_Port, SENSOR6_Pin);
 80027ba:	2104      	movs	r1, #4
 80027bc:	4871      	ldr	r0, [pc, #452]	; (8002984 <QTR8_read+0x298>)
 80027be:	f7ff fe32 	bl	8002426 <Set_Pin_Input>
	Set_Pin_Input(SENSOR7_GPIO_Port, SENSOR7_Pin);
 80027c2:	2102      	movs	r1, #2
 80027c4:	486f      	ldr	r0, [pc, #444]	; (8002984 <QTR8_read+0x298>)
 80027c6:	f7ff fe2e 	bl	8002426 <Set_Pin_Input>
	Set_Pin_Input(SENSOR8_GPIO_Port, SENSOR8_Pin);
 80027ca:	2101      	movs	r1, #1
 80027cc:	486d      	ldr	r0, [pc, #436]	; (8002984 <QTR8_read+0x298>)
 80027ce:	f7ff fe2a 	bl	8002426 <Set_Pin_Input>

	// Threshold
	 delay_us(4500);
 80027d2:	f241 1094 	movw	r0, #4500	; 0x1194
 80027d6:	f7ff fdf1 	bl	80023bc <delay_us>
//	 sensory[7] = HAL_GPIO_ReadPin(SENSOR8_GPIO_Port, SENSOR8_Pin);
//	 uint8_t Message[64];
//	 sprintf((char*)Message,"S1: %d S2: %d S3: %d S4: %d S5: %d S6: %d S7: %d S8: %d\n\r", sensory[0],sensory[1],sensory[2],sensory[3],sensory[4],sensory[5],sensory[6],sensory[7]);
//	 HAL_UART_Transmit(&huart3, Message, strlen((char*)Message), 100);

	Sensors_read = 0x00000000;
 80027da:	4b6b      	ldr	r3, [pc, #428]	; (8002988 <QTR8_read+0x29c>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
	int pos = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	607b      	str	r3, [r7, #4]
  int active = 0;
 80027e4:	2300      	movs	r3, #0
 80027e6:	603b      	str	r3, [r7, #0]

	if (HAL_GPIO_ReadPin(SENSOR1_GPIO_Port, SENSOR1_Pin)) {
 80027e8:	2180      	movs	r1, #128	; 0x80
 80027ea:	4866      	ldr	r0, [pc, #408]	; (8002984 <QTR8_read+0x298>)
 80027ec:	f002 f864 	bl	80048b8 <HAL_GPIO_ReadPin>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00f      	beq.n	8002816 <QTR8_read+0x12a>
		Sensors_read |= 0x00000001;
 80027f6:	4b64      	ldr	r3, [pc, #400]	; (8002988 <QTR8_read+0x29c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	4a62      	ldr	r2, [pc, #392]	; (8002988 <QTR8_read+0x29c>)
 8002800:	6013      	str	r3, [r2, #0]
		pos += 1000;//1000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002808:	607b      	str	r3, [r7, #4]
    active++;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	3301      	adds	r3, #1
 800280e:	603b      	str	r3, [r7, #0]
		Last_end = 1;
 8002810:	4b5e      	ldr	r3, [pc, #376]	; (800298c <QTR8_read+0x2a0>)
 8002812:	2201      	movs	r2, #1
 8002814:	601a      	str	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(SENSOR2_GPIO_Port, SENSOR2_Pin)) {
 8002816:	2140      	movs	r1, #64	; 0x40
 8002818:	485a      	ldr	r0, [pc, #360]	; (8002984 <QTR8_read+0x298>)
 800281a:	f002 f84d 	bl	80048b8 <HAL_GPIO_ReadPin>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00c      	beq.n	800283e <QTR8_read+0x152>
		Sensors_read |= 0x00000010;
 8002824:	4b58      	ldr	r3, [pc, #352]	; (8002988 <QTR8_read+0x29c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f043 0310 	orr.w	r3, r3, #16
 800282c:	4a56      	ldr	r2, [pc, #344]	; (8002988 <QTR8_read+0x29c>)
 800282e:	6013      	str	r3, [r2, #0]
		pos += 2000;//2000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002836:	607b      	str	r3, [r7, #4]
    active++;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	3301      	adds	r3, #1
 800283c:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR3_GPIO_Port, SENSOR3_Pin)) {
 800283e:	2120      	movs	r1, #32
 8002840:	4850      	ldr	r0, [pc, #320]	; (8002984 <QTR8_read+0x298>)
 8002842:	f002 f839 	bl	80048b8 <HAL_GPIO_ReadPin>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00c      	beq.n	8002866 <QTR8_read+0x17a>
		Sensors_read |= 0x00000100;
 800284c:	4b4e      	ldr	r3, [pc, #312]	; (8002988 <QTR8_read+0x29c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002854:	4a4c      	ldr	r2, [pc, #304]	; (8002988 <QTR8_read+0x29c>)
 8002856:	6013      	str	r3, [r2, #0]
		pos += 3000;//3000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 800285e:	607b      	str	r3, [r7, #4]
    active++;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	3301      	adds	r3, #1
 8002864:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR4_GPIO_Port, SENSOR4_Pin)) {
 8002866:	2110      	movs	r1, #16
 8002868:	4846      	ldr	r0, [pc, #280]	; (8002984 <QTR8_read+0x298>)
 800286a:	f002 f825 	bl	80048b8 <HAL_GPIO_ReadPin>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00c      	beq.n	800288e <QTR8_read+0x1a2>
		Sensors_read |= 0x00001000;
 8002874:	4b44      	ldr	r3, [pc, #272]	; (8002988 <QTR8_read+0x29c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800287c:	4a42      	ldr	r2, [pc, #264]	; (8002988 <QTR8_read+0x29c>)
 800287e:	6013      	str	r3, [r2, #0]
		pos += 4000;//4000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8002886:	607b      	str	r3, [r7, #4]
    active++;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	3301      	adds	r3, #1
 800288c:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR5_GPIO_Port, SENSOR5_Pin)) {
 800288e:	2108      	movs	r1, #8
 8002890:	483c      	ldr	r0, [pc, #240]	; (8002984 <QTR8_read+0x298>)
 8002892:	f002 f811 	bl	80048b8 <HAL_GPIO_ReadPin>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00d      	beq.n	80028b8 <QTR8_read+0x1cc>
		Sensors_read |= 0x00010000;
 800289c:	4b3a      	ldr	r3, [pc, #232]	; (8002988 <QTR8_read+0x29c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a4:	4a38      	ldr	r2, [pc, #224]	; (8002988 <QTR8_read+0x29c>)
 80028a6:	6013      	str	r3, [r2, #0]
		pos += 5000;//5000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80028ae:	3308      	adds	r3, #8
 80028b0:	607b      	str	r3, [r7, #4]
    active++;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	3301      	adds	r3, #1
 80028b6:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR6_GPIO_Port, SENSOR6_Pin)) {
 80028b8:	2104      	movs	r1, #4
 80028ba:	4832      	ldr	r0, [pc, #200]	; (8002984 <QTR8_read+0x298>)
 80028bc:	f001 fffc 	bl	80048b8 <HAL_GPIO_ReadPin>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00d      	beq.n	80028e2 <QTR8_read+0x1f6>
		Sensors_read |= 0x00100000;
 80028c6:	4b30      	ldr	r3, [pc, #192]	; (8002988 <QTR8_read+0x29c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ce:	4a2e      	ldr	r2, [pc, #184]	; (8002988 <QTR8_read+0x29c>)
 80028d0:	6013      	str	r3, [r2, #0]
		pos += 6000;//6000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80028d8:	3310      	adds	r3, #16
 80028da:	607b      	str	r3, [r7, #4]
    active++;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	3301      	adds	r3, #1
 80028e0:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR7_GPIO_Port, SENSOR7_Pin)) {
 80028e2:	2102      	movs	r1, #2
 80028e4:	4827      	ldr	r0, [pc, #156]	; (8002984 <QTR8_read+0x298>)
 80028e6:	f001 ffe7 	bl	80048b8 <HAL_GPIO_ReadPin>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00d      	beq.n	800290c <QTR8_read+0x220>
		Sensors_read |= 0x01000000;
 80028f0:	4b25      	ldr	r3, [pc, #148]	; (8002988 <QTR8_read+0x29c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028f8:	4a23      	ldr	r2, [pc, #140]	; (8002988 <QTR8_read+0x29c>)
 80028fa:	6013      	str	r3, [r2, #0]
		pos += 7000;//7000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f503 53da 	add.w	r3, r3, #6976	; 0x1b40
 8002902:	3318      	adds	r3, #24
 8002904:	607b      	str	r3, [r7, #4]
    active++;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	3301      	adds	r3, #1
 800290a:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR8_GPIO_Port, SENSOR8_Pin)) {
 800290c:	2101      	movs	r1, #1
 800290e:	481d      	ldr	r0, [pc, #116]	; (8002984 <QTR8_read+0x298>)
 8002910:	f001 ffd2 	bl	80048b8 <HAL_GPIO_ReadPin>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00f      	beq.n	800293a <QTR8_read+0x24e>
		Sensors_read |= 0x10000000;
 800291a:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <QTR8_read+0x29c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002922:	4a19      	ldr	r2, [pc, #100]	; (8002988 <QTR8_read+0x29c>)
 8002924:	6013      	str	r3, [r2, #0]
		pos += 8000;//8000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 800292c:	607b      	str	r3, [r7, #4]
    active++;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	3301      	adds	r3, #1
 8002932:	603b      	str	r3, [r7, #0]
		Last_end = 0;
 8002934:	4b15      	ldr	r3, [pc, #84]	; (800298c <QTR8_read+0x2a0>)
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
  }

  HAL_GPIO_WritePin(LEDON_GPIO_Port, LEDON_Pin, 0);
 800293a:	2200      	movs	r2, #0
 800293c:	2101      	movs	r1, #1
 800293e:	4810      	ldr	r0, [pc, #64]	; (8002980 <QTR8_read+0x294>)
 8002940:	f001 ffd1 	bl	80048e6 <HAL_GPIO_WritePin>

  actives = active;
 8002944:	4a12      	ldr	r2, [pc, #72]	; (8002990 <QTR8_read+0x2a4>)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	6013      	str	r3, [r2, #0]
	Position = pos/active;
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002952:	4a10      	ldr	r2, [pc, #64]	; (8002994 <QTR8_read+0x2a8>)
 8002954:	6013      	str	r3, [r2, #0]

	if (actives == 0)
 8002956:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <QTR8_read+0x2a4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d105      	bne.n	800296a <QTR8_read+0x27e>
		Last_idle++;
 800295e:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <QTR8_read+0x2ac>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	3301      	adds	r3, #1
 8002964:	4a0c      	ldr	r2, [pc, #48]	; (8002998 <QTR8_read+0x2ac>)
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	e002      	b.n	8002970 <QTR8_read+0x284>
	else
		Last_idle = 0;
 800296a:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <QTR8_read+0x2ac>)
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]

	return pos/active;
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8002978:	4618      	mov	r0, r3
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40010c00 	.word	0x40010c00
 8002984:	40010800 	.word	0x40010800
 8002988:	200002ac 	.word	0x200002ac
 800298c:	200002f8 	.word	0x200002f8
 8002990:	20000300 	.word	0x20000300
 8002994:	200002b0 	.word	0x200002b0
 8002998:	200002fc 	.word	0x200002fc

0800299c <forward_brake>:


void forward_brake(int pos_right, int pos_left)
{
 800299c:	b5b0      	push	{r4, r5, r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
	if (actives == 0)
 80029a6:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <forward_brake+0x3c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d102      	bne.n	80029b4 <forward_brake+0x18>
		sharp_turn();
 80029ae:	f7ff fe3b 	bl	8002628 <sharp_turn>
	else
	  motor_control(pos_right, pos_left);
}
 80029b2:	e00d      	b.n	80029d0 <forward_brake+0x34>
	  motor_control(pos_right, pos_left);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7fd fd2f 	bl	8000418 <__aeabi_i2d>
 80029ba:	4604      	mov	r4, r0
 80029bc:	460d      	mov	r5, r1
 80029be:	6838      	ldr	r0, [r7, #0]
 80029c0:	f7fd fd2a 	bl	8000418 <__aeabi_i2d>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4620      	mov	r0, r4
 80029ca:	4629      	mov	r1, r5
 80029cc:	f7ff fd48 	bl	8002460 <motor_control>
}
 80029d0:	bf00      	nop
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bdb0      	pop	{r4, r5, r7, pc}
 80029d8:	20000300 	.word	0x20000300

080029dc <past_errors>:

void past_errors (int error)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  for (int i = 9; i > 0; i--)
 80029e4:	2309      	movs	r3, #9
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	e00b      	b.n	8002a02 <past_errors+0x26>
      Errors[i] = Errors[i-1];
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	3b01      	subs	r3, #1
 80029ee:	4a0a      	ldr	r2, [pc, #40]	; (8002a18 <past_errors+0x3c>)
 80029f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80029f4:	4908      	ldr	r1, [pc, #32]	; (8002a18 <past_errors+0x3c>)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int i = 9; i > 0; i--)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	dcf0      	bgt.n	80029ea <past_errors+0xe>
  Errors[0] = error;
 8002a08:	4a03      	ldr	r2, [pc, #12]	; (8002a18 <past_errors+0x3c>)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6013      	str	r3, [r2, #0]
}
 8002a0e:	bf00      	nop
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr
 8002a18:	200002d0 	.word	0x200002d0

08002a1c <errors_sum>:

int errors_sum (int index, int abs)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  int sum = 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < index; i++)
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	e01a      	b.n	8002a66 <errors_sum+0x4a>
  {
    if (abs == 1 && Errors[i] < 0)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d10d      	bne.n	8002a52 <errors_sum+0x36>
 8002a36:	4a11      	ldr	r2, [pc, #68]	; (8002a7c <errors_sum+0x60>)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	da07      	bge.n	8002a52 <errors_sum+0x36>
      sum += -Errors[i];
 8002a42:	4a0e      	ldr	r2, [pc, #56]	; (8002a7c <errors_sum+0x60>)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	e006      	b.n	8002a60 <errors_sum+0x44>
    else
      sum += Errors[i];
 8002a52:	4a0a      	ldr	r2, [pc, #40]	; (8002a7c <errors_sum+0x60>)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < index; i++)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	3301      	adds	r3, #1
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	dbe0      	blt.n	8002a30 <errors_sum+0x14>
  }
  return sum;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	200002d0 	.word	0x200002d0

08002a80 <PID_control>:

void PID_control()
{
 8002a80:	b590      	push	{r4, r7, lr}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
  uint16_t position = QTR8_read();
 8002a86:	f7ff fe31 	bl	80026ec <QTR8_read>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	81fb      	strh	r3, [r7, #14]
  int error = 4500 - position;
 8002a8e:	89fb      	ldrh	r3, [r7, #14]
 8002a90:	f5c3 538c 	rsb	r3, r3, #4480	; 0x1180
 8002a94:	3314      	adds	r3, #20
 8002a96:	60bb      	str	r3, [r7, #8]
  past_errors(error);
 8002a98:	68b8      	ldr	r0, [r7, #8]
 8002a9a:	f7ff ff9f 	bl	80029dc <past_errors>

  P = error;
 8002a9e:	4a54      	ldr	r2, [pc, #336]	; (8002bf0 <PID_control+0x170>)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	6013      	str	r3, [r2, #0]
  I = errors_sum(5, 0);
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	2005      	movs	r0, #5
 8002aa8:	f7ff ffb8 	bl	8002a1c <errors_sum>
 8002aac:	4603      	mov	r3, r0
 8002aae:	4a51      	ldr	r2, [pc, #324]	; (8002bf4 <PID_control+0x174>)
 8002ab0:	6013      	str	r3, [r2, #0]
  D = error - Last_error;
 8002ab2:	4b51      	ldr	r3, [pc, #324]	; (8002bf8 <PID_control+0x178>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	4a50      	ldr	r2, [pc, #320]	; (8002bfc <PID_control+0x17c>)
 8002abc:	6013      	str	r3, [r2, #0]
  R = errors_sum(5, 1);
 8002abe:	2101      	movs	r1, #1
 8002ac0:	2005      	movs	r0, #5
 8002ac2:	f7ff ffab 	bl	8002a1c <errors_sum>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	4a4d      	ldr	r2, [pc, #308]	; (8002c00 <PID_control+0x180>)
 8002aca:	6013      	str	r3, [r2, #0]
  Last_error = error;
 8002acc:	4a4a      	ldr	r2, [pc, #296]	; (8002bf8 <PID_control+0x178>)
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	6013      	str	r3, [r2, #0]

  int motorspeed = P*GRUZIK.Kp + I*Ki + D*GRUZIK.Kd;
 8002ad2:	4b47      	ldr	r3, [pc, #284]	; (8002bf0 <PID_control+0x170>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe f90a 	bl	8000cf0 <__aeabi_i2f>
 8002adc:	4602      	mov	r2, r0
 8002ade:	4b49      	ldr	r3, [pc, #292]	; (8002c04 <PID_control+0x184>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4610      	mov	r0, r2
 8002ae6:	f7fe f957 	bl	8000d98 <__aeabi_fmul>
 8002aea:	4603      	mov	r3, r0
 8002aec:	461c      	mov	r4, r3
 8002aee:	4b41      	ldr	r3, [pc, #260]	; (8002bf4 <PID_control+0x174>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fe f8fc 	bl	8000cf0 <__aeabi_i2f>
 8002af8:	4602      	mov	r2, r0
 8002afa:	4b43      	ldr	r3, [pc, #268]	; (8002c08 <PID_control+0x188>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4619      	mov	r1, r3
 8002b00:	4610      	mov	r0, r2
 8002b02:	f7fe f949 	bl	8000d98 <__aeabi_fmul>
 8002b06:	4603      	mov	r3, r0
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	f7fe f83c 	bl	8000b88 <__addsf3>
 8002b10:	4603      	mov	r3, r0
 8002b12:	461c      	mov	r4, r3
 8002b14:	4b39      	ldr	r3, [pc, #228]	; (8002bfc <PID_control+0x17c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7fe f8e9 	bl	8000cf0 <__aeabi_i2f>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	4b38      	ldr	r3, [pc, #224]	; (8002c04 <PID_control+0x184>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4619      	mov	r1, r3
 8002b26:	4610      	mov	r0, r2
 8002b28:	f7fe f936 	bl	8000d98 <__aeabi_fmul>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4620      	mov	r0, r4
 8002b32:	f7fe f829 	bl	8000b88 <__addsf3>
 8002b36:	4603      	mov	r3, r0
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fe faf3 	bl	8001124 <__aeabi_f2iz>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	607b      	str	r3, [r7, #4]

  int motorspeedl = GRUZIK.Base_speed_L + motorspeed - R*Kr;
 8002b42:	4b30      	ldr	r3, [pc, #192]	; (8002c04 <PID_control+0x184>)
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4413      	add	r3, r2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe f8d0 	bl	8000cf0 <__aeabi_i2f>
 8002b50:	4604      	mov	r4, r0
 8002b52:	4b2b      	ldr	r3, [pc, #172]	; (8002c00 <PID_control+0x180>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe f8ca 	bl	8000cf0 <__aeabi_i2f>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	4b2b      	ldr	r3, [pc, #172]	; (8002c0c <PID_control+0x18c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4619      	mov	r1, r3
 8002b64:	4610      	mov	r0, r2
 8002b66:	f7fe f917 	bl	8000d98 <__aeabi_fmul>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4620      	mov	r0, r4
 8002b70:	f7fe f808 	bl	8000b84 <__aeabi_fsub>
 8002b74:	4603      	mov	r3, r0
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe fad4 	bl	8001124 <__aeabi_f2iz>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	617b      	str	r3, [r7, #20]
  int motorspeedr = GRUZIK.Base_speed_R - motorspeed - R*Kr;
 8002b80:	4b20      	ldr	r3, [pc, #128]	; (8002c04 <PID_control+0x184>)
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fe f8b1 	bl	8000cf0 <__aeabi_i2f>
 8002b8e:	4604      	mov	r4, r0
 8002b90:	4b1b      	ldr	r3, [pc, #108]	; (8002c00 <PID_control+0x180>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fe f8ab 	bl	8000cf0 <__aeabi_i2f>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	4b1b      	ldr	r3, [pc, #108]	; (8002c0c <PID_control+0x18c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	f7fe f8f8 	bl	8000d98 <__aeabi_fmul>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	4619      	mov	r1, r3
 8002bac:	4620      	mov	r0, r4
 8002bae:	f7fd ffe9 	bl	8000b84 <__aeabi_fsub>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fe fab5 	bl	8001124 <__aeabi_f2iz>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	613b      	str	r3, [r7, #16]

  if (motorspeedl > GRUZIK.Max_speed_L)
 8002bbe:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <PID_control+0x184>)
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	dd02      	ble.n	8002bce <PID_control+0x14e>
    motorspeedl = GRUZIK.Max_speed_L;
 8002bc8:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <PID_control+0x184>)
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	617b      	str	r3, [r7, #20]
  if (motorspeedr > GRUZIK.Max_speed_R)
 8002bce:	4b0d      	ldr	r3, [pc, #52]	; (8002c04 <PID_control+0x184>)
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	dd02      	ble.n	8002bde <PID_control+0x15e>
    motorspeedr = GRUZIK.Max_speed_R;
 8002bd8:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <PID_control+0x184>)
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	613b      	str	r3, [r7, #16]

	forward_brake(motorspeedr, motorspeedl);
 8002bde:	6979      	ldr	r1, [r7, #20]
 8002be0:	6938      	ldr	r0, [r7, #16]
 8002be2:	f7ff fedb 	bl	800299c <forward_brake>
}
 8002be6:	bf00      	nop
 8002be8:	371c      	adds	r7, #28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd90      	pop	{r4, r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	200002bc 	.word	0x200002bc
 8002bf4:	200002c0 	.word	0x200002c0
 8002bf8:	200002cc 	.word	0x200002cc
 8002bfc:	200002c4 	.word	0x200002c4
 8002c00:	200002c8 	.word	0x200002c8
 8002c04:	20000274 	.word	0x20000274
 8002c08:	200002b4 	.word	0x200002b4
 8002c0c:	200002b8 	.word	0x200002b8

08002c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c14:	b672      	cpsid	i
}
 8002c16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c18:	e7fe      	b.n	8002c18 <Error_Handler+0x8>
	...

08002c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c22:	4b15      	ldr	r3, [pc, #84]	; (8002c78 <HAL_MspInit+0x5c>)
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	4a14      	ldr	r2, [pc, #80]	; (8002c78 <HAL_MspInit+0x5c>)
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	6193      	str	r3, [r2, #24]
 8002c2e:	4b12      	ldr	r3, [pc, #72]	; (8002c78 <HAL_MspInit+0x5c>)
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	60bb      	str	r3, [r7, #8]
 8002c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c3a:	4b0f      	ldr	r3, [pc, #60]	; (8002c78 <HAL_MspInit+0x5c>)
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	4a0e      	ldr	r2, [pc, #56]	; (8002c78 <HAL_MspInit+0x5c>)
 8002c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c44:	61d3      	str	r3, [r2, #28]
 8002c46:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <HAL_MspInit+0x5c>)
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	607b      	str	r3, [r7, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c52:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <HAL_MspInit+0x60>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	4a04      	ldr	r2, [pc, #16]	; (8002c7c <HAL_MspInit+0x60>)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40010000 	.word	0x40010000

08002c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c84:	e7fe      	b.n	8002c84 <NMI_Handler+0x4>

08002c86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c86:	b480      	push	{r7}
 8002c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c8a:	e7fe      	b.n	8002c8a <HardFault_Handler+0x4>

08002c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c90:	e7fe      	b.n	8002c90 <MemManage_Handler+0x4>

08002c92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c92:	b480      	push	{r7}
 8002c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c96:	e7fe      	b.n	8002c96 <BusFault_Handler+0x4>

08002c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c9c:	e7fe      	b.n	8002c9c <UsageFault_Handler+0x4>

08002c9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr

08002caa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002caa:	b480      	push	{r7}
 8002cac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr

08002cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cc6:	f000 fc85 	bl	80035d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	bd80      	pop	{r7, pc}
	...

08002cd0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002cd4:	4802      	ldr	r0, [pc, #8]	; (8002ce0 <DMA1_Channel1_IRQHandler+0x10>)
 8002cd6:	f001 fb37 	bl	8004348 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	20000230 	.word	0x20000230

08002ce4 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ce8:	4802      	ldr	r0, [pc, #8]	; (8002cf4 <TIM1_BRK_IRQHandler+0x10>)
 8002cea:	f002 fd19 	bl	8005720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000374 	.word	0x20000374

08002cf8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002cfc:	4802      	ldr	r0, [pc, #8]	; (8002d08 <TIM1_UP_IRQHandler+0x10>)
 8002cfe:	f002 fd0f 	bl	8005720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000374 	.word	0x20000374

08002d0c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d10:	4802      	ldr	r0, [pc, #8]	; (8002d1c <TIM1_TRG_COM_IRQHandler+0x10>)
 8002d12:	f002 fd05 	bl	8005720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002d16:	bf00      	nop
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20000374 	.word	0x20000374

08002d20 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d24:	4802      	ldr	r0, [pc, #8]	; (8002d30 <TIM1_CC_IRQHandler+0x10>)
 8002d26:	f002 fcfb 	bl	8005720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002d2a:	bf00      	nop
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20000374 	.word	0x20000374

08002d34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d38:	4802      	ldr	r0, [pc, #8]	; (8002d44 <USART1_IRQHandler+0x10>)
 8002d3a:	f003 fc17 	bl	800656c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000494 	.word	0x20000494

08002d48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return 1;
 8002d4c:	2301      	movs	r3, #1
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr

08002d56 <_kill>:

int _kill(int pid, int sig)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b082      	sub	sp, #8
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
 8002d5e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d60:	f004 f988 	bl	8007074 <__errno>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2216      	movs	r2, #22
 8002d68:	601a      	str	r2, [r3, #0]
  return -1;
 8002d6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <_exit>:

void _exit (int status)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b082      	sub	sp, #8
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d7e:	f04f 31ff 	mov.w	r1, #4294967295
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7ff ffe7 	bl	8002d56 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d88:	e7fe      	b.n	8002d88 <_exit+0x12>

08002d8a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b086      	sub	sp, #24
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	e00a      	b.n	8002db2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d9c:	f3af 8000 	nop.w
 8002da0:	4601      	mov	r1, r0
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	60ba      	str	r2, [r7, #8]
 8002da8:	b2ca      	uxtb	r2, r1
 8002daa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	3301      	adds	r3, #1
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	dbf0      	blt.n	8002d9c <_read+0x12>
  }

  return len;
 8002dba:	687b      	ldr	r3, [r7, #4]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	e009      	b.n	8002dea <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	60ba      	str	r2, [r7, #8]
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	3301      	adds	r3, #1
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	dbf1      	blt.n	8002dd6 <_write+0x12>
  }
  return len;
 8002df2:	687b      	ldr	r3, [r7, #4]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <_close>:

int _close(int file)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bc80      	pop	{r7}
 8002e10:	4770      	bx	lr

08002e12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e22:	605a      	str	r2, [r3, #4]
  return 0;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr

08002e30 <_isatty>:

int _isatty(int file)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e38:	2301      	movs	r3, #1
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e64:	4a14      	ldr	r2, [pc, #80]	; (8002eb8 <_sbrk+0x5c>)
 8002e66:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <_sbrk+0x60>)
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e70:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <_sbrk+0x64>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d102      	bne.n	8002e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e78:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <_sbrk+0x64>)
 8002e7a:	4a12      	ldr	r2, [pc, #72]	; (8002ec4 <_sbrk+0x68>)
 8002e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e7e:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <_sbrk+0x64>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4413      	add	r3, r2
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d207      	bcs.n	8002e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e8c:	f004 f8f2 	bl	8007074 <__errno>
 8002e90:	4603      	mov	r3, r0
 8002e92:	220c      	movs	r2, #12
 8002e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e96:	f04f 33ff 	mov.w	r3, #4294967295
 8002e9a:	e009      	b.n	8002eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e9c:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <_sbrk+0x64>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ea2:	4b07      	ldr	r3, [pc, #28]	; (8002ec0 <_sbrk+0x64>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	4a05      	ldr	r2, [pc, #20]	; (8002ec0 <_sbrk+0x64>)
 8002eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002eae:	68fb      	ldr	r3, [r7, #12]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	20005000 	.word	0x20005000
 8002ebc:	00000400 	.word	0x00000400
 8002ec0:	20000370 	.word	0x20000370
 8002ec4:	20000538 	.word	0x20000538

08002ec8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ecc:	bf00      	nop
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr

08002ed4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eda:	f107 0308 	add.w	r3, r7, #8
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	605a      	str	r2, [r3, #4]
 8002ee4:	609a      	str	r2, [r3, #8]
 8002ee6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ee8:	463b      	mov	r3, r7
 8002eea:	2200      	movs	r2, #0
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ef0:	4b1f      	ldr	r3, [pc, #124]	; (8002f70 <MX_TIM1_Init+0x9c>)
 8002ef2:	4a20      	ldr	r2, [pc, #128]	; (8002f74 <MX_TIM1_Init+0xa0>)
 8002ef4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9000;
 8002ef6:	4b1e      	ldr	r3, [pc, #120]	; (8002f70 <MX_TIM1_Init+0x9c>)
 8002ef8:	f242 3228 	movw	r2, #9000	; 0x2328
 8002efc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002efe:	4b1c      	ldr	r3, [pc, #112]	; (8002f70 <MX_TIM1_Init+0x9c>)
 8002f00:	2210      	movs	r2, #16
 8002f02:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002f04:	4b1a      	ldr	r3, [pc, #104]	; (8002f70 <MX_TIM1_Init+0x9c>)
 8002f06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f0c:	4b18      	ldr	r3, [pc, #96]	; (8002f70 <MX_TIM1_Init+0x9c>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f12:	4b17      	ldr	r3, [pc, #92]	; (8002f70 <MX_TIM1_Init+0x9c>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f18:	4b15      	ldr	r3, [pc, #84]	; (8002f70 <MX_TIM1_Init+0x9c>)
 8002f1a:	2280      	movs	r2, #128	; 0x80
 8002f1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f1e:	4814      	ldr	r0, [pc, #80]	; (8002f70 <MX_TIM1_Init+0x9c>)
 8002f20:	f002 f9c0 	bl	80052a4 <HAL_TIM_Base_Init>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002f2a:	f7ff fe71 	bl	8002c10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f34:	f107 0308 	add.w	r3, r7, #8
 8002f38:	4619      	mov	r1, r3
 8002f3a:	480d      	ldr	r0, [pc, #52]	; (8002f70 <MX_TIM1_Init+0x9c>)
 8002f3c:	f002 fe16 	bl	8005b6c <HAL_TIM_ConfigClockSource>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002f46:	f7ff fe63 	bl	8002c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f52:	463b      	mov	r3, r7
 8002f54:	4619      	mov	r1, r3
 8002f56:	4806      	ldr	r0, [pc, #24]	; (8002f70 <MX_TIM1_Init+0x9c>)
 8002f58:	f003 f9a0 	bl	800629c <HAL_TIMEx_MasterConfigSynchronization>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002f62:	f7ff fe55 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002f66:	bf00      	nop
 8002f68:	3718      	adds	r7, #24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000374 	.word	0x20000374
 8002f74:	40012c00 	.word	0x40012c00

08002f78 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f7e:	f107 0308 	add.w	r3, r7, #8
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	605a      	str	r2, [r3, #4]
 8002f88:	609a      	str	r2, [r3, #8]
 8002f8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f8c:	463b      	mov	r3, r7
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f94:	4b1d      	ldr	r3, [pc, #116]	; (800300c <MX_TIM2_Init+0x94>)
 8002f96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 8002f9c:	4b1b      	ldr	r3, [pc, #108]	; (800300c <MX_TIM2_Init+0x94>)
 8002f9e:	2209      	movs	r2, #9
 8002fa0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fa2:	4b1a      	ldr	r3, [pc, #104]	; (800300c <MX_TIM2_Init+0x94>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002fa8:	4b18      	ldr	r3, [pc, #96]	; (800300c <MX_TIM2_Init+0x94>)
 8002faa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fb0:	4b16      	ldr	r3, [pc, #88]	; (800300c <MX_TIM2_Init+0x94>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fb6:	4b15      	ldr	r3, [pc, #84]	; (800300c <MX_TIM2_Init+0x94>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002fbc:	4813      	ldr	r0, [pc, #76]	; (800300c <MX_TIM2_Init+0x94>)
 8002fbe:	f002 f971 	bl	80052a4 <HAL_TIM_Base_Init>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002fc8:	f7ff fe22 	bl	8002c10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002fd2:	f107 0308 	add.w	r3, r7, #8
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	480c      	ldr	r0, [pc, #48]	; (800300c <MX_TIM2_Init+0x94>)
 8002fda:	f002 fdc7 	bl	8005b6c <HAL_TIM_ConfigClockSource>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002fe4:	f7ff fe14 	bl	8002c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fec:	2300      	movs	r3, #0
 8002fee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ff0:	463b      	mov	r3, r7
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4805      	ldr	r0, [pc, #20]	; (800300c <MX_TIM2_Init+0x94>)
 8002ff6:	f003 f951 	bl	800629c <HAL_TIMEx_MasterConfigSynchronization>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003000:	f7ff fe06 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003004:	bf00      	nop
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	200003bc 	.word	0x200003bc

08003010 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003016:	f107 0308 	add.w	r3, r7, #8
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	605a      	str	r2, [r3, #4]
 8003020:	609a      	str	r2, [r3, #8]
 8003022:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003024:	463b      	mov	r3, r7
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800302c:	4b1d      	ldr	r3, [pc, #116]	; (80030a4 <MX_TIM3_Init+0x94>)
 800302e:	4a1e      	ldr	r2, [pc, #120]	; (80030a8 <MX_TIM3_Init+0x98>)
 8003030:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9000;
 8003032:	4b1c      	ldr	r3, [pc, #112]	; (80030a4 <MX_TIM3_Init+0x94>)
 8003034:	f242 3228 	movw	r2, #9000	; 0x2328
 8003038:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800303a:	4b1a      	ldr	r3, [pc, #104]	; (80030a4 <MX_TIM3_Init+0x94>)
 800303c:	2200      	movs	r2, #0
 800303e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003040:	4b18      	ldr	r3, [pc, #96]	; (80030a4 <MX_TIM3_Init+0x94>)
 8003042:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003046:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003048:	4b16      	ldr	r3, [pc, #88]	; (80030a4 <MX_TIM3_Init+0x94>)
 800304a:	2200      	movs	r2, #0
 800304c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800304e:	4b15      	ldr	r3, [pc, #84]	; (80030a4 <MX_TIM3_Init+0x94>)
 8003050:	2280      	movs	r2, #128	; 0x80
 8003052:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003054:	4813      	ldr	r0, [pc, #76]	; (80030a4 <MX_TIM3_Init+0x94>)
 8003056:	f002 f925 	bl	80052a4 <HAL_TIM_Base_Init>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003060:	f7ff fdd6 	bl	8002c10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003068:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800306a:	f107 0308 	add.w	r3, r7, #8
 800306e:	4619      	mov	r1, r3
 8003070:	480c      	ldr	r0, [pc, #48]	; (80030a4 <MX_TIM3_Init+0x94>)
 8003072:	f002 fd7b 	bl	8005b6c <HAL_TIM_ConfigClockSource>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800307c:	f7ff fdc8 	bl	8002c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003080:	2300      	movs	r3, #0
 8003082:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003084:	2300      	movs	r3, #0
 8003086:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003088:	463b      	mov	r3, r7
 800308a:	4619      	mov	r1, r3
 800308c:	4805      	ldr	r0, [pc, #20]	; (80030a4 <MX_TIM3_Init+0x94>)
 800308e:	f003 f905 	bl	800629c <HAL_TIMEx_MasterConfigSynchronization>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003098:	f7ff fdba 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800309c:	bf00      	nop
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	20000404 	.word	0x20000404
 80030a8:	40000400 	.word	0x40000400

080030ac <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08e      	sub	sp, #56	; 0x38
 80030b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	605a      	str	r2, [r3, #4]
 80030bc:	609a      	str	r2, [r3, #8]
 80030be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030c0:	f107 0320 	add.w	r3, r7, #32
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030ca:	1d3b      	adds	r3, r7, #4
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	605a      	str	r2, [r3, #4]
 80030d2:	609a      	str	r2, [r3, #8]
 80030d4:	60da      	str	r2, [r3, #12]
 80030d6:	611a      	str	r2, [r3, #16]
 80030d8:	615a      	str	r2, [r3, #20]
 80030da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80030dc:	4b3d      	ldr	r3, [pc, #244]	; (80031d4 <MX_TIM4_Init+0x128>)
 80030de:	4a3e      	ldr	r2, [pc, #248]	; (80031d8 <MX_TIM4_Init+0x12c>)
 80030e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 80030e2:	4b3c      	ldr	r3, [pc, #240]	; (80031d4 <MX_TIM4_Init+0x128>)
 80030e4:	220a      	movs	r2, #10
 80030e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030e8:	4b3a      	ldr	r3, [pc, #232]	; (80031d4 <MX_TIM4_Init+0x128>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80030ee:	4b39      	ldr	r3, [pc, #228]	; (80031d4 <MX_TIM4_Init+0x128>)
 80030f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80030f4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030f6:	4b37      	ldr	r3, [pc, #220]	; (80031d4 <MX_TIM4_Init+0x128>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030fc:	4b35      	ldr	r3, [pc, #212]	; (80031d4 <MX_TIM4_Init+0x128>)
 80030fe:	2200      	movs	r2, #0
 8003100:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003102:	4834      	ldr	r0, [pc, #208]	; (80031d4 <MX_TIM4_Init+0x128>)
 8003104:	f002 f8ce 	bl	80052a4 <HAL_TIM_Base_Init>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800310e:	f7ff fd7f 	bl	8002c10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003112:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003116:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003118:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800311c:	4619      	mov	r1, r3
 800311e:	482d      	ldr	r0, [pc, #180]	; (80031d4 <MX_TIM4_Init+0x128>)
 8003120:	f002 fd24 	bl	8005b6c <HAL_TIM_ConfigClockSource>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800312a:	f7ff fd71 	bl	8002c10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800312e:	4829      	ldr	r0, [pc, #164]	; (80031d4 <MX_TIM4_Init+0x128>)
 8003130:	f002 f9fc 	bl	800552c <HAL_TIM_PWM_Init>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800313a:	f7ff fd69 	bl	8002c10 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800313e:	4825      	ldr	r0, [pc, #148]	; (80031d4 <MX_TIM4_Init+0x128>)
 8003140:	f002 f99c 	bl	800547c <HAL_TIM_OC_Init>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 800314a:	f7ff fd61 	bl	8002c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800314e:	2300      	movs	r3, #0
 8003150:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003152:	2300      	movs	r3, #0
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003156:	f107 0320 	add.w	r3, r7, #32
 800315a:	4619      	mov	r1, r3
 800315c:	481d      	ldr	r0, [pc, #116]	; (80031d4 <MX_TIM4_Init+0x128>)
 800315e:	f003 f89d 	bl	800629c <HAL_TIMEx_MasterConfigSynchronization>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8003168:	f7ff fd52 	bl	8002c10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800316c:	2360      	movs	r3, #96	; 0x60
 800316e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003170:	2300      	movs	r3, #0
 8003172:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003174:	2300      	movs	r3, #0
 8003176:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003178:	2300      	movs	r3, #0
 800317a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800317c:	1d3b      	adds	r3, r7, #4
 800317e:	2204      	movs	r2, #4
 8003180:	4619      	mov	r1, r3
 8003182:	4814      	ldr	r0, [pc, #80]	; (80031d4 <MX_TIM4_Init+0x128>)
 8003184:	f002 fc30 	bl	80059e8 <HAL_TIM_PWM_ConfigChannel>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 800318e:	f7ff fd3f 	bl	8002c10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003192:	2300      	movs	r3, #0
 8003194:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003196:	1d3b      	adds	r3, r7, #4
 8003198:	2208      	movs	r2, #8
 800319a:	4619      	mov	r1, r3
 800319c:	480d      	ldr	r0, [pc, #52]	; (80031d4 <MX_TIM4_Init+0x128>)
 800319e:	f002 fbc7 	bl	8005930 <HAL_TIM_OC_ConfigChannel>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 80031a8:	f7ff fd32 	bl	8002c10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031ac:	2360      	movs	r3, #96	; 0x60
 80031ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80031b0:	1d3b      	adds	r3, r7, #4
 80031b2:	220c      	movs	r2, #12
 80031b4:	4619      	mov	r1, r3
 80031b6:	4807      	ldr	r0, [pc, #28]	; (80031d4 <MX_TIM4_Init+0x128>)
 80031b8:	f002 fc16 	bl	80059e8 <HAL_TIM_PWM_ConfigChannel>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 80031c2:	f7ff fd25 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80031c6:	4803      	ldr	r0, [pc, #12]	; (80031d4 <MX_TIM4_Init+0x128>)
 80031c8:	f000 f880 	bl	80032cc <HAL_TIM_MspPostInit>

}
 80031cc:	bf00      	nop
 80031ce:	3738      	adds	r7, #56	; 0x38
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	2000044c 	.word	0x2000044c
 80031d8:	40000800 	.word	0x40000800

080031dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a34      	ldr	r2, [pc, #208]	; (80032bc <HAL_TIM_Base_MspInit+0xe0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d12c      	bne.n	8003248 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031ee:	4b34      	ldr	r3, [pc, #208]	; (80032c0 <HAL_TIM_Base_MspInit+0xe4>)
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	4a33      	ldr	r2, [pc, #204]	; (80032c0 <HAL_TIM_Base_MspInit+0xe4>)
 80031f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031f8:	6193      	str	r3, [r2, #24]
 80031fa:	4b31      	ldr	r3, [pc, #196]	; (80032c0 <HAL_TIM_Base_MspInit+0xe4>)
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8003206:	2200      	movs	r2, #0
 8003208:	2100      	movs	r1, #0
 800320a:	2018      	movs	r0, #24
 800320c:	f000 fef7 	bl	8003ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8003210:	2018      	movs	r0, #24
 8003212:	f000 ff10 	bl	8004036 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8003216:	2200      	movs	r2, #0
 8003218:	2100      	movs	r1, #0
 800321a:	2019      	movs	r0, #25
 800321c:	f000 feef 	bl	8003ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003220:	2019      	movs	r0, #25
 8003222:	f000 ff08 	bl	8004036 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8003226:	2200      	movs	r2, #0
 8003228:	2100      	movs	r1, #0
 800322a:	201a      	movs	r0, #26
 800322c:	f000 fee7 	bl	8003ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8003230:	201a      	movs	r0, #26
 8003232:	f000 ff00 	bl	8004036 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003236:	2200      	movs	r2, #0
 8003238:	2100      	movs	r1, #0
 800323a:	201b      	movs	r0, #27
 800323c:	f000 fedf 	bl	8003ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003240:	201b      	movs	r0, #27
 8003242:	f000 fef8 	bl	8004036 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003246:	e034      	b.n	80032b2 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM2)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003250:	d10c      	bne.n	800326c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003252:	4b1b      	ldr	r3, [pc, #108]	; (80032c0 <HAL_TIM_Base_MspInit+0xe4>)
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	4a1a      	ldr	r2, [pc, #104]	; (80032c0 <HAL_TIM_Base_MspInit+0xe4>)
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	61d3      	str	r3, [r2, #28]
 800325e:	4b18      	ldr	r3, [pc, #96]	; (80032c0 <HAL_TIM_Base_MspInit+0xe4>)
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	693b      	ldr	r3, [r7, #16]
}
 800326a:	e022      	b.n	80032b2 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a14      	ldr	r2, [pc, #80]	; (80032c4 <HAL_TIM_Base_MspInit+0xe8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d10c      	bne.n	8003290 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003276:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <HAL_TIM_Base_MspInit+0xe4>)
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	4a11      	ldr	r2, [pc, #68]	; (80032c0 <HAL_TIM_Base_MspInit+0xe4>)
 800327c:	f043 0302 	orr.w	r3, r3, #2
 8003280:	61d3      	str	r3, [r2, #28]
 8003282:	4b0f      	ldr	r3, [pc, #60]	; (80032c0 <HAL_TIM_Base_MspInit+0xe4>)
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]
}
 800328e:	e010      	b.n	80032b2 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a0c      	ldr	r2, [pc, #48]	; (80032c8 <HAL_TIM_Base_MspInit+0xec>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d10b      	bne.n	80032b2 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800329a:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <HAL_TIM_Base_MspInit+0xe4>)
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	4a08      	ldr	r2, [pc, #32]	; (80032c0 <HAL_TIM_Base_MspInit+0xe4>)
 80032a0:	f043 0304 	orr.w	r3, r3, #4
 80032a4:	61d3      	str	r3, [r2, #28]
 80032a6:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <HAL_TIM_Base_MspInit+0xe4>)
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	f003 0304 	and.w	r3, r3, #4
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	68bb      	ldr	r3, [r7, #8]
}
 80032b2:	bf00      	nop
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40012c00 	.word	0x40012c00
 80032c0:	40021000 	.word	0x40021000
 80032c4:	40000400 	.word	0x40000400
 80032c8:	40000800 	.word	0x40000800

080032cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d4:	f107 0310 	add.w	r3, r7, #16
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a10      	ldr	r2, [pc, #64]	; (8003328 <HAL_TIM_MspPostInit+0x5c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d118      	bne.n	800331e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ec:	4b0f      	ldr	r3, [pc, #60]	; (800332c <HAL_TIM_MspPostInit+0x60>)
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	4a0e      	ldr	r2, [pc, #56]	; (800332c <HAL_TIM_MspPostInit+0x60>)
 80032f2:	f043 0308 	orr.w	r3, r3, #8
 80032f6:	6193      	str	r3, [r2, #24]
 80032f8:	4b0c      	ldr	r3, [pc, #48]	; (800332c <HAL_TIM_MspPostInit+0x60>)
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003304:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003308:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330a:	2302      	movs	r3, #2
 800330c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330e:	2302      	movs	r3, #2
 8003310:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003312:	f107 0310 	add.w	r3, r7, #16
 8003316:	4619      	mov	r1, r3
 8003318:	4805      	ldr	r0, [pc, #20]	; (8003330 <HAL_TIM_MspPostInit+0x64>)
 800331a:	f001 f949 	bl	80045b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800331e:	bf00      	nop
 8003320:	3720      	adds	r7, #32
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40000800 	.word	0x40000800
 800332c:	40021000 	.word	0x40021000
 8003330:	40010c00 	.word	0x40010c00

08003334 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003338:	4b11      	ldr	r3, [pc, #68]	; (8003380 <MX_USART1_UART_Init+0x4c>)
 800333a:	4a12      	ldr	r2, [pc, #72]	; (8003384 <MX_USART1_UART_Init+0x50>)
 800333c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800333e:	4b10      	ldr	r3, [pc, #64]	; (8003380 <MX_USART1_UART_Init+0x4c>)
 8003340:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003344:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003346:	4b0e      	ldr	r3, [pc, #56]	; (8003380 <MX_USART1_UART_Init+0x4c>)
 8003348:	2200      	movs	r2, #0
 800334a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800334c:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <MX_USART1_UART_Init+0x4c>)
 800334e:	2200      	movs	r2, #0
 8003350:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003352:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <MX_USART1_UART_Init+0x4c>)
 8003354:	2200      	movs	r2, #0
 8003356:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003358:	4b09      	ldr	r3, [pc, #36]	; (8003380 <MX_USART1_UART_Init+0x4c>)
 800335a:	220c      	movs	r2, #12
 800335c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800335e:	4b08      	ldr	r3, [pc, #32]	; (8003380 <MX_USART1_UART_Init+0x4c>)
 8003360:	2200      	movs	r2, #0
 8003362:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003364:	4b06      	ldr	r3, [pc, #24]	; (8003380 <MX_USART1_UART_Init+0x4c>)
 8003366:	2200      	movs	r2, #0
 8003368:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800336a:	4805      	ldr	r0, [pc, #20]	; (8003380 <MX_USART1_UART_Init+0x4c>)
 800336c:	f003 f806 	bl	800637c <HAL_UART_Init>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003376:	f7ff fc4b 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20000494 	.word	0x20000494
 8003384:	40013800 	.word	0x40013800

08003388 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800338c:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <MX_USART3_UART_Init+0x4c>)
 800338e:	4a12      	ldr	r2, [pc, #72]	; (80033d8 <MX_USART3_UART_Init+0x50>)
 8003390:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003392:	4b10      	ldr	r3, [pc, #64]	; (80033d4 <MX_USART3_UART_Init+0x4c>)
 8003394:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003398:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800339a:	4b0e      	ldr	r3, [pc, #56]	; (80033d4 <MX_USART3_UART_Init+0x4c>)
 800339c:	2200      	movs	r2, #0
 800339e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80033a0:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <MX_USART3_UART_Init+0x4c>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80033a6:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <MX_USART3_UART_Init+0x4c>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033ac:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <MX_USART3_UART_Init+0x4c>)
 80033ae:	220c      	movs	r2, #12
 80033b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033b2:	4b08      	ldr	r3, [pc, #32]	; (80033d4 <MX_USART3_UART_Init+0x4c>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033b8:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <MX_USART3_UART_Init+0x4c>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80033be:	4805      	ldr	r0, [pc, #20]	; (80033d4 <MX_USART3_UART_Init+0x4c>)
 80033c0:	f002 ffdc 	bl	800637c <HAL_UART_Init>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80033ca:	f7ff fc21 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80033ce:	bf00      	nop
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	200004dc 	.word	0x200004dc
 80033d8:	40004800 	.word	0x40004800

080033dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b08a      	sub	sp, #40	; 0x28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e4:	f107 0318 	add.w	r3, r7, #24
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	605a      	str	r2, [r3, #4]
 80033ee:	609a      	str	r2, [r3, #8]
 80033f0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a3c      	ldr	r2, [pc, #240]	; (80034e8 <HAL_UART_MspInit+0x10c>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d13a      	bne.n	8003472 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033fc:	4b3b      	ldr	r3, [pc, #236]	; (80034ec <HAL_UART_MspInit+0x110>)
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	4a3a      	ldr	r2, [pc, #232]	; (80034ec <HAL_UART_MspInit+0x110>)
 8003402:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003406:	6193      	str	r3, [r2, #24]
 8003408:	4b38      	ldr	r3, [pc, #224]	; (80034ec <HAL_UART_MspInit+0x110>)
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003410:	617b      	str	r3, [r7, #20]
 8003412:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003414:	4b35      	ldr	r3, [pc, #212]	; (80034ec <HAL_UART_MspInit+0x110>)
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	4a34      	ldr	r2, [pc, #208]	; (80034ec <HAL_UART_MspInit+0x110>)
 800341a:	f043 0304 	orr.w	r3, r3, #4
 800341e:	6193      	str	r3, [r2, #24]
 8003420:	4b32      	ldr	r3, [pc, #200]	; (80034ec <HAL_UART_MspInit+0x110>)
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800342c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003432:	2302      	movs	r3, #2
 8003434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003436:	2303      	movs	r3, #3
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343a:	f107 0318 	add.w	r3, r7, #24
 800343e:	4619      	mov	r1, r3
 8003440:	482b      	ldr	r0, [pc, #172]	; (80034f0 <HAL_UART_MspInit+0x114>)
 8003442:	f001 f8b5 	bl	80045b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800344a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800344c:	2300      	movs	r3, #0
 800344e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003450:	2300      	movs	r3, #0
 8003452:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003454:	f107 0318 	add.w	r3, r7, #24
 8003458:	4619      	mov	r1, r3
 800345a:	4825      	ldr	r0, [pc, #148]	; (80034f0 <HAL_UART_MspInit+0x114>)
 800345c:	f001 f8a8 	bl	80045b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003460:	2200      	movs	r2, #0
 8003462:	2100      	movs	r1, #0
 8003464:	2025      	movs	r0, #37	; 0x25
 8003466:	f000 fdca 	bl	8003ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800346a:	2025      	movs	r0, #37	; 0x25
 800346c:	f000 fde3 	bl	8004036 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003470:	e036      	b.n	80034e0 <HAL_UART_MspInit+0x104>
  else if(uartHandle->Instance==USART3)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a1f      	ldr	r2, [pc, #124]	; (80034f4 <HAL_UART_MspInit+0x118>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d131      	bne.n	80034e0 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 800347c:	4b1b      	ldr	r3, [pc, #108]	; (80034ec <HAL_UART_MspInit+0x110>)
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	4a1a      	ldr	r2, [pc, #104]	; (80034ec <HAL_UART_MspInit+0x110>)
 8003482:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003486:	61d3      	str	r3, [r2, #28]
 8003488:	4b18      	ldr	r3, [pc, #96]	; (80034ec <HAL_UART_MspInit+0x110>)
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003494:	4b15      	ldr	r3, [pc, #84]	; (80034ec <HAL_UART_MspInit+0x110>)
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	4a14      	ldr	r2, [pc, #80]	; (80034ec <HAL_UART_MspInit+0x110>)
 800349a:	f043 0308 	orr.w	r3, r3, #8
 800349e:	6193      	str	r3, [r2, #24]
 80034a0:	4b12      	ldr	r3, [pc, #72]	; (80034ec <HAL_UART_MspInit+0x110>)
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	f003 0308 	and.w	r3, r3, #8
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b2:	2302      	movs	r3, #2
 80034b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034b6:	2303      	movs	r3, #3
 80034b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ba:	f107 0318 	add.w	r3, r7, #24
 80034be:	4619      	mov	r1, r3
 80034c0:	480d      	ldr	r0, [pc, #52]	; (80034f8 <HAL_UART_MspInit+0x11c>)
 80034c2:	f001 f875 	bl	80045b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80034c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d4:	f107 0318 	add.w	r3, r7, #24
 80034d8:	4619      	mov	r1, r3
 80034da:	4807      	ldr	r0, [pc, #28]	; (80034f8 <HAL_UART_MspInit+0x11c>)
 80034dc:	f001 f868 	bl	80045b0 <HAL_GPIO_Init>
}
 80034e0:	bf00      	nop
 80034e2:	3728      	adds	r7, #40	; 0x28
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40013800 	.word	0x40013800
 80034ec:	40021000 	.word	0x40021000
 80034f0:	40010800 	.word	0x40010800
 80034f4:	40004800 	.word	0x40004800
 80034f8:	40010c00 	.word	0x40010c00

080034fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80034fc:	f7ff fce4 	bl	8002ec8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003500:	480b      	ldr	r0, [pc, #44]	; (8003530 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003502:	490c      	ldr	r1, [pc, #48]	; (8003534 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003504:	4a0c      	ldr	r2, [pc, #48]	; (8003538 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003508:	e002      	b.n	8003510 <LoopCopyDataInit>

0800350a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800350a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800350c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800350e:	3304      	adds	r3, #4

08003510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003514:	d3f9      	bcc.n	800350a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003516:	4a09      	ldr	r2, [pc, #36]	; (800353c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003518:	4c09      	ldr	r4, [pc, #36]	; (8003540 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800351a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800351c:	e001      	b.n	8003522 <LoopFillZerobss>

0800351e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800351e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003520:	3204      	adds	r2, #4

08003522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003524:	d3fb      	bcc.n	800351e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003526:	f003 fdab 	bl	8007080 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800352a:	f7fe fe2f 	bl	800218c <main>
  bx lr
 800352e:	4770      	bx	lr
  ldr r0, =_sdata
 8003530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003534:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003538:	0800bb28 	.word	0x0800bb28
  ldr r2, =_sbss
 800353c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003540:	20000538 	.word	0x20000538

08003544 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003544:	e7fe      	b.n	8003544 <ADC1_2_IRQHandler>
	...

08003548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800354c:	4b08      	ldr	r3, [pc, #32]	; (8003570 <HAL_Init+0x28>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a07      	ldr	r2, [pc, #28]	; (8003570 <HAL_Init+0x28>)
 8003552:	f043 0310 	orr.w	r3, r3, #16
 8003556:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003558:	2003      	movs	r0, #3
 800355a:	f000 fd45 	bl	8003fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800355e:	200f      	movs	r0, #15
 8003560:	f000 f808 	bl	8003574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003564:	f7ff fb5a 	bl	8002c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40022000 	.word	0x40022000

08003574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800357c:	4b12      	ldr	r3, [pc, #72]	; (80035c8 <HAL_InitTick+0x54>)
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	4b12      	ldr	r3, [pc, #72]	; (80035cc <HAL_InitTick+0x58>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	4619      	mov	r1, r3
 8003586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800358a:	fbb3 f3f1 	udiv	r3, r3, r1
 800358e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003592:	4618      	mov	r0, r3
 8003594:	f000 fd5d 	bl	8004052 <HAL_SYSTICK_Config>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e00e      	b.n	80035c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b0f      	cmp	r3, #15
 80035a6:	d80a      	bhi.n	80035be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035a8:	2200      	movs	r2, #0
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	f04f 30ff 	mov.w	r0, #4294967295
 80035b0:	f000 fd25 	bl	8003ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035b4:	4a06      	ldr	r2, [pc, #24]	; (80035d0 <HAL_InitTick+0x5c>)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
 80035bc:	e000      	b.n	80035c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	20000004 	.word	0x20000004
 80035cc:	2000000c 	.word	0x2000000c
 80035d0:	20000008 	.word	0x20000008

080035d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035d8:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_IncTick+0x1c>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	461a      	mov	r2, r3
 80035de:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <HAL_IncTick+0x20>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4413      	add	r3, r2
 80035e4:	4a03      	ldr	r2, [pc, #12]	; (80035f4 <HAL_IncTick+0x20>)
 80035e6:	6013      	str	r3, [r2, #0]
}
 80035e8:	bf00      	nop
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr
 80035f0:	2000000c 	.word	0x2000000c
 80035f4:	20000524 	.word	0x20000524

080035f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  return uwTick;
 80035fc:	4b02      	ldr	r3, [pc, #8]	; (8003608 <HAL_GetTick+0x10>)
 80035fe:	681b      	ldr	r3, [r3, #0]
}
 8003600:	4618      	mov	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr
 8003608:	20000524 	.word	0x20000524

0800360c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003614:	2300      	movs	r3, #0
 8003616:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e0be      	b.n	80037ac <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003638:	2b00      	cmp	r3, #0
 800363a:	d109      	bne.n	8003650 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7fe fc78 	bl	8001f40 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 fb55 	bl	8003d00 <ADC_ConversionStop_Disable>
 8003656:	4603      	mov	r3, r0
 8003658:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365e:	f003 0310 	and.w	r3, r3, #16
 8003662:	2b00      	cmp	r3, #0
 8003664:	f040 8099 	bne.w	800379a <HAL_ADC_Init+0x18e>
 8003668:	7dfb      	ldrb	r3, [r7, #23]
 800366a:	2b00      	cmp	r3, #0
 800366c:	f040 8095 	bne.w	800379a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003674:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003678:	f023 0302 	bic.w	r3, r3, #2
 800367c:	f043 0202 	orr.w	r2, r3, #2
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800368c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	7b1b      	ldrb	r3, [r3, #12]
 8003692:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003694:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	4313      	orrs	r3, r2
 800369a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036a4:	d003      	beq.n	80036ae <HAL_ADC_Init+0xa2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d102      	bne.n	80036b4 <HAL_ADC_Init+0xa8>
 80036ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036b2:	e000      	b.n	80036b6 <HAL_ADC_Init+0xaa>
 80036b4:	2300      	movs	r3, #0
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	7d1b      	ldrb	r3, [r3, #20]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d119      	bne.n	80036f8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	7b1b      	ldrb	r3, [r3, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d109      	bne.n	80036e0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	3b01      	subs	r3, #1
 80036d2:	035a      	lsls	r2, r3, #13
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036dc:	613b      	str	r3, [r7, #16]
 80036de:	e00b      	b.n	80036f8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	f043 0220 	orr.w	r2, r3, #32
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	f043 0201 	orr.w	r2, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	430a      	orrs	r2, r1
 800370a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689a      	ldr	r2, [r3, #8]
 8003712:	4b28      	ldr	r3, [pc, #160]	; (80037b4 <HAL_ADC_Init+0x1a8>)
 8003714:	4013      	ands	r3, r2
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6812      	ldr	r2, [r2, #0]
 800371a:	68b9      	ldr	r1, [r7, #8]
 800371c:	430b      	orrs	r3, r1
 800371e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003728:	d003      	beq.n	8003732 <HAL_ADC_Init+0x126>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d104      	bne.n	800373c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	3b01      	subs	r3, #1
 8003738:	051b      	lsls	r3, r3, #20
 800373a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003742:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	430a      	orrs	r2, r1
 800374e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	4b18      	ldr	r3, [pc, #96]	; (80037b8 <HAL_ADC_Init+0x1ac>)
 8003758:	4013      	ands	r3, r2
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	429a      	cmp	r2, r3
 800375e:	d10b      	bne.n	8003778 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376a:	f023 0303 	bic.w	r3, r3, #3
 800376e:	f043 0201 	orr.w	r2, r3, #1
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003776:	e018      	b.n	80037aa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377c:	f023 0312 	bic.w	r3, r3, #18
 8003780:	f043 0210 	orr.w	r2, r3, #16
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378c:	f043 0201 	orr.w	r2, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003798:	e007      	b.n	80037aa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379e:	f043 0210 	orr.w	r2, r3, #16
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80037aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	ffe1f7fd 	.word	0xffe1f7fd
 80037b8:	ff1f0efe 	.word	0xff1f0efe

080037bc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a64      	ldr	r2, [pc, #400]	; (8003964 <HAL_ADC_Start_DMA+0x1a8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d004      	beq.n	80037e0 <HAL_ADC_Start_DMA+0x24>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a63      	ldr	r2, [pc, #396]	; (8003968 <HAL_ADC_Start_DMA+0x1ac>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d106      	bne.n	80037ee <HAL_ADC_Start_DMA+0x32>
 80037e0:	4b60      	ldr	r3, [pc, #384]	; (8003964 <HAL_ADC_Start_DMA+0x1a8>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f040 80b3 	bne.w	8003954 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d101      	bne.n	80037fc <HAL_ADC_Start_DMA+0x40>
 80037f8:	2302      	movs	r3, #2
 80037fa:	e0ae      	b.n	800395a <HAL_ADC_Start_DMA+0x19e>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 fa21 	bl	8003c4c <ADC_Enable>
 800380a:	4603      	mov	r3, r0
 800380c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800380e:	7dfb      	ldrb	r3, [r7, #23]
 8003810:	2b00      	cmp	r3, #0
 8003812:	f040 809a 	bne.w	800394a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800381e:	f023 0301 	bic.w	r3, r3, #1
 8003822:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a4e      	ldr	r2, [pc, #312]	; (8003968 <HAL_ADC_Start_DMA+0x1ac>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d105      	bne.n	8003840 <HAL_ADC_Start_DMA+0x84>
 8003834:	4b4b      	ldr	r3, [pc, #300]	; (8003964 <HAL_ADC_Start_DMA+0x1a8>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d115      	bne.n	800386c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003844:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003856:	2b00      	cmp	r3, #0
 8003858:	d026      	beq.n	80038a8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003862:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800386a:	e01d      	b.n	80038a8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003870:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a39      	ldr	r2, [pc, #228]	; (8003964 <HAL_ADC_Start_DMA+0x1a8>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d004      	beq.n	800388c <HAL_ADC_Start_DMA+0xd0>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a38      	ldr	r2, [pc, #224]	; (8003968 <HAL_ADC_Start_DMA+0x1ac>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d10d      	bne.n	80038a8 <HAL_ADC_Start_DMA+0xec>
 800388c:	4b35      	ldr	r3, [pc, #212]	; (8003964 <HAL_ADC_Start_DMA+0x1a8>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003894:	2b00      	cmp	r3, #0
 8003896:	d007      	beq.n	80038a8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80038a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d006      	beq.n	80038c2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b8:	f023 0206 	bic.w	r2, r3, #6
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	62da      	str	r2, [r3, #44]	; 0x2c
 80038c0:	e002      	b.n	80038c8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	4a25      	ldr	r2, [pc, #148]	; (800396c <HAL_ADC_Start_DMA+0x1b0>)
 80038d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	4a24      	ldr	r2, [pc, #144]	; (8003970 <HAL_ADC_Start_DMA+0x1b4>)
 80038de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	4a23      	ldr	r2, [pc, #140]	; (8003974 <HAL_ADC_Start_DMA+0x1b8>)
 80038e6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f06f 0202 	mvn.w	r2, #2
 80038f0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003900:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a18      	ldr	r0, [r3, #32]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	334c      	adds	r3, #76	; 0x4c
 800390c:	4619      	mov	r1, r3
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f000 fc05 	bl	8004120 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003920:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003924:	d108      	bne.n	8003938 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003934:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003936:	e00f      	b.n	8003958 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003946:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003948:	e006      	b.n	8003958 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003952:	e001      	b.n	8003958 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003958:	7dfb      	ldrb	r3, [r7, #23]
}
 800395a:	4618      	mov	r0, r3
 800395c:	3718      	adds	r7, #24
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	40012400 	.word	0x40012400
 8003968:	40012800 	.word	0x40012800
 800396c:	08003d83 	.word	0x08003d83
 8003970:	08003dff 	.word	0x08003dff
 8003974:	08003e1b 	.word	0x08003e1b

08003978 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	bc80      	pop	{r7}
 8003988:	4770      	bx	lr

0800398a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800398a:	b480      	push	{r7}
 800398c:	b083      	sub	sp, #12
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr

0800399c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bc80      	pop	{r7}
 80039ac:	4770      	bx	lr
	...

080039b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d101      	bne.n	80039d0 <HAL_ADC_ConfigChannel+0x20>
 80039cc:	2302      	movs	r3, #2
 80039ce:	e0dc      	b.n	8003b8a <HAL_ADC_ConfigChannel+0x1da>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2b06      	cmp	r3, #6
 80039de:	d81c      	bhi.n	8003a1a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	4613      	mov	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	3b05      	subs	r3, #5
 80039f2:	221f      	movs	r2, #31
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	43db      	mvns	r3, r3
 80039fa:	4019      	ands	r1, r3
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	6818      	ldr	r0, [r3, #0]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	4613      	mov	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	3b05      	subs	r3, #5
 8003a0c:	fa00 f203 	lsl.w	r2, r0, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	635a      	str	r2, [r3, #52]	; 0x34
 8003a18:	e03c      	b.n	8003a94 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b0c      	cmp	r3, #12
 8003a20:	d81c      	bhi.n	8003a5c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	3b23      	subs	r3, #35	; 0x23
 8003a34:	221f      	movs	r2, #31
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	4019      	ands	r1, r3
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	4613      	mov	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	3b23      	subs	r3, #35	; 0x23
 8003a4e:	fa00 f203 	lsl.w	r2, r0, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	631a      	str	r2, [r3, #48]	; 0x30
 8003a5a:	e01b      	b.n	8003a94 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	3b41      	subs	r3, #65	; 0x41
 8003a6e:	221f      	movs	r2, #31
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	43db      	mvns	r3, r3
 8003a76:	4019      	ands	r1, r3
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	6818      	ldr	r0, [r3, #0]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	4613      	mov	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	3b41      	subs	r3, #65	; 0x41
 8003a88:	fa00 f203 	lsl.w	r2, r0, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b09      	cmp	r3, #9
 8003a9a:	d91c      	bls.n	8003ad6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68d9      	ldr	r1, [r3, #12]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	4413      	add	r3, r2
 8003aac:	3b1e      	subs	r3, #30
 8003aae:	2207      	movs	r2, #7
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	4019      	ands	r1, r3
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	6898      	ldr	r0, [r3, #8]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	4413      	add	r3, r2
 8003ac6:	3b1e      	subs	r3, #30
 8003ac8:	fa00 f203 	lsl.w	r2, r0, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	60da      	str	r2, [r3, #12]
 8003ad4:	e019      	b.n	8003b0a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6919      	ldr	r1, [r3, #16]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	4413      	add	r3, r2
 8003ae6:	2207      	movs	r2, #7
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	43db      	mvns	r3, r3
 8003aee:	4019      	ands	r1, r3
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	6898      	ldr	r0, [r3, #8]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	4613      	mov	r3, r2
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	4413      	add	r3, r2
 8003afe:	fa00 f203 	lsl.w	r2, r0, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2b10      	cmp	r3, #16
 8003b10:	d003      	beq.n	8003b1a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003b16:	2b11      	cmp	r3, #17
 8003b18:	d132      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a1d      	ldr	r2, [pc, #116]	; (8003b94 <HAL_ADC_ConfigChannel+0x1e4>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d125      	bne.n	8003b70 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d126      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003b40:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b10      	cmp	r3, #16
 8003b48:	d11a      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b4a:	4b13      	ldr	r3, [pc, #76]	; (8003b98 <HAL_ADC_ConfigChannel+0x1e8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a13      	ldr	r2, [pc, #76]	; (8003b9c <HAL_ADC_ConfigChannel+0x1ec>)
 8003b50:	fba2 2303 	umull	r2, r3, r2, r3
 8003b54:	0c9a      	lsrs	r2, r3, #18
 8003b56:	4613      	mov	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4413      	add	r3, r2
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b60:	e002      	b.n	8003b68 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	3b01      	subs	r3, #1
 8003b66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f9      	bne.n	8003b62 <HAL_ADC_ConfigChannel+0x1b2>
 8003b6e:	e007      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b74:	f043 0220 	orr.w	r2, r3, #32
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bc80      	pop	{r7}
 8003b92:	4770      	bx	lr
 8003b94:	40012400 	.word	0x40012400
 8003b98:	20000004 	.word	0x20000004
 8003b9c:	431bde83 	.word	0x431bde83

08003ba0 <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc: ADC handle
  * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a24      	ldr	r2, [pc, #144]	; (8003c40 <HAL_ADC_AnalogWDGConfig+0xa0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d003      	beq.n	8003bbc <HAL_ADC_AnalogWDGConfig+0x1c>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8003bb8:	4a22      	ldr	r2, [pc, #136]	; (8003c44 <HAL_ADC_AnalogWDGConfig+0xa4>)
 8003bba:	4293      	cmp	r3, r2
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d101      	bne.n	8003bca <HAL_ADC_AnalogWDGConfig+0x2a>
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	e035      	b.n	8003c36 <HAL_ADC_AnalogWDGConfig+0x96>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	7a1b      	ldrb	r3, [r3, #8]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d108      	bne.n	8003bec <HAL_ADC_AnalogWDGConfig+0x4c>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003be8:	605a      	str	r2, [r3, #4]
 8003bea:	e007      	b.n	8003bfc <HAL_ADC_AnalogWDGConfig+0x5c>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bfa:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  MODIFY_REG(hadc->Instance->CR1            ,
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <HAL_ADC_AnalogWDGConfig+0xa8>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	6811      	ldr	r1, [r2, #0]
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	6852      	ldr	r2, [r2, #4]
 8003c0e:	4311      	orrs	r1, r2
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6812      	ldr	r2, [r2, #0]
 8003c14:	430b      	orrs	r3, r1
 8003c16:	6053      	str	r3, [r2, #4]
             ADC_CR1_AWDCH                  ,
             AnalogWDGConfig->WatchdogMode |
             AnalogWDGConfig->Channel        );
  
  /* Set the high threshold */
  WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	68d2      	ldr	r2, [r2, #12]
 8003c20:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	6912      	ldr	r2, [r2, #16]
 8003c2a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	4770      	bx	lr
 8003c40:	00800200 	.word	0x00800200
 8003c44:	00400200 	.word	0x00400200
 8003c48:	ff3ffde0 	.word	0xff3ffde0

08003c4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d040      	beq.n	8003cec <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f042 0201 	orr.w	r2, r2, #1
 8003c78:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c7a:	4b1f      	ldr	r3, [pc, #124]	; (8003cf8 <ADC_Enable+0xac>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a1f      	ldr	r2, [pc, #124]	; (8003cfc <ADC_Enable+0xb0>)
 8003c80:	fba2 2303 	umull	r2, r3, r2, r3
 8003c84:	0c9b      	lsrs	r3, r3, #18
 8003c86:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003c88:	e002      	b.n	8003c90 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f9      	bne.n	8003c8a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c96:	f7ff fcaf 	bl	80035f8 <HAL_GetTick>
 8003c9a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003c9c:	e01f      	b.n	8003cde <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c9e:	f7ff fcab 	bl	80035f8 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d918      	bls.n	8003cde <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d011      	beq.n	8003cde <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbe:	f043 0210 	orr.w	r2, r3, #16
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cca:	f043 0201 	orr.w	r2, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e007      	b.n	8003cee <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d1d8      	bne.n	8003c9e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	20000004 	.word	0x20000004
 8003cfc:	431bde83 	.word	0x431bde83

08003d00 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d12e      	bne.n	8003d78 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0201 	bic.w	r2, r2, #1
 8003d28:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d2a:	f7ff fc65 	bl	80035f8 <HAL_GetTick>
 8003d2e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003d30:	e01b      	b.n	8003d6a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003d32:	f7ff fc61 	bl	80035f8 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d914      	bls.n	8003d6a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d10d      	bne.n	8003d6a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d52:	f043 0210 	orr.w	r2, r3, #16
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5e:	f043 0201 	orr.w	r2, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e007      	b.n	8003d7a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d0dc      	beq.n	8003d32 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b084      	sub	sp, #16
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d127      	bne.n	8003dec <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003db2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003db6:	d115      	bne.n	8003de4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d111      	bne.n	8003de4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d105      	bne.n	8003de4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ddc:	f043 0201 	orr.w	r2, r3, #1
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f7ff fdc7 	bl	8003978 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003dea:	e004      	b.n	8003df6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	4798      	blx	r3
}
 8003df6:	bf00      	nop
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b084      	sub	sp, #16
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f7ff fdbc 	bl	800398a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e12:	bf00      	nop
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b084      	sub	sp, #16
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	f043 0204 	orr.w	r2, r3, #4
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f7ff fdab 	bl	800399c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e46:	bf00      	nop
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
	...

08003e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f003 0307 	and.w	r3, r3, #7
 8003e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e60:	4b0c      	ldr	r3, [pc, #48]	; (8003e94 <__NVIC_SetPriorityGrouping+0x44>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e82:	4a04      	ldr	r2, [pc, #16]	; (8003e94 <__NVIC_SetPriorityGrouping+0x44>)
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	60d3      	str	r3, [r2, #12]
}
 8003e88:	bf00      	nop
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bc80      	pop	{r7}
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	e000ed00 	.word	0xe000ed00

08003e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e9c:	4b04      	ldr	r3, [pc, #16]	; (8003eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	0a1b      	lsrs	r3, r3, #8
 8003ea2:	f003 0307 	and.w	r3, r3, #7
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bc80      	pop	{r7}
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	e000ed00 	.word	0xe000ed00

08003eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	4603      	mov	r3, r0
 8003ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	db0b      	blt.n	8003ede <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ec6:	79fb      	ldrb	r3, [r7, #7]
 8003ec8:	f003 021f 	and.w	r2, r3, #31
 8003ecc:	4906      	ldr	r1, [pc, #24]	; (8003ee8 <__NVIC_EnableIRQ+0x34>)
 8003ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed2:	095b      	lsrs	r3, r3, #5
 8003ed4:	2001      	movs	r0, #1
 8003ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8003eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bc80      	pop	{r7}
 8003ee6:	4770      	bx	lr
 8003ee8:	e000e100 	.word	0xe000e100

08003eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	6039      	str	r1, [r7, #0]
 8003ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	db0a      	blt.n	8003f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	490c      	ldr	r1, [pc, #48]	; (8003f38 <__NVIC_SetPriority+0x4c>)
 8003f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0a:	0112      	lsls	r2, r2, #4
 8003f0c:	b2d2      	uxtb	r2, r2
 8003f0e:	440b      	add	r3, r1
 8003f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f14:	e00a      	b.n	8003f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	4908      	ldr	r1, [pc, #32]	; (8003f3c <__NVIC_SetPriority+0x50>)
 8003f1c:	79fb      	ldrb	r3, [r7, #7]
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	3b04      	subs	r3, #4
 8003f24:	0112      	lsls	r2, r2, #4
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	440b      	add	r3, r1
 8003f2a:	761a      	strb	r2, [r3, #24]
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bc80      	pop	{r7}
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	e000e100 	.word	0xe000e100
 8003f3c:	e000ed00 	.word	0xe000ed00

08003f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b089      	sub	sp, #36	; 0x24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f1c3 0307 	rsb	r3, r3, #7
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	bf28      	it	cs
 8003f5e:	2304      	movcs	r3, #4
 8003f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	3304      	adds	r3, #4
 8003f66:	2b06      	cmp	r3, #6
 8003f68:	d902      	bls.n	8003f70 <NVIC_EncodePriority+0x30>
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	3b03      	subs	r3, #3
 8003f6e:	e000      	b.n	8003f72 <NVIC_EncodePriority+0x32>
 8003f70:	2300      	movs	r3, #0
 8003f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f74:	f04f 32ff 	mov.w	r2, #4294967295
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	43da      	mvns	r2, r3
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	401a      	ands	r2, r3
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f88:	f04f 31ff 	mov.w	r1, #4294967295
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f92:	43d9      	mvns	r1, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f98:	4313      	orrs	r3, r2
         );
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3724      	adds	r7, #36	; 0x24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr

08003fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fb4:	d301      	bcc.n	8003fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e00f      	b.n	8003fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fba:	4a0a      	ldr	r2, [pc, #40]	; (8003fe4 <SysTick_Config+0x40>)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fc2:	210f      	movs	r1, #15
 8003fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc8:	f7ff ff90 	bl	8003eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fcc:	4b05      	ldr	r3, [pc, #20]	; (8003fe4 <SysTick_Config+0x40>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fd2:	4b04      	ldr	r3, [pc, #16]	; (8003fe4 <SysTick_Config+0x40>)
 8003fd4:	2207      	movs	r2, #7
 8003fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	e000e010 	.word	0xe000e010

08003fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7ff ff2d 	bl	8003e50 <__NVIC_SetPriorityGrouping>
}
 8003ff6:	bf00      	nop
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b086      	sub	sp, #24
 8004002:	af00      	add	r7, sp, #0
 8004004:	4603      	mov	r3, r0
 8004006:	60b9      	str	r1, [r7, #8]
 8004008:	607a      	str	r2, [r7, #4]
 800400a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800400c:	2300      	movs	r3, #0
 800400e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004010:	f7ff ff42 	bl	8003e98 <__NVIC_GetPriorityGrouping>
 8004014:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	68b9      	ldr	r1, [r7, #8]
 800401a:	6978      	ldr	r0, [r7, #20]
 800401c:	f7ff ff90 	bl	8003f40 <NVIC_EncodePriority>
 8004020:	4602      	mov	r2, r0
 8004022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004026:	4611      	mov	r1, r2
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff ff5f 	bl	8003eec <__NVIC_SetPriority>
}
 800402e:	bf00      	nop
 8004030:	3718      	adds	r7, #24
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b082      	sub	sp, #8
 800403a:	af00      	add	r7, sp, #0
 800403c:	4603      	mov	r3, r0
 800403e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff ff35 	bl	8003eb4 <__NVIC_EnableIRQ>
}
 800404a:	bf00      	nop
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b082      	sub	sp, #8
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff ffa2 	bl	8003fa4 <SysTick_Config>
 8004060:	4603      	mov	r3, r0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e043      	b.n	800410a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	4b22      	ldr	r3, [pc, #136]	; (8004114 <HAL_DMA_Init+0xa8>)
 800408a:	4413      	add	r3, r2
 800408c:	4a22      	ldr	r2, [pc, #136]	; (8004118 <HAL_DMA_Init+0xac>)
 800408e:	fba2 2303 	umull	r2, r3, r2, r3
 8004092:	091b      	lsrs	r3, r3, #4
 8004094:	009a      	lsls	r2, r3, #2
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a1f      	ldr	r2, [pc, #124]	; (800411c <HAL_DMA_Init+0xb0>)
 800409e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80040b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80040ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80040c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr
 8004114:	bffdfff8 	.word	0xbffdfff8
 8004118:	cccccccd 	.word	0xcccccccd
 800411c:	40020000 	.word	0x40020000

08004120 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
 800412c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_DMA_Start_IT+0x20>
 800413c:	2302      	movs	r3, #2
 800413e:	e04b      	b.n	80041d8 <HAL_DMA_Start_IT+0xb8>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b01      	cmp	r3, #1
 8004152:	d13a      	bne.n	80041ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2202      	movs	r2, #2
 8004158:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0201 	bic.w	r2, r2, #1
 8004170:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	68b9      	ldr	r1, [r7, #8]
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f9eb 	bl	8004554 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004182:	2b00      	cmp	r3, #0
 8004184:	d008      	beq.n	8004198 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f042 020e 	orr.w	r2, r2, #14
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	e00f      	b.n	80041b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 0204 	bic.w	r2, r2, #4
 80041a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 020a 	orr.w	r2, r2, #10
 80041b6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0201 	orr.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	e005      	b.n	80041d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80041d2:	2302      	movs	r3, #2
 80041d4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80041d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041e8:	2300      	movs	r3, #0
 80041ea:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d008      	beq.n	800420a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2204      	movs	r2, #4
 80041fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e020      	b.n	800424c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 020e 	bic.w	r2, r2, #14
 8004218:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0201 	bic.w	r2, r2, #1
 8004228:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004232:	2101      	movs	r1, #1
 8004234:	fa01 f202 	lsl.w	r2, r1, r2
 8004238:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800424a:	7bfb      	ldrb	r3, [r7, #15]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	bc80      	pop	{r7}
 8004254:	4770      	bx	lr
	...

08004258 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004260:	2300      	movs	r3, #0
 8004262:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d005      	beq.n	800427c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2204      	movs	r2, #4
 8004274:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	73fb      	strb	r3, [r7, #15]
 800427a:	e051      	b.n	8004320 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 020e 	bic.w	r2, r2, #14
 800428a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0201 	bic.w	r2, r2, #1
 800429a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a22      	ldr	r2, [pc, #136]	; (800432c <HAL_DMA_Abort_IT+0xd4>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d029      	beq.n	80042fa <HAL_DMA_Abort_IT+0xa2>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a21      	ldr	r2, [pc, #132]	; (8004330 <HAL_DMA_Abort_IT+0xd8>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d022      	beq.n	80042f6 <HAL_DMA_Abort_IT+0x9e>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a1f      	ldr	r2, [pc, #124]	; (8004334 <HAL_DMA_Abort_IT+0xdc>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d01a      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x98>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a1e      	ldr	r2, [pc, #120]	; (8004338 <HAL_DMA_Abort_IT+0xe0>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d012      	beq.n	80042ea <HAL_DMA_Abort_IT+0x92>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a1c      	ldr	r2, [pc, #112]	; (800433c <HAL_DMA_Abort_IT+0xe4>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d00a      	beq.n	80042e4 <HAL_DMA_Abort_IT+0x8c>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a1b      	ldr	r2, [pc, #108]	; (8004340 <HAL_DMA_Abort_IT+0xe8>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d102      	bne.n	80042de <HAL_DMA_Abort_IT+0x86>
 80042d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80042dc:	e00e      	b.n	80042fc <HAL_DMA_Abort_IT+0xa4>
 80042de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042e2:	e00b      	b.n	80042fc <HAL_DMA_Abort_IT+0xa4>
 80042e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042e8:	e008      	b.n	80042fc <HAL_DMA_Abort_IT+0xa4>
 80042ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042ee:	e005      	b.n	80042fc <HAL_DMA_Abort_IT+0xa4>
 80042f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042f4:	e002      	b.n	80042fc <HAL_DMA_Abort_IT+0xa4>
 80042f6:	2310      	movs	r3, #16
 80042f8:	e000      	b.n	80042fc <HAL_DMA_Abort_IT+0xa4>
 80042fa:	2301      	movs	r3, #1
 80042fc:	4a11      	ldr	r2, [pc, #68]	; (8004344 <HAL_DMA_Abort_IT+0xec>)
 80042fe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004314:	2b00      	cmp	r3, #0
 8004316:	d003      	beq.n	8004320 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	4798      	blx	r3
    } 
  }
  return status;
 8004320:	7bfb      	ldrb	r3, [r7, #15]
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	40020008 	.word	0x40020008
 8004330:	4002001c 	.word	0x4002001c
 8004334:	40020030 	.word	0x40020030
 8004338:	40020044 	.word	0x40020044
 800433c:	40020058 	.word	0x40020058
 8004340:	4002006c 	.word	0x4002006c
 8004344:	40020000 	.word	0x40020000

08004348 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004364:	2204      	movs	r2, #4
 8004366:	409a      	lsls	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4013      	ands	r3, r2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d04f      	beq.n	8004410 <HAL_DMA_IRQHandler+0xc8>
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	2b00      	cmp	r3, #0
 8004378:	d04a      	beq.n	8004410 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0320 	and.w	r3, r3, #32
 8004384:	2b00      	cmp	r3, #0
 8004386:	d107      	bne.n	8004398 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0204 	bic.w	r2, r2, #4
 8004396:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a66      	ldr	r2, [pc, #408]	; (8004538 <HAL_DMA_IRQHandler+0x1f0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d029      	beq.n	80043f6 <HAL_DMA_IRQHandler+0xae>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a65      	ldr	r2, [pc, #404]	; (800453c <HAL_DMA_IRQHandler+0x1f4>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d022      	beq.n	80043f2 <HAL_DMA_IRQHandler+0xaa>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a63      	ldr	r2, [pc, #396]	; (8004540 <HAL_DMA_IRQHandler+0x1f8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d01a      	beq.n	80043ec <HAL_DMA_IRQHandler+0xa4>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a62      	ldr	r2, [pc, #392]	; (8004544 <HAL_DMA_IRQHandler+0x1fc>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d012      	beq.n	80043e6 <HAL_DMA_IRQHandler+0x9e>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a60      	ldr	r2, [pc, #384]	; (8004548 <HAL_DMA_IRQHandler+0x200>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d00a      	beq.n	80043e0 <HAL_DMA_IRQHandler+0x98>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a5f      	ldr	r2, [pc, #380]	; (800454c <HAL_DMA_IRQHandler+0x204>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d102      	bne.n	80043da <HAL_DMA_IRQHandler+0x92>
 80043d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80043d8:	e00e      	b.n	80043f8 <HAL_DMA_IRQHandler+0xb0>
 80043da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80043de:	e00b      	b.n	80043f8 <HAL_DMA_IRQHandler+0xb0>
 80043e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80043e4:	e008      	b.n	80043f8 <HAL_DMA_IRQHandler+0xb0>
 80043e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80043ea:	e005      	b.n	80043f8 <HAL_DMA_IRQHandler+0xb0>
 80043ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043f0:	e002      	b.n	80043f8 <HAL_DMA_IRQHandler+0xb0>
 80043f2:	2340      	movs	r3, #64	; 0x40
 80043f4:	e000      	b.n	80043f8 <HAL_DMA_IRQHandler+0xb0>
 80043f6:	2304      	movs	r3, #4
 80043f8:	4a55      	ldr	r2, [pc, #340]	; (8004550 <HAL_DMA_IRQHandler+0x208>)
 80043fa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 8094 	beq.w	800452e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800440e:	e08e      	b.n	800452e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	2202      	movs	r2, #2
 8004416:	409a      	lsls	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4013      	ands	r3, r2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d056      	beq.n	80044ce <HAL_DMA_IRQHandler+0x186>
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d051      	beq.n	80044ce <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0320 	and.w	r3, r3, #32
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10b      	bne.n	8004450 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 020a 	bic.w	r2, r2, #10
 8004446:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a38      	ldr	r2, [pc, #224]	; (8004538 <HAL_DMA_IRQHandler+0x1f0>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d029      	beq.n	80044ae <HAL_DMA_IRQHandler+0x166>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a37      	ldr	r2, [pc, #220]	; (800453c <HAL_DMA_IRQHandler+0x1f4>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d022      	beq.n	80044aa <HAL_DMA_IRQHandler+0x162>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a35      	ldr	r2, [pc, #212]	; (8004540 <HAL_DMA_IRQHandler+0x1f8>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d01a      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x15c>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a34      	ldr	r2, [pc, #208]	; (8004544 <HAL_DMA_IRQHandler+0x1fc>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d012      	beq.n	800449e <HAL_DMA_IRQHandler+0x156>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a32      	ldr	r2, [pc, #200]	; (8004548 <HAL_DMA_IRQHandler+0x200>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d00a      	beq.n	8004498 <HAL_DMA_IRQHandler+0x150>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a31      	ldr	r2, [pc, #196]	; (800454c <HAL_DMA_IRQHandler+0x204>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d102      	bne.n	8004492 <HAL_DMA_IRQHandler+0x14a>
 800448c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004490:	e00e      	b.n	80044b0 <HAL_DMA_IRQHandler+0x168>
 8004492:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004496:	e00b      	b.n	80044b0 <HAL_DMA_IRQHandler+0x168>
 8004498:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800449c:	e008      	b.n	80044b0 <HAL_DMA_IRQHandler+0x168>
 800449e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044a2:	e005      	b.n	80044b0 <HAL_DMA_IRQHandler+0x168>
 80044a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044a8:	e002      	b.n	80044b0 <HAL_DMA_IRQHandler+0x168>
 80044aa:	2320      	movs	r3, #32
 80044ac:	e000      	b.n	80044b0 <HAL_DMA_IRQHandler+0x168>
 80044ae:	2302      	movs	r3, #2
 80044b0:	4a27      	ldr	r2, [pc, #156]	; (8004550 <HAL_DMA_IRQHandler+0x208>)
 80044b2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d034      	beq.n	800452e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80044cc:	e02f      	b.n	800452e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	2208      	movs	r2, #8
 80044d4:	409a      	lsls	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4013      	ands	r3, r2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d028      	beq.n	8004530 <HAL_DMA_IRQHandler+0x1e8>
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f003 0308 	and.w	r3, r3, #8
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d023      	beq.n	8004530 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 020e 	bic.w	r2, r2, #14
 80044f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004500:	2101      	movs	r1, #1
 8004502:	fa01 f202 	lsl.w	r2, r1, r2
 8004506:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004522:	2b00      	cmp	r3, #0
 8004524:	d004      	beq.n	8004530 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	4798      	blx	r3
    }
  }
  return;
 800452e:	bf00      	nop
 8004530:	bf00      	nop
}
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	40020008 	.word	0x40020008
 800453c:	4002001c 	.word	0x4002001c
 8004540:	40020030 	.word	0x40020030
 8004544:	40020044 	.word	0x40020044
 8004548:	40020058 	.word	0x40020058
 800454c:	4002006c 	.word	0x4002006c
 8004550:	40020000 	.word	0x40020000

08004554 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456a:	2101      	movs	r1, #1
 800456c:	fa01 f202 	lsl.w	r2, r1, r2
 8004570:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b10      	cmp	r3, #16
 8004580:	d108      	bne.n	8004594 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004592:	e007      	b.n	80045a4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	60da      	str	r2, [r3, #12]
}
 80045a4:	bf00      	nop
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bc80      	pop	{r7}
 80045ac:	4770      	bx	lr
	...

080045b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b08b      	sub	sp, #44	; 0x2c
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045ba:	2300      	movs	r3, #0
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80045be:	2300      	movs	r3, #0
 80045c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045c2:	e169      	b.n	8004898 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80045c4:	2201      	movs	r2, #1
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	69fa      	ldr	r2, [r7, #28]
 80045d4:	4013      	ands	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	429a      	cmp	r2, r3
 80045de:	f040 8158 	bne.w	8004892 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	4a9a      	ldr	r2, [pc, #616]	; (8004850 <HAL_GPIO_Init+0x2a0>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d05e      	beq.n	80046aa <HAL_GPIO_Init+0xfa>
 80045ec:	4a98      	ldr	r2, [pc, #608]	; (8004850 <HAL_GPIO_Init+0x2a0>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d875      	bhi.n	80046de <HAL_GPIO_Init+0x12e>
 80045f2:	4a98      	ldr	r2, [pc, #608]	; (8004854 <HAL_GPIO_Init+0x2a4>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d058      	beq.n	80046aa <HAL_GPIO_Init+0xfa>
 80045f8:	4a96      	ldr	r2, [pc, #600]	; (8004854 <HAL_GPIO_Init+0x2a4>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d86f      	bhi.n	80046de <HAL_GPIO_Init+0x12e>
 80045fe:	4a96      	ldr	r2, [pc, #600]	; (8004858 <HAL_GPIO_Init+0x2a8>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d052      	beq.n	80046aa <HAL_GPIO_Init+0xfa>
 8004604:	4a94      	ldr	r2, [pc, #592]	; (8004858 <HAL_GPIO_Init+0x2a8>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d869      	bhi.n	80046de <HAL_GPIO_Init+0x12e>
 800460a:	4a94      	ldr	r2, [pc, #592]	; (800485c <HAL_GPIO_Init+0x2ac>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d04c      	beq.n	80046aa <HAL_GPIO_Init+0xfa>
 8004610:	4a92      	ldr	r2, [pc, #584]	; (800485c <HAL_GPIO_Init+0x2ac>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d863      	bhi.n	80046de <HAL_GPIO_Init+0x12e>
 8004616:	4a92      	ldr	r2, [pc, #584]	; (8004860 <HAL_GPIO_Init+0x2b0>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d046      	beq.n	80046aa <HAL_GPIO_Init+0xfa>
 800461c:	4a90      	ldr	r2, [pc, #576]	; (8004860 <HAL_GPIO_Init+0x2b0>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d85d      	bhi.n	80046de <HAL_GPIO_Init+0x12e>
 8004622:	2b12      	cmp	r3, #18
 8004624:	d82a      	bhi.n	800467c <HAL_GPIO_Init+0xcc>
 8004626:	2b12      	cmp	r3, #18
 8004628:	d859      	bhi.n	80046de <HAL_GPIO_Init+0x12e>
 800462a:	a201      	add	r2, pc, #4	; (adr r2, 8004630 <HAL_GPIO_Init+0x80>)
 800462c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004630:	080046ab 	.word	0x080046ab
 8004634:	08004685 	.word	0x08004685
 8004638:	08004697 	.word	0x08004697
 800463c:	080046d9 	.word	0x080046d9
 8004640:	080046df 	.word	0x080046df
 8004644:	080046df 	.word	0x080046df
 8004648:	080046df 	.word	0x080046df
 800464c:	080046df 	.word	0x080046df
 8004650:	080046df 	.word	0x080046df
 8004654:	080046df 	.word	0x080046df
 8004658:	080046df 	.word	0x080046df
 800465c:	080046df 	.word	0x080046df
 8004660:	080046df 	.word	0x080046df
 8004664:	080046df 	.word	0x080046df
 8004668:	080046df 	.word	0x080046df
 800466c:	080046df 	.word	0x080046df
 8004670:	080046df 	.word	0x080046df
 8004674:	0800468d 	.word	0x0800468d
 8004678:	080046a1 	.word	0x080046a1
 800467c:	4a79      	ldr	r2, [pc, #484]	; (8004864 <HAL_GPIO_Init+0x2b4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d013      	beq.n	80046aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004682:	e02c      	b.n	80046de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	623b      	str	r3, [r7, #32]
          break;
 800468a:	e029      	b.n	80046e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	3304      	adds	r3, #4
 8004692:	623b      	str	r3, [r7, #32]
          break;
 8004694:	e024      	b.n	80046e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	3308      	adds	r3, #8
 800469c:	623b      	str	r3, [r7, #32]
          break;
 800469e:	e01f      	b.n	80046e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	330c      	adds	r3, #12
 80046a6:	623b      	str	r3, [r7, #32]
          break;
 80046a8:	e01a      	b.n	80046e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d102      	bne.n	80046b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80046b2:	2304      	movs	r3, #4
 80046b4:	623b      	str	r3, [r7, #32]
          break;
 80046b6:	e013      	b.n	80046e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d105      	bne.n	80046cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80046c0:	2308      	movs	r3, #8
 80046c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69fa      	ldr	r2, [r7, #28]
 80046c8:	611a      	str	r2, [r3, #16]
          break;
 80046ca:	e009      	b.n	80046e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80046cc:	2308      	movs	r3, #8
 80046ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	69fa      	ldr	r2, [r7, #28]
 80046d4:	615a      	str	r2, [r3, #20]
          break;
 80046d6:	e003      	b.n	80046e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80046d8:	2300      	movs	r3, #0
 80046da:	623b      	str	r3, [r7, #32]
          break;
 80046dc:	e000      	b.n	80046e0 <HAL_GPIO_Init+0x130>
          break;
 80046de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	2bff      	cmp	r3, #255	; 0xff
 80046e4:	d801      	bhi.n	80046ea <HAL_GPIO_Init+0x13a>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	e001      	b.n	80046ee <HAL_GPIO_Init+0x13e>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	3304      	adds	r3, #4
 80046ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	2bff      	cmp	r3, #255	; 0xff
 80046f4:	d802      	bhi.n	80046fc <HAL_GPIO_Init+0x14c>
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	e002      	b.n	8004702 <HAL_GPIO_Init+0x152>
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	3b08      	subs	r3, #8
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	210f      	movs	r1, #15
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	fa01 f303 	lsl.w	r3, r1, r3
 8004710:	43db      	mvns	r3, r3
 8004712:	401a      	ands	r2, r3
 8004714:	6a39      	ldr	r1, [r7, #32]
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	fa01 f303 	lsl.w	r3, r1, r3
 800471c:	431a      	orrs	r2, r3
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 80b1 	beq.w	8004892 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004730:	4b4d      	ldr	r3, [pc, #308]	; (8004868 <HAL_GPIO_Init+0x2b8>)
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	4a4c      	ldr	r2, [pc, #304]	; (8004868 <HAL_GPIO_Init+0x2b8>)
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	6193      	str	r3, [r2, #24]
 800473c:	4b4a      	ldr	r3, [pc, #296]	; (8004868 <HAL_GPIO_Init+0x2b8>)
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	60bb      	str	r3, [r7, #8]
 8004746:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004748:	4a48      	ldr	r2, [pc, #288]	; (800486c <HAL_GPIO_Init+0x2bc>)
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474c:	089b      	lsrs	r3, r3, #2
 800474e:	3302      	adds	r3, #2
 8004750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004754:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	f003 0303 	and.w	r3, r3, #3
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	220f      	movs	r2, #15
 8004760:	fa02 f303 	lsl.w	r3, r2, r3
 8004764:	43db      	mvns	r3, r3
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	4013      	ands	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a40      	ldr	r2, [pc, #256]	; (8004870 <HAL_GPIO_Init+0x2c0>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d013      	beq.n	800479c <HAL_GPIO_Init+0x1ec>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a3f      	ldr	r2, [pc, #252]	; (8004874 <HAL_GPIO_Init+0x2c4>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d00d      	beq.n	8004798 <HAL_GPIO_Init+0x1e8>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a3e      	ldr	r2, [pc, #248]	; (8004878 <HAL_GPIO_Init+0x2c8>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d007      	beq.n	8004794 <HAL_GPIO_Init+0x1e4>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a3d      	ldr	r2, [pc, #244]	; (800487c <HAL_GPIO_Init+0x2cc>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d101      	bne.n	8004790 <HAL_GPIO_Init+0x1e0>
 800478c:	2303      	movs	r3, #3
 800478e:	e006      	b.n	800479e <HAL_GPIO_Init+0x1ee>
 8004790:	2304      	movs	r3, #4
 8004792:	e004      	b.n	800479e <HAL_GPIO_Init+0x1ee>
 8004794:	2302      	movs	r3, #2
 8004796:	e002      	b.n	800479e <HAL_GPIO_Init+0x1ee>
 8004798:	2301      	movs	r3, #1
 800479a:	e000      	b.n	800479e <HAL_GPIO_Init+0x1ee>
 800479c:	2300      	movs	r3, #0
 800479e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a0:	f002 0203 	and.w	r2, r2, #3
 80047a4:	0092      	lsls	r2, r2, #2
 80047a6:	4093      	lsls	r3, r2
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80047ae:	492f      	ldr	r1, [pc, #188]	; (800486c <HAL_GPIO_Init+0x2bc>)
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	089b      	lsrs	r3, r3, #2
 80047b4:	3302      	adds	r3, #2
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d006      	beq.n	80047d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80047c8:	4b2d      	ldr	r3, [pc, #180]	; (8004880 <HAL_GPIO_Init+0x2d0>)
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	492c      	ldr	r1, [pc, #176]	; (8004880 <HAL_GPIO_Init+0x2d0>)
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	608b      	str	r3, [r1, #8]
 80047d4:	e006      	b.n	80047e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80047d6:	4b2a      	ldr	r3, [pc, #168]	; (8004880 <HAL_GPIO_Init+0x2d0>)
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	43db      	mvns	r3, r3
 80047de:	4928      	ldr	r1, [pc, #160]	; (8004880 <HAL_GPIO_Init+0x2d0>)
 80047e0:	4013      	ands	r3, r2
 80047e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d006      	beq.n	80047fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80047f0:	4b23      	ldr	r3, [pc, #140]	; (8004880 <HAL_GPIO_Init+0x2d0>)
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	4922      	ldr	r1, [pc, #136]	; (8004880 <HAL_GPIO_Init+0x2d0>)
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	60cb      	str	r3, [r1, #12]
 80047fc:	e006      	b.n	800480c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80047fe:	4b20      	ldr	r3, [pc, #128]	; (8004880 <HAL_GPIO_Init+0x2d0>)
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	43db      	mvns	r3, r3
 8004806:	491e      	ldr	r1, [pc, #120]	; (8004880 <HAL_GPIO_Init+0x2d0>)
 8004808:	4013      	ands	r3, r2
 800480a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d006      	beq.n	8004826 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004818:	4b19      	ldr	r3, [pc, #100]	; (8004880 <HAL_GPIO_Init+0x2d0>)
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	4918      	ldr	r1, [pc, #96]	; (8004880 <HAL_GPIO_Init+0x2d0>)
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	4313      	orrs	r3, r2
 8004822:	604b      	str	r3, [r1, #4]
 8004824:	e006      	b.n	8004834 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004826:	4b16      	ldr	r3, [pc, #88]	; (8004880 <HAL_GPIO_Init+0x2d0>)
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	43db      	mvns	r3, r3
 800482e:	4914      	ldr	r1, [pc, #80]	; (8004880 <HAL_GPIO_Init+0x2d0>)
 8004830:	4013      	ands	r3, r2
 8004832:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d021      	beq.n	8004884 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004840:	4b0f      	ldr	r3, [pc, #60]	; (8004880 <HAL_GPIO_Init+0x2d0>)
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	490e      	ldr	r1, [pc, #56]	; (8004880 <HAL_GPIO_Init+0x2d0>)
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	4313      	orrs	r3, r2
 800484a:	600b      	str	r3, [r1, #0]
 800484c:	e021      	b.n	8004892 <HAL_GPIO_Init+0x2e2>
 800484e:	bf00      	nop
 8004850:	10320000 	.word	0x10320000
 8004854:	10310000 	.word	0x10310000
 8004858:	10220000 	.word	0x10220000
 800485c:	10210000 	.word	0x10210000
 8004860:	10120000 	.word	0x10120000
 8004864:	10110000 	.word	0x10110000
 8004868:	40021000 	.word	0x40021000
 800486c:	40010000 	.word	0x40010000
 8004870:	40010800 	.word	0x40010800
 8004874:	40010c00 	.word	0x40010c00
 8004878:	40011000 	.word	0x40011000
 800487c:	40011400 	.word	0x40011400
 8004880:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004884:	4b0b      	ldr	r3, [pc, #44]	; (80048b4 <HAL_GPIO_Init+0x304>)
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	43db      	mvns	r3, r3
 800488c:	4909      	ldr	r1, [pc, #36]	; (80048b4 <HAL_GPIO_Init+0x304>)
 800488e:	4013      	ands	r3, r2
 8004890:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	3301      	adds	r3, #1
 8004896:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	fa22 f303 	lsr.w	r3, r2, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f47f ae8e 	bne.w	80045c4 <HAL_GPIO_Init+0x14>
  }
}
 80048a8:	bf00      	nop
 80048aa:	bf00      	nop
 80048ac:	372c      	adds	r7, #44	; 0x2c
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bc80      	pop	{r7}
 80048b2:	4770      	bx	lr
 80048b4:	40010400 	.word	0x40010400

080048b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	460b      	mov	r3, r1
 80048c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	887b      	ldrh	r3, [r7, #2]
 80048ca:	4013      	ands	r3, r2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048d0:	2301      	movs	r3, #1
 80048d2:	73fb      	strb	r3, [r7, #15]
 80048d4:	e001      	b.n	80048da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048d6:	2300      	movs	r3, #0
 80048d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048da:	7bfb      	ldrb	r3, [r7, #15]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bc80      	pop	{r7}
 80048e4:	4770      	bx	lr

080048e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
 80048ee:	460b      	mov	r3, r1
 80048f0:	807b      	strh	r3, [r7, #2]
 80048f2:	4613      	mov	r3, r2
 80048f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048f6:	787b      	ldrb	r3, [r7, #1]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048fc:	887a      	ldrh	r2, [r7, #2]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004902:	e003      	b.n	800490c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004904:	887b      	ldrh	r3, [r7, #2]
 8004906:	041a      	lsls	r2, r3, #16
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	611a      	str	r2, [r3, #16]
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	bc80      	pop	{r7}
 8004914:	4770      	bx	lr
	...

08004918 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e272      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 8087 	beq.w	8004a46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004938:	4b92      	ldr	r3, [pc, #584]	; (8004b84 <HAL_RCC_OscConfig+0x26c>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f003 030c 	and.w	r3, r3, #12
 8004940:	2b04      	cmp	r3, #4
 8004942:	d00c      	beq.n	800495e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004944:	4b8f      	ldr	r3, [pc, #572]	; (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f003 030c 	and.w	r3, r3, #12
 800494c:	2b08      	cmp	r3, #8
 800494e:	d112      	bne.n	8004976 <HAL_RCC_OscConfig+0x5e>
 8004950:	4b8c      	ldr	r3, [pc, #560]	; (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800495c:	d10b      	bne.n	8004976 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800495e:	4b89      	ldr	r3, [pc, #548]	; (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d06c      	beq.n	8004a44 <HAL_RCC_OscConfig+0x12c>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d168      	bne.n	8004a44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e24c      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800497e:	d106      	bne.n	800498e <HAL_RCC_OscConfig+0x76>
 8004980:	4b80      	ldr	r3, [pc, #512]	; (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a7f      	ldr	r2, [pc, #508]	; (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800498a:	6013      	str	r3, [r2, #0]
 800498c:	e02e      	b.n	80049ec <HAL_RCC_OscConfig+0xd4>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10c      	bne.n	80049b0 <HAL_RCC_OscConfig+0x98>
 8004996:	4b7b      	ldr	r3, [pc, #492]	; (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a7a      	ldr	r2, [pc, #488]	; (8004b84 <HAL_RCC_OscConfig+0x26c>)
 800499c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	4b78      	ldr	r3, [pc, #480]	; (8004b84 <HAL_RCC_OscConfig+0x26c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a77      	ldr	r2, [pc, #476]	; (8004b84 <HAL_RCC_OscConfig+0x26c>)
 80049a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	e01d      	b.n	80049ec <HAL_RCC_OscConfig+0xd4>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049b8:	d10c      	bne.n	80049d4 <HAL_RCC_OscConfig+0xbc>
 80049ba:	4b72      	ldr	r3, [pc, #456]	; (8004b84 <HAL_RCC_OscConfig+0x26c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a71      	ldr	r2, [pc, #452]	; (8004b84 <HAL_RCC_OscConfig+0x26c>)
 80049c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	4b6f      	ldr	r3, [pc, #444]	; (8004b84 <HAL_RCC_OscConfig+0x26c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a6e      	ldr	r2, [pc, #440]	; (8004b84 <HAL_RCC_OscConfig+0x26c>)
 80049cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d0:	6013      	str	r3, [r2, #0]
 80049d2:	e00b      	b.n	80049ec <HAL_RCC_OscConfig+0xd4>
 80049d4:	4b6b      	ldr	r3, [pc, #428]	; (8004b84 <HAL_RCC_OscConfig+0x26c>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a6a      	ldr	r2, [pc, #424]	; (8004b84 <HAL_RCC_OscConfig+0x26c>)
 80049da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	4b68      	ldr	r3, [pc, #416]	; (8004b84 <HAL_RCC_OscConfig+0x26c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a67      	ldr	r2, [pc, #412]	; (8004b84 <HAL_RCC_OscConfig+0x26c>)
 80049e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d013      	beq.n	8004a1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f4:	f7fe fe00 	bl	80035f8 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049fc:	f7fe fdfc 	bl	80035f8 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b64      	cmp	r3, #100	; 0x64
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e200      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a0e:	4b5d      	ldr	r3, [pc, #372]	; (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d0f0      	beq.n	80049fc <HAL_RCC_OscConfig+0xe4>
 8004a1a:	e014      	b.n	8004a46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a1c:	f7fe fdec 	bl	80035f8 <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a24:	f7fe fde8 	bl	80035f8 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b64      	cmp	r3, #100	; 0x64
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e1ec      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a36:	4b53      	ldr	r3, [pc, #332]	; (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1f0      	bne.n	8004a24 <HAL_RCC_OscConfig+0x10c>
 8004a42:	e000      	b.n	8004a46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d063      	beq.n	8004b1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a52:	4b4c      	ldr	r3, [pc, #304]	; (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f003 030c 	and.w	r3, r3, #12
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00b      	beq.n	8004a76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004a5e:	4b49      	ldr	r3, [pc, #292]	; (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f003 030c 	and.w	r3, r3, #12
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	d11c      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x18c>
 8004a6a:	4b46      	ldr	r3, [pc, #280]	; (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d116      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a76:	4b43      	ldr	r3, [pc, #268]	; (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d005      	beq.n	8004a8e <HAL_RCC_OscConfig+0x176>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d001      	beq.n	8004a8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e1c0      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a8e:	4b3d      	ldr	r3, [pc, #244]	; (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	4939      	ldr	r1, [pc, #228]	; (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aa2:	e03a      	b.n	8004b1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d020      	beq.n	8004aee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aac:	4b36      	ldr	r3, [pc, #216]	; (8004b88 <HAL_RCC_OscConfig+0x270>)
 8004aae:	2201      	movs	r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab2:	f7fe fda1 	bl	80035f8 <HAL_GetTick>
 8004ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab8:	e008      	b.n	8004acc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aba:	f7fe fd9d 	bl	80035f8 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d901      	bls.n	8004acc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e1a1      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004acc:	4b2d      	ldr	r3, [pc, #180]	; (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d0f0      	beq.n	8004aba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad8:	4b2a      	ldr	r3, [pc, #168]	; (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	00db      	lsls	r3, r3, #3
 8004ae6:	4927      	ldr	r1, [pc, #156]	; (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	600b      	str	r3, [r1, #0]
 8004aec:	e015      	b.n	8004b1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aee:	4b26      	ldr	r3, [pc, #152]	; (8004b88 <HAL_RCC_OscConfig+0x270>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af4:	f7fe fd80 	bl	80035f8 <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004afc:	f7fe fd7c 	bl	80035f8 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e180      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b0e:	4b1d      	ldr	r3, [pc, #116]	; (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1f0      	bne.n	8004afc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0308 	and.w	r3, r3, #8
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d03a      	beq.n	8004b9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d019      	beq.n	8004b62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b2e:	4b17      	ldr	r3, [pc, #92]	; (8004b8c <HAL_RCC_OscConfig+0x274>)
 8004b30:	2201      	movs	r2, #1
 8004b32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b34:	f7fe fd60 	bl	80035f8 <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b3c:	f7fe fd5c 	bl	80035f8 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e160      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b4e:	4b0d      	ldr	r3, [pc, #52]	; (8004b84 <HAL_RCC_OscConfig+0x26c>)
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0f0      	beq.n	8004b3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004b5a:	2001      	movs	r0, #1
 8004b5c:	f000 face 	bl	80050fc <RCC_Delay>
 8004b60:	e01c      	b.n	8004b9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b62:	4b0a      	ldr	r3, [pc, #40]	; (8004b8c <HAL_RCC_OscConfig+0x274>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b68:	f7fe fd46 	bl	80035f8 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b6e:	e00f      	b.n	8004b90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b70:	f7fe fd42 	bl	80035f8 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d908      	bls.n	8004b90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e146      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>
 8004b82:	bf00      	nop
 8004b84:	40021000 	.word	0x40021000
 8004b88:	42420000 	.word	0x42420000
 8004b8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b90:	4b92      	ldr	r3, [pc, #584]	; (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1e9      	bne.n	8004b70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 80a6 	beq.w	8004cf6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004baa:	2300      	movs	r3, #0
 8004bac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bae:	4b8b      	ldr	r3, [pc, #556]	; (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10d      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bba:	4b88      	ldr	r3, [pc, #544]	; (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	4a87      	ldr	r2, [pc, #540]	; (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bc4:	61d3      	str	r3, [r2, #28]
 8004bc6:	4b85      	ldr	r3, [pc, #532]	; (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bce:	60bb      	str	r3, [r7, #8]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd6:	4b82      	ldr	r3, [pc, #520]	; (8004de0 <HAL_RCC_OscConfig+0x4c8>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d118      	bne.n	8004c14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004be2:	4b7f      	ldr	r3, [pc, #508]	; (8004de0 <HAL_RCC_OscConfig+0x4c8>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a7e      	ldr	r2, [pc, #504]	; (8004de0 <HAL_RCC_OscConfig+0x4c8>)
 8004be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bee:	f7fe fd03 	bl	80035f8 <HAL_GetTick>
 8004bf2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bf4:	e008      	b.n	8004c08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bf6:	f7fe fcff 	bl	80035f8 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b64      	cmp	r3, #100	; 0x64
 8004c02:	d901      	bls.n	8004c08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e103      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c08:	4b75      	ldr	r3, [pc, #468]	; (8004de0 <HAL_RCC_OscConfig+0x4c8>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d0f0      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d106      	bne.n	8004c2a <HAL_RCC_OscConfig+0x312>
 8004c1c:	4b6f      	ldr	r3, [pc, #444]	; (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	4a6e      	ldr	r2, [pc, #440]	; (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004c22:	f043 0301 	orr.w	r3, r3, #1
 8004c26:	6213      	str	r3, [r2, #32]
 8004c28:	e02d      	b.n	8004c86 <HAL_RCC_OscConfig+0x36e>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10c      	bne.n	8004c4c <HAL_RCC_OscConfig+0x334>
 8004c32:	4b6a      	ldr	r3, [pc, #424]	; (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	4a69      	ldr	r2, [pc, #420]	; (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004c38:	f023 0301 	bic.w	r3, r3, #1
 8004c3c:	6213      	str	r3, [r2, #32]
 8004c3e:	4b67      	ldr	r3, [pc, #412]	; (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	4a66      	ldr	r2, [pc, #408]	; (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004c44:	f023 0304 	bic.w	r3, r3, #4
 8004c48:	6213      	str	r3, [r2, #32]
 8004c4a:	e01c      	b.n	8004c86 <HAL_RCC_OscConfig+0x36e>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	2b05      	cmp	r3, #5
 8004c52:	d10c      	bne.n	8004c6e <HAL_RCC_OscConfig+0x356>
 8004c54:	4b61      	ldr	r3, [pc, #388]	; (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	4a60      	ldr	r2, [pc, #384]	; (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004c5a:	f043 0304 	orr.w	r3, r3, #4
 8004c5e:	6213      	str	r3, [r2, #32]
 8004c60:	4b5e      	ldr	r3, [pc, #376]	; (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	4a5d      	ldr	r2, [pc, #372]	; (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004c66:	f043 0301 	orr.w	r3, r3, #1
 8004c6a:	6213      	str	r3, [r2, #32]
 8004c6c:	e00b      	b.n	8004c86 <HAL_RCC_OscConfig+0x36e>
 8004c6e:	4b5b      	ldr	r3, [pc, #364]	; (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	4a5a      	ldr	r2, [pc, #360]	; (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004c74:	f023 0301 	bic.w	r3, r3, #1
 8004c78:	6213      	str	r3, [r2, #32]
 8004c7a:	4b58      	ldr	r3, [pc, #352]	; (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	4a57      	ldr	r2, [pc, #348]	; (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004c80:	f023 0304 	bic.w	r3, r3, #4
 8004c84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d015      	beq.n	8004cba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c8e:	f7fe fcb3 	bl	80035f8 <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c94:	e00a      	b.n	8004cac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c96:	f7fe fcaf 	bl	80035f8 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e0b1      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cac:	4b4b      	ldr	r3, [pc, #300]	; (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0ee      	beq.n	8004c96 <HAL_RCC_OscConfig+0x37e>
 8004cb8:	e014      	b.n	8004ce4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cba:	f7fe fc9d 	bl	80035f8 <HAL_GetTick>
 8004cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cc0:	e00a      	b.n	8004cd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cc2:	f7fe fc99 	bl	80035f8 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e09b      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cd8:	4b40      	ldr	r3, [pc, #256]	; (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1ee      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ce4:	7dfb      	ldrb	r3, [r7, #23]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d105      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cea:	4b3c      	ldr	r3, [pc, #240]	; (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	4a3b      	ldr	r2, [pc, #236]	; (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cf4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 8087 	beq.w	8004e0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d00:	4b36      	ldr	r3, [pc, #216]	; (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f003 030c 	and.w	r3, r3, #12
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d061      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d146      	bne.n	8004da2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d14:	4b33      	ldr	r3, [pc, #204]	; (8004de4 <HAL_RCC_OscConfig+0x4cc>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d1a:	f7fe fc6d 	bl	80035f8 <HAL_GetTick>
 8004d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d20:	e008      	b.n	8004d34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d22:	f7fe fc69 	bl	80035f8 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e06d      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d34:	4b29      	ldr	r3, [pc, #164]	; (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1f0      	bne.n	8004d22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d48:	d108      	bne.n	8004d5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d4a:	4b24      	ldr	r3, [pc, #144]	; (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	4921      	ldr	r1, [pc, #132]	; (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d5c:	4b1f      	ldr	r3, [pc, #124]	; (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a19      	ldr	r1, [r3, #32]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	491b      	ldr	r1, [pc, #108]	; (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d74:	4b1b      	ldr	r3, [pc, #108]	; (8004de4 <HAL_RCC_OscConfig+0x4cc>)
 8004d76:	2201      	movs	r2, #1
 8004d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d7a:	f7fe fc3d 	bl	80035f8 <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d82:	f7fe fc39 	bl	80035f8 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e03d      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d94:	4b11      	ldr	r3, [pc, #68]	; (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0f0      	beq.n	8004d82 <HAL_RCC_OscConfig+0x46a>
 8004da0:	e035      	b.n	8004e0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004da2:	4b10      	ldr	r3, [pc, #64]	; (8004de4 <HAL_RCC_OscConfig+0x4cc>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da8:	f7fe fc26 	bl	80035f8 <HAL_GetTick>
 8004dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dae:	e008      	b.n	8004dc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db0:	f7fe fc22 	bl	80035f8 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e026      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dc2:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <HAL_RCC_OscConfig+0x4c4>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1f0      	bne.n	8004db0 <HAL_RCC_OscConfig+0x498>
 8004dce:	e01e      	b.n	8004e0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	69db      	ldr	r3, [r3, #28]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d107      	bne.n	8004de8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e019      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>
 8004ddc:	40021000 	.word	0x40021000
 8004de0:	40007000 	.word	0x40007000
 8004de4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004de8:	4b0b      	ldr	r3, [pc, #44]	; (8004e18 <HAL_RCC_OscConfig+0x500>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d106      	bne.n	8004e0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d001      	beq.n	8004e0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e000      	b.n	8004e10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3718      	adds	r7, #24
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	40021000 	.word	0x40021000

08004e1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e0d0      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e30:	4b6a      	ldr	r3, [pc, #424]	; (8004fdc <HAL_RCC_ClockConfig+0x1c0>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d910      	bls.n	8004e60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e3e:	4b67      	ldr	r3, [pc, #412]	; (8004fdc <HAL_RCC_ClockConfig+0x1c0>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f023 0207 	bic.w	r2, r3, #7
 8004e46:	4965      	ldr	r1, [pc, #404]	; (8004fdc <HAL_RCC_ClockConfig+0x1c0>)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e4e:	4b63      	ldr	r3, [pc, #396]	; (8004fdc <HAL_RCC_ClockConfig+0x1c0>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d001      	beq.n	8004e60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e0b8      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d020      	beq.n	8004eae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d005      	beq.n	8004e84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e78:	4b59      	ldr	r3, [pc, #356]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	4a58      	ldr	r2, [pc, #352]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004e82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0308 	and.w	r3, r3, #8
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d005      	beq.n	8004e9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e90:	4b53      	ldr	r3, [pc, #332]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	4a52      	ldr	r2, [pc, #328]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004e9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e9c:	4b50      	ldr	r3, [pc, #320]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	494d      	ldr	r1, [pc, #308]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d040      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d107      	bne.n	8004ed2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ec2:	4b47      	ldr	r3, [pc, #284]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d115      	bne.n	8004efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e07f      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d107      	bne.n	8004eea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eda:	4b41      	ldr	r3, [pc, #260]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d109      	bne.n	8004efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e073      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eea:	4b3d      	ldr	r3, [pc, #244]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e06b      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004efa:	4b39      	ldr	r3, [pc, #228]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f023 0203 	bic.w	r2, r3, #3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	4936      	ldr	r1, [pc, #216]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f0c:	f7fe fb74 	bl	80035f8 <HAL_GetTick>
 8004f10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f12:	e00a      	b.n	8004f2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f14:	f7fe fb70 	bl	80035f8 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e053      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f2a:	4b2d      	ldr	r3, [pc, #180]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f003 020c 	and.w	r2, r3, #12
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d1eb      	bne.n	8004f14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f3c:	4b27      	ldr	r3, [pc, #156]	; (8004fdc <HAL_RCC_ClockConfig+0x1c0>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0307 	and.w	r3, r3, #7
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d210      	bcs.n	8004f6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f4a:	4b24      	ldr	r3, [pc, #144]	; (8004fdc <HAL_RCC_ClockConfig+0x1c0>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f023 0207 	bic.w	r2, r3, #7
 8004f52:	4922      	ldr	r1, [pc, #136]	; (8004fdc <HAL_RCC_ClockConfig+0x1c0>)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f5a:	4b20      	ldr	r3, [pc, #128]	; (8004fdc <HAL_RCC_ClockConfig+0x1c0>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d001      	beq.n	8004f6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e032      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d008      	beq.n	8004f8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f78:	4b19      	ldr	r3, [pc, #100]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	4916      	ldr	r1, [pc, #88]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d009      	beq.n	8004faa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f96:	4b12      	ldr	r3, [pc, #72]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	490e      	ldr	r1, [pc, #56]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004faa:	f000 f821 	bl	8004ff0 <HAL_RCC_GetSysClockFreq>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	4b0b      	ldr	r3, [pc, #44]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	091b      	lsrs	r3, r3, #4
 8004fb6:	f003 030f 	and.w	r3, r3, #15
 8004fba:	490a      	ldr	r1, [pc, #40]	; (8004fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8004fbc:	5ccb      	ldrb	r3, [r1, r3]
 8004fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc2:	4a09      	ldr	r2, [pc, #36]	; (8004fe8 <HAL_RCC_ClockConfig+0x1cc>)
 8004fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004fc6:	4b09      	ldr	r3, [pc, #36]	; (8004fec <HAL_RCC_ClockConfig+0x1d0>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7fe fad2 	bl	8003574 <HAL_InitTick>

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	40022000 	.word	0x40022000
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	0800b5f8 	.word	0x0800b5f8
 8004fe8:	20000004 	.word	0x20000004
 8004fec:	20000008 	.word	0x20000008

08004ff0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60fb      	str	r3, [r7, #12]
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60bb      	str	r3, [r7, #8]
 8004ffe:	2300      	movs	r3, #0
 8005000:	617b      	str	r3, [r7, #20]
 8005002:	2300      	movs	r3, #0
 8005004:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005006:	2300      	movs	r3, #0
 8005008:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800500a:	4b1e      	ldr	r3, [pc, #120]	; (8005084 <HAL_RCC_GetSysClockFreq+0x94>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f003 030c 	and.w	r3, r3, #12
 8005016:	2b04      	cmp	r3, #4
 8005018:	d002      	beq.n	8005020 <HAL_RCC_GetSysClockFreq+0x30>
 800501a:	2b08      	cmp	r3, #8
 800501c:	d003      	beq.n	8005026 <HAL_RCC_GetSysClockFreq+0x36>
 800501e:	e027      	b.n	8005070 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005020:	4b19      	ldr	r3, [pc, #100]	; (8005088 <HAL_RCC_GetSysClockFreq+0x98>)
 8005022:	613b      	str	r3, [r7, #16]
      break;
 8005024:	e027      	b.n	8005076 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	0c9b      	lsrs	r3, r3, #18
 800502a:	f003 030f 	and.w	r3, r3, #15
 800502e:	4a17      	ldr	r2, [pc, #92]	; (800508c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005030:	5cd3      	ldrb	r3, [r2, r3]
 8005032:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d010      	beq.n	8005060 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800503e:	4b11      	ldr	r3, [pc, #68]	; (8005084 <HAL_RCC_GetSysClockFreq+0x94>)
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	0c5b      	lsrs	r3, r3, #17
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	4a11      	ldr	r2, [pc, #68]	; (8005090 <HAL_RCC_GetSysClockFreq+0xa0>)
 800504a:	5cd3      	ldrb	r3, [r2, r3]
 800504c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a0d      	ldr	r2, [pc, #52]	; (8005088 <HAL_RCC_GetSysClockFreq+0x98>)
 8005052:	fb03 f202 	mul.w	r2, r3, r2
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	fbb2 f3f3 	udiv	r3, r2, r3
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	e004      	b.n	800506a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a0c      	ldr	r2, [pc, #48]	; (8005094 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005064:	fb02 f303 	mul.w	r3, r2, r3
 8005068:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	613b      	str	r3, [r7, #16]
      break;
 800506e:	e002      	b.n	8005076 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005070:	4b05      	ldr	r3, [pc, #20]	; (8005088 <HAL_RCC_GetSysClockFreq+0x98>)
 8005072:	613b      	str	r3, [r7, #16]
      break;
 8005074:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005076:	693b      	ldr	r3, [r7, #16]
}
 8005078:	4618      	mov	r0, r3
 800507a:	371c      	adds	r7, #28
 800507c:	46bd      	mov	sp, r7
 800507e:	bc80      	pop	{r7}
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	40021000 	.word	0x40021000
 8005088:	007a1200 	.word	0x007a1200
 800508c:	0800b610 	.word	0x0800b610
 8005090:	0800b620 	.word	0x0800b620
 8005094:	003d0900 	.word	0x003d0900

08005098 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005098:	b480      	push	{r7}
 800509a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800509c:	4b02      	ldr	r3, [pc, #8]	; (80050a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800509e:	681b      	ldr	r3, [r3, #0]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bc80      	pop	{r7}
 80050a6:	4770      	bx	lr
 80050a8:	20000004 	.word	0x20000004

080050ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050b0:	f7ff fff2 	bl	8005098 <HAL_RCC_GetHCLKFreq>
 80050b4:	4602      	mov	r2, r0
 80050b6:	4b05      	ldr	r3, [pc, #20]	; (80050cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	0a1b      	lsrs	r3, r3, #8
 80050bc:	f003 0307 	and.w	r3, r3, #7
 80050c0:	4903      	ldr	r1, [pc, #12]	; (80050d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050c2:	5ccb      	ldrb	r3, [r1, r3]
 80050c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	40021000 	.word	0x40021000
 80050d0:	0800b608 	.word	0x0800b608

080050d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050d8:	f7ff ffde 	bl	8005098 <HAL_RCC_GetHCLKFreq>
 80050dc:	4602      	mov	r2, r0
 80050de:	4b05      	ldr	r3, [pc, #20]	; (80050f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	0adb      	lsrs	r3, r3, #11
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	4903      	ldr	r1, [pc, #12]	; (80050f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050ea:	5ccb      	ldrb	r3, [r1, r3]
 80050ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40021000 	.word	0x40021000
 80050f8:	0800b608 	.word	0x0800b608

080050fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005104:	4b0a      	ldr	r3, [pc, #40]	; (8005130 <RCC_Delay+0x34>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a0a      	ldr	r2, [pc, #40]	; (8005134 <RCC_Delay+0x38>)
 800510a:	fba2 2303 	umull	r2, r3, r2, r3
 800510e:	0a5b      	lsrs	r3, r3, #9
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	fb02 f303 	mul.w	r3, r2, r3
 8005116:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005118:	bf00      	nop
  }
  while (Delay --);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	1e5a      	subs	r2, r3, #1
 800511e:	60fa      	str	r2, [r7, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1f9      	bne.n	8005118 <RCC_Delay+0x1c>
}
 8005124:	bf00      	nop
 8005126:	bf00      	nop
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	bc80      	pop	{r7}
 800512e:	4770      	bx	lr
 8005130:	20000004 	.word	0x20000004
 8005134:	10624dd3 	.word	0x10624dd3

08005138 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	613b      	str	r3, [r7, #16]
 8005144:	2300      	movs	r3, #0
 8005146:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b00      	cmp	r3, #0
 8005152:	d07d      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005154:	2300      	movs	r3, #0
 8005156:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005158:	4b4f      	ldr	r3, [pc, #316]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800515a:	69db      	ldr	r3, [r3, #28]
 800515c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10d      	bne.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005164:	4b4c      	ldr	r3, [pc, #304]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	4a4b      	ldr	r2, [pc, #300]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800516a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800516e:	61d3      	str	r3, [r2, #28]
 8005170:	4b49      	ldr	r3, [pc, #292]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005172:	69db      	ldr	r3, [r3, #28]
 8005174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005178:	60bb      	str	r3, [r7, #8]
 800517a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800517c:	2301      	movs	r3, #1
 800517e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005180:	4b46      	ldr	r3, [pc, #280]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005188:	2b00      	cmp	r3, #0
 800518a:	d118      	bne.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800518c:	4b43      	ldr	r3, [pc, #268]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a42      	ldr	r2, [pc, #264]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005196:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005198:	f7fe fa2e 	bl	80035f8 <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800519e:	e008      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051a0:	f7fe fa2a 	bl	80035f8 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b64      	cmp	r3, #100	; 0x64
 80051ac:	d901      	bls.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e06d      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051b2:	4b3a      	ldr	r3, [pc, #232]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0f0      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051be:	4b36      	ldr	r3, [pc, #216]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d02e      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d027      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051dc:	4b2e      	ldr	r3, [pc, #184]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051e6:	4b2e      	ldr	r3, [pc, #184]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80051e8:	2201      	movs	r2, #1
 80051ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051ec:	4b2c      	ldr	r3, [pc, #176]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80051f2:	4a29      	ldr	r2, [pc, #164]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d014      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005202:	f7fe f9f9 	bl	80035f8 <HAL_GetTick>
 8005206:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005208:	e00a      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800520a:	f7fe f9f5 	bl	80035f8 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	f241 3288 	movw	r2, #5000	; 0x1388
 8005218:	4293      	cmp	r3, r2
 800521a:	d901      	bls.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e036      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005220:	4b1d      	ldr	r3, [pc, #116]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d0ee      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800522c:	4b1a      	ldr	r3, [pc, #104]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	4917      	ldr	r1, [pc, #92]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800523a:	4313      	orrs	r3, r2
 800523c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800523e:	7dfb      	ldrb	r3, [r7, #23]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d105      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005244:	4b14      	ldr	r3, [pc, #80]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	4a13      	ldr	r2, [pc, #76]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800524a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800524e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	2b00      	cmp	r3, #0
 800525a:	d008      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800525c:	4b0e      	ldr	r3, [pc, #56]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	490b      	ldr	r1, [pc, #44]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800526a:	4313      	orrs	r3, r2
 800526c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0310 	and.w	r3, r3, #16
 8005276:	2b00      	cmp	r3, #0
 8005278:	d008      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800527a:	4b07      	ldr	r3, [pc, #28]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	4904      	ldr	r1, [pc, #16]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005288:	4313      	orrs	r3, r2
 800528a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3718      	adds	r7, #24
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	40021000 	.word	0x40021000
 800529c:	40007000 	.word	0x40007000
 80052a0:	42420440 	.word	0x42420440

080052a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e041      	b.n	800533a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d106      	bne.n	80052d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7fd ff86 	bl	80031dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	3304      	adds	r3, #4
 80052e0:	4619      	mov	r1, r3
 80052e2:	4610      	mov	r0, r2
 80052e4:	f000 fd36 	bl	8005d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
	...

08005344 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b01      	cmp	r3, #1
 8005356:	d001      	beq.n	800535c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e032      	b.n	80053c2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a18      	ldr	r2, [pc, #96]	; (80053cc <HAL_TIM_Base_Start+0x88>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d00e      	beq.n	800538c <HAL_TIM_Base_Start+0x48>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005376:	d009      	beq.n	800538c <HAL_TIM_Base_Start+0x48>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a14      	ldr	r2, [pc, #80]	; (80053d0 <HAL_TIM_Base_Start+0x8c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d004      	beq.n	800538c <HAL_TIM_Base_Start+0x48>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a13      	ldr	r2, [pc, #76]	; (80053d4 <HAL_TIM_Base_Start+0x90>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d111      	bne.n	80053b0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 0307 	and.w	r3, r3, #7
 8005396:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2b06      	cmp	r3, #6
 800539c:	d010      	beq.n	80053c0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f042 0201 	orr.w	r2, r2, #1
 80053ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ae:	e007      	b.n	80053c0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0201 	orr.w	r2, r2, #1
 80053be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bc80      	pop	{r7}
 80053ca:	4770      	bx	lr
 80053cc:	40012c00 	.word	0x40012c00
 80053d0:	40000400 	.word	0x40000400
 80053d4:	40000800 	.word	0x40000800

080053d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d001      	beq.n	80053f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e03a      	b.n	8005466 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2202      	movs	r2, #2
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68da      	ldr	r2, [r3, #12]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0201 	orr.w	r2, r2, #1
 8005406:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a18      	ldr	r2, [pc, #96]	; (8005470 <HAL_TIM_Base_Start_IT+0x98>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d00e      	beq.n	8005430 <HAL_TIM_Base_Start_IT+0x58>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800541a:	d009      	beq.n	8005430 <HAL_TIM_Base_Start_IT+0x58>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a14      	ldr	r2, [pc, #80]	; (8005474 <HAL_TIM_Base_Start_IT+0x9c>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d004      	beq.n	8005430 <HAL_TIM_Base_Start_IT+0x58>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a13      	ldr	r2, [pc, #76]	; (8005478 <HAL_TIM_Base_Start_IT+0xa0>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d111      	bne.n	8005454 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2b06      	cmp	r3, #6
 8005440:	d010      	beq.n	8005464 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f042 0201 	orr.w	r2, r2, #1
 8005450:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005452:	e007      	b.n	8005464 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 0201 	orr.w	r2, r2, #1
 8005462:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	bc80      	pop	{r7}
 800546e:	4770      	bx	lr
 8005470:	40012c00 	.word	0x40012c00
 8005474:	40000400 	.word	0x40000400
 8005478:	40000800 	.word	0x40000800

0800547c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e041      	b.n	8005512 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d106      	bne.n	80054a8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f839 	bl	800551a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2202      	movs	r2, #2
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	3304      	adds	r3, #4
 80054b8:	4619      	mov	r1, r3
 80054ba:	4610      	mov	r0, r2
 80054bc:	f000 fc4a 	bl	8005d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3708      	adds	r7, #8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005522:	bf00      	nop
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	bc80      	pop	{r7}
 800552a:	4770      	bx	lr

0800552c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e041      	b.n	80055c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d106      	bne.n	8005558 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f839 	bl	80055ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	3304      	adds	r3, #4
 8005568:	4619      	mov	r1, r3
 800556a:	4610      	mov	r0, r2
 800556c:	f000 fbf2 	bl	8005d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b083      	sub	sp, #12
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055d2:	bf00      	nop
 80055d4:	370c      	adds	r7, #12
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bc80      	pop	{r7}
 80055da:	4770      	bx	lr

080055dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d109      	bne.n	8005600 <HAL_TIM_PWM_Start+0x24>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	bf14      	ite	ne
 80055f8:	2301      	movne	r3, #1
 80055fa:	2300      	moveq	r3, #0
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	e022      	b.n	8005646 <HAL_TIM_PWM_Start+0x6a>
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	2b04      	cmp	r3, #4
 8005604:	d109      	bne.n	800561a <HAL_TIM_PWM_Start+0x3e>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b01      	cmp	r3, #1
 8005610:	bf14      	ite	ne
 8005612:	2301      	movne	r3, #1
 8005614:	2300      	moveq	r3, #0
 8005616:	b2db      	uxtb	r3, r3
 8005618:	e015      	b.n	8005646 <HAL_TIM_PWM_Start+0x6a>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b08      	cmp	r3, #8
 800561e:	d109      	bne.n	8005634 <HAL_TIM_PWM_Start+0x58>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b01      	cmp	r3, #1
 800562a:	bf14      	ite	ne
 800562c:	2301      	movne	r3, #1
 800562e:	2300      	moveq	r3, #0
 8005630:	b2db      	uxtb	r3, r3
 8005632:	e008      	b.n	8005646 <HAL_TIM_PWM_Start+0x6a>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b01      	cmp	r3, #1
 800563e:	bf14      	ite	ne
 8005640:	2301      	movne	r3, #1
 8005642:	2300      	moveq	r3, #0
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e05e      	b.n	800570c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d104      	bne.n	800565e <HAL_TIM_PWM_Start+0x82>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800565c:	e013      	b.n	8005686 <HAL_TIM_PWM_Start+0xaa>
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b04      	cmp	r3, #4
 8005662:	d104      	bne.n	800566e <HAL_TIM_PWM_Start+0x92>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2202      	movs	r2, #2
 8005668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800566c:	e00b      	b.n	8005686 <HAL_TIM_PWM_Start+0xaa>
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2b08      	cmp	r3, #8
 8005672:	d104      	bne.n	800567e <HAL_TIM_PWM_Start+0xa2>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800567c:	e003      	b.n	8005686 <HAL_TIM_PWM_Start+0xaa>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2202      	movs	r2, #2
 8005682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2201      	movs	r2, #1
 800568c:	6839      	ldr	r1, [r7, #0]
 800568e:	4618      	mov	r0, r3
 8005690:	f000 fde0 	bl	8006254 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a1e      	ldr	r2, [pc, #120]	; (8005714 <HAL_TIM_PWM_Start+0x138>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d107      	bne.n	80056ae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a18      	ldr	r2, [pc, #96]	; (8005714 <HAL_TIM_PWM_Start+0x138>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d00e      	beq.n	80056d6 <HAL_TIM_PWM_Start+0xfa>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c0:	d009      	beq.n	80056d6 <HAL_TIM_PWM_Start+0xfa>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a14      	ldr	r2, [pc, #80]	; (8005718 <HAL_TIM_PWM_Start+0x13c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d004      	beq.n	80056d6 <HAL_TIM_PWM_Start+0xfa>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a12      	ldr	r2, [pc, #72]	; (800571c <HAL_TIM_PWM_Start+0x140>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d111      	bne.n	80056fa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f003 0307 	and.w	r3, r3, #7
 80056e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2b06      	cmp	r3, #6
 80056e6:	d010      	beq.n	800570a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f042 0201 	orr.w	r2, r2, #1
 80056f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f8:	e007      	b.n	800570a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f042 0201 	orr.w	r2, r2, #1
 8005708:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	40012c00 	.word	0x40012c00
 8005718:	40000400 	.word	0x40000400
 800571c:	40000800 	.word	0x40000800

08005720 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b02      	cmp	r3, #2
 8005734:	d122      	bne.n	800577c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b02      	cmp	r3, #2
 8005742:	d11b      	bne.n	800577c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f06f 0202 	mvn.w	r2, #2
 800574c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	f003 0303 	and.w	r3, r3, #3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fadb 	bl	8005d1e <HAL_TIM_IC_CaptureCallback>
 8005768:	e005      	b.n	8005776 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 face 	bl	8005d0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fadd 	bl	8005d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	f003 0304 	and.w	r3, r3, #4
 8005786:	2b04      	cmp	r3, #4
 8005788:	d122      	bne.n	80057d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f003 0304 	and.w	r3, r3, #4
 8005794:	2b04      	cmp	r3, #4
 8005796:	d11b      	bne.n	80057d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f06f 0204 	mvn.w	r2, #4
 80057a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2202      	movs	r2, #2
 80057a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 fab1 	bl	8005d1e <HAL_TIM_IC_CaptureCallback>
 80057bc:	e005      	b.n	80057ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 faa4 	bl	8005d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fab3 	bl	8005d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	f003 0308 	and.w	r3, r3, #8
 80057da:	2b08      	cmp	r3, #8
 80057dc:	d122      	bne.n	8005824 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f003 0308 	and.w	r3, r3, #8
 80057e8:	2b08      	cmp	r3, #8
 80057ea:	d11b      	bne.n	8005824 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f06f 0208 	mvn.w	r2, #8
 80057f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2204      	movs	r2, #4
 80057fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	f003 0303 	and.w	r3, r3, #3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 fa87 	bl	8005d1e <HAL_TIM_IC_CaptureCallback>
 8005810:	e005      	b.n	800581e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fa7a 	bl	8005d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 fa89 	bl	8005d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	f003 0310 	and.w	r3, r3, #16
 800582e:	2b10      	cmp	r3, #16
 8005830:	d122      	bne.n	8005878 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f003 0310 	and.w	r3, r3, #16
 800583c:	2b10      	cmp	r3, #16
 800583e:	d11b      	bne.n	8005878 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f06f 0210 	mvn.w	r2, #16
 8005848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2208      	movs	r2, #8
 800584e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 fa5d 	bl	8005d1e <HAL_TIM_IC_CaptureCallback>
 8005864:	e005      	b.n	8005872 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 fa50 	bl	8005d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 fa5f 	bl	8005d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b01      	cmp	r3, #1
 8005884:	d10e      	bne.n	80058a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	2b01      	cmp	r3, #1
 8005892:	d107      	bne.n	80058a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f06f 0201 	mvn.w	r2, #1
 800589c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 fa2b 	bl	8005cfa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ae:	2b80      	cmp	r3, #128	; 0x80
 80058b0:	d10e      	bne.n	80058d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058bc:	2b80      	cmp	r3, #128	; 0x80
 80058be:	d107      	bne.n	80058d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 fd4d 	bl	800636a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058da:	2b40      	cmp	r3, #64	; 0x40
 80058dc:	d10e      	bne.n	80058fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e8:	2b40      	cmp	r3, #64	; 0x40
 80058ea:	d107      	bne.n	80058fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 fa23 	bl	8005d42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	f003 0320 	and.w	r3, r3, #32
 8005906:	2b20      	cmp	r3, #32
 8005908:	d10e      	bne.n	8005928 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	f003 0320 	and.w	r3, r3, #32
 8005914:	2b20      	cmp	r3, #32
 8005916:	d107      	bne.n	8005928 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f06f 0220 	mvn.w	r2, #32
 8005920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 fd18 	bl	8006358 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005928:	bf00      	nop
 800592a:	3708      	adds	r7, #8
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800593c:	2300      	movs	r3, #0
 800593e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005946:	2b01      	cmp	r3, #1
 8005948:	d101      	bne.n	800594e <HAL_TIM_OC_ConfigChannel+0x1e>
 800594a:	2302      	movs	r3, #2
 800594c:	e048      	b.n	80059e0 <HAL_TIM_OC_ConfigChannel+0xb0>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b0c      	cmp	r3, #12
 800595a:	d839      	bhi.n	80059d0 <HAL_TIM_OC_ConfigChannel+0xa0>
 800595c:	a201      	add	r2, pc, #4	; (adr r2, 8005964 <HAL_TIM_OC_ConfigChannel+0x34>)
 800595e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005962:	bf00      	nop
 8005964:	08005999 	.word	0x08005999
 8005968:	080059d1 	.word	0x080059d1
 800596c:	080059d1 	.word	0x080059d1
 8005970:	080059d1 	.word	0x080059d1
 8005974:	080059a7 	.word	0x080059a7
 8005978:	080059d1 	.word	0x080059d1
 800597c:	080059d1 	.word	0x080059d1
 8005980:	080059d1 	.word	0x080059d1
 8005984:	080059b5 	.word	0x080059b5
 8005988:	080059d1 	.word	0x080059d1
 800598c:	080059d1 	.word	0x080059d1
 8005990:	080059d1 	.word	0x080059d1
 8005994:	080059c3 	.word	0x080059c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68b9      	ldr	r1, [r7, #8]
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 fa3a 	bl	8005e18 <TIM_OC1_SetConfig>
      break;
 80059a4:	e017      	b.n	80059d6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68b9      	ldr	r1, [r7, #8]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 fa99 	bl	8005ee4 <TIM_OC2_SetConfig>
      break;
 80059b2:	e010      	b.n	80059d6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68b9      	ldr	r1, [r7, #8]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 fafc 	bl	8005fb8 <TIM_OC3_SetConfig>
      break;
 80059c0:	e009      	b.n	80059d6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68b9      	ldr	r1, [r7, #8]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f000 fb5f 	bl	800608c <TIM_OC4_SetConfig>
      break;
 80059ce:	e002      	b.n	80059d6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	75fb      	strb	r3, [r7, #23]
      break;
 80059d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059de:	7dfb      	ldrb	r3, [r7, #23]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3718      	adds	r7, #24
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059f4:	2300      	movs	r3, #0
 80059f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d101      	bne.n	8005a06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a02:	2302      	movs	r3, #2
 8005a04:	e0ae      	b.n	8005b64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b0c      	cmp	r3, #12
 8005a12:	f200 809f 	bhi.w	8005b54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a16:	a201      	add	r2, pc, #4	; (adr r2, 8005a1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1c:	08005a51 	.word	0x08005a51
 8005a20:	08005b55 	.word	0x08005b55
 8005a24:	08005b55 	.word	0x08005b55
 8005a28:	08005b55 	.word	0x08005b55
 8005a2c:	08005a91 	.word	0x08005a91
 8005a30:	08005b55 	.word	0x08005b55
 8005a34:	08005b55 	.word	0x08005b55
 8005a38:	08005b55 	.word	0x08005b55
 8005a3c:	08005ad3 	.word	0x08005ad3
 8005a40:	08005b55 	.word	0x08005b55
 8005a44:	08005b55 	.word	0x08005b55
 8005a48:	08005b55 	.word	0x08005b55
 8005a4c:	08005b13 	.word	0x08005b13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68b9      	ldr	r1, [r7, #8]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 f9de 	bl	8005e18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	699a      	ldr	r2, [r3, #24]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f042 0208 	orr.w	r2, r2, #8
 8005a6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	699a      	ldr	r2, [r3, #24]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 0204 	bic.w	r2, r2, #4
 8005a7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6999      	ldr	r1, [r3, #24]
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	691a      	ldr	r2, [r3, #16]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	619a      	str	r2, [r3, #24]
      break;
 8005a8e:	e064      	b.n	8005b5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68b9      	ldr	r1, [r7, #8]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 fa24 	bl	8005ee4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	699a      	ldr	r2, [r3, #24]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	699a      	ldr	r2, [r3, #24]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6999      	ldr	r1, [r3, #24]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	021a      	lsls	r2, r3, #8
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	619a      	str	r2, [r3, #24]
      break;
 8005ad0:	e043      	b.n	8005b5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68b9      	ldr	r1, [r7, #8]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f000 fa6d 	bl	8005fb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	69da      	ldr	r2, [r3, #28]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f042 0208 	orr.w	r2, r2, #8
 8005aec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69da      	ldr	r2, [r3, #28]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f022 0204 	bic.w	r2, r2, #4
 8005afc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69d9      	ldr	r1, [r3, #28]
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	691a      	ldr	r2, [r3, #16]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	61da      	str	r2, [r3, #28]
      break;
 8005b10:	e023      	b.n	8005b5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68b9      	ldr	r1, [r7, #8]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 fab7 	bl	800608c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69da      	ldr	r2, [r3, #28]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69da      	ldr	r2, [r3, #28]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	69d9      	ldr	r1, [r3, #28]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	021a      	lsls	r2, r3, #8
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	61da      	str	r2, [r3, #28]
      break;
 8005b52:	e002      	b.n	8005b5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	75fb      	strb	r3, [r7, #23]
      break;
 8005b58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3718      	adds	r7, #24
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d101      	bne.n	8005b88 <HAL_TIM_ConfigClockSource+0x1c>
 8005b84:	2302      	movs	r3, #2
 8005b86:	e0b4      	b.n	8005cf2 <HAL_TIM_ConfigClockSource+0x186>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2202      	movs	r2, #2
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ba6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bc0:	d03e      	beq.n	8005c40 <HAL_TIM_ConfigClockSource+0xd4>
 8005bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bc6:	f200 8087 	bhi.w	8005cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bce:	f000 8086 	beq.w	8005cde <HAL_TIM_ConfigClockSource+0x172>
 8005bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bd6:	d87f      	bhi.n	8005cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bd8:	2b70      	cmp	r3, #112	; 0x70
 8005bda:	d01a      	beq.n	8005c12 <HAL_TIM_ConfigClockSource+0xa6>
 8005bdc:	2b70      	cmp	r3, #112	; 0x70
 8005bde:	d87b      	bhi.n	8005cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005be0:	2b60      	cmp	r3, #96	; 0x60
 8005be2:	d050      	beq.n	8005c86 <HAL_TIM_ConfigClockSource+0x11a>
 8005be4:	2b60      	cmp	r3, #96	; 0x60
 8005be6:	d877      	bhi.n	8005cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005be8:	2b50      	cmp	r3, #80	; 0x50
 8005bea:	d03c      	beq.n	8005c66 <HAL_TIM_ConfigClockSource+0xfa>
 8005bec:	2b50      	cmp	r3, #80	; 0x50
 8005bee:	d873      	bhi.n	8005cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bf0:	2b40      	cmp	r3, #64	; 0x40
 8005bf2:	d058      	beq.n	8005ca6 <HAL_TIM_ConfigClockSource+0x13a>
 8005bf4:	2b40      	cmp	r3, #64	; 0x40
 8005bf6:	d86f      	bhi.n	8005cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bf8:	2b30      	cmp	r3, #48	; 0x30
 8005bfa:	d064      	beq.n	8005cc6 <HAL_TIM_ConfigClockSource+0x15a>
 8005bfc:	2b30      	cmp	r3, #48	; 0x30
 8005bfe:	d86b      	bhi.n	8005cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005c00:	2b20      	cmp	r3, #32
 8005c02:	d060      	beq.n	8005cc6 <HAL_TIM_ConfigClockSource+0x15a>
 8005c04:	2b20      	cmp	r3, #32
 8005c06:	d867      	bhi.n	8005cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d05c      	beq.n	8005cc6 <HAL_TIM_ConfigClockSource+0x15a>
 8005c0c:	2b10      	cmp	r3, #16
 8005c0e:	d05a      	beq.n	8005cc6 <HAL_TIM_ConfigClockSource+0x15a>
 8005c10:	e062      	b.n	8005cd8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6818      	ldr	r0, [r3, #0]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	6899      	ldr	r1, [r3, #8]
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	685a      	ldr	r2, [r3, #4]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	f000 faf8 	bl	8006216 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	609a      	str	r2, [r3, #8]
      break;
 8005c3e:	e04f      	b.n	8005ce0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6818      	ldr	r0, [r3, #0]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	6899      	ldr	r1, [r3, #8]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	f000 fae1 	bl	8006216 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689a      	ldr	r2, [r3, #8]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c62:	609a      	str	r2, [r3, #8]
      break;
 8005c64:	e03c      	b.n	8005ce0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6818      	ldr	r0, [r3, #0]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	6859      	ldr	r1, [r3, #4]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	461a      	mov	r2, r3
 8005c74:	f000 fa58 	bl	8006128 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2150      	movs	r1, #80	; 0x50
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f000 faaf 	bl	80061e2 <TIM_ITRx_SetConfig>
      break;
 8005c84:	e02c      	b.n	8005ce0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6818      	ldr	r0, [r3, #0]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	6859      	ldr	r1, [r3, #4]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	461a      	mov	r2, r3
 8005c94:	f000 fa76 	bl	8006184 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2160      	movs	r1, #96	; 0x60
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f000 fa9f 	bl	80061e2 <TIM_ITRx_SetConfig>
      break;
 8005ca4:	e01c      	b.n	8005ce0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6818      	ldr	r0, [r3, #0]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	6859      	ldr	r1, [r3, #4]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	f000 fa38 	bl	8006128 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2140      	movs	r1, #64	; 0x40
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f000 fa8f 	bl	80061e2 <TIM_ITRx_SetConfig>
      break;
 8005cc4:	e00c      	b.n	8005ce0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4619      	mov	r1, r3
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	f000 fa86 	bl	80061e2 <TIM_ITRx_SetConfig>
      break;
 8005cd6:	e003      	b.n	8005ce0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	73fb      	strb	r3, [r7, #15]
      break;
 8005cdc:	e000      	b.n	8005ce0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005cde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b083      	sub	sp, #12
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005d02:	bf00      	nop
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bc80      	pop	{r7}
 8005d0a:	4770      	bx	lr

08005d0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bc80      	pop	{r7}
 8005d1c:	4770      	bx	lr

08005d1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b083      	sub	sp, #12
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d26:	bf00      	nop
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bc80      	pop	{r7}
 8005d2e:	4770      	bx	lr

08005d30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bc80      	pop	{r7}
 8005d40:	4770      	bx	lr

08005d42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d4a:	bf00      	nop
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bc80      	pop	{r7}
 8005d52:	4770      	bx	lr

08005d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a29      	ldr	r2, [pc, #164]	; (8005e0c <TIM_Base_SetConfig+0xb8>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d00b      	beq.n	8005d84 <TIM_Base_SetConfig+0x30>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d72:	d007      	beq.n	8005d84 <TIM_Base_SetConfig+0x30>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a26      	ldr	r2, [pc, #152]	; (8005e10 <TIM_Base_SetConfig+0xbc>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d003      	beq.n	8005d84 <TIM_Base_SetConfig+0x30>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a25      	ldr	r2, [pc, #148]	; (8005e14 <TIM_Base_SetConfig+0xc0>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d108      	bne.n	8005d96 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a1c      	ldr	r2, [pc, #112]	; (8005e0c <TIM_Base_SetConfig+0xb8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d00b      	beq.n	8005db6 <TIM_Base_SetConfig+0x62>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da4:	d007      	beq.n	8005db6 <TIM_Base_SetConfig+0x62>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a19      	ldr	r2, [pc, #100]	; (8005e10 <TIM_Base_SetConfig+0xbc>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d003      	beq.n	8005db6 <TIM_Base_SetConfig+0x62>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a18      	ldr	r2, [pc, #96]	; (8005e14 <TIM_Base_SetConfig+0xc0>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d108      	bne.n	8005dc8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	689a      	ldr	r2, [r3, #8]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a07      	ldr	r2, [pc, #28]	; (8005e0c <TIM_Base_SetConfig+0xb8>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d103      	bne.n	8005dfc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	691a      	ldr	r2, [r3, #16]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	615a      	str	r2, [r3, #20]
}
 8005e02:	bf00      	nop
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bc80      	pop	{r7}
 8005e0a:	4770      	bx	lr
 8005e0c:	40012c00 	.word	0x40012c00
 8005e10:	40000400 	.word	0x40000400
 8005e14:	40000800 	.word	0x40000800

08005e18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	f023 0201 	bic.w	r2, r3, #1
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 0303 	bic.w	r3, r3, #3
 8005e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f023 0302 	bic.w	r3, r3, #2
 8005e60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a1c      	ldr	r2, [pc, #112]	; (8005ee0 <TIM_OC1_SetConfig+0xc8>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d10c      	bne.n	8005e8e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	f023 0308 	bic.w	r3, r3, #8
 8005e7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f023 0304 	bic.w	r3, r3, #4
 8005e8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a13      	ldr	r2, [pc, #76]	; (8005ee0 <TIM_OC1_SetConfig+0xc8>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d111      	bne.n	8005eba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	685a      	ldr	r2, [r3, #4]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	621a      	str	r2, [r3, #32]
}
 8005ed4:	bf00      	nop
 8005ed6:	371c      	adds	r7, #28
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bc80      	pop	{r7}
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	40012c00 	.word	0x40012c00

08005ee4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	f023 0210 	bic.w	r2, r3, #16
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	021b      	lsls	r3, r3, #8
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f023 0320 	bic.w	r3, r3, #32
 8005f2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	011b      	lsls	r3, r3, #4
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a1d      	ldr	r2, [pc, #116]	; (8005fb4 <TIM_OC2_SetConfig+0xd0>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d10d      	bne.n	8005f60 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	011b      	lsls	r3, r3, #4
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a14      	ldr	r2, [pc, #80]	; (8005fb4 <TIM_OC2_SetConfig+0xd0>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d113      	bne.n	8005f90 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	621a      	str	r2, [r3, #32]
}
 8005faa:	bf00      	nop
 8005fac:	371c      	adds	r7, #28
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bc80      	pop	{r7}
 8005fb2:	4770      	bx	lr
 8005fb4:	40012c00 	.word	0x40012c00

08005fb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b087      	sub	sp, #28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 0303 	bic.w	r3, r3, #3
 8005fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	021b      	lsls	r3, r3, #8
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	4313      	orrs	r3, r2
 800600c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a1d      	ldr	r2, [pc, #116]	; (8006088 <TIM_OC3_SetConfig+0xd0>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d10d      	bne.n	8006032 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800601c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	021b      	lsls	r3, r3, #8
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	4313      	orrs	r3, r2
 8006028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006030:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a14      	ldr	r2, [pc, #80]	; (8006088 <TIM_OC3_SetConfig+0xd0>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d113      	bne.n	8006062 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	4313      	orrs	r3, r2
 8006054:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	011b      	lsls	r3, r3, #4
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	4313      	orrs	r3, r2
 8006060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	621a      	str	r2, [r3, #32]
}
 800607c:	bf00      	nop
 800607e:	371c      	adds	r7, #28
 8006080:	46bd      	mov	sp, r7
 8006082:	bc80      	pop	{r7}
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	40012c00 	.word	0x40012c00

0800608c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800608c:	b480      	push	{r7}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	69db      	ldr	r3, [r3, #28]
 80060b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	021b      	lsls	r3, r3, #8
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	031b      	lsls	r3, r3, #12
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a0f      	ldr	r2, [pc, #60]	; (8006124 <TIM_OC4_SetConfig+0x98>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d109      	bne.n	8006100 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	019b      	lsls	r3, r3, #6
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	621a      	str	r2, [r3, #32]
}
 800611a:	bf00      	nop
 800611c:	371c      	adds	r7, #28
 800611e:	46bd      	mov	sp, r7
 8006120:	bc80      	pop	{r7}
 8006122:	4770      	bx	lr
 8006124:	40012c00 	.word	0x40012c00

08006128 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006128:	b480      	push	{r7}
 800612a:	b087      	sub	sp, #28
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	f023 0201 	bic.w	r2, r3, #1
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	011b      	lsls	r3, r3, #4
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	4313      	orrs	r3, r2
 800615c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f023 030a 	bic.w	r3, r3, #10
 8006164:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	4313      	orrs	r3, r2
 800616c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	621a      	str	r2, [r3, #32]
}
 800617a:	bf00      	nop
 800617c:	371c      	adds	r7, #28
 800617e:	46bd      	mov	sp, r7
 8006180:	bc80      	pop	{r7}
 8006182:	4770      	bx	lr

08006184 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006184:	b480      	push	{r7}
 8006186:	b087      	sub	sp, #28
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6a1b      	ldr	r3, [r3, #32]
 8006194:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	f023 0210 	bic.w	r2, r3, #16
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	031b      	lsls	r3, r3, #12
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061c0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	011b      	lsls	r3, r3, #4
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	621a      	str	r2, [r3, #32]
}
 80061d8:	bf00      	nop
 80061da:	371c      	adds	r7, #28
 80061dc:	46bd      	mov	sp, r7
 80061de:	bc80      	pop	{r7}
 80061e0:	4770      	bx	lr

080061e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b085      	sub	sp, #20
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
 80061ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	4313      	orrs	r3, r2
 8006200:	f043 0307 	orr.w	r3, r3, #7
 8006204:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	609a      	str	r2, [r3, #8]
}
 800620c:	bf00      	nop
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	bc80      	pop	{r7}
 8006214:	4770      	bx	lr

08006216 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006216:	b480      	push	{r7}
 8006218:	b087      	sub	sp, #28
 800621a:	af00      	add	r7, sp, #0
 800621c:	60f8      	str	r0, [r7, #12]
 800621e:	60b9      	str	r1, [r7, #8]
 8006220:	607a      	str	r2, [r7, #4]
 8006222:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006230:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	021a      	lsls	r2, r3, #8
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	431a      	orrs	r2, r3
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	4313      	orrs	r3, r2
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	4313      	orrs	r3, r2
 8006242:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	609a      	str	r2, [r3, #8]
}
 800624a:	bf00      	nop
 800624c:	371c      	adds	r7, #28
 800624e:	46bd      	mov	sp, r7
 8006250:	bc80      	pop	{r7}
 8006252:	4770      	bx	lr

08006254 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006254:	b480      	push	{r7}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	f003 031f 	and.w	r3, r3, #31
 8006266:	2201      	movs	r2, #1
 8006268:	fa02 f303 	lsl.w	r3, r2, r3
 800626c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6a1a      	ldr	r2, [r3, #32]
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	43db      	mvns	r3, r3
 8006276:	401a      	ands	r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6a1a      	ldr	r2, [r3, #32]
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	f003 031f 	and.w	r3, r3, #31
 8006286:	6879      	ldr	r1, [r7, #4]
 8006288:	fa01 f303 	lsl.w	r3, r1, r3
 800628c:	431a      	orrs	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	621a      	str	r2, [r3, #32]
}
 8006292:	bf00      	nop
 8006294:	371c      	adds	r7, #28
 8006296:	46bd      	mov	sp, r7
 8006298:	bc80      	pop	{r7}
 800629a:	4770      	bx	lr

0800629c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d101      	bne.n	80062b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062b0:	2302      	movs	r3, #2
 80062b2:	e046      	b.n	8006342 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2202      	movs	r2, #2
 80062c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a16      	ldr	r2, [pc, #88]	; (800634c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d00e      	beq.n	8006316 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006300:	d009      	beq.n	8006316 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a12      	ldr	r2, [pc, #72]	; (8006350 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d004      	beq.n	8006316 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a10      	ldr	r2, [pc, #64]	; (8006354 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d10c      	bne.n	8006330 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800631c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	4313      	orrs	r3, r2
 8006326:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3714      	adds	r7, #20
 8006346:	46bd      	mov	sp, r7
 8006348:	bc80      	pop	{r7}
 800634a:	4770      	bx	lr
 800634c:	40012c00 	.word	0x40012c00
 8006350:	40000400 	.word	0x40000400
 8006354:	40000800 	.word	0x40000800

08006358 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	bc80      	pop	{r7}
 8006368:	4770      	bx	lr

0800636a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800636a:	b480      	push	{r7}
 800636c:	b083      	sub	sp, #12
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006372:	bf00      	nop
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	bc80      	pop	{r7}
 800637a:	4770      	bx	lr

0800637c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e042      	b.n	8006414 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d106      	bne.n	80063a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f7fd f81a 	bl	80033dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2224      	movs	r2, #36	; 0x24
 80063ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fdc5 	bl	8006f50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	691a      	ldr	r2, [r3, #16]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	695a      	ldr	r2, [r3, #20]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68da      	ldr	r2, [r3, #12]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2220      	movs	r2, #32
 8006400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2220      	movs	r2, #32
 8006408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3708      	adds	r7, #8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b08a      	sub	sp, #40	; 0x28
 8006420:	af02      	add	r7, sp, #8
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	603b      	str	r3, [r7, #0]
 8006428:	4613      	mov	r3, r2
 800642a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800642c:	2300      	movs	r3, #0
 800642e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b20      	cmp	r3, #32
 800643a:	d16d      	bne.n	8006518 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d002      	beq.n	8006448 <HAL_UART_Transmit+0x2c>
 8006442:	88fb      	ldrh	r3, [r7, #6]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e066      	b.n	800651a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2221      	movs	r2, #33	; 0x21
 8006456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800645a:	f7fd f8cd 	bl	80035f8 <HAL_GetTick>
 800645e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	88fa      	ldrh	r2, [r7, #6]
 8006464:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	88fa      	ldrh	r2, [r7, #6]
 800646a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006474:	d108      	bne.n	8006488 <HAL_UART_Transmit+0x6c>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d104      	bne.n	8006488 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800647e:	2300      	movs	r3, #0
 8006480:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	61bb      	str	r3, [r7, #24]
 8006486:	e003      	b.n	8006490 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800648c:	2300      	movs	r3, #0
 800648e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006490:	e02a      	b.n	80064e8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	2200      	movs	r2, #0
 800649a:	2180      	movs	r1, #128	; 0x80
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f000 fb14 	bl	8006aca <UART_WaitOnFlagUntilTimeout>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d001      	beq.n	80064ac <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e036      	b.n	800651a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10b      	bne.n	80064ca <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	881b      	ldrh	r3, [r3, #0]
 80064b6:	461a      	mov	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	3302      	adds	r3, #2
 80064c6:	61bb      	str	r3, [r7, #24]
 80064c8:	e007      	b.n	80064da <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	781a      	ldrb	r2, [r3, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	3301      	adds	r3, #1
 80064d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064de:	b29b      	uxth	r3, r3
 80064e0:	3b01      	subs	r3, #1
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1cf      	bne.n	8006492 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	2200      	movs	r2, #0
 80064fa:	2140      	movs	r1, #64	; 0x40
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f000 fae4 	bl	8006aca <UART_WaitOnFlagUntilTimeout>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e006      	b.n	800651a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2220      	movs	r2, #32
 8006510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006514:	2300      	movs	r3, #0
 8006516:	e000      	b.n	800651a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006518:	2302      	movs	r3, #2
  }
}
 800651a:	4618      	mov	r0, r3
 800651c:	3720      	adds	r7, #32
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b084      	sub	sp, #16
 8006526:	af00      	add	r7, sp, #0
 8006528:	60f8      	str	r0, [r7, #12]
 800652a:	60b9      	str	r1, [r7, #8]
 800652c:	4613      	mov	r3, r2
 800652e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b20      	cmp	r3, #32
 800653a:	d112      	bne.n	8006562 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d002      	beq.n	8006548 <HAL_UART_Receive_IT+0x26>
 8006542:	88fb      	ldrh	r3, [r7, #6]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e00b      	b.n	8006564 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006552:	88fb      	ldrh	r3, [r7, #6]
 8006554:	461a      	mov	r2, r3
 8006556:	68b9      	ldr	r1, [r7, #8]
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f000 fb24 	bl	8006ba6 <UART_Start_Receive_IT>
 800655e:	4603      	mov	r3, r0
 8006560:	e000      	b.n	8006564 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006562:	2302      	movs	r3, #2
  }
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b0ba      	sub	sp, #232	; 0xe8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006592:	2300      	movs	r3, #0
 8006594:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006598:	2300      	movs	r3, #0
 800659a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800659e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065a2:	f003 030f 	and.w	r3, r3, #15
 80065a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80065aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10f      	bne.n	80065d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065b6:	f003 0320 	and.w	r3, r3, #32
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d009      	beq.n	80065d2 <HAL_UART_IRQHandler+0x66>
 80065be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065c2:	f003 0320 	and.w	r3, r3, #32
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d003      	beq.n	80065d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 fc01 	bl	8006dd2 <UART_Receive_IT>
      return;
 80065d0:	e25b      	b.n	8006a8a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80065d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f000 80de 	beq.w	8006798 <HAL_UART_IRQHandler+0x22c>
 80065dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d106      	bne.n	80065f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80065e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 80d1 	beq.w	8006798 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80065f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00b      	beq.n	800661a <HAL_UART_IRQHandler+0xae>
 8006602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800660a:	2b00      	cmp	r3, #0
 800660c:	d005      	beq.n	800661a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006612:	f043 0201 	orr.w	r2, r3, #1
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800661a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800661e:	f003 0304 	and.w	r3, r3, #4
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00b      	beq.n	800663e <HAL_UART_IRQHandler+0xd2>
 8006626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	2b00      	cmp	r3, #0
 8006630:	d005      	beq.n	800663e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006636:	f043 0202 	orr.w	r2, r3, #2
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800663e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00b      	beq.n	8006662 <HAL_UART_IRQHandler+0xf6>
 800664a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b00      	cmp	r3, #0
 8006654:	d005      	beq.n	8006662 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800665a:	f043 0204 	orr.w	r2, r3, #4
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006666:	f003 0308 	and.w	r3, r3, #8
 800666a:	2b00      	cmp	r3, #0
 800666c:	d011      	beq.n	8006692 <HAL_UART_IRQHandler+0x126>
 800666e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006672:	f003 0320 	and.w	r3, r3, #32
 8006676:	2b00      	cmp	r3, #0
 8006678:	d105      	bne.n	8006686 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800667a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	d005      	beq.n	8006692 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668a:	f043 0208 	orr.w	r2, r3, #8
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006696:	2b00      	cmp	r3, #0
 8006698:	f000 81f2 	beq.w	8006a80 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800669c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a0:	f003 0320 	and.w	r3, r3, #32
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d008      	beq.n	80066ba <HAL_UART_IRQHandler+0x14e>
 80066a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ac:	f003 0320 	and.w	r3, r3, #32
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d002      	beq.n	80066ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 fb8c 	bl	8006dd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	bf14      	ite	ne
 80066c8:	2301      	movne	r3, #1
 80066ca:	2300      	moveq	r3, #0
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d6:	f003 0308 	and.w	r3, r3, #8
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d103      	bne.n	80066e6 <HAL_UART_IRQHandler+0x17a>
 80066de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d04f      	beq.n	8006786 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fa96 	bl	8006c18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d041      	beq.n	800677e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	3314      	adds	r3, #20
 8006700:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006704:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006708:	e853 3f00 	ldrex	r3, [r3]
 800670c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006710:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006718:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	3314      	adds	r3, #20
 8006722:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006726:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800672a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006732:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006736:	e841 2300 	strex	r3, r2, [r1]
 800673a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800673e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1d9      	bne.n	80066fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800674a:	2b00      	cmp	r3, #0
 800674c:	d013      	beq.n	8006776 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006752:	4a7e      	ldr	r2, [pc, #504]	; (800694c <HAL_UART_IRQHandler+0x3e0>)
 8006754:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675a:	4618      	mov	r0, r3
 800675c:	f7fd fd7c 	bl	8004258 <HAL_DMA_Abort_IT>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d016      	beq.n	8006794 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800676a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006770:	4610      	mov	r0, r2
 8006772:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006774:	e00e      	b.n	8006794 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f993 	bl	8006aa2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800677c:	e00a      	b.n	8006794 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f98f 	bl	8006aa2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006784:	e006      	b.n	8006794 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f98b 	bl	8006aa2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006792:	e175      	b.n	8006a80 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006794:	bf00      	nop
    return;
 8006796:	e173      	b.n	8006a80 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679c:	2b01      	cmp	r3, #1
 800679e:	f040 814f 	bne.w	8006a40 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80067a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a6:	f003 0310 	and.w	r3, r3, #16
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f000 8148 	beq.w	8006a40 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80067b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b4:	f003 0310 	and.w	r3, r3, #16
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f000 8141 	beq.w	8006a40 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80067be:	2300      	movs	r3, #0
 80067c0:	60bb      	str	r3, [r7, #8]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	60bb      	str	r3, [r7, #8]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	60bb      	str	r3, [r7, #8]
 80067d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f000 80b6 	beq.w	8006950 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 8145 	beq.w	8006a84 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006802:	429a      	cmp	r2, r3
 8006804:	f080 813e 	bcs.w	8006a84 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800680e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	2b20      	cmp	r3, #32
 8006818:	f000 8088 	beq.w	800692c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	330c      	adds	r3, #12
 8006822:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006826:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800682a:	e853 3f00 	ldrex	r3, [r3]
 800682e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006832:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006836:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800683a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	330c      	adds	r3, #12
 8006844:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006848:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800684c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006850:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006854:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006858:	e841 2300 	strex	r3, r2, [r1]
 800685c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006860:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1d9      	bne.n	800681c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	3314      	adds	r3, #20
 800686e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006870:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006872:	e853 3f00 	ldrex	r3, [r3]
 8006876:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006878:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800687a:	f023 0301 	bic.w	r3, r3, #1
 800687e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	3314      	adds	r3, #20
 8006888:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800688c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006890:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006892:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006894:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006898:	e841 2300 	strex	r3, r2, [r1]
 800689c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800689e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1e1      	bne.n	8006868 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	3314      	adds	r3, #20
 80068aa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068ae:	e853 3f00 	ldrex	r3, [r3]
 80068b2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80068b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	3314      	adds	r3, #20
 80068c4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80068c8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80068ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068cc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80068ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80068d0:	e841 2300 	strex	r3, r2, [r1]
 80068d4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80068d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1e3      	bne.n	80068a4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2220      	movs	r2, #32
 80068e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	330c      	adds	r3, #12
 80068f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068f4:	e853 3f00 	ldrex	r3, [r3]
 80068f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80068fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068fc:	f023 0310 	bic.w	r3, r3, #16
 8006900:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	330c      	adds	r3, #12
 800690a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800690e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006910:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006912:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006914:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006916:	e841 2300 	strex	r3, r2, [r1]
 800691a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800691c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1e3      	bne.n	80068ea <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006926:	4618      	mov	r0, r3
 8006928:	f7fd fc5a 	bl	80041e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2202      	movs	r2, #2
 8006930:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800693a:	b29b      	uxth	r3, r3
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	b29b      	uxth	r3, r3
 8006940:	4619      	mov	r1, r3
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f8b6 	bl	8006ab4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006948:	e09c      	b.n	8006a84 <HAL_UART_IRQHandler+0x518>
 800694a:	bf00      	nop
 800694c:	08006cdd 	.word	0x08006cdd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006958:	b29b      	uxth	r3, r3
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006964:	b29b      	uxth	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	f000 808e 	beq.w	8006a88 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800696c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 8089 	beq.w	8006a88 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	330c      	adds	r3, #12
 800697c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006980:	e853 3f00 	ldrex	r3, [r3]
 8006984:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006988:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800698c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	330c      	adds	r3, #12
 8006996:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800699a:	647a      	str	r2, [r7, #68]	; 0x44
 800699c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069a2:	e841 2300 	strex	r3, r2, [r1]
 80069a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1e3      	bne.n	8006976 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	3314      	adds	r3, #20
 80069b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b8:	e853 3f00 	ldrex	r3, [r3]
 80069bc:	623b      	str	r3, [r7, #32]
   return(result);
 80069be:	6a3b      	ldr	r3, [r7, #32]
 80069c0:	f023 0301 	bic.w	r3, r3, #1
 80069c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	3314      	adds	r3, #20
 80069ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80069d2:	633a      	str	r2, [r7, #48]	; 0x30
 80069d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069da:	e841 2300 	strex	r3, r2, [r1]
 80069de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1e3      	bne.n	80069ae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2220      	movs	r2, #32
 80069ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	330c      	adds	r3, #12
 80069fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	e853 3f00 	ldrex	r3, [r3]
 8006a02:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 0310 	bic.w	r3, r3, #16
 8006a0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	330c      	adds	r3, #12
 8006a14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006a18:	61fa      	str	r2, [r7, #28]
 8006a1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1c:	69b9      	ldr	r1, [r7, #24]
 8006a1e:	69fa      	ldr	r2, [r7, #28]
 8006a20:	e841 2300 	strex	r3, r2, [r1]
 8006a24:	617b      	str	r3, [r7, #20]
   return(result);
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1e3      	bne.n	80069f4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2202      	movs	r2, #2
 8006a30:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a36:	4619      	mov	r1, r3
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f83b 	bl	8006ab4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a3e:	e023      	b.n	8006a88 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d009      	beq.n	8006a60 <HAL_UART_IRQHandler+0x4f4>
 8006a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d003      	beq.n	8006a60 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f953 	bl	8006d04 <UART_Transmit_IT>
    return;
 8006a5e:	e014      	b.n	8006a8a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00e      	beq.n	8006a8a <HAL_UART_IRQHandler+0x51e>
 8006a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d008      	beq.n	8006a8a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f992 	bl	8006da2 <UART_EndTransmit_IT>
    return;
 8006a7e:	e004      	b.n	8006a8a <HAL_UART_IRQHandler+0x51e>
    return;
 8006a80:	bf00      	nop
 8006a82:	e002      	b.n	8006a8a <HAL_UART_IRQHandler+0x51e>
      return;
 8006a84:	bf00      	nop
 8006a86:	e000      	b.n	8006a8a <HAL_UART_IRQHandler+0x51e>
      return;
 8006a88:	bf00      	nop
  }
}
 8006a8a:	37e8      	adds	r7, #232	; 0xe8
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bc80      	pop	{r7}
 8006aa0:	4770      	bx	lr

08006aa2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b083      	sub	sp, #12
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006aaa:	bf00      	nop
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bc80      	pop	{r7}
 8006ab2:	4770      	bx	lr

08006ab4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	460b      	mov	r3, r1
 8006abe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ac0:	bf00      	nop
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bc80      	pop	{r7}
 8006ac8:	4770      	bx	lr

08006aca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b090      	sub	sp, #64	; 0x40
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	60f8      	str	r0, [r7, #12]
 8006ad2:	60b9      	str	r1, [r7, #8]
 8006ad4:	603b      	str	r3, [r7, #0]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ada:	e050      	b.n	8006b7e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae2:	d04c      	beq.n	8006b7e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d007      	beq.n	8006afa <UART_WaitOnFlagUntilTimeout+0x30>
 8006aea:	f7fc fd85 	bl	80035f8 <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d241      	bcs.n	8006b7e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	330c      	adds	r3, #12
 8006b00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b04:	e853 3f00 	ldrex	r3, [r3]
 8006b08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	330c      	adds	r3, #12
 8006b18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b1a:	637a      	str	r2, [r7, #52]	; 0x34
 8006b1c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b22:	e841 2300 	strex	r3, r2, [r1]
 8006b26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1e5      	bne.n	8006afa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	3314      	adds	r3, #20
 8006b34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	e853 3f00 	ldrex	r3, [r3]
 8006b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f023 0301 	bic.w	r3, r3, #1
 8006b44:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	3314      	adds	r3, #20
 8006b4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b4e:	623a      	str	r2, [r7, #32]
 8006b50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b52:	69f9      	ldr	r1, [r7, #28]
 8006b54:	6a3a      	ldr	r2, [r7, #32]
 8006b56:	e841 2300 	strex	r3, r2, [r1]
 8006b5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1e5      	bne.n	8006b2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2220      	movs	r2, #32
 8006b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e00f      	b.n	8006b9e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	4013      	ands	r3, r2
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	bf0c      	ite	eq
 8006b8e:	2301      	moveq	r3, #1
 8006b90:	2300      	movne	r3, #0
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	461a      	mov	r2, r3
 8006b96:	79fb      	ldrb	r3, [r7, #7]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d09f      	beq.n	8006adc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3740      	adds	r7, #64	; 0x40
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b085      	sub	sp, #20
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	60f8      	str	r0, [r7, #12]
 8006bae:	60b9      	str	r1, [r7, #8]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	88fa      	ldrh	r2, [r7, #6]
 8006bbe:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	88fa      	ldrh	r2, [r7, #6]
 8006bc4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2222      	movs	r2, #34	; 0x22
 8006bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d007      	beq.n	8006bec <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68da      	ldr	r2, [r3, #12]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bea:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	695a      	ldr	r2, [r3, #20]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f042 0201 	orr.w	r2, r2, #1
 8006bfa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68da      	ldr	r2, [r3, #12]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f042 0220 	orr.w	r2, r2, #32
 8006c0a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3714      	adds	r7, #20
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bc80      	pop	{r7}
 8006c16:	4770      	bx	lr

08006c18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b095      	sub	sp, #84	; 0x54
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	330c      	adds	r3, #12
 8006c26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c2a:	e853 3f00 	ldrex	r3, [r3]
 8006c2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	330c      	adds	r3, #12
 8006c3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c40:	643a      	str	r2, [r7, #64]	; 0x40
 8006c42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c48:	e841 2300 	strex	r3, r2, [r1]
 8006c4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1e5      	bne.n	8006c20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	3314      	adds	r3, #20
 8006c5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	e853 3f00 	ldrex	r3, [r3]
 8006c62:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	f023 0301 	bic.w	r3, r3, #1
 8006c6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	3314      	adds	r3, #20
 8006c72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c7c:	e841 2300 	strex	r3, r2, [r1]
 8006c80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1e5      	bne.n	8006c54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d119      	bne.n	8006cc4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	330c      	adds	r3, #12
 8006c96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	e853 3f00 	ldrex	r3, [r3]
 8006c9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	f023 0310 	bic.w	r3, r3, #16
 8006ca6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	330c      	adds	r3, #12
 8006cae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cb0:	61ba      	str	r2, [r7, #24]
 8006cb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb4:	6979      	ldr	r1, [r7, #20]
 8006cb6:	69ba      	ldr	r2, [r7, #24]
 8006cb8:	e841 2300 	strex	r3, r2, [r1]
 8006cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1e5      	bne.n	8006c90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006cd2:	bf00      	nop
 8006cd4:	3754      	adds	r7, #84	; 0x54
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bc80      	pop	{r7}
 8006cda:	4770      	bx	lr

08006cdc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f7ff fed3 	bl	8006aa2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cfc:	bf00      	nop
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b21      	cmp	r3, #33	; 0x21
 8006d16:	d13e      	bne.n	8006d96 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d20:	d114      	bne.n	8006d4c <UART_Transmit_IT+0x48>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d110      	bne.n	8006d4c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	461a      	mov	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d3e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a1b      	ldr	r3, [r3, #32]
 8006d44:	1c9a      	adds	r2, r3, #2
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	621a      	str	r2, [r3, #32]
 8006d4a:	e008      	b.n	8006d5e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a1b      	ldr	r3, [r3, #32]
 8006d50:	1c59      	adds	r1, r3, #1
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	6211      	str	r1, [r2, #32]
 8006d56:	781a      	ldrb	r2, [r3, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	3b01      	subs	r3, #1
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d10f      	bne.n	8006d92 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68da      	ldr	r2, [r3, #12]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d80:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68da      	ldr	r2, [r3, #12]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d90:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	e000      	b.n	8006d98 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d96:	2302      	movs	r3, #2
  }
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bc80      	pop	{r7}
 8006da0:	4770      	bx	lr

08006da2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b082      	sub	sp, #8
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68da      	ldr	r2, [r3, #12]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006db8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2220      	movs	r2, #32
 8006dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f7ff fe64 	bl	8006a90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b08c      	sub	sp, #48	; 0x30
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b22      	cmp	r3, #34	; 0x22
 8006de4:	f040 80ae 	bne.w	8006f44 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006df0:	d117      	bne.n	8006e22 <UART_Receive_IT+0x50>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d113      	bne.n	8006e22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1a:	1c9a      	adds	r2, r3, #2
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	629a      	str	r2, [r3, #40]	; 0x28
 8006e20:	e026      	b.n	8006e70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e34:	d007      	beq.n	8006e46 <UART_Receive_IT+0x74>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10a      	bne.n	8006e54 <UART_Receive_IT+0x82>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d106      	bne.n	8006e54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	b2da      	uxtb	r2, r3
 8006e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e50:	701a      	strb	r2, [r3, #0]
 8006e52:	e008      	b.n	8006e66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6a:	1c5a      	adds	r2, r3, #1
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	3b01      	subs	r3, #1
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d15d      	bne.n	8006f40 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68da      	ldr	r2, [r3, #12]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f022 0220 	bic.w	r2, r2, #32
 8006e92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68da      	ldr	r2, [r3, #12]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ea2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	695a      	ldr	r2, [r3, #20]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f022 0201 	bic.w	r2, r2, #1
 8006eb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d135      	bne.n	8006f36 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	330c      	adds	r3, #12
 8006ed6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	e853 3f00 	ldrex	r3, [r3]
 8006ede:	613b      	str	r3, [r7, #16]
   return(result);
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	f023 0310 	bic.w	r3, r3, #16
 8006ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	330c      	adds	r3, #12
 8006eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ef0:	623a      	str	r2, [r7, #32]
 8006ef2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef4:	69f9      	ldr	r1, [r7, #28]
 8006ef6:	6a3a      	ldr	r2, [r7, #32]
 8006ef8:	e841 2300 	strex	r3, r2, [r1]
 8006efc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1e5      	bne.n	8006ed0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0310 	and.w	r3, r3, #16
 8006f0e:	2b10      	cmp	r3, #16
 8006f10:	d10a      	bne.n	8006f28 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f12:	2300      	movs	r3, #0
 8006f14:	60fb      	str	r3, [r7, #12]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	60fb      	str	r3, [r7, #12]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	60fb      	str	r3, [r7, #12]
 8006f26:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7ff fdc0 	bl	8006ab4 <HAL_UARTEx_RxEventCallback>
 8006f34:	e002      	b.n	8006f3c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7fb fa10 	bl	800235c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	e002      	b.n	8006f46 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006f40:	2300      	movs	r3, #0
 8006f42:	e000      	b.n	8006f46 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006f44:	2302      	movs	r3, #2
  }
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3730      	adds	r7, #48	; 0x30
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
	...

08006f50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	68da      	ldr	r2, [r3, #12]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	689a      	ldr	r2, [r3, #8]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	431a      	orrs	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006f8a:	f023 030c 	bic.w	r3, r3, #12
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	6812      	ldr	r2, [r2, #0]
 8006f92:	68b9      	ldr	r1, [r7, #8]
 8006f94:	430b      	orrs	r3, r1
 8006f96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	695b      	ldr	r3, [r3, #20]
 8006f9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	699a      	ldr	r2, [r3, #24]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a2c      	ldr	r2, [pc, #176]	; (8007064 <UART_SetConfig+0x114>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d103      	bne.n	8006fc0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006fb8:	f7fe f88c 	bl	80050d4 <HAL_RCC_GetPCLK2Freq>
 8006fbc:	60f8      	str	r0, [r7, #12]
 8006fbe:	e002      	b.n	8006fc6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006fc0:	f7fe f874 	bl	80050ac <HAL_RCC_GetPCLK1Freq>
 8006fc4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	4413      	add	r3, r2
 8006fce:	009a      	lsls	r2, r3, #2
 8006fd0:	441a      	add	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fdc:	4a22      	ldr	r2, [pc, #136]	; (8007068 <UART_SetConfig+0x118>)
 8006fde:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe2:	095b      	lsrs	r3, r3, #5
 8006fe4:	0119      	lsls	r1, r3, #4
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	4613      	mov	r3, r2
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	4413      	add	r3, r2
 8006fee:	009a      	lsls	r2, r3, #2
 8006ff0:	441a      	add	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ffc:	4b1a      	ldr	r3, [pc, #104]	; (8007068 <UART_SetConfig+0x118>)
 8006ffe:	fba3 0302 	umull	r0, r3, r3, r2
 8007002:	095b      	lsrs	r3, r3, #5
 8007004:	2064      	movs	r0, #100	; 0x64
 8007006:	fb00 f303 	mul.w	r3, r0, r3
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	011b      	lsls	r3, r3, #4
 800700e:	3332      	adds	r3, #50	; 0x32
 8007010:	4a15      	ldr	r2, [pc, #84]	; (8007068 <UART_SetConfig+0x118>)
 8007012:	fba2 2303 	umull	r2, r3, r2, r3
 8007016:	095b      	lsrs	r3, r3, #5
 8007018:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800701c:	4419      	add	r1, r3
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	4613      	mov	r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	4413      	add	r3, r2
 8007026:	009a      	lsls	r2, r3, #2
 8007028:	441a      	add	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	fbb2 f2f3 	udiv	r2, r2, r3
 8007034:	4b0c      	ldr	r3, [pc, #48]	; (8007068 <UART_SetConfig+0x118>)
 8007036:	fba3 0302 	umull	r0, r3, r3, r2
 800703a:	095b      	lsrs	r3, r3, #5
 800703c:	2064      	movs	r0, #100	; 0x64
 800703e:	fb00 f303 	mul.w	r3, r0, r3
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	011b      	lsls	r3, r3, #4
 8007046:	3332      	adds	r3, #50	; 0x32
 8007048:	4a07      	ldr	r2, [pc, #28]	; (8007068 <UART_SetConfig+0x118>)
 800704a:	fba2 2303 	umull	r2, r3, r2, r3
 800704e:	095b      	lsrs	r3, r3, #5
 8007050:	f003 020f 	and.w	r2, r3, #15
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	440a      	add	r2, r1
 800705a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800705c:	bf00      	nop
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	40013800 	.word	0x40013800
 8007068:	51eb851f 	.word	0x51eb851f

0800706c <atof>:
 800706c:	2100      	movs	r1, #0
 800706e:	f001 babf 	b.w	80085f0 <strtod>
	...

08007074 <__errno>:
 8007074:	4b01      	ldr	r3, [pc, #4]	; (800707c <__errno+0x8>)
 8007076:	6818      	ldr	r0, [r3, #0]
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	20000010 	.word	0x20000010

08007080 <__libc_init_array>:
 8007080:	b570      	push	{r4, r5, r6, lr}
 8007082:	2600      	movs	r6, #0
 8007084:	4d0c      	ldr	r5, [pc, #48]	; (80070b8 <__libc_init_array+0x38>)
 8007086:	4c0d      	ldr	r4, [pc, #52]	; (80070bc <__libc_init_array+0x3c>)
 8007088:	1b64      	subs	r4, r4, r5
 800708a:	10a4      	asrs	r4, r4, #2
 800708c:	42a6      	cmp	r6, r4
 800708e:	d109      	bne.n	80070a4 <__libc_init_array+0x24>
 8007090:	f004 fa28 	bl	800b4e4 <_init>
 8007094:	2600      	movs	r6, #0
 8007096:	4d0a      	ldr	r5, [pc, #40]	; (80070c0 <__libc_init_array+0x40>)
 8007098:	4c0a      	ldr	r4, [pc, #40]	; (80070c4 <__libc_init_array+0x44>)
 800709a:	1b64      	subs	r4, r4, r5
 800709c:	10a4      	asrs	r4, r4, #2
 800709e:	42a6      	cmp	r6, r4
 80070a0:	d105      	bne.n	80070ae <__libc_init_array+0x2e>
 80070a2:	bd70      	pop	{r4, r5, r6, pc}
 80070a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80070a8:	4798      	blx	r3
 80070aa:	3601      	adds	r6, #1
 80070ac:	e7ee      	b.n	800708c <__libc_init_array+0xc>
 80070ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80070b2:	4798      	blx	r3
 80070b4:	3601      	adds	r6, #1
 80070b6:	e7f2      	b.n	800709e <__libc_init_array+0x1e>
 80070b8:	0800bb20 	.word	0x0800bb20
 80070bc:	0800bb20 	.word	0x0800bb20
 80070c0:	0800bb20 	.word	0x0800bb20
 80070c4:	0800bb24 	.word	0x0800bb24

080070c8 <memset>:
 80070c8:	4603      	mov	r3, r0
 80070ca:	4402      	add	r2, r0
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d100      	bne.n	80070d2 <memset+0xa>
 80070d0:	4770      	bx	lr
 80070d2:	f803 1b01 	strb.w	r1, [r3], #1
 80070d6:	e7f9      	b.n	80070cc <memset+0x4>

080070d8 <__cvt>:
 80070d8:	2b00      	cmp	r3, #0
 80070da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070de:	461f      	mov	r7, r3
 80070e0:	bfbb      	ittet	lt
 80070e2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80070e6:	461f      	movlt	r7, r3
 80070e8:	2300      	movge	r3, #0
 80070ea:	232d      	movlt	r3, #45	; 0x2d
 80070ec:	b088      	sub	sp, #32
 80070ee:	4614      	mov	r4, r2
 80070f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80070f2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80070f4:	7013      	strb	r3, [r2, #0]
 80070f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80070f8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80070fc:	f023 0820 	bic.w	r8, r3, #32
 8007100:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007104:	d005      	beq.n	8007112 <__cvt+0x3a>
 8007106:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800710a:	d100      	bne.n	800710e <__cvt+0x36>
 800710c:	3501      	adds	r5, #1
 800710e:	2302      	movs	r3, #2
 8007110:	e000      	b.n	8007114 <__cvt+0x3c>
 8007112:	2303      	movs	r3, #3
 8007114:	aa07      	add	r2, sp, #28
 8007116:	9204      	str	r2, [sp, #16]
 8007118:	aa06      	add	r2, sp, #24
 800711a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800711e:	e9cd 3500 	strd	r3, r5, [sp]
 8007122:	4622      	mov	r2, r4
 8007124:	463b      	mov	r3, r7
 8007126:	f001 fb77 	bl	8008818 <_dtoa_r>
 800712a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800712e:	4606      	mov	r6, r0
 8007130:	d102      	bne.n	8007138 <__cvt+0x60>
 8007132:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007134:	07db      	lsls	r3, r3, #31
 8007136:	d522      	bpl.n	800717e <__cvt+0xa6>
 8007138:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800713c:	eb06 0905 	add.w	r9, r6, r5
 8007140:	d110      	bne.n	8007164 <__cvt+0x8c>
 8007142:	7833      	ldrb	r3, [r6, #0]
 8007144:	2b30      	cmp	r3, #48	; 0x30
 8007146:	d10a      	bne.n	800715e <__cvt+0x86>
 8007148:	2200      	movs	r2, #0
 800714a:	2300      	movs	r3, #0
 800714c:	4620      	mov	r0, r4
 800714e:	4639      	mov	r1, r7
 8007150:	f7f9 fc34 	bl	80009bc <__aeabi_dcmpeq>
 8007154:	b918      	cbnz	r0, 800715e <__cvt+0x86>
 8007156:	f1c5 0501 	rsb	r5, r5, #1
 800715a:	f8ca 5000 	str.w	r5, [sl]
 800715e:	f8da 3000 	ldr.w	r3, [sl]
 8007162:	4499      	add	r9, r3
 8007164:	2200      	movs	r2, #0
 8007166:	2300      	movs	r3, #0
 8007168:	4620      	mov	r0, r4
 800716a:	4639      	mov	r1, r7
 800716c:	f7f9 fc26 	bl	80009bc <__aeabi_dcmpeq>
 8007170:	b108      	cbz	r0, 8007176 <__cvt+0x9e>
 8007172:	f8cd 901c 	str.w	r9, [sp, #28]
 8007176:	2230      	movs	r2, #48	; 0x30
 8007178:	9b07      	ldr	r3, [sp, #28]
 800717a:	454b      	cmp	r3, r9
 800717c:	d307      	bcc.n	800718e <__cvt+0xb6>
 800717e:	4630      	mov	r0, r6
 8007180:	9b07      	ldr	r3, [sp, #28]
 8007182:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007184:	1b9b      	subs	r3, r3, r6
 8007186:	6013      	str	r3, [r2, #0]
 8007188:	b008      	add	sp, #32
 800718a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800718e:	1c59      	adds	r1, r3, #1
 8007190:	9107      	str	r1, [sp, #28]
 8007192:	701a      	strb	r2, [r3, #0]
 8007194:	e7f0      	b.n	8007178 <__cvt+0xa0>

08007196 <__exponent>:
 8007196:	4603      	mov	r3, r0
 8007198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800719a:	2900      	cmp	r1, #0
 800719c:	f803 2b02 	strb.w	r2, [r3], #2
 80071a0:	bfb6      	itet	lt
 80071a2:	222d      	movlt	r2, #45	; 0x2d
 80071a4:	222b      	movge	r2, #43	; 0x2b
 80071a6:	4249      	neglt	r1, r1
 80071a8:	2909      	cmp	r1, #9
 80071aa:	7042      	strb	r2, [r0, #1]
 80071ac:	dd2b      	ble.n	8007206 <__exponent+0x70>
 80071ae:	f10d 0407 	add.w	r4, sp, #7
 80071b2:	46a4      	mov	ip, r4
 80071b4:	270a      	movs	r7, #10
 80071b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80071ba:	460a      	mov	r2, r1
 80071bc:	46a6      	mov	lr, r4
 80071be:	fb07 1516 	mls	r5, r7, r6, r1
 80071c2:	2a63      	cmp	r2, #99	; 0x63
 80071c4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80071c8:	4631      	mov	r1, r6
 80071ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80071ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80071d2:	dcf0      	bgt.n	80071b6 <__exponent+0x20>
 80071d4:	3130      	adds	r1, #48	; 0x30
 80071d6:	f1ae 0502 	sub.w	r5, lr, #2
 80071da:	f804 1c01 	strb.w	r1, [r4, #-1]
 80071de:	4629      	mov	r1, r5
 80071e0:	1c44      	adds	r4, r0, #1
 80071e2:	4561      	cmp	r1, ip
 80071e4:	d30a      	bcc.n	80071fc <__exponent+0x66>
 80071e6:	f10d 0209 	add.w	r2, sp, #9
 80071ea:	eba2 020e 	sub.w	r2, r2, lr
 80071ee:	4565      	cmp	r5, ip
 80071f0:	bf88      	it	hi
 80071f2:	2200      	movhi	r2, #0
 80071f4:	4413      	add	r3, r2
 80071f6:	1a18      	subs	r0, r3, r0
 80071f8:	b003      	add	sp, #12
 80071fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007200:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007204:	e7ed      	b.n	80071e2 <__exponent+0x4c>
 8007206:	2330      	movs	r3, #48	; 0x30
 8007208:	3130      	adds	r1, #48	; 0x30
 800720a:	7083      	strb	r3, [r0, #2]
 800720c:	70c1      	strb	r1, [r0, #3]
 800720e:	1d03      	adds	r3, r0, #4
 8007210:	e7f1      	b.n	80071f6 <__exponent+0x60>
	...

08007214 <_printf_float>:
 8007214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007218:	b091      	sub	sp, #68	; 0x44
 800721a:	460c      	mov	r4, r1
 800721c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007220:	4616      	mov	r6, r2
 8007222:	461f      	mov	r7, r3
 8007224:	4605      	mov	r5, r0
 8007226:	f002 fc5d 	bl	8009ae4 <_localeconv_r>
 800722a:	6803      	ldr	r3, [r0, #0]
 800722c:	4618      	mov	r0, r3
 800722e:	9309      	str	r3, [sp, #36]	; 0x24
 8007230:	f7f8 ff98 	bl	8000164 <strlen>
 8007234:	2300      	movs	r3, #0
 8007236:	930e      	str	r3, [sp, #56]	; 0x38
 8007238:	f8d8 3000 	ldr.w	r3, [r8]
 800723c:	900a      	str	r0, [sp, #40]	; 0x28
 800723e:	3307      	adds	r3, #7
 8007240:	f023 0307 	bic.w	r3, r3, #7
 8007244:	f103 0208 	add.w	r2, r3, #8
 8007248:	f894 9018 	ldrb.w	r9, [r4, #24]
 800724c:	f8d4 b000 	ldr.w	fp, [r4]
 8007250:	f8c8 2000 	str.w	r2, [r8]
 8007254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007258:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800725c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007260:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007264:	930b      	str	r3, [sp, #44]	; 0x2c
 8007266:	f04f 32ff 	mov.w	r2, #4294967295
 800726a:	4640      	mov	r0, r8
 800726c:	4b9c      	ldr	r3, [pc, #624]	; (80074e0 <_printf_float+0x2cc>)
 800726e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007270:	f7f9 fbd6 	bl	8000a20 <__aeabi_dcmpun>
 8007274:	bb70      	cbnz	r0, 80072d4 <_printf_float+0xc0>
 8007276:	f04f 32ff 	mov.w	r2, #4294967295
 800727a:	4640      	mov	r0, r8
 800727c:	4b98      	ldr	r3, [pc, #608]	; (80074e0 <_printf_float+0x2cc>)
 800727e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007280:	f7f9 fbb0 	bl	80009e4 <__aeabi_dcmple>
 8007284:	bb30      	cbnz	r0, 80072d4 <_printf_float+0xc0>
 8007286:	2200      	movs	r2, #0
 8007288:	2300      	movs	r3, #0
 800728a:	4640      	mov	r0, r8
 800728c:	4651      	mov	r1, sl
 800728e:	f7f9 fb9f 	bl	80009d0 <__aeabi_dcmplt>
 8007292:	b110      	cbz	r0, 800729a <_printf_float+0x86>
 8007294:	232d      	movs	r3, #45	; 0x2d
 8007296:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800729a:	4b92      	ldr	r3, [pc, #584]	; (80074e4 <_printf_float+0x2d0>)
 800729c:	4892      	ldr	r0, [pc, #584]	; (80074e8 <_printf_float+0x2d4>)
 800729e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80072a2:	bf94      	ite	ls
 80072a4:	4698      	movls	r8, r3
 80072a6:	4680      	movhi	r8, r0
 80072a8:	2303      	movs	r3, #3
 80072aa:	f04f 0a00 	mov.w	sl, #0
 80072ae:	6123      	str	r3, [r4, #16]
 80072b0:	f02b 0304 	bic.w	r3, fp, #4
 80072b4:	6023      	str	r3, [r4, #0]
 80072b6:	4633      	mov	r3, r6
 80072b8:	4621      	mov	r1, r4
 80072ba:	4628      	mov	r0, r5
 80072bc:	9700      	str	r7, [sp, #0]
 80072be:	aa0f      	add	r2, sp, #60	; 0x3c
 80072c0:	f000 f9d4 	bl	800766c <_printf_common>
 80072c4:	3001      	adds	r0, #1
 80072c6:	f040 8090 	bne.w	80073ea <_printf_float+0x1d6>
 80072ca:	f04f 30ff 	mov.w	r0, #4294967295
 80072ce:	b011      	add	sp, #68	; 0x44
 80072d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072d4:	4642      	mov	r2, r8
 80072d6:	4653      	mov	r3, sl
 80072d8:	4640      	mov	r0, r8
 80072da:	4651      	mov	r1, sl
 80072dc:	f7f9 fba0 	bl	8000a20 <__aeabi_dcmpun>
 80072e0:	b148      	cbz	r0, 80072f6 <_printf_float+0xe2>
 80072e2:	f1ba 0f00 	cmp.w	sl, #0
 80072e6:	bfb8      	it	lt
 80072e8:	232d      	movlt	r3, #45	; 0x2d
 80072ea:	4880      	ldr	r0, [pc, #512]	; (80074ec <_printf_float+0x2d8>)
 80072ec:	bfb8      	it	lt
 80072ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80072f2:	4b7f      	ldr	r3, [pc, #508]	; (80074f0 <_printf_float+0x2dc>)
 80072f4:	e7d3      	b.n	800729e <_printf_float+0x8a>
 80072f6:	6863      	ldr	r3, [r4, #4]
 80072f8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80072fc:	1c5a      	adds	r2, r3, #1
 80072fe:	d142      	bne.n	8007386 <_printf_float+0x172>
 8007300:	2306      	movs	r3, #6
 8007302:	6063      	str	r3, [r4, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	9206      	str	r2, [sp, #24]
 8007308:	aa0e      	add	r2, sp, #56	; 0x38
 800730a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800730e:	aa0d      	add	r2, sp, #52	; 0x34
 8007310:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007314:	9203      	str	r2, [sp, #12]
 8007316:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800731a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800731e:	6023      	str	r3, [r4, #0]
 8007320:	6863      	ldr	r3, [r4, #4]
 8007322:	4642      	mov	r2, r8
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	4628      	mov	r0, r5
 8007328:	4653      	mov	r3, sl
 800732a:	910b      	str	r1, [sp, #44]	; 0x2c
 800732c:	f7ff fed4 	bl	80070d8 <__cvt>
 8007330:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007332:	4680      	mov	r8, r0
 8007334:	2947      	cmp	r1, #71	; 0x47
 8007336:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007338:	d108      	bne.n	800734c <_printf_float+0x138>
 800733a:	1cc8      	adds	r0, r1, #3
 800733c:	db02      	blt.n	8007344 <_printf_float+0x130>
 800733e:	6863      	ldr	r3, [r4, #4]
 8007340:	4299      	cmp	r1, r3
 8007342:	dd40      	ble.n	80073c6 <_printf_float+0x1b2>
 8007344:	f1a9 0902 	sub.w	r9, r9, #2
 8007348:	fa5f f989 	uxtb.w	r9, r9
 800734c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007350:	d81f      	bhi.n	8007392 <_printf_float+0x17e>
 8007352:	464a      	mov	r2, r9
 8007354:	3901      	subs	r1, #1
 8007356:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800735a:	910d      	str	r1, [sp, #52]	; 0x34
 800735c:	f7ff ff1b 	bl	8007196 <__exponent>
 8007360:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007362:	4682      	mov	sl, r0
 8007364:	1813      	adds	r3, r2, r0
 8007366:	2a01      	cmp	r2, #1
 8007368:	6123      	str	r3, [r4, #16]
 800736a:	dc02      	bgt.n	8007372 <_printf_float+0x15e>
 800736c:	6822      	ldr	r2, [r4, #0]
 800736e:	07d2      	lsls	r2, r2, #31
 8007370:	d501      	bpl.n	8007376 <_printf_float+0x162>
 8007372:	3301      	adds	r3, #1
 8007374:	6123      	str	r3, [r4, #16]
 8007376:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800737a:	2b00      	cmp	r3, #0
 800737c:	d09b      	beq.n	80072b6 <_printf_float+0xa2>
 800737e:	232d      	movs	r3, #45	; 0x2d
 8007380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007384:	e797      	b.n	80072b6 <_printf_float+0xa2>
 8007386:	2947      	cmp	r1, #71	; 0x47
 8007388:	d1bc      	bne.n	8007304 <_printf_float+0xf0>
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1ba      	bne.n	8007304 <_printf_float+0xf0>
 800738e:	2301      	movs	r3, #1
 8007390:	e7b7      	b.n	8007302 <_printf_float+0xee>
 8007392:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007396:	d118      	bne.n	80073ca <_printf_float+0x1b6>
 8007398:	2900      	cmp	r1, #0
 800739a:	6863      	ldr	r3, [r4, #4]
 800739c:	dd0b      	ble.n	80073b6 <_printf_float+0x1a2>
 800739e:	6121      	str	r1, [r4, #16]
 80073a0:	b913      	cbnz	r3, 80073a8 <_printf_float+0x194>
 80073a2:	6822      	ldr	r2, [r4, #0]
 80073a4:	07d0      	lsls	r0, r2, #31
 80073a6:	d502      	bpl.n	80073ae <_printf_float+0x19a>
 80073a8:	3301      	adds	r3, #1
 80073aa:	440b      	add	r3, r1
 80073ac:	6123      	str	r3, [r4, #16]
 80073ae:	f04f 0a00 	mov.w	sl, #0
 80073b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80073b4:	e7df      	b.n	8007376 <_printf_float+0x162>
 80073b6:	b913      	cbnz	r3, 80073be <_printf_float+0x1aa>
 80073b8:	6822      	ldr	r2, [r4, #0]
 80073ba:	07d2      	lsls	r2, r2, #31
 80073bc:	d501      	bpl.n	80073c2 <_printf_float+0x1ae>
 80073be:	3302      	adds	r3, #2
 80073c0:	e7f4      	b.n	80073ac <_printf_float+0x198>
 80073c2:	2301      	movs	r3, #1
 80073c4:	e7f2      	b.n	80073ac <_printf_float+0x198>
 80073c6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80073ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073cc:	4299      	cmp	r1, r3
 80073ce:	db05      	blt.n	80073dc <_printf_float+0x1c8>
 80073d0:	6823      	ldr	r3, [r4, #0]
 80073d2:	6121      	str	r1, [r4, #16]
 80073d4:	07d8      	lsls	r0, r3, #31
 80073d6:	d5ea      	bpl.n	80073ae <_printf_float+0x19a>
 80073d8:	1c4b      	adds	r3, r1, #1
 80073da:	e7e7      	b.n	80073ac <_printf_float+0x198>
 80073dc:	2900      	cmp	r1, #0
 80073de:	bfcc      	ite	gt
 80073e0:	2201      	movgt	r2, #1
 80073e2:	f1c1 0202 	rsble	r2, r1, #2
 80073e6:	4413      	add	r3, r2
 80073e8:	e7e0      	b.n	80073ac <_printf_float+0x198>
 80073ea:	6823      	ldr	r3, [r4, #0]
 80073ec:	055a      	lsls	r2, r3, #21
 80073ee:	d407      	bmi.n	8007400 <_printf_float+0x1ec>
 80073f0:	6923      	ldr	r3, [r4, #16]
 80073f2:	4642      	mov	r2, r8
 80073f4:	4631      	mov	r1, r6
 80073f6:	4628      	mov	r0, r5
 80073f8:	47b8      	blx	r7
 80073fa:	3001      	adds	r0, #1
 80073fc:	d12b      	bne.n	8007456 <_printf_float+0x242>
 80073fe:	e764      	b.n	80072ca <_printf_float+0xb6>
 8007400:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007404:	f240 80dd 	bls.w	80075c2 <_printf_float+0x3ae>
 8007408:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800740c:	2200      	movs	r2, #0
 800740e:	2300      	movs	r3, #0
 8007410:	f7f9 fad4 	bl	80009bc <__aeabi_dcmpeq>
 8007414:	2800      	cmp	r0, #0
 8007416:	d033      	beq.n	8007480 <_printf_float+0x26c>
 8007418:	2301      	movs	r3, #1
 800741a:	4631      	mov	r1, r6
 800741c:	4628      	mov	r0, r5
 800741e:	4a35      	ldr	r2, [pc, #212]	; (80074f4 <_printf_float+0x2e0>)
 8007420:	47b8      	blx	r7
 8007422:	3001      	adds	r0, #1
 8007424:	f43f af51 	beq.w	80072ca <_printf_float+0xb6>
 8007428:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800742c:	429a      	cmp	r2, r3
 800742e:	db02      	blt.n	8007436 <_printf_float+0x222>
 8007430:	6823      	ldr	r3, [r4, #0]
 8007432:	07d8      	lsls	r0, r3, #31
 8007434:	d50f      	bpl.n	8007456 <_printf_float+0x242>
 8007436:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800743a:	4631      	mov	r1, r6
 800743c:	4628      	mov	r0, r5
 800743e:	47b8      	blx	r7
 8007440:	3001      	adds	r0, #1
 8007442:	f43f af42 	beq.w	80072ca <_printf_float+0xb6>
 8007446:	f04f 0800 	mov.w	r8, #0
 800744a:	f104 091a 	add.w	r9, r4, #26
 800744e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007450:	3b01      	subs	r3, #1
 8007452:	4543      	cmp	r3, r8
 8007454:	dc09      	bgt.n	800746a <_printf_float+0x256>
 8007456:	6823      	ldr	r3, [r4, #0]
 8007458:	079b      	lsls	r3, r3, #30
 800745a:	f100 8102 	bmi.w	8007662 <_printf_float+0x44e>
 800745e:	68e0      	ldr	r0, [r4, #12]
 8007460:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007462:	4298      	cmp	r0, r3
 8007464:	bfb8      	it	lt
 8007466:	4618      	movlt	r0, r3
 8007468:	e731      	b.n	80072ce <_printf_float+0xba>
 800746a:	2301      	movs	r3, #1
 800746c:	464a      	mov	r2, r9
 800746e:	4631      	mov	r1, r6
 8007470:	4628      	mov	r0, r5
 8007472:	47b8      	blx	r7
 8007474:	3001      	adds	r0, #1
 8007476:	f43f af28 	beq.w	80072ca <_printf_float+0xb6>
 800747a:	f108 0801 	add.w	r8, r8, #1
 800747e:	e7e6      	b.n	800744e <_printf_float+0x23a>
 8007480:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007482:	2b00      	cmp	r3, #0
 8007484:	dc38      	bgt.n	80074f8 <_printf_float+0x2e4>
 8007486:	2301      	movs	r3, #1
 8007488:	4631      	mov	r1, r6
 800748a:	4628      	mov	r0, r5
 800748c:	4a19      	ldr	r2, [pc, #100]	; (80074f4 <_printf_float+0x2e0>)
 800748e:	47b8      	blx	r7
 8007490:	3001      	adds	r0, #1
 8007492:	f43f af1a 	beq.w	80072ca <_printf_float+0xb6>
 8007496:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800749a:	4313      	orrs	r3, r2
 800749c:	d102      	bne.n	80074a4 <_printf_float+0x290>
 800749e:	6823      	ldr	r3, [r4, #0]
 80074a0:	07d9      	lsls	r1, r3, #31
 80074a2:	d5d8      	bpl.n	8007456 <_printf_float+0x242>
 80074a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074a8:	4631      	mov	r1, r6
 80074aa:	4628      	mov	r0, r5
 80074ac:	47b8      	blx	r7
 80074ae:	3001      	adds	r0, #1
 80074b0:	f43f af0b 	beq.w	80072ca <_printf_float+0xb6>
 80074b4:	f04f 0900 	mov.w	r9, #0
 80074b8:	f104 0a1a 	add.w	sl, r4, #26
 80074bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074be:	425b      	negs	r3, r3
 80074c0:	454b      	cmp	r3, r9
 80074c2:	dc01      	bgt.n	80074c8 <_printf_float+0x2b4>
 80074c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074c6:	e794      	b.n	80073f2 <_printf_float+0x1de>
 80074c8:	2301      	movs	r3, #1
 80074ca:	4652      	mov	r2, sl
 80074cc:	4631      	mov	r1, r6
 80074ce:	4628      	mov	r0, r5
 80074d0:	47b8      	blx	r7
 80074d2:	3001      	adds	r0, #1
 80074d4:	f43f aef9 	beq.w	80072ca <_printf_float+0xb6>
 80074d8:	f109 0901 	add.w	r9, r9, #1
 80074dc:	e7ee      	b.n	80074bc <_printf_float+0x2a8>
 80074de:	bf00      	nop
 80074e0:	7fefffff 	.word	0x7fefffff
 80074e4:	0800b628 	.word	0x0800b628
 80074e8:	0800b62c 	.word	0x0800b62c
 80074ec:	0800b634 	.word	0x0800b634
 80074f0:	0800b630 	.word	0x0800b630
 80074f4:	0800b638 	.word	0x0800b638
 80074f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074fc:	429a      	cmp	r2, r3
 80074fe:	bfa8      	it	ge
 8007500:	461a      	movge	r2, r3
 8007502:	2a00      	cmp	r2, #0
 8007504:	4691      	mov	r9, r2
 8007506:	dc37      	bgt.n	8007578 <_printf_float+0x364>
 8007508:	f04f 0b00 	mov.w	fp, #0
 800750c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007510:	f104 021a 	add.w	r2, r4, #26
 8007514:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007518:	ebaa 0309 	sub.w	r3, sl, r9
 800751c:	455b      	cmp	r3, fp
 800751e:	dc33      	bgt.n	8007588 <_printf_float+0x374>
 8007520:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007524:	429a      	cmp	r2, r3
 8007526:	db3b      	blt.n	80075a0 <_printf_float+0x38c>
 8007528:	6823      	ldr	r3, [r4, #0]
 800752a:	07da      	lsls	r2, r3, #31
 800752c:	d438      	bmi.n	80075a0 <_printf_float+0x38c>
 800752e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007530:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007532:	eba3 020a 	sub.w	r2, r3, sl
 8007536:	eba3 0901 	sub.w	r9, r3, r1
 800753a:	4591      	cmp	r9, r2
 800753c:	bfa8      	it	ge
 800753e:	4691      	movge	r9, r2
 8007540:	f1b9 0f00 	cmp.w	r9, #0
 8007544:	dc34      	bgt.n	80075b0 <_printf_float+0x39c>
 8007546:	f04f 0800 	mov.w	r8, #0
 800754a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800754e:	f104 0a1a 	add.w	sl, r4, #26
 8007552:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007556:	1a9b      	subs	r3, r3, r2
 8007558:	eba3 0309 	sub.w	r3, r3, r9
 800755c:	4543      	cmp	r3, r8
 800755e:	f77f af7a 	ble.w	8007456 <_printf_float+0x242>
 8007562:	2301      	movs	r3, #1
 8007564:	4652      	mov	r2, sl
 8007566:	4631      	mov	r1, r6
 8007568:	4628      	mov	r0, r5
 800756a:	47b8      	blx	r7
 800756c:	3001      	adds	r0, #1
 800756e:	f43f aeac 	beq.w	80072ca <_printf_float+0xb6>
 8007572:	f108 0801 	add.w	r8, r8, #1
 8007576:	e7ec      	b.n	8007552 <_printf_float+0x33e>
 8007578:	4613      	mov	r3, r2
 800757a:	4631      	mov	r1, r6
 800757c:	4642      	mov	r2, r8
 800757e:	4628      	mov	r0, r5
 8007580:	47b8      	blx	r7
 8007582:	3001      	adds	r0, #1
 8007584:	d1c0      	bne.n	8007508 <_printf_float+0x2f4>
 8007586:	e6a0      	b.n	80072ca <_printf_float+0xb6>
 8007588:	2301      	movs	r3, #1
 800758a:	4631      	mov	r1, r6
 800758c:	4628      	mov	r0, r5
 800758e:	920b      	str	r2, [sp, #44]	; 0x2c
 8007590:	47b8      	blx	r7
 8007592:	3001      	adds	r0, #1
 8007594:	f43f ae99 	beq.w	80072ca <_printf_float+0xb6>
 8007598:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800759a:	f10b 0b01 	add.w	fp, fp, #1
 800759e:	e7b9      	b.n	8007514 <_printf_float+0x300>
 80075a0:	4631      	mov	r1, r6
 80075a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075a6:	4628      	mov	r0, r5
 80075a8:	47b8      	blx	r7
 80075aa:	3001      	adds	r0, #1
 80075ac:	d1bf      	bne.n	800752e <_printf_float+0x31a>
 80075ae:	e68c      	b.n	80072ca <_printf_float+0xb6>
 80075b0:	464b      	mov	r3, r9
 80075b2:	4631      	mov	r1, r6
 80075b4:	4628      	mov	r0, r5
 80075b6:	eb08 020a 	add.w	r2, r8, sl
 80075ba:	47b8      	blx	r7
 80075bc:	3001      	adds	r0, #1
 80075be:	d1c2      	bne.n	8007546 <_printf_float+0x332>
 80075c0:	e683      	b.n	80072ca <_printf_float+0xb6>
 80075c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075c4:	2a01      	cmp	r2, #1
 80075c6:	dc01      	bgt.n	80075cc <_printf_float+0x3b8>
 80075c8:	07db      	lsls	r3, r3, #31
 80075ca:	d537      	bpl.n	800763c <_printf_float+0x428>
 80075cc:	2301      	movs	r3, #1
 80075ce:	4642      	mov	r2, r8
 80075d0:	4631      	mov	r1, r6
 80075d2:	4628      	mov	r0, r5
 80075d4:	47b8      	blx	r7
 80075d6:	3001      	adds	r0, #1
 80075d8:	f43f ae77 	beq.w	80072ca <_printf_float+0xb6>
 80075dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075e0:	4631      	mov	r1, r6
 80075e2:	4628      	mov	r0, r5
 80075e4:	47b8      	blx	r7
 80075e6:	3001      	adds	r0, #1
 80075e8:	f43f ae6f 	beq.w	80072ca <_printf_float+0xb6>
 80075ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075f0:	2200      	movs	r2, #0
 80075f2:	2300      	movs	r3, #0
 80075f4:	f7f9 f9e2 	bl	80009bc <__aeabi_dcmpeq>
 80075f8:	b9d8      	cbnz	r0, 8007632 <_printf_float+0x41e>
 80075fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075fc:	f108 0201 	add.w	r2, r8, #1
 8007600:	3b01      	subs	r3, #1
 8007602:	4631      	mov	r1, r6
 8007604:	4628      	mov	r0, r5
 8007606:	47b8      	blx	r7
 8007608:	3001      	adds	r0, #1
 800760a:	d10e      	bne.n	800762a <_printf_float+0x416>
 800760c:	e65d      	b.n	80072ca <_printf_float+0xb6>
 800760e:	2301      	movs	r3, #1
 8007610:	464a      	mov	r2, r9
 8007612:	4631      	mov	r1, r6
 8007614:	4628      	mov	r0, r5
 8007616:	47b8      	blx	r7
 8007618:	3001      	adds	r0, #1
 800761a:	f43f ae56 	beq.w	80072ca <_printf_float+0xb6>
 800761e:	f108 0801 	add.w	r8, r8, #1
 8007622:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007624:	3b01      	subs	r3, #1
 8007626:	4543      	cmp	r3, r8
 8007628:	dcf1      	bgt.n	800760e <_printf_float+0x3fa>
 800762a:	4653      	mov	r3, sl
 800762c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007630:	e6e0      	b.n	80073f4 <_printf_float+0x1e0>
 8007632:	f04f 0800 	mov.w	r8, #0
 8007636:	f104 091a 	add.w	r9, r4, #26
 800763a:	e7f2      	b.n	8007622 <_printf_float+0x40e>
 800763c:	2301      	movs	r3, #1
 800763e:	4642      	mov	r2, r8
 8007640:	e7df      	b.n	8007602 <_printf_float+0x3ee>
 8007642:	2301      	movs	r3, #1
 8007644:	464a      	mov	r2, r9
 8007646:	4631      	mov	r1, r6
 8007648:	4628      	mov	r0, r5
 800764a:	47b8      	blx	r7
 800764c:	3001      	adds	r0, #1
 800764e:	f43f ae3c 	beq.w	80072ca <_printf_float+0xb6>
 8007652:	f108 0801 	add.w	r8, r8, #1
 8007656:	68e3      	ldr	r3, [r4, #12]
 8007658:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800765a:	1a5b      	subs	r3, r3, r1
 800765c:	4543      	cmp	r3, r8
 800765e:	dcf0      	bgt.n	8007642 <_printf_float+0x42e>
 8007660:	e6fd      	b.n	800745e <_printf_float+0x24a>
 8007662:	f04f 0800 	mov.w	r8, #0
 8007666:	f104 0919 	add.w	r9, r4, #25
 800766a:	e7f4      	b.n	8007656 <_printf_float+0x442>

0800766c <_printf_common>:
 800766c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007670:	4616      	mov	r6, r2
 8007672:	4699      	mov	r9, r3
 8007674:	688a      	ldr	r2, [r1, #8]
 8007676:	690b      	ldr	r3, [r1, #16]
 8007678:	4607      	mov	r7, r0
 800767a:	4293      	cmp	r3, r2
 800767c:	bfb8      	it	lt
 800767e:	4613      	movlt	r3, r2
 8007680:	6033      	str	r3, [r6, #0]
 8007682:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007686:	460c      	mov	r4, r1
 8007688:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800768c:	b10a      	cbz	r2, 8007692 <_printf_common+0x26>
 800768e:	3301      	adds	r3, #1
 8007690:	6033      	str	r3, [r6, #0]
 8007692:	6823      	ldr	r3, [r4, #0]
 8007694:	0699      	lsls	r1, r3, #26
 8007696:	bf42      	ittt	mi
 8007698:	6833      	ldrmi	r3, [r6, #0]
 800769a:	3302      	addmi	r3, #2
 800769c:	6033      	strmi	r3, [r6, #0]
 800769e:	6825      	ldr	r5, [r4, #0]
 80076a0:	f015 0506 	ands.w	r5, r5, #6
 80076a4:	d106      	bne.n	80076b4 <_printf_common+0x48>
 80076a6:	f104 0a19 	add.w	sl, r4, #25
 80076aa:	68e3      	ldr	r3, [r4, #12]
 80076ac:	6832      	ldr	r2, [r6, #0]
 80076ae:	1a9b      	subs	r3, r3, r2
 80076b0:	42ab      	cmp	r3, r5
 80076b2:	dc28      	bgt.n	8007706 <_printf_common+0x9a>
 80076b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076b8:	1e13      	subs	r3, r2, #0
 80076ba:	6822      	ldr	r2, [r4, #0]
 80076bc:	bf18      	it	ne
 80076be:	2301      	movne	r3, #1
 80076c0:	0692      	lsls	r2, r2, #26
 80076c2:	d42d      	bmi.n	8007720 <_printf_common+0xb4>
 80076c4:	4649      	mov	r1, r9
 80076c6:	4638      	mov	r0, r7
 80076c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076cc:	47c0      	blx	r8
 80076ce:	3001      	adds	r0, #1
 80076d0:	d020      	beq.n	8007714 <_printf_common+0xa8>
 80076d2:	6823      	ldr	r3, [r4, #0]
 80076d4:	68e5      	ldr	r5, [r4, #12]
 80076d6:	f003 0306 	and.w	r3, r3, #6
 80076da:	2b04      	cmp	r3, #4
 80076dc:	bf18      	it	ne
 80076de:	2500      	movne	r5, #0
 80076e0:	6832      	ldr	r2, [r6, #0]
 80076e2:	f04f 0600 	mov.w	r6, #0
 80076e6:	68a3      	ldr	r3, [r4, #8]
 80076e8:	bf08      	it	eq
 80076ea:	1aad      	subeq	r5, r5, r2
 80076ec:	6922      	ldr	r2, [r4, #16]
 80076ee:	bf08      	it	eq
 80076f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076f4:	4293      	cmp	r3, r2
 80076f6:	bfc4      	itt	gt
 80076f8:	1a9b      	subgt	r3, r3, r2
 80076fa:	18ed      	addgt	r5, r5, r3
 80076fc:	341a      	adds	r4, #26
 80076fe:	42b5      	cmp	r5, r6
 8007700:	d11a      	bne.n	8007738 <_printf_common+0xcc>
 8007702:	2000      	movs	r0, #0
 8007704:	e008      	b.n	8007718 <_printf_common+0xac>
 8007706:	2301      	movs	r3, #1
 8007708:	4652      	mov	r2, sl
 800770a:	4649      	mov	r1, r9
 800770c:	4638      	mov	r0, r7
 800770e:	47c0      	blx	r8
 8007710:	3001      	adds	r0, #1
 8007712:	d103      	bne.n	800771c <_printf_common+0xb0>
 8007714:	f04f 30ff 	mov.w	r0, #4294967295
 8007718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800771c:	3501      	adds	r5, #1
 800771e:	e7c4      	b.n	80076aa <_printf_common+0x3e>
 8007720:	2030      	movs	r0, #48	; 0x30
 8007722:	18e1      	adds	r1, r4, r3
 8007724:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007728:	1c5a      	adds	r2, r3, #1
 800772a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800772e:	4422      	add	r2, r4
 8007730:	3302      	adds	r3, #2
 8007732:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007736:	e7c5      	b.n	80076c4 <_printf_common+0x58>
 8007738:	2301      	movs	r3, #1
 800773a:	4622      	mov	r2, r4
 800773c:	4649      	mov	r1, r9
 800773e:	4638      	mov	r0, r7
 8007740:	47c0      	blx	r8
 8007742:	3001      	adds	r0, #1
 8007744:	d0e6      	beq.n	8007714 <_printf_common+0xa8>
 8007746:	3601      	adds	r6, #1
 8007748:	e7d9      	b.n	80076fe <_printf_common+0x92>
	...

0800774c <_printf_i>:
 800774c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007750:	7e0f      	ldrb	r7, [r1, #24]
 8007752:	4691      	mov	r9, r2
 8007754:	2f78      	cmp	r7, #120	; 0x78
 8007756:	4680      	mov	r8, r0
 8007758:	460c      	mov	r4, r1
 800775a:	469a      	mov	sl, r3
 800775c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800775e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007762:	d807      	bhi.n	8007774 <_printf_i+0x28>
 8007764:	2f62      	cmp	r7, #98	; 0x62
 8007766:	d80a      	bhi.n	800777e <_printf_i+0x32>
 8007768:	2f00      	cmp	r7, #0
 800776a:	f000 80d9 	beq.w	8007920 <_printf_i+0x1d4>
 800776e:	2f58      	cmp	r7, #88	; 0x58
 8007770:	f000 80a4 	beq.w	80078bc <_printf_i+0x170>
 8007774:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007778:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800777c:	e03a      	b.n	80077f4 <_printf_i+0xa8>
 800777e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007782:	2b15      	cmp	r3, #21
 8007784:	d8f6      	bhi.n	8007774 <_printf_i+0x28>
 8007786:	a101      	add	r1, pc, #4	; (adr r1, 800778c <_printf_i+0x40>)
 8007788:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800778c:	080077e5 	.word	0x080077e5
 8007790:	080077f9 	.word	0x080077f9
 8007794:	08007775 	.word	0x08007775
 8007798:	08007775 	.word	0x08007775
 800779c:	08007775 	.word	0x08007775
 80077a0:	08007775 	.word	0x08007775
 80077a4:	080077f9 	.word	0x080077f9
 80077a8:	08007775 	.word	0x08007775
 80077ac:	08007775 	.word	0x08007775
 80077b0:	08007775 	.word	0x08007775
 80077b4:	08007775 	.word	0x08007775
 80077b8:	08007907 	.word	0x08007907
 80077bc:	08007829 	.word	0x08007829
 80077c0:	080078e9 	.word	0x080078e9
 80077c4:	08007775 	.word	0x08007775
 80077c8:	08007775 	.word	0x08007775
 80077cc:	08007929 	.word	0x08007929
 80077d0:	08007775 	.word	0x08007775
 80077d4:	08007829 	.word	0x08007829
 80077d8:	08007775 	.word	0x08007775
 80077dc:	08007775 	.word	0x08007775
 80077e0:	080078f1 	.word	0x080078f1
 80077e4:	682b      	ldr	r3, [r5, #0]
 80077e6:	1d1a      	adds	r2, r3, #4
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	602a      	str	r2, [r5, #0]
 80077ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077f4:	2301      	movs	r3, #1
 80077f6:	e0a4      	b.n	8007942 <_printf_i+0x1f6>
 80077f8:	6820      	ldr	r0, [r4, #0]
 80077fa:	6829      	ldr	r1, [r5, #0]
 80077fc:	0606      	lsls	r6, r0, #24
 80077fe:	f101 0304 	add.w	r3, r1, #4
 8007802:	d50a      	bpl.n	800781a <_printf_i+0xce>
 8007804:	680e      	ldr	r6, [r1, #0]
 8007806:	602b      	str	r3, [r5, #0]
 8007808:	2e00      	cmp	r6, #0
 800780a:	da03      	bge.n	8007814 <_printf_i+0xc8>
 800780c:	232d      	movs	r3, #45	; 0x2d
 800780e:	4276      	negs	r6, r6
 8007810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007814:	230a      	movs	r3, #10
 8007816:	485e      	ldr	r0, [pc, #376]	; (8007990 <_printf_i+0x244>)
 8007818:	e019      	b.n	800784e <_printf_i+0x102>
 800781a:	680e      	ldr	r6, [r1, #0]
 800781c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007820:	602b      	str	r3, [r5, #0]
 8007822:	bf18      	it	ne
 8007824:	b236      	sxthne	r6, r6
 8007826:	e7ef      	b.n	8007808 <_printf_i+0xbc>
 8007828:	682b      	ldr	r3, [r5, #0]
 800782a:	6820      	ldr	r0, [r4, #0]
 800782c:	1d19      	adds	r1, r3, #4
 800782e:	6029      	str	r1, [r5, #0]
 8007830:	0601      	lsls	r1, r0, #24
 8007832:	d501      	bpl.n	8007838 <_printf_i+0xec>
 8007834:	681e      	ldr	r6, [r3, #0]
 8007836:	e002      	b.n	800783e <_printf_i+0xf2>
 8007838:	0646      	lsls	r6, r0, #25
 800783a:	d5fb      	bpl.n	8007834 <_printf_i+0xe8>
 800783c:	881e      	ldrh	r6, [r3, #0]
 800783e:	2f6f      	cmp	r7, #111	; 0x6f
 8007840:	bf0c      	ite	eq
 8007842:	2308      	moveq	r3, #8
 8007844:	230a      	movne	r3, #10
 8007846:	4852      	ldr	r0, [pc, #328]	; (8007990 <_printf_i+0x244>)
 8007848:	2100      	movs	r1, #0
 800784a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800784e:	6865      	ldr	r5, [r4, #4]
 8007850:	2d00      	cmp	r5, #0
 8007852:	bfa8      	it	ge
 8007854:	6821      	ldrge	r1, [r4, #0]
 8007856:	60a5      	str	r5, [r4, #8]
 8007858:	bfa4      	itt	ge
 800785a:	f021 0104 	bicge.w	r1, r1, #4
 800785e:	6021      	strge	r1, [r4, #0]
 8007860:	b90e      	cbnz	r6, 8007866 <_printf_i+0x11a>
 8007862:	2d00      	cmp	r5, #0
 8007864:	d04d      	beq.n	8007902 <_printf_i+0x1b6>
 8007866:	4615      	mov	r5, r2
 8007868:	fbb6 f1f3 	udiv	r1, r6, r3
 800786c:	fb03 6711 	mls	r7, r3, r1, r6
 8007870:	5dc7      	ldrb	r7, [r0, r7]
 8007872:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007876:	4637      	mov	r7, r6
 8007878:	42bb      	cmp	r3, r7
 800787a:	460e      	mov	r6, r1
 800787c:	d9f4      	bls.n	8007868 <_printf_i+0x11c>
 800787e:	2b08      	cmp	r3, #8
 8007880:	d10b      	bne.n	800789a <_printf_i+0x14e>
 8007882:	6823      	ldr	r3, [r4, #0]
 8007884:	07de      	lsls	r6, r3, #31
 8007886:	d508      	bpl.n	800789a <_printf_i+0x14e>
 8007888:	6923      	ldr	r3, [r4, #16]
 800788a:	6861      	ldr	r1, [r4, #4]
 800788c:	4299      	cmp	r1, r3
 800788e:	bfde      	ittt	le
 8007890:	2330      	movle	r3, #48	; 0x30
 8007892:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007896:	f105 35ff 	addle.w	r5, r5, #4294967295
 800789a:	1b52      	subs	r2, r2, r5
 800789c:	6122      	str	r2, [r4, #16]
 800789e:	464b      	mov	r3, r9
 80078a0:	4621      	mov	r1, r4
 80078a2:	4640      	mov	r0, r8
 80078a4:	f8cd a000 	str.w	sl, [sp]
 80078a8:	aa03      	add	r2, sp, #12
 80078aa:	f7ff fedf 	bl	800766c <_printf_common>
 80078ae:	3001      	adds	r0, #1
 80078b0:	d14c      	bne.n	800794c <_printf_i+0x200>
 80078b2:	f04f 30ff 	mov.w	r0, #4294967295
 80078b6:	b004      	add	sp, #16
 80078b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078bc:	4834      	ldr	r0, [pc, #208]	; (8007990 <_printf_i+0x244>)
 80078be:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80078c2:	6829      	ldr	r1, [r5, #0]
 80078c4:	6823      	ldr	r3, [r4, #0]
 80078c6:	f851 6b04 	ldr.w	r6, [r1], #4
 80078ca:	6029      	str	r1, [r5, #0]
 80078cc:	061d      	lsls	r5, r3, #24
 80078ce:	d514      	bpl.n	80078fa <_printf_i+0x1ae>
 80078d0:	07df      	lsls	r7, r3, #31
 80078d2:	bf44      	itt	mi
 80078d4:	f043 0320 	orrmi.w	r3, r3, #32
 80078d8:	6023      	strmi	r3, [r4, #0]
 80078da:	b91e      	cbnz	r6, 80078e4 <_printf_i+0x198>
 80078dc:	6823      	ldr	r3, [r4, #0]
 80078de:	f023 0320 	bic.w	r3, r3, #32
 80078e2:	6023      	str	r3, [r4, #0]
 80078e4:	2310      	movs	r3, #16
 80078e6:	e7af      	b.n	8007848 <_printf_i+0xfc>
 80078e8:	6823      	ldr	r3, [r4, #0]
 80078ea:	f043 0320 	orr.w	r3, r3, #32
 80078ee:	6023      	str	r3, [r4, #0]
 80078f0:	2378      	movs	r3, #120	; 0x78
 80078f2:	4828      	ldr	r0, [pc, #160]	; (8007994 <_printf_i+0x248>)
 80078f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078f8:	e7e3      	b.n	80078c2 <_printf_i+0x176>
 80078fa:	0659      	lsls	r1, r3, #25
 80078fc:	bf48      	it	mi
 80078fe:	b2b6      	uxthmi	r6, r6
 8007900:	e7e6      	b.n	80078d0 <_printf_i+0x184>
 8007902:	4615      	mov	r5, r2
 8007904:	e7bb      	b.n	800787e <_printf_i+0x132>
 8007906:	682b      	ldr	r3, [r5, #0]
 8007908:	6826      	ldr	r6, [r4, #0]
 800790a:	1d18      	adds	r0, r3, #4
 800790c:	6961      	ldr	r1, [r4, #20]
 800790e:	6028      	str	r0, [r5, #0]
 8007910:	0635      	lsls	r5, r6, #24
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	d501      	bpl.n	800791a <_printf_i+0x1ce>
 8007916:	6019      	str	r1, [r3, #0]
 8007918:	e002      	b.n	8007920 <_printf_i+0x1d4>
 800791a:	0670      	lsls	r0, r6, #25
 800791c:	d5fb      	bpl.n	8007916 <_printf_i+0x1ca>
 800791e:	8019      	strh	r1, [r3, #0]
 8007920:	2300      	movs	r3, #0
 8007922:	4615      	mov	r5, r2
 8007924:	6123      	str	r3, [r4, #16]
 8007926:	e7ba      	b.n	800789e <_printf_i+0x152>
 8007928:	682b      	ldr	r3, [r5, #0]
 800792a:	2100      	movs	r1, #0
 800792c:	1d1a      	adds	r2, r3, #4
 800792e:	602a      	str	r2, [r5, #0]
 8007930:	681d      	ldr	r5, [r3, #0]
 8007932:	6862      	ldr	r2, [r4, #4]
 8007934:	4628      	mov	r0, r5
 8007936:	f002 f8f3 	bl	8009b20 <memchr>
 800793a:	b108      	cbz	r0, 8007940 <_printf_i+0x1f4>
 800793c:	1b40      	subs	r0, r0, r5
 800793e:	6060      	str	r0, [r4, #4]
 8007940:	6863      	ldr	r3, [r4, #4]
 8007942:	6123      	str	r3, [r4, #16]
 8007944:	2300      	movs	r3, #0
 8007946:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800794a:	e7a8      	b.n	800789e <_printf_i+0x152>
 800794c:	462a      	mov	r2, r5
 800794e:	4649      	mov	r1, r9
 8007950:	4640      	mov	r0, r8
 8007952:	6923      	ldr	r3, [r4, #16]
 8007954:	47d0      	blx	sl
 8007956:	3001      	adds	r0, #1
 8007958:	d0ab      	beq.n	80078b2 <_printf_i+0x166>
 800795a:	6823      	ldr	r3, [r4, #0]
 800795c:	079b      	lsls	r3, r3, #30
 800795e:	d413      	bmi.n	8007988 <_printf_i+0x23c>
 8007960:	68e0      	ldr	r0, [r4, #12]
 8007962:	9b03      	ldr	r3, [sp, #12]
 8007964:	4298      	cmp	r0, r3
 8007966:	bfb8      	it	lt
 8007968:	4618      	movlt	r0, r3
 800796a:	e7a4      	b.n	80078b6 <_printf_i+0x16a>
 800796c:	2301      	movs	r3, #1
 800796e:	4632      	mov	r2, r6
 8007970:	4649      	mov	r1, r9
 8007972:	4640      	mov	r0, r8
 8007974:	47d0      	blx	sl
 8007976:	3001      	adds	r0, #1
 8007978:	d09b      	beq.n	80078b2 <_printf_i+0x166>
 800797a:	3501      	adds	r5, #1
 800797c:	68e3      	ldr	r3, [r4, #12]
 800797e:	9903      	ldr	r1, [sp, #12]
 8007980:	1a5b      	subs	r3, r3, r1
 8007982:	42ab      	cmp	r3, r5
 8007984:	dcf2      	bgt.n	800796c <_printf_i+0x220>
 8007986:	e7eb      	b.n	8007960 <_printf_i+0x214>
 8007988:	2500      	movs	r5, #0
 800798a:	f104 0619 	add.w	r6, r4, #25
 800798e:	e7f5      	b.n	800797c <_printf_i+0x230>
 8007990:	0800b63a 	.word	0x0800b63a
 8007994:	0800b64b 	.word	0x0800b64b

08007998 <siprintf>:
 8007998:	b40e      	push	{r1, r2, r3}
 800799a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800799e:	b500      	push	{lr}
 80079a0:	b09c      	sub	sp, #112	; 0x70
 80079a2:	ab1d      	add	r3, sp, #116	; 0x74
 80079a4:	9002      	str	r0, [sp, #8]
 80079a6:	9006      	str	r0, [sp, #24]
 80079a8:	9107      	str	r1, [sp, #28]
 80079aa:	9104      	str	r1, [sp, #16]
 80079ac:	4808      	ldr	r0, [pc, #32]	; (80079d0 <siprintf+0x38>)
 80079ae:	4909      	ldr	r1, [pc, #36]	; (80079d4 <siprintf+0x3c>)
 80079b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80079b4:	9105      	str	r1, [sp, #20]
 80079b6:	6800      	ldr	r0, [r0, #0]
 80079b8:	a902      	add	r1, sp, #8
 80079ba:	9301      	str	r3, [sp, #4]
 80079bc:	f002 fed0 	bl	800a760 <_svfiprintf_r>
 80079c0:	2200      	movs	r2, #0
 80079c2:	9b02      	ldr	r3, [sp, #8]
 80079c4:	701a      	strb	r2, [r3, #0]
 80079c6:	b01c      	add	sp, #112	; 0x70
 80079c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80079cc:	b003      	add	sp, #12
 80079ce:	4770      	bx	lr
 80079d0:	20000010 	.word	0x20000010
 80079d4:	ffff0208 	.word	0xffff0208

080079d8 <sulp>:
 80079d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079dc:	460f      	mov	r7, r1
 80079de:	4690      	mov	r8, r2
 80079e0:	f002 fc2a 	bl	800a238 <__ulp>
 80079e4:	4604      	mov	r4, r0
 80079e6:	460d      	mov	r5, r1
 80079e8:	f1b8 0f00 	cmp.w	r8, #0
 80079ec:	d011      	beq.n	8007a12 <sulp+0x3a>
 80079ee:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80079f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	dd0b      	ble.n	8007a12 <sulp+0x3a>
 80079fa:	2400      	movs	r4, #0
 80079fc:	051b      	lsls	r3, r3, #20
 80079fe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007a02:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007a06:	4622      	mov	r2, r4
 8007a08:	462b      	mov	r3, r5
 8007a0a:	f7f8 fd6f 	bl	80004ec <__aeabi_dmul>
 8007a0e:	4604      	mov	r4, r0
 8007a10:	460d      	mov	r5, r1
 8007a12:	4620      	mov	r0, r4
 8007a14:	4629      	mov	r1, r5
 8007a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a1a:	0000      	movs	r0, r0
 8007a1c:	0000      	movs	r0, r0
	...

08007a20 <_strtod_l>:
 8007a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a24:	469b      	mov	fp, r3
 8007a26:	2300      	movs	r3, #0
 8007a28:	b09f      	sub	sp, #124	; 0x7c
 8007a2a:	931a      	str	r3, [sp, #104]	; 0x68
 8007a2c:	4b9e      	ldr	r3, [pc, #632]	; (8007ca8 <_strtod_l+0x288>)
 8007a2e:	4682      	mov	sl, r0
 8007a30:	681f      	ldr	r7, [r3, #0]
 8007a32:	460e      	mov	r6, r1
 8007a34:	4638      	mov	r0, r7
 8007a36:	9215      	str	r2, [sp, #84]	; 0x54
 8007a38:	f7f8 fb94 	bl	8000164 <strlen>
 8007a3c:	f04f 0800 	mov.w	r8, #0
 8007a40:	4604      	mov	r4, r0
 8007a42:	f04f 0900 	mov.w	r9, #0
 8007a46:	9619      	str	r6, [sp, #100]	; 0x64
 8007a48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a4a:	781a      	ldrb	r2, [r3, #0]
 8007a4c:	2a2b      	cmp	r2, #43	; 0x2b
 8007a4e:	d04c      	beq.n	8007aea <_strtod_l+0xca>
 8007a50:	d83a      	bhi.n	8007ac8 <_strtod_l+0xa8>
 8007a52:	2a0d      	cmp	r2, #13
 8007a54:	d833      	bhi.n	8007abe <_strtod_l+0x9e>
 8007a56:	2a08      	cmp	r2, #8
 8007a58:	d833      	bhi.n	8007ac2 <_strtod_l+0xa2>
 8007a5a:	2a00      	cmp	r2, #0
 8007a5c:	d03d      	beq.n	8007ada <_strtod_l+0xba>
 8007a5e:	2300      	movs	r3, #0
 8007a60:	930a      	str	r3, [sp, #40]	; 0x28
 8007a62:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007a64:	782b      	ldrb	r3, [r5, #0]
 8007a66:	2b30      	cmp	r3, #48	; 0x30
 8007a68:	f040 80aa 	bne.w	8007bc0 <_strtod_l+0x1a0>
 8007a6c:	786b      	ldrb	r3, [r5, #1]
 8007a6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007a72:	2b58      	cmp	r3, #88	; 0x58
 8007a74:	d166      	bne.n	8007b44 <_strtod_l+0x124>
 8007a76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a78:	4650      	mov	r0, sl
 8007a7a:	9301      	str	r3, [sp, #4]
 8007a7c:	ab1a      	add	r3, sp, #104	; 0x68
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	4a8a      	ldr	r2, [pc, #552]	; (8007cac <_strtod_l+0x28c>)
 8007a82:	f8cd b008 	str.w	fp, [sp, #8]
 8007a86:	ab1b      	add	r3, sp, #108	; 0x6c
 8007a88:	a919      	add	r1, sp, #100	; 0x64
 8007a8a:	f001 fd2d 	bl	80094e8 <__gethex>
 8007a8e:	f010 0607 	ands.w	r6, r0, #7
 8007a92:	4604      	mov	r4, r0
 8007a94:	d005      	beq.n	8007aa2 <_strtod_l+0x82>
 8007a96:	2e06      	cmp	r6, #6
 8007a98:	d129      	bne.n	8007aee <_strtod_l+0xce>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	3501      	adds	r5, #1
 8007a9e:	9519      	str	r5, [sp, #100]	; 0x64
 8007aa0:	930a      	str	r3, [sp, #40]	; 0x28
 8007aa2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	f040 858a 	bne.w	80085be <_strtod_l+0xb9e>
 8007aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aac:	b1d3      	cbz	r3, 8007ae4 <_strtod_l+0xc4>
 8007aae:	4642      	mov	r2, r8
 8007ab0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	b01f      	add	sp, #124	; 0x7c
 8007aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007abe:	2a20      	cmp	r2, #32
 8007ac0:	d1cd      	bne.n	8007a5e <_strtod_l+0x3e>
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	9319      	str	r3, [sp, #100]	; 0x64
 8007ac6:	e7bf      	b.n	8007a48 <_strtod_l+0x28>
 8007ac8:	2a2d      	cmp	r2, #45	; 0x2d
 8007aca:	d1c8      	bne.n	8007a5e <_strtod_l+0x3e>
 8007acc:	2201      	movs	r2, #1
 8007ace:	920a      	str	r2, [sp, #40]	; 0x28
 8007ad0:	1c5a      	adds	r2, r3, #1
 8007ad2:	9219      	str	r2, [sp, #100]	; 0x64
 8007ad4:	785b      	ldrb	r3, [r3, #1]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1c3      	bne.n	8007a62 <_strtod_l+0x42>
 8007ada:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007adc:	9619      	str	r6, [sp, #100]	; 0x64
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f040 856b 	bne.w	80085ba <_strtod_l+0xb9a>
 8007ae4:	4642      	mov	r2, r8
 8007ae6:	464b      	mov	r3, r9
 8007ae8:	e7e4      	b.n	8007ab4 <_strtod_l+0x94>
 8007aea:	2200      	movs	r2, #0
 8007aec:	e7ef      	b.n	8007ace <_strtod_l+0xae>
 8007aee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007af0:	b13a      	cbz	r2, 8007b02 <_strtod_l+0xe2>
 8007af2:	2135      	movs	r1, #53	; 0x35
 8007af4:	a81c      	add	r0, sp, #112	; 0x70
 8007af6:	f002 fca3 	bl	800a440 <__copybits>
 8007afa:	4650      	mov	r0, sl
 8007afc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007afe:	f002 f86b 	bl	8009bd8 <_Bfree>
 8007b02:	3e01      	subs	r6, #1
 8007b04:	2e04      	cmp	r6, #4
 8007b06:	d806      	bhi.n	8007b16 <_strtod_l+0xf6>
 8007b08:	e8df f006 	tbb	[pc, r6]
 8007b0c:	1714030a 	.word	0x1714030a
 8007b10:	0a          	.byte	0x0a
 8007b11:	00          	.byte	0x00
 8007b12:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007b16:	0721      	lsls	r1, r4, #28
 8007b18:	d5c3      	bpl.n	8007aa2 <_strtod_l+0x82>
 8007b1a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007b1e:	e7c0      	b.n	8007aa2 <_strtod_l+0x82>
 8007b20:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007b22:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007b26:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007b2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007b2e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007b32:	e7f0      	b.n	8007b16 <_strtod_l+0xf6>
 8007b34:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007cb0 <_strtod_l+0x290>
 8007b38:	e7ed      	b.n	8007b16 <_strtod_l+0xf6>
 8007b3a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007b3e:	f04f 38ff 	mov.w	r8, #4294967295
 8007b42:	e7e8      	b.n	8007b16 <_strtod_l+0xf6>
 8007b44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b46:	1c5a      	adds	r2, r3, #1
 8007b48:	9219      	str	r2, [sp, #100]	; 0x64
 8007b4a:	785b      	ldrb	r3, [r3, #1]
 8007b4c:	2b30      	cmp	r3, #48	; 0x30
 8007b4e:	d0f9      	beq.n	8007b44 <_strtod_l+0x124>
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d0a6      	beq.n	8007aa2 <_strtod_l+0x82>
 8007b54:	2301      	movs	r3, #1
 8007b56:	9307      	str	r3, [sp, #28]
 8007b58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b5a:	220a      	movs	r2, #10
 8007b5c:	9308      	str	r3, [sp, #32]
 8007b5e:	2300      	movs	r3, #0
 8007b60:	469b      	mov	fp, r3
 8007b62:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007b66:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007b68:	7805      	ldrb	r5, [r0, #0]
 8007b6a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8007b6e:	b2d9      	uxtb	r1, r3
 8007b70:	2909      	cmp	r1, #9
 8007b72:	d927      	bls.n	8007bc4 <_strtod_l+0x1a4>
 8007b74:	4622      	mov	r2, r4
 8007b76:	4639      	mov	r1, r7
 8007b78:	f003 f860 	bl	800ac3c <strncmp>
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	d033      	beq.n	8007be8 <_strtod_l+0x1c8>
 8007b80:	2000      	movs	r0, #0
 8007b82:	462a      	mov	r2, r5
 8007b84:	465c      	mov	r4, fp
 8007b86:	4603      	mov	r3, r0
 8007b88:	9004      	str	r0, [sp, #16]
 8007b8a:	2a65      	cmp	r2, #101	; 0x65
 8007b8c:	d001      	beq.n	8007b92 <_strtod_l+0x172>
 8007b8e:	2a45      	cmp	r2, #69	; 0x45
 8007b90:	d114      	bne.n	8007bbc <_strtod_l+0x19c>
 8007b92:	b91c      	cbnz	r4, 8007b9c <_strtod_l+0x17c>
 8007b94:	9a07      	ldr	r2, [sp, #28]
 8007b96:	4302      	orrs	r2, r0
 8007b98:	d09f      	beq.n	8007ada <_strtod_l+0xba>
 8007b9a:	2400      	movs	r4, #0
 8007b9c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007b9e:	1c72      	adds	r2, r6, #1
 8007ba0:	9219      	str	r2, [sp, #100]	; 0x64
 8007ba2:	7872      	ldrb	r2, [r6, #1]
 8007ba4:	2a2b      	cmp	r2, #43	; 0x2b
 8007ba6:	d079      	beq.n	8007c9c <_strtod_l+0x27c>
 8007ba8:	2a2d      	cmp	r2, #45	; 0x2d
 8007baa:	f000 8083 	beq.w	8007cb4 <_strtod_l+0x294>
 8007bae:	2700      	movs	r7, #0
 8007bb0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007bb4:	2909      	cmp	r1, #9
 8007bb6:	f240 8083 	bls.w	8007cc0 <_strtod_l+0x2a0>
 8007bba:	9619      	str	r6, [sp, #100]	; 0x64
 8007bbc:	2500      	movs	r5, #0
 8007bbe:	e09f      	b.n	8007d00 <_strtod_l+0x2e0>
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	e7c8      	b.n	8007b56 <_strtod_l+0x136>
 8007bc4:	f1bb 0f08 	cmp.w	fp, #8
 8007bc8:	bfd5      	itete	le
 8007bca:	9906      	ldrle	r1, [sp, #24]
 8007bcc:	9905      	ldrgt	r1, [sp, #20]
 8007bce:	fb02 3301 	mlale	r3, r2, r1, r3
 8007bd2:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007bd6:	f100 0001 	add.w	r0, r0, #1
 8007bda:	bfd4      	ite	le
 8007bdc:	9306      	strle	r3, [sp, #24]
 8007bde:	9305      	strgt	r3, [sp, #20]
 8007be0:	f10b 0b01 	add.w	fp, fp, #1
 8007be4:	9019      	str	r0, [sp, #100]	; 0x64
 8007be6:	e7be      	b.n	8007b66 <_strtod_l+0x146>
 8007be8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bea:	191a      	adds	r2, r3, r4
 8007bec:	9219      	str	r2, [sp, #100]	; 0x64
 8007bee:	5d1a      	ldrb	r2, [r3, r4]
 8007bf0:	f1bb 0f00 	cmp.w	fp, #0
 8007bf4:	d036      	beq.n	8007c64 <_strtod_l+0x244>
 8007bf6:	465c      	mov	r4, fp
 8007bf8:	9004      	str	r0, [sp, #16]
 8007bfa:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007bfe:	2b09      	cmp	r3, #9
 8007c00:	d912      	bls.n	8007c28 <_strtod_l+0x208>
 8007c02:	2301      	movs	r3, #1
 8007c04:	e7c1      	b.n	8007b8a <_strtod_l+0x16a>
 8007c06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c08:	3001      	adds	r0, #1
 8007c0a:	1c5a      	adds	r2, r3, #1
 8007c0c:	9219      	str	r2, [sp, #100]	; 0x64
 8007c0e:	785a      	ldrb	r2, [r3, #1]
 8007c10:	2a30      	cmp	r2, #48	; 0x30
 8007c12:	d0f8      	beq.n	8007c06 <_strtod_l+0x1e6>
 8007c14:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007c18:	2b08      	cmp	r3, #8
 8007c1a:	f200 84d5 	bhi.w	80085c8 <_strtod_l+0xba8>
 8007c1e:	9004      	str	r0, [sp, #16]
 8007c20:	2000      	movs	r0, #0
 8007c22:	4604      	mov	r4, r0
 8007c24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c26:	9308      	str	r3, [sp, #32]
 8007c28:	3a30      	subs	r2, #48	; 0x30
 8007c2a:	f100 0301 	add.w	r3, r0, #1
 8007c2e:	d013      	beq.n	8007c58 <_strtod_l+0x238>
 8007c30:	9904      	ldr	r1, [sp, #16]
 8007c32:	1905      	adds	r5, r0, r4
 8007c34:	4419      	add	r1, r3
 8007c36:	9104      	str	r1, [sp, #16]
 8007c38:	4623      	mov	r3, r4
 8007c3a:	210a      	movs	r1, #10
 8007c3c:	42ab      	cmp	r3, r5
 8007c3e:	d113      	bne.n	8007c68 <_strtod_l+0x248>
 8007c40:	1823      	adds	r3, r4, r0
 8007c42:	2b08      	cmp	r3, #8
 8007c44:	f104 0401 	add.w	r4, r4, #1
 8007c48:	4404      	add	r4, r0
 8007c4a:	dc1b      	bgt.n	8007c84 <_strtod_l+0x264>
 8007c4c:	230a      	movs	r3, #10
 8007c4e:	9906      	ldr	r1, [sp, #24]
 8007c50:	fb03 2301 	mla	r3, r3, r1, r2
 8007c54:	9306      	str	r3, [sp, #24]
 8007c56:	2300      	movs	r3, #0
 8007c58:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	1c51      	adds	r1, r2, #1
 8007c5e:	9119      	str	r1, [sp, #100]	; 0x64
 8007c60:	7852      	ldrb	r2, [r2, #1]
 8007c62:	e7ca      	b.n	8007bfa <_strtod_l+0x1da>
 8007c64:	4658      	mov	r0, fp
 8007c66:	e7d3      	b.n	8007c10 <_strtod_l+0x1f0>
 8007c68:	2b08      	cmp	r3, #8
 8007c6a:	dc04      	bgt.n	8007c76 <_strtod_l+0x256>
 8007c6c:	9f06      	ldr	r7, [sp, #24]
 8007c6e:	434f      	muls	r7, r1
 8007c70:	9706      	str	r7, [sp, #24]
 8007c72:	3301      	adds	r3, #1
 8007c74:	e7e2      	b.n	8007c3c <_strtod_l+0x21c>
 8007c76:	1c5f      	adds	r7, r3, #1
 8007c78:	2f10      	cmp	r7, #16
 8007c7a:	bfde      	ittt	le
 8007c7c:	9f05      	ldrle	r7, [sp, #20]
 8007c7e:	434f      	mulle	r7, r1
 8007c80:	9705      	strle	r7, [sp, #20]
 8007c82:	e7f6      	b.n	8007c72 <_strtod_l+0x252>
 8007c84:	2c10      	cmp	r4, #16
 8007c86:	bfdf      	itttt	le
 8007c88:	230a      	movle	r3, #10
 8007c8a:	9905      	ldrle	r1, [sp, #20]
 8007c8c:	fb03 2301 	mlale	r3, r3, r1, r2
 8007c90:	9305      	strle	r3, [sp, #20]
 8007c92:	e7e0      	b.n	8007c56 <_strtod_l+0x236>
 8007c94:	2300      	movs	r3, #0
 8007c96:	9304      	str	r3, [sp, #16]
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e77b      	b.n	8007b94 <_strtod_l+0x174>
 8007c9c:	2700      	movs	r7, #0
 8007c9e:	1cb2      	adds	r2, r6, #2
 8007ca0:	9219      	str	r2, [sp, #100]	; 0x64
 8007ca2:	78b2      	ldrb	r2, [r6, #2]
 8007ca4:	e784      	b.n	8007bb0 <_strtod_l+0x190>
 8007ca6:	bf00      	nop
 8007ca8:	0800b840 	.word	0x0800b840
 8007cac:	0800b65c 	.word	0x0800b65c
 8007cb0:	7ff00000 	.word	0x7ff00000
 8007cb4:	2701      	movs	r7, #1
 8007cb6:	e7f2      	b.n	8007c9e <_strtod_l+0x27e>
 8007cb8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007cba:	1c51      	adds	r1, r2, #1
 8007cbc:	9119      	str	r1, [sp, #100]	; 0x64
 8007cbe:	7852      	ldrb	r2, [r2, #1]
 8007cc0:	2a30      	cmp	r2, #48	; 0x30
 8007cc2:	d0f9      	beq.n	8007cb8 <_strtod_l+0x298>
 8007cc4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007cc8:	2908      	cmp	r1, #8
 8007cca:	f63f af77 	bhi.w	8007bbc <_strtod_l+0x19c>
 8007cce:	f04f 0e0a 	mov.w	lr, #10
 8007cd2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8007cd6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007cd8:	9209      	str	r2, [sp, #36]	; 0x24
 8007cda:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007cdc:	1c51      	adds	r1, r2, #1
 8007cde:	9119      	str	r1, [sp, #100]	; 0x64
 8007ce0:	7852      	ldrb	r2, [r2, #1]
 8007ce2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8007ce6:	2d09      	cmp	r5, #9
 8007ce8:	d935      	bls.n	8007d56 <_strtod_l+0x336>
 8007cea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007cec:	1b49      	subs	r1, r1, r5
 8007cee:	2908      	cmp	r1, #8
 8007cf0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007cf4:	dc02      	bgt.n	8007cfc <_strtod_l+0x2dc>
 8007cf6:	4565      	cmp	r5, ip
 8007cf8:	bfa8      	it	ge
 8007cfa:	4665      	movge	r5, ip
 8007cfc:	b107      	cbz	r7, 8007d00 <_strtod_l+0x2e0>
 8007cfe:	426d      	negs	r5, r5
 8007d00:	2c00      	cmp	r4, #0
 8007d02:	d14c      	bne.n	8007d9e <_strtod_l+0x37e>
 8007d04:	9907      	ldr	r1, [sp, #28]
 8007d06:	4301      	orrs	r1, r0
 8007d08:	f47f aecb 	bne.w	8007aa2 <_strtod_l+0x82>
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f47f aee4 	bne.w	8007ada <_strtod_l+0xba>
 8007d12:	2a69      	cmp	r2, #105	; 0x69
 8007d14:	d026      	beq.n	8007d64 <_strtod_l+0x344>
 8007d16:	dc23      	bgt.n	8007d60 <_strtod_l+0x340>
 8007d18:	2a49      	cmp	r2, #73	; 0x49
 8007d1a:	d023      	beq.n	8007d64 <_strtod_l+0x344>
 8007d1c:	2a4e      	cmp	r2, #78	; 0x4e
 8007d1e:	f47f aedc 	bne.w	8007ada <_strtod_l+0xba>
 8007d22:	499d      	ldr	r1, [pc, #628]	; (8007f98 <_strtod_l+0x578>)
 8007d24:	a819      	add	r0, sp, #100	; 0x64
 8007d26:	f001 fe2d 	bl	8009984 <__match>
 8007d2a:	2800      	cmp	r0, #0
 8007d2c:	f43f aed5 	beq.w	8007ada <_strtod_l+0xba>
 8007d30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	2b28      	cmp	r3, #40	; 0x28
 8007d36:	d12c      	bne.n	8007d92 <_strtod_l+0x372>
 8007d38:	4998      	ldr	r1, [pc, #608]	; (8007f9c <_strtod_l+0x57c>)
 8007d3a:	aa1c      	add	r2, sp, #112	; 0x70
 8007d3c:	a819      	add	r0, sp, #100	; 0x64
 8007d3e:	f001 fe35 	bl	80099ac <__hexnan>
 8007d42:	2805      	cmp	r0, #5
 8007d44:	d125      	bne.n	8007d92 <_strtod_l+0x372>
 8007d46:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d48:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007d4c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007d50:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007d54:	e6a5      	b.n	8007aa2 <_strtod_l+0x82>
 8007d56:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8007d5a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007d5e:	e7bc      	b.n	8007cda <_strtod_l+0x2ba>
 8007d60:	2a6e      	cmp	r2, #110	; 0x6e
 8007d62:	e7dc      	b.n	8007d1e <_strtod_l+0x2fe>
 8007d64:	498e      	ldr	r1, [pc, #568]	; (8007fa0 <_strtod_l+0x580>)
 8007d66:	a819      	add	r0, sp, #100	; 0x64
 8007d68:	f001 fe0c 	bl	8009984 <__match>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	f43f aeb4 	beq.w	8007ada <_strtod_l+0xba>
 8007d72:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d74:	498b      	ldr	r1, [pc, #556]	; (8007fa4 <_strtod_l+0x584>)
 8007d76:	3b01      	subs	r3, #1
 8007d78:	a819      	add	r0, sp, #100	; 0x64
 8007d7a:	9319      	str	r3, [sp, #100]	; 0x64
 8007d7c:	f001 fe02 	bl	8009984 <__match>
 8007d80:	b910      	cbnz	r0, 8007d88 <_strtod_l+0x368>
 8007d82:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d84:	3301      	adds	r3, #1
 8007d86:	9319      	str	r3, [sp, #100]	; 0x64
 8007d88:	f04f 0800 	mov.w	r8, #0
 8007d8c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8007fa8 <_strtod_l+0x588>
 8007d90:	e687      	b.n	8007aa2 <_strtod_l+0x82>
 8007d92:	4886      	ldr	r0, [pc, #536]	; (8007fac <_strtod_l+0x58c>)
 8007d94:	f002 ff3c 	bl	800ac10 <nan>
 8007d98:	4680      	mov	r8, r0
 8007d9a:	4689      	mov	r9, r1
 8007d9c:	e681      	b.n	8007aa2 <_strtod_l+0x82>
 8007d9e:	9b04      	ldr	r3, [sp, #16]
 8007da0:	f1bb 0f00 	cmp.w	fp, #0
 8007da4:	bf08      	it	eq
 8007da6:	46a3      	moveq	fp, r4
 8007da8:	1aeb      	subs	r3, r5, r3
 8007daa:	2c10      	cmp	r4, #16
 8007dac:	9806      	ldr	r0, [sp, #24]
 8007dae:	4626      	mov	r6, r4
 8007db0:	9307      	str	r3, [sp, #28]
 8007db2:	bfa8      	it	ge
 8007db4:	2610      	movge	r6, #16
 8007db6:	f7f8 fb1f 	bl	80003f8 <__aeabi_ui2d>
 8007dba:	2c09      	cmp	r4, #9
 8007dbc:	4680      	mov	r8, r0
 8007dbe:	4689      	mov	r9, r1
 8007dc0:	dd13      	ble.n	8007dea <_strtod_l+0x3ca>
 8007dc2:	4b7b      	ldr	r3, [pc, #492]	; (8007fb0 <_strtod_l+0x590>)
 8007dc4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007dc8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007dcc:	f7f8 fb8e 	bl	80004ec <__aeabi_dmul>
 8007dd0:	4680      	mov	r8, r0
 8007dd2:	9805      	ldr	r0, [sp, #20]
 8007dd4:	4689      	mov	r9, r1
 8007dd6:	f7f8 fb0f 	bl	80003f8 <__aeabi_ui2d>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	4640      	mov	r0, r8
 8007de0:	4649      	mov	r1, r9
 8007de2:	f7f8 f9cd 	bl	8000180 <__adddf3>
 8007de6:	4680      	mov	r8, r0
 8007de8:	4689      	mov	r9, r1
 8007dea:	2c0f      	cmp	r4, #15
 8007dec:	dc36      	bgt.n	8007e5c <_strtod_l+0x43c>
 8007dee:	9b07      	ldr	r3, [sp, #28]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f43f ae56 	beq.w	8007aa2 <_strtod_l+0x82>
 8007df6:	dd22      	ble.n	8007e3e <_strtod_l+0x41e>
 8007df8:	2b16      	cmp	r3, #22
 8007dfa:	dc09      	bgt.n	8007e10 <_strtod_l+0x3f0>
 8007dfc:	496c      	ldr	r1, [pc, #432]	; (8007fb0 <_strtod_l+0x590>)
 8007dfe:	4642      	mov	r2, r8
 8007e00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e04:	464b      	mov	r3, r9
 8007e06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e0a:	f7f8 fb6f 	bl	80004ec <__aeabi_dmul>
 8007e0e:	e7c3      	b.n	8007d98 <_strtod_l+0x378>
 8007e10:	9a07      	ldr	r2, [sp, #28]
 8007e12:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007e16:	4293      	cmp	r3, r2
 8007e18:	db20      	blt.n	8007e5c <_strtod_l+0x43c>
 8007e1a:	4d65      	ldr	r5, [pc, #404]	; (8007fb0 <_strtod_l+0x590>)
 8007e1c:	f1c4 040f 	rsb	r4, r4, #15
 8007e20:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007e24:	4642      	mov	r2, r8
 8007e26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e2a:	464b      	mov	r3, r9
 8007e2c:	f7f8 fb5e 	bl	80004ec <__aeabi_dmul>
 8007e30:	9b07      	ldr	r3, [sp, #28]
 8007e32:	1b1c      	subs	r4, r3, r4
 8007e34:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007e38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e3c:	e7e5      	b.n	8007e0a <_strtod_l+0x3ea>
 8007e3e:	9b07      	ldr	r3, [sp, #28]
 8007e40:	3316      	adds	r3, #22
 8007e42:	db0b      	blt.n	8007e5c <_strtod_l+0x43c>
 8007e44:	9b04      	ldr	r3, [sp, #16]
 8007e46:	4640      	mov	r0, r8
 8007e48:	1b5d      	subs	r5, r3, r5
 8007e4a:	4b59      	ldr	r3, [pc, #356]	; (8007fb0 <_strtod_l+0x590>)
 8007e4c:	4649      	mov	r1, r9
 8007e4e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007e52:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e56:	f7f8 fc73 	bl	8000740 <__aeabi_ddiv>
 8007e5a:	e79d      	b.n	8007d98 <_strtod_l+0x378>
 8007e5c:	9b07      	ldr	r3, [sp, #28]
 8007e5e:	1ba6      	subs	r6, r4, r6
 8007e60:	441e      	add	r6, r3
 8007e62:	2e00      	cmp	r6, #0
 8007e64:	dd74      	ble.n	8007f50 <_strtod_l+0x530>
 8007e66:	f016 030f 	ands.w	r3, r6, #15
 8007e6a:	d00a      	beq.n	8007e82 <_strtod_l+0x462>
 8007e6c:	4950      	ldr	r1, [pc, #320]	; (8007fb0 <_strtod_l+0x590>)
 8007e6e:	4642      	mov	r2, r8
 8007e70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e78:	464b      	mov	r3, r9
 8007e7a:	f7f8 fb37 	bl	80004ec <__aeabi_dmul>
 8007e7e:	4680      	mov	r8, r0
 8007e80:	4689      	mov	r9, r1
 8007e82:	f036 060f 	bics.w	r6, r6, #15
 8007e86:	d052      	beq.n	8007f2e <_strtod_l+0x50e>
 8007e88:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8007e8c:	dd27      	ble.n	8007ede <_strtod_l+0x4be>
 8007e8e:	f04f 0b00 	mov.w	fp, #0
 8007e92:	f8cd b010 	str.w	fp, [sp, #16]
 8007e96:	f8cd b020 	str.w	fp, [sp, #32]
 8007e9a:	f8cd b018 	str.w	fp, [sp, #24]
 8007e9e:	2322      	movs	r3, #34	; 0x22
 8007ea0:	f04f 0800 	mov.w	r8, #0
 8007ea4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007fa8 <_strtod_l+0x588>
 8007ea8:	f8ca 3000 	str.w	r3, [sl]
 8007eac:	9b08      	ldr	r3, [sp, #32]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f43f adf7 	beq.w	8007aa2 <_strtod_l+0x82>
 8007eb4:	4650      	mov	r0, sl
 8007eb6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007eb8:	f001 fe8e 	bl	8009bd8 <_Bfree>
 8007ebc:	4650      	mov	r0, sl
 8007ebe:	9906      	ldr	r1, [sp, #24]
 8007ec0:	f001 fe8a 	bl	8009bd8 <_Bfree>
 8007ec4:	4650      	mov	r0, sl
 8007ec6:	9904      	ldr	r1, [sp, #16]
 8007ec8:	f001 fe86 	bl	8009bd8 <_Bfree>
 8007ecc:	4650      	mov	r0, sl
 8007ece:	9908      	ldr	r1, [sp, #32]
 8007ed0:	f001 fe82 	bl	8009bd8 <_Bfree>
 8007ed4:	4659      	mov	r1, fp
 8007ed6:	4650      	mov	r0, sl
 8007ed8:	f001 fe7e 	bl	8009bd8 <_Bfree>
 8007edc:	e5e1      	b.n	8007aa2 <_strtod_l+0x82>
 8007ede:	4b35      	ldr	r3, [pc, #212]	; (8007fb4 <_strtod_l+0x594>)
 8007ee0:	4640      	mov	r0, r8
 8007ee2:	9305      	str	r3, [sp, #20]
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	4649      	mov	r1, r9
 8007ee8:	461f      	mov	r7, r3
 8007eea:	1136      	asrs	r6, r6, #4
 8007eec:	2e01      	cmp	r6, #1
 8007eee:	dc21      	bgt.n	8007f34 <_strtod_l+0x514>
 8007ef0:	b10b      	cbz	r3, 8007ef6 <_strtod_l+0x4d6>
 8007ef2:	4680      	mov	r8, r0
 8007ef4:	4689      	mov	r9, r1
 8007ef6:	4b2f      	ldr	r3, [pc, #188]	; (8007fb4 <_strtod_l+0x594>)
 8007ef8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007efc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007f00:	4642      	mov	r2, r8
 8007f02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f06:	464b      	mov	r3, r9
 8007f08:	f7f8 faf0 	bl	80004ec <__aeabi_dmul>
 8007f0c:	4b26      	ldr	r3, [pc, #152]	; (8007fa8 <_strtod_l+0x588>)
 8007f0e:	460a      	mov	r2, r1
 8007f10:	400b      	ands	r3, r1
 8007f12:	4929      	ldr	r1, [pc, #164]	; (8007fb8 <_strtod_l+0x598>)
 8007f14:	4680      	mov	r8, r0
 8007f16:	428b      	cmp	r3, r1
 8007f18:	d8b9      	bhi.n	8007e8e <_strtod_l+0x46e>
 8007f1a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007f1e:	428b      	cmp	r3, r1
 8007f20:	bf86      	itte	hi
 8007f22:	f04f 38ff 	movhi.w	r8, #4294967295
 8007f26:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007fbc <_strtod_l+0x59c>
 8007f2a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007f2e:	2300      	movs	r3, #0
 8007f30:	9305      	str	r3, [sp, #20]
 8007f32:	e07f      	b.n	8008034 <_strtod_l+0x614>
 8007f34:	07f2      	lsls	r2, r6, #31
 8007f36:	d505      	bpl.n	8007f44 <_strtod_l+0x524>
 8007f38:	9b05      	ldr	r3, [sp, #20]
 8007f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3e:	f7f8 fad5 	bl	80004ec <__aeabi_dmul>
 8007f42:	2301      	movs	r3, #1
 8007f44:	9a05      	ldr	r2, [sp, #20]
 8007f46:	3701      	adds	r7, #1
 8007f48:	3208      	adds	r2, #8
 8007f4a:	1076      	asrs	r6, r6, #1
 8007f4c:	9205      	str	r2, [sp, #20]
 8007f4e:	e7cd      	b.n	8007eec <_strtod_l+0x4cc>
 8007f50:	d0ed      	beq.n	8007f2e <_strtod_l+0x50e>
 8007f52:	4276      	negs	r6, r6
 8007f54:	f016 020f 	ands.w	r2, r6, #15
 8007f58:	d00a      	beq.n	8007f70 <_strtod_l+0x550>
 8007f5a:	4b15      	ldr	r3, [pc, #84]	; (8007fb0 <_strtod_l+0x590>)
 8007f5c:	4640      	mov	r0, r8
 8007f5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f62:	4649      	mov	r1, r9
 8007f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f68:	f7f8 fbea 	bl	8000740 <__aeabi_ddiv>
 8007f6c:	4680      	mov	r8, r0
 8007f6e:	4689      	mov	r9, r1
 8007f70:	1136      	asrs	r6, r6, #4
 8007f72:	d0dc      	beq.n	8007f2e <_strtod_l+0x50e>
 8007f74:	2e1f      	cmp	r6, #31
 8007f76:	dd23      	ble.n	8007fc0 <_strtod_l+0x5a0>
 8007f78:	f04f 0b00 	mov.w	fp, #0
 8007f7c:	f8cd b010 	str.w	fp, [sp, #16]
 8007f80:	f8cd b020 	str.w	fp, [sp, #32]
 8007f84:	f8cd b018 	str.w	fp, [sp, #24]
 8007f88:	2322      	movs	r3, #34	; 0x22
 8007f8a:	f04f 0800 	mov.w	r8, #0
 8007f8e:	f04f 0900 	mov.w	r9, #0
 8007f92:	f8ca 3000 	str.w	r3, [sl]
 8007f96:	e789      	b.n	8007eac <_strtod_l+0x48c>
 8007f98:	0800b635 	.word	0x0800b635
 8007f9c:	0800b670 	.word	0x0800b670
 8007fa0:	0800b62d 	.word	0x0800b62d
 8007fa4:	0800b763 	.word	0x0800b763
 8007fa8:	7ff00000 	.word	0x7ff00000
 8007fac:	0800b75f 	.word	0x0800b75f
 8007fb0:	0800b8d8 	.word	0x0800b8d8
 8007fb4:	0800b8b0 	.word	0x0800b8b0
 8007fb8:	7ca00000 	.word	0x7ca00000
 8007fbc:	7fefffff 	.word	0x7fefffff
 8007fc0:	f016 0310 	ands.w	r3, r6, #16
 8007fc4:	bf18      	it	ne
 8007fc6:	236a      	movne	r3, #106	; 0x6a
 8007fc8:	4640      	mov	r0, r8
 8007fca:	9305      	str	r3, [sp, #20]
 8007fcc:	4649      	mov	r1, r9
 8007fce:	2300      	movs	r3, #0
 8007fd0:	4fb0      	ldr	r7, [pc, #704]	; (8008294 <_strtod_l+0x874>)
 8007fd2:	07f2      	lsls	r2, r6, #31
 8007fd4:	d504      	bpl.n	8007fe0 <_strtod_l+0x5c0>
 8007fd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fda:	f7f8 fa87 	bl	80004ec <__aeabi_dmul>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	1076      	asrs	r6, r6, #1
 8007fe2:	f107 0708 	add.w	r7, r7, #8
 8007fe6:	d1f4      	bne.n	8007fd2 <_strtod_l+0x5b2>
 8007fe8:	b10b      	cbz	r3, 8007fee <_strtod_l+0x5ce>
 8007fea:	4680      	mov	r8, r0
 8007fec:	4689      	mov	r9, r1
 8007fee:	9b05      	ldr	r3, [sp, #20]
 8007ff0:	b1c3      	cbz	r3, 8008024 <_strtod_l+0x604>
 8007ff2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007ff6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	4649      	mov	r1, r9
 8007ffe:	dd11      	ble.n	8008024 <_strtod_l+0x604>
 8008000:	2b1f      	cmp	r3, #31
 8008002:	f340 8127 	ble.w	8008254 <_strtod_l+0x834>
 8008006:	2b34      	cmp	r3, #52	; 0x34
 8008008:	bfd8      	it	le
 800800a:	f04f 33ff 	movle.w	r3, #4294967295
 800800e:	f04f 0800 	mov.w	r8, #0
 8008012:	bfcf      	iteee	gt
 8008014:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008018:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800801c:	fa03 f202 	lslle.w	r2, r3, r2
 8008020:	ea02 0901 	andle.w	r9, r2, r1
 8008024:	2200      	movs	r2, #0
 8008026:	2300      	movs	r3, #0
 8008028:	4640      	mov	r0, r8
 800802a:	4649      	mov	r1, r9
 800802c:	f7f8 fcc6 	bl	80009bc <__aeabi_dcmpeq>
 8008030:	2800      	cmp	r0, #0
 8008032:	d1a1      	bne.n	8007f78 <_strtod_l+0x558>
 8008034:	9b06      	ldr	r3, [sp, #24]
 8008036:	465a      	mov	r2, fp
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	4650      	mov	r0, sl
 800803c:	4623      	mov	r3, r4
 800803e:	9908      	ldr	r1, [sp, #32]
 8008040:	f001 fe32 	bl	8009ca8 <__s2b>
 8008044:	9008      	str	r0, [sp, #32]
 8008046:	2800      	cmp	r0, #0
 8008048:	f43f af21 	beq.w	8007e8e <_strtod_l+0x46e>
 800804c:	9b04      	ldr	r3, [sp, #16]
 800804e:	f04f 0b00 	mov.w	fp, #0
 8008052:	1b5d      	subs	r5, r3, r5
 8008054:	9b07      	ldr	r3, [sp, #28]
 8008056:	f8cd b010 	str.w	fp, [sp, #16]
 800805a:	2b00      	cmp	r3, #0
 800805c:	bfb4      	ite	lt
 800805e:	462b      	movlt	r3, r5
 8008060:	2300      	movge	r3, #0
 8008062:	930e      	str	r3, [sp, #56]	; 0x38
 8008064:	9b07      	ldr	r3, [sp, #28]
 8008066:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800806a:	9314      	str	r3, [sp, #80]	; 0x50
 800806c:	9b08      	ldr	r3, [sp, #32]
 800806e:	4650      	mov	r0, sl
 8008070:	6859      	ldr	r1, [r3, #4]
 8008072:	f001 fd71 	bl	8009b58 <_Balloc>
 8008076:	9006      	str	r0, [sp, #24]
 8008078:	2800      	cmp	r0, #0
 800807a:	f43f af10 	beq.w	8007e9e <_strtod_l+0x47e>
 800807e:	9b08      	ldr	r3, [sp, #32]
 8008080:	300c      	adds	r0, #12
 8008082:	691a      	ldr	r2, [r3, #16]
 8008084:	f103 010c 	add.w	r1, r3, #12
 8008088:	3202      	adds	r2, #2
 800808a:	0092      	lsls	r2, r2, #2
 800808c:	f001 fd56 	bl	8009b3c <memcpy>
 8008090:	ab1c      	add	r3, sp, #112	; 0x70
 8008092:	9301      	str	r3, [sp, #4]
 8008094:	ab1b      	add	r3, sp, #108	; 0x6c
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	4642      	mov	r2, r8
 800809a:	464b      	mov	r3, r9
 800809c:	4650      	mov	r0, sl
 800809e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80080a2:	f002 f943 	bl	800a32c <__d2b>
 80080a6:	901a      	str	r0, [sp, #104]	; 0x68
 80080a8:	2800      	cmp	r0, #0
 80080aa:	f43f aef8 	beq.w	8007e9e <_strtod_l+0x47e>
 80080ae:	2101      	movs	r1, #1
 80080b0:	4650      	mov	r0, sl
 80080b2:	f001 fe91 	bl	8009dd8 <__i2b>
 80080b6:	4603      	mov	r3, r0
 80080b8:	9004      	str	r0, [sp, #16]
 80080ba:	2800      	cmp	r0, #0
 80080bc:	f43f aeef 	beq.w	8007e9e <_strtod_l+0x47e>
 80080c0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80080c2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80080c4:	2d00      	cmp	r5, #0
 80080c6:	bfab      	itete	ge
 80080c8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80080ca:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80080cc:	18ee      	addge	r6, r5, r3
 80080ce:	1b5c      	sublt	r4, r3, r5
 80080d0:	9b05      	ldr	r3, [sp, #20]
 80080d2:	bfa8      	it	ge
 80080d4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80080d6:	eba5 0503 	sub.w	r5, r5, r3
 80080da:	4415      	add	r5, r2
 80080dc:	4b6e      	ldr	r3, [pc, #440]	; (8008298 <_strtod_l+0x878>)
 80080de:	f105 35ff 	add.w	r5, r5, #4294967295
 80080e2:	bfb8      	it	lt
 80080e4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80080e6:	429d      	cmp	r5, r3
 80080e8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80080ec:	f280 80c4 	bge.w	8008278 <_strtod_l+0x858>
 80080f0:	1b5b      	subs	r3, r3, r5
 80080f2:	2b1f      	cmp	r3, #31
 80080f4:	f04f 0701 	mov.w	r7, #1
 80080f8:	eba2 0203 	sub.w	r2, r2, r3
 80080fc:	f300 80b1 	bgt.w	8008262 <_strtod_l+0x842>
 8008100:	2500      	movs	r5, #0
 8008102:	fa07 f303 	lsl.w	r3, r7, r3
 8008106:	930f      	str	r3, [sp, #60]	; 0x3c
 8008108:	18b7      	adds	r7, r6, r2
 800810a:	9b05      	ldr	r3, [sp, #20]
 800810c:	42be      	cmp	r6, r7
 800810e:	4414      	add	r4, r2
 8008110:	441c      	add	r4, r3
 8008112:	4633      	mov	r3, r6
 8008114:	bfa8      	it	ge
 8008116:	463b      	movge	r3, r7
 8008118:	42a3      	cmp	r3, r4
 800811a:	bfa8      	it	ge
 800811c:	4623      	movge	r3, r4
 800811e:	2b00      	cmp	r3, #0
 8008120:	bfc2      	ittt	gt
 8008122:	1aff      	subgt	r7, r7, r3
 8008124:	1ae4      	subgt	r4, r4, r3
 8008126:	1af6      	subgt	r6, r6, r3
 8008128:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800812a:	2b00      	cmp	r3, #0
 800812c:	dd17      	ble.n	800815e <_strtod_l+0x73e>
 800812e:	461a      	mov	r2, r3
 8008130:	4650      	mov	r0, sl
 8008132:	9904      	ldr	r1, [sp, #16]
 8008134:	f001 ff0e 	bl	8009f54 <__pow5mult>
 8008138:	9004      	str	r0, [sp, #16]
 800813a:	2800      	cmp	r0, #0
 800813c:	f43f aeaf 	beq.w	8007e9e <_strtod_l+0x47e>
 8008140:	4601      	mov	r1, r0
 8008142:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008144:	4650      	mov	r0, sl
 8008146:	f001 fe5d 	bl	8009e04 <__multiply>
 800814a:	9009      	str	r0, [sp, #36]	; 0x24
 800814c:	2800      	cmp	r0, #0
 800814e:	f43f aea6 	beq.w	8007e9e <_strtod_l+0x47e>
 8008152:	4650      	mov	r0, sl
 8008154:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008156:	f001 fd3f 	bl	8009bd8 <_Bfree>
 800815a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800815c:	931a      	str	r3, [sp, #104]	; 0x68
 800815e:	2f00      	cmp	r7, #0
 8008160:	f300 808e 	bgt.w	8008280 <_strtod_l+0x860>
 8008164:	9b07      	ldr	r3, [sp, #28]
 8008166:	2b00      	cmp	r3, #0
 8008168:	dd08      	ble.n	800817c <_strtod_l+0x75c>
 800816a:	4650      	mov	r0, sl
 800816c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800816e:	9906      	ldr	r1, [sp, #24]
 8008170:	f001 fef0 	bl	8009f54 <__pow5mult>
 8008174:	9006      	str	r0, [sp, #24]
 8008176:	2800      	cmp	r0, #0
 8008178:	f43f ae91 	beq.w	8007e9e <_strtod_l+0x47e>
 800817c:	2c00      	cmp	r4, #0
 800817e:	dd08      	ble.n	8008192 <_strtod_l+0x772>
 8008180:	4622      	mov	r2, r4
 8008182:	4650      	mov	r0, sl
 8008184:	9906      	ldr	r1, [sp, #24]
 8008186:	f001 ff3f 	bl	800a008 <__lshift>
 800818a:	9006      	str	r0, [sp, #24]
 800818c:	2800      	cmp	r0, #0
 800818e:	f43f ae86 	beq.w	8007e9e <_strtod_l+0x47e>
 8008192:	2e00      	cmp	r6, #0
 8008194:	dd08      	ble.n	80081a8 <_strtod_l+0x788>
 8008196:	4632      	mov	r2, r6
 8008198:	4650      	mov	r0, sl
 800819a:	9904      	ldr	r1, [sp, #16]
 800819c:	f001 ff34 	bl	800a008 <__lshift>
 80081a0:	9004      	str	r0, [sp, #16]
 80081a2:	2800      	cmp	r0, #0
 80081a4:	f43f ae7b 	beq.w	8007e9e <_strtod_l+0x47e>
 80081a8:	4650      	mov	r0, sl
 80081aa:	9a06      	ldr	r2, [sp, #24]
 80081ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 80081ae:	f001 ffb7 	bl	800a120 <__mdiff>
 80081b2:	4683      	mov	fp, r0
 80081b4:	2800      	cmp	r0, #0
 80081b6:	f43f ae72 	beq.w	8007e9e <_strtod_l+0x47e>
 80081ba:	2400      	movs	r4, #0
 80081bc:	68c3      	ldr	r3, [r0, #12]
 80081be:	9904      	ldr	r1, [sp, #16]
 80081c0:	60c4      	str	r4, [r0, #12]
 80081c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80081c4:	f001 ff90 	bl	800a0e8 <__mcmp>
 80081c8:	42a0      	cmp	r0, r4
 80081ca:	da6b      	bge.n	80082a4 <_strtod_l+0x884>
 80081cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081ce:	ea53 0308 	orrs.w	r3, r3, r8
 80081d2:	f040 8091 	bne.w	80082f8 <_strtod_l+0x8d8>
 80081d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f040 808c 	bne.w	80082f8 <_strtod_l+0x8d8>
 80081e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80081e4:	0d1b      	lsrs	r3, r3, #20
 80081e6:	051b      	lsls	r3, r3, #20
 80081e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80081ec:	f240 8084 	bls.w	80082f8 <_strtod_l+0x8d8>
 80081f0:	f8db 3014 	ldr.w	r3, [fp, #20]
 80081f4:	b91b      	cbnz	r3, 80081fe <_strtod_l+0x7de>
 80081f6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	dd7c      	ble.n	80082f8 <_strtod_l+0x8d8>
 80081fe:	4659      	mov	r1, fp
 8008200:	2201      	movs	r2, #1
 8008202:	4650      	mov	r0, sl
 8008204:	f001 ff00 	bl	800a008 <__lshift>
 8008208:	9904      	ldr	r1, [sp, #16]
 800820a:	4683      	mov	fp, r0
 800820c:	f001 ff6c 	bl	800a0e8 <__mcmp>
 8008210:	2800      	cmp	r0, #0
 8008212:	dd71      	ble.n	80082f8 <_strtod_l+0x8d8>
 8008214:	9905      	ldr	r1, [sp, #20]
 8008216:	464b      	mov	r3, r9
 8008218:	4a20      	ldr	r2, [pc, #128]	; (800829c <_strtod_l+0x87c>)
 800821a:	2900      	cmp	r1, #0
 800821c:	f000 808c 	beq.w	8008338 <_strtod_l+0x918>
 8008220:	ea02 0109 	and.w	r1, r2, r9
 8008224:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008228:	f300 8086 	bgt.w	8008338 <_strtod_l+0x918>
 800822c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008230:	f77f aeaa 	ble.w	8007f88 <_strtod_l+0x568>
 8008234:	4640      	mov	r0, r8
 8008236:	4649      	mov	r1, r9
 8008238:	4b19      	ldr	r3, [pc, #100]	; (80082a0 <_strtod_l+0x880>)
 800823a:	2200      	movs	r2, #0
 800823c:	f7f8 f956 	bl	80004ec <__aeabi_dmul>
 8008240:	460b      	mov	r3, r1
 8008242:	4303      	orrs	r3, r0
 8008244:	bf08      	it	eq
 8008246:	2322      	moveq	r3, #34	; 0x22
 8008248:	4680      	mov	r8, r0
 800824a:	4689      	mov	r9, r1
 800824c:	bf08      	it	eq
 800824e:	f8ca 3000 	streq.w	r3, [sl]
 8008252:	e62f      	b.n	8007eb4 <_strtod_l+0x494>
 8008254:	f04f 32ff 	mov.w	r2, #4294967295
 8008258:	fa02 f303 	lsl.w	r3, r2, r3
 800825c:	ea03 0808 	and.w	r8, r3, r8
 8008260:	e6e0      	b.n	8008024 <_strtod_l+0x604>
 8008262:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8008266:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800826a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800826e:	35e2      	adds	r5, #226	; 0xe2
 8008270:	fa07 f505 	lsl.w	r5, r7, r5
 8008274:	970f      	str	r7, [sp, #60]	; 0x3c
 8008276:	e747      	b.n	8008108 <_strtod_l+0x6e8>
 8008278:	2301      	movs	r3, #1
 800827a:	2500      	movs	r5, #0
 800827c:	930f      	str	r3, [sp, #60]	; 0x3c
 800827e:	e743      	b.n	8008108 <_strtod_l+0x6e8>
 8008280:	463a      	mov	r2, r7
 8008282:	4650      	mov	r0, sl
 8008284:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008286:	f001 febf 	bl	800a008 <__lshift>
 800828a:	901a      	str	r0, [sp, #104]	; 0x68
 800828c:	2800      	cmp	r0, #0
 800828e:	f47f af69 	bne.w	8008164 <_strtod_l+0x744>
 8008292:	e604      	b.n	8007e9e <_strtod_l+0x47e>
 8008294:	0800b688 	.word	0x0800b688
 8008298:	fffffc02 	.word	0xfffffc02
 800829c:	7ff00000 	.word	0x7ff00000
 80082a0:	39500000 	.word	0x39500000
 80082a4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80082a8:	d165      	bne.n	8008376 <_strtod_l+0x956>
 80082aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80082ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80082b0:	b35a      	cbz	r2, 800830a <_strtod_l+0x8ea>
 80082b2:	4a99      	ldr	r2, [pc, #612]	; (8008518 <_strtod_l+0xaf8>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d12b      	bne.n	8008310 <_strtod_l+0x8f0>
 80082b8:	9b05      	ldr	r3, [sp, #20]
 80082ba:	4641      	mov	r1, r8
 80082bc:	b303      	cbz	r3, 8008300 <_strtod_l+0x8e0>
 80082be:	464a      	mov	r2, r9
 80082c0:	4b96      	ldr	r3, [pc, #600]	; (800851c <_strtod_l+0xafc>)
 80082c2:	4013      	ands	r3, r2
 80082c4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80082c8:	f04f 32ff 	mov.w	r2, #4294967295
 80082cc:	d81b      	bhi.n	8008306 <_strtod_l+0x8e6>
 80082ce:	0d1b      	lsrs	r3, r3, #20
 80082d0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80082d4:	fa02 f303 	lsl.w	r3, r2, r3
 80082d8:	4299      	cmp	r1, r3
 80082da:	d119      	bne.n	8008310 <_strtod_l+0x8f0>
 80082dc:	4b90      	ldr	r3, [pc, #576]	; (8008520 <_strtod_l+0xb00>)
 80082de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d102      	bne.n	80082ea <_strtod_l+0x8ca>
 80082e4:	3101      	adds	r1, #1
 80082e6:	f43f adda 	beq.w	8007e9e <_strtod_l+0x47e>
 80082ea:	f04f 0800 	mov.w	r8, #0
 80082ee:	4b8b      	ldr	r3, [pc, #556]	; (800851c <_strtod_l+0xafc>)
 80082f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082f2:	401a      	ands	r2, r3
 80082f4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80082f8:	9b05      	ldr	r3, [sp, #20]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d19a      	bne.n	8008234 <_strtod_l+0x814>
 80082fe:	e5d9      	b.n	8007eb4 <_strtod_l+0x494>
 8008300:	f04f 33ff 	mov.w	r3, #4294967295
 8008304:	e7e8      	b.n	80082d8 <_strtod_l+0x8b8>
 8008306:	4613      	mov	r3, r2
 8008308:	e7e6      	b.n	80082d8 <_strtod_l+0x8b8>
 800830a:	ea53 0308 	orrs.w	r3, r3, r8
 800830e:	d081      	beq.n	8008214 <_strtod_l+0x7f4>
 8008310:	b1e5      	cbz	r5, 800834c <_strtod_l+0x92c>
 8008312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008314:	421d      	tst	r5, r3
 8008316:	d0ef      	beq.n	80082f8 <_strtod_l+0x8d8>
 8008318:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800831a:	4640      	mov	r0, r8
 800831c:	4649      	mov	r1, r9
 800831e:	9a05      	ldr	r2, [sp, #20]
 8008320:	b1c3      	cbz	r3, 8008354 <_strtod_l+0x934>
 8008322:	f7ff fb59 	bl	80079d8 <sulp>
 8008326:	4602      	mov	r2, r0
 8008328:	460b      	mov	r3, r1
 800832a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800832e:	f7f7 ff27 	bl	8000180 <__adddf3>
 8008332:	4680      	mov	r8, r0
 8008334:	4689      	mov	r9, r1
 8008336:	e7df      	b.n	80082f8 <_strtod_l+0x8d8>
 8008338:	4013      	ands	r3, r2
 800833a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800833e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008342:	f04f 38ff 	mov.w	r8, #4294967295
 8008346:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800834a:	e7d5      	b.n	80082f8 <_strtod_l+0x8d8>
 800834c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800834e:	ea13 0f08 	tst.w	r3, r8
 8008352:	e7e0      	b.n	8008316 <_strtod_l+0x8f6>
 8008354:	f7ff fb40 	bl	80079d8 <sulp>
 8008358:	4602      	mov	r2, r0
 800835a:	460b      	mov	r3, r1
 800835c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008360:	f7f7 ff0c 	bl	800017c <__aeabi_dsub>
 8008364:	2200      	movs	r2, #0
 8008366:	2300      	movs	r3, #0
 8008368:	4680      	mov	r8, r0
 800836a:	4689      	mov	r9, r1
 800836c:	f7f8 fb26 	bl	80009bc <__aeabi_dcmpeq>
 8008370:	2800      	cmp	r0, #0
 8008372:	d0c1      	beq.n	80082f8 <_strtod_l+0x8d8>
 8008374:	e608      	b.n	8007f88 <_strtod_l+0x568>
 8008376:	4658      	mov	r0, fp
 8008378:	9904      	ldr	r1, [sp, #16]
 800837a:	f002 f833 	bl	800a3e4 <__ratio>
 800837e:	2200      	movs	r2, #0
 8008380:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008384:	4606      	mov	r6, r0
 8008386:	460f      	mov	r7, r1
 8008388:	f7f8 fb2c 	bl	80009e4 <__aeabi_dcmple>
 800838c:	2800      	cmp	r0, #0
 800838e:	d070      	beq.n	8008472 <_strtod_l+0xa52>
 8008390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008392:	2b00      	cmp	r3, #0
 8008394:	d042      	beq.n	800841c <_strtod_l+0x9fc>
 8008396:	2600      	movs	r6, #0
 8008398:	4f62      	ldr	r7, [pc, #392]	; (8008524 <_strtod_l+0xb04>)
 800839a:	4d62      	ldr	r5, [pc, #392]	; (8008524 <_strtod_l+0xb04>)
 800839c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800839e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80083a2:	0d1b      	lsrs	r3, r3, #20
 80083a4:	051b      	lsls	r3, r3, #20
 80083a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80083a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80083aa:	4b5f      	ldr	r3, [pc, #380]	; (8008528 <_strtod_l+0xb08>)
 80083ac:	429a      	cmp	r2, r3
 80083ae:	f040 80c3 	bne.w	8008538 <_strtod_l+0xb18>
 80083b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083b4:	4640      	mov	r0, r8
 80083b6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80083ba:	4649      	mov	r1, r9
 80083bc:	f001 ff3c 	bl	800a238 <__ulp>
 80083c0:	4602      	mov	r2, r0
 80083c2:	460b      	mov	r3, r1
 80083c4:	4630      	mov	r0, r6
 80083c6:	4639      	mov	r1, r7
 80083c8:	f7f8 f890 	bl	80004ec <__aeabi_dmul>
 80083cc:	4642      	mov	r2, r8
 80083ce:	464b      	mov	r3, r9
 80083d0:	f7f7 fed6 	bl	8000180 <__adddf3>
 80083d4:	460b      	mov	r3, r1
 80083d6:	4951      	ldr	r1, [pc, #324]	; (800851c <_strtod_l+0xafc>)
 80083d8:	4a54      	ldr	r2, [pc, #336]	; (800852c <_strtod_l+0xb0c>)
 80083da:	4019      	ands	r1, r3
 80083dc:	4291      	cmp	r1, r2
 80083de:	4680      	mov	r8, r0
 80083e0:	d95d      	bls.n	800849e <_strtod_l+0xa7e>
 80083e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083e4:	4b4e      	ldr	r3, [pc, #312]	; (8008520 <_strtod_l+0xb00>)
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d103      	bne.n	80083f2 <_strtod_l+0x9d2>
 80083ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083ec:	3301      	adds	r3, #1
 80083ee:	f43f ad56 	beq.w	8007e9e <_strtod_l+0x47e>
 80083f2:	f04f 38ff 	mov.w	r8, #4294967295
 80083f6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8008520 <_strtod_l+0xb00>
 80083fa:	4650      	mov	r0, sl
 80083fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80083fe:	f001 fbeb 	bl	8009bd8 <_Bfree>
 8008402:	4650      	mov	r0, sl
 8008404:	9906      	ldr	r1, [sp, #24]
 8008406:	f001 fbe7 	bl	8009bd8 <_Bfree>
 800840a:	4650      	mov	r0, sl
 800840c:	9904      	ldr	r1, [sp, #16]
 800840e:	f001 fbe3 	bl	8009bd8 <_Bfree>
 8008412:	4659      	mov	r1, fp
 8008414:	4650      	mov	r0, sl
 8008416:	f001 fbdf 	bl	8009bd8 <_Bfree>
 800841a:	e627      	b.n	800806c <_strtod_l+0x64c>
 800841c:	f1b8 0f00 	cmp.w	r8, #0
 8008420:	d119      	bne.n	8008456 <_strtod_l+0xa36>
 8008422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008428:	b9e3      	cbnz	r3, 8008464 <_strtod_l+0xa44>
 800842a:	2200      	movs	r2, #0
 800842c:	4630      	mov	r0, r6
 800842e:	4639      	mov	r1, r7
 8008430:	4b3c      	ldr	r3, [pc, #240]	; (8008524 <_strtod_l+0xb04>)
 8008432:	f7f8 facd 	bl	80009d0 <__aeabi_dcmplt>
 8008436:	b9c8      	cbnz	r0, 800846c <_strtod_l+0xa4c>
 8008438:	2200      	movs	r2, #0
 800843a:	4630      	mov	r0, r6
 800843c:	4639      	mov	r1, r7
 800843e:	4b3c      	ldr	r3, [pc, #240]	; (8008530 <_strtod_l+0xb10>)
 8008440:	f7f8 f854 	bl	80004ec <__aeabi_dmul>
 8008444:	4604      	mov	r4, r0
 8008446:	460d      	mov	r5, r1
 8008448:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800844c:	9416      	str	r4, [sp, #88]	; 0x58
 800844e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008450:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8008454:	e7a2      	b.n	800839c <_strtod_l+0x97c>
 8008456:	f1b8 0f01 	cmp.w	r8, #1
 800845a:	d103      	bne.n	8008464 <_strtod_l+0xa44>
 800845c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800845e:	2b00      	cmp	r3, #0
 8008460:	f43f ad92 	beq.w	8007f88 <_strtod_l+0x568>
 8008464:	2600      	movs	r6, #0
 8008466:	2400      	movs	r4, #0
 8008468:	4f32      	ldr	r7, [pc, #200]	; (8008534 <_strtod_l+0xb14>)
 800846a:	e796      	b.n	800839a <_strtod_l+0x97a>
 800846c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800846e:	4d30      	ldr	r5, [pc, #192]	; (8008530 <_strtod_l+0xb10>)
 8008470:	e7ea      	b.n	8008448 <_strtod_l+0xa28>
 8008472:	4b2f      	ldr	r3, [pc, #188]	; (8008530 <_strtod_l+0xb10>)
 8008474:	2200      	movs	r2, #0
 8008476:	4630      	mov	r0, r6
 8008478:	4639      	mov	r1, r7
 800847a:	f7f8 f837 	bl	80004ec <__aeabi_dmul>
 800847e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008480:	4604      	mov	r4, r0
 8008482:	460d      	mov	r5, r1
 8008484:	b933      	cbnz	r3, 8008494 <_strtod_l+0xa74>
 8008486:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800848a:	9010      	str	r0, [sp, #64]	; 0x40
 800848c:	9311      	str	r3, [sp, #68]	; 0x44
 800848e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008492:	e783      	b.n	800839c <_strtod_l+0x97c>
 8008494:	4602      	mov	r2, r0
 8008496:	460b      	mov	r3, r1
 8008498:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800849c:	e7f7      	b.n	800848e <_strtod_l+0xa6e>
 800849e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80084a2:	9b05      	ldr	r3, [sp, #20]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d1a8      	bne.n	80083fa <_strtod_l+0x9da>
 80084a8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80084ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80084ae:	0d1b      	lsrs	r3, r3, #20
 80084b0:	051b      	lsls	r3, r3, #20
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d1a1      	bne.n	80083fa <_strtod_l+0x9da>
 80084b6:	4620      	mov	r0, r4
 80084b8:	4629      	mov	r1, r5
 80084ba:	f7f8 fe59 	bl	8001170 <__aeabi_d2lz>
 80084be:	f7f7 ffe7 	bl	8000490 <__aeabi_l2d>
 80084c2:	4602      	mov	r2, r0
 80084c4:	460b      	mov	r3, r1
 80084c6:	4620      	mov	r0, r4
 80084c8:	4629      	mov	r1, r5
 80084ca:	f7f7 fe57 	bl	800017c <__aeabi_dsub>
 80084ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80084d4:	ea43 0308 	orr.w	r3, r3, r8
 80084d8:	4313      	orrs	r3, r2
 80084da:	4604      	mov	r4, r0
 80084dc:	460d      	mov	r5, r1
 80084de:	d066      	beq.n	80085ae <_strtod_l+0xb8e>
 80084e0:	a309      	add	r3, pc, #36	; (adr r3, 8008508 <_strtod_l+0xae8>)
 80084e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e6:	f7f8 fa73 	bl	80009d0 <__aeabi_dcmplt>
 80084ea:	2800      	cmp	r0, #0
 80084ec:	f47f ace2 	bne.w	8007eb4 <_strtod_l+0x494>
 80084f0:	a307      	add	r3, pc, #28	; (adr r3, 8008510 <_strtod_l+0xaf0>)
 80084f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f6:	4620      	mov	r0, r4
 80084f8:	4629      	mov	r1, r5
 80084fa:	f7f8 fa87 	bl	8000a0c <__aeabi_dcmpgt>
 80084fe:	2800      	cmp	r0, #0
 8008500:	f43f af7b 	beq.w	80083fa <_strtod_l+0x9da>
 8008504:	e4d6      	b.n	8007eb4 <_strtod_l+0x494>
 8008506:	bf00      	nop
 8008508:	94a03595 	.word	0x94a03595
 800850c:	3fdfffff 	.word	0x3fdfffff
 8008510:	35afe535 	.word	0x35afe535
 8008514:	3fe00000 	.word	0x3fe00000
 8008518:	000fffff 	.word	0x000fffff
 800851c:	7ff00000 	.word	0x7ff00000
 8008520:	7fefffff 	.word	0x7fefffff
 8008524:	3ff00000 	.word	0x3ff00000
 8008528:	7fe00000 	.word	0x7fe00000
 800852c:	7c9fffff 	.word	0x7c9fffff
 8008530:	3fe00000 	.word	0x3fe00000
 8008534:	bff00000 	.word	0xbff00000
 8008538:	9b05      	ldr	r3, [sp, #20]
 800853a:	b313      	cbz	r3, 8008582 <_strtod_l+0xb62>
 800853c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800853e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008542:	d81e      	bhi.n	8008582 <_strtod_l+0xb62>
 8008544:	a326      	add	r3, pc, #152	; (adr r3, 80085e0 <_strtod_l+0xbc0>)
 8008546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854a:	4620      	mov	r0, r4
 800854c:	4629      	mov	r1, r5
 800854e:	f7f8 fa49 	bl	80009e4 <__aeabi_dcmple>
 8008552:	b190      	cbz	r0, 800857a <_strtod_l+0xb5a>
 8008554:	4629      	mov	r1, r5
 8008556:	4620      	mov	r0, r4
 8008558:	f7f8 faa0 	bl	8000a9c <__aeabi_d2uiz>
 800855c:	2801      	cmp	r0, #1
 800855e:	bf38      	it	cc
 8008560:	2001      	movcc	r0, #1
 8008562:	f7f7 ff49 	bl	80003f8 <__aeabi_ui2d>
 8008566:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008568:	4604      	mov	r4, r0
 800856a:	460d      	mov	r5, r1
 800856c:	b9d3      	cbnz	r3, 80085a4 <_strtod_l+0xb84>
 800856e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008572:	9012      	str	r0, [sp, #72]	; 0x48
 8008574:	9313      	str	r3, [sp, #76]	; 0x4c
 8008576:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800857a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800857c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008580:	1a9f      	subs	r7, r3, r2
 8008582:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008586:	f001 fe57 	bl	800a238 <__ulp>
 800858a:	4602      	mov	r2, r0
 800858c:	460b      	mov	r3, r1
 800858e:	4630      	mov	r0, r6
 8008590:	4639      	mov	r1, r7
 8008592:	f7f7 ffab 	bl	80004ec <__aeabi_dmul>
 8008596:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800859a:	f7f7 fdf1 	bl	8000180 <__adddf3>
 800859e:	4680      	mov	r8, r0
 80085a0:	4689      	mov	r9, r1
 80085a2:	e77e      	b.n	80084a2 <_strtod_l+0xa82>
 80085a4:	4602      	mov	r2, r0
 80085a6:	460b      	mov	r3, r1
 80085a8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80085ac:	e7e3      	b.n	8008576 <_strtod_l+0xb56>
 80085ae:	a30e      	add	r3, pc, #56	; (adr r3, 80085e8 <_strtod_l+0xbc8>)
 80085b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b4:	f7f8 fa0c 	bl	80009d0 <__aeabi_dcmplt>
 80085b8:	e7a1      	b.n	80084fe <_strtod_l+0xade>
 80085ba:	2300      	movs	r3, #0
 80085bc:	930a      	str	r3, [sp, #40]	; 0x28
 80085be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80085c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80085c2:	6013      	str	r3, [r2, #0]
 80085c4:	f7ff ba71 	b.w	8007aaa <_strtod_l+0x8a>
 80085c8:	2a65      	cmp	r2, #101	; 0x65
 80085ca:	f43f ab63 	beq.w	8007c94 <_strtod_l+0x274>
 80085ce:	2a45      	cmp	r2, #69	; 0x45
 80085d0:	f43f ab60 	beq.w	8007c94 <_strtod_l+0x274>
 80085d4:	2301      	movs	r3, #1
 80085d6:	f7ff bb95 	b.w	8007d04 <_strtod_l+0x2e4>
 80085da:	bf00      	nop
 80085dc:	f3af 8000 	nop.w
 80085e0:	ffc00000 	.word	0xffc00000
 80085e4:	41dfffff 	.word	0x41dfffff
 80085e8:	94a03595 	.word	0x94a03595
 80085ec:	3fcfffff 	.word	0x3fcfffff

080085f0 <strtod>:
 80085f0:	460a      	mov	r2, r1
 80085f2:	4601      	mov	r1, r0
 80085f4:	4802      	ldr	r0, [pc, #8]	; (8008600 <strtod+0x10>)
 80085f6:	4b03      	ldr	r3, [pc, #12]	; (8008604 <strtod+0x14>)
 80085f8:	6800      	ldr	r0, [r0, #0]
 80085fa:	f7ff ba11 	b.w	8007a20 <_strtod_l>
 80085fe:	bf00      	nop
 8008600:	20000010 	.word	0x20000010
 8008604:	20000078 	.word	0x20000078

08008608 <strtok>:
 8008608:	4b16      	ldr	r3, [pc, #88]	; (8008664 <strtok+0x5c>)
 800860a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800860e:	681f      	ldr	r7, [r3, #0]
 8008610:	4605      	mov	r5, r0
 8008612:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8008614:	460e      	mov	r6, r1
 8008616:	b9ec      	cbnz	r4, 8008654 <strtok+0x4c>
 8008618:	2050      	movs	r0, #80	; 0x50
 800861a:	f001 fa67 	bl	8009aec <malloc>
 800861e:	4602      	mov	r2, r0
 8008620:	65b8      	str	r0, [r7, #88]	; 0x58
 8008622:	b920      	cbnz	r0, 800862e <strtok+0x26>
 8008624:	2157      	movs	r1, #87	; 0x57
 8008626:	4b10      	ldr	r3, [pc, #64]	; (8008668 <strtok+0x60>)
 8008628:	4810      	ldr	r0, [pc, #64]	; (800866c <strtok+0x64>)
 800862a:	f000 f849 	bl	80086c0 <__assert_func>
 800862e:	e9c0 4400 	strd	r4, r4, [r0]
 8008632:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008636:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800863a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800863e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008642:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008646:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800864a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800864e:	6184      	str	r4, [r0, #24]
 8008650:	7704      	strb	r4, [r0, #28]
 8008652:	6244      	str	r4, [r0, #36]	; 0x24
 8008654:	4631      	mov	r1, r6
 8008656:	4628      	mov	r0, r5
 8008658:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800865a:	2301      	movs	r3, #1
 800865c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008660:	f000 b806 	b.w	8008670 <__strtok_r>
 8008664:	20000010 	.word	0x20000010
 8008668:	0800b6b0 	.word	0x0800b6b0
 800866c:	0800b6c7 	.word	0x0800b6c7

08008670 <__strtok_r>:
 8008670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008672:	b908      	cbnz	r0, 8008678 <__strtok_r+0x8>
 8008674:	6810      	ldr	r0, [r2, #0]
 8008676:	b188      	cbz	r0, 800869c <__strtok_r+0x2c>
 8008678:	4604      	mov	r4, r0
 800867a:	460f      	mov	r7, r1
 800867c:	4620      	mov	r0, r4
 800867e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008682:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008686:	b91e      	cbnz	r6, 8008690 <__strtok_r+0x20>
 8008688:	b965      	cbnz	r5, 80086a4 <__strtok_r+0x34>
 800868a:	4628      	mov	r0, r5
 800868c:	6015      	str	r5, [r2, #0]
 800868e:	e005      	b.n	800869c <__strtok_r+0x2c>
 8008690:	42b5      	cmp	r5, r6
 8008692:	d1f6      	bne.n	8008682 <__strtok_r+0x12>
 8008694:	2b00      	cmp	r3, #0
 8008696:	d1f0      	bne.n	800867a <__strtok_r+0xa>
 8008698:	6014      	str	r4, [r2, #0]
 800869a:	7003      	strb	r3, [r0, #0]
 800869c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800869e:	461c      	mov	r4, r3
 80086a0:	e00c      	b.n	80086bc <__strtok_r+0x4c>
 80086a2:	b915      	cbnz	r5, 80086aa <__strtok_r+0x3a>
 80086a4:	460e      	mov	r6, r1
 80086a6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80086aa:	f816 5b01 	ldrb.w	r5, [r6], #1
 80086ae:	42ab      	cmp	r3, r5
 80086b0:	d1f7      	bne.n	80086a2 <__strtok_r+0x32>
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d0f3      	beq.n	800869e <__strtok_r+0x2e>
 80086b6:	2300      	movs	r3, #0
 80086b8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80086bc:	6014      	str	r4, [r2, #0]
 80086be:	e7ed      	b.n	800869c <__strtok_r+0x2c>

080086c0 <__assert_func>:
 80086c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086c2:	4614      	mov	r4, r2
 80086c4:	461a      	mov	r2, r3
 80086c6:	4b09      	ldr	r3, [pc, #36]	; (80086ec <__assert_func+0x2c>)
 80086c8:	4605      	mov	r5, r0
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68d8      	ldr	r0, [r3, #12]
 80086ce:	b14c      	cbz	r4, 80086e4 <__assert_func+0x24>
 80086d0:	4b07      	ldr	r3, [pc, #28]	; (80086f0 <__assert_func+0x30>)
 80086d2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086d6:	9100      	str	r1, [sp, #0]
 80086d8:	462b      	mov	r3, r5
 80086da:	4906      	ldr	r1, [pc, #24]	; (80086f4 <__assert_func+0x34>)
 80086dc:	f000 fe8a 	bl	80093f4 <fiprintf>
 80086e0:	f002 fb8e 	bl	800ae00 <abort>
 80086e4:	4b04      	ldr	r3, [pc, #16]	; (80086f8 <__assert_func+0x38>)
 80086e6:	461c      	mov	r4, r3
 80086e8:	e7f3      	b.n	80086d2 <__assert_func+0x12>
 80086ea:	bf00      	nop
 80086ec:	20000010 	.word	0x20000010
 80086f0:	0800b724 	.word	0x0800b724
 80086f4:	0800b731 	.word	0x0800b731
 80086f8:	0800b75f 	.word	0x0800b75f

080086fc <quorem>:
 80086fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008700:	6903      	ldr	r3, [r0, #16]
 8008702:	690c      	ldr	r4, [r1, #16]
 8008704:	4607      	mov	r7, r0
 8008706:	42a3      	cmp	r3, r4
 8008708:	f2c0 8082 	blt.w	8008810 <quorem+0x114>
 800870c:	3c01      	subs	r4, #1
 800870e:	f100 0514 	add.w	r5, r0, #20
 8008712:	f101 0814 	add.w	r8, r1, #20
 8008716:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800871a:	9301      	str	r3, [sp, #4]
 800871c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008720:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008724:	3301      	adds	r3, #1
 8008726:	429a      	cmp	r2, r3
 8008728:	fbb2 f6f3 	udiv	r6, r2, r3
 800872c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008730:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008734:	d331      	bcc.n	800879a <quorem+0x9e>
 8008736:	f04f 0e00 	mov.w	lr, #0
 800873a:	4640      	mov	r0, r8
 800873c:	46ac      	mov	ip, r5
 800873e:	46f2      	mov	sl, lr
 8008740:	f850 2b04 	ldr.w	r2, [r0], #4
 8008744:	b293      	uxth	r3, r2
 8008746:	fb06 e303 	mla	r3, r6, r3, lr
 800874a:	0c12      	lsrs	r2, r2, #16
 800874c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008750:	b29b      	uxth	r3, r3
 8008752:	fb06 e202 	mla	r2, r6, r2, lr
 8008756:	ebaa 0303 	sub.w	r3, sl, r3
 800875a:	f8dc a000 	ldr.w	sl, [ip]
 800875e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008762:	fa1f fa8a 	uxth.w	sl, sl
 8008766:	4453      	add	r3, sl
 8008768:	f8dc a000 	ldr.w	sl, [ip]
 800876c:	b292      	uxth	r2, r2
 800876e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008772:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008776:	b29b      	uxth	r3, r3
 8008778:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800877c:	4581      	cmp	r9, r0
 800877e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008782:	f84c 3b04 	str.w	r3, [ip], #4
 8008786:	d2db      	bcs.n	8008740 <quorem+0x44>
 8008788:	f855 300b 	ldr.w	r3, [r5, fp]
 800878c:	b92b      	cbnz	r3, 800879a <quorem+0x9e>
 800878e:	9b01      	ldr	r3, [sp, #4]
 8008790:	3b04      	subs	r3, #4
 8008792:	429d      	cmp	r5, r3
 8008794:	461a      	mov	r2, r3
 8008796:	d32f      	bcc.n	80087f8 <quorem+0xfc>
 8008798:	613c      	str	r4, [r7, #16]
 800879a:	4638      	mov	r0, r7
 800879c:	f001 fca4 	bl	800a0e8 <__mcmp>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	db25      	blt.n	80087f0 <quorem+0xf4>
 80087a4:	4628      	mov	r0, r5
 80087a6:	f04f 0c00 	mov.w	ip, #0
 80087aa:	3601      	adds	r6, #1
 80087ac:	f858 1b04 	ldr.w	r1, [r8], #4
 80087b0:	f8d0 e000 	ldr.w	lr, [r0]
 80087b4:	b28b      	uxth	r3, r1
 80087b6:	ebac 0303 	sub.w	r3, ip, r3
 80087ba:	fa1f f28e 	uxth.w	r2, lr
 80087be:	4413      	add	r3, r2
 80087c0:	0c0a      	lsrs	r2, r1, #16
 80087c2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80087c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087d0:	45c1      	cmp	r9, r8
 80087d2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80087d6:	f840 3b04 	str.w	r3, [r0], #4
 80087da:	d2e7      	bcs.n	80087ac <quorem+0xb0>
 80087dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087e4:	b922      	cbnz	r2, 80087f0 <quorem+0xf4>
 80087e6:	3b04      	subs	r3, #4
 80087e8:	429d      	cmp	r5, r3
 80087ea:	461a      	mov	r2, r3
 80087ec:	d30a      	bcc.n	8008804 <quorem+0x108>
 80087ee:	613c      	str	r4, [r7, #16]
 80087f0:	4630      	mov	r0, r6
 80087f2:	b003      	add	sp, #12
 80087f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f8:	6812      	ldr	r2, [r2, #0]
 80087fa:	3b04      	subs	r3, #4
 80087fc:	2a00      	cmp	r2, #0
 80087fe:	d1cb      	bne.n	8008798 <quorem+0x9c>
 8008800:	3c01      	subs	r4, #1
 8008802:	e7c6      	b.n	8008792 <quorem+0x96>
 8008804:	6812      	ldr	r2, [r2, #0]
 8008806:	3b04      	subs	r3, #4
 8008808:	2a00      	cmp	r2, #0
 800880a:	d1f0      	bne.n	80087ee <quorem+0xf2>
 800880c:	3c01      	subs	r4, #1
 800880e:	e7eb      	b.n	80087e8 <quorem+0xec>
 8008810:	2000      	movs	r0, #0
 8008812:	e7ee      	b.n	80087f2 <quorem+0xf6>
 8008814:	0000      	movs	r0, r0
	...

08008818 <_dtoa_r>:
 8008818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800881c:	4616      	mov	r6, r2
 800881e:	461f      	mov	r7, r3
 8008820:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008822:	b099      	sub	sp, #100	; 0x64
 8008824:	4605      	mov	r5, r0
 8008826:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800882a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800882e:	b974      	cbnz	r4, 800884e <_dtoa_r+0x36>
 8008830:	2010      	movs	r0, #16
 8008832:	f001 f95b 	bl	8009aec <malloc>
 8008836:	4602      	mov	r2, r0
 8008838:	6268      	str	r0, [r5, #36]	; 0x24
 800883a:	b920      	cbnz	r0, 8008846 <_dtoa_r+0x2e>
 800883c:	21ea      	movs	r1, #234	; 0xea
 800883e:	4ba8      	ldr	r3, [pc, #672]	; (8008ae0 <_dtoa_r+0x2c8>)
 8008840:	48a8      	ldr	r0, [pc, #672]	; (8008ae4 <_dtoa_r+0x2cc>)
 8008842:	f7ff ff3d 	bl	80086c0 <__assert_func>
 8008846:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800884a:	6004      	str	r4, [r0, #0]
 800884c:	60c4      	str	r4, [r0, #12]
 800884e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008850:	6819      	ldr	r1, [r3, #0]
 8008852:	b151      	cbz	r1, 800886a <_dtoa_r+0x52>
 8008854:	685a      	ldr	r2, [r3, #4]
 8008856:	2301      	movs	r3, #1
 8008858:	4093      	lsls	r3, r2
 800885a:	604a      	str	r2, [r1, #4]
 800885c:	608b      	str	r3, [r1, #8]
 800885e:	4628      	mov	r0, r5
 8008860:	f001 f9ba 	bl	8009bd8 <_Bfree>
 8008864:	2200      	movs	r2, #0
 8008866:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008868:	601a      	str	r2, [r3, #0]
 800886a:	1e3b      	subs	r3, r7, #0
 800886c:	bfaf      	iteee	ge
 800886e:	2300      	movge	r3, #0
 8008870:	2201      	movlt	r2, #1
 8008872:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008876:	9305      	strlt	r3, [sp, #20]
 8008878:	bfa8      	it	ge
 800887a:	f8c8 3000 	strge.w	r3, [r8]
 800887e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008882:	4b99      	ldr	r3, [pc, #612]	; (8008ae8 <_dtoa_r+0x2d0>)
 8008884:	bfb8      	it	lt
 8008886:	f8c8 2000 	strlt.w	r2, [r8]
 800888a:	ea33 0309 	bics.w	r3, r3, r9
 800888e:	d119      	bne.n	80088c4 <_dtoa_r+0xac>
 8008890:	f242 730f 	movw	r3, #9999	; 0x270f
 8008894:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008896:	6013      	str	r3, [r2, #0]
 8008898:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800889c:	4333      	orrs	r3, r6
 800889e:	f000 857f 	beq.w	80093a0 <_dtoa_r+0xb88>
 80088a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80088a4:	b953      	cbnz	r3, 80088bc <_dtoa_r+0xa4>
 80088a6:	4b91      	ldr	r3, [pc, #580]	; (8008aec <_dtoa_r+0x2d4>)
 80088a8:	e022      	b.n	80088f0 <_dtoa_r+0xd8>
 80088aa:	4b91      	ldr	r3, [pc, #580]	; (8008af0 <_dtoa_r+0x2d8>)
 80088ac:	9303      	str	r3, [sp, #12]
 80088ae:	3308      	adds	r3, #8
 80088b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80088b2:	6013      	str	r3, [r2, #0]
 80088b4:	9803      	ldr	r0, [sp, #12]
 80088b6:	b019      	add	sp, #100	; 0x64
 80088b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088bc:	4b8b      	ldr	r3, [pc, #556]	; (8008aec <_dtoa_r+0x2d4>)
 80088be:	9303      	str	r3, [sp, #12]
 80088c0:	3303      	adds	r3, #3
 80088c2:	e7f5      	b.n	80088b0 <_dtoa_r+0x98>
 80088c4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80088c8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80088cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80088d0:	2200      	movs	r2, #0
 80088d2:	2300      	movs	r3, #0
 80088d4:	f7f8 f872 	bl	80009bc <__aeabi_dcmpeq>
 80088d8:	4680      	mov	r8, r0
 80088da:	b158      	cbz	r0, 80088f4 <_dtoa_r+0xdc>
 80088dc:	2301      	movs	r3, #1
 80088de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80088e0:	6013      	str	r3, [r2, #0]
 80088e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f000 8558 	beq.w	800939a <_dtoa_r+0xb82>
 80088ea:	4882      	ldr	r0, [pc, #520]	; (8008af4 <_dtoa_r+0x2dc>)
 80088ec:	6018      	str	r0, [r3, #0]
 80088ee:	1e43      	subs	r3, r0, #1
 80088f0:	9303      	str	r3, [sp, #12]
 80088f2:	e7df      	b.n	80088b4 <_dtoa_r+0x9c>
 80088f4:	ab16      	add	r3, sp, #88	; 0x58
 80088f6:	9301      	str	r3, [sp, #4]
 80088f8:	ab17      	add	r3, sp, #92	; 0x5c
 80088fa:	9300      	str	r3, [sp, #0]
 80088fc:	4628      	mov	r0, r5
 80088fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008902:	f001 fd13 	bl	800a32c <__d2b>
 8008906:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800890a:	4683      	mov	fp, r0
 800890c:	2c00      	cmp	r4, #0
 800890e:	d07f      	beq.n	8008a10 <_dtoa_r+0x1f8>
 8008910:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008914:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008916:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800891a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800891e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008922:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008926:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800892a:	2200      	movs	r2, #0
 800892c:	4b72      	ldr	r3, [pc, #456]	; (8008af8 <_dtoa_r+0x2e0>)
 800892e:	f7f7 fc25 	bl	800017c <__aeabi_dsub>
 8008932:	a365      	add	r3, pc, #404	; (adr r3, 8008ac8 <_dtoa_r+0x2b0>)
 8008934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008938:	f7f7 fdd8 	bl	80004ec <__aeabi_dmul>
 800893c:	a364      	add	r3, pc, #400	; (adr r3, 8008ad0 <_dtoa_r+0x2b8>)
 800893e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008942:	f7f7 fc1d 	bl	8000180 <__adddf3>
 8008946:	4606      	mov	r6, r0
 8008948:	4620      	mov	r0, r4
 800894a:	460f      	mov	r7, r1
 800894c:	f7f7 fd64 	bl	8000418 <__aeabi_i2d>
 8008950:	a361      	add	r3, pc, #388	; (adr r3, 8008ad8 <_dtoa_r+0x2c0>)
 8008952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008956:	f7f7 fdc9 	bl	80004ec <__aeabi_dmul>
 800895a:	4602      	mov	r2, r0
 800895c:	460b      	mov	r3, r1
 800895e:	4630      	mov	r0, r6
 8008960:	4639      	mov	r1, r7
 8008962:	f7f7 fc0d 	bl	8000180 <__adddf3>
 8008966:	4606      	mov	r6, r0
 8008968:	460f      	mov	r7, r1
 800896a:	f7f8 f86f 	bl	8000a4c <__aeabi_d2iz>
 800896e:	2200      	movs	r2, #0
 8008970:	4682      	mov	sl, r0
 8008972:	2300      	movs	r3, #0
 8008974:	4630      	mov	r0, r6
 8008976:	4639      	mov	r1, r7
 8008978:	f7f8 f82a 	bl	80009d0 <__aeabi_dcmplt>
 800897c:	b148      	cbz	r0, 8008992 <_dtoa_r+0x17a>
 800897e:	4650      	mov	r0, sl
 8008980:	f7f7 fd4a 	bl	8000418 <__aeabi_i2d>
 8008984:	4632      	mov	r2, r6
 8008986:	463b      	mov	r3, r7
 8008988:	f7f8 f818 	bl	80009bc <__aeabi_dcmpeq>
 800898c:	b908      	cbnz	r0, 8008992 <_dtoa_r+0x17a>
 800898e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008992:	f1ba 0f16 	cmp.w	sl, #22
 8008996:	d858      	bhi.n	8008a4a <_dtoa_r+0x232>
 8008998:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800899c:	4b57      	ldr	r3, [pc, #348]	; (8008afc <_dtoa_r+0x2e4>)
 800899e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80089a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a6:	f7f8 f813 	bl	80009d0 <__aeabi_dcmplt>
 80089aa:	2800      	cmp	r0, #0
 80089ac:	d04f      	beq.n	8008a4e <_dtoa_r+0x236>
 80089ae:	2300      	movs	r3, #0
 80089b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80089b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80089b8:	1b1c      	subs	r4, r3, r4
 80089ba:	1e63      	subs	r3, r4, #1
 80089bc:	9309      	str	r3, [sp, #36]	; 0x24
 80089be:	bf49      	itett	mi
 80089c0:	f1c4 0301 	rsbmi	r3, r4, #1
 80089c4:	2300      	movpl	r3, #0
 80089c6:	9306      	strmi	r3, [sp, #24]
 80089c8:	2300      	movmi	r3, #0
 80089ca:	bf54      	ite	pl
 80089cc:	9306      	strpl	r3, [sp, #24]
 80089ce:	9309      	strmi	r3, [sp, #36]	; 0x24
 80089d0:	f1ba 0f00 	cmp.w	sl, #0
 80089d4:	db3d      	blt.n	8008a52 <_dtoa_r+0x23a>
 80089d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089d8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80089dc:	4453      	add	r3, sl
 80089de:	9309      	str	r3, [sp, #36]	; 0x24
 80089e0:	2300      	movs	r3, #0
 80089e2:	930a      	str	r3, [sp, #40]	; 0x28
 80089e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089e6:	2b09      	cmp	r3, #9
 80089e8:	f200 808c 	bhi.w	8008b04 <_dtoa_r+0x2ec>
 80089ec:	2b05      	cmp	r3, #5
 80089ee:	bfc4      	itt	gt
 80089f0:	3b04      	subgt	r3, #4
 80089f2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80089f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089f6:	bfc8      	it	gt
 80089f8:	2400      	movgt	r4, #0
 80089fa:	f1a3 0302 	sub.w	r3, r3, #2
 80089fe:	bfd8      	it	le
 8008a00:	2401      	movle	r4, #1
 8008a02:	2b03      	cmp	r3, #3
 8008a04:	f200 808a 	bhi.w	8008b1c <_dtoa_r+0x304>
 8008a08:	e8df f003 	tbb	[pc, r3]
 8008a0c:	5b4d4f2d 	.word	0x5b4d4f2d
 8008a10:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008a14:	441c      	add	r4, r3
 8008a16:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008a1a:	2b20      	cmp	r3, #32
 8008a1c:	bfc3      	ittte	gt
 8008a1e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008a22:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008a26:	fa09 f303 	lslgt.w	r3, r9, r3
 8008a2a:	f1c3 0320 	rsble	r3, r3, #32
 8008a2e:	bfc6      	itte	gt
 8008a30:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008a34:	4318      	orrgt	r0, r3
 8008a36:	fa06 f003 	lslle.w	r0, r6, r3
 8008a3a:	f7f7 fcdd 	bl	80003f8 <__aeabi_ui2d>
 8008a3e:	2301      	movs	r3, #1
 8008a40:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008a44:	3c01      	subs	r4, #1
 8008a46:	9313      	str	r3, [sp, #76]	; 0x4c
 8008a48:	e76f      	b.n	800892a <_dtoa_r+0x112>
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e7b2      	b.n	80089b4 <_dtoa_r+0x19c>
 8008a4e:	900f      	str	r0, [sp, #60]	; 0x3c
 8008a50:	e7b1      	b.n	80089b6 <_dtoa_r+0x19e>
 8008a52:	9b06      	ldr	r3, [sp, #24]
 8008a54:	eba3 030a 	sub.w	r3, r3, sl
 8008a58:	9306      	str	r3, [sp, #24]
 8008a5a:	f1ca 0300 	rsb	r3, sl, #0
 8008a5e:	930a      	str	r3, [sp, #40]	; 0x28
 8008a60:	2300      	movs	r3, #0
 8008a62:	930e      	str	r3, [sp, #56]	; 0x38
 8008a64:	e7be      	b.n	80089e4 <_dtoa_r+0x1cc>
 8008a66:	2300      	movs	r3, #0
 8008a68:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	dc58      	bgt.n	8008b22 <_dtoa_r+0x30a>
 8008a70:	f04f 0901 	mov.w	r9, #1
 8008a74:	464b      	mov	r3, r9
 8008a76:	f8cd 9020 	str.w	r9, [sp, #32]
 8008a7a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8008a7e:	2200      	movs	r2, #0
 8008a80:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008a82:	6042      	str	r2, [r0, #4]
 8008a84:	2204      	movs	r2, #4
 8008a86:	f102 0614 	add.w	r6, r2, #20
 8008a8a:	429e      	cmp	r6, r3
 8008a8c:	6841      	ldr	r1, [r0, #4]
 8008a8e:	d94e      	bls.n	8008b2e <_dtoa_r+0x316>
 8008a90:	4628      	mov	r0, r5
 8008a92:	f001 f861 	bl	8009b58 <_Balloc>
 8008a96:	9003      	str	r0, [sp, #12]
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	d14c      	bne.n	8008b36 <_dtoa_r+0x31e>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008aa2:	4b17      	ldr	r3, [pc, #92]	; (8008b00 <_dtoa_r+0x2e8>)
 8008aa4:	e6cc      	b.n	8008840 <_dtoa_r+0x28>
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e7de      	b.n	8008a68 <_dtoa_r+0x250>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	930b      	str	r3, [sp, #44]	; 0x2c
 8008aae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008ab0:	eb0a 0903 	add.w	r9, sl, r3
 8008ab4:	f109 0301 	add.w	r3, r9, #1
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	9308      	str	r3, [sp, #32]
 8008abc:	bfb8      	it	lt
 8008abe:	2301      	movlt	r3, #1
 8008ac0:	e7dd      	b.n	8008a7e <_dtoa_r+0x266>
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e7f2      	b.n	8008aac <_dtoa_r+0x294>
 8008ac6:	bf00      	nop
 8008ac8:	636f4361 	.word	0x636f4361
 8008acc:	3fd287a7 	.word	0x3fd287a7
 8008ad0:	8b60c8b3 	.word	0x8b60c8b3
 8008ad4:	3fc68a28 	.word	0x3fc68a28
 8008ad8:	509f79fb 	.word	0x509f79fb
 8008adc:	3fd34413 	.word	0x3fd34413
 8008ae0:	0800b6b0 	.word	0x0800b6b0
 8008ae4:	0800b76d 	.word	0x0800b76d
 8008ae8:	7ff00000 	.word	0x7ff00000
 8008aec:	0800b769 	.word	0x0800b769
 8008af0:	0800b760 	.word	0x0800b760
 8008af4:	0800b639 	.word	0x0800b639
 8008af8:	3ff80000 	.word	0x3ff80000
 8008afc:	0800b8d8 	.word	0x0800b8d8
 8008b00:	0800b7c8 	.word	0x0800b7c8
 8008b04:	2401      	movs	r4, #1
 8008b06:	2300      	movs	r3, #0
 8008b08:	940b      	str	r4, [sp, #44]	; 0x2c
 8008b0a:	9322      	str	r3, [sp, #136]	; 0x88
 8008b0c:	f04f 39ff 	mov.w	r9, #4294967295
 8008b10:	2200      	movs	r2, #0
 8008b12:	2312      	movs	r3, #18
 8008b14:	f8cd 9020 	str.w	r9, [sp, #32]
 8008b18:	9223      	str	r2, [sp, #140]	; 0x8c
 8008b1a:	e7b0      	b.n	8008a7e <_dtoa_r+0x266>
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b20:	e7f4      	b.n	8008b0c <_dtoa_r+0x2f4>
 8008b22:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8008b26:	464b      	mov	r3, r9
 8008b28:	f8cd 9020 	str.w	r9, [sp, #32]
 8008b2c:	e7a7      	b.n	8008a7e <_dtoa_r+0x266>
 8008b2e:	3101      	adds	r1, #1
 8008b30:	6041      	str	r1, [r0, #4]
 8008b32:	0052      	lsls	r2, r2, #1
 8008b34:	e7a7      	b.n	8008a86 <_dtoa_r+0x26e>
 8008b36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008b38:	9a03      	ldr	r2, [sp, #12]
 8008b3a:	601a      	str	r2, [r3, #0]
 8008b3c:	9b08      	ldr	r3, [sp, #32]
 8008b3e:	2b0e      	cmp	r3, #14
 8008b40:	f200 80a8 	bhi.w	8008c94 <_dtoa_r+0x47c>
 8008b44:	2c00      	cmp	r4, #0
 8008b46:	f000 80a5 	beq.w	8008c94 <_dtoa_r+0x47c>
 8008b4a:	f1ba 0f00 	cmp.w	sl, #0
 8008b4e:	dd34      	ble.n	8008bba <_dtoa_r+0x3a2>
 8008b50:	4a9a      	ldr	r2, [pc, #616]	; (8008dbc <_dtoa_r+0x5a4>)
 8008b52:	f00a 030f 	and.w	r3, sl, #15
 8008b56:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008b5a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008b5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008b62:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008b66:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008b6a:	d016      	beq.n	8008b9a <_dtoa_r+0x382>
 8008b6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b70:	4b93      	ldr	r3, [pc, #588]	; (8008dc0 <_dtoa_r+0x5a8>)
 8008b72:	2703      	movs	r7, #3
 8008b74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b78:	f7f7 fde2 	bl	8000740 <__aeabi_ddiv>
 8008b7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b80:	f004 040f 	and.w	r4, r4, #15
 8008b84:	4e8e      	ldr	r6, [pc, #568]	; (8008dc0 <_dtoa_r+0x5a8>)
 8008b86:	b954      	cbnz	r4, 8008b9e <_dtoa_r+0x386>
 8008b88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008b8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b90:	f7f7 fdd6 	bl	8000740 <__aeabi_ddiv>
 8008b94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b98:	e029      	b.n	8008bee <_dtoa_r+0x3d6>
 8008b9a:	2702      	movs	r7, #2
 8008b9c:	e7f2      	b.n	8008b84 <_dtoa_r+0x36c>
 8008b9e:	07e1      	lsls	r1, r4, #31
 8008ba0:	d508      	bpl.n	8008bb4 <_dtoa_r+0x39c>
 8008ba2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008ba6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008baa:	f7f7 fc9f 	bl	80004ec <__aeabi_dmul>
 8008bae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008bb2:	3701      	adds	r7, #1
 8008bb4:	1064      	asrs	r4, r4, #1
 8008bb6:	3608      	adds	r6, #8
 8008bb8:	e7e5      	b.n	8008b86 <_dtoa_r+0x36e>
 8008bba:	f000 80a5 	beq.w	8008d08 <_dtoa_r+0x4f0>
 8008bbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008bc2:	f1ca 0400 	rsb	r4, sl, #0
 8008bc6:	4b7d      	ldr	r3, [pc, #500]	; (8008dbc <_dtoa_r+0x5a4>)
 8008bc8:	f004 020f 	and.w	r2, r4, #15
 8008bcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd4:	f7f7 fc8a 	bl	80004ec <__aeabi_dmul>
 8008bd8:	2702      	movs	r7, #2
 8008bda:	2300      	movs	r3, #0
 8008bdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008be0:	4e77      	ldr	r6, [pc, #476]	; (8008dc0 <_dtoa_r+0x5a8>)
 8008be2:	1124      	asrs	r4, r4, #4
 8008be4:	2c00      	cmp	r4, #0
 8008be6:	f040 8084 	bne.w	8008cf2 <_dtoa_r+0x4da>
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d1d2      	bne.n	8008b94 <_dtoa_r+0x37c>
 8008bee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f000 808b 	beq.w	8008d0c <_dtoa_r+0x4f4>
 8008bf6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008bfa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008bfe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008c02:	2200      	movs	r2, #0
 8008c04:	4b6f      	ldr	r3, [pc, #444]	; (8008dc4 <_dtoa_r+0x5ac>)
 8008c06:	f7f7 fee3 	bl	80009d0 <__aeabi_dcmplt>
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	d07e      	beq.n	8008d0c <_dtoa_r+0x4f4>
 8008c0e:	9b08      	ldr	r3, [sp, #32]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d07b      	beq.n	8008d0c <_dtoa_r+0x4f4>
 8008c14:	f1b9 0f00 	cmp.w	r9, #0
 8008c18:	dd38      	ble.n	8008c8c <_dtoa_r+0x474>
 8008c1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008c1e:	2200      	movs	r2, #0
 8008c20:	4b69      	ldr	r3, [pc, #420]	; (8008dc8 <_dtoa_r+0x5b0>)
 8008c22:	f7f7 fc63 	bl	80004ec <__aeabi_dmul>
 8008c26:	464c      	mov	r4, r9
 8008c28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c2c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008c30:	3701      	adds	r7, #1
 8008c32:	4638      	mov	r0, r7
 8008c34:	f7f7 fbf0 	bl	8000418 <__aeabi_i2d>
 8008c38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c3c:	f7f7 fc56 	bl	80004ec <__aeabi_dmul>
 8008c40:	2200      	movs	r2, #0
 8008c42:	4b62      	ldr	r3, [pc, #392]	; (8008dcc <_dtoa_r+0x5b4>)
 8008c44:	f7f7 fa9c 	bl	8000180 <__adddf3>
 8008c48:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008c4c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008c50:	9611      	str	r6, [sp, #68]	; 0x44
 8008c52:	2c00      	cmp	r4, #0
 8008c54:	d15d      	bne.n	8008d12 <_dtoa_r+0x4fa>
 8008c56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	4b5c      	ldr	r3, [pc, #368]	; (8008dd0 <_dtoa_r+0x5b8>)
 8008c5e:	f7f7 fa8d 	bl	800017c <__aeabi_dsub>
 8008c62:	4602      	mov	r2, r0
 8008c64:	460b      	mov	r3, r1
 8008c66:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008c6a:	4633      	mov	r3, r6
 8008c6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008c6e:	f7f7 fecd 	bl	8000a0c <__aeabi_dcmpgt>
 8008c72:	2800      	cmp	r0, #0
 8008c74:	f040 829c 	bne.w	80091b0 <_dtoa_r+0x998>
 8008c78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008c7e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008c82:	f7f7 fea5 	bl	80009d0 <__aeabi_dcmplt>
 8008c86:	2800      	cmp	r0, #0
 8008c88:	f040 8290 	bne.w	80091ac <_dtoa_r+0x994>
 8008c8c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008c90:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008c94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f2c0 8152 	blt.w	8008f40 <_dtoa_r+0x728>
 8008c9c:	f1ba 0f0e 	cmp.w	sl, #14
 8008ca0:	f300 814e 	bgt.w	8008f40 <_dtoa_r+0x728>
 8008ca4:	4b45      	ldr	r3, [pc, #276]	; (8008dbc <_dtoa_r+0x5a4>)
 8008ca6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008caa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008cae:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008cb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f280 80db 	bge.w	8008e70 <_dtoa_r+0x658>
 8008cba:	9b08      	ldr	r3, [sp, #32]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f300 80d7 	bgt.w	8008e70 <_dtoa_r+0x658>
 8008cc2:	f040 8272 	bne.w	80091aa <_dtoa_r+0x992>
 8008cc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	4b40      	ldr	r3, [pc, #256]	; (8008dd0 <_dtoa_r+0x5b8>)
 8008cce:	f7f7 fc0d 	bl	80004ec <__aeabi_dmul>
 8008cd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cd6:	f7f7 fe8f 	bl	80009f8 <__aeabi_dcmpge>
 8008cda:	9c08      	ldr	r4, [sp, #32]
 8008cdc:	4626      	mov	r6, r4
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	f040 8248 	bne.w	8009174 <_dtoa_r+0x95c>
 8008ce4:	2331      	movs	r3, #49	; 0x31
 8008ce6:	9f03      	ldr	r7, [sp, #12]
 8008ce8:	f10a 0a01 	add.w	sl, sl, #1
 8008cec:	f807 3b01 	strb.w	r3, [r7], #1
 8008cf0:	e244      	b.n	800917c <_dtoa_r+0x964>
 8008cf2:	07e2      	lsls	r2, r4, #31
 8008cf4:	d505      	bpl.n	8008d02 <_dtoa_r+0x4ea>
 8008cf6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008cfa:	f7f7 fbf7 	bl	80004ec <__aeabi_dmul>
 8008cfe:	2301      	movs	r3, #1
 8008d00:	3701      	adds	r7, #1
 8008d02:	1064      	asrs	r4, r4, #1
 8008d04:	3608      	adds	r6, #8
 8008d06:	e76d      	b.n	8008be4 <_dtoa_r+0x3cc>
 8008d08:	2702      	movs	r7, #2
 8008d0a:	e770      	b.n	8008bee <_dtoa_r+0x3d6>
 8008d0c:	46d0      	mov	r8, sl
 8008d0e:	9c08      	ldr	r4, [sp, #32]
 8008d10:	e78f      	b.n	8008c32 <_dtoa_r+0x41a>
 8008d12:	9903      	ldr	r1, [sp, #12]
 8008d14:	4b29      	ldr	r3, [pc, #164]	; (8008dbc <_dtoa_r+0x5a4>)
 8008d16:	4421      	add	r1, r4
 8008d18:	9112      	str	r1, [sp, #72]	; 0x48
 8008d1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d20:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008d24:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d28:	2900      	cmp	r1, #0
 8008d2a:	d055      	beq.n	8008dd8 <_dtoa_r+0x5c0>
 8008d2c:	2000      	movs	r0, #0
 8008d2e:	4929      	ldr	r1, [pc, #164]	; (8008dd4 <_dtoa_r+0x5bc>)
 8008d30:	f7f7 fd06 	bl	8000740 <__aeabi_ddiv>
 8008d34:	463b      	mov	r3, r7
 8008d36:	4632      	mov	r2, r6
 8008d38:	f7f7 fa20 	bl	800017c <__aeabi_dsub>
 8008d3c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008d40:	9f03      	ldr	r7, [sp, #12]
 8008d42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d46:	f7f7 fe81 	bl	8000a4c <__aeabi_d2iz>
 8008d4a:	4604      	mov	r4, r0
 8008d4c:	f7f7 fb64 	bl	8000418 <__aeabi_i2d>
 8008d50:	4602      	mov	r2, r0
 8008d52:	460b      	mov	r3, r1
 8008d54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d58:	f7f7 fa10 	bl	800017c <__aeabi_dsub>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	460b      	mov	r3, r1
 8008d60:	3430      	adds	r4, #48	; 0x30
 8008d62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008d66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008d6a:	f807 4b01 	strb.w	r4, [r7], #1
 8008d6e:	f7f7 fe2f 	bl	80009d0 <__aeabi_dcmplt>
 8008d72:	2800      	cmp	r0, #0
 8008d74:	d174      	bne.n	8008e60 <_dtoa_r+0x648>
 8008d76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d7a:	2000      	movs	r0, #0
 8008d7c:	4911      	ldr	r1, [pc, #68]	; (8008dc4 <_dtoa_r+0x5ac>)
 8008d7e:	f7f7 f9fd 	bl	800017c <__aeabi_dsub>
 8008d82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008d86:	f7f7 fe23 	bl	80009d0 <__aeabi_dcmplt>
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	f040 80b7 	bne.w	8008efe <_dtoa_r+0x6e6>
 8008d90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d92:	429f      	cmp	r7, r3
 8008d94:	f43f af7a 	beq.w	8008c8c <_dtoa_r+0x474>
 8008d98:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	4b0a      	ldr	r3, [pc, #40]	; (8008dc8 <_dtoa_r+0x5b0>)
 8008da0:	f7f7 fba4 	bl	80004ec <__aeabi_dmul>
 8008da4:	2200      	movs	r2, #0
 8008da6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008daa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dae:	4b06      	ldr	r3, [pc, #24]	; (8008dc8 <_dtoa_r+0x5b0>)
 8008db0:	f7f7 fb9c 	bl	80004ec <__aeabi_dmul>
 8008db4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008db8:	e7c3      	b.n	8008d42 <_dtoa_r+0x52a>
 8008dba:	bf00      	nop
 8008dbc:	0800b8d8 	.word	0x0800b8d8
 8008dc0:	0800b8b0 	.word	0x0800b8b0
 8008dc4:	3ff00000 	.word	0x3ff00000
 8008dc8:	40240000 	.word	0x40240000
 8008dcc:	401c0000 	.word	0x401c0000
 8008dd0:	40140000 	.word	0x40140000
 8008dd4:	3fe00000 	.word	0x3fe00000
 8008dd8:	4630      	mov	r0, r6
 8008dda:	4639      	mov	r1, r7
 8008ddc:	f7f7 fb86 	bl	80004ec <__aeabi_dmul>
 8008de0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008de2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008de6:	9c03      	ldr	r4, [sp, #12]
 8008de8:	9314      	str	r3, [sp, #80]	; 0x50
 8008dea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dee:	f7f7 fe2d 	bl	8000a4c <__aeabi_d2iz>
 8008df2:	9015      	str	r0, [sp, #84]	; 0x54
 8008df4:	f7f7 fb10 	bl	8000418 <__aeabi_i2d>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e00:	f7f7 f9bc 	bl	800017c <__aeabi_dsub>
 8008e04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e06:	4606      	mov	r6, r0
 8008e08:	3330      	adds	r3, #48	; 0x30
 8008e0a:	f804 3b01 	strb.w	r3, [r4], #1
 8008e0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e10:	460f      	mov	r7, r1
 8008e12:	429c      	cmp	r4, r3
 8008e14:	f04f 0200 	mov.w	r2, #0
 8008e18:	d124      	bne.n	8008e64 <_dtoa_r+0x64c>
 8008e1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008e1e:	4bb0      	ldr	r3, [pc, #704]	; (80090e0 <_dtoa_r+0x8c8>)
 8008e20:	f7f7 f9ae 	bl	8000180 <__adddf3>
 8008e24:	4602      	mov	r2, r0
 8008e26:	460b      	mov	r3, r1
 8008e28:	4630      	mov	r0, r6
 8008e2a:	4639      	mov	r1, r7
 8008e2c:	f7f7 fdee 	bl	8000a0c <__aeabi_dcmpgt>
 8008e30:	2800      	cmp	r0, #0
 8008e32:	d163      	bne.n	8008efc <_dtoa_r+0x6e4>
 8008e34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e38:	2000      	movs	r0, #0
 8008e3a:	49a9      	ldr	r1, [pc, #676]	; (80090e0 <_dtoa_r+0x8c8>)
 8008e3c:	f7f7 f99e 	bl	800017c <__aeabi_dsub>
 8008e40:	4602      	mov	r2, r0
 8008e42:	460b      	mov	r3, r1
 8008e44:	4630      	mov	r0, r6
 8008e46:	4639      	mov	r1, r7
 8008e48:	f7f7 fdc2 	bl	80009d0 <__aeabi_dcmplt>
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	f43f af1d 	beq.w	8008c8c <_dtoa_r+0x474>
 8008e52:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008e54:	1e7b      	subs	r3, r7, #1
 8008e56:	9314      	str	r3, [sp, #80]	; 0x50
 8008e58:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008e5c:	2b30      	cmp	r3, #48	; 0x30
 8008e5e:	d0f8      	beq.n	8008e52 <_dtoa_r+0x63a>
 8008e60:	46c2      	mov	sl, r8
 8008e62:	e03b      	b.n	8008edc <_dtoa_r+0x6c4>
 8008e64:	4b9f      	ldr	r3, [pc, #636]	; (80090e4 <_dtoa_r+0x8cc>)
 8008e66:	f7f7 fb41 	bl	80004ec <__aeabi_dmul>
 8008e6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e6e:	e7bc      	b.n	8008dea <_dtoa_r+0x5d2>
 8008e70:	9f03      	ldr	r7, [sp, #12]
 8008e72:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008e76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e7a:	4640      	mov	r0, r8
 8008e7c:	4649      	mov	r1, r9
 8008e7e:	f7f7 fc5f 	bl	8000740 <__aeabi_ddiv>
 8008e82:	f7f7 fde3 	bl	8000a4c <__aeabi_d2iz>
 8008e86:	4604      	mov	r4, r0
 8008e88:	f7f7 fac6 	bl	8000418 <__aeabi_i2d>
 8008e8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e90:	f7f7 fb2c 	bl	80004ec <__aeabi_dmul>
 8008e94:	4602      	mov	r2, r0
 8008e96:	460b      	mov	r3, r1
 8008e98:	4640      	mov	r0, r8
 8008e9a:	4649      	mov	r1, r9
 8008e9c:	f7f7 f96e 	bl	800017c <__aeabi_dsub>
 8008ea0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008ea4:	f807 6b01 	strb.w	r6, [r7], #1
 8008ea8:	9e03      	ldr	r6, [sp, #12]
 8008eaa:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008eae:	1bbe      	subs	r6, r7, r6
 8008eb0:	45b4      	cmp	ip, r6
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	d136      	bne.n	8008f26 <_dtoa_r+0x70e>
 8008eb8:	f7f7 f962 	bl	8000180 <__adddf3>
 8008ebc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ec0:	4680      	mov	r8, r0
 8008ec2:	4689      	mov	r9, r1
 8008ec4:	f7f7 fda2 	bl	8000a0c <__aeabi_dcmpgt>
 8008ec8:	bb58      	cbnz	r0, 8008f22 <_dtoa_r+0x70a>
 8008eca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ece:	4640      	mov	r0, r8
 8008ed0:	4649      	mov	r1, r9
 8008ed2:	f7f7 fd73 	bl	80009bc <__aeabi_dcmpeq>
 8008ed6:	b108      	cbz	r0, 8008edc <_dtoa_r+0x6c4>
 8008ed8:	07e1      	lsls	r1, r4, #31
 8008eda:	d422      	bmi.n	8008f22 <_dtoa_r+0x70a>
 8008edc:	4628      	mov	r0, r5
 8008ede:	4659      	mov	r1, fp
 8008ee0:	f000 fe7a 	bl	8009bd8 <_Bfree>
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	703b      	strb	r3, [r7, #0]
 8008ee8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008eea:	f10a 0001 	add.w	r0, sl, #1
 8008eee:	6018      	str	r0, [r3, #0]
 8008ef0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f43f acde 	beq.w	80088b4 <_dtoa_r+0x9c>
 8008ef8:	601f      	str	r7, [r3, #0]
 8008efa:	e4db      	b.n	80088b4 <_dtoa_r+0x9c>
 8008efc:	4627      	mov	r7, r4
 8008efe:	463b      	mov	r3, r7
 8008f00:	461f      	mov	r7, r3
 8008f02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f06:	2a39      	cmp	r2, #57	; 0x39
 8008f08:	d107      	bne.n	8008f1a <_dtoa_r+0x702>
 8008f0a:	9a03      	ldr	r2, [sp, #12]
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d1f7      	bne.n	8008f00 <_dtoa_r+0x6e8>
 8008f10:	2230      	movs	r2, #48	; 0x30
 8008f12:	9903      	ldr	r1, [sp, #12]
 8008f14:	f108 0801 	add.w	r8, r8, #1
 8008f18:	700a      	strb	r2, [r1, #0]
 8008f1a:	781a      	ldrb	r2, [r3, #0]
 8008f1c:	3201      	adds	r2, #1
 8008f1e:	701a      	strb	r2, [r3, #0]
 8008f20:	e79e      	b.n	8008e60 <_dtoa_r+0x648>
 8008f22:	46d0      	mov	r8, sl
 8008f24:	e7eb      	b.n	8008efe <_dtoa_r+0x6e6>
 8008f26:	2200      	movs	r2, #0
 8008f28:	4b6e      	ldr	r3, [pc, #440]	; (80090e4 <_dtoa_r+0x8cc>)
 8008f2a:	f7f7 fadf 	bl	80004ec <__aeabi_dmul>
 8008f2e:	2200      	movs	r2, #0
 8008f30:	2300      	movs	r3, #0
 8008f32:	4680      	mov	r8, r0
 8008f34:	4689      	mov	r9, r1
 8008f36:	f7f7 fd41 	bl	80009bc <__aeabi_dcmpeq>
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	d09b      	beq.n	8008e76 <_dtoa_r+0x65e>
 8008f3e:	e7cd      	b.n	8008edc <_dtoa_r+0x6c4>
 8008f40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f42:	2a00      	cmp	r2, #0
 8008f44:	f000 80d0 	beq.w	80090e8 <_dtoa_r+0x8d0>
 8008f48:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008f4a:	2a01      	cmp	r2, #1
 8008f4c:	f300 80ae 	bgt.w	80090ac <_dtoa_r+0x894>
 8008f50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008f52:	2a00      	cmp	r2, #0
 8008f54:	f000 80a6 	beq.w	80090a4 <_dtoa_r+0x88c>
 8008f58:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008f5e:	9f06      	ldr	r7, [sp, #24]
 8008f60:	9a06      	ldr	r2, [sp, #24]
 8008f62:	2101      	movs	r1, #1
 8008f64:	441a      	add	r2, r3
 8008f66:	9206      	str	r2, [sp, #24]
 8008f68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	441a      	add	r2, r3
 8008f6e:	9209      	str	r2, [sp, #36]	; 0x24
 8008f70:	f000 ff32 	bl	8009dd8 <__i2b>
 8008f74:	4606      	mov	r6, r0
 8008f76:	2f00      	cmp	r7, #0
 8008f78:	dd0c      	ble.n	8008f94 <_dtoa_r+0x77c>
 8008f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	dd09      	ble.n	8008f94 <_dtoa_r+0x77c>
 8008f80:	42bb      	cmp	r3, r7
 8008f82:	bfa8      	it	ge
 8008f84:	463b      	movge	r3, r7
 8008f86:	9a06      	ldr	r2, [sp, #24]
 8008f88:	1aff      	subs	r7, r7, r3
 8008f8a:	1ad2      	subs	r2, r2, r3
 8008f8c:	9206      	str	r2, [sp, #24]
 8008f8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f90:	1ad3      	subs	r3, r2, r3
 8008f92:	9309      	str	r3, [sp, #36]	; 0x24
 8008f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f96:	b1f3      	cbz	r3, 8008fd6 <_dtoa_r+0x7be>
 8008f98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f000 80a8 	beq.w	80090f0 <_dtoa_r+0x8d8>
 8008fa0:	2c00      	cmp	r4, #0
 8008fa2:	dd10      	ble.n	8008fc6 <_dtoa_r+0x7ae>
 8008fa4:	4631      	mov	r1, r6
 8008fa6:	4622      	mov	r2, r4
 8008fa8:	4628      	mov	r0, r5
 8008faa:	f000 ffd3 	bl	8009f54 <__pow5mult>
 8008fae:	465a      	mov	r2, fp
 8008fb0:	4601      	mov	r1, r0
 8008fb2:	4606      	mov	r6, r0
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	f000 ff25 	bl	8009e04 <__multiply>
 8008fba:	4680      	mov	r8, r0
 8008fbc:	4659      	mov	r1, fp
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	f000 fe0a 	bl	8009bd8 <_Bfree>
 8008fc4:	46c3      	mov	fp, r8
 8008fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fc8:	1b1a      	subs	r2, r3, r4
 8008fca:	d004      	beq.n	8008fd6 <_dtoa_r+0x7be>
 8008fcc:	4659      	mov	r1, fp
 8008fce:	4628      	mov	r0, r5
 8008fd0:	f000 ffc0 	bl	8009f54 <__pow5mult>
 8008fd4:	4683      	mov	fp, r0
 8008fd6:	2101      	movs	r1, #1
 8008fd8:	4628      	mov	r0, r5
 8008fda:	f000 fefd 	bl	8009dd8 <__i2b>
 8008fde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f340 8086 	ble.w	80090f4 <_dtoa_r+0x8dc>
 8008fe8:	461a      	mov	r2, r3
 8008fea:	4601      	mov	r1, r0
 8008fec:	4628      	mov	r0, r5
 8008fee:	f000 ffb1 	bl	8009f54 <__pow5mult>
 8008ff2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ff4:	4604      	mov	r4, r0
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	dd7f      	ble.n	80090fa <_dtoa_r+0x8e2>
 8008ffa:	f04f 0800 	mov.w	r8, #0
 8008ffe:	6923      	ldr	r3, [r4, #16]
 8009000:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009004:	6918      	ldr	r0, [r3, #16]
 8009006:	f000 fe99 	bl	8009d3c <__hi0bits>
 800900a:	f1c0 0020 	rsb	r0, r0, #32
 800900e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009010:	4418      	add	r0, r3
 8009012:	f010 001f 	ands.w	r0, r0, #31
 8009016:	f000 8092 	beq.w	800913e <_dtoa_r+0x926>
 800901a:	f1c0 0320 	rsb	r3, r0, #32
 800901e:	2b04      	cmp	r3, #4
 8009020:	f340 808a 	ble.w	8009138 <_dtoa_r+0x920>
 8009024:	f1c0 001c 	rsb	r0, r0, #28
 8009028:	9b06      	ldr	r3, [sp, #24]
 800902a:	4407      	add	r7, r0
 800902c:	4403      	add	r3, r0
 800902e:	9306      	str	r3, [sp, #24]
 8009030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009032:	4403      	add	r3, r0
 8009034:	9309      	str	r3, [sp, #36]	; 0x24
 8009036:	9b06      	ldr	r3, [sp, #24]
 8009038:	2b00      	cmp	r3, #0
 800903a:	dd05      	ble.n	8009048 <_dtoa_r+0x830>
 800903c:	4659      	mov	r1, fp
 800903e:	461a      	mov	r2, r3
 8009040:	4628      	mov	r0, r5
 8009042:	f000 ffe1 	bl	800a008 <__lshift>
 8009046:	4683      	mov	fp, r0
 8009048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800904a:	2b00      	cmp	r3, #0
 800904c:	dd05      	ble.n	800905a <_dtoa_r+0x842>
 800904e:	4621      	mov	r1, r4
 8009050:	461a      	mov	r2, r3
 8009052:	4628      	mov	r0, r5
 8009054:	f000 ffd8 	bl	800a008 <__lshift>
 8009058:	4604      	mov	r4, r0
 800905a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800905c:	2b00      	cmp	r3, #0
 800905e:	d070      	beq.n	8009142 <_dtoa_r+0x92a>
 8009060:	4621      	mov	r1, r4
 8009062:	4658      	mov	r0, fp
 8009064:	f001 f840 	bl	800a0e8 <__mcmp>
 8009068:	2800      	cmp	r0, #0
 800906a:	da6a      	bge.n	8009142 <_dtoa_r+0x92a>
 800906c:	2300      	movs	r3, #0
 800906e:	4659      	mov	r1, fp
 8009070:	220a      	movs	r2, #10
 8009072:	4628      	mov	r0, r5
 8009074:	f000 fdd2 	bl	8009c1c <__multadd>
 8009078:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800907a:	4683      	mov	fp, r0
 800907c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009080:	2b00      	cmp	r3, #0
 8009082:	f000 8194 	beq.w	80093ae <_dtoa_r+0xb96>
 8009086:	4631      	mov	r1, r6
 8009088:	2300      	movs	r3, #0
 800908a:	220a      	movs	r2, #10
 800908c:	4628      	mov	r0, r5
 800908e:	f000 fdc5 	bl	8009c1c <__multadd>
 8009092:	f1b9 0f00 	cmp.w	r9, #0
 8009096:	4606      	mov	r6, r0
 8009098:	f300 8093 	bgt.w	80091c2 <_dtoa_r+0x9aa>
 800909c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800909e:	2b02      	cmp	r3, #2
 80090a0:	dc57      	bgt.n	8009152 <_dtoa_r+0x93a>
 80090a2:	e08e      	b.n	80091c2 <_dtoa_r+0x9aa>
 80090a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80090a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80090aa:	e757      	b.n	8008f5c <_dtoa_r+0x744>
 80090ac:	9b08      	ldr	r3, [sp, #32]
 80090ae:	1e5c      	subs	r4, r3, #1
 80090b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090b2:	42a3      	cmp	r3, r4
 80090b4:	bfb7      	itett	lt
 80090b6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80090b8:	1b1c      	subge	r4, r3, r4
 80090ba:	1ae2      	sublt	r2, r4, r3
 80090bc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80090be:	bfbe      	ittt	lt
 80090c0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80090c2:	189b      	addlt	r3, r3, r2
 80090c4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80090c6:	9b08      	ldr	r3, [sp, #32]
 80090c8:	bfb8      	it	lt
 80090ca:	2400      	movlt	r4, #0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	bfbb      	ittet	lt
 80090d0:	9b06      	ldrlt	r3, [sp, #24]
 80090d2:	9a08      	ldrlt	r2, [sp, #32]
 80090d4:	9f06      	ldrge	r7, [sp, #24]
 80090d6:	1a9f      	sublt	r7, r3, r2
 80090d8:	bfac      	ite	ge
 80090da:	9b08      	ldrge	r3, [sp, #32]
 80090dc:	2300      	movlt	r3, #0
 80090de:	e73f      	b.n	8008f60 <_dtoa_r+0x748>
 80090e0:	3fe00000 	.word	0x3fe00000
 80090e4:	40240000 	.word	0x40240000
 80090e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80090ea:	9f06      	ldr	r7, [sp, #24]
 80090ec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80090ee:	e742      	b.n	8008f76 <_dtoa_r+0x75e>
 80090f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090f2:	e76b      	b.n	8008fcc <_dtoa_r+0x7b4>
 80090f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	dc19      	bgt.n	800912e <_dtoa_r+0x916>
 80090fa:	9b04      	ldr	r3, [sp, #16]
 80090fc:	b9bb      	cbnz	r3, 800912e <_dtoa_r+0x916>
 80090fe:	9b05      	ldr	r3, [sp, #20]
 8009100:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009104:	b99b      	cbnz	r3, 800912e <_dtoa_r+0x916>
 8009106:	9b05      	ldr	r3, [sp, #20]
 8009108:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800910c:	0d1b      	lsrs	r3, r3, #20
 800910e:	051b      	lsls	r3, r3, #20
 8009110:	b183      	cbz	r3, 8009134 <_dtoa_r+0x91c>
 8009112:	f04f 0801 	mov.w	r8, #1
 8009116:	9b06      	ldr	r3, [sp, #24]
 8009118:	3301      	adds	r3, #1
 800911a:	9306      	str	r3, [sp, #24]
 800911c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800911e:	3301      	adds	r3, #1
 8009120:	9309      	str	r3, [sp, #36]	; 0x24
 8009122:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009124:	2b00      	cmp	r3, #0
 8009126:	f47f af6a 	bne.w	8008ffe <_dtoa_r+0x7e6>
 800912a:	2001      	movs	r0, #1
 800912c:	e76f      	b.n	800900e <_dtoa_r+0x7f6>
 800912e:	f04f 0800 	mov.w	r8, #0
 8009132:	e7f6      	b.n	8009122 <_dtoa_r+0x90a>
 8009134:	4698      	mov	r8, r3
 8009136:	e7f4      	b.n	8009122 <_dtoa_r+0x90a>
 8009138:	f43f af7d 	beq.w	8009036 <_dtoa_r+0x81e>
 800913c:	4618      	mov	r0, r3
 800913e:	301c      	adds	r0, #28
 8009140:	e772      	b.n	8009028 <_dtoa_r+0x810>
 8009142:	9b08      	ldr	r3, [sp, #32]
 8009144:	2b00      	cmp	r3, #0
 8009146:	dc36      	bgt.n	80091b6 <_dtoa_r+0x99e>
 8009148:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800914a:	2b02      	cmp	r3, #2
 800914c:	dd33      	ble.n	80091b6 <_dtoa_r+0x99e>
 800914e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009152:	f1b9 0f00 	cmp.w	r9, #0
 8009156:	d10d      	bne.n	8009174 <_dtoa_r+0x95c>
 8009158:	4621      	mov	r1, r4
 800915a:	464b      	mov	r3, r9
 800915c:	2205      	movs	r2, #5
 800915e:	4628      	mov	r0, r5
 8009160:	f000 fd5c 	bl	8009c1c <__multadd>
 8009164:	4601      	mov	r1, r0
 8009166:	4604      	mov	r4, r0
 8009168:	4658      	mov	r0, fp
 800916a:	f000 ffbd 	bl	800a0e8 <__mcmp>
 800916e:	2800      	cmp	r0, #0
 8009170:	f73f adb8 	bgt.w	8008ce4 <_dtoa_r+0x4cc>
 8009174:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009176:	9f03      	ldr	r7, [sp, #12]
 8009178:	ea6f 0a03 	mvn.w	sl, r3
 800917c:	f04f 0800 	mov.w	r8, #0
 8009180:	4621      	mov	r1, r4
 8009182:	4628      	mov	r0, r5
 8009184:	f000 fd28 	bl	8009bd8 <_Bfree>
 8009188:	2e00      	cmp	r6, #0
 800918a:	f43f aea7 	beq.w	8008edc <_dtoa_r+0x6c4>
 800918e:	f1b8 0f00 	cmp.w	r8, #0
 8009192:	d005      	beq.n	80091a0 <_dtoa_r+0x988>
 8009194:	45b0      	cmp	r8, r6
 8009196:	d003      	beq.n	80091a0 <_dtoa_r+0x988>
 8009198:	4641      	mov	r1, r8
 800919a:	4628      	mov	r0, r5
 800919c:	f000 fd1c 	bl	8009bd8 <_Bfree>
 80091a0:	4631      	mov	r1, r6
 80091a2:	4628      	mov	r0, r5
 80091a4:	f000 fd18 	bl	8009bd8 <_Bfree>
 80091a8:	e698      	b.n	8008edc <_dtoa_r+0x6c4>
 80091aa:	2400      	movs	r4, #0
 80091ac:	4626      	mov	r6, r4
 80091ae:	e7e1      	b.n	8009174 <_dtoa_r+0x95c>
 80091b0:	46c2      	mov	sl, r8
 80091b2:	4626      	mov	r6, r4
 80091b4:	e596      	b.n	8008ce4 <_dtoa_r+0x4cc>
 80091b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	f000 80fd 	beq.w	80093bc <_dtoa_r+0xba4>
 80091c2:	2f00      	cmp	r7, #0
 80091c4:	dd05      	ble.n	80091d2 <_dtoa_r+0x9ba>
 80091c6:	4631      	mov	r1, r6
 80091c8:	463a      	mov	r2, r7
 80091ca:	4628      	mov	r0, r5
 80091cc:	f000 ff1c 	bl	800a008 <__lshift>
 80091d0:	4606      	mov	r6, r0
 80091d2:	f1b8 0f00 	cmp.w	r8, #0
 80091d6:	d05c      	beq.n	8009292 <_dtoa_r+0xa7a>
 80091d8:	4628      	mov	r0, r5
 80091da:	6871      	ldr	r1, [r6, #4]
 80091dc:	f000 fcbc 	bl	8009b58 <_Balloc>
 80091e0:	4607      	mov	r7, r0
 80091e2:	b928      	cbnz	r0, 80091f0 <_dtoa_r+0x9d8>
 80091e4:	4602      	mov	r2, r0
 80091e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80091ea:	4b7f      	ldr	r3, [pc, #508]	; (80093e8 <_dtoa_r+0xbd0>)
 80091ec:	f7ff bb28 	b.w	8008840 <_dtoa_r+0x28>
 80091f0:	6932      	ldr	r2, [r6, #16]
 80091f2:	f106 010c 	add.w	r1, r6, #12
 80091f6:	3202      	adds	r2, #2
 80091f8:	0092      	lsls	r2, r2, #2
 80091fa:	300c      	adds	r0, #12
 80091fc:	f000 fc9e 	bl	8009b3c <memcpy>
 8009200:	2201      	movs	r2, #1
 8009202:	4639      	mov	r1, r7
 8009204:	4628      	mov	r0, r5
 8009206:	f000 feff 	bl	800a008 <__lshift>
 800920a:	46b0      	mov	r8, r6
 800920c:	4606      	mov	r6, r0
 800920e:	9b03      	ldr	r3, [sp, #12]
 8009210:	3301      	adds	r3, #1
 8009212:	9308      	str	r3, [sp, #32]
 8009214:	9b03      	ldr	r3, [sp, #12]
 8009216:	444b      	add	r3, r9
 8009218:	930a      	str	r3, [sp, #40]	; 0x28
 800921a:	9b04      	ldr	r3, [sp, #16]
 800921c:	f003 0301 	and.w	r3, r3, #1
 8009220:	9309      	str	r3, [sp, #36]	; 0x24
 8009222:	9b08      	ldr	r3, [sp, #32]
 8009224:	4621      	mov	r1, r4
 8009226:	3b01      	subs	r3, #1
 8009228:	4658      	mov	r0, fp
 800922a:	9304      	str	r3, [sp, #16]
 800922c:	f7ff fa66 	bl	80086fc <quorem>
 8009230:	4603      	mov	r3, r0
 8009232:	4641      	mov	r1, r8
 8009234:	3330      	adds	r3, #48	; 0x30
 8009236:	9006      	str	r0, [sp, #24]
 8009238:	4658      	mov	r0, fp
 800923a:	930b      	str	r3, [sp, #44]	; 0x2c
 800923c:	f000 ff54 	bl	800a0e8 <__mcmp>
 8009240:	4632      	mov	r2, r6
 8009242:	4681      	mov	r9, r0
 8009244:	4621      	mov	r1, r4
 8009246:	4628      	mov	r0, r5
 8009248:	f000 ff6a 	bl	800a120 <__mdiff>
 800924c:	68c2      	ldr	r2, [r0, #12]
 800924e:	4607      	mov	r7, r0
 8009250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009252:	bb02      	cbnz	r2, 8009296 <_dtoa_r+0xa7e>
 8009254:	4601      	mov	r1, r0
 8009256:	4658      	mov	r0, fp
 8009258:	f000 ff46 	bl	800a0e8 <__mcmp>
 800925c:	4602      	mov	r2, r0
 800925e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009260:	4639      	mov	r1, r7
 8009262:	4628      	mov	r0, r5
 8009264:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8009268:	f000 fcb6 	bl	8009bd8 <_Bfree>
 800926c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800926e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009270:	9f08      	ldr	r7, [sp, #32]
 8009272:	ea43 0102 	orr.w	r1, r3, r2
 8009276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009278:	430b      	orrs	r3, r1
 800927a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800927c:	d10d      	bne.n	800929a <_dtoa_r+0xa82>
 800927e:	2b39      	cmp	r3, #57	; 0x39
 8009280:	d029      	beq.n	80092d6 <_dtoa_r+0xabe>
 8009282:	f1b9 0f00 	cmp.w	r9, #0
 8009286:	dd01      	ble.n	800928c <_dtoa_r+0xa74>
 8009288:	9b06      	ldr	r3, [sp, #24]
 800928a:	3331      	adds	r3, #49	; 0x31
 800928c:	9a04      	ldr	r2, [sp, #16]
 800928e:	7013      	strb	r3, [r2, #0]
 8009290:	e776      	b.n	8009180 <_dtoa_r+0x968>
 8009292:	4630      	mov	r0, r6
 8009294:	e7b9      	b.n	800920a <_dtoa_r+0x9f2>
 8009296:	2201      	movs	r2, #1
 8009298:	e7e2      	b.n	8009260 <_dtoa_r+0xa48>
 800929a:	f1b9 0f00 	cmp.w	r9, #0
 800929e:	db06      	blt.n	80092ae <_dtoa_r+0xa96>
 80092a0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80092a2:	ea41 0909 	orr.w	r9, r1, r9
 80092a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80092a8:	ea59 0101 	orrs.w	r1, r9, r1
 80092ac:	d120      	bne.n	80092f0 <_dtoa_r+0xad8>
 80092ae:	2a00      	cmp	r2, #0
 80092b0:	ddec      	ble.n	800928c <_dtoa_r+0xa74>
 80092b2:	4659      	mov	r1, fp
 80092b4:	2201      	movs	r2, #1
 80092b6:	4628      	mov	r0, r5
 80092b8:	9308      	str	r3, [sp, #32]
 80092ba:	f000 fea5 	bl	800a008 <__lshift>
 80092be:	4621      	mov	r1, r4
 80092c0:	4683      	mov	fp, r0
 80092c2:	f000 ff11 	bl	800a0e8 <__mcmp>
 80092c6:	2800      	cmp	r0, #0
 80092c8:	9b08      	ldr	r3, [sp, #32]
 80092ca:	dc02      	bgt.n	80092d2 <_dtoa_r+0xaba>
 80092cc:	d1de      	bne.n	800928c <_dtoa_r+0xa74>
 80092ce:	07da      	lsls	r2, r3, #31
 80092d0:	d5dc      	bpl.n	800928c <_dtoa_r+0xa74>
 80092d2:	2b39      	cmp	r3, #57	; 0x39
 80092d4:	d1d8      	bne.n	8009288 <_dtoa_r+0xa70>
 80092d6:	2339      	movs	r3, #57	; 0x39
 80092d8:	9a04      	ldr	r2, [sp, #16]
 80092da:	7013      	strb	r3, [r2, #0]
 80092dc:	463b      	mov	r3, r7
 80092de:	461f      	mov	r7, r3
 80092e0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80092e4:	3b01      	subs	r3, #1
 80092e6:	2a39      	cmp	r2, #57	; 0x39
 80092e8:	d050      	beq.n	800938c <_dtoa_r+0xb74>
 80092ea:	3201      	adds	r2, #1
 80092ec:	701a      	strb	r2, [r3, #0]
 80092ee:	e747      	b.n	8009180 <_dtoa_r+0x968>
 80092f0:	2a00      	cmp	r2, #0
 80092f2:	dd03      	ble.n	80092fc <_dtoa_r+0xae4>
 80092f4:	2b39      	cmp	r3, #57	; 0x39
 80092f6:	d0ee      	beq.n	80092d6 <_dtoa_r+0xabe>
 80092f8:	3301      	adds	r3, #1
 80092fa:	e7c7      	b.n	800928c <_dtoa_r+0xa74>
 80092fc:	9a08      	ldr	r2, [sp, #32]
 80092fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009300:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009304:	428a      	cmp	r2, r1
 8009306:	d02a      	beq.n	800935e <_dtoa_r+0xb46>
 8009308:	4659      	mov	r1, fp
 800930a:	2300      	movs	r3, #0
 800930c:	220a      	movs	r2, #10
 800930e:	4628      	mov	r0, r5
 8009310:	f000 fc84 	bl	8009c1c <__multadd>
 8009314:	45b0      	cmp	r8, r6
 8009316:	4683      	mov	fp, r0
 8009318:	f04f 0300 	mov.w	r3, #0
 800931c:	f04f 020a 	mov.w	r2, #10
 8009320:	4641      	mov	r1, r8
 8009322:	4628      	mov	r0, r5
 8009324:	d107      	bne.n	8009336 <_dtoa_r+0xb1e>
 8009326:	f000 fc79 	bl	8009c1c <__multadd>
 800932a:	4680      	mov	r8, r0
 800932c:	4606      	mov	r6, r0
 800932e:	9b08      	ldr	r3, [sp, #32]
 8009330:	3301      	adds	r3, #1
 8009332:	9308      	str	r3, [sp, #32]
 8009334:	e775      	b.n	8009222 <_dtoa_r+0xa0a>
 8009336:	f000 fc71 	bl	8009c1c <__multadd>
 800933a:	4631      	mov	r1, r6
 800933c:	4680      	mov	r8, r0
 800933e:	2300      	movs	r3, #0
 8009340:	220a      	movs	r2, #10
 8009342:	4628      	mov	r0, r5
 8009344:	f000 fc6a 	bl	8009c1c <__multadd>
 8009348:	4606      	mov	r6, r0
 800934a:	e7f0      	b.n	800932e <_dtoa_r+0xb16>
 800934c:	f1b9 0f00 	cmp.w	r9, #0
 8009350:	bfcc      	ite	gt
 8009352:	464f      	movgt	r7, r9
 8009354:	2701      	movle	r7, #1
 8009356:	f04f 0800 	mov.w	r8, #0
 800935a:	9a03      	ldr	r2, [sp, #12]
 800935c:	4417      	add	r7, r2
 800935e:	4659      	mov	r1, fp
 8009360:	2201      	movs	r2, #1
 8009362:	4628      	mov	r0, r5
 8009364:	9308      	str	r3, [sp, #32]
 8009366:	f000 fe4f 	bl	800a008 <__lshift>
 800936a:	4621      	mov	r1, r4
 800936c:	4683      	mov	fp, r0
 800936e:	f000 febb 	bl	800a0e8 <__mcmp>
 8009372:	2800      	cmp	r0, #0
 8009374:	dcb2      	bgt.n	80092dc <_dtoa_r+0xac4>
 8009376:	d102      	bne.n	800937e <_dtoa_r+0xb66>
 8009378:	9b08      	ldr	r3, [sp, #32]
 800937a:	07db      	lsls	r3, r3, #31
 800937c:	d4ae      	bmi.n	80092dc <_dtoa_r+0xac4>
 800937e:	463b      	mov	r3, r7
 8009380:	461f      	mov	r7, r3
 8009382:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009386:	2a30      	cmp	r2, #48	; 0x30
 8009388:	d0fa      	beq.n	8009380 <_dtoa_r+0xb68>
 800938a:	e6f9      	b.n	8009180 <_dtoa_r+0x968>
 800938c:	9a03      	ldr	r2, [sp, #12]
 800938e:	429a      	cmp	r2, r3
 8009390:	d1a5      	bne.n	80092de <_dtoa_r+0xac6>
 8009392:	2331      	movs	r3, #49	; 0x31
 8009394:	f10a 0a01 	add.w	sl, sl, #1
 8009398:	e779      	b.n	800928e <_dtoa_r+0xa76>
 800939a:	4b14      	ldr	r3, [pc, #80]	; (80093ec <_dtoa_r+0xbd4>)
 800939c:	f7ff baa8 	b.w	80088f0 <_dtoa_r+0xd8>
 80093a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	f47f aa81 	bne.w	80088aa <_dtoa_r+0x92>
 80093a8:	4b11      	ldr	r3, [pc, #68]	; (80093f0 <_dtoa_r+0xbd8>)
 80093aa:	f7ff baa1 	b.w	80088f0 <_dtoa_r+0xd8>
 80093ae:	f1b9 0f00 	cmp.w	r9, #0
 80093b2:	dc03      	bgt.n	80093bc <_dtoa_r+0xba4>
 80093b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	f73f aecb 	bgt.w	8009152 <_dtoa_r+0x93a>
 80093bc:	9f03      	ldr	r7, [sp, #12]
 80093be:	4621      	mov	r1, r4
 80093c0:	4658      	mov	r0, fp
 80093c2:	f7ff f99b 	bl	80086fc <quorem>
 80093c6:	9a03      	ldr	r2, [sp, #12]
 80093c8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80093cc:	f807 3b01 	strb.w	r3, [r7], #1
 80093d0:	1aba      	subs	r2, r7, r2
 80093d2:	4591      	cmp	r9, r2
 80093d4:	ddba      	ble.n	800934c <_dtoa_r+0xb34>
 80093d6:	4659      	mov	r1, fp
 80093d8:	2300      	movs	r3, #0
 80093da:	220a      	movs	r2, #10
 80093dc:	4628      	mov	r0, r5
 80093de:	f000 fc1d 	bl	8009c1c <__multadd>
 80093e2:	4683      	mov	fp, r0
 80093e4:	e7eb      	b.n	80093be <_dtoa_r+0xba6>
 80093e6:	bf00      	nop
 80093e8:	0800b7c8 	.word	0x0800b7c8
 80093ec:	0800b638 	.word	0x0800b638
 80093f0:	0800b760 	.word	0x0800b760

080093f4 <fiprintf>:
 80093f4:	b40e      	push	{r1, r2, r3}
 80093f6:	b503      	push	{r0, r1, lr}
 80093f8:	4601      	mov	r1, r0
 80093fa:	ab03      	add	r3, sp, #12
 80093fc:	4805      	ldr	r0, [pc, #20]	; (8009414 <fiprintf+0x20>)
 80093fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009402:	6800      	ldr	r0, [r0, #0]
 8009404:	9301      	str	r3, [sp, #4]
 8009406:	f001 fad3 	bl	800a9b0 <_vfiprintf_r>
 800940a:	b002      	add	sp, #8
 800940c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009410:	b003      	add	sp, #12
 8009412:	4770      	bx	lr
 8009414:	20000010 	.word	0x20000010

08009418 <rshift>:
 8009418:	6903      	ldr	r3, [r0, #16]
 800941a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800941e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009422:	f100 0414 	add.w	r4, r0, #20
 8009426:	ea4f 1261 	mov.w	r2, r1, asr #5
 800942a:	dd46      	ble.n	80094ba <rshift+0xa2>
 800942c:	f011 011f 	ands.w	r1, r1, #31
 8009430:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009434:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009438:	d10c      	bne.n	8009454 <rshift+0x3c>
 800943a:	4629      	mov	r1, r5
 800943c:	f100 0710 	add.w	r7, r0, #16
 8009440:	42b1      	cmp	r1, r6
 8009442:	d335      	bcc.n	80094b0 <rshift+0x98>
 8009444:	1a9b      	subs	r3, r3, r2
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	1eea      	subs	r2, r5, #3
 800944a:	4296      	cmp	r6, r2
 800944c:	bf38      	it	cc
 800944e:	2300      	movcc	r3, #0
 8009450:	4423      	add	r3, r4
 8009452:	e015      	b.n	8009480 <rshift+0x68>
 8009454:	46a1      	mov	r9, r4
 8009456:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800945a:	f1c1 0820 	rsb	r8, r1, #32
 800945e:	40cf      	lsrs	r7, r1
 8009460:	f105 0e04 	add.w	lr, r5, #4
 8009464:	4576      	cmp	r6, lr
 8009466:	46f4      	mov	ip, lr
 8009468:	d816      	bhi.n	8009498 <rshift+0x80>
 800946a:	1a9a      	subs	r2, r3, r2
 800946c:	0092      	lsls	r2, r2, #2
 800946e:	3a04      	subs	r2, #4
 8009470:	3501      	adds	r5, #1
 8009472:	42ae      	cmp	r6, r5
 8009474:	bf38      	it	cc
 8009476:	2200      	movcc	r2, #0
 8009478:	18a3      	adds	r3, r4, r2
 800947a:	50a7      	str	r7, [r4, r2]
 800947c:	b107      	cbz	r7, 8009480 <rshift+0x68>
 800947e:	3304      	adds	r3, #4
 8009480:	42a3      	cmp	r3, r4
 8009482:	eba3 0204 	sub.w	r2, r3, r4
 8009486:	bf08      	it	eq
 8009488:	2300      	moveq	r3, #0
 800948a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800948e:	6102      	str	r2, [r0, #16]
 8009490:	bf08      	it	eq
 8009492:	6143      	streq	r3, [r0, #20]
 8009494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009498:	f8dc c000 	ldr.w	ip, [ip]
 800949c:	fa0c fc08 	lsl.w	ip, ip, r8
 80094a0:	ea4c 0707 	orr.w	r7, ip, r7
 80094a4:	f849 7b04 	str.w	r7, [r9], #4
 80094a8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80094ac:	40cf      	lsrs	r7, r1
 80094ae:	e7d9      	b.n	8009464 <rshift+0x4c>
 80094b0:	f851 cb04 	ldr.w	ip, [r1], #4
 80094b4:	f847 cf04 	str.w	ip, [r7, #4]!
 80094b8:	e7c2      	b.n	8009440 <rshift+0x28>
 80094ba:	4623      	mov	r3, r4
 80094bc:	e7e0      	b.n	8009480 <rshift+0x68>

080094be <__hexdig_fun>:
 80094be:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80094c2:	2b09      	cmp	r3, #9
 80094c4:	d802      	bhi.n	80094cc <__hexdig_fun+0xe>
 80094c6:	3820      	subs	r0, #32
 80094c8:	b2c0      	uxtb	r0, r0
 80094ca:	4770      	bx	lr
 80094cc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80094d0:	2b05      	cmp	r3, #5
 80094d2:	d801      	bhi.n	80094d8 <__hexdig_fun+0x1a>
 80094d4:	3847      	subs	r0, #71	; 0x47
 80094d6:	e7f7      	b.n	80094c8 <__hexdig_fun+0xa>
 80094d8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80094dc:	2b05      	cmp	r3, #5
 80094de:	d801      	bhi.n	80094e4 <__hexdig_fun+0x26>
 80094e0:	3827      	subs	r0, #39	; 0x27
 80094e2:	e7f1      	b.n	80094c8 <__hexdig_fun+0xa>
 80094e4:	2000      	movs	r0, #0
 80094e6:	4770      	bx	lr

080094e8 <__gethex>:
 80094e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ec:	b08b      	sub	sp, #44	; 0x2c
 80094ee:	9305      	str	r3, [sp, #20]
 80094f0:	4bb2      	ldr	r3, [pc, #712]	; (80097bc <__gethex+0x2d4>)
 80094f2:	9002      	str	r0, [sp, #8]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	468b      	mov	fp, r1
 80094f8:	4618      	mov	r0, r3
 80094fa:	4690      	mov	r8, r2
 80094fc:	9303      	str	r3, [sp, #12]
 80094fe:	f7f6 fe31 	bl	8000164 <strlen>
 8009502:	4682      	mov	sl, r0
 8009504:	9b03      	ldr	r3, [sp, #12]
 8009506:	f8db 2000 	ldr.w	r2, [fp]
 800950a:	4403      	add	r3, r0
 800950c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009510:	9306      	str	r3, [sp, #24]
 8009512:	1c93      	adds	r3, r2, #2
 8009514:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009518:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800951c:	32fe      	adds	r2, #254	; 0xfe
 800951e:	18d1      	adds	r1, r2, r3
 8009520:	461f      	mov	r7, r3
 8009522:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009526:	9101      	str	r1, [sp, #4]
 8009528:	2830      	cmp	r0, #48	; 0x30
 800952a:	d0f8      	beq.n	800951e <__gethex+0x36>
 800952c:	f7ff ffc7 	bl	80094be <__hexdig_fun>
 8009530:	4604      	mov	r4, r0
 8009532:	2800      	cmp	r0, #0
 8009534:	d13a      	bne.n	80095ac <__gethex+0xc4>
 8009536:	4652      	mov	r2, sl
 8009538:	4638      	mov	r0, r7
 800953a:	9903      	ldr	r1, [sp, #12]
 800953c:	f001 fb7e 	bl	800ac3c <strncmp>
 8009540:	4605      	mov	r5, r0
 8009542:	2800      	cmp	r0, #0
 8009544:	d166      	bne.n	8009614 <__gethex+0x12c>
 8009546:	f817 000a 	ldrb.w	r0, [r7, sl]
 800954a:	eb07 060a 	add.w	r6, r7, sl
 800954e:	f7ff ffb6 	bl	80094be <__hexdig_fun>
 8009552:	2800      	cmp	r0, #0
 8009554:	d060      	beq.n	8009618 <__gethex+0x130>
 8009556:	4633      	mov	r3, r6
 8009558:	7818      	ldrb	r0, [r3, #0]
 800955a:	461f      	mov	r7, r3
 800955c:	2830      	cmp	r0, #48	; 0x30
 800955e:	f103 0301 	add.w	r3, r3, #1
 8009562:	d0f9      	beq.n	8009558 <__gethex+0x70>
 8009564:	f7ff ffab 	bl	80094be <__hexdig_fun>
 8009568:	2301      	movs	r3, #1
 800956a:	fab0 f480 	clz	r4, r0
 800956e:	4635      	mov	r5, r6
 8009570:	0964      	lsrs	r4, r4, #5
 8009572:	9301      	str	r3, [sp, #4]
 8009574:	463a      	mov	r2, r7
 8009576:	4616      	mov	r6, r2
 8009578:	7830      	ldrb	r0, [r6, #0]
 800957a:	3201      	adds	r2, #1
 800957c:	f7ff ff9f 	bl	80094be <__hexdig_fun>
 8009580:	2800      	cmp	r0, #0
 8009582:	d1f8      	bne.n	8009576 <__gethex+0x8e>
 8009584:	4652      	mov	r2, sl
 8009586:	4630      	mov	r0, r6
 8009588:	9903      	ldr	r1, [sp, #12]
 800958a:	f001 fb57 	bl	800ac3c <strncmp>
 800958e:	b980      	cbnz	r0, 80095b2 <__gethex+0xca>
 8009590:	b94d      	cbnz	r5, 80095a6 <__gethex+0xbe>
 8009592:	eb06 050a 	add.w	r5, r6, sl
 8009596:	462a      	mov	r2, r5
 8009598:	4616      	mov	r6, r2
 800959a:	7830      	ldrb	r0, [r6, #0]
 800959c:	3201      	adds	r2, #1
 800959e:	f7ff ff8e 	bl	80094be <__hexdig_fun>
 80095a2:	2800      	cmp	r0, #0
 80095a4:	d1f8      	bne.n	8009598 <__gethex+0xb0>
 80095a6:	1bad      	subs	r5, r5, r6
 80095a8:	00ad      	lsls	r5, r5, #2
 80095aa:	e004      	b.n	80095b6 <__gethex+0xce>
 80095ac:	2400      	movs	r4, #0
 80095ae:	4625      	mov	r5, r4
 80095b0:	e7e0      	b.n	8009574 <__gethex+0x8c>
 80095b2:	2d00      	cmp	r5, #0
 80095b4:	d1f7      	bne.n	80095a6 <__gethex+0xbe>
 80095b6:	7833      	ldrb	r3, [r6, #0]
 80095b8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80095bc:	2b50      	cmp	r3, #80	; 0x50
 80095be:	d139      	bne.n	8009634 <__gethex+0x14c>
 80095c0:	7873      	ldrb	r3, [r6, #1]
 80095c2:	2b2b      	cmp	r3, #43	; 0x2b
 80095c4:	d02a      	beq.n	800961c <__gethex+0x134>
 80095c6:	2b2d      	cmp	r3, #45	; 0x2d
 80095c8:	d02c      	beq.n	8009624 <__gethex+0x13c>
 80095ca:	f04f 0900 	mov.w	r9, #0
 80095ce:	1c71      	adds	r1, r6, #1
 80095d0:	7808      	ldrb	r0, [r1, #0]
 80095d2:	f7ff ff74 	bl	80094be <__hexdig_fun>
 80095d6:	1e43      	subs	r3, r0, #1
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	2b18      	cmp	r3, #24
 80095dc:	d82a      	bhi.n	8009634 <__gethex+0x14c>
 80095de:	f1a0 0210 	sub.w	r2, r0, #16
 80095e2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80095e6:	f7ff ff6a 	bl	80094be <__hexdig_fun>
 80095ea:	1e43      	subs	r3, r0, #1
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	2b18      	cmp	r3, #24
 80095f0:	d91b      	bls.n	800962a <__gethex+0x142>
 80095f2:	f1b9 0f00 	cmp.w	r9, #0
 80095f6:	d000      	beq.n	80095fa <__gethex+0x112>
 80095f8:	4252      	negs	r2, r2
 80095fa:	4415      	add	r5, r2
 80095fc:	f8cb 1000 	str.w	r1, [fp]
 8009600:	b1d4      	cbz	r4, 8009638 <__gethex+0x150>
 8009602:	9b01      	ldr	r3, [sp, #4]
 8009604:	2b00      	cmp	r3, #0
 8009606:	bf14      	ite	ne
 8009608:	2700      	movne	r7, #0
 800960a:	2706      	moveq	r7, #6
 800960c:	4638      	mov	r0, r7
 800960e:	b00b      	add	sp, #44	; 0x2c
 8009610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009614:	463e      	mov	r6, r7
 8009616:	4625      	mov	r5, r4
 8009618:	2401      	movs	r4, #1
 800961a:	e7cc      	b.n	80095b6 <__gethex+0xce>
 800961c:	f04f 0900 	mov.w	r9, #0
 8009620:	1cb1      	adds	r1, r6, #2
 8009622:	e7d5      	b.n	80095d0 <__gethex+0xe8>
 8009624:	f04f 0901 	mov.w	r9, #1
 8009628:	e7fa      	b.n	8009620 <__gethex+0x138>
 800962a:	230a      	movs	r3, #10
 800962c:	fb03 0202 	mla	r2, r3, r2, r0
 8009630:	3a10      	subs	r2, #16
 8009632:	e7d6      	b.n	80095e2 <__gethex+0xfa>
 8009634:	4631      	mov	r1, r6
 8009636:	e7e1      	b.n	80095fc <__gethex+0x114>
 8009638:	4621      	mov	r1, r4
 800963a:	1bf3      	subs	r3, r6, r7
 800963c:	3b01      	subs	r3, #1
 800963e:	2b07      	cmp	r3, #7
 8009640:	dc0a      	bgt.n	8009658 <__gethex+0x170>
 8009642:	9802      	ldr	r0, [sp, #8]
 8009644:	f000 fa88 	bl	8009b58 <_Balloc>
 8009648:	4604      	mov	r4, r0
 800964a:	b940      	cbnz	r0, 800965e <__gethex+0x176>
 800964c:	4602      	mov	r2, r0
 800964e:	21de      	movs	r1, #222	; 0xde
 8009650:	4b5b      	ldr	r3, [pc, #364]	; (80097c0 <__gethex+0x2d8>)
 8009652:	485c      	ldr	r0, [pc, #368]	; (80097c4 <__gethex+0x2dc>)
 8009654:	f7ff f834 	bl	80086c0 <__assert_func>
 8009658:	3101      	adds	r1, #1
 800965a:	105b      	asrs	r3, r3, #1
 800965c:	e7ef      	b.n	800963e <__gethex+0x156>
 800965e:	f04f 0b00 	mov.w	fp, #0
 8009662:	f100 0914 	add.w	r9, r0, #20
 8009666:	f1ca 0301 	rsb	r3, sl, #1
 800966a:	f8cd 9010 	str.w	r9, [sp, #16]
 800966e:	f8cd b004 	str.w	fp, [sp, #4]
 8009672:	9308      	str	r3, [sp, #32]
 8009674:	42b7      	cmp	r7, r6
 8009676:	d33f      	bcc.n	80096f8 <__gethex+0x210>
 8009678:	9f04      	ldr	r7, [sp, #16]
 800967a:	9b01      	ldr	r3, [sp, #4]
 800967c:	f847 3b04 	str.w	r3, [r7], #4
 8009680:	eba7 0709 	sub.w	r7, r7, r9
 8009684:	10bf      	asrs	r7, r7, #2
 8009686:	6127      	str	r7, [r4, #16]
 8009688:	4618      	mov	r0, r3
 800968a:	f000 fb57 	bl	8009d3c <__hi0bits>
 800968e:	017f      	lsls	r7, r7, #5
 8009690:	f8d8 6000 	ldr.w	r6, [r8]
 8009694:	1a3f      	subs	r7, r7, r0
 8009696:	42b7      	cmp	r7, r6
 8009698:	dd62      	ble.n	8009760 <__gethex+0x278>
 800969a:	1bbf      	subs	r7, r7, r6
 800969c:	4639      	mov	r1, r7
 800969e:	4620      	mov	r0, r4
 80096a0:	f000 fef1 	bl	800a486 <__any_on>
 80096a4:	4682      	mov	sl, r0
 80096a6:	b1a8      	cbz	r0, 80096d4 <__gethex+0x1ec>
 80096a8:	f04f 0a01 	mov.w	sl, #1
 80096ac:	1e7b      	subs	r3, r7, #1
 80096ae:	1159      	asrs	r1, r3, #5
 80096b0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80096b4:	f003 021f 	and.w	r2, r3, #31
 80096b8:	fa0a f202 	lsl.w	r2, sl, r2
 80096bc:	420a      	tst	r2, r1
 80096be:	d009      	beq.n	80096d4 <__gethex+0x1ec>
 80096c0:	4553      	cmp	r3, sl
 80096c2:	dd05      	ble.n	80096d0 <__gethex+0x1e8>
 80096c4:	4620      	mov	r0, r4
 80096c6:	1eb9      	subs	r1, r7, #2
 80096c8:	f000 fedd 	bl	800a486 <__any_on>
 80096cc:	2800      	cmp	r0, #0
 80096ce:	d144      	bne.n	800975a <__gethex+0x272>
 80096d0:	f04f 0a02 	mov.w	sl, #2
 80096d4:	4639      	mov	r1, r7
 80096d6:	4620      	mov	r0, r4
 80096d8:	f7ff fe9e 	bl	8009418 <rshift>
 80096dc:	443d      	add	r5, r7
 80096de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80096e2:	42ab      	cmp	r3, r5
 80096e4:	da4a      	bge.n	800977c <__gethex+0x294>
 80096e6:	4621      	mov	r1, r4
 80096e8:	9802      	ldr	r0, [sp, #8]
 80096ea:	f000 fa75 	bl	8009bd8 <_Bfree>
 80096ee:	2300      	movs	r3, #0
 80096f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80096f2:	27a3      	movs	r7, #163	; 0xa3
 80096f4:	6013      	str	r3, [r2, #0]
 80096f6:	e789      	b.n	800960c <__gethex+0x124>
 80096f8:	1e73      	subs	r3, r6, #1
 80096fa:	9a06      	ldr	r2, [sp, #24]
 80096fc:	9307      	str	r3, [sp, #28]
 80096fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009702:	4293      	cmp	r3, r2
 8009704:	d019      	beq.n	800973a <__gethex+0x252>
 8009706:	f1bb 0f20 	cmp.w	fp, #32
 800970a:	d107      	bne.n	800971c <__gethex+0x234>
 800970c:	9b04      	ldr	r3, [sp, #16]
 800970e:	9a01      	ldr	r2, [sp, #4]
 8009710:	f843 2b04 	str.w	r2, [r3], #4
 8009714:	9304      	str	r3, [sp, #16]
 8009716:	2300      	movs	r3, #0
 8009718:	469b      	mov	fp, r3
 800971a:	9301      	str	r3, [sp, #4]
 800971c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009720:	f7ff fecd 	bl	80094be <__hexdig_fun>
 8009724:	9b01      	ldr	r3, [sp, #4]
 8009726:	f000 000f 	and.w	r0, r0, #15
 800972a:	fa00 f00b 	lsl.w	r0, r0, fp
 800972e:	4303      	orrs	r3, r0
 8009730:	9301      	str	r3, [sp, #4]
 8009732:	f10b 0b04 	add.w	fp, fp, #4
 8009736:	9b07      	ldr	r3, [sp, #28]
 8009738:	e00d      	b.n	8009756 <__gethex+0x26e>
 800973a:	9a08      	ldr	r2, [sp, #32]
 800973c:	1e73      	subs	r3, r6, #1
 800973e:	4413      	add	r3, r2
 8009740:	42bb      	cmp	r3, r7
 8009742:	d3e0      	bcc.n	8009706 <__gethex+0x21e>
 8009744:	4618      	mov	r0, r3
 8009746:	4652      	mov	r2, sl
 8009748:	9903      	ldr	r1, [sp, #12]
 800974a:	9309      	str	r3, [sp, #36]	; 0x24
 800974c:	f001 fa76 	bl	800ac3c <strncmp>
 8009750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009752:	2800      	cmp	r0, #0
 8009754:	d1d7      	bne.n	8009706 <__gethex+0x21e>
 8009756:	461e      	mov	r6, r3
 8009758:	e78c      	b.n	8009674 <__gethex+0x18c>
 800975a:	f04f 0a03 	mov.w	sl, #3
 800975e:	e7b9      	b.n	80096d4 <__gethex+0x1ec>
 8009760:	da09      	bge.n	8009776 <__gethex+0x28e>
 8009762:	1bf7      	subs	r7, r6, r7
 8009764:	4621      	mov	r1, r4
 8009766:	463a      	mov	r2, r7
 8009768:	9802      	ldr	r0, [sp, #8]
 800976a:	f000 fc4d 	bl	800a008 <__lshift>
 800976e:	4604      	mov	r4, r0
 8009770:	1bed      	subs	r5, r5, r7
 8009772:	f100 0914 	add.w	r9, r0, #20
 8009776:	f04f 0a00 	mov.w	sl, #0
 800977a:	e7b0      	b.n	80096de <__gethex+0x1f6>
 800977c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009780:	42a8      	cmp	r0, r5
 8009782:	dd72      	ble.n	800986a <__gethex+0x382>
 8009784:	1b45      	subs	r5, r0, r5
 8009786:	42ae      	cmp	r6, r5
 8009788:	dc35      	bgt.n	80097f6 <__gethex+0x30e>
 800978a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800978e:	2b02      	cmp	r3, #2
 8009790:	d029      	beq.n	80097e6 <__gethex+0x2fe>
 8009792:	2b03      	cmp	r3, #3
 8009794:	d02b      	beq.n	80097ee <__gethex+0x306>
 8009796:	2b01      	cmp	r3, #1
 8009798:	d11c      	bne.n	80097d4 <__gethex+0x2ec>
 800979a:	42ae      	cmp	r6, r5
 800979c:	d11a      	bne.n	80097d4 <__gethex+0x2ec>
 800979e:	2e01      	cmp	r6, #1
 80097a0:	d112      	bne.n	80097c8 <__gethex+0x2e0>
 80097a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80097a6:	9a05      	ldr	r2, [sp, #20]
 80097a8:	2762      	movs	r7, #98	; 0x62
 80097aa:	6013      	str	r3, [r2, #0]
 80097ac:	2301      	movs	r3, #1
 80097ae:	6123      	str	r3, [r4, #16]
 80097b0:	f8c9 3000 	str.w	r3, [r9]
 80097b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80097b6:	601c      	str	r4, [r3, #0]
 80097b8:	e728      	b.n	800960c <__gethex+0x124>
 80097ba:	bf00      	nop
 80097bc:	0800b840 	.word	0x0800b840
 80097c0:	0800b7c8 	.word	0x0800b7c8
 80097c4:	0800b7d9 	.word	0x0800b7d9
 80097c8:	4620      	mov	r0, r4
 80097ca:	1e71      	subs	r1, r6, #1
 80097cc:	f000 fe5b 	bl	800a486 <__any_on>
 80097d0:	2800      	cmp	r0, #0
 80097d2:	d1e6      	bne.n	80097a2 <__gethex+0x2ba>
 80097d4:	4621      	mov	r1, r4
 80097d6:	9802      	ldr	r0, [sp, #8]
 80097d8:	f000 f9fe 	bl	8009bd8 <_Bfree>
 80097dc:	2300      	movs	r3, #0
 80097de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80097e0:	2750      	movs	r7, #80	; 0x50
 80097e2:	6013      	str	r3, [r2, #0]
 80097e4:	e712      	b.n	800960c <__gethex+0x124>
 80097e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1f3      	bne.n	80097d4 <__gethex+0x2ec>
 80097ec:	e7d9      	b.n	80097a2 <__gethex+0x2ba>
 80097ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1d6      	bne.n	80097a2 <__gethex+0x2ba>
 80097f4:	e7ee      	b.n	80097d4 <__gethex+0x2ec>
 80097f6:	1e6f      	subs	r7, r5, #1
 80097f8:	f1ba 0f00 	cmp.w	sl, #0
 80097fc:	d132      	bne.n	8009864 <__gethex+0x37c>
 80097fe:	b127      	cbz	r7, 800980a <__gethex+0x322>
 8009800:	4639      	mov	r1, r7
 8009802:	4620      	mov	r0, r4
 8009804:	f000 fe3f 	bl	800a486 <__any_on>
 8009808:	4682      	mov	sl, r0
 800980a:	2101      	movs	r1, #1
 800980c:	117b      	asrs	r3, r7, #5
 800980e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009812:	f007 071f 	and.w	r7, r7, #31
 8009816:	fa01 f707 	lsl.w	r7, r1, r7
 800981a:	421f      	tst	r7, r3
 800981c:	f04f 0702 	mov.w	r7, #2
 8009820:	4629      	mov	r1, r5
 8009822:	4620      	mov	r0, r4
 8009824:	bf18      	it	ne
 8009826:	f04a 0a02 	orrne.w	sl, sl, #2
 800982a:	1b76      	subs	r6, r6, r5
 800982c:	f7ff fdf4 	bl	8009418 <rshift>
 8009830:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009834:	f1ba 0f00 	cmp.w	sl, #0
 8009838:	d048      	beq.n	80098cc <__gethex+0x3e4>
 800983a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800983e:	2b02      	cmp	r3, #2
 8009840:	d015      	beq.n	800986e <__gethex+0x386>
 8009842:	2b03      	cmp	r3, #3
 8009844:	d017      	beq.n	8009876 <__gethex+0x38e>
 8009846:	2b01      	cmp	r3, #1
 8009848:	d109      	bne.n	800985e <__gethex+0x376>
 800984a:	f01a 0f02 	tst.w	sl, #2
 800984e:	d006      	beq.n	800985e <__gethex+0x376>
 8009850:	f8d9 0000 	ldr.w	r0, [r9]
 8009854:	ea4a 0a00 	orr.w	sl, sl, r0
 8009858:	f01a 0f01 	tst.w	sl, #1
 800985c:	d10e      	bne.n	800987c <__gethex+0x394>
 800985e:	f047 0710 	orr.w	r7, r7, #16
 8009862:	e033      	b.n	80098cc <__gethex+0x3e4>
 8009864:	f04f 0a01 	mov.w	sl, #1
 8009868:	e7cf      	b.n	800980a <__gethex+0x322>
 800986a:	2701      	movs	r7, #1
 800986c:	e7e2      	b.n	8009834 <__gethex+0x34c>
 800986e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009870:	f1c3 0301 	rsb	r3, r3, #1
 8009874:	9315      	str	r3, [sp, #84]	; 0x54
 8009876:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009878:	2b00      	cmp	r3, #0
 800987a:	d0f0      	beq.n	800985e <__gethex+0x376>
 800987c:	f04f 0c00 	mov.w	ip, #0
 8009880:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009884:	f104 0314 	add.w	r3, r4, #20
 8009888:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800988c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009890:	4618      	mov	r0, r3
 8009892:	f853 2b04 	ldr.w	r2, [r3], #4
 8009896:	f1b2 3fff 	cmp.w	r2, #4294967295
 800989a:	d01c      	beq.n	80098d6 <__gethex+0x3ee>
 800989c:	3201      	adds	r2, #1
 800989e:	6002      	str	r2, [r0, #0]
 80098a0:	2f02      	cmp	r7, #2
 80098a2:	f104 0314 	add.w	r3, r4, #20
 80098a6:	d13d      	bne.n	8009924 <__gethex+0x43c>
 80098a8:	f8d8 2000 	ldr.w	r2, [r8]
 80098ac:	3a01      	subs	r2, #1
 80098ae:	42b2      	cmp	r2, r6
 80098b0:	d10a      	bne.n	80098c8 <__gethex+0x3e0>
 80098b2:	2201      	movs	r2, #1
 80098b4:	1171      	asrs	r1, r6, #5
 80098b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80098ba:	f006 061f 	and.w	r6, r6, #31
 80098be:	fa02 f606 	lsl.w	r6, r2, r6
 80098c2:	421e      	tst	r6, r3
 80098c4:	bf18      	it	ne
 80098c6:	4617      	movne	r7, r2
 80098c8:	f047 0720 	orr.w	r7, r7, #32
 80098cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80098ce:	601c      	str	r4, [r3, #0]
 80098d0:	9b05      	ldr	r3, [sp, #20]
 80098d2:	601d      	str	r5, [r3, #0]
 80098d4:	e69a      	b.n	800960c <__gethex+0x124>
 80098d6:	4299      	cmp	r1, r3
 80098d8:	f843 cc04 	str.w	ip, [r3, #-4]
 80098dc:	d8d8      	bhi.n	8009890 <__gethex+0x3a8>
 80098de:	68a3      	ldr	r3, [r4, #8]
 80098e0:	459b      	cmp	fp, r3
 80098e2:	db17      	blt.n	8009914 <__gethex+0x42c>
 80098e4:	6861      	ldr	r1, [r4, #4]
 80098e6:	9802      	ldr	r0, [sp, #8]
 80098e8:	3101      	adds	r1, #1
 80098ea:	f000 f935 	bl	8009b58 <_Balloc>
 80098ee:	4681      	mov	r9, r0
 80098f0:	b918      	cbnz	r0, 80098fa <__gethex+0x412>
 80098f2:	4602      	mov	r2, r0
 80098f4:	2184      	movs	r1, #132	; 0x84
 80098f6:	4b19      	ldr	r3, [pc, #100]	; (800995c <__gethex+0x474>)
 80098f8:	e6ab      	b.n	8009652 <__gethex+0x16a>
 80098fa:	6922      	ldr	r2, [r4, #16]
 80098fc:	f104 010c 	add.w	r1, r4, #12
 8009900:	3202      	adds	r2, #2
 8009902:	0092      	lsls	r2, r2, #2
 8009904:	300c      	adds	r0, #12
 8009906:	f000 f919 	bl	8009b3c <memcpy>
 800990a:	4621      	mov	r1, r4
 800990c:	9802      	ldr	r0, [sp, #8]
 800990e:	f000 f963 	bl	8009bd8 <_Bfree>
 8009912:	464c      	mov	r4, r9
 8009914:	6923      	ldr	r3, [r4, #16]
 8009916:	1c5a      	adds	r2, r3, #1
 8009918:	6122      	str	r2, [r4, #16]
 800991a:	2201      	movs	r2, #1
 800991c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009920:	615a      	str	r2, [r3, #20]
 8009922:	e7bd      	b.n	80098a0 <__gethex+0x3b8>
 8009924:	6922      	ldr	r2, [r4, #16]
 8009926:	455a      	cmp	r2, fp
 8009928:	dd0b      	ble.n	8009942 <__gethex+0x45a>
 800992a:	2101      	movs	r1, #1
 800992c:	4620      	mov	r0, r4
 800992e:	f7ff fd73 	bl	8009418 <rshift>
 8009932:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009936:	3501      	adds	r5, #1
 8009938:	42ab      	cmp	r3, r5
 800993a:	f6ff aed4 	blt.w	80096e6 <__gethex+0x1fe>
 800993e:	2701      	movs	r7, #1
 8009940:	e7c2      	b.n	80098c8 <__gethex+0x3e0>
 8009942:	f016 061f 	ands.w	r6, r6, #31
 8009946:	d0fa      	beq.n	800993e <__gethex+0x456>
 8009948:	4453      	add	r3, sl
 800994a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800994e:	f000 f9f5 	bl	8009d3c <__hi0bits>
 8009952:	f1c6 0620 	rsb	r6, r6, #32
 8009956:	42b0      	cmp	r0, r6
 8009958:	dbe7      	blt.n	800992a <__gethex+0x442>
 800995a:	e7f0      	b.n	800993e <__gethex+0x456>
 800995c:	0800b7c8 	.word	0x0800b7c8

08009960 <L_shift>:
 8009960:	f1c2 0208 	rsb	r2, r2, #8
 8009964:	0092      	lsls	r2, r2, #2
 8009966:	b570      	push	{r4, r5, r6, lr}
 8009968:	f1c2 0620 	rsb	r6, r2, #32
 800996c:	6843      	ldr	r3, [r0, #4]
 800996e:	6804      	ldr	r4, [r0, #0]
 8009970:	fa03 f506 	lsl.w	r5, r3, r6
 8009974:	432c      	orrs	r4, r5
 8009976:	40d3      	lsrs	r3, r2
 8009978:	6004      	str	r4, [r0, #0]
 800997a:	f840 3f04 	str.w	r3, [r0, #4]!
 800997e:	4288      	cmp	r0, r1
 8009980:	d3f4      	bcc.n	800996c <L_shift+0xc>
 8009982:	bd70      	pop	{r4, r5, r6, pc}

08009984 <__match>:
 8009984:	b530      	push	{r4, r5, lr}
 8009986:	6803      	ldr	r3, [r0, #0]
 8009988:	3301      	adds	r3, #1
 800998a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800998e:	b914      	cbnz	r4, 8009996 <__match+0x12>
 8009990:	6003      	str	r3, [r0, #0]
 8009992:	2001      	movs	r0, #1
 8009994:	bd30      	pop	{r4, r5, pc}
 8009996:	f813 2b01 	ldrb.w	r2, [r3], #1
 800999a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800999e:	2d19      	cmp	r5, #25
 80099a0:	bf98      	it	ls
 80099a2:	3220      	addls	r2, #32
 80099a4:	42a2      	cmp	r2, r4
 80099a6:	d0f0      	beq.n	800998a <__match+0x6>
 80099a8:	2000      	movs	r0, #0
 80099aa:	e7f3      	b.n	8009994 <__match+0x10>

080099ac <__hexnan>:
 80099ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b0:	2500      	movs	r5, #0
 80099b2:	680b      	ldr	r3, [r1, #0]
 80099b4:	4682      	mov	sl, r0
 80099b6:	115e      	asrs	r6, r3, #5
 80099b8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80099bc:	f013 031f 	ands.w	r3, r3, #31
 80099c0:	bf18      	it	ne
 80099c2:	3604      	addne	r6, #4
 80099c4:	1f37      	subs	r7, r6, #4
 80099c6:	46b9      	mov	r9, r7
 80099c8:	463c      	mov	r4, r7
 80099ca:	46ab      	mov	fp, r5
 80099cc:	b087      	sub	sp, #28
 80099ce:	4690      	mov	r8, r2
 80099d0:	6802      	ldr	r2, [r0, #0]
 80099d2:	9301      	str	r3, [sp, #4]
 80099d4:	f846 5c04 	str.w	r5, [r6, #-4]
 80099d8:	9502      	str	r5, [sp, #8]
 80099da:	7851      	ldrb	r1, [r2, #1]
 80099dc:	1c53      	adds	r3, r2, #1
 80099de:	9303      	str	r3, [sp, #12]
 80099e0:	b341      	cbz	r1, 8009a34 <__hexnan+0x88>
 80099e2:	4608      	mov	r0, r1
 80099e4:	9205      	str	r2, [sp, #20]
 80099e6:	9104      	str	r1, [sp, #16]
 80099e8:	f7ff fd69 	bl	80094be <__hexdig_fun>
 80099ec:	2800      	cmp	r0, #0
 80099ee:	d14f      	bne.n	8009a90 <__hexnan+0xe4>
 80099f0:	9904      	ldr	r1, [sp, #16]
 80099f2:	9a05      	ldr	r2, [sp, #20]
 80099f4:	2920      	cmp	r1, #32
 80099f6:	d818      	bhi.n	8009a2a <__hexnan+0x7e>
 80099f8:	9b02      	ldr	r3, [sp, #8]
 80099fa:	459b      	cmp	fp, r3
 80099fc:	dd13      	ble.n	8009a26 <__hexnan+0x7a>
 80099fe:	454c      	cmp	r4, r9
 8009a00:	d206      	bcs.n	8009a10 <__hexnan+0x64>
 8009a02:	2d07      	cmp	r5, #7
 8009a04:	dc04      	bgt.n	8009a10 <__hexnan+0x64>
 8009a06:	462a      	mov	r2, r5
 8009a08:	4649      	mov	r1, r9
 8009a0a:	4620      	mov	r0, r4
 8009a0c:	f7ff ffa8 	bl	8009960 <L_shift>
 8009a10:	4544      	cmp	r4, r8
 8009a12:	d950      	bls.n	8009ab6 <__hexnan+0x10a>
 8009a14:	2300      	movs	r3, #0
 8009a16:	f1a4 0904 	sub.w	r9, r4, #4
 8009a1a:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a1e:	461d      	mov	r5, r3
 8009a20:	464c      	mov	r4, r9
 8009a22:	f8cd b008 	str.w	fp, [sp, #8]
 8009a26:	9a03      	ldr	r2, [sp, #12]
 8009a28:	e7d7      	b.n	80099da <__hexnan+0x2e>
 8009a2a:	2929      	cmp	r1, #41	; 0x29
 8009a2c:	d156      	bne.n	8009adc <__hexnan+0x130>
 8009a2e:	3202      	adds	r2, #2
 8009a30:	f8ca 2000 	str.w	r2, [sl]
 8009a34:	f1bb 0f00 	cmp.w	fp, #0
 8009a38:	d050      	beq.n	8009adc <__hexnan+0x130>
 8009a3a:	454c      	cmp	r4, r9
 8009a3c:	d206      	bcs.n	8009a4c <__hexnan+0xa0>
 8009a3e:	2d07      	cmp	r5, #7
 8009a40:	dc04      	bgt.n	8009a4c <__hexnan+0xa0>
 8009a42:	462a      	mov	r2, r5
 8009a44:	4649      	mov	r1, r9
 8009a46:	4620      	mov	r0, r4
 8009a48:	f7ff ff8a 	bl	8009960 <L_shift>
 8009a4c:	4544      	cmp	r4, r8
 8009a4e:	d934      	bls.n	8009aba <__hexnan+0x10e>
 8009a50:	4623      	mov	r3, r4
 8009a52:	f1a8 0204 	sub.w	r2, r8, #4
 8009a56:	f853 1b04 	ldr.w	r1, [r3], #4
 8009a5a:	429f      	cmp	r7, r3
 8009a5c:	f842 1f04 	str.w	r1, [r2, #4]!
 8009a60:	d2f9      	bcs.n	8009a56 <__hexnan+0xaa>
 8009a62:	1b3b      	subs	r3, r7, r4
 8009a64:	f023 0303 	bic.w	r3, r3, #3
 8009a68:	3304      	adds	r3, #4
 8009a6a:	3401      	adds	r4, #1
 8009a6c:	3e03      	subs	r6, #3
 8009a6e:	42b4      	cmp	r4, r6
 8009a70:	bf88      	it	hi
 8009a72:	2304      	movhi	r3, #4
 8009a74:	2200      	movs	r2, #0
 8009a76:	4443      	add	r3, r8
 8009a78:	f843 2b04 	str.w	r2, [r3], #4
 8009a7c:	429f      	cmp	r7, r3
 8009a7e:	d2fb      	bcs.n	8009a78 <__hexnan+0xcc>
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	b91b      	cbnz	r3, 8009a8c <__hexnan+0xe0>
 8009a84:	4547      	cmp	r7, r8
 8009a86:	d127      	bne.n	8009ad8 <__hexnan+0x12c>
 8009a88:	2301      	movs	r3, #1
 8009a8a:	603b      	str	r3, [r7, #0]
 8009a8c:	2005      	movs	r0, #5
 8009a8e:	e026      	b.n	8009ade <__hexnan+0x132>
 8009a90:	3501      	adds	r5, #1
 8009a92:	2d08      	cmp	r5, #8
 8009a94:	f10b 0b01 	add.w	fp, fp, #1
 8009a98:	dd06      	ble.n	8009aa8 <__hexnan+0xfc>
 8009a9a:	4544      	cmp	r4, r8
 8009a9c:	d9c3      	bls.n	8009a26 <__hexnan+0x7a>
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	2501      	movs	r5, #1
 8009aa2:	f844 3c04 	str.w	r3, [r4, #-4]
 8009aa6:	3c04      	subs	r4, #4
 8009aa8:	6822      	ldr	r2, [r4, #0]
 8009aaa:	f000 000f 	and.w	r0, r0, #15
 8009aae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009ab2:	6022      	str	r2, [r4, #0]
 8009ab4:	e7b7      	b.n	8009a26 <__hexnan+0x7a>
 8009ab6:	2508      	movs	r5, #8
 8009ab8:	e7b5      	b.n	8009a26 <__hexnan+0x7a>
 8009aba:	9b01      	ldr	r3, [sp, #4]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d0df      	beq.n	8009a80 <__hexnan+0xd4>
 8009ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac4:	f1c3 0320 	rsb	r3, r3, #32
 8009ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8009acc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009ad0:	401a      	ands	r2, r3
 8009ad2:	f846 2c04 	str.w	r2, [r6, #-4]
 8009ad6:	e7d3      	b.n	8009a80 <__hexnan+0xd4>
 8009ad8:	3f04      	subs	r7, #4
 8009ada:	e7d1      	b.n	8009a80 <__hexnan+0xd4>
 8009adc:	2004      	movs	r0, #4
 8009ade:	b007      	add	sp, #28
 8009ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ae4 <_localeconv_r>:
 8009ae4:	4800      	ldr	r0, [pc, #0]	; (8009ae8 <_localeconv_r+0x4>)
 8009ae6:	4770      	bx	lr
 8009ae8:	20000168 	.word	0x20000168

08009aec <malloc>:
 8009aec:	4b02      	ldr	r3, [pc, #8]	; (8009af8 <malloc+0xc>)
 8009aee:	4601      	mov	r1, r0
 8009af0:	6818      	ldr	r0, [r3, #0]
 8009af2:	f000 bd65 	b.w	800a5c0 <_malloc_r>
 8009af6:	bf00      	nop
 8009af8:	20000010 	.word	0x20000010

08009afc <__ascii_mbtowc>:
 8009afc:	b082      	sub	sp, #8
 8009afe:	b901      	cbnz	r1, 8009b02 <__ascii_mbtowc+0x6>
 8009b00:	a901      	add	r1, sp, #4
 8009b02:	b142      	cbz	r2, 8009b16 <__ascii_mbtowc+0x1a>
 8009b04:	b14b      	cbz	r3, 8009b1a <__ascii_mbtowc+0x1e>
 8009b06:	7813      	ldrb	r3, [r2, #0]
 8009b08:	600b      	str	r3, [r1, #0]
 8009b0a:	7812      	ldrb	r2, [r2, #0]
 8009b0c:	1e10      	subs	r0, r2, #0
 8009b0e:	bf18      	it	ne
 8009b10:	2001      	movne	r0, #1
 8009b12:	b002      	add	sp, #8
 8009b14:	4770      	bx	lr
 8009b16:	4610      	mov	r0, r2
 8009b18:	e7fb      	b.n	8009b12 <__ascii_mbtowc+0x16>
 8009b1a:	f06f 0001 	mvn.w	r0, #1
 8009b1e:	e7f8      	b.n	8009b12 <__ascii_mbtowc+0x16>

08009b20 <memchr>:
 8009b20:	4603      	mov	r3, r0
 8009b22:	b510      	push	{r4, lr}
 8009b24:	b2c9      	uxtb	r1, r1
 8009b26:	4402      	add	r2, r0
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	d101      	bne.n	8009b32 <memchr+0x12>
 8009b2e:	2000      	movs	r0, #0
 8009b30:	e003      	b.n	8009b3a <memchr+0x1a>
 8009b32:	7804      	ldrb	r4, [r0, #0]
 8009b34:	3301      	adds	r3, #1
 8009b36:	428c      	cmp	r4, r1
 8009b38:	d1f6      	bne.n	8009b28 <memchr+0x8>
 8009b3a:	bd10      	pop	{r4, pc}

08009b3c <memcpy>:
 8009b3c:	440a      	add	r2, r1
 8009b3e:	4291      	cmp	r1, r2
 8009b40:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b44:	d100      	bne.n	8009b48 <memcpy+0xc>
 8009b46:	4770      	bx	lr
 8009b48:	b510      	push	{r4, lr}
 8009b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b4e:	4291      	cmp	r1, r2
 8009b50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b54:	d1f9      	bne.n	8009b4a <memcpy+0xe>
 8009b56:	bd10      	pop	{r4, pc}

08009b58 <_Balloc>:
 8009b58:	b570      	push	{r4, r5, r6, lr}
 8009b5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b5c:	4604      	mov	r4, r0
 8009b5e:	460d      	mov	r5, r1
 8009b60:	b976      	cbnz	r6, 8009b80 <_Balloc+0x28>
 8009b62:	2010      	movs	r0, #16
 8009b64:	f7ff ffc2 	bl	8009aec <malloc>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	6260      	str	r0, [r4, #36]	; 0x24
 8009b6c:	b920      	cbnz	r0, 8009b78 <_Balloc+0x20>
 8009b6e:	2166      	movs	r1, #102	; 0x66
 8009b70:	4b17      	ldr	r3, [pc, #92]	; (8009bd0 <_Balloc+0x78>)
 8009b72:	4818      	ldr	r0, [pc, #96]	; (8009bd4 <_Balloc+0x7c>)
 8009b74:	f7fe fda4 	bl	80086c0 <__assert_func>
 8009b78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b7c:	6006      	str	r6, [r0, #0]
 8009b7e:	60c6      	str	r6, [r0, #12]
 8009b80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009b82:	68f3      	ldr	r3, [r6, #12]
 8009b84:	b183      	cbz	r3, 8009ba8 <_Balloc+0x50>
 8009b86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b8e:	b9b8      	cbnz	r0, 8009bc0 <_Balloc+0x68>
 8009b90:	2101      	movs	r1, #1
 8009b92:	fa01 f605 	lsl.w	r6, r1, r5
 8009b96:	1d72      	adds	r2, r6, #5
 8009b98:	4620      	mov	r0, r4
 8009b9a:	0092      	lsls	r2, r2, #2
 8009b9c:	f000 fc94 	bl	800a4c8 <_calloc_r>
 8009ba0:	b160      	cbz	r0, 8009bbc <_Balloc+0x64>
 8009ba2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ba6:	e00e      	b.n	8009bc6 <_Balloc+0x6e>
 8009ba8:	2221      	movs	r2, #33	; 0x21
 8009baa:	2104      	movs	r1, #4
 8009bac:	4620      	mov	r0, r4
 8009bae:	f000 fc8b 	bl	800a4c8 <_calloc_r>
 8009bb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bb4:	60f0      	str	r0, [r6, #12]
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d1e4      	bne.n	8009b86 <_Balloc+0x2e>
 8009bbc:	2000      	movs	r0, #0
 8009bbe:	bd70      	pop	{r4, r5, r6, pc}
 8009bc0:	6802      	ldr	r2, [r0, #0]
 8009bc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009bcc:	e7f7      	b.n	8009bbe <_Balloc+0x66>
 8009bce:	bf00      	nop
 8009bd0:	0800b6b0 	.word	0x0800b6b0
 8009bd4:	0800b854 	.word	0x0800b854

08009bd8 <_Bfree>:
 8009bd8:	b570      	push	{r4, r5, r6, lr}
 8009bda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009bdc:	4605      	mov	r5, r0
 8009bde:	460c      	mov	r4, r1
 8009be0:	b976      	cbnz	r6, 8009c00 <_Bfree+0x28>
 8009be2:	2010      	movs	r0, #16
 8009be4:	f7ff ff82 	bl	8009aec <malloc>
 8009be8:	4602      	mov	r2, r0
 8009bea:	6268      	str	r0, [r5, #36]	; 0x24
 8009bec:	b920      	cbnz	r0, 8009bf8 <_Bfree+0x20>
 8009bee:	218a      	movs	r1, #138	; 0x8a
 8009bf0:	4b08      	ldr	r3, [pc, #32]	; (8009c14 <_Bfree+0x3c>)
 8009bf2:	4809      	ldr	r0, [pc, #36]	; (8009c18 <_Bfree+0x40>)
 8009bf4:	f7fe fd64 	bl	80086c0 <__assert_func>
 8009bf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bfc:	6006      	str	r6, [r0, #0]
 8009bfe:	60c6      	str	r6, [r0, #12]
 8009c00:	b13c      	cbz	r4, 8009c12 <_Bfree+0x3a>
 8009c02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c04:	6862      	ldr	r2, [r4, #4]
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c0c:	6021      	str	r1, [r4, #0]
 8009c0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c12:	bd70      	pop	{r4, r5, r6, pc}
 8009c14:	0800b6b0 	.word	0x0800b6b0
 8009c18:	0800b854 	.word	0x0800b854

08009c1c <__multadd>:
 8009c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c20:	4607      	mov	r7, r0
 8009c22:	460c      	mov	r4, r1
 8009c24:	461e      	mov	r6, r3
 8009c26:	2000      	movs	r0, #0
 8009c28:	690d      	ldr	r5, [r1, #16]
 8009c2a:	f101 0c14 	add.w	ip, r1, #20
 8009c2e:	f8dc 3000 	ldr.w	r3, [ip]
 8009c32:	3001      	adds	r0, #1
 8009c34:	b299      	uxth	r1, r3
 8009c36:	fb02 6101 	mla	r1, r2, r1, r6
 8009c3a:	0c1e      	lsrs	r6, r3, #16
 8009c3c:	0c0b      	lsrs	r3, r1, #16
 8009c3e:	fb02 3306 	mla	r3, r2, r6, r3
 8009c42:	b289      	uxth	r1, r1
 8009c44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009c48:	4285      	cmp	r5, r0
 8009c4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009c4e:	f84c 1b04 	str.w	r1, [ip], #4
 8009c52:	dcec      	bgt.n	8009c2e <__multadd+0x12>
 8009c54:	b30e      	cbz	r6, 8009c9a <__multadd+0x7e>
 8009c56:	68a3      	ldr	r3, [r4, #8]
 8009c58:	42ab      	cmp	r3, r5
 8009c5a:	dc19      	bgt.n	8009c90 <__multadd+0x74>
 8009c5c:	6861      	ldr	r1, [r4, #4]
 8009c5e:	4638      	mov	r0, r7
 8009c60:	3101      	adds	r1, #1
 8009c62:	f7ff ff79 	bl	8009b58 <_Balloc>
 8009c66:	4680      	mov	r8, r0
 8009c68:	b928      	cbnz	r0, 8009c76 <__multadd+0x5a>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	21b5      	movs	r1, #181	; 0xb5
 8009c6e:	4b0c      	ldr	r3, [pc, #48]	; (8009ca0 <__multadd+0x84>)
 8009c70:	480c      	ldr	r0, [pc, #48]	; (8009ca4 <__multadd+0x88>)
 8009c72:	f7fe fd25 	bl	80086c0 <__assert_func>
 8009c76:	6922      	ldr	r2, [r4, #16]
 8009c78:	f104 010c 	add.w	r1, r4, #12
 8009c7c:	3202      	adds	r2, #2
 8009c7e:	0092      	lsls	r2, r2, #2
 8009c80:	300c      	adds	r0, #12
 8009c82:	f7ff ff5b 	bl	8009b3c <memcpy>
 8009c86:	4621      	mov	r1, r4
 8009c88:	4638      	mov	r0, r7
 8009c8a:	f7ff ffa5 	bl	8009bd8 <_Bfree>
 8009c8e:	4644      	mov	r4, r8
 8009c90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c94:	3501      	adds	r5, #1
 8009c96:	615e      	str	r6, [r3, #20]
 8009c98:	6125      	str	r5, [r4, #16]
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ca0:	0800b7c8 	.word	0x0800b7c8
 8009ca4:	0800b854 	.word	0x0800b854

08009ca8 <__s2b>:
 8009ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cac:	4615      	mov	r5, r2
 8009cae:	2209      	movs	r2, #9
 8009cb0:	461f      	mov	r7, r3
 8009cb2:	3308      	adds	r3, #8
 8009cb4:	460c      	mov	r4, r1
 8009cb6:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cba:	4606      	mov	r6, r0
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	2100      	movs	r1, #0
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	db09      	blt.n	8009cd8 <__s2b+0x30>
 8009cc4:	4630      	mov	r0, r6
 8009cc6:	f7ff ff47 	bl	8009b58 <_Balloc>
 8009cca:	b940      	cbnz	r0, 8009cde <__s2b+0x36>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	21ce      	movs	r1, #206	; 0xce
 8009cd0:	4b18      	ldr	r3, [pc, #96]	; (8009d34 <__s2b+0x8c>)
 8009cd2:	4819      	ldr	r0, [pc, #100]	; (8009d38 <__s2b+0x90>)
 8009cd4:	f7fe fcf4 	bl	80086c0 <__assert_func>
 8009cd8:	0052      	lsls	r2, r2, #1
 8009cda:	3101      	adds	r1, #1
 8009cdc:	e7f0      	b.n	8009cc0 <__s2b+0x18>
 8009cde:	9b08      	ldr	r3, [sp, #32]
 8009ce0:	2d09      	cmp	r5, #9
 8009ce2:	6143      	str	r3, [r0, #20]
 8009ce4:	f04f 0301 	mov.w	r3, #1
 8009ce8:	6103      	str	r3, [r0, #16]
 8009cea:	dd16      	ble.n	8009d1a <__s2b+0x72>
 8009cec:	f104 0909 	add.w	r9, r4, #9
 8009cf0:	46c8      	mov	r8, r9
 8009cf2:	442c      	add	r4, r5
 8009cf4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009cf8:	4601      	mov	r1, r0
 8009cfa:	220a      	movs	r2, #10
 8009cfc:	4630      	mov	r0, r6
 8009cfe:	3b30      	subs	r3, #48	; 0x30
 8009d00:	f7ff ff8c 	bl	8009c1c <__multadd>
 8009d04:	45a0      	cmp	r8, r4
 8009d06:	d1f5      	bne.n	8009cf4 <__s2b+0x4c>
 8009d08:	f1a5 0408 	sub.w	r4, r5, #8
 8009d0c:	444c      	add	r4, r9
 8009d0e:	1b2d      	subs	r5, r5, r4
 8009d10:	1963      	adds	r3, r4, r5
 8009d12:	42bb      	cmp	r3, r7
 8009d14:	db04      	blt.n	8009d20 <__s2b+0x78>
 8009d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d1a:	2509      	movs	r5, #9
 8009d1c:	340a      	adds	r4, #10
 8009d1e:	e7f6      	b.n	8009d0e <__s2b+0x66>
 8009d20:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009d24:	4601      	mov	r1, r0
 8009d26:	220a      	movs	r2, #10
 8009d28:	4630      	mov	r0, r6
 8009d2a:	3b30      	subs	r3, #48	; 0x30
 8009d2c:	f7ff ff76 	bl	8009c1c <__multadd>
 8009d30:	e7ee      	b.n	8009d10 <__s2b+0x68>
 8009d32:	bf00      	nop
 8009d34:	0800b7c8 	.word	0x0800b7c8
 8009d38:	0800b854 	.word	0x0800b854

08009d3c <__hi0bits>:
 8009d3c:	0c02      	lsrs	r2, r0, #16
 8009d3e:	0412      	lsls	r2, r2, #16
 8009d40:	4603      	mov	r3, r0
 8009d42:	b9ca      	cbnz	r2, 8009d78 <__hi0bits+0x3c>
 8009d44:	0403      	lsls	r3, r0, #16
 8009d46:	2010      	movs	r0, #16
 8009d48:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009d4c:	bf04      	itt	eq
 8009d4e:	021b      	lsleq	r3, r3, #8
 8009d50:	3008      	addeq	r0, #8
 8009d52:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009d56:	bf04      	itt	eq
 8009d58:	011b      	lsleq	r3, r3, #4
 8009d5a:	3004      	addeq	r0, #4
 8009d5c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009d60:	bf04      	itt	eq
 8009d62:	009b      	lsleq	r3, r3, #2
 8009d64:	3002      	addeq	r0, #2
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	db05      	blt.n	8009d76 <__hi0bits+0x3a>
 8009d6a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009d6e:	f100 0001 	add.w	r0, r0, #1
 8009d72:	bf08      	it	eq
 8009d74:	2020      	moveq	r0, #32
 8009d76:	4770      	bx	lr
 8009d78:	2000      	movs	r0, #0
 8009d7a:	e7e5      	b.n	8009d48 <__hi0bits+0xc>

08009d7c <__lo0bits>:
 8009d7c:	6803      	ldr	r3, [r0, #0]
 8009d7e:	4602      	mov	r2, r0
 8009d80:	f013 0007 	ands.w	r0, r3, #7
 8009d84:	d00b      	beq.n	8009d9e <__lo0bits+0x22>
 8009d86:	07d9      	lsls	r1, r3, #31
 8009d88:	d421      	bmi.n	8009dce <__lo0bits+0x52>
 8009d8a:	0798      	lsls	r0, r3, #30
 8009d8c:	bf49      	itett	mi
 8009d8e:	085b      	lsrmi	r3, r3, #1
 8009d90:	089b      	lsrpl	r3, r3, #2
 8009d92:	2001      	movmi	r0, #1
 8009d94:	6013      	strmi	r3, [r2, #0]
 8009d96:	bf5c      	itt	pl
 8009d98:	2002      	movpl	r0, #2
 8009d9a:	6013      	strpl	r3, [r2, #0]
 8009d9c:	4770      	bx	lr
 8009d9e:	b299      	uxth	r1, r3
 8009da0:	b909      	cbnz	r1, 8009da6 <__lo0bits+0x2a>
 8009da2:	2010      	movs	r0, #16
 8009da4:	0c1b      	lsrs	r3, r3, #16
 8009da6:	b2d9      	uxtb	r1, r3
 8009da8:	b909      	cbnz	r1, 8009dae <__lo0bits+0x32>
 8009daa:	3008      	adds	r0, #8
 8009dac:	0a1b      	lsrs	r3, r3, #8
 8009dae:	0719      	lsls	r1, r3, #28
 8009db0:	bf04      	itt	eq
 8009db2:	091b      	lsreq	r3, r3, #4
 8009db4:	3004      	addeq	r0, #4
 8009db6:	0799      	lsls	r1, r3, #30
 8009db8:	bf04      	itt	eq
 8009dba:	089b      	lsreq	r3, r3, #2
 8009dbc:	3002      	addeq	r0, #2
 8009dbe:	07d9      	lsls	r1, r3, #31
 8009dc0:	d403      	bmi.n	8009dca <__lo0bits+0x4e>
 8009dc2:	085b      	lsrs	r3, r3, #1
 8009dc4:	f100 0001 	add.w	r0, r0, #1
 8009dc8:	d003      	beq.n	8009dd2 <__lo0bits+0x56>
 8009dca:	6013      	str	r3, [r2, #0]
 8009dcc:	4770      	bx	lr
 8009dce:	2000      	movs	r0, #0
 8009dd0:	4770      	bx	lr
 8009dd2:	2020      	movs	r0, #32
 8009dd4:	4770      	bx	lr
	...

08009dd8 <__i2b>:
 8009dd8:	b510      	push	{r4, lr}
 8009dda:	460c      	mov	r4, r1
 8009ddc:	2101      	movs	r1, #1
 8009dde:	f7ff febb 	bl	8009b58 <_Balloc>
 8009de2:	4602      	mov	r2, r0
 8009de4:	b928      	cbnz	r0, 8009df2 <__i2b+0x1a>
 8009de6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009dea:	4b04      	ldr	r3, [pc, #16]	; (8009dfc <__i2b+0x24>)
 8009dec:	4804      	ldr	r0, [pc, #16]	; (8009e00 <__i2b+0x28>)
 8009dee:	f7fe fc67 	bl	80086c0 <__assert_func>
 8009df2:	2301      	movs	r3, #1
 8009df4:	6144      	str	r4, [r0, #20]
 8009df6:	6103      	str	r3, [r0, #16]
 8009df8:	bd10      	pop	{r4, pc}
 8009dfa:	bf00      	nop
 8009dfc:	0800b7c8 	.word	0x0800b7c8
 8009e00:	0800b854 	.word	0x0800b854

08009e04 <__multiply>:
 8009e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e08:	4691      	mov	r9, r2
 8009e0a:	690a      	ldr	r2, [r1, #16]
 8009e0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e10:	460c      	mov	r4, r1
 8009e12:	429a      	cmp	r2, r3
 8009e14:	bfbe      	ittt	lt
 8009e16:	460b      	movlt	r3, r1
 8009e18:	464c      	movlt	r4, r9
 8009e1a:	4699      	movlt	r9, r3
 8009e1c:	6927      	ldr	r7, [r4, #16]
 8009e1e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009e22:	68a3      	ldr	r3, [r4, #8]
 8009e24:	6861      	ldr	r1, [r4, #4]
 8009e26:	eb07 060a 	add.w	r6, r7, sl
 8009e2a:	42b3      	cmp	r3, r6
 8009e2c:	b085      	sub	sp, #20
 8009e2e:	bfb8      	it	lt
 8009e30:	3101      	addlt	r1, #1
 8009e32:	f7ff fe91 	bl	8009b58 <_Balloc>
 8009e36:	b930      	cbnz	r0, 8009e46 <__multiply+0x42>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	f240 115d 	movw	r1, #349	; 0x15d
 8009e3e:	4b43      	ldr	r3, [pc, #268]	; (8009f4c <__multiply+0x148>)
 8009e40:	4843      	ldr	r0, [pc, #268]	; (8009f50 <__multiply+0x14c>)
 8009e42:	f7fe fc3d 	bl	80086c0 <__assert_func>
 8009e46:	f100 0514 	add.w	r5, r0, #20
 8009e4a:	462b      	mov	r3, r5
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009e52:	4543      	cmp	r3, r8
 8009e54:	d321      	bcc.n	8009e9a <__multiply+0x96>
 8009e56:	f104 0314 	add.w	r3, r4, #20
 8009e5a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009e5e:	f109 0314 	add.w	r3, r9, #20
 8009e62:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009e66:	9202      	str	r2, [sp, #8]
 8009e68:	1b3a      	subs	r2, r7, r4
 8009e6a:	3a15      	subs	r2, #21
 8009e6c:	f022 0203 	bic.w	r2, r2, #3
 8009e70:	3204      	adds	r2, #4
 8009e72:	f104 0115 	add.w	r1, r4, #21
 8009e76:	428f      	cmp	r7, r1
 8009e78:	bf38      	it	cc
 8009e7a:	2204      	movcc	r2, #4
 8009e7c:	9201      	str	r2, [sp, #4]
 8009e7e:	9a02      	ldr	r2, [sp, #8]
 8009e80:	9303      	str	r3, [sp, #12]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d80c      	bhi.n	8009ea0 <__multiply+0x9c>
 8009e86:	2e00      	cmp	r6, #0
 8009e88:	dd03      	ble.n	8009e92 <__multiply+0x8e>
 8009e8a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d059      	beq.n	8009f46 <__multiply+0x142>
 8009e92:	6106      	str	r6, [r0, #16]
 8009e94:	b005      	add	sp, #20
 8009e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e9a:	f843 2b04 	str.w	r2, [r3], #4
 8009e9e:	e7d8      	b.n	8009e52 <__multiply+0x4e>
 8009ea0:	f8b3 a000 	ldrh.w	sl, [r3]
 8009ea4:	f1ba 0f00 	cmp.w	sl, #0
 8009ea8:	d023      	beq.n	8009ef2 <__multiply+0xee>
 8009eaa:	46a9      	mov	r9, r5
 8009eac:	f04f 0c00 	mov.w	ip, #0
 8009eb0:	f104 0e14 	add.w	lr, r4, #20
 8009eb4:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009eb8:	f8d9 1000 	ldr.w	r1, [r9]
 8009ebc:	fa1f fb82 	uxth.w	fp, r2
 8009ec0:	b289      	uxth	r1, r1
 8009ec2:	fb0a 110b 	mla	r1, sl, fp, r1
 8009ec6:	4461      	add	r1, ip
 8009ec8:	f8d9 c000 	ldr.w	ip, [r9]
 8009ecc:	0c12      	lsrs	r2, r2, #16
 8009ece:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009ed2:	fb0a c202 	mla	r2, sl, r2, ip
 8009ed6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009eda:	b289      	uxth	r1, r1
 8009edc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009ee0:	4577      	cmp	r7, lr
 8009ee2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009ee6:	f849 1b04 	str.w	r1, [r9], #4
 8009eea:	d8e3      	bhi.n	8009eb4 <__multiply+0xb0>
 8009eec:	9a01      	ldr	r2, [sp, #4]
 8009eee:	f845 c002 	str.w	ip, [r5, r2]
 8009ef2:	9a03      	ldr	r2, [sp, #12]
 8009ef4:	3304      	adds	r3, #4
 8009ef6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009efa:	f1b9 0f00 	cmp.w	r9, #0
 8009efe:	d020      	beq.n	8009f42 <__multiply+0x13e>
 8009f00:	46ae      	mov	lr, r5
 8009f02:	f04f 0a00 	mov.w	sl, #0
 8009f06:	6829      	ldr	r1, [r5, #0]
 8009f08:	f104 0c14 	add.w	ip, r4, #20
 8009f0c:	f8bc b000 	ldrh.w	fp, [ip]
 8009f10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009f14:	b289      	uxth	r1, r1
 8009f16:	fb09 220b 	mla	r2, r9, fp, r2
 8009f1a:	4492      	add	sl, r2
 8009f1c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009f20:	f84e 1b04 	str.w	r1, [lr], #4
 8009f24:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009f28:	f8be 1000 	ldrh.w	r1, [lr]
 8009f2c:	0c12      	lsrs	r2, r2, #16
 8009f2e:	fb09 1102 	mla	r1, r9, r2, r1
 8009f32:	4567      	cmp	r7, ip
 8009f34:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009f38:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009f3c:	d8e6      	bhi.n	8009f0c <__multiply+0x108>
 8009f3e:	9a01      	ldr	r2, [sp, #4]
 8009f40:	50a9      	str	r1, [r5, r2]
 8009f42:	3504      	adds	r5, #4
 8009f44:	e79b      	b.n	8009e7e <__multiply+0x7a>
 8009f46:	3e01      	subs	r6, #1
 8009f48:	e79d      	b.n	8009e86 <__multiply+0x82>
 8009f4a:	bf00      	nop
 8009f4c:	0800b7c8 	.word	0x0800b7c8
 8009f50:	0800b854 	.word	0x0800b854

08009f54 <__pow5mult>:
 8009f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f58:	4615      	mov	r5, r2
 8009f5a:	f012 0203 	ands.w	r2, r2, #3
 8009f5e:	4606      	mov	r6, r0
 8009f60:	460f      	mov	r7, r1
 8009f62:	d007      	beq.n	8009f74 <__pow5mult+0x20>
 8009f64:	4c25      	ldr	r4, [pc, #148]	; (8009ffc <__pow5mult+0xa8>)
 8009f66:	3a01      	subs	r2, #1
 8009f68:	2300      	movs	r3, #0
 8009f6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f6e:	f7ff fe55 	bl	8009c1c <__multadd>
 8009f72:	4607      	mov	r7, r0
 8009f74:	10ad      	asrs	r5, r5, #2
 8009f76:	d03d      	beq.n	8009ff4 <__pow5mult+0xa0>
 8009f78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009f7a:	b97c      	cbnz	r4, 8009f9c <__pow5mult+0x48>
 8009f7c:	2010      	movs	r0, #16
 8009f7e:	f7ff fdb5 	bl	8009aec <malloc>
 8009f82:	4602      	mov	r2, r0
 8009f84:	6270      	str	r0, [r6, #36]	; 0x24
 8009f86:	b928      	cbnz	r0, 8009f94 <__pow5mult+0x40>
 8009f88:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009f8c:	4b1c      	ldr	r3, [pc, #112]	; (800a000 <__pow5mult+0xac>)
 8009f8e:	481d      	ldr	r0, [pc, #116]	; (800a004 <__pow5mult+0xb0>)
 8009f90:	f7fe fb96 	bl	80086c0 <__assert_func>
 8009f94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f98:	6004      	str	r4, [r0, #0]
 8009f9a:	60c4      	str	r4, [r0, #12]
 8009f9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009fa0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009fa4:	b94c      	cbnz	r4, 8009fba <__pow5mult+0x66>
 8009fa6:	f240 2171 	movw	r1, #625	; 0x271
 8009faa:	4630      	mov	r0, r6
 8009fac:	f7ff ff14 	bl	8009dd8 <__i2b>
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	4604      	mov	r4, r0
 8009fb4:	f8c8 0008 	str.w	r0, [r8, #8]
 8009fb8:	6003      	str	r3, [r0, #0]
 8009fba:	f04f 0900 	mov.w	r9, #0
 8009fbe:	07eb      	lsls	r3, r5, #31
 8009fc0:	d50a      	bpl.n	8009fd8 <__pow5mult+0x84>
 8009fc2:	4639      	mov	r1, r7
 8009fc4:	4622      	mov	r2, r4
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	f7ff ff1c 	bl	8009e04 <__multiply>
 8009fcc:	4680      	mov	r8, r0
 8009fce:	4639      	mov	r1, r7
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	f7ff fe01 	bl	8009bd8 <_Bfree>
 8009fd6:	4647      	mov	r7, r8
 8009fd8:	106d      	asrs	r5, r5, #1
 8009fda:	d00b      	beq.n	8009ff4 <__pow5mult+0xa0>
 8009fdc:	6820      	ldr	r0, [r4, #0]
 8009fde:	b938      	cbnz	r0, 8009ff0 <__pow5mult+0x9c>
 8009fe0:	4622      	mov	r2, r4
 8009fe2:	4621      	mov	r1, r4
 8009fe4:	4630      	mov	r0, r6
 8009fe6:	f7ff ff0d 	bl	8009e04 <__multiply>
 8009fea:	6020      	str	r0, [r4, #0]
 8009fec:	f8c0 9000 	str.w	r9, [r0]
 8009ff0:	4604      	mov	r4, r0
 8009ff2:	e7e4      	b.n	8009fbe <__pow5mult+0x6a>
 8009ff4:	4638      	mov	r0, r7
 8009ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ffa:	bf00      	nop
 8009ffc:	0800b9a0 	.word	0x0800b9a0
 800a000:	0800b6b0 	.word	0x0800b6b0
 800a004:	0800b854 	.word	0x0800b854

0800a008 <__lshift>:
 800a008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a00c:	460c      	mov	r4, r1
 800a00e:	4607      	mov	r7, r0
 800a010:	4691      	mov	r9, r2
 800a012:	6923      	ldr	r3, [r4, #16]
 800a014:	6849      	ldr	r1, [r1, #4]
 800a016:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a01a:	68a3      	ldr	r3, [r4, #8]
 800a01c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a020:	f108 0601 	add.w	r6, r8, #1
 800a024:	42b3      	cmp	r3, r6
 800a026:	db0b      	blt.n	800a040 <__lshift+0x38>
 800a028:	4638      	mov	r0, r7
 800a02a:	f7ff fd95 	bl	8009b58 <_Balloc>
 800a02e:	4605      	mov	r5, r0
 800a030:	b948      	cbnz	r0, 800a046 <__lshift+0x3e>
 800a032:	4602      	mov	r2, r0
 800a034:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a038:	4b29      	ldr	r3, [pc, #164]	; (800a0e0 <__lshift+0xd8>)
 800a03a:	482a      	ldr	r0, [pc, #168]	; (800a0e4 <__lshift+0xdc>)
 800a03c:	f7fe fb40 	bl	80086c0 <__assert_func>
 800a040:	3101      	adds	r1, #1
 800a042:	005b      	lsls	r3, r3, #1
 800a044:	e7ee      	b.n	800a024 <__lshift+0x1c>
 800a046:	2300      	movs	r3, #0
 800a048:	f100 0114 	add.w	r1, r0, #20
 800a04c:	f100 0210 	add.w	r2, r0, #16
 800a050:	4618      	mov	r0, r3
 800a052:	4553      	cmp	r3, sl
 800a054:	db37      	blt.n	800a0c6 <__lshift+0xbe>
 800a056:	6920      	ldr	r0, [r4, #16]
 800a058:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a05c:	f104 0314 	add.w	r3, r4, #20
 800a060:	f019 091f 	ands.w	r9, r9, #31
 800a064:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a068:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a06c:	d02f      	beq.n	800a0ce <__lshift+0xc6>
 800a06e:	468a      	mov	sl, r1
 800a070:	f04f 0c00 	mov.w	ip, #0
 800a074:	f1c9 0e20 	rsb	lr, r9, #32
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	fa02 f209 	lsl.w	r2, r2, r9
 800a07e:	ea42 020c 	orr.w	r2, r2, ip
 800a082:	f84a 2b04 	str.w	r2, [sl], #4
 800a086:	f853 2b04 	ldr.w	r2, [r3], #4
 800a08a:	4298      	cmp	r0, r3
 800a08c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a090:	d8f2      	bhi.n	800a078 <__lshift+0x70>
 800a092:	1b03      	subs	r3, r0, r4
 800a094:	3b15      	subs	r3, #21
 800a096:	f023 0303 	bic.w	r3, r3, #3
 800a09a:	3304      	adds	r3, #4
 800a09c:	f104 0215 	add.w	r2, r4, #21
 800a0a0:	4290      	cmp	r0, r2
 800a0a2:	bf38      	it	cc
 800a0a4:	2304      	movcc	r3, #4
 800a0a6:	f841 c003 	str.w	ip, [r1, r3]
 800a0aa:	f1bc 0f00 	cmp.w	ip, #0
 800a0ae:	d001      	beq.n	800a0b4 <__lshift+0xac>
 800a0b0:	f108 0602 	add.w	r6, r8, #2
 800a0b4:	3e01      	subs	r6, #1
 800a0b6:	4638      	mov	r0, r7
 800a0b8:	4621      	mov	r1, r4
 800a0ba:	612e      	str	r6, [r5, #16]
 800a0bc:	f7ff fd8c 	bl	8009bd8 <_Bfree>
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	e7c1      	b.n	800a052 <__lshift+0x4a>
 800a0ce:	3904      	subs	r1, #4
 800a0d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0d4:	4298      	cmp	r0, r3
 800a0d6:	f841 2f04 	str.w	r2, [r1, #4]!
 800a0da:	d8f9      	bhi.n	800a0d0 <__lshift+0xc8>
 800a0dc:	e7ea      	b.n	800a0b4 <__lshift+0xac>
 800a0de:	bf00      	nop
 800a0e0:	0800b7c8 	.word	0x0800b7c8
 800a0e4:	0800b854 	.word	0x0800b854

0800a0e8 <__mcmp>:
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	690a      	ldr	r2, [r1, #16]
 800a0ec:	6900      	ldr	r0, [r0, #16]
 800a0ee:	b530      	push	{r4, r5, lr}
 800a0f0:	1a80      	subs	r0, r0, r2
 800a0f2:	d10d      	bne.n	800a110 <__mcmp+0x28>
 800a0f4:	3314      	adds	r3, #20
 800a0f6:	3114      	adds	r1, #20
 800a0f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a0fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a100:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a104:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a108:	4295      	cmp	r5, r2
 800a10a:	d002      	beq.n	800a112 <__mcmp+0x2a>
 800a10c:	d304      	bcc.n	800a118 <__mcmp+0x30>
 800a10e:	2001      	movs	r0, #1
 800a110:	bd30      	pop	{r4, r5, pc}
 800a112:	42a3      	cmp	r3, r4
 800a114:	d3f4      	bcc.n	800a100 <__mcmp+0x18>
 800a116:	e7fb      	b.n	800a110 <__mcmp+0x28>
 800a118:	f04f 30ff 	mov.w	r0, #4294967295
 800a11c:	e7f8      	b.n	800a110 <__mcmp+0x28>
	...

0800a120 <__mdiff>:
 800a120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a124:	460d      	mov	r5, r1
 800a126:	4607      	mov	r7, r0
 800a128:	4611      	mov	r1, r2
 800a12a:	4628      	mov	r0, r5
 800a12c:	4614      	mov	r4, r2
 800a12e:	f7ff ffdb 	bl	800a0e8 <__mcmp>
 800a132:	1e06      	subs	r6, r0, #0
 800a134:	d111      	bne.n	800a15a <__mdiff+0x3a>
 800a136:	4631      	mov	r1, r6
 800a138:	4638      	mov	r0, r7
 800a13a:	f7ff fd0d 	bl	8009b58 <_Balloc>
 800a13e:	4602      	mov	r2, r0
 800a140:	b928      	cbnz	r0, 800a14e <__mdiff+0x2e>
 800a142:	f240 2132 	movw	r1, #562	; 0x232
 800a146:	4b3a      	ldr	r3, [pc, #232]	; (800a230 <__mdiff+0x110>)
 800a148:	483a      	ldr	r0, [pc, #232]	; (800a234 <__mdiff+0x114>)
 800a14a:	f7fe fab9 	bl	80086c0 <__assert_func>
 800a14e:	2301      	movs	r3, #1
 800a150:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a154:	4610      	mov	r0, r2
 800a156:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a15a:	bfa4      	itt	ge
 800a15c:	4623      	movge	r3, r4
 800a15e:	462c      	movge	r4, r5
 800a160:	4638      	mov	r0, r7
 800a162:	6861      	ldr	r1, [r4, #4]
 800a164:	bfa6      	itte	ge
 800a166:	461d      	movge	r5, r3
 800a168:	2600      	movge	r6, #0
 800a16a:	2601      	movlt	r6, #1
 800a16c:	f7ff fcf4 	bl	8009b58 <_Balloc>
 800a170:	4602      	mov	r2, r0
 800a172:	b918      	cbnz	r0, 800a17c <__mdiff+0x5c>
 800a174:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a178:	4b2d      	ldr	r3, [pc, #180]	; (800a230 <__mdiff+0x110>)
 800a17a:	e7e5      	b.n	800a148 <__mdiff+0x28>
 800a17c:	f102 0814 	add.w	r8, r2, #20
 800a180:	46c2      	mov	sl, r8
 800a182:	f04f 0c00 	mov.w	ip, #0
 800a186:	6927      	ldr	r7, [r4, #16]
 800a188:	60c6      	str	r6, [r0, #12]
 800a18a:	692e      	ldr	r6, [r5, #16]
 800a18c:	f104 0014 	add.w	r0, r4, #20
 800a190:	f105 0914 	add.w	r9, r5, #20
 800a194:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a198:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a19c:	3410      	adds	r4, #16
 800a19e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a1a2:	f859 3b04 	ldr.w	r3, [r9], #4
 800a1a6:	fa1f f18b 	uxth.w	r1, fp
 800a1aa:	448c      	add	ip, r1
 800a1ac:	b299      	uxth	r1, r3
 800a1ae:	0c1b      	lsrs	r3, r3, #16
 800a1b0:	ebac 0101 	sub.w	r1, ip, r1
 800a1b4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a1b8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a1bc:	b289      	uxth	r1, r1
 800a1be:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a1c2:	454e      	cmp	r6, r9
 800a1c4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a1c8:	f84a 3b04 	str.w	r3, [sl], #4
 800a1cc:	d8e7      	bhi.n	800a19e <__mdiff+0x7e>
 800a1ce:	1b73      	subs	r3, r6, r5
 800a1d0:	3b15      	subs	r3, #21
 800a1d2:	f023 0303 	bic.w	r3, r3, #3
 800a1d6:	3515      	adds	r5, #21
 800a1d8:	3304      	adds	r3, #4
 800a1da:	42ae      	cmp	r6, r5
 800a1dc:	bf38      	it	cc
 800a1de:	2304      	movcc	r3, #4
 800a1e0:	4418      	add	r0, r3
 800a1e2:	4443      	add	r3, r8
 800a1e4:	461e      	mov	r6, r3
 800a1e6:	4605      	mov	r5, r0
 800a1e8:	4575      	cmp	r5, lr
 800a1ea:	d30e      	bcc.n	800a20a <__mdiff+0xea>
 800a1ec:	f10e 0103 	add.w	r1, lr, #3
 800a1f0:	1a09      	subs	r1, r1, r0
 800a1f2:	f021 0103 	bic.w	r1, r1, #3
 800a1f6:	3803      	subs	r0, #3
 800a1f8:	4586      	cmp	lr, r0
 800a1fa:	bf38      	it	cc
 800a1fc:	2100      	movcc	r1, #0
 800a1fe:	4419      	add	r1, r3
 800a200:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a204:	b18b      	cbz	r3, 800a22a <__mdiff+0x10a>
 800a206:	6117      	str	r7, [r2, #16]
 800a208:	e7a4      	b.n	800a154 <__mdiff+0x34>
 800a20a:	f855 8b04 	ldr.w	r8, [r5], #4
 800a20e:	fa1f f188 	uxth.w	r1, r8
 800a212:	4461      	add	r1, ip
 800a214:	140c      	asrs	r4, r1, #16
 800a216:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a21a:	b289      	uxth	r1, r1
 800a21c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a220:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a224:	f846 1b04 	str.w	r1, [r6], #4
 800a228:	e7de      	b.n	800a1e8 <__mdiff+0xc8>
 800a22a:	3f01      	subs	r7, #1
 800a22c:	e7e8      	b.n	800a200 <__mdiff+0xe0>
 800a22e:	bf00      	nop
 800a230:	0800b7c8 	.word	0x0800b7c8
 800a234:	0800b854 	.word	0x0800b854

0800a238 <__ulp>:
 800a238:	4b11      	ldr	r3, [pc, #68]	; (800a280 <__ulp+0x48>)
 800a23a:	400b      	ands	r3, r1
 800a23c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a240:	2b00      	cmp	r3, #0
 800a242:	dd02      	ble.n	800a24a <__ulp+0x12>
 800a244:	2000      	movs	r0, #0
 800a246:	4619      	mov	r1, r3
 800a248:	4770      	bx	lr
 800a24a:	425b      	negs	r3, r3
 800a24c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a250:	f04f 0000 	mov.w	r0, #0
 800a254:	f04f 0100 	mov.w	r1, #0
 800a258:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a25c:	da04      	bge.n	800a268 <__ulp+0x30>
 800a25e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a262:	fa43 f102 	asr.w	r1, r3, r2
 800a266:	4770      	bx	lr
 800a268:	f1a2 0314 	sub.w	r3, r2, #20
 800a26c:	2b1e      	cmp	r3, #30
 800a26e:	bfd6      	itet	le
 800a270:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a274:	2301      	movgt	r3, #1
 800a276:	fa22 f303 	lsrle.w	r3, r2, r3
 800a27a:	4618      	mov	r0, r3
 800a27c:	4770      	bx	lr
 800a27e:	bf00      	nop
 800a280:	7ff00000 	.word	0x7ff00000

0800a284 <__b2d>:
 800a284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a288:	6907      	ldr	r7, [r0, #16]
 800a28a:	f100 0914 	add.w	r9, r0, #20
 800a28e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800a292:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800a296:	f1a7 0804 	sub.w	r8, r7, #4
 800a29a:	4630      	mov	r0, r6
 800a29c:	f7ff fd4e 	bl	8009d3c <__hi0bits>
 800a2a0:	f1c0 0320 	rsb	r3, r0, #32
 800a2a4:	280a      	cmp	r0, #10
 800a2a6:	600b      	str	r3, [r1, #0]
 800a2a8:	491f      	ldr	r1, [pc, #124]	; (800a328 <__b2d+0xa4>)
 800a2aa:	dc17      	bgt.n	800a2dc <__b2d+0x58>
 800a2ac:	45c1      	cmp	r9, r8
 800a2ae:	bf28      	it	cs
 800a2b0:	2200      	movcs	r2, #0
 800a2b2:	f1c0 0c0b 	rsb	ip, r0, #11
 800a2b6:	fa26 f30c 	lsr.w	r3, r6, ip
 800a2ba:	bf38      	it	cc
 800a2bc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a2c0:	ea43 0501 	orr.w	r5, r3, r1
 800a2c4:	f100 0315 	add.w	r3, r0, #21
 800a2c8:	fa06 f303 	lsl.w	r3, r6, r3
 800a2cc:	fa22 f20c 	lsr.w	r2, r2, ip
 800a2d0:	ea43 0402 	orr.w	r4, r3, r2
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	4629      	mov	r1, r5
 800a2d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2dc:	45c1      	cmp	r9, r8
 800a2de:	bf2e      	itee	cs
 800a2e0:	2200      	movcs	r2, #0
 800a2e2:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a2e6:	f1a7 0808 	subcc.w	r8, r7, #8
 800a2ea:	f1b0 030b 	subs.w	r3, r0, #11
 800a2ee:	d016      	beq.n	800a31e <__b2d+0x9a>
 800a2f0:	f1c3 0720 	rsb	r7, r3, #32
 800a2f4:	fa22 f107 	lsr.w	r1, r2, r7
 800a2f8:	45c8      	cmp	r8, r9
 800a2fa:	fa06 f603 	lsl.w	r6, r6, r3
 800a2fe:	ea46 0601 	orr.w	r6, r6, r1
 800a302:	bf94      	ite	ls
 800a304:	2100      	movls	r1, #0
 800a306:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800a30a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800a30e:	fa02 f003 	lsl.w	r0, r2, r3
 800a312:	40f9      	lsrs	r1, r7
 800a314:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a318:	ea40 0401 	orr.w	r4, r0, r1
 800a31c:	e7da      	b.n	800a2d4 <__b2d+0x50>
 800a31e:	4614      	mov	r4, r2
 800a320:	ea46 0501 	orr.w	r5, r6, r1
 800a324:	e7d6      	b.n	800a2d4 <__b2d+0x50>
 800a326:	bf00      	nop
 800a328:	3ff00000 	.word	0x3ff00000

0800a32c <__d2b>:
 800a32c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a330:	2101      	movs	r1, #1
 800a332:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800a336:	4690      	mov	r8, r2
 800a338:	461d      	mov	r5, r3
 800a33a:	f7ff fc0d 	bl	8009b58 <_Balloc>
 800a33e:	4604      	mov	r4, r0
 800a340:	b930      	cbnz	r0, 800a350 <__d2b+0x24>
 800a342:	4602      	mov	r2, r0
 800a344:	f240 310a 	movw	r1, #778	; 0x30a
 800a348:	4b24      	ldr	r3, [pc, #144]	; (800a3dc <__d2b+0xb0>)
 800a34a:	4825      	ldr	r0, [pc, #148]	; (800a3e0 <__d2b+0xb4>)
 800a34c:	f7fe f9b8 	bl	80086c0 <__assert_func>
 800a350:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a354:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800a358:	bb2d      	cbnz	r5, 800a3a6 <__d2b+0x7a>
 800a35a:	9301      	str	r3, [sp, #4]
 800a35c:	f1b8 0300 	subs.w	r3, r8, #0
 800a360:	d026      	beq.n	800a3b0 <__d2b+0x84>
 800a362:	4668      	mov	r0, sp
 800a364:	9300      	str	r3, [sp, #0]
 800a366:	f7ff fd09 	bl	8009d7c <__lo0bits>
 800a36a:	9900      	ldr	r1, [sp, #0]
 800a36c:	b1f0      	cbz	r0, 800a3ac <__d2b+0x80>
 800a36e:	9a01      	ldr	r2, [sp, #4]
 800a370:	f1c0 0320 	rsb	r3, r0, #32
 800a374:	fa02 f303 	lsl.w	r3, r2, r3
 800a378:	430b      	orrs	r3, r1
 800a37a:	40c2      	lsrs	r2, r0
 800a37c:	6163      	str	r3, [r4, #20]
 800a37e:	9201      	str	r2, [sp, #4]
 800a380:	9b01      	ldr	r3, [sp, #4]
 800a382:	2b00      	cmp	r3, #0
 800a384:	bf14      	ite	ne
 800a386:	2102      	movne	r1, #2
 800a388:	2101      	moveq	r1, #1
 800a38a:	61a3      	str	r3, [r4, #24]
 800a38c:	6121      	str	r1, [r4, #16]
 800a38e:	b1c5      	cbz	r5, 800a3c2 <__d2b+0x96>
 800a390:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a394:	4405      	add	r5, r0
 800a396:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a39a:	603d      	str	r5, [r7, #0]
 800a39c:	6030      	str	r0, [r6, #0]
 800a39e:	4620      	mov	r0, r4
 800a3a0:	b002      	add	sp, #8
 800a3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3aa:	e7d6      	b.n	800a35a <__d2b+0x2e>
 800a3ac:	6161      	str	r1, [r4, #20]
 800a3ae:	e7e7      	b.n	800a380 <__d2b+0x54>
 800a3b0:	a801      	add	r0, sp, #4
 800a3b2:	f7ff fce3 	bl	8009d7c <__lo0bits>
 800a3b6:	2101      	movs	r1, #1
 800a3b8:	9b01      	ldr	r3, [sp, #4]
 800a3ba:	6121      	str	r1, [r4, #16]
 800a3bc:	6163      	str	r3, [r4, #20]
 800a3be:	3020      	adds	r0, #32
 800a3c0:	e7e5      	b.n	800a38e <__d2b+0x62>
 800a3c2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a3c6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a3ca:	6038      	str	r0, [r7, #0]
 800a3cc:	6918      	ldr	r0, [r3, #16]
 800a3ce:	f7ff fcb5 	bl	8009d3c <__hi0bits>
 800a3d2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a3d6:	6031      	str	r1, [r6, #0]
 800a3d8:	e7e1      	b.n	800a39e <__d2b+0x72>
 800a3da:	bf00      	nop
 800a3dc:	0800b7c8 	.word	0x0800b7c8
 800a3e0:	0800b854 	.word	0x0800b854

0800a3e4 <__ratio>:
 800a3e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e8:	4688      	mov	r8, r1
 800a3ea:	4669      	mov	r1, sp
 800a3ec:	4681      	mov	r9, r0
 800a3ee:	f7ff ff49 	bl	800a284 <__b2d>
 800a3f2:	460f      	mov	r7, r1
 800a3f4:	4604      	mov	r4, r0
 800a3f6:	460d      	mov	r5, r1
 800a3f8:	4640      	mov	r0, r8
 800a3fa:	a901      	add	r1, sp, #4
 800a3fc:	f7ff ff42 	bl	800a284 <__b2d>
 800a400:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a404:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a408:	468b      	mov	fp, r1
 800a40a:	eba3 0c02 	sub.w	ip, r3, r2
 800a40e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a412:	1a9b      	subs	r3, r3, r2
 800a414:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a418:	2b00      	cmp	r3, #0
 800a41a:	bfd5      	itete	le
 800a41c:	460a      	movle	r2, r1
 800a41e:	462a      	movgt	r2, r5
 800a420:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a424:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a428:	bfd8      	it	le
 800a42a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a42e:	465b      	mov	r3, fp
 800a430:	4602      	mov	r2, r0
 800a432:	4639      	mov	r1, r7
 800a434:	4620      	mov	r0, r4
 800a436:	f7f6 f983 	bl	8000740 <__aeabi_ddiv>
 800a43a:	b003      	add	sp, #12
 800a43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a440 <__copybits>:
 800a440:	3901      	subs	r1, #1
 800a442:	b570      	push	{r4, r5, r6, lr}
 800a444:	1149      	asrs	r1, r1, #5
 800a446:	6914      	ldr	r4, [r2, #16]
 800a448:	3101      	adds	r1, #1
 800a44a:	f102 0314 	add.w	r3, r2, #20
 800a44e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a452:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a456:	1f05      	subs	r5, r0, #4
 800a458:	42a3      	cmp	r3, r4
 800a45a:	d30c      	bcc.n	800a476 <__copybits+0x36>
 800a45c:	1aa3      	subs	r3, r4, r2
 800a45e:	3b11      	subs	r3, #17
 800a460:	f023 0303 	bic.w	r3, r3, #3
 800a464:	3211      	adds	r2, #17
 800a466:	42a2      	cmp	r2, r4
 800a468:	bf88      	it	hi
 800a46a:	2300      	movhi	r3, #0
 800a46c:	4418      	add	r0, r3
 800a46e:	2300      	movs	r3, #0
 800a470:	4288      	cmp	r0, r1
 800a472:	d305      	bcc.n	800a480 <__copybits+0x40>
 800a474:	bd70      	pop	{r4, r5, r6, pc}
 800a476:	f853 6b04 	ldr.w	r6, [r3], #4
 800a47a:	f845 6f04 	str.w	r6, [r5, #4]!
 800a47e:	e7eb      	b.n	800a458 <__copybits+0x18>
 800a480:	f840 3b04 	str.w	r3, [r0], #4
 800a484:	e7f4      	b.n	800a470 <__copybits+0x30>

0800a486 <__any_on>:
 800a486:	f100 0214 	add.w	r2, r0, #20
 800a48a:	6900      	ldr	r0, [r0, #16]
 800a48c:	114b      	asrs	r3, r1, #5
 800a48e:	4298      	cmp	r0, r3
 800a490:	b510      	push	{r4, lr}
 800a492:	db11      	blt.n	800a4b8 <__any_on+0x32>
 800a494:	dd0a      	ble.n	800a4ac <__any_on+0x26>
 800a496:	f011 011f 	ands.w	r1, r1, #31
 800a49a:	d007      	beq.n	800a4ac <__any_on+0x26>
 800a49c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a4a0:	fa24 f001 	lsr.w	r0, r4, r1
 800a4a4:	fa00 f101 	lsl.w	r1, r0, r1
 800a4a8:	428c      	cmp	r4, r1
 800a4aa:	d10b      	bne.n	800a4c4 <__any_on+0x3e>
 800a4ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d803      	bhi.n	800a4bc <__any_on+0x36>
 800a4b4:	2000      	movs	r0, #0
 800a4b6:	bd10      	pop	{r4, pc}
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	e7f7      	b.n	800a4ac <__any_on+0x26>
 800a4bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a4c0:	2900      	cmp	r1, #0
 800a4c2:	d0f5      	beq.n	800a4b0 <__any_on+0x2a>
 800a4c4:	2001      	movs	r0, #1
 800a4c6:	e7f6      	b.n	800a4b6 <__any_on+0x30>

0800a4c8 <_calloc_r>:
 800a4c8:	b570      	push	{r4, r5, r6, lr}
 800a4ca:	fba1 5402 	umull	r5, r4, r1, r2
 800a4ce:	b934      	cbnz	r4, 800a4de <_calloc_r+0x16>
 800a4d0:	4629      	mov	r1, r5
 800a4d2:	f000 f875 	bl	800a5c0 <_malloc_r>
 800a4d6:	4606      	mov	r6, r0
 800a4d8:	b928      	cbnz	r0, 800a4e6 <_calloc_r+0x1e>
 800a4da:	4630      	mov	r0, r6
 800a4dc:	bd70      	pop	{r4, r5, r6, pc}
 800a4de:	220c      	movs	r2, #12
 800a4e0:	2600      	movs	r6, #0
 800a4e2:	6002      	str	r2, [r0, #0]
 800a4e4:	e7f9      	b.n	800a4da <_calloc_r+0x12>
 800a4e6:	462a      	mov	r2, r5
 800a4e8:	4621      	mov	r1, r4
 800a4ea:	f7fc fded 	bl	80070c8 <memset>
 800a4ee:	e7f4      	b.n	800a4da <_calloc_r+0x12>

0800a4f0 <_free_r>:
 800a4f0:	b538      	push	{r3, r4, r5, lr}
 800a4f2:	4605      	mov	r5, r0
 800a4f4:	2900      	cmp	r1, #0
 800a4f6:	d040      	beq.n	800a57a <_free_r+0x8a>
 800a4f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4fc:	1f0c      	subs	r4, r1, #4
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	bfb8      	it	lt
 800a502:	18e4      	addlt	r4, r4, r3
 800a504:	f000 feba 	bl	800b27c <__malloc_lock>
 800a508:	4a1c      	ldr	r2, [pc, #112]	; (800a57c <_free_r+0x8c>)
 800a50a:	6813      	ldr	r3, [r2, #0]
 800a50c:	b933      	cbnz	r3, 800a51c <_free_r+0x2c>
 800a50e:	6063      	str	r3, [r4, #4]
 800a510:	6014      	str	r4, [r2, #0]
 800a512:	4628      	mov	r0, r5
 800a514:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a518:	f000 beb6 	b.w	800b288 <__malloc_unlock>
 800a51c:	42a3      	cmp	r3, r4
 800a51e:	d908      	bls.n	800a532 <_free_r+0x42>
 800a520:	6820      	ldr	r0, [r4, #0]
 800a522:	1821      	adds	r1, r4, r0
 800a524:	428b      	cmp	r3, r1
 800a526:	bf01      	itttt	eq
 800a528:	6819      	ldreq	r1, [r3, #0]
 800a52a:	685b      	ldreq	r3, [r3, #4]
 800a52c:	1809      	addeq	r1, r1, r0
 800a52e:	6021      	streq	r1, [r4, #0]
 800a530:	e7ed      	b.n	800a50e <_free_r+0x1e>
 800a532:	461a      	mov	r2, r3
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	b10b      	cbz	r3, 800a53c <_free_r+0x4c>
 800a538:	42a3      	cmp	r3, r4
 800a53a:	d9fa      	bls.n	800a532 <_free_r+0x42>
 800a53c:	6811      	ldr	r1, [r2, #0]
 800a53e:	1850      	adds	r0, r2, r1
 800a540:	42a0      	cmp	r0, r4
 800a542:	d10b      	bne.n	800a55c <_free_r+0x6c>
 800a544:	6820      	ldr	r0, [r4, #0]
 800a546:	4401      	add	r1, r0
 800a548:	1850      	adds	r0, r2, r1
 800a54a:	4283      	cmp	r3, r0
 800a54c:	6011      	str	r1, [r2, #0]
 800a54e:	d1e0      	bne.n	800a512 <_free_r+0x22>
 800a550:	6818      	ldr	r0, [r3, #0]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	4401      	add	r1, r0
 800a556:	6011      	str	r1, [r2, #0]
 800a558:	6053      	str	r3, [r2, #4]
 800a55a:	e7da      	b.n	800a512 <_free_r+0x22>
 800a55c:	d902      	bls.n	800a564 <_free_r+0x74>
 800a55e:	230c      	movs	r3, #12
 800a560:	602b      	str	r3, [r5, #0]
 800a562:	e7d6      	b.n	800a512 <_free_r+0x22>
 800a564:	6820      	ldr	r0, [r4, #0]
 800a566:	1821      	adds	r1, r4, r0
 800a568:	428b      	cmp	r3, r1
 800a56a:	bf01      	itttt	eq
 800a56c:	6819      	ldreq	r1, [r3, #0]
 800a56e:	685b      	ldreq	r3, [r3, #4]
 800a570:	1809      	addeq	r1, r1, r0
 800a572:	6021      	streq	r1, [r4, #0]
 800a574:	6063      	str	r3, [r4, #4]
 800a576:	6054      	str	r4, [r2, #4]
 800a578:	e7cb      	b.n	800a512 <_free_r+0x22>
 800a57a:	bd38      	pop	{r3, r4, r5, pc}
 800a57c:	20000528 	.word	0x20000528

0800a580 <sbrk_aligned>:
 800a580:	b570      	push	{r4, r5, r6, lr}
 800a582:	4e0e      	ldr	r6, [pc, #56]	; (800a5bc <sbrk_aligned+0x3c>)
 800a584:	460c      	mov	r4, r1
 800a586:	6831      	ldr	r1, [r6, #0]
 800a588:	4605      	mov	r5, r0
 800a58a:	b911      	cbnz	r1, 800a592 <sbrk_aligned+0x12>
 800a58c:	f000 fb46 	bl	800ac1c <_sbrk_r>
 800a590:	6030      	str	r0, [r6, #0]
 800a592:	4621      	mov	r1, r4
 800a594:	4628      	mov	r0, r5
 800a596:	f000 fb41 	bl	800ac1c <_sbrk_r>
 800a59a:	1c43      	adds	r3, r0, #1
 800a59c:	d00a      	beq.n	800a5b4 <sbrk_aligned+0x34>
 800a59e:	1cc4      	adds	r4, r0, #3
 800a5a0:	f024 0403 	bic.w	r4, r4, #3
 800a5a4:	42a0      	cmp	r0, r4
 800a5a6:	d007      	beq.n	800a5b8 <sbrk_aligned+0x38>
 800a5a8:	1a21      	subs	r1, r4, r0
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	f000 fb36 	bl	800ac1c <_sbrk_r>
 800a5b0:	3001      	adds	r0, #1
 800a5b2:	d101      	bne.n	800a5b8 <sbrk_aligned+0x38>
 800a5b4:	f04f 34ff 	mov.w	r4, #4294967295
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	bd70      	pop	{r4, r5, r6, pc}
 800a5bc:	2000052c 	.word	0x2000052c

0800a5c0 <_malloc_r>:
 800a5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c4:	1ccd      	adds	r5, r1, #3
 800a5c6:	f025 0503 	bic.w	r5, r5, #3
 800a5ca:	3508      	adds	r5, #8
 800a5cc:	2d0c      	cmp	r5, #12
 800a5ce:	bf38      	it	cc
 800a5d0:	250c      	movcc	r5, #12
 800a5d2:	2d00      	cmp	r5, #0
 800a5d4:	4607      	mov	r7, r0
 800a5d6:	db01      	blt.n	800a5dc <_malloc_r+0x1c>
 800a5d8:	42a9      	cmp	r1, r5
 800a5da:	d905      	bls.n	800a5e8 <_malloc_r+0x28>
 800a5dc:	230c      	movs	r3, #12
 800a5de:	2600      	movs	r6, #0
 800a5e0:	603b      	str	r3, [r7, #0]
 800a5e2:	4630      	mov	r0, r6
 800a5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5e8:	4e2e      	ldr	r6, [pc, #184]	; (800a6a4 <_malloc_r+0xe4>)
 800a5ea:	f000 fe47 	bl	800b27c <__malloc_lock>
 800a5ee:	6833      	ldr	r3, [r6, #0]
 800a5f0:	461c      	mov	r4, r3
 800a5f2:	bb34      	cbnz	r4, 800a642 <_malloc_r+0x82>
 800a5f4:	4629      	mov	r1, r5
 800a5f6:	4638      	mov	r0, r7
 800a5f8:	f7ff ffc2 	bl	800a580 <sbrk_aligned>
 800a5fc:	1c43      	adds	r3, r0, #1
 800a5fe:	4604      	mov	r4, r0
 800a600:	d14d      	bne.n	800a69e <_malloc_r+0xde>
 800a602:	6834      	ldr	r4, [r6, #0]
 800a604:	4626      	mov	r6, r4
 800a606:	2e00      	cmp	r6, #0
 800a608:	d140      	bne.n	800a68c <_malloc_r+0xcc>
 800a60a:	6823      	ldr	r3, [r4, #0]
 800a60c:	4631      	mov	r1, r6
 800a60e:	4638      	mov	r0, r7
 800a610:	eb04 0803 	add.w	r8, r4, r3
 800a614:	f000 fb02 	bl	800ac1c <_sbrk_r>
 800a618:	4580      	cmp	r8, r0
 800a61a:	d13a      	bne.n	800a692 <_malloc_r+0xd2>
 800a61c:	6821      	ldr	r1, [r4, #0]
 800a61e:	3503      	adds	r5, #3
 800a620:	1a6d      	subs	r5, r5, r1
 800a622:	f025 0503 	bic.w	r5, r5, #3
 800a626:	3508      	adds	r5, #8
 800a628:	2d0c      	cmp	r5, #12
 800a62a:	bf38      	it	cc
 800a62c:	250c      	movcc	r5, #12
 800a62e:	4638      	mov	r0, r7
 800a630:	4629      	mov	r1, r5
 800a632:	f7ff ffa5 	bl	800a580 <sbrk_aligned>
 800a636:	3001      	adds	r0, #1
 800a638:	d02b      	beq.n	800a692 <_malloc_r+0xd2>
 800a63a:	6823      	ldr	r3, [r4, #0]
 800a63c:	442b      	add	r3, r5
 800a63e:	6023      	str	r3, [r4, #0]
 800a640:	e00e      	b.n	800a660 <_malloc_r+0xa0>
 800a642:	6822      	ldr	r2, [r4, #0]
 800a644:	1b52      	subs	r2, r2, r5
 800a646:	d41e      	bmi.n	800a686 <_malloc_r+0xc6>
 800a648:	2a0b      	cmp	r2, #11
 800a64a:	d916      	bls.n	800a67a <_malloc_r+0xba>
 800a64c:	1961      	adds	r1, r4, r5
 800a64e:	42a3      	cmp	r3, r4
 800a650:	6025      	str	r5, [r4, #0]
 800a652:	bf18      	it	ne
 800a654:	6059      	strne	r1, [r3, #4]
 800a656:	6863      	ldr	r3, [r4, #4]
 800a658:	bf08      	it	eq
 800a65a:	6031      	streq	r1, [r6, #0]
 800a65c:	5162      	str	r2, [r4, r5]
 800a65e:	604b      	str	r3, [r1, #4]
 800a660:	4638      	mov	r0, r7
 800a662:	f104 060b 	add.w	r6, r4, #11
 800a666:	f000 fe0f 	bl	800b288 <__malloc_unlock>
 800a66a:	f026 0607 	bic.w	r6, r6, #7
 800a66e:	1d23      	adds	r3, r4, #4
 800a670:	1af2      	subs	r2, r6, r3
 800a672:	d0b6      	beq.n	800a5e2 <_malloc_r+0x22>
 800a674:	1b9b      	subs	r3, r3, r6
 800a676:	50a3      	str	r3, [r4, r2]
 800a678:	e7b3      	b.n	800a5e2 <_malloc_r+0x22>
 800a67a:	6862      	ldr	r2, [r4, #4]
 800a67c:	42a3      	cmp	r3, r4
 800a67e:	bf0c      	ite	eq
 800a680:	6032      	streq	r2, [r6, #0]
 800a682:	605a      	strne	r2, [r3, #4]
 800a684:	e7ec      	b.n	800a660 <_malloc_r+0xa0>
 800a686:	4623      	mov	r3, r4
 800a688:	6864      	ldr	r4, [r4, #4]
 800a68a:	e7b2      	b.n	800a5f2 <_malloc_r+0x32>
 800a68c:	4634      	mov	r4, r6
 800a68e:	6876      	ldr	r6, [r6, #4]
 800a690:	e7b9      	b.n	800a606 <_malloc_r+0x46>
 800a692:	230c      	movs	r3, #12
 800a694:	4638      	mov	r0, r7
 800a696:	603b      	str	r3, [r7, #0]
 800a698:	f000 fdf6 	bl	800b288 <__malloc_unlock>
 800a69c:	e7a1      	b.n	800a5e2 <_malloc_r+0x22>
 800a69e:	6025      	str	r5, [r4, #0]
 800a6a0:	e7de      	b.n	800a660 <_malloc_r+0xa0>
 800a6a2:	bf00      	nop
 800a6a4:	20000528 	.word	0x20000528

0800a6a8 <__ssputs_r>:
 800a6a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6ac:	688e      	ldr	r6, [r1, #8]
 800a6ae:	4682      	mov	sl, r0
 800a6b0:	429e      	cmp	r6, r3
 800a6b2:	460c      	mov	r4, r1
 800a6b4:	4690      	mov	r8, r2
 800a6b6:	461f      	mov	r7, r3
 800a6b8:	d838      	bhi.n	800a72c <__ssputs_r+0x84>
 800a6ba:	898a      	ldrh	r2, [r1, #12]
 800a6bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a6c0:	d032      	beq.n	800a728 <__ssputs_r+0x80>
 800a6c2:	6825      	ldr	r5, [r4, #0]
 800a6c4:	6909      	ldr	r1, [r1, #16]
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	eba5 0901 	sub.w	r9, r5, r1
 800a6cc:	6965      	ldr	r5, [r4, #20]
 800a6ce:	444b      	add	r3, r9
 800a6d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6d8:	106d      	asrs	r5, r5, #1
 800a6da:	429d      	cmp	r5, r3
 800a6dc:	bf38      	it	cc
 800a6de:	461d      	movcc	r5, r3
 800a6e0:	0553      	lsls	r3, r2, #21
 800a6e2:	d531      	bpl.n	800a748 <__ssputs_r+0xa0>
 800a6e4:	4629      	mov	r1, r5
 800a6e6:	f7ff ff6b 	bl	800a5c0 <_malloc_r>
 800a6ea:	4606      	mov	r6, r0
 800a6ec:	b950      	cbnz	r0, 800a704 <__ssputs_r+0x5c>
 800a6ee:	230c      	movs	r3, #12
 800a6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6f4:	f8ca 3000 	str.w	r3, [sl]
 800a6f8:	89a3      	ldrh	r3, [r4, #12]
 800a6fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6fe:	81a3      	strh	r3, [r4, #12]
 800a700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a704:	464a      	mov	r2, r9
 800a706:	6921      	ldr	r1, [r4, #16]
 800a708:	f7ff fa18 	bl	8009b3c <memcpy>
 800a70c:	89a3      	ldrh	r3, [r4, #12]
 800a70e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a716:	81a3      	strh	r3, [r4, #12]
 800a718:	6126      	str	r6, [r4, #16]
 800a71a:	444e      	add	r6, r9
 800a71c:	6026      	str	r6, [r4, #0]
 800a71e:	463e      	mov	r6, r7
 800a720:	6165      	str	r5, [r4, #20]
 800a722:	eba5 0509 	sub.w	r5, r5, r9
 800a726:	60a5      	str	r5, [r4, #8]
 800a728:	42be      	cmp	r6, r7
 800a72a:	d900      	bls.n	800a72e <__ssputs_r+0x86>
 800a72c:	463e      	mov	r6, r7
 800a72e:	4632      	mov	r2, r6
 800a730:	4641      	mov	r1, r8
 800a732:	6820      	ldr	r0, [r4, #0]
 800a734:	f000 fd88 	bl	800b248 <memmove>
 800a738:	68a3      	ldr	r3, [r4, #8]
 800a73a:	2000      	movs	r0, #0
 800a73c:	1b9b      	subs	r3, r3, r6
 800a73e:	60a3      	str	r3, [r4, #8]
 800a740:	6823      	ldr	r3, [r4, #0]
 800a742:	4433      	add	r3, r6
 800a744:	6023      	str	r3, [r4, #0]
 800a746:	e7db      	b.n	800a700 <__ssputs_r+0x58>
 800a748:	462a      	mov	r2, r5
 800a74a:	f000 fda3 	bl	800b294 <_realloc_r>
 800a74e:	4606      	mov	r6, r0
 800a750:	2800      	cmp	r0, #0
 800a752:	d1e1      	bne.n	800a718 <__ssputs_r+0x70>
 800a754:	4650      	mov	r0, sl
 800a756:	6921      	ldr	r1, [r4, #16]
 800a758:	f7ff feca 	bl	800a4f0 <_free_r>
 800a75c:	e7c7      	b.n	800a6ee <__ssputs_r+0x46>
	...

0800a760 <_svfiprintf_r>:
 800a760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a764:	4698      	mov	r8, r3
 800a766:	898b      	ldrh	r3, [r1, #12]
 800a768:	4607      	mov	r7, r0
 800a76a:	061b      	lsls	r3, r3, #24
 800a76c:	460d      	mov	r5, r1
 800a76e:	4614      	mov	r4, r2
 800a770:	b09d      	sub	sp, #116	; 0x74
 800a772:	d50e      	bpl.n	800a792 <_svfiprintf_r+0x32>
 800a774:	690b      	ldr	r3, [r1, #16]
 800a776:	b963      	cbnz	r3, 800a792 <_svfiprintf_r+0x32>
 800a778:	2140      	movs	r1, #64	; 0x40
 800a77a:	f7ff ff21 	bl	800a5c0 <_malloc_r>
 800a77e:	6028      	str	r0, [r5, #0]
 800a780:	6128      	str	r0, [r5, #16]
 800a782:	b920      	cbnz	r0, 800a78e <_svfiprintf_r+0x2e>
 800a784:	230c      	movs	r3, #12
 800a786:	603b      	str	r3, [r7, #0]
 800a788:	f04f 30ff 	mov.w	r0, #4294967295
 800a78c:	e0d1      	b.n	800a932 <_svfiprintf_r+0x1d2>
 800a78e:	2340      	movs	r3, #64	; 0x40
 800a790:	616b      	str	r3, [r5, #20]
 800a792:	2300      	movs	r3, #0
 800a794:	9309      	str	r3, [sp, #36]	; 0x24
 800a796:	2320      	movs	r3, #32
 800a798:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a79c:	2330      	movs	r3, #48	; 0x30
 800a79e:	f04f 0901 	mov.w	r9, #1
 800a7a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a94c <_svfiprintf_r+0x1ec>
 800a7aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7ae:	4623      	mov	r3, r4
 800a7b0:	469a      	mov	sl, r3
 800a7b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7b6:	b10a      	cbz	r2, 800a7bc <_svfiprintf_r+0x5c>
 800a7b8:	2a25      	cmp	r2, #37	; 0x25
 800a7ba:	d1f9      	bne.n	800a7b0 <_svfiprintf_r+0x50>
 800a7bc:	ebba 0b04 	subs.w	fp, sl, r4
 800a7c0:	d00b      	beq.n	800a7da <_svfiprintf_r+0x7a>
 800a7c2:	465b      	mov	r3, fp
 800a7c4:	4622      	mov	r2, r4
 800a7c6:	4629      	mov	r1, r5
 800a7c8:	4638      	mov	r0, r7
 800a7ca:	f7ff ff6d 	bl	800a6a8 <__ssputs_r>
 800a7ce:	3001      	adds	r0, #1
 800a7d0:	f000 80aa 	beq.w	800a928 <_svfiprintf_r+0x1c8>
 800a7d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7d6:	445a      	add	r2, fp
 800a7d8:	9209      	str	r2, [sp, #36]	; 0x24
 800a7da:	f89a 3000 	ldrb.w	r3, [sl]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	f000 80a2 	beq.w	800a928 <_svfiprintf_r+0x1c8>
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7ee:	f10a 0a01 	add.w	sl, sl, #1
 800a7f2:	9304      	str	r3, [sp, #16]
 800a7f4:	9307      	str	r3, [sp, #28]
 800a7f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7fa:	931a      	str	r3, [sp, #104]	; 0x68
 800a7fc:	4654      	mov	r4, sl
 800a7fe:	2205      	movs	r2, #5
 800a800:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a804:	4851      	ldr	r0, [pc, #324]	; (800a94c <_svfiprintf_r+0x1ec>)
 800a806:	f7ff f98b 	bl	8009b20 <memchr>
 800a80a:	9a04      	ldr	r2, [sp, #16]
 800a80c:	b9d8      	cbnz	r0, 800a846 <_svfiprintf_r+0xe6>
 800a80e:	06d0      	lsls	r0, r2, #27
 800a810:	bf44      	itt	mi
 800a812:	2320      	movmi	r3, #32
 800a814:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a818:	0711      	lsls	r1, r2, #28
 800a81a:	bf44      	itt	mi
 800a81c:	232b      	movmi	r3, #43	; 0x2b
 800a81e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a822:	f89a 3000 	ldrb.w	r3, [sl]
 800a826:	2b2a      	cmp	r3, #42	; 0x2a
 800a828:	d015      	beq.n	800a856 <_svfiprintf_r+0xf6>
 800a82a:	4654      	mov	r4, sl
 800a82c:	2000      	movs	r0, #0
 800a82e:	f04f 0c0a 	mov.w	ip, #10
 800a832:	9a07      	ldr	r2, [sp, #28]
 800a834:	4621      	mov	r1, r4
 800a836:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a83a:	3b30      	subs	r3, #48	; 0x30
 800a83c:	2b09      	cmp	r3, #9
 800a83e:	d94e      	bls.n	800a8de <_svfiprintf_r+0x17e>
 800a840:	b1b0      	cbz	r0, 800a870 <_svfiprintf_r+0x110>
 800a842:	9207      	str	r2, [sp, #28]
 800a844:	e014      	b.n	800a870 <_svfiprintf_r+0x110>
 800a846:	eba0 0308 	sub.w	r3, r0, r8
 800a84a:	fa09 f303 	lsl.w	r3, r9, r3
 800a84e:	4313      	orrs	r3, r2
 800a850:	46a2      	mov	sl, r4
 800a852:	9304      	str	r3, [sp, #16]
 800a854:	e7d2      	b.n	800a7fc <_svfiprintf_r+0x9c>
 800a856:	9b03      	ldr	r3, [sp, #12]
 800a858:	1d19      	adds	r1, r3, #4
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	9103      	str	r1, [sp, #12]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	bfbb      	ittet	lt
 800a862:	425b      	neglt	r3, r3
 800a864:	f042 0202 	orrlt.w	r2, r2, #2
 800a868:	9307      	strge	r3, [sp, #28]
 800a86a:	9307      	strlt	r3, [sp, #28]
 800a86c:	bfb8      	it	lt
 800a86e:	9204      	strlt	r2, [sp, #16]
 800a870:	7823      	ldrb	r3, [r4, #0]
 800a872:	2b2e      	cmp	r3, #46	; 0x2e
 800a874:	d10c      	bne.n	800a890 <_svfiprintf_r+0x130>
 800a876:	7863      	ldrb	r3, [r4, #1]
 800a878:	2b2a      	cmp	r3, #42	; 0x2a
 800a87a:	d135      	bne.n	800a8e8 <_svfiprintf_r+0x188>
 800a87c:	9b03      	ldr	r3, [sp, #12]
 800a87e:	3402      	adds	r4, #2
 800a880:	1d1a      	adds	r2, r3, #4
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	9203      	str	r2, [sp, #12]
 800a886:	2b00      	cmp	r3, #0
 800a888:	bfb8      	it	lt
 800a88a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a88e:	9305      	str	r3, [sp, #20]
 800a890:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a950 <_svfiprintf_r+0x1f0>
 800a894:	2203      	movs	r2, #3
 800a896:	4650      	mov	r0, sl
 800a898:	7821      	ldrb	r1, [r4, #0]
 800a89a:	f7ff f941 	bl	8009b20 <memchr>
 800a89e:	b140      	cbz	r0, 800a8b2 <_svfiprintf_r+0x152>
 800a8a0:	2340      	movs	r3, #64	; 0x40
 800a8a2:	eba0 000a 	sub.w	r0, r0, sl
 800a8a6:	fa03 f000 	lsl.w	r0, r3, r0
 800a8aa:	9b04      	ldr	r3, [sp, #16]
 800a8ac:	3401      	adds	r4, #1
 800a8ae:	4303      	orrs	r3, r0
 800a8b0:	9304      	str	r3, [sp, #16]
 800a8b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8b6:	2206      	movs	r2, #6
 800a8b8:	4826      	ldr	r0, [pc, #152]	; (800a954 <_svfiprintf_r+0x1f4>)
 800a8ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8be:	f7ff f92f 	bl	8009b20 <memchr>
 800a8c2:	2800      	cmp	r0, #0
 800a8c4:	d038      	beq.n	800a938 <_svfiprintf_r+0x1d8>
 800a8c6:	4b24      	ldr	r3, [pc, #144]	; (800a958 <_svfiprintf_r+0x1f8>)
 800a8c8:	bb1b      	cbnz	r3, 800a912 <_svfiprintf_r+0x1b2>
 800a8ca:	9b03      	ldr	r3, [sp, #12]
 800a8cc:	3307      	adds	r3, #7
 800a8ce:	f023 0307 	bic.w	r3, r3, #7
 800a8d2:	3308      	adds	r3, #8
 800a8d4:	9303      	str	r3, [sp, #12]
 800a8d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8d8:	4433      	add	r3, r6
 800a8da:	9309      	str	r3, [sp, #36]	; 0x24
 800a8dc:	e767      	b.n	800a7ae <_svfiprintf_r+0x4e>
 800a8de:	460c      	mov	r4, r1
 800a8e0:	2001      	movs	r0, #1
 800a8e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8e6:	e7a5      	b.n	800a834 <_svfiprintf_r+0xd4>
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	f04f 0c0a 	mov.w	ip, #10
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	3401      	adds	r4, #1
 800a8f2:	9305      	str	r3, [sp, #20]
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8fa:	3a30      	subs	r2, #48	; 0x30
 800a8fc:	2a09      	cmp	r2, #9
 800a8fe:	d903      	bls.n	800a908 <_svfiprintf_r+0x1a8>
 800a900:	2b00      	cmp	r3, #0
 800a902:	d0c5      	beq.n	800a890 <_svfiprintf_r+0x130>
 800a904:	9105      	str	r1, [sp, #20]
 800a906:	e7c3      	b.n	800a890 <_svfiprintf_r+0x130>
 800a908:	4604      	mov	r4, r0
 800a90a:	2301      	movs	r3, #1
 800a90c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a910:	e7f0      	b.n	800a8f4 <_svfiprintf_r+0x194>
 800a912:	ab03      	add	r3, sp, #12
 800a914:	9300      	str	r3, [sp, #0]
 800a916:	462a      	mov	r2, r5
 800a918:	4638      	mov	r0, r7
 800a91a:	4b10      	ldr	r3, [pc, #64]	; (800a95c <_svfiprintf_r+0x1fc>)
 800a91c:	a904      	add	r1, sp, #16
 800a91e:	f7fc fc79 	bl	8007214 <_printf_float>
 800a922:	1c42      	adds	r2, r0, #1
 800a924:	4606      	mov	r6, r0
 800a926:	d1d6      	bne.n	800a8d6 <_svfiprintf_r+0x176>
 800a928:	89ab      	ldrh	r3, [r5, #12]
 800a92a:	065b      	lsls	r3, r3, #25
 800a92c:	f53f af2c 	bmi.w	800a788 <_svfiprintf_r+0x28>
 800a930:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a932:	b01d      	add	sp, #116	; 0x74
 800a934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a938:	ab03      	add	r3, sp, #12
 800a93a:	9300      	str	r3, [sp, #0]
 800a93c:	462a      	mov	r2, r5
 800a93e:	4638      	mov	r0, r7
 800a940:	4b06      	ldr	r3, [pc, #24]	; (800a95c <_svfiprintf_r+0x1fc>)
 800a942:	a904      	add	r1, sp, #16
 800a944:	f7fc ff02 	bl	800774c <_printf_i>
 800a948:	e7eb      	b.n	800a922 <_svfiprintf_r+0x1c2>
 800a94a:	bf00      	nop
 800a94c:	0800b9ac 	.word	0x0800b9ac
 800a950:	0800b9b2 	.word	0x0800b9b2
 800a954:	0800b9b6 	.word	0x0800b9b6
 800a958:	08007215 	.word	0x08007215
 800a95c:	0800a6a9 	.word	0x0800a6a9

0800a960 <__sfputc_r>:
 800a960:	6893      	ldr	r3, [r2, #8]
 800a962:	b410      	push	{r4}
 800a964:	3b01      	subs	r3, #1
 800a966:	2b00      	cmp	r3, #0
 800a968:	6093      	str	r3, [r2, #8]
 800a96a:	da07      	bge.n	800a97c <__sfputc_r+0x1c>
 800a96c:	6994      	ldr	r4, [r2, #24]
 800a96e:	42a3      	cmp	r3, r4
 800a970:	db01      	blt.n	800a976 <__sfputc_r+0x16>
 800a972:	290a      	cmp	r1, #10
 800a974:	d102      	bne.n	800a97c <__sfputc_r+0x1c>
 800a976:	bc10      	pop	{r4}
 800a978:	f000 b974 	b.w	800ac64 <__swbuf_r>
 800a97c:	6813      	ldr	r3, [r2, #0]
 800a97e:	1c58      	adds	r0, r3, #1
 800a980:	6010      	str	r0, [r2, #0]
 800a982:	7019      	strb	r1, [r3, #0]
 800a984:	4608      	mov	r0, r1
 800a986:	bc10      	pop	{r4}
 800a988:	4770      	bx	lr

0800a98a <__sfputs_r>:
 800a98a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a98c:	4606      	mov	r6, r0
 800a98e:	460f      	mov	r7, r1
 800a990:	4614      	mov	r4, r2
 800a992:	18d5      	adds	r5, r2, r3
 800a994:	42ac      	cmp	r4, r5
 800a996:	d101      	bne.n	800a99c <__sfputs_r+0x12>
 800a998:	2000      	movs	r0, #0
 800a99a:	e007      	b.n	800a9ac <__sfputs_r+0x22>
 800a99c:	463a      	mov	r2, r7
 800a99e:	4630      	mov	r0, r6
 800a9a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9a4:	f7ff ffdc 	bl	800a960 <__sfputc_r>
 800a9a8:	1c43      	adds	r3, r0, #1
 800a9aa:	d1f3      	bne.n	800a994 <__sfputs_r+0xa>
 800a9ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9b0 <_vfiprintf_r>:
 800a9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b4:	460d      	mov	r5, r1
 800a9b6:	4614      	mov	r4, r2
 800a9b8:	4698      	mov	r8, r3
 800a9ba:	4606      	mov	r6, r0
 800a9bc:	b09d      	sub	sp, #116	; 0x74
 800a9be:	b118      	cbz	r0, 800a9c8 <_vfiprintf_r+0x18>
 800a9c0:	6983      	ldr	r3, [r0, #24]
 800a9c2:	b90b      	cbnz	r3, 800a9c8 <_vfiprintf_r+0x18>
 800a9c4:	f000 fb3a 	bl	800b03c <__sinit>
 800a9c8:	4b89      	ldr	r3, [pc, #548]	; (800abf0 <_vfiprintf_r+0x240>)
 800a9ca:	429d      	cmp	r5, r3
 800a9cc:	d11b      	bne.n	800aa06 <_vfiprintf_r+0x56>
 800a9ce:	6875      	ldr	r5, [r6, #4]
 800a9d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9d2:	07d9      	lsls	r1, r3, #31
 800a9d4:	d405      	bmi.n	800a9e2 <_vfiprintf_r+0x32>
 800a9d6:	89ab      	ldrh	r3, [r5, #12]
 800a9d8:	059a      	lsls	r2, r3, #22
 800a9da:	d402      	bmi.n	800a9e2 <_vfiprintf_r+0x32>
 800a9dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9de:	f000 fbcb 	bl	800b178 <__retarget_lock_acquire_recursive>
 800a9e2:	89ab      	ldrh	r3, [r5, #12]
 800a9e4:	071b      	lsls	r3, r3, #28
 800a9e6:	d501      	bpl.n	800a9ec <_vfiprintf_r+0x3c>
 800a9e8:	692b      	ldr	r3, [r5, #16]
 800a9ea:	b9eb      	cbnz	r3, 800aa28 <_vfiprintf_r+0x78>
 800a9ec:	4629      	mov	r1, r5
 800a9ee:	4630      	mov	r0, r6
 800a9f0:	f000 f998 	bl	800ad24 <__swsetup_r>
 800a9f4:	b1c0      	cbz	r0, 800aa28 <_vfiprintf_r+0x78>
 800a9f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9f8:	07dc      	lsls	r4, r3, #31
 800a9fa:	d50e      	bpl.n	800aa1a <_vfiprintf_r+0x6a>
 800a9fc:	f04f 30ff 	mov.w	r0, #4294967295
 800aa00:	b01d      	add	sp, #116	; 0x74
 800aa02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa06:	4b7b      	ldr	r3, [pc, #492]	; (800abf4 <_vfiprintf_r+0x244>)
 800aa08:	429d      	cmp	r5, r3
 800aa0a:	d101      	bne.n	800aa10 <_vfiprintf_r+0x60>
 800aa0c:	68b5      	ldr	r5, [r6, #8]
 800aa0e:	e7df      	b.n	800a9d0 <_vfiprintf_r+0x20>
 800aa10:	4b79      	ldr	r3, [pc, #484]	; (800abf8 <_vfiprintf_r+0x248>)
 800aa12:	429d      	cmp	r5, r3
 800aa14:	bf08      	it	eq
 800aa16:	68f5      	ldreq	r5, [r6, #12]
 800aa18:	e7da      	b.n	800a9d0 <_vfiprintf_r+0x20>
 800aa1a:	89ab      	ldrh	r3, [r5, #12]
 800aa1c:	0598      	lsls	r0, r3, #22
 800aa1e:	d4ed      	bmi.n	800a9fc <_vfiprintf_r+0x4c>
 800aa20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa22:	f000 fbaa 	bl	800b17a <__retarget_lock_release_recursive>
 800aa26:	e7e9      	b.n	800a9fc <_vfiprintf_r+0x4c>
 800aa28:	2300      	movs	r3, #0
 800aa2a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa2c:	2320      	movs	r3, #32
 800aa2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa32:	2330      	movs	r3, #48	; 0x30
 800aa34:	f04f 0901 	mov.w	r9, #1
 800aa38:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa3c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800abfc <_vfiprintf_r+0x24c>
 800aa40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa44:	4623      	mov	r3, r4
 800aa46:	469a      	mov	sl, r3
 800aa48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa4c:	b10a      	cbz	r2, 800aa52 <_vfiprintf_r+0xa2>
 800aa4e:	2a25      	cmp	r2, #37	; 0x25
 800aa50:	d1f9      	bne.n	800aa46 <_vfiprintf_r+0x96>
 800aa52:	ebba 0b04 	subs.w	fp, sl, r4
 800aa56:	d00b      	beq.n	800aa70 <_vfiprintf_r+0xc0>
 800aa58:	465b      	mov	r3, fp
 800aa5a:	4622      	mov	r2, r4
 800aa5c:	4629      	mov	r1, r5
 800aa5e:	4630      	mov	r0, r6
 800aa60:	f7ff ff93 	bl	800a98a <__sfputs_r>
 800aa64:	3001      	adds	r0, #1
 800aa66:	f000 80aa 	beq.w	800abbe <_vfiprintf_r+0x20e>
 800aa6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa6c:	445a      	add	r2, fp
 800aa6e:	9209      	str	r2, [sp, #36]	; 0x24
 800aa70:	f89a 3000 	ldrb.w	r3, [sl]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	f000 80a2 	beq.w	800abbe <_vfiprintf_r+0x20e>
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa84:	f10a 0a01 	add.w	sl, sl, #1
 800aa88:	9304      	str	r3, [sp, #16]
 800aa8a:	9307      	str	r3, [sp, #28]
 800aa8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa90:	931a      	str	r3, [sp, #104]	; 0x68
 800aa92:	4654      	mov	r4, sl
 800aa94:	2205      	movs	r2, #5
 800aa96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa9a:	4858      	ldr	r0, [pc, #352]	; (800abfc <_vfiprintf_r+0x24c>)
 800aa9c:	f7ff f840 	bl	8009b20 <memchr>
 800aaa0:	9a04      	ldr	r2, [sp, #16]
 800aaa2:	b9d8      	cbnz	r0, 800aadc <_vfiprintf_r+0x12c>
 800aaa4:	06d1      	lsls	r1, r2, #27
 800aaa6:	bf44      	itt	mi
 800aaa8:	2320      	movmi	r3, #32
 800aaaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aaae:	0713      	lsls	r3, r2, #28
 800aab0:	bf44      	itt	mi
 800aab2:	232b      	movmi	r3, #43	; 0x2b
 800aab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aab8:	f89a 3000 	ldrb.w	r3, [sl]
 800aabc:	2b2a      	cmp	r3, #42	; 0x2a
 800aabe:	d015      	beq.n	800aaec <_vfiprintf_r+0x13c>
 800aac0:	4654      	mov	r4, sl
 800aac2:	2000      	movs	r0, #0
 800aac4:	f04f 0c0a 	mov.w	ip, #10
 800aac8:	9a07      	ldr	r2, [sp, #28]
 800aaca:	4621      	mov	r1, r4
 800aacc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aad0:	3b30      	subs	r3, #48	; 0x30
 800aad2:	2b09      	cmp	r3, #9
 800aad4:	d94e      	bls.n	800ab74 <_vfiprintf_r+0x1c4>
 800aad6:	b1b0      	cbz	r0, 800ab06 <_vfiprintf_r+0x156>
 800aad8:	9207      	str	r2, [sp, #28]
 800aada:	e014      	b.n	800ab06 <_vfiprintf_r+0x156>
 800aadc:	eba0 0308 	sub.w	r3, r0, r8
 800aae0:	fa09 f303 	lsl.w	r3, r9, r3
 800aae4:	4313      	orrs	r3, r2
 800aae6:	46a2      	mov	sl, r4
 800aae8:	9304      	str	r3, [sp, #16]
 800aaea:	e7d2      	b.n	800aa92 <_vfiprintf_r+0xe2>
 800aaec:	9b03      	ldr	r3, [sp, #12]
 800aaee:	1d19      	adds	r1, r3, #4
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	9103      	str	r1, [sp, #12]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	bfbb      	ittet	lt
 800aaf8:	425b      	neglt	r3, r3
 800aafa:	f042 0202 	orrlt.w	r2, r2, #2
 800aafe:	9307      	strge	r3, [sp, #28]
 800ab00:	9307      	strlt	r3, [sp, #28]
 800ab02:	bfb8      	it	lt
 800ab04:	9204      	strlt	r2, [sp, #16]
 800ab06:	7823      	ldrb	r3, [r4, #0]
 800ab08:	2b2e      	cmp	r3, #46	; 0x2e
 800ab0a:	d10c      	bne.n	800ab26 <_vfiprintf_r+0x176>
 800ab0c:	7863      	ldrb	r3, [r4, #1]
 800ab0e:	2b2a      	cmp	r3, #42	; 0x2a
 800ab10:	d135      	bne.n	800ab7e <_vfiprintf_r+0x1ce>
 800ab12:	9b03      	ldr	r3, [sp, #12]
 800ab14:	3402      	adds	r4, #2
 800ab16:	1d1a      	adds	r2, r3, #4
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	9203      	str	r2, [sp, #12]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	bfb8      	it	lt
 800ab20:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab24:	9305      	str	r3, [sp, #20]
 800ab26:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ac00 <_vfiprintf_r+0x250>
 800ab2a:	2203      	movs	r2, #3
 800ab2c:	4650      	mov	r0, sl
 800ab2e:	7821      	ldrb	r1, [r4, #0]
 800ab30:	f7fe fff6 	bl	8009b20 <memchr>
 800ab34:	b140      	cbz	r0, 800ab48 <_vfiprintf_r+0x198>
 800ab36:	2340      	movs	r3, #64	; 0x40
 800ab38:	eba0 000a 	sub.w	r0, r0, sl
 800ab3c:	fa03 f000 	lsl.w	r0, r3, r0
 800ab40:	9b04      	ldr	r3, [sp, #16]
 800ab42:	3401      	adds	r4, #1
 800ab44:	4303      	orrs	r3, r0
 800ab46:	9304      	str	r3, [sp, #16]
 800ab48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab4c:	2206      	movs	r2, #6
 800ab4e:	482d      	ldr	r0, [pc, #180]	; (800ac04 <_vfiprintf_r+0x254>)
 800ab50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab54:	f7fe ffe4 	bl	8009b20 <memchr>
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	d03f      	beq.n	800abdc <_vfiprintf_r+0x22c>
 800ab5c:	4b2a      	ldr	r3, [pc, #168]	; (800ac08 <_vfiprintf_r+0x258>)
 800ab5e:	bb1b      	cbnz	r3, 800aba8 <_vfiprintf_r+0x1f8>
 800ab60:	9b03      	ldr	r3, [sp, #12]
 800ab62:	3307      	adds	r3, #7
 800ab64:	f023 0307 	bic.w	r3, r3, #7
 800ab68:	3308      	adds	r3, #8
 800ab6a:	9303      	str	r3, [sp, #12]
 800ab6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab6e:	443b      	add	r3, r7
 800ab70:	9309      	str	r3, [sp, #36]	; 0x24
 800ab72:	e767      	b.n	800aa44 <_vfiprintf_r+0x94>
 800ab74:	460c      	mov	r4, r1
 800ab76:	2001      	movs	r0, #1
 800ab78:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab7c:	e7a5      	b.n	800aaca <_vfiprintf_r+0x11a>
 800ab7e:	2300      	movs	r3, #0
 800ab80:	f04f 0c0a 	mov.w	ip, #10
 800ab84:	4619      	mov	r1, r3
 800ab86:	3401      	adds	r4, #1
 800ab88:	9305      	str	r3, [sp, #20]
 800ab8a:	4620      	mov	r0, r4
 800ab8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab90:	3a30      	subs	r2, #48	; 0x30
 800ab92:	2a09      	cmp	r2, #9
 800ab94:	d903      	bls.n	800ab9e <_vfiprintf_r+0x1ee>
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d0c5      	beq.n	800ab26 <_vfiprintf_r+0x176>
 800ab9a:	9105      	str	r1, [sp, #20]
 800ab9c:	e7c3      	b.n	800ab26 <_vfiprintf_r+0x176>
 800ab9e:	4604      	mov	r4, r0
 800aba0:	2301      	movs	r3, #1
 800aba2:	fb0c 2101 	mla	r1, ip, r1, r2
 800aba6:	e7f0      	b.n	800ab8a <_vfiprintf_r+0x1da>
 800aba8:	ab03      	add	r3, sp, #12
 800abaa:	9300      	str	r3, [sp, #0]
 800abac:	462a      	mov	r2, r5
 800abae:	4630      	mov	r0, r6
 800abb0:	4b16      	ldr	r3, [pc, #88]	; (800ac0c <_vfiprintf_r+0x25c>)
 800abb2:	a904      	add	r1, sp, #16
 800abb4:	f7fc fb2e 	bl	8007214 <_printf_float>
 800abb8:	4607      	mov	r7, r0
 800abba:	1c78      	adds	r0, r7, #1
 800abbc:	d1d6      	bne.n	800ab6c <_vfiprintf_r+0x1bc>
 800abbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abc0:	07d9      	lsls	r1, r3, #31
 800abc2:	d405      	bmi.n	800abd0 <_vfiprintf_r+0x220>
 800abc4:	89ab      	ldrh	r3, [r5, #12]
 800abc6:	059a      	lsls	r2, r3, #22
 800abc8:	d402      	bmi.n	800abd0 <_vfiprintf_r+0x220>
 800abca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abcc:	f000 fad5 	bl	800b17a <__retarget_lock_release_recursive>
 800abd0:	89ab      	ldrh	r3, [r5, #12]
 800abd2:	065b      	lsls	r3, r3, #25
 800abd4:	f53f af12 	bmi.w	800a9fc <_vfiprintf_r+0x4c>
 800abd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abda:	e711      	b.n	800aa00 <_vfiprintf_r+0x50>
 800abdc:	ab03      	add	r3, sp, #12
 800abde:	9300      	str	r3, [sp, #0]
 800abe0:	462a      	mov	r2, r5
 800abe2:	4630      	mov	r0, r6
 800abe4:	4b09      	ldr	r3, [pc, #36]	; (800ac0c <_vfiprintf_r+0x25c>)
 800abe6:	a904      	add	r1, sp, #16
 800abe8:	f7fc fdb0 	bl	800774c <_printf_i>
 800abec:	e7e4      	b.n	800abb8 <_vfiprintf_r+0x208>
 800abee:	bf00      	nop
 800abf0:	0800bae0 	.word	0x0800bae0
 800abf4:	0800bb00 	.word	0x0800bb00
 800abf8:	0800bac0 	.word	0x0800bac0
 800abfc:	0800b9ac 	.word	0x0800b9ac
 800ac00:	0800b9b2 	.word	0x0800b9b2
 800ac04:	0800b9b6 	.word	0x0800b9b6
 800ac08:	08007215 	.word	0x08007215
 800ac0c:	0800a98b 	.word	0x0800a98b

0800ac10 <nan>:
 800ac10:	2000      	movs	r0, #0
 800ac12:	4901      	ldr	r1, [pc, #4]	; (800ac18 <nan+0x8>)
 800ac14:	4770      	bx	lr
 800ac16:	bf00      	nop
 800ac18:	7ff80000 	.word	0x7ff80000

0800ac1c <_sbrk_r>:
 800ac1c:	b538      	push	{r3, r4, r5, lr}
 800ac1e:	2300      	movs	r3, #0
 800ac20:	4d05      	ldr	r5, [pc, #20]	; (800ac38 <_sbrk_r+0x1c>)
 800ac22:	4604      	mov	r4, r0
 800ac24:	4608      	mov	r0, r1
 800ac26:	602b      	str	r3, [r5, #0]
 800ac28:	f7f8 f918 	bl	8002e5c <_sbrk>
 800ac2c:	1c43      	adds	r3, r0, #1
 800ac2e:	d102      	bne.n	800ac36 <_sbrk_r+0x1a>
 800ac30:	682b      	ldr	r3, [r5, #0]
 800ac32:	b103      	cbz	r3, 800ac36 <_sbrk_r+0x1a>
 800ac34:	6023      	str	r3, [r4, #0]
 800ac36:	bd38      	pop	{r3, r4, r5, pc}
 800ac38:	20000534 	.word	0x20000534

0800ac3c <strncmp>:
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	b510      	push	{r4, lr}
 800ac40:	b172      	cbz	r2, 800ac60 <strncmp+0x24>
 800ac42:	3901      	subs	r1, #1
 800ac44:	1884      	adds	r4, r0, r2
 800ac46:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ac4a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ac4e:	4290      	cmp	r0, r2
 800ac50:	d101      	bne.n	800ac56 <strncmp+0x1a>
 800ac52:	42a3      	cmp	r3, r4
 800ac54:	d101      	bne.n	800ac5a <strncmp+0x1e>
 800ac56:	1a80      	subs	r0, r0, r2
 800ac58:	bd10      	pop	{r4, pc}
 800ac5a:	2800      	cmp	r0, #0
 800ac5c:	d1f3      	bne.n	800ac46 <strncmp+0xa>
 800ac5e:	e7fa      	b.n	800ac56 <strncmp+0x1a>
 800ac60:	4610      	mov	r0, r2
 800ac62:	e7f9      	b.n	800ac58 <strncmp+0x1c>

0800ac64 <__swbuf_r>:
 800ac64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac66:	460e      	mov	r6, r1
 800ac68:	4614      	mov	r4, r2
 800ac6a:	4605      	mov	r5, r0
 800ac6c:	b118      	cbz	r0, 800ac76 <__swbuf_r+0x12>
 800ac6e:	6983      	ldr	r3, [r0, #24]
 800ac70:	b90b      	cbnz	r3, 800ac76 <__swbuf_r+0x12>
 800ac72:	f000 f9e3 	bl	800b03c <__sinit>
 800ac76:	4b21      	ldr	r3, [pc, #132]	; (800acfc <__swbuf_r+0x98>)
 800ac78:	429c      	cmp	r4, r3
 800ac7a:	d12b      	bne.n	800acd4 <__swbuf_r+0x70>
 800ac7c:	686c      	ldr	r4, [r5, #4]
 800ac7e:	69a3      	ldr	r3, [r4, #24]
 800ac80:	60a3      	str	r3, [r4, #8]
 800ac82:	89a3      	ldrh	r3, [r4, #12]
 800ac84:	071a      	lsls	r2, r3, #28
 800ac86:	d52f      	bpl.n	800ace8 <__swbuf_r+0x84>
 800ac88:	6923      	ldr	r3, [r4, #16]
 800ac8a:	b36b      	cbz	r3, 800ace8 <__swbuf_r+0x84>
 800ac8c:	6923      	ldr	r3, [r4, #16]
 800ac8e:	6820      	ldr	r0, [r4, #0]
 800ac90:	b2f6      	uxtb	r6, r6
 800ac92:	1ac0      	subs	r0, r0, r3
 800ac94:	6963      	ldr	r3, [r4, #20]
 800ac96:	4637      	mov	r7, r6
 800ac98:	4283      	cmp	r3, r0
 800ac9a:	dc04      	bgt.n	800aca6 <__swbuf_r+0x42>
 800ac9c:	4621      	mov	r1, r4
 800ac9e:	4628      	mov	r0, r5
 800aca0:	f000 f938 	bl	800af14 <_fflush_r>
 800aca4:	bb30      	cbnz	r0, 800acf4 <__swbuf_r+0x90>
 800aca6:	68a3      	ldr	r3, [r4, #8]
 800aca8:	3001      	adds	r0, #1
 800acaa:	3b01      	subs	r3, #1
 800acac:	60a3      	str	r3, [r4, #8]
 800acae:	6823      	ldr	r3, [r4, #0]
 800acb0:	1c5a      	adds	r2, r3, #1
 800acb2:	6022      	str	r2, [r4, #0]
 800acb4:	701e      	strb	r6, [r3, #0]
 800acb6:	6963      	ldr	r3, [r4, #20]
 800acb8:	4283      	cmp	r3, r0
 800acba:	d004      	beq.n	800acc6 <__swbuf_r+0x62>
 800acbc:	89a3      	ldrh	r3, [r4, #12]
 800acbe:	07db      	lsls	r3, r3, #31
 800acc0:	d506      	bpl.n	800acd0 <__swbuf_r+0x6c>
 800acc2:	2e0a      	cmp	r6, #10
 800acc4:	d104      	bne.n	800acd0 <__swbuf_r+0x6c>
 800acc6:	4621      	mov	r1, r4
 800acc8:	4628      	mov	r0, r5
 800acca:	f000 f923 	bl	800af14 <_fflush_r>
 800acce:	b988      	cbnz	r0, 800acf4 <__swbuf_r+0x90>
 800acd0:	4638      	mov	r0, r7
 800acd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acd4:	4b0a      	ldr	r3, [pc, #40]	; (800ad00 <__swbuf_r+0x9c>)
 800acd6:	429c      	cmp	r4, r3
 800acd8:	d101      	bne.n	800acde <__swbuf_r+0x7a>
 800acda:	68ac      	ldr	r4, [r5, #8]
 800acdc:	e7cf      	b.n	800ac7e <__swbuf_r+0x1a>
 800acde:	4b09      	ldr	r3, [pc, #36]	; (800ad04 <__swbuf_r+0xa0>)
 800ace0:	429c      	cmp	r4, r3
 800ace2:	bf08      	it	eq
 800ace4:	68ec      	ldreq	r4, [r5, #12]
 800ace6:	e7ca      	b.n	800ac7e <__swbuf_r+0x1a>
 800ace8:	4621      	mov	r1, r4
 800acea:	4628      	mov	r0, r5
 800acec:	f000 f81a 	bl	800ad24 <__swsetup_r>
 800acf0:	2800      	cmp	r0, #0
 800acf2:	d0cb      	beq.n	800ac8c <__swbuf_r+0x28>
 800acf4:	f04f 37ff 	mov.w	r7, #4294967295
 800acf8:	e7ea      	b.n	800acd0 <__swbuf_r+0x6c>
 800acfa:	bf00      	nop
 800acfc:	0800bae0 	.word	0x0800bae0
 800ad00:	0800bb00 	.word	0x0800bb00
 800ad04:	0800bac0 	.word	0x0800bac0

0800ad08 <__ascii_wctomb>:
 800ad08:	4603      	mov	r3, r0
 800ad0a:	4608      	mov	r0, r1
 800ad0c:	b141      	cbz	r1, 800ad20 <__ascii_wctomb+0x18>
 800ad0e:	2aff      	cmp	r2, #255	; 0xff
 800ad10:	d904      	bls.n	800ad1c <__ascii_wctomb+0x14>
 800ad12:	228a      	movs	r2, #138	; 0x8a
 800ad14:	f04f 30ff 	mov.w	r0, #4294967295
 800ad18:	601a      	str	r2, [r3, #0]
 800ad1a:	4770      	bx	lr
 800ad1c:	2001      	movs	r0, #1
 800ad1e:	700a      	strb	r2, [r1, #0]
 800ad20:	4770      	bx	lr
	...

0800ad24 <__swsetup_r>:
 800ad24:	4b32      	ldr	r3, [pc, #200]	; (800adf0 <__swsetup_r+0xcc>)
 800ad26:	b570      	push	{r4, r5, r6, lr}
 800ad28:	681d      	ldr	r5, [r3, #0]
 800ad2a:	4606      	mov	r6, r0
 800ad2c:	460c      	mov	r4, r1
 800ad2e:	b125      	cbz	r5, 800ad3a <__swsetup_r+0x16>
 800ad30:	69ab      	ldr	r3, [r5, #24]
 800ad32:	b913      	cbnz	r3, 800ad3a <__swsetup_r+0x16>
 800ad34:	4628      	mov	r0, r5
 800ad36:	f000 f981 	bl	800b03c <__sinit>
 800ad3a:	4b2e      	ldr	r3, [pc, #184]	; (800adf4 <__swsetup_r+0xd0>)
 800ad3c:	429c      	cmp	r4, r3
 800ad3e:	d10f      	bne.n	800ad60 <__swsetup_r+0x3c>
 800ad40:	686c      	ldr	r4, [r5, #4]
 800ad42:	89a3      	ldrh	r3, [r4, #12]
 800ad44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad48:	0719      	lsls	r1, r3, #28
 800ad4a:	d42c      	bmi.n	800ada6 <__swsetup_r+0x82>
 800ad4c:	06dd      	lsls	r5, r3, #27
 800ad4e:	d411      	bmi.n	800ad74 <__swsetup_r+0x50>
 800ad50:	2309      	movs	r3, #9
 800ad52:	6033      	str	r3, [r6, #0]
 800ad54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ad58:	f04f 30ff 	mov.w	r0, #4294967295
 800ad5c:	81a3      	strh	r3, [r4, #12]
 800ad5e:	e03e      	b.n	800adde <__swsetup_r+0xba>
 800ad60:	4b25      	ldr	r3, [pc, #148]	; (800adf8 <__swsetup_r+0xd4>)
 800ad62:	429c      	cmp	r4, r3
 800ad64:	d101      	bne.n	800ad6a <__swsetup_r+0x46>
 800ad66:	68ac      	ldr	r4, [r5, #8]
 800ad68:	e7eb      	b.n	800ad42 <__swsetup_r+0x1e>
 800ad6a:	4b24      	ldr	r3, [pc, #144]	; (800adfc <__swsetup_r+0xd8>)
 800ad6c:	429c      	cmp	r4, r3
 800ad6e:	bf08      	it	eq
 800ad70:	68ec      	ldreq	r4, [r5, #12]
 800ad72:	e7e6      	b.n	800ad42 <__swsetup_r+0x1e>
 800ad74:	0758      	lsls	r0, r3, #29
 800ad76:	d512      	bpl.n	800ad9e <__swsetup_r+0x7a>
 800ad78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad7a:	b141      	cbz	r1, 800ad8e <__swsetup_r+0x6a>
 800ad7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad80:	4299      	cmp	r1, r3
 800ad82:	d002      	beq.n	800ad8a <__swsetup_r+0x66>
 800ad84:	4630      	mov	r0, r6
 800ad86:	f7ff fbb3 	bl	800a4f0 <_free_r>
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	6363      	str	r3, [r4, #52]	; 0x34
 800ad8e:	89a3      	ldrh	r3, [r4, #12]
 800ad90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ad94:	81a3      	strh	r3, [r4, #12]
 800ad96:	2300      	movs	r3, #0
 800ad98:	6063      	str	r3, [r4, #4]
 800ad9a:	6923      	ldr	r3, [r4, #16]
 800ad9c:	6023      	str	r3, [r4, #0]
 800ad9e:	89a3      	ldrh	r3, [r4, #12]
 800ada0:	f043 0308 	orr.w	r3, r3, #8
 800ada4:	81a3      	strh	r3, [r4, #12]
 800ada6:	6923      	ldr	r3, [r4, #16]
 800ada8:	b94b      	cbnz	r3, 800adbe <__swsetup_r+0x9a>
 800adaa:	89a3      	ldrh	r3, [r4, #12]
 800adac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800adb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800adb4:	d003      	beq.n	800adbe <__swsetup_r+0x9a>
 800adb6:	4621      	mov	r1, r4
 800adb8:	4630      	mov	r0, r6
 800adba:	f000 fa05 	bl	800b1c8 <__smakebuf_r>
 800adbe:	89a0      	ldrh	r0, [r4, #12]
 800adc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800adc4:	f010 0301 	ands.w	r3, r0, #1
 800adc8:	d00a      	beq.n	800ade0 <__swsetup_r+0xbc>
 800adca:	2300      	movs	r3, #0
 800adcc:	60a3      	str	r3, [r4, #8]
 800adce:	6963      	ldr	r3, [r4, #20]
 800add0:	425b      	negs	r3, r3
 800add2:	61a3      	str	r3, [r4, #24]
 800add4:	6923      	ldr	r3, [r4, #16]
 800add6:	b943      	cbnz	r3, 800adea <__swsetup_r+0xc6>
 800add8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800addc:	d1ba      	bne.n	800ad54 <__swsetup_r+0x30>
 800adde:	bd70      	pop	{r4, r5, r6, pc}
 800ade0:	0781      	lsls	r1, r0, #30
 800ade2:	bf58      	it	pl
 800ade4:	6963      	ldrpl	r3, [r4, #20]
 800ade6:	60a3      	str	r3, [r4, #8]
 800ade8:	e7f4      	b.n	800add4 <__swsetup_r+0xb0>
 800adea:	2000      	movs	r0, #0
 800adec:	e7f7      	b.n	800adde <__swsetup_r+0xba>
 800adee:	bf00      	nop
 800adf0:	20000010 	.word	0x20000010
 800adf4:	0800bae0 	.word	0x0800bae0
 800adf8:	0800bb00 	.word	0x0800bb00
 800adfc:	0800bac0 	.word	0x0800bac0

0800ae00 <abort>:
 800ae00:	2006      	movs	r0, #6
 800ae02:	b508      	push	{r3, lr}
 800ae04:	f000 fa9e 	bl	800b344 <raise>
 800ae08:	2001      	movs	r0, #1
 800ae0a:	f7f7 ffb4 	bl	8002d76 <_exit>
	...

0800ae10 <__sflush_r>:
 800ae10:	898a      	ldrh	r2, [r1, #12]
 800ae12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae14:	4605      	mov	r5, r0
 800ae16:	0710      	lsls	r0, r2, #28
 800ae18:	460c      	mov	r4, r1
 800ae1a:	d457      	bmi.n	800aecc <__sflush_r+0xbc>
 800ae1c:	684b      	ldr	r3, [r1, #4]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	dc04      	bgt.n	800ae2c <__sflush_r+0x1c>
 800ae22:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	dc01      	bgt.n	800ae2c <__sflush_r+0x1c>
 800ae28:	2000      	movs	r0, #0
 800ae2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae2e:	2e00      	cmp	r6, #0
 800ae30:	d0fa      	beq.n	800ae28 <__sflush_r+0x18>
 800ae32:	2300      	movs	r3, #0
 800ae34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae38:	682f      	ldr	r7, [r5, #0]
 800ae3a:	602b      	str	r3, [r5, #0]
 800ae3c:	d032      	beq.n	800aea4 <__sflush_r+0x94>
 800ae3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae40:	89a3      	ldrh	r3, [r4, #12]
 800ae42:	075a      	lsls	r2, r3, #29
 800ae44:	d505      	bpl.n	800ae52 <__sflush_r+0x42>
 800ae46:	6863      	ldr	r3, [r4, #4]
 800ae48:	1ac0      	subs	r0, r0, r3
 800ae4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae4c:	b10b      	cbz	r3, 800ae52 <__sflush_r+0x42>
 800ae4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae50:	1ac0      	subs	r0, r0, r3
 800ae52:	2300      	movs	r3, #0
 800ae54:	4602      	mov	r2, r0
 800ae56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae58:	4628      	mov	r0, r5
 800ae5a:	6a21      	ldr	r1, [r4, #32]
 800ae5c:	47b0      	blx	r6
 800ae5e:	1c43      	adds	r3, r0, #1
 800ae60:	89a3      	ldrh	r3, [r4, #12]
 800ae62:	d106      	bne.n	800ae72 <__sflush_r+0x62>
 800ae64:	6829      	ldr	r1, [r5, #0]
 800ae66:	291d      	cmp	r1, #29
 800ae68:	d82c      	bhi.n	800aec4 <__sflush_r+0xb4>
 800ae6a:	4a29      	ldr	r2, [pc, #164]	; (800af10 <__sflush_r+0x100>)
 800ae6c:	40ca      	lsrs	r2, r1
 800ae6e:	07d6      	lsls	r6, r2, #31
 800ae70:	d528      	bpl.n	800aec4 <__sflush_r+0xb4>
 800ae72:	2200      	movs	r2, #0
 800ae74:	6062      	str	r2, [r4, #4]
 800ae76:	6922      	ldr	r2, [r4, #16]
 800ae78:	04d9      	lsls	r1, r3, #19
 800ae7a:	6022      	str	r2, [r4, #0]
 800ae7c:	d504      	bpl.n	800ae88 <__sflush_r+0x78>
 800ae7e:	1c42      	adds	r2, r0, #1
 800ae80:	d101      	bne.n	800ae86 <__sflush_r+0x76>
 800ae82:	682b      	ldr	r3, [r5, #0]
 800ae84:	b903      	cbnz	r3, 800ae88 <__sflush_r+0x78>
 800ae86:	6560      	str	r0, [r4, #84]	; 0x54
 800ae88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae8a:	602f      	str	r7, [r5, #0]
 800ae8c:	2900      	cmp	r1, #0
 800ae8e:	d0cb      	beq.n	800ae28 <__sflush_r+0x18>
 800ae90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae94:	4299      	cmp	r1, r3
 800ae96:	d002      	beq.n	800ae9e <__sflush_r+0x8e>
 800ae98:	4628      	mov	r0, r5
 800ae9a:	f7ff fb29 	bl	800a4f0 <_free_r>
 800ae9e:	2000      	movs	r0, #0
 800aea0:	6360      	str	r0, [r4, #52]	; 0x34
 800aea2:	e7c2      	b.n	800ae2a <__sflush_r+0x1a>
 800aea4:	6a21      	ldr	r1, [r4, #32]
 800aea6:	2301      	movs	r3, #1
 800aea8:	4628      	mov	r0, r5
 800aeaa:	47b0      	blx	r6
 800aeac:	1c41      	adds	r1, r0, #1
 800aeae:	d1c7      	bne.n	800ae40 <__sflush_r+0x30>
 800aeb0:	682b      	ldr	r3, [r5, #0]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d0c4      	beq.n	800ae40 <__sflush_r+0x30>
 800aeb6:	2b1d      	cmp	r3, #29
 800aeb8:	d001      	beq.n	800aebe <__sflush_r+0xae>
 800aeba:	2b16      	cmp	r3, #22
 800aebc:	d101      	bne.n	800aec2 <__sflush_r+0xb2>
 800aebe:	602f      	str	r7, [r5, #0]
 800aec0:	e7b2      	b.n	800ae28 <__sflush_r+0x18>
 800aec2:	89a3      	ldrh	r3, [r4, #12]
 800aec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aec8:	81a3      	strh	r3, [r4, #12]
 800aeca:	e7ae      	b.n	800ae2a <__sflush_r+0x1a>
 800aecc:	690f      	ldr	r7, [r1, #16]
 800aece:	2f00      	cmp	r7, #0
 800aed0:	d0aa      	beq.n	800ae28 <__sflush_r+0x18>
 800aed2:	0793      	lsls	r3, r2, #30
 800aed4:	bf18      	it	ne
 800aed6:	2300      	movne	r3, #0
 800aed8:	680e      	ldr	r6, [r1, #0]
 800aeda:	bf08      	it	eq
 800aedc:	694b      	ldreq	r3, [r1, #20]
 800aede:	1bf6      	subs	r6, r6, r7
 800aee0:	600f      	str	r7, [r1, #0]
 800aee2:	608b      	str	r3, [r1, #8]
 800aee4:	2e00      	cmp	r6, #0
 800aee6:	dd9f      	ble.n	800ae28 <__sflush_r+0x18>
 800aee8:	4633      	mov	r3, r6
 800aeea:	463a      	mov	r2, r7
 800aeec:	4628      	mov	r0, r5
 800aeee:	6a21      	ldr	r1, [r4, #32]
 800aef0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800aef4:	47e0      	blx	ip
 800aef6:	2800      	cmp	r0, #0
 800aef8:	dc06      	bgt.n	800af08 <__sflush_r+0xf8>
 800aefa:	89a3      	ldrh	r3, [r4, #12]
 800aefc:	f04f 30ff 	mov.w	r0, #4294967295
 800af00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af04:	81a3      	strh	r3, [r4, #12]
 800af06:	e790      	b.n	800ae2a <__sflush_r+0x1a>
 800af08:	4407      	add	r7, r0
 800af0a:	1a36      	subs	r6, r6, r0
 800af0c:	e7ea      	b.n	800aee4 <__sflush_r+0xd4>
 800af0e:	bf00      	nop
 800af10:	20400001 	.word	0x20400001

0800af14 <_fflush_r>:
 800af14:	b538      	push	{r3, r4, r5, lr}
 800af16:	690b      	ldr	r3, [r1, #16]
 800af18:	4605      	mov	r5, r0
 800af1a:	460c      	mov	r4, r1
 800af1c:	b913      	cbnz	r3, 800af24 <_fflush_r+0x10>
 800af1e:	2500      	movs	r5, #0
 800af20:	4628      	mov	r0, r5
 800af22:	bd38      	pop	{r3, r4, r5, pc}
 800af24:	b118      	cbz	r0, 800af2e <_fflush_r+0x1a>
 800af26:	6983      	ldr	r3, [r0, #24]
 800af28:	b90b      	cbnz	r3, 800af2e <_fflush_r+0x1a>
 800af2a:	f000 f887 	bl	800b03c <__sinit>
 800af2e:	4b14      	ldr	r3, [pc, #80]	; (800af80 <_fflush_r+0x6c>)
 800af30:	429c      	cmp	r4, r3
 800af32:	d11b      	bne.n	800af6c <_fflush_r+0x58>
 800af34:	686c      	ldr	r4, [r5, #4]
 800af36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d0ef      	beq.n	800af1e <_fflush_r+0xa>
 800af3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af40:	07d0      	lsls	r0, r2, #31
 800af42:	d404      	bmi.n	800af4e <_fflush_r+0x3a>
 800af44:	0599      	lsls	r1, r3, #22
 800af46:	d402      	bmi.n	800af4e <_fflush_r+0x3a>
 800af48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af4a:	f000 f915 	bl	800b178 <__retarget_lock_acquire_recursive>
 800af4e:	4628      	mov	r0, r5
 800af50:	4621      	mov	r1, r4
 800af52:	f7ff ff5d 	bl	800ae10 <__sflush_r>
 800af56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af58:	4605      	mov	r5, r0
 800af5a:	07da      	lsls	r2, r3, #31
 800af5c:	d4e0      	bmi.n	800af20 <_fflush_r+0xc>
 800af5e:	89a3      	ldrh	r3, [r4, #12]
 800af60:	059b      	lsls	r3, r3, #22
 800af62:	d4dd      	bmi.n	800af20 <_fflush_r+0xc>
 800af64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af66:	f000 f908 	bl	800b17a <__retarget_lock_release_recursive>
 800af6a:	e7d9      	b.n	800af20 <_fflush_r+0xc>
 800af6c:	4b05      	ldr	r3, [pc, #20]	; (800af84 <_fflush_r+0x70>)
 800af6e:	429c      	cmp	r4, r3
 800af70:	d101      	bne.n	800af76 <_fflush_r+0x62>
 800af72:	68ac      	ldr	r4, [r5, #8]
 800af74:	e7df      	b.n	800af36 <_fflush_r+0x22>
 800af76:	4b04      	ldr	r3, [pc, #16]	; (800af88 <_fflush_r+0x74>)
 800af78:	429c      	cmp	r4, r3
 800af7a:	bf08      	it	eq
 800af7c:	68ec      	ldreq	r4, [r5, #12]
 800af7e:	e7da      	b.n	800af36 <_fflush_r+0x22>
 800af80:	0800bae0 	.word	0x0800bae0
 800af84:	0800bb00 	.word	0x0800bb00
 800af88:	0800bac0 	.word	0x0800bac0

0800af8c <std>:
 800af8c:	2300      	movs	r3, #0
 800af8e:	b510      	push	{r4, lr}
 800af90:	4604      	mov	r4, r0
 800af92:	e9c0 3300 	strd	r3, r3, [r0]
 800af96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af9a:	6083      	str	r3, [r0, #8]
 800af9c:	8181      	strh	r1, [r0, #12]
 800af9e:	6643      	str	r3, [r0, #100]	; 0x64
 800afa0:	81c2      	strh	r2, [r0, #14]
 800afa2:	6183      	str	r3, [r0, #24]
 800afa4:	4619      	mov	r1, r3
 800afa6:	2208      	movs	r2, #8
 800afa8:	305c      	adds	r0, #92	; 0x5c
 800afaa:	f7fc f88d 	bl	80070c8 <memset>
 800afae:	4b05      	ldr	r3, [pc, #20]	; (800afc4 <std+0x38>)
 800afb0:	6224      	str	r4, [r4, #32]
 800afb2:	6263      	str	r3, [r4, #36]	; 0x24
 800afb4:	4b04      	ldr	r3, [pc, #16]	; (800afc8 <std+0x3c>)
 800afb6:	62a3      	str	r3, [r4, #40]	; 0x28
 800afb8:	4b04      	ldr	r3, [pc, #16]	; (800afcc <std+0x40>)
 800afba:	62e3      	str	r3, [r4, #44]	; 0x2c
 800afbc:	4b04      	ldr	r3, [pc, #16]	; (800afd0 <std+0x44>)
 800afbe:	6323      	str	r3, [r4, #48]	; 0x30
 800afc0:	bd10      	pop	{r4, pc}
 800afc2:	bf00      	nop
 800afc4:	0800b37d 	.word	0x0800b37d
 800afc8:	0800b39f 	.word	0x0800b39f
 800afcc:	0800b3d7 	.word	0x0800b3d7
 800afd0:	0800b3fb 	.word	0x0800b3fb

0800afd4 <_cleanup_r>:
 800afd4:	4901      	ldr	r1, [pc, #4]	; (800afdc <_cleanup_r+0x8>)
 800afd6:	f000 b8af 	b.w	800b138 <_fwalk_reent>
 800afda:	bf00      	nop
 800afdc:	0800af15 	.word	0x0800af15

0800afe0 <__sfmoreglue>:
 800afe0:	2268      	movs	r2, #104	; 0x68
 800afe2:	b570      	push	{r4, r5, r6, lr}
 800afe4:	1e4d      	subs	r5, r1, #1
 800afe6:	4355      	muls	r5, r2
 800afe8:	460e      	mov	r6, r1
 800afea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800afee:	f7ff fae7 	bl	800a5c0 <_malloc_r>
 800aff2:	4604      	mov	r4, r0
 800aff4:	b140      	cbz	r0, 800b008 <__sfmoreglue+0x28>
 800aff6:	2100      	movs	r1, #0
 800aff8:	e9c0 1600 	strd	r1, r6, [r0]
 800affc:	300c      	adds	r0, #12
 800affe:	60a0      	str	r0, [r4, #8]
 800b000:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b004:	f7fc f860 	bl	80070c8 <memset>
 800b008:	4620      	mov	r0, r4
 800b00a:	bd70      	pop	{r4, r5, r6, pc}

0800b00c <__sfp_lock_acquire>:
 800b00c:	4801      	ldr	r0, [pc, #4]	; (800b014 <__sfp_lock_acquire+0x8>)
 800b00e:	f000 b8b3 	b.w	800b178 <__retarget_lock_acquire_recursive>
 800b012:	bf00      	nop
 800b014:	20000531 	.word	0x20000531

0800b018 <__sfp_lock_release>:
 800b018:	4801      	ldr	r0, [pc, #4]	; (800b020 <__sfp_lock_release+0x8>)
 800b01a:	f000 b8ae 	b.w	800b17a <__retarget_lock_release_recursive>
 800b01e:	bf00      	nop
 800b020:	20000531 	.word	0x20000531

0800b024 <__sinit_lock_acquire>:
 800b024:	4801      	ldr	r0, [pc, #4]	; (800b02c <__sinit_lock_acquire+0x8>)
 800b026:	f000 b8a7 	b.w	800b178 <__retarget_lock_acquire_recursive>
 800b02a:	bf00      	nop
 800b02c:	20000532 	.word	0x20000532

0800b030 <__sinit_lock_release>:
 800b030:	4801      	ldr	r0, [pc, #4]	; (800b038 <__sinit_lock_release+0x8>)
 800b032:	f000 b8a2 	b.w	800b17a <__retarget_lock_release_recursive>
 800b036:	bf00      	nop
 800b038:	20000532 	.word	0x20000532

0800b03c <__sinit>:
 800b03c:	b510      	push	{r4, lr}
 800b03e:	4604      	mov	r4, r0
 800b040:	f7ff fff0 	bl	800b024 <__sinit_lock_acquire>
 800b044:	69a3      	ldr	r3, [r4, #24]
 800b046:	b11b      	cbz	r3, 800b050 <__sinit+0x14>
 800b048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b04c:	f7ff bff0 	b.w	800b030 <__sinit_lock_release>
 800b050:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b054:	6523      	str	r3, [r4, #80]	; 0x50
 800b056:	4b13      	ldr	r3, [pc, #76]	; (800b0a4 <__sinit+0x68>)
 800b058:	4a13      	ldr	r2, [pc, #76]	; (800b0a8 <__sinit+0x6c>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b05e:	42a3      	cmp	r3, r4
 800b060:	bf08      	it	eq
 800b062:	2301      	moveq	r3, #1
 800b064:	4620      	mov	r0, r4
 800b066:	bf08      	it	eq
 800b068:	61a3      	streq	r3, [r4, #24]
 800b06a:	f000 f81f 	bl	800b0ac <__sfp>
 800b06e:	6060      	str	r0, [r4, #4]
 800b070:	4620      	mov	r0, r4
 800b072:	f000 f81b 	bl	800b0ac <__sfp>
 800b076:	60a0      	str	r0, [r4, #8]
 800b078:	4620      	mov	r0, r4
 800b07a:	f000 f817 	bl	800b0ac <__sfp>
 800b07e:	2200      	movs	r2, #0
 800b080:	2104      	movs	r1, #4
 800b082:	60e0      	str	r0, [r4, #12]
 800b084:	6860      	ldr	r0, [r4, #4]
 800b086:	f7ff ff81 	bl	800af8c <std>
 800b08a:	2201      	movs	r2, #1
 800b08c:	2109      	movs	r1, #9
 800b08e:	68a0      	ldr	r0, [r4, #8]
 800b090:	f7ff ff7c 	bl	800af8c <std>
 800b094:	2202      	movs	r2, #2
 800b096:	2112      	movs	r1, #18
 800b098:	68e0      	ldr	r0, [r4, #12]
 800b09a:	f7ff ff77 	bl	800af8c <std>
 800b09e:	2301      	movs	r3, #1
 800b0a0:	61a3      	str	r3, [r4, #24]
 800b0a2:	e7d1      	b.n	800b048 <__sinit+0xc>
 800b0a4:	0800b624 	.word	0x0800b624
 800b0a8:	0800afd5 	.word	0x0800afd5

0800b0ac <__sfp>:
 800b0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ae:	4607      	mov	r7, r0
 800b0b0:	f7ff ffac 	bl	800b00c <__sfp_lock_acquire>
 800b0b4:	4b1e      	ldr	r3, [pc, #120]	; (800b130 <__sfp+0x84>)
 800b0b6:	681e      	ldr	r6, [r3, #0]
 800b0b8:	69b3      	ldr	r3, [r6, #24]
 800b0ba:	b913      	cbnz	r3, 800b0c2 <__sfp+0x16>
 800b0bc:	4630      	mov	r0, r6
 800b0be:	f7ff ffbd 	bl	800b03c <__sinit>
 800b0c2:	3648      	adds	r6, #72	; 0x48
 800b0c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b0c8:	3b01      	subs	r3, #1
 800b0ca:	d503      	bpl.n	800b0d4 <__sfp+0x28>
 800b0cc:	6833      	ldr	r3, [r6, #0]
 800b0ce:	b30b      	cbz	r3, 800b114 <__sfp+0x68>
 800b0d0:	6836      	ldr	r6, [r6, #0]
 800b0d2:	e7f7      	b.n	800b0c4 <__sfp+0x18>
 800b0d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b0d8:	b9d5      	cbnz	r5, 800b110 <__sfp+0x64>
 800b0da:	4b16      	ldr	r3, [pc, #88]	; (800b134 <__sfp+0x88>)
 800b0dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b0e0:	60e3      	str	r3, [r4, #12]
 800b0e2:	6665      	str	r5, [r4, #100]	; 0x64
 800b0e4:	f000 f847 	bl	800b176 <__retarget_lock_init_recursive>
 800b0e8:	f7ff ff96 	bl	800b018 <__sfp_lock_release>
 800b0ec:	2208      	movs	r2, #8
 800b0ee:	4629      	mov	r1, r5
 800b0f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b0f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b0f8:	6025      	str	r5, [r4, #0]
 800b0fa:	61a5      	str	r5, [r4, #24]
 800b0fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b100:	f7fb ffe2 	bl	80070c8 <memset>
 800b104:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b108:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b10c:	4620      	mov	r0, r4
 800b10e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b110:	3468      	adds	r4, #104	; 0x68
 800b112:	e7d9      	b.n	800b0c8 <__sfp+0x1c>
 800b114:	2104      	movs	r1, #4
 800b116:	4638      	mov	r0, r7
 800b118:	f7ff ff62 	bl	800afe0 <__sfmoreglue>
 800b11c:	4604      	mov	r4, r0
 800b11e:	6030      	str	r0, [r6, #0]
 800b120:	2800      	cmp	r0, #0
 800b122:	d1d5      	bne.n	800b0d0 <__sfp+0x24>
 800b124:	f7ff ff78 	bl	800b018 <__sfp_lock_release>
 800b128:	230c      	movs	r3, #12
 800b12a:	603b      	str	r3, [r7, #0]
 800b12c:	e7ee      	b.n	800b10c <__sfp+0x60>
 800b12e:	bf00      	nop
 800b130:	0800b624 	.word	0x0800b624
 800b134:	ffff0001 	.word	0xffff0001

0800b138 <_fwalk_reent>:
 800b138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b13c:	4606      	mov	r6, r0
 800b13e:	4688      	mov	r8, r1
 800b140:	2700      	movs	r7, #0
 800b142:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b146:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b14a:	f1b9 0901 	subs.w	r9, r9, #1
 800b14e:	d505      	bpl.n	800b15c <_fwalk_reent+0x24>
 800b150:	6824      	ldr	r4, [r4, #0]
 800b152:	2c00      	cmp	r4, #0
 800b154:	d1f7      	bne.n	800b146 <_fwalk_reent+0xe>
 800b156:	4638      	mov	r0, r7
 800b158:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b15c:	89ab      	ldrh	r3, [r5, #12]
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d907      	bls.n	800b172 <_fwalk_reent+0x3a>
 800b162:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b166:	3301      	adds	r3, #1
 800b168:	d003      	beq.n	800b172 <_fwalk_reent+0x3a>
 800b16a:	4629      	mov	r1, r5
 800b16c:	4630      	mov	r0, r6
 800b16e:	47c0      	blx	r8
 800b170:	4307      	orrs	r7, r0
 800b172:	3568      	adds	r5, #104	; 0x68
 800b174:	e7e9      	b.n	800b14a <_fwalk_reent+0x12>

0800b176 <__retarget_lock_init_recursive>:
 800b176:	4770      	bx	lr

0800b178 <__retarget_lock_acquire_recursive>:
 800b178:	4770      	bx	lr

0800b17a <__retarget_lock_release_recursive>:
 800b17a:	4770      	bx	lr

0800b17c <__swhatbuf_r>:
 800b17c:	b570      	push	{r4, r5, r6, lr}
 800b17e:	460e      	mov	r6, r1
 800b180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b184:	4614      	mov	r4, r2
 800b186:	2900      	cmp	r1, #0
 800b188:	461d      	mov	r5, r3
 800b18a:	b096      	sub	sp, #88	; 0x58
 800b18c:	da08      	bge.n	800b1a0 <__swhatbuf_r+0x24>
 800b18e:	2200      	movs	r2, #0
 800b190:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b194:	602a      	str	r2, [r5, #0]
 800b196:	061a      	lsls	r2, r3, #24
 800b198:	d410      	bmi.n	800b1bc <__swhatbuf_r+0x40>
 800b19a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b19e:	e00e      	b.n	800b1be <__swhatbuf_r+0x42>
 800b1a0:	466a      	mov	r2, sp
 800b1a2:	f000 f951 	bl	800b448 <_fstat_r>
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	dbf1      	blt.n	800b18e <__swhatbuf_r+0x12>
 800b1aa:	9a01      	ldr	r2, [sp, #4]
 800b1ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b1b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b1b4:	425a      	negs	r2, r3
 800b1b6:	415a      	adcs	r2, r3
 800b1b8:	602a      	str	r2, [r5, #0]
 800b1ba:	e7ee      	b.n	800b19a <__swhatbuf_r+0x1e>
 800b1bc:	2340      	movs	r3, #64	; 0x40
 800b1be:	2000      	movs	r0, #0
 800b1c0:	6023      	str	r3, [r4, #0]
 800b1c2:	b016      	add	sp, #88	; 0x58
 800b1c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b1c8 <__smakebuf_r>:
 800b1c8:	898b      	ldrh	r3, [r1, #12]
 800b1ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b1cc:	079d      	lsls	r5, r3, #30
 800b1ce:	4606      	mov	r6, r0
 800b1d0:	460c      	mov	r4, r1
 800b1d2:	d507      	bpl.n	800b1e4 <__smakebuf_r+0x1c>
 800b1d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b1d8:	6023      	str	r3, [r4, #0]
 800b1da:	6123      	str	r3, [r4, #16]
 800b1dc:	2301      	movs	r3, #1
 800b1de:	6163      	str	r3, [r4, #20]
 800b1e0:	b002      	add	sp, #8
 800b1e2:	bd70      	pop	{r4, r5, r6, pc}
 800b1e4:	466a      	mov	r2, sp
 800b1e6:	ab01      	add	r3, sp, #4
 800b1e8:	f7ff ffc8 	bl	800b17c <__swhatbuf_r>
 800b1ec:	9900      	ldr	r1, [sp, #0]
 800b1ee:	4605      	mov	r5, r0
 800b1f0:	4630      	mov	r0, r6
 800b1f2:	f7ff f9e5 	bl	800a5c0 <_malloc_r>
 800b1f6:	b948      	cbnz	r0, 800b20c <__smakebuf_r+0x44>
 800b1f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1fc:	059a      	lsls	r2, r3, #22
 800b1fe:	d4ef      	bmi.n	800b1e0 <__smakebuf_r+0x18>
 800b200:	f023 0303 	bic.w	r3, r3, #3
 800b204:	f043 0302 	orr.w	r3, r3, #2
 800b208:	81a3      	strh	r3, [r4, #12]
 800b20a:	e7e3      	b.n	800b1d4 <__smakebuf_r+0xc>
 800b20c:	4b0d      	ldr	r3, [pc, #52]	; (800b244 <__smakebuf_r+0x7c>)
 800b20e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b210:	89a3      	ldrh	r3, [r4, #12]
 800b212:	6020      	str	r0, [r4, #0]
 800b214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b218:	81a3      	strh	r3, [r4, #12]
 800b21a:	9b00      	ldr	r3, [sp, #0]
 800b21c:	6120      	str	r0, [r4, #16]
 800b21e:	6163      	str	r3, [r4, #20]
 800b220:	9b01      	ldr	r3, [sp, #4]
 800b222:	b15b      	cbz	r3, 800b23c <__smakebuf_r+0x74>
 800b224:	4630      	mov	r0, r6
 800b226:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b22a:	f000 f91f 	bl	800b46c <_isatty_r>
 800b22e:	b128      	cbz	r0, 800b23c <__smakebuf_r+0x74>
 800b230:	89a3      	ldrh	r3, [r4, #12]
 800b232:	f023 0303 	bic.w	r3, r3, #3
 800b236:	f043 0301 	orr.w	r3, r3, #1
 800b23a:	81a3      	strh	r3, [r4, #12]
 800b23c:	89a0      	ldrh	r0, [r4, #12]
 800b23e:	4305      	orrs	r5, r0
 800b240:	81a5      	strh	r5, [r4, #12]
 800b242:	e7cd      	b.n	800b1e0 <__smakebuf_r+0x18>
 800b244:	0800afd5 	.word	0x0800afd5

0800b248 <memmove>:
 800b248:	4288      	cmp	r0, r1
 800b24a:	b510      	push	{r4, lr}
 800b24c:	eb01 0402 	add.w	r4, r1, r2
 800b250:	d902      	bls.n	800b258 <memmove+0x10>
 800b252:	4284      	cmp	r4, r0
 800b254:	4623      	mov	r3, r4
 800b256:	d807      	bhi.n	800b268 <memmove+0x20>
 800b258:	1e43      	subs	r3, r0, #1
 800b25a:	42a1      	cmp	r1, r4
 800b25c:	d008      	beq.n	800b270 <memmove+0x28>
 800b25e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b262:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b266:	e7f8      	b.n	800b25a <memmove+0x12>
 800b268:	4601      	mov	r1, r0
 800b26a:	4402      	add	r2, r0
 800b26c:	428a      	cmp	r2, r1
 800b26e:	d100      	bne.n	800b272 <memmove+0x2a>
 800b270:	bd10      	pop	{r4, pc}
 800b272:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b276:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b27a:	e7f7      	b.n	800b26c <memmove+0x24>

0800b27c <__malloc_lock>:
 800b27c:	4801      	ldr	r0, [pc, #4]	; (800b284 <__malloc_lock+0x8>)
 800b27e:	f7ff bf7b 	b.w	800b178 <__retarget_lock_acquire_recursive>
 800b282:	bf00      	nop
 800b284:	20000530 	.word	0x20000530

0800b288 <__malloc_unlock>:
 800b288:	4801      	ldr	r0, [pc, #4]	; (800b290 <__malloc_unlock+0x8>)
 800b28a:	f7ff bf76 	b.w	800b17a <__retarget_lock_release_recursive>
 800b28e:	bf00      	nop
 800b290:	20000530 	.word	0x20000530

0800b294 <_realloc_r>:
 800b294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b298:	4680      	mov	r8, r0
 800b29a:	4614      	mov	r4, r2
 800b29c:	460e      	mov	r6, r1
 800b29e:	b921      	cbnz	r1, 800b2aa <_realloc_r+0x16>
 800b2a0:	4611      	mov	r1, r2
 800b2a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a6:	f7ff b98b 	b.w	800a5c0 <_malloc_r>
 800b2aa:	b92a      	cbnz	r2, 800b2b8 <_realloc_r+0x24>
 800b2ac:	f7ff f920 	bl	800a4f0 <_free_r>
 800b2b0:	4625      	mov	r5, r4
 800b2b2:	4628      	mov	r0, r5
 800b2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2b8:	f000 f8fa 	bl	800b4b0 <_malloc_usable_size_r>
 800b2bc:	4284      	cmp	r4, r0
 800b2be:	4607      	mov	r7, r0
 800b2c0:	d802      	bhi.n	800b2c8 <_realloc_r+0x34>
 800b2c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b2c6:	d812      	bhi.n	800b2ee <_realloc_r+0x5a>
 800b2c8:	4621      	mov	r1, r4
 800b2ca:	4640      	mov	r0, r8
 800b2cc:	f7ff f978 	bl	800a5c0 <_malloc_r>
 800b2d0:	4605      	mov	r5, r0
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	d0ed      	beq.n	800b2b2 <_realloc_r+0x1e>
 800b2d6:	42bc      	cmp	r4, r7
 800b2d8:	4622      	mov	r2, r4
 800b2da:	4631      	mov	r1, r6
 800b2dc:	bf28      	it	cs
 800b2de:	463a      	movcs	r2, r7
 800b2e0:	f7fe fc2c 	bl	8009b3c <memcpy>
 800b2e4:	4631      	mov	r1, r6
 800b2e6:	4640      	mov	r0, r8
 800b2e8:	f7ff f902 	bl	800a4f0 <_free_r>
 800b2ec:	e7e1      	b.n	800b2b2 <_realloc_r+0x1e>
 800b2ee:	4635      	mov	r5, r6
 800b2f0:	e7df      	b.n	800b2b2 <_realloc_r+0x1e>

0800b2f2 <_raise_r>:
 800b2f2:	291f      	cmp	r1, #31
 800b2f4:	b538      	push	{r3, r4, r5, lr}
 800b2f6:	4604      	mov	r4, r0
 800b2f8:	460d      	mov	r5, r1
 800b2fa:	d904      	bls.n	800b306 <_raise_r+0x14>
 800b2fc:	2316      	movs	r3, #22
 800b2fe:	6003      	str	r3, [r0, #0]
 800b300:	f04f 30ff 	mov.w	r0, #4294967295
 800b304:	bd38      	pop	{r3, r4, r5, pc}
 800b306:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b308:	b112      	cbz	r2, 800b310 <_raise_r+0x1e>
 800b30a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b30e:	b94b      	cbnz	r3, 800b324 <_raise_r+0x32>
 800b310:	4620      	mov	r0, r4
 800b312:	f000 f831 	bl	800b378 <_getpid_r>
 800b316:	462a      	mov	r2, r5
 800b318:	4601      	mov	r1, r0
 800b31a:	4620      	mov	r0, r4
 800b31c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b320:	f000 b818 	b.w	800b354 <_kill_r>
 800b324:	2b01      	cmp	r3, #1
 800b326:	d00a      	beq.n	800b33e <_raise_r+0x4c>
 800b328:	1c59      	adds	r1, r3, #1
 800b32a:	d103      	bne.n	800b334 <_raise_r+0x42>
 800b32c:	2316      	movs	r3, #22
 800b32e:	6003      	str	r3, [r0, #0]
 800b330:	2001      	movs	r0, #1
 800b332:	e7e7      	b.n	800b304 <_raise_r+0x12>
 800b334:	2400      	movs	r4, #0
 800b336:	4628      	mov	r0, r5
 800b338:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b33c:	4798      	blx	r3
 800b33e:	2000      	movs	r0, #0
 800b340:	e7e0      	b.n	800b304 <_raise_r+0x12>
	...

0800b344 <raise>:
 800b344:	4b02      	ldr	r3, [pc, #8]	; (800b350 <raise+0xc>)
 800b346:	4601      	mov	r1, r0
 800b348:	6818      	ldr	r0, [r3, #0]
 800b34a:	f7ff bfd2 	b.w	800b2f2 <_raise_r>
 800b34e:	bf00      	nop
 800b350:	20000010 	.word	0x20000010

0800b354 <_kill_r>:
 800b354:	b538      	push	{r3, r4, r5, lr}
 800b356:	2300      	movs	r3, #0
 800b358:	4d06      	ldr	r5, [pc, #24]	; (800b374 <_kill_r+0x20>)
 800b35a:	4604      	mov	r4, r0
 800b35c:	4608      	mov	r0, r1
 800b35e:	4611      	mov	r1, r2
 800b360:	602b      	str	r3, [r5, #0]
 800b362:	f7f7 fcf8 	bl	8002d56 <_kill>
 800b366:	1c43      	adds	r3, r0, #1
 800b368:	d102      	bne.n	800b370 <_kill_r+0x1c>
 800b36a:	682b      	ldr	r3, [r5, #0]
 800b36c:	b103      	cbz	r3, 800b370 <_kill_r+0x1c>
 800b36e:	6023      	str	r3, [r4, #0]
 800b370:	bd38      	pop	{r3, r4, r5, pc}
 800b372:	bf00      	nop
 800b374:	20000534 	.word	0x20000534

0800b378 <_getpid_r>:
 800b378:	f7f7 bce6 	b.w	8002d48 <_getpid>

0800b37c <__sread>:
 800b37c:	b510      	push	{r4, lr}
 800b37e:	460c      	mov	r4, r1
 800b380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b384:	f000 f89c 	bl	800b4c0 <_read_r>
 800b388:	2800      	cmp	r0, #0
 800b38a:	bfab      	itete	ge
 800b38c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b38e:	89a3      	ldrhlt	r3, [r4, #12]
 800b390:	181b      	addge	r3, r3, r0
 800b392:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b396:	bfac      	ite	ge
 800b398:	6563      	strge	r3, [r4, #84]	; 0x54
 800b39a:	81a3      	strhlt	r3, [r4, #12]
 800b39c:	bd10      	pop	{r4, pc}

0800b39e <__swrite>:
 800b39e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3a2:	461f      	mov	r7, r3
 800b3a4:	898b      	ldrh	r3, [r1, #12]
 800b3a6:	4605      	mov	r5, r0
 800b3a8:	05db      	lsls	r3, r3, #23
 800b3aa:	460c      	mov	r4, r1
 800b3ac:	4616      	mov	r6, r2
 800b3ae:	d505      	bpl.n	800b3bc <__swrite+0x1e>
 800b3b0:	2302      	movs	r3, #2
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3b8:	f000 f868 	bl	800b48c <_lseek_r>
 800b3bc:	89a3      	ldrh	r3, [r4, #12]
 800b3be:	4632      	mov	r2, r6
 800b3c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3c4:	81a3      	strh	r3, [r4, #12]
 800b3c6:	4628      	mov	r0, r5
 800b3c8:	463b      	mov	r3, r7
 800b3ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3d2:	f000 b817 	b.w	800b404 <_write_r>

0800b3d6 <__sseek>:
 800b3d6:	b510      	push	{r4, lr}
 800b3d8:	460c      	mov	r4, r1
 800b3da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3de:	f000 f855 	bl	800b48c <_lseek_r>
 800b3e2:	1c43      	adds	r3, r0, #1
 800b3e4:	89a3      	ldrh	r3, [r4, #12]
 800b3e6:	bf15      	itete	ne
 800b3e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b3ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b3ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b3f2:	81a3      	strheq	r3, [r4, #12]
 800b3f4:	bf18      	it	ne
 800b3f6:	81a3      	strhne	r3, [r4, #12]
 800b3f8:	bd10      	pop	{r4, pc}

0800b3fa <__sclose>:
 800b3fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3fe:	f000 b813 	b.w	800b428 <_close_r>
	...

0800b404 <_write_r>:
 800b404:	b538      	push	{r3, r4, r5, lr}
 800b406:	4604      	mov	r4, r0
 800b408:	4608      	mov	r0, r1
 800b40a:	4611      	mov	r1, r2
 800b40c:	2200      	movs	r2, #0
 800b40e:	4d05      	ldr	r5, [pc, #20]	; (800b424 <_write_r+0x20>)
 800b410:	602a      	str	r2, [r5, #0]
 800b412:	461a      	mov	r2, r3
 800b414:	f7f7 fcd6 	bl	8002dc4 <_write>
 800b418:	1c43      	adds	r3, r0, #1
 800b41a:	d102      	bne.n	800b422 <_write_r+0x1e>
 800b41c:	682b      	ldr	r3, [r5, #0]
 800b41e:	b103      	cbz	r3, 800b422 <_write_r+0x1e>
 800b420:	6023      	str	r3, [r4, #0]
 800b422:	bd38      	pop	{r3, r4, r5, pc}
 800b424:	20000534 	.word	0x20000534

0800b428 <_close_r>:
 800b428:	b538      	push	{r3, r4, r5, lr}
 800b42a:	2300      	movs	r3, #0
 800b42c:	4d05      	ldr	r5, [pc, #20]	; (800b444 <_close_r+0x1c>)
 800b42e:	4604      	mov	r4, r0
 800b430:	4608      	mov	r0, r1
 800b432:	602b      	str	r3, [r5, #0]
 800b434:	f7f7 fce2 	bl	8002dfc <_close>
 800b438:	1c43      	adds	r3, r0, #1
 800b43a:	d102      	bne.n	800b442 <_close_r+0x1a>
 800b43c:	682b      	ldr	r3, [r5, #0]
 800b43e:	b103      	cbz	r3, 800b442 <_close_r+0x1a>
 800b440:	6023      	str	r3, [r4, #0]
 800b442:	bd38      	pop	{r3, r4, r5, pc}
 800b444:	20000534 	.word	0x20000534

0800b448 <_fstat_r>:
 800b448:	b538      	push	{r3, r4, r5, lr}
 800b44a:	2300      	movs	r3, #0
 800b44c:	4d06      	ldr	r5, [pc, #24]	; (800b468 <_fstat_r+0x20>)
 800b44e:	4604      	mov	r4, r0
 800b450:	4608      	mov	r0, r1
 800b452:	4611      	mov	r1, r2
 800b454:	602b      	str	r3, [r5, #0]
 800b456:	f7f7 fcdc 	bl	8002e12 <_fstat>
 800b45a:	1c43      	adds	r3, r0, #1
 800b45c:	d102      	bne.n	800b464 <_fstat_r+0x1c>
 800b45e:	682b      	ldr	r3, [r5, #0]
 800b460:	b103      	cbz	r3, 800b464 <_fstat_r+0x1c>
 800b462:	6023      	str	r3, [r4, #0]
 800b464:	bd38      	pop	{r3, r4, r5, pc}
 800b466:	bf00      	nop
 800b468:	20000534 	.word	0x20000534

0800b46c <_isatty_r>:
 800b46c:	b538      	push	{r3, r4, r5, lr}
 800b46e:	2300      	movs	r3, #0
 800b470:	4d05      	ldr	r5, [pc, #20]	; (800b488 <_isatty_r+0x1c>)
 800b472:	4604      	mov	r4, r0
 800b474:	4608      	mov	r0, r1
 800b476:	602b      	str	r3, [r5, #0]
 800b478:	f7f7 fcda 	bl	8002e30 <_isatty>
 800b47c:	1c43      	adds	r3, r0, #1
 800b47e:	d102      	bne.n	800b486 <_isatty_r+0x1a>
 800b480:	682b      	ldr	r3, [r5, #0]
 800b482:	b103      	cbz	r3, 800b486 <_isatty_r+0x1a>
 800b484:	6023      	str	r3, [r4, #0]
 800b486:	bd38      	pop	{r3, r4, r5, pc}
 800b488:	20000534 	.word	0x20000534

0800b48c <_lseek_r>:
 800b48c:	b538      	push	{r3, r4, r5, lr}
 800b48e:	4604      	mov	r4, r0
 800b490:	4608      	mov	r0, r1
 800b492:	4611      	mov	r1, r2
 800b494:	2200      	movs	r2, #0
 800b496:	4d05      	ldr	r5, [pc, #20]	; (800b4ac <_lseek_r+0x20>)
 800b498:	602a      	str	r2, [r5, #0]
 800b49a:	461a      	mov	r2, r3
 800b49c:	f7f7 fcd2 	bl	8002e44 <_lseek>
 800b4a0:	1c43      	adds	r3, r0, #1
 800b4a2:	d102      	bne.n	800b4aa <_lseek_r+0x1e>
 800b4a4:	682b      	ldr	r3, [r5, #0]
 800b4a6:	b103      	cbz	r3, 800b4aa <_lseek_r+0x1e>
 800b4a8:	6023      	str	r3, [r4, #0]
 800b4aa:	bd38      	pop	{r3, r4, r5, pc}
 800b4ac:	20000534 	.word	0x20000534

0800b4b0 <_malloc_usable_size_r>:
 800b4b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4b4:	1f18      	subs	r0, r3, #4
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	bfbc      	itt	lt
 800b4ba:	580b      	ldrlt	r3, [r1, r0]
 800b4bc:	18c0      	addlt	r0, r0, r3
 800b4be:	4770      	bx	lr

0800b4c0 <_read_r>:
 800b4c0:	b538      	push	{r3, r4, r5, lr}
 800b4c2:	4604      	mov	r4, r0
 800b4c4:	4608      	mov	r0, r1
 800b4c6:	4611      	mov	r1, r2
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	4d05      	ldr	r5, [pc, #20]	; (800b4e0 <_read_r+0x20>)
 800b4cc:	602a      	str	r2, [r5, #0]
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	f7f7 fc5b 	bl	8002d8a <_read>
 800b4d4:	1c43      	adds	r3, r0, #1
 800b4d6:	d102      	bne.n	800b4de <_read_r+0x1e>
 800b4d8:	682b      	ldr	r3, [r5, #0]
 800b4da:	b103      	cbz	r3, 800b4de <_read_r+0x1e>
 800b4dc:	6023      	str	r3, [r4, #0]
 800b4de:	bd38      	pop	{r3, r4, r5, pc}
 800b4e0:	20000534 	.word	0x20000534

0800b4e4 <_init>:
 800b4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4e6:	bf00      	nop
 800b4e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4ea:	bc08      	pop	{r3}
 800b4ec:	469e      	mov	lr, r3
 800b4ee:	4770      	bx	lr

0800b4f0 <_fini>:
 800b4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4f2:	bf00      	nop
 800b4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4f6:	bc08      	pop	{r3}
 800b4f8:	469e      	mov	lr, r3
 800b4fa:	4770      	bx	lr
