
GRUZIK2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a960  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  0800aa70  0800aa70  0001aa70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b030  0800b030  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800b030  0800b030  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b030  0800b030  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b030  0800b030  0001b030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b034  0800b034  0001b034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800b038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  200001ec  0800b224  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  0800b224  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104e5  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b15  00000000  00000000  000306fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  00033210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e50  00000000  00000000  00034198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000033fc  00000000  00000000  00034fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c5a  00000000  00000000  000383e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000913f6  00000000  00000000  0004b03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc434  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005444  00000000  00000000  000dc484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800aa58 	.word	0x0800aa58

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	0800aa58 	.word	0x0800aa58

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_f2iz>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800112c:	d30f      	bcc.n	800114e <__aeabi_f2iz+0x2a>
 800112e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001132:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001136:	d90d      	bls.n	8001154 <__aeabi_f2iz+0x30>
 8001138:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800113c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001140:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001144:	fa23 f002 	lsr.w	r0, r3, r2
 8001148:	bf18      	it	ne
 800114a:	4240      	negne	r0, r0
 800114c:	4770      	bx	lr
 800114e:	f04f 0000 	mov.w	r0, #0
 8001152:	4770      	bx	lr
 8001154:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001158:	d101      	bne.n	800115e <__aeabi_f2iz+0x3a>
 800115a:	0242      	lsls	r2, r0, #9
 800115c:	d105      	bne.n	800116a <__aeabi_f2iz+0x46>
 800115e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001162:	bf08      	it	eq
 8001164:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr

08001170 <__aeabi_d2lz>:
 8001170:	b538      	push	{r3, r4, r5, lr}
 8001172:	4605      	mov	r5, r0
 8001174:	460c      	mov	r4, r1
 8001176:	2200      	movs	r2, #0
 8001178:	2300      	movs	r3, #0
 800117a:	4628      	mov	r0, r5
 800117c:	4621      	mov	r1, r4
 800117e:	f7ff fc27 	bl	80009d0 <__aeabi_dcmplt>
 8001182:	b928      	cbnz	r0, 8001190 <__aeabi_d2lz+0x20>
 8001184:	4628      	mov	r0, r5
 8001186:	4621      	mov	r1, r4
 8001188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800118c:	f000 b80a 	b.w	80011a4 <__aeabi_d2ulz>
 8001190:	4628      	mov	r0, r5
 8001192:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001196:	f000 f805 	bl	80011a4 <__aeabi_d2ulz>
 800119a:	4240      	negs	r0, r0
 800119c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011a0:	bd38      	pop	{r3, r4, r5, pc}
 80011a2:	bf00      	nop

080011a4 <__aeabi_d2ulz>:
 80011a4:	b5d0      	push	{r4, r6, r7, lr}
 80011a6:	2200      	movs	r2, #0
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <__aeabi_d2ulz+0x34>)
 80011aa:	4606      	mov	r6, r0
 80011ac:	460f      	mov	r7, r1
 80011ae:	f7ff f99d 	bl	80004ec <__aeabi_dmul>
 80011b2:	f7ff fc73 	bl	8000a9c <__aeabi_d2uiz>
 80011b6:	4604      	mov	r4, r0
 80011b8:	f7ff f91e 	bl	80003f8 <__aeabi_ui2d>
 80011bc:	2200      	movs	r2, #0
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <__aeabi_d2ulz+0x38>)
 80011c0:	f7ff f994 	bl	80004ec <__aeabi_dmul>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4630      	mov	r0, r6
 80011ca:	4639      	mov	r1, r7
 80011cc:	f7fe ffd6 	bl	800017c <__aeabi_dsub>
 80011d0:	f7ff fc64 	bl	8000a9c <__aeabi_d2uiz>
 80011d4:	4621      	mov	r1, r4
 80011d6:	bdd0      	pop	{r4, r6, r7, pc}
 80011d8:	3df00000 	.word	0x3df00000
 80011dc:	41f00000 	.word	0x41f00000

080011e0 <RB_Write>:
 */
#include "main.h"
#include "RingBuffer.h"

RB_Status RB_Write(RingBuffer_t *Buf, uint8_t value)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	70fb      	strb	r3, [r7, #3]
	uint8_t HeadTmp = (Buf->Head + 1) % RING_BUFFER_SIZE;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	3301      	adds	r3, #1
 80011f2:	425a      	negs	r2, r3
 80011f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011f8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80011fc:	bf58      	it	pl
 80011fe:	4253      	negpl	r3, r2
 8001200:	73fb      	strb	r3, [r7, #15]

	if(HeadTmp == Buf->Tail)
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	b29a      	uxth	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	885b      	ldrh	r3, [r3, #2]
 800120a:	429a      	cmp	r2, r3
 800120c:	d101      	bne.n	8001212 <RB_Write+0x32>
	{
		return RB_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e00b      	b.n	800122a <RB_Write+0x4a>
	}

	Buf->Buffer[Buf->Head] = value;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	461a      	mov	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4413      	add	r3, r2
 800121c:	78fa      	ldrb	r2, [r7, #3]
 800121e:	711a      	strb	r2, [r3, #4]

	Buf->Head = HeadTmp;
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	b29a      	uxth	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	801a      	strh	r2, [r3, #0]

	return RB_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr

08001234 <RB_Read>:

RB_Status RB_Read(RingBuffer_t *Buf, uint8_t *value)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
	if(Buf->Head == Buf->Tail)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	881a      	ldrh	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	885b      	ldrh	r3, [r3, #2]
 8001246:	429a      	cmp	r2, r3
 8001248:	d101      	bne.n	800124e <RB_Read+0x1a>
	{
		return RB_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e015      	b.n	800127a <RB_Read+0x46>
	}

	*value = Buf->Buffer[Buf->Tail];
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	885b      	ldrh	r3, [r3, #2]
 8001252:	461a      	mov	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4413      	add	r3, r2
 8001258:	791a      	ldrb	r2, [r3, #4]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	701a      	strb	r2, [r3, #0]

	Buf->Tail = (Buf->Tail + 1) % RING_BUFFER_SIZE;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	885b      	ldrh	r3, [r3, #2]
 8001262:	3301      	adds	r3, #1
 8001264:	425a      	negs	r2, r3
 8001266:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800126a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800126e:	bf58      	it	pl
 8001270:	4253      	negpl	r3, r2
 8001272:	b29a      	uxth	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	805a      	strh	r2, [r3, #2]

	return RB_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <Parser_TakeLine>:
#include "SimpleParser.h"
#include "Line_Follower.h"
char My_Name[32] = "GRUZIK2.0";

void Parser_TakeLine(RingBuffer_t *Buf, uint8_t *ReceivedData)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
	uint8_t Tmp;
	uint8_t i = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	73fb      	strb	r3, [r7, #15]
	do
	{
		RB_Read(Buf, &Tmp);
 8001292:	f107 030e 	add.w	r3, r7, #14
 8001296:	4619      	mov	r1, r3
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff ffcb 	bl	8001234 <RB_Read>

		if(Tmp == ENDLINE)
 800129e:	7bbb      	ldrb	r3, [r7, #14]
 80012a0:	2b0a      	cmp	r3, #10
 80012a2:	d105      	bne.n	80012b0 <Parser_TakeLine+0x2c>
		{
			ReceivedData[i] = 0;
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	4413      	add	r3, r2
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
 80012ae:	e004      	b.n	80012ba <Parser_TakeLine+0x36>

		}

		else
		{
			ReceivedData[i] = Tmp;
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	4413      	add	r3, r2
 80012b6:	7bba      	ldrb	r2, [r7, #14]
 80012b8:	701a      	strb	r2, [r3, #0]
		}
		i++;
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	3301      	adds	r3, #1
 80012be:	73fb      	strb	r3, [r7, #15]

	} while(Tmp != ENDLINE);
 80012c0:	7bbb      	ldrb	r3, [r7, #14]
 80012c2:	2b0a      	cmp	r3, #10
 80012c4:	d1e5      	bne.n	8001292 <Parser_TakeLine+0xe>

}
 80012c6:	bf00      	nop
 80012c8:	bf00      	nop
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <kp_change>:

static void kp_change(LineFollower_t *LF)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 80012d8:	490f      	ldr	r1, [pc, #60]	; (8001318 <kp_change+0x48>)
 80012da:	2000      	movs	r0, #0
 80012dc:	f006 fdfc 	bl	8007ed8 <strtok>
 80012e0:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d011      	beq.n	800130e <kp_change+0x3e>
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f7fe ff3a 	bl	8000164 <strlen>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b1f      	cmp	r3, #31
 80012f4:	d80b      	bhi.n	800130e <kp_change+0x3e>
	{
		LF->Kp = atof(ParsePointer);
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f005 fb40 	bl	800697c <atof>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4610      	mov	r0, r2
 8001302:	4619      	mov	r1, r3
 8001304:	f7ff fbea 	bl	8000adc <__aeabi_d2f>
 8001308:	4602      	mov	r2, r0
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	601a      	str	r2, [r3, #0]
	}

}
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	0800aa70 	.word	0x0800aa70

0800131c <kd_change>:
static void kd_change(LineFollower_t *LF)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001324:	490f      	ldr	r1, [pc, #60]	; (8001364 <kd_change+0x48>)
 8001326:	2000      	movs	r0, #0
 8001328:	f006 fdd6 	bl	8007ed8 <strtok>
 800132c:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d011      	beq.n	800135a <kd_change+0x3e>
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f7fe ff14 	bl	8000164 <strlen>
 800133c:	4603      	mov	r3, r0
 800133e:	2b1f      	cmp	r3, #31
 8001340:	d80b      	bhi.n	800135a <kd_change+0x3e>
	{
		LF->Kd = atof(ParsePointer);
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f005 fb1a 	bl	800697c <atof>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	f7ff fbc4 	bl	8000adc <__aeabi_d2f>
 8001354:	4602      	mov	r2, r0
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	605a      	str	r2, [r3, #4]
	}
}
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	0800aa70 	.word	0x0800aa70

08001368 <Base_speed_change>:
static void Base_speed_change(LineFollower_t *LF)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001370:	4915      	ldr	r1, [pc, #84]	; (80013c8 <Base_speed_change+0x60>)
 8001372:	2000      	movs	r0, #0
 8001374:	f006 fdb0 	bl	8007ed8 <strtok>
 8001378:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d01d      	beq.n	80013be <Base_speed_change+0x56>
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f7fe feee 	bl	8000164 <strlen>
 8001388:	4603      	mov	r3, r0
 800138a:	2b1f      	cmp	r3, #31
 800138c:	d817      	bhi.n	80013be <Base_speed_change+0x56>
	{
		LF->Base_speed_R = atof(ParsePointer);
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f005 faf4 	bl	800697c <atof>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4610      	mov	r0, r2
 800139a:	4619      	mov	r1, r3
 800139c:	f7ff fb56 	bl	8000a4c <__aeabi_d2iz>
 80013a0:	4602      	mov	r2, r0
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	609a      	str	r2, [r3, #8]
		LF->Base_speed_L = atof(ParsePointer);
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f005 fae8 	bl	800697c <atof>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4610      	mov	r0, r2
 80013b2:	4619      	mov	r1, r3
 80013b4:	f7ff fb4a 	bl	8000a4c <__aeabi_d2iz>
 80013b8:	4602      	mov	r2, r0
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	60da      	str	r2, [r3, #12]
	}
}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	0800aa70 	.word	0x0800aa70

080013cc <Max_speed_change>:

static void Max_speed_change(LineFollower_t *LF)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 80013d4:	4915      	ldr	r1, [pc, #84]	; (800142c <Max_speed_change+0x60>)
 80013d6:	2000      	movs	r0, #0
 80013d8:	f006 fd7e 	bl	8007ed8 <strtok>
 80013dc:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d01d      	beq.n	8001422 <Max_speed_change+0x56>
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f7fe febc 	bl	8000164 <strlen>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b1f      	cmp	r3, #31
 80013f0:	d817      	bhi.n	8001422 <Max_speed_change+0x56>
	{
		LF->Max_speed_R = atof(ParsePointer);
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f005 fac2 	bl	800697c <atof>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	4610      	mov	r0, r2
 80013fe:	4619      	mov	r1, r3
 8001400:	f7ff fb24 	bl	8000a4c <__aeabi_d2iz>
 8001404:	4602      	mov	r2, r0
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	611a      	str	r2, [r3, #16]
		LF->Max_speed_L = atof(ParsePointer);
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f005 fab6 	bl	800697c <atof>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4610      	mov	r0, r2
 8001416:	4619      	mov	r1, r3
 8001418:	f7ff fb18 	bl	8000a4c <__aeabi_d2iz>
 800141c:	4602      	mov	r2, r0
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	615a      	str	r2, [r3, #20]
	}
}
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	0800aa70 	.word	0x0800aa70

08001430 <Sharp_bend_speed_right_change>:
static void Sharp_bend_speed_right_change(LineFollower_t *LF)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001438:	490f      	ldr	r1, [pc, #60]	; (8001478 <Sharp_bend_speed_right_change+0x48>)
 800143a:	2000      	movs	r0, #0
 800143c:	f006 fd4c 	bl	8007ed8 <strtok>
 8001440:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d011      	beq.n	800146e <Sharp_bend_speed_right_change+0x3e>
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f7fe fe8a 	bl	8000164 <strlen>
 8001450:	4603      	mov	r3, r0
 8001452:	2b1f      	cmp	r3, #31
 8001454:	d80b      	bhi.n	800146e <Sharp_bend_speed_right_change+0x3e>
	{
	LF->Sharp_bend_speed_right = atof(ParsePointer);
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f005 fa90 	bl	800697c <atof>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff faf2 	bl	8000a4c <__aeabi_d2iz>
 8001468:	4602      	mov	r2, r0
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	619a      	str	r2, [r3, #24]
	}
}
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	0800aa70 	.word	0x0800aa70

0800147c <Sharp_bend_speed_left_change>:
static void Sharp_bend_speed_left_change(LineFollower_t *LF)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001484:	490f      	ldr	r1, [pc, #60]	; (80014c4 <Sharp_bend_speed_left_change+0x48>)
 8001486:	2000      	movs	r0, #0
 8001488:	f006 fd26 	bl	8007ed8 <strtok>
 800148c:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d011      	beq.n	80014ba <Sharp_bend_speed_left_change+0x3e>
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	f7fe fe64 	bl	8000164 <strlen>
 800149c:	4603      	mov	r3, r0
 800149e:	2b1f      	cmp	r3, #31
 80014a0:	d80b      	bhi.n	80014ba <Sharp_bend_speed_left_change+0x3e>
	{
	LF->Sharp_bend_speed_left = atof(ParsePointer);
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f005 fa6a 	bl	800697c <atof>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	f7ff facc 	bl	8000a4c <__aeabi_d2iz>
 80014b4:	4602      	mov	r2, r0
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	61da      	str	r2, [r3, #28]
	}
}
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	0800aa70 	.word	0x0800aa70

080014c8 <Bend_speed_right_change>:
static void Bend_speed_right_change(LineFollower_t *LF)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 80014d0:	490f      	ldr	r1, [pc, #60]	; (8001510 <Bend_speed_right_change+0x48>)
 80014d2:	2000      	movs	r0, #0
 80014d4:	f006 fd00 	bl	8007ed8 <strtok>
 80014d8:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d011      	beq.n	8001506 <Bend_speed_right_change+0x3e>
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f7fe fe3e 	bl	8000164 <strlen>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b1f      	cmp	r3, #31
 80014ec:	d80b      	bhi.n	8001506 <Bend_speed_right_change+0x3e>
	{
	LF->Bend_speed_right = atof(ParsePointer);
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f005 fa44 	bl	800697c <atof>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	f7ff faa6 	bl	8000a4c <__aeabi_d2iz>
 8001500:	4602      	mov	r2, r0
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	621a      	str	r2, [r3, #32]
	}
}
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	0800aa70 	.word	0x0800aa70

08001514 <Bend_speed_left_change>:
static void Bend_speed_left_change(LineFollower_t *LF)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 800151c:	490f      	ldr	r1, [pc, #60]	; (800155c <Bend_speed_left_change+0x48>)
 800151e:	2000      	movs	r0, #0
 8001520:	f006 fcda 	bl	8007ed8 <strtok>
 8001524:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d011      	beq.n	8001552 <Bend_speed_left_change+0x3e>
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f7fe fe18 	bl	8000164 <strlen>
 8001534:	4603      	mov	r3, r0
 8001536:	2b1f      	cmp	r3, #31
 8001538:	d80b      	bhi.n	8001552 <Bend_speed_left_change+0x3e>
	{
	LF->Bend_speed_left = atof(ParsePointer);
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f005 fa1e 	bl	800697c <atof>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f7ff fa80 	bl	8000a4c <__aeabi_d2iz>
 800154c:	4602      	mov	r2, r0
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	0800aa70 	.word	0x0800aa70

08001560 <App_Controll>:
static void App_Controll(char RxData, LineFollower_t *LineFollower)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	71fb      	strb	r3, [r7, #7]
	/*Stop robot*/
	if(RxData == 'N')
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	2b4e      	cmp	r3, #78	; 0x4e
 8001570:	d10a      	bne.n	8001588 <App_Controll+0x28>
	{
		/*Stop GRUZIK2.0 and turn off the LED*/
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001572:	2200      	movs	r2, #0
 8001574:	2140      	movs	r1, #64	; 0x40
 8001576:	4899      	ldr	r0, [pc, #612]	; (80017dc <App_Controll+0x27c>)
 8001578:	f002 fe77 	bl	800426a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800157c:	2200      	movs	r2, #0
 800157e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001582:	4897      	ldr	r0, [pc, #604]	; (80017e0 <App_Controll+0x280>)
 8001584:	f002 fe71 	bl	800426a <HAL_GPIO_WritePin>
		/*Send battery percentage*/
		//SN_UART_Send(&huart1, "%.1f \r \n" ,battery_procentage_raw);

	}
	/*Start robot*/
	if (RxData == 'Y')
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	2b59      	cmp	r3, #89	; 0x59
 800158c:	d10a      	bne.n	80015a4 <App_Controll+0x44>
//
//		/*Do Battery measurement before start*/
//		Battery_ADC_measurement();

		/*Start GRUZIK2.0 and turn on the LED*/
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800158e:	2201      	movs	r2, #1
 8001590:	2140      	movs	r1, #64	; 0x40
 8001592:	4892      	ldr	r0, [pc, #584]	; (80017dc <App_Controll+0x27c>)
 8001594:	f002 fe69 	bl	800426a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001598:	2201      	movs	r2, #1
 800159a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800159e:	4890      	ldr	r0, [pc, #576]	; (80017e0 <App_Controll+0x280>)
 80015a0:	f002 fe63 	bl	800426a <HAL_GPIO_WritePin>
	}
	/*LOW mode*/
	if(RxData == 'a')
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	2b61      	cmp	r3, #97	; 0x61
 80015a8:	d11f      	bne.n	80015ea <App_Controll+0x8a>
	{
		LineFollower->Base_speed_R = 100;
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	2264      	movs	r2, #100	; 0x64
 80015ae:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 100;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	2264      	movs	r2, #100	; 0x64
 80015b4:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 100;
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	2264      	movs	r2, #100	; 0x64
 80015ba:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 100;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	2264      	movs	r2, #100	; 0x64
 80015c0:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right =- 50;
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	f06f 0231 	mvn.w	r2, #49	; 0x31
 80015c8:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 50;
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	2232      	movs	r2, #50	; 0x32
 80015ce:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	f06f 0231 	mvn.w	r2, #49	; 0x31
 80015d6:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 50;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	2232      	movs	r2, #50	; 0x32
 80015dc:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	4a80      	ldr	r2, [pc, #512]	; (80017e4 <App_Controll+0x284>)
 80015e2:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.1;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	4a80      	ldr	r2, [pc, #512]	; (80017e8 <App_Controll+0x288>)
 80015e8:	605a      	str	r2, [r3, #4]
	}
	/*LOW+ mode*/
	if(RxData == 'd')
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	2b64      	cmp	r3, #100	; 0x64
 80015ee:	d11f      	bne.n	8001630 <App_Controll+0xd0>
	{
		LineFollower->Base_speed_R = 110;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	226e      	movs	r2, #110	; 0x6e
 80015f4:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 110;
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	226e      	movs	r2, #110	; 0x6e
 80015fa:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 110;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	226e      	movs	r2, #110	; 0x6e
 8001600:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 110;
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	226e      	movs	r2, #110	; 0x6e
 8001606:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -60;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 800160e:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 50;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	2232      	movs	r2, #50	; 0x32
 8001614:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -60;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 800161c:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 50;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	2232      	movs	r2, #50	; 0x32
 8001622:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	4a6f      	ldr	r2, [pc, #444]	; (80017e4 <App_Controll+0x284>)
 8001628:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.1;
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	4a6e      	ldr	r2, [pc, #440]	; (80017e8 <App_Controll+0x288>)
 800162e:	605a      	str	r2, [r3, #4]
	}
	/*Medium mode*/
	if(RxData == 'b')
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	2b62      	cmp	r3, #98	; 0x62
 8001634:	d120      	bne.n	8001678 <App_Controll+0x118>
	{
		LineFollower->Base_speed_R = 120;
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	2278      	movs	r2, #120	; 0x78
 800163a:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 120;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	2278      	movs	r2, #120	; 0x78
 8001640:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 120;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	2278      	movs	r2, #120	; 0x78
 8001646:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 120;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	2278      	movs	r2, #120	; 0x78
 800164c:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -70;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	f06f 0245 	mvn.w	r2, #69	; 0x45
 8001654:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 85;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	2255      	movs	r2, #85	; 0x55
 800165a:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001662:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 110;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	226e      	movs	r2, #110	; 0x6e
 8001668:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	4a5d      	ldr	r2, [pc, #372]	; (80017e4 <App_Controll+0x284>)
 800166e:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.25;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8001676:	605a      	str	r2, [r3, #4]
	}
	/*Medium+ mode*/
	if(RxData == 'e')
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	2b65      	cmp	r3, #101	; 0x65
 800167c:	d120      	bne.n	80016c0 <App_Controll+0x160>
	{
		LineFollower->Base_speed_R = 125;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	227d      	movs	r2, #125	; 0x7d
 8001682:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 125;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	227d      	movs	r2, #125	; 0x7d
 8001688:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 125;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	227d      	movs	r2, #125	; 0x7d
 800168e:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 125;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	227d      	movs	r2, #125	; 0x7d
 8001694:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -70;
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	f06f 0245 	mvn.w	r2, #69	; 0x45
 800169c:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 85;
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	2255      	movs	r2, #85	; 0x55
 80016a2:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	f06f 0231 	mvn.w	r2, #49	; 0x31
 80016aa:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 110;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	226e      	movs	r2, #110	; 0x6e
 80016b0:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	4a4b      	ldr	r2, [pc, #300]	; (80017e4 <App_Controll+0x284>)
 80016b6:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.25;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80016be:	605a      	str	r2, [r3, #4]
	}
	/*HIGH mode*/
	if(RxData == 'c')
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	2b63      	cmp	r3, #99	; 0x63
 80016c4:	d11f      	bne.n	8001706 <App_Controll+0x1a6>
	{
		LineFollower->Base_speed_R = 130;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	2282      	movs	r2, #130	; 0x82
 80016ca:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 130;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	2282      	movs	r2, #130	; 0x82
 80016d0:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 130;
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	2282      	movs	r2, #130	; 0x82
 80016d6:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 130;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	2282      	movs	r2, #130	; 0x82
 80016dc:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -70;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	f06f 0245 	mvn.w	r2, #69	; 0x45
 80016e4:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 85;
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	2255      	movs	r2, #85	; 0x55
 80016ea:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	f06f 0231 	mvn.w	r2, #49	; 0x31
 80016f2:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 110;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	226e      	movs	r2, #110	; 0x6e
 80016f8:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	4a39      	ldr	r2, [pc, #228]	; (80017e4 <App_Controll+0x284>)
 80016fe:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.4;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	4a3a      	ldr	r2, [pc, #232]	; (80017ec <App_Controll+0x28c>)
 8001704:	605a      	str	r2, [r3, #4]
	}
	/*HIGH+ mode*/
	if(RxData == 'f')
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	2b66      	cmp	r3, #102	; 0x66
 800170a:	d11f      	bne.n	800174c <App_Controll+0x1ec>
	{
		LineFollower->Base_speed_R = 135;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	2287      	movs	r2, #135	; 0x87
 8001710:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 135;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	2287      	movs	r2, #135	; 0x87
 8001716:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 135;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	2287      	movs	r2, #135	; 0x87
 800171c:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 135;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	2287      	movs	r2, #135	; 0x87
 8001722:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -70;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	f06f 0245 	mvn.w	r2, #69	; 0x45
 800172a:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 85;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	2255      	movs	r2, #85	; 0x55
 8001730:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001738:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 110;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	226e      	movs	r2, #110	; 0x6e
 800173e:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	4a28      	ldr	r2, [pc, #160]	; (80017e4 <App_Controll+0x284>)
 8001744:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.4;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	4a28      	ldr	r2, [pc, #160]	; (80017ec <App_Controll+0x28c>)
 800174a:	605a      	str	r2, [r3, #4]
	}
	/*TRUBO mode*/
	if(RxData == 'i')
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	2b69      	cmp	r3, #105	; 0x69
 8001750:	d121      	bne.n	8001796 <App_Controll+0x236>
	{
		LineFollower->Base_speed_R = 270;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001758:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 270;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001760:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 150;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	2296      	movs	r2, #150	; 0x96
 8001766:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 150;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	2296      	movs	r2, #150	; 0x96
 800176c:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -65;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001774:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 70;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	2246      	movs	r2, #70	; 0x46
 800177a:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -76;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8001782:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 130;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	2282      	movs	r2, #130	; 0x82
 8001788:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.045;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	4a18      	ldr	r2, [pc, #96]	; (80017f0 <App_Controll+0x290>)
 800178e:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 75;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	4a18      	ldr	r2, [pc, #96]	; (80017f4 <App_Controll+0x294>)
 8001794:	605a      	str	r2, [r3, #4]
	}
	/*TRUBO+ mode*/
	if(RxData == 'j')
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	2b6a      	cmp	r3, #106	; 0x6a
 800179a:	d132      	bne.n	8001802 <App_Controll+0x2a2>
	{
	   LineFollower->Base_speed_R = 295;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	f240 1227 	movw	r2, #295	; 0x127
 80017a2:	609a      	str	r2, [r3, #8]
	   LineFollower->Base_speed_L = 295;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	f240 1227 	movw	r2, #295	; 0x127
 80017aa:	60da      	str	r2, [r3, #12]
	   LineFollower->Max_speed_L = 165;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	22a5      	movs	r2, #165	; 0xa5
 80017b0:	615a      	str	r2, [r3, #20]
	   LineFollower->Max_speed_R = 165;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	22a5      	movs	r2, #165	; 0xa5
 80017b6:	611a      	str	r2, [r3, #16]
	   LineFollower->Sharp_bend_speed_right = -70;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	f06f 0245 	mvn.w	r2, #69	; 0x45
 80017be:	619a      	str	r2, [r3, #24]
	   LineFollower->Sharp_bend_speed_left = 73;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	2249      	movs	r2, #73	; 0x49
 80017c4:	61da      	str	r2, [r3, #28]
	   LineFollower->Bend_speed_right = -76;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 80017cc:	621a      	str	r2, [r3, #32]
	   LineFollower->Bend_speed_left = 130;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	2282      	movs	r2, #130	; 0x82
 80017d2:	625a      	str	r2, [r3, #36]	; 0x24
	   LineFollower->Kp = 0.05;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	4a08      	ldr	r2, [pc, #32]	; (80017f8 <App_Controll+0x298>)
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	e00f      	b.n	80017fc <App_Controll+0x29c>
 80017dc:	40010c00 	.word	0x40010c00
 80017e0:	40011000 	.word	0x40011000
 80017e4:	3c75c28f 	.word	0x3c75c28f
 80017e8:	3dcccccd 	.word	0x3dcccccd
 80017ec:	3ecccccd 	.word	0x3ecccccd
 80017f0:	3d3851ec 	.word	0x3d3851ec
 80017f4:	42960000 	.word	0x42960000
 80017f8:	3d4ccccd 	.word	0x3d4ccccd
	   LineFollower->Kd = 80;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	4a8e      	ldr	r2, [pc, #568]	; (8001a38 <App_Controll+0x4d8>)
 8001800:	605a      	str	r2, [r3, #4]
	}
	/*ULTRA mode*/
	if(RxData == 'k')
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	2b6b      	cmp	r3, #107	; 0x6b
 8001806:	d121      	bne.n	800184c <App_Controll+0x2ec>
	{
		LineFollower->Base_speed_R = 315;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	f240 123b 	movw	r2, #315	; 0x13b
 800180e:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 315;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	f240 123b 	movw	r2, #315	; 0x13b
 8001816:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 168;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	22a8      	movs	r2, #168	; 0xa8
 800181c:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 168;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	22a8      	movs	r2, #168	; 0xa8
 8001822:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -70;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	f06f 0245 	mvn.w	r2, #69	; 0x45
 800182a:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 73;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	2249      	movs	r2, #73	; 0x49
 8001830:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -76;
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8001838:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 128;
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	2280      	movs	r2, #128	; 0x80
 800183e:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.067;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	4a7e      	ldr	r2, [pc, #504]	; (8001a3c <App_Controll+0x4dc>)
 8001844:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 95;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	4a7d      	ldr	r2, [pc, #500]	; (8001a40 <App_Controll+0x4e0>)
 800184a:	605a      	str	r2, [r3, #4]
	 }
	 /*ULTRA+ mode*/
	 if(RxData == 'l')
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	2b6c      	cmp	r3, #108	; 0x6c
 8001850:	d11f      	bne.n	8001892 <App_Controll+0x332>
	 {
		LineFollower->Base_speed_R = 102;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	2266      	movs	r2, #102	; 0x66
 8001856:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 102;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	2266      	movs	r2, #102	; 0x66
 800185c:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 155;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	229b      	movs	r2, #155	; 0x9b
 8001862:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 155;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	229b      	movs	r2, #155	; 0x9b
 8001868:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -90;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8001870:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 185;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	22b9      	movs	r2, #185	; 0xb9
 8001876:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	f06f 0231 	mvn.w	r2, #49	; 0x31
 800187e:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 100;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	2264      	movs	r2, #100	; 0x64
 8001884:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.02;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	4a6e      	ldr	r2, [pc, #440]	; (8001a44 <App_Controll+0x4e4>)
 800188a:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 350;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	4a6e      	ldr	r2, [pc, #440]	; (8001a48 <App_Controll+0x4e8>)
 8001890:	605a      	str	r2, [r3, #4]
	  }
	  /*EXTREME mode*/
	  if(RxData == 'm')
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	2b6d      	cmp	r3, #109	; 0x6d
 8001896:	d11f      	bne.n	80018d8 <App_Controll+0x378>
	  {
		 LineFollower->Base_speed_R = 107;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	226b      	movs	r2, #107	; 0x6b
 800189c:	609a      	str	r2, [r3, #8]
		 LineFollower->Base_speed_L = 107;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	226b      	movs	r2, #107	; 0x6b
 80018a2:	60da      	str	r2, [r3, #12]
		 LineFollower->Max_speed_L = 159;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	229f      	movs	r2, #159	; 0x9f
 80018a8:	615a      	str	r2, [r3, #20]
		 LineFollower->Max_speed_R = 159;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	229f      	movs	r2, #159	; 0x9f
 80018ae:	611a      	str	r2, [r3, #16]
		 LineFollower->Sharp_bend_speed_right = -90;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80018b6:	619a      	str	r2, [r3, #24]
		 LineFollower->Sharp_bend_speed_left = 185;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	22b9      	movs	r2, #185	; 0xb9
 80018bc:	61da      	str	r2, [r3, #28]
		 LineFollower->Bend_speed_right = -50;
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	f06f 0231 	mvn.w	r2, #49	; 0x31
 80018c4:	621a      	str	r2, [r3, #32]
		 LineFollower->Bend_speed_left = 100;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	2264      	movs	r2, #100	; 0x64
 80018ca:	625a      	str	r2, [r3, #36]	; 0x24
		 LineFollower->Kp = 0.02;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	4a5d      	ldr	r2, [pc, #372]	; (8001a44 <App_Controll+0x4e4>)
 80018d0:	601a      	str	r2, [r3, #0]
		 LineFollower->Kd = 350;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	4a5c      	ldr	r2, [pc, #368]	; (8001a48 <App_Controll+0x4e8>)
 80018d6:	605a      	str	r2, [r3, #4]
	  }

 	  /*EXTREME+ mode*/
 	  if(RxData == 'n')
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	2b6e      	cmp	r3, #110	; 0x6e
 80018dc:	d11f      	bne.n	800191e <App_Controll+0x3be>
 	  {
 	    LineFollower->Base_speed_R = 116;
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	2274      	movs	r2, #116	; 0x74
 80018e2:	609a      	str	r2, [r3, #8]
 	    LineFollower->Base_speed_L = 116;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	2274      	movs	r2, #116	; 0x74
 80018e8:	60da      	str	r2, [r3, #12]
 	    LineFollower->Max_speed_L = 167;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	22a7      	movs	r2, #167	; 0xa7
 80018ee:	615a      	str	r2, [r3, #20]
 	  	LineFollower->Max_speed_R = 167;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	22a7      	movs	r2, #167	; 0xa7
 80018f4:	611a      	str	r2, [r3, #16]
 	 	LineFollower->Sharp_bend_speed_right = -96;
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	f06f 025f 	mvn.w	r2, #95	; 0x5f
 80018fc:	619a      	str	r2, [r3, #24]
 		LineFollower->Sharp_bend_speed_left = 185;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	22b9      	movs	r2, #185	; 0xb9
 8001902:	61da      	str	r2, [r3, #28]
 		LineFollower->Bend_speed_right = -50;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	f06f 0231 	mvn.w	r2, #49	; 0x31
 800190a:	621a      	str	r2, [r3, #32]
 		LineFollower->Bend_speed_left = 100;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	2264      	movs	r2, #100	; 0x64
 8001910:	625a      	str	r2, [r3, #36]	; 0x24
 		LineFollower->Kp = 0.02;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	4a4b      	ldr	r2, [pc, #300]	; (8001a44 <App_Controll+0x4e4>)
 8001916:	601a      	str	r2, [r3, #0]
 		LineFollower->Kd = 350;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	4a4b      	ldr	r2, [pc, #300]	; (8001a48 <App_Controll+0x4e8>)
 800191c:	605a      	str	r2, [r3, #4]
 	  }
 	  /*SPECIAL mode*/
 	  if(RxData == 'h')
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2b68      	cmp	r3, #104	; 0x68
 8001922:	d11f      	bne.n	8001964 <App_Controll+0x404>
 	  {
 	    LineFollower->Base_speed_R = 123;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	227b      	movs	r2, #123	; 0x7b
 8001928:	609a      	str	r2, [r3, #8]
 	    LineFollower->Base_speed_L = 123;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	227b      	movs	r2, #123	; 0x7b
 800192e:	60da      	str	r2, [r3, #12]
 	    LineFollower->Max_speed_L = 172;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	22ac      	movs	r2, #172	; 0xac
 8001934:	615a      	str	r2, [r3, #20]
 	    LineFollower->Max_speed_R = 172;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	22ac      	movs	r2, #172	; 0xac
 800193a:	611a      	str	r2, [r3, #16]
 	 	LineFollower->Sharp_bend_speed_right = -90;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8001942:	619a      	str	r2, [r3, #24]
 		LineFollower->Sharp_bend_speed_left = 185;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	22b9      	movs	r2, #185	; 0xb9
 8001948:	61da      	str	r2, [r3, #28]
 		LineFollower->Bend_speed_right = -50;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001950:	621a      	str	r2, [r3, #32]
 		LineFollower->Bend_speed_left = 100;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	2264      	movs	r2, #100	; 0x64
 8001956:	625a      	str	r2, [r3, #36]	; 0x24
 		LineFollower->Kp = 0.02;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	4a3a      	ldr	r2, [pc, #232]	; (8001a44 <App_Controll+0x4e4>)
 800195c:	601a      	str	r2, [r3, #0]
 		LineFollower->Kd = 350;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	4a39      	ldr	r2, [pc, #228]	; (8001a48 <App_Controll+0x4e8>)
 8001962:	605a      	str	r2, [r3, #4]
 	  }
 	  /*RA-1-final-slower*/
 	  if(RxData == 'o')
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	2b6f      	cmp	r3, #111	; 0x6f
 8001968:	d11f      	bne.n	80019aa <App_Controll+0x44a>
 	  {
 	    LineFollower->Base_speed_R = 143;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	228f      	movs	r2, #143	; 0x8f
 800196e:	609a      	str	r2, [r3, #8]
 	    LineFollower->Base_speed_L = 143;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	228f      	movs	r2, #143	; 0x8f
 8001974:	60da      	str	r2, [r3, #12]
 	   	LineFollower->Max_speed_L = 182;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	22b6      	movs	r2, #182	; 0xb6
 800197a:	615a      	str	r2, [r3, #20]
 	  	LineFollower->Max_speed_R = 182;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	22b6      	movs	r2, #182	; 0xb6
 8001980:	611a      	str	r2, [r3, #16]
 	  	LineFollower->Sharp_bend_speed_right = -76;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8001988:	619a      	str	r2, [r3, #24]
 		LineFollower->Sharp_bend_speed_left = 90;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	225a      	movs	r2, #90	; 0x5a
 800198e:	61da      	str	r2, [r3, #28]
 		LineFollower->Bend_speed_right = -50;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001996:	621a      	str	r2, [r3, #32]
 		LineFollower->Bend_speed_left = 100;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	2264      	movs	r2, #100	; 0x64
 800199c:	625a      	str	r2, [r3, #36]	; 0x24
 		LineFollower->Kp = 0.02;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	4a28      	ldr	r2, [pc, #160]	; (8001a44 <App_Controll+0x4e4>)
 80019a2:	601a      	str	r2, [r3, #0]
 		LineFollower->Kd = 350;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	4a28      	ldr	r2, [pc, #160]	; (8001a48 <App_Controll+0x4e8>)
 80019a8:	605a      	str	r2, [r3, #4]
 	   }
 	   /*RA-2-eliminations-faster*/
 	   if(RxData == 'u')
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	2b75      	cmp	r3, #117	; 0x75
 80019ae:	d11f      	bne.n	80019f0 <App_Controll+0x490>
 	   {
 	     LineFollower->Base_speed_R = 153;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	2299      	movs	r2, #153	; 0x99
 80019b4:	609a      	str	r2, [r3, #8]
 	     LineFollower->Base_speed_L = 153;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	2299      	movs	r2, #153	; 0x99
 80019ba:	60da      	str	r2, [r3, #12]
 	     LineFollower->Max_speed_L = 187;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	22bb      	movs	r2, #187	; 0xbb
 80019c0:	615a      	str	r2, [r3, #20]
 	   	 LineFollower->Max_speed_R = 187;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	22bb      	movs	r2, #187	; 0xbb
 80019c6:	611a      	str	r2, [r3, #16]
 	  	 LineFollower->Sharp_bend_speed_right = -76;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 80019ce:	619a      	str	r2, [r3, #24]
 	 	 LineFollower->Sharp_bend_speed_left = 90;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	225a      	movs	r2, #90	; 0x5a
 80019d4:	61da      	str	r2, [r3, #28]
 	 	 LineFollower->Bend_speed_right = -50;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	f06f 0231 	mvn.w	r2, #49	; 0x31
 80019dc:	621a      	str	r2, [r3, #32]
 	 	 LineFollower->Bend_speed_left = 100;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	2264      	movs	r2, #100	; 0x64
 80019e2:	625a      	str	r2, [r3, #36]	; 0x24
 	 	 LineFollower->Kp = 0.02;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	4a17      	ldr	r2, [pc, #92]	; (8001a44 <App_Controll+0x4e4>)
 80019e8:	601a      	str	r2, [r3, #0]
 	 	 LineFollower->Kd = 350;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	4a16      	ldr	r2, [pc, #88]	; (8001a48 <App_Controll+0x4e8>)
 80019ee:	605a      	str	r2, [r3, #4]
 	   }
 	  /*Gruzik2.1 Robo Comp 2024r 1*/
 	  if(RxData == 'p')
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	2b70      	cmp	r3, #112	; 0x70
 80019f4:	d12a      	bne.n	8001a4c <App_Controll+0x4ec>
 	  {
 		 LineFollower->Base_speed_R = 143;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	228f      	movs	r2, #143	; 0x8f
 80019fa:	609a      	str	r2, [r3, #8]
 		 LineFollower->Base_speed_L = 143;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	228f      	movs	r2, #143	; 0x8f
 8001a00:	60da      	str	r2, [r3, #12]
 		 LineFollower->Max_speed_L = 182;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	22b6      	movs	r2, #182	; 0xb6
 8001a06:	615a      	str	r2, [r3, #20]
 		 LineFollower->Max_speed_R = 182;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	22b6      	movs	r2, #182	; 0xb6
 8001a0c:	611a      	str	r2, [r3, #16]
 		 LineFollower->Sharp_bend_speed_right = -76;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8001a14:	619a      	str	r2, [r3, #24]
 		 LineFollower->Sharp_bend_speed_left = 90;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	225a      	movs	r2, #90	; 0x5a
 8001a1a:	61da      	str	r2, [r3, #28]
 		 LineFollower->Bend_speed_right = -40;//40
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	f06f 0227 	mvn.w	r2, #39	; 0x27
 8001a22:	621a      	str	r2, [r3, #32]
 		 LineFollower->Bend_speed_left = 110;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	226e      	movs	r2, #110	; 0x6e
 8001a28:	625a      	str	r2, [r3, #36]	; 0x24
 		 LineFollower->Kp = 0.02;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	4a05      	ldr	r2, [pc, #20]	; (8001a44 <App_Controll+0x4e4>)
 8001a2e:	601a      	str	r2, [r3, #0]
 		 LineFollower->Kd = 350;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	4a05      	ldr	r2, [pc, #20]	; (8001a48 <App_Controll+0x4e8>)
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	e009      	b.n	8001a4c <App_Controll+0x4ec>
 8001a38:	42a00000 	.word	0x42a00000
 8001a3c:	3d89374c 	.word	0x3d89374c
 8001a40:	42be0000 	.word	0x42be0000
 8001a44:	3ca3d70a 	.word	0x3ca3d70a
 8001a48:	43af0000 	.word	0x43af0000
 	  }
 	  /*Gruzik2.1 Robo Comp 2024 2*/
 	  if(RxData == 'r')
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	2b72      	cmp	r3, #114	; 0x72
 8001a50:	d11f      	bne.n	8001a92 <App_Controll+0x532>
 	  {
 		 LineFollower->Base_speed_R = 153;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	2299      	movs	r2, #153	; 0x99
 8001a56:	609a      	str	r2, [r3, #8]
 		 LineFollower->Base_speed_L = 153;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	2299      	movs	r2, #153	; 0x99
 8001a5c:	60da      	str	r2, [r3, #12]
 		 LineFollower->Max_speed_L = 187;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	22bb      	movs	r2, #187	; 0xbb
 8001a62:	615a      	str	r2, [r3, #20]
 		 LineFollower->Max_speed_R = 187;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	22bb      	movs	r2, #187	; 0xbb
 8001a68:	611a      	str	r2, [r3, #16]
 		 LineFollower->Sharp_bend_speed_right = -76;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8001a70:	619a      	str	r2, [r3, #24]
 		 LineFollower->Sharp_bend_speed_left = 90;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	225a      	movs	r2, #90	; 0x5a
 8001a76:	61da      	str	r2, [r3, #28]
 		 LineFollower->Bend_speed_right = -40;//40
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	f06f 0227 	mvn.w	r2, #39	; 0x27
 8001a7e:	621a      	str	r2, [r3, #32]
 		 LineFollower->Bend_speed_left = 110;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	226e      	movs	r2, #110	; 0x6e
 8001a84:	625a      	str	r2, [r3, #36]	; 0x24
 		 LineFollower->Kp = 0.02;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <App_Controll+0x53c>)
 8001a8a:	601a      	str	r2, [r3, #0]
 		 LineFollower->Kd = 350;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <App_Controll+0x540>)
 8001a90:	605a      	str	r2, [r3, #4]
 	   }
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	3ca3d70a 	.word	0x3ca3d70a
 8001aa0:	43af0000 	.word	0x43af0000

08001aa4 <Mode_change>:

static void Mode_change(LineFollower_t *LF)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001aac:	490c      	ldr	r1, [pc, #48]	; (8001ae0 <Mode_change+0x3c>)
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f006 fa12 	bl	8007ed8 <strtok>
 8001ab4:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 2)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00b      	beq.n	8001ad6 <Mode_change+0x32>
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f7fe fb50 	bl	8000164 <strlen>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d805      	bhi.n	8001ad6 <Mode_change+0x32>
	{
		App_Controll(ParsePointer[0], LF);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff fd45 	bl	8001560 <App_Controll>
	}
}
 8001ad6:	bf00      	nop
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	0800aa70 	.word	0x0800aa70

08001ae4 <Parser_Parse>:
void Parser_Parse(uint8_t *ReceivedData, LineFollower_t *LineFollower)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
	char *ParsePointer = strtok((char*)ReceivedData, "=");
 8001aee:	4935      	ldr	r1, [pc, #212]	; (8001bc4 <Parser_Parse+0xe0>)
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f006 f9f1 	bl	8007ed8 <strtok>
 8001af6:	60f8      	str	r0, [r7, #12]

	if(!strcmp("Kp",ParsePointer))
 8001af8:	68f9      	ldr	r1, [r7, #12]
 8001afa:	4833      	ldr	r0, [pc, #204]	; (8001bc8 <Parser_Parse+0xe4>)
 8001afc:	f7fe fb28 	bl	8000150 <strcmp>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d103      	bne.n	8001b0e <Parser_Parse+0x2a>
	{
		kp_change(LineFollower);
 8001b06:	6838      	ldr	r0, [r7, #0]
 8001b08:	f7ff fbe2 	bl	80012d0 <kp_change>
	}
	else if(!strcmp("Mode",ParsePointer))
	{
		Mode_change(LineFollower);
	}
}
 8001b0c:	e056      	b.n	8001bbc <Parser_Parse+0xd8>
	else if(!strcmp("Kd",ParsePointer))
 8001b0e:	68f9      	ldr	r1, [r7, #12]
 8001b10:	482e      	ldr	r0, [pc, #184]	; (8001bcc <Parser_Parse+0xe8>)
 8001b12:	f7fe fb1d 	bl	8000150 <strcmp>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d103      	bne.n	8001b24 <Parser_Parse+0x40>
		kd_change(LineFollower);
 8001b1c:	6838      	ldr	r0, [r7, #0]
 8001b1e:	f7ff fbfd 	bl	800131c <kd_change>
}
 8001b22:	e04b      	b.n	8001bbc <Parser_Parse+0xd8>
	else if(!strcmp("Base_speed",ParsePointer))
 8001b24:	68f9      	ldr	r1, [r7, #12]
 8001b26:	482a      	ldr	r0, [pc, #168]	; (8001bd0 <Parser_Parse+0xec>)
 8001b28:	f7fe fb12 	bl	8000150 <strcmp>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d103      	bne.n	8001b3a <Parser_Parse+0x56>
		Base_speed_change(LineFollower);
 8001b32:	6838      	ldr	r0, [r7, #0]
 8001b34:	f7ff fc18 	bl	8001368 <Base_speed_change>
}
 8001b38:	e040      	b.n	8001bbc <Parser_Parse+0xd8>
	else if(!strcmp("Max_speed",ParsePointer))
 8001b3a:	68f9      	ldr	r1, [r7, #12]
 8001b3c:	4825      	ldr	r0, [pc, #148]	; (8001bd4 <Parser_Parse+0xf0>)
 8001b3e:	f7fe fb07 	bl	8000150 <strcmp>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d103      	bne.n	8001b50 <Parser_Parse+0x6c>
		Max_speed_change(LineFollower);
 8001b48:	6838      	ldr	r0, [r7, #0]
 8001b4a:	f7ff fc3f 	bl	80013cc <Max_speed_change>
}
 8001b4e:	e035      	b.n	8001bbc <Parser_Parse+0xd8>
	else if(!strcmp("Sharp_bend_speed_right",ParsePointer))
 8001b50:	68f9      	ldr	r1, [r7, #12]
 8001b52:	4821      	ldr	r0, [pc, #132]	; (8001bd8 <Parser_Parse+0xf4>)
 8001b54:	f7fe fafc 	bl	8000150 <strcmp>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d103      	bne.n	8001b66 <Parser_Parse+0x82>
		Sharp_bend_speed_right_change(LineFollower);
 8001b5e:	6838      	ldr	r0, [r7, #0]
 8001b60:	f7ff fc66 	bl	8001430 <Sharp_bend_speed_right_change>
}
 8001b64:	e02a      	b.n	8001bbc <Parser_Parse+0xd8>
	else if(!strcmp("Sharp_bend_speed_left",ParsePointer))
 8001b66:	68f9      	ldr	r1, [r7, #12]
 8001b68:	481c      	ldr	r0, [pc, #112]	; (8001bdc <Parser_Parse+0xf8>)
 8001b6a:	f7fe faf1 	bl	8000150 <strcmp>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d103      	bne.n	8001b7c <Parser_Parse+0x98>
		Sharp_bend_speed_left_change(LineFollower);
 8001b74:	6838      	ldr	r0, [r7, #0]
 8001b76:	f7ff fc81 	bl	800147c <Sharp_bend_speed_left_change>
}
 8001b7a:	e01f      	b.n	8001bbc <Parser_Parse+0xd8>
	else if(!strcmp("Bend_speed_right",ParsePointer))
 8001b7c:	68f9      	ldr	r1, [r7, #12]
 8001b7e:	4818      	ldr	r0, [pc, #96]	; (8001be0 <Parser_Parse+0xfc>)
 8001b80:	f7fe fae6 	bl	8000150 <strcmp>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d103      	bne.n	8001b92 <Parser_Parse+0xae>
		Bend_speed_right_change(LineFollower);
 8001b8a:	6838      	ldr	r0, [r7, #0]
 8001b8c:	f7ff fc9c 	bl	80014c8 <Bend_speed_right_change>
}
 8001b90:	e014      	b.n	8001bbc <Parser_Parse+0xd8>
	else if(!strcmp("Bend_speed_left",ParsePointer))
 8001b92:	68f9      	ldr	r1, [r7, #12]
 8001b94:	4813      	ldr	r0, [pc, #76]	; (8001be4 <Parser_Parse+0x100>)
 8001b96:	f7fe fadb 	bl	8000150 <strcmp>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d103      	bne.n	8001ba8 <Parser_Parse+0xc4>
		Bend_speed_left_change(LineFollower);
 8001ba0:	6838      	ldr	r0, [r7, #0]
 8001ba2:	f7ff fcb7 	bl	8001514 <Bend_speed_left_change>
}
 8001ba6:	e009      	b.n	8001bbc <Parser_Parse+0xd8>
	else if(!strcmp("Mode",ParsePointer))
 8001ba8:	68f9      	ldr	r1, [r7, #12]
 8001baa:	480f      	ldr	r0, [pc, #60]	; (8001be8 <Parser_Parse+0x104>)
 8001bac:	f7fe fad0 	bl	8000150 <strcmp>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d102      	bne.n	8001bbc <Parser_Parse+0xd8>
		Mode_change(LineFollower);
 8001bb6:	6838      	ldr	r0, [r7, #0]
 8001bb8:	f7ff ff74 	bl	8001aa4 <Mode_change>
}
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	0800aa74 	.word	0x0800aa74
 8001bc8:	0800aa78 	.word	0x0800aa78
 8001bcc:	0800aa7c 	.word	0x0800aa7c
 8001bd0:	0800aa80 	.word	0x0800aa80
 8001bd4:	0800aa8c 	.word	0x0800aa8c
 8001bd8:	0800aa98 	.word	0x0800aa98
 8001bdc:	0800aab0 	.word	0x0800aab0
 8001be0:	0800aac8 	.word	0x0800aac8
 8001be4:	0800aadc 	.word	0x0800aadc
 8001be8:	0800aaec 	.word	0x0800aaec

08001bec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001bfc:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <MX_ADC1_Init+0x74>)
 8001bfe:	4a19      	ldr	r2, [pc, #100]	; (8001c64 <MX_ADC1_Init+0x78>)
 8001c00:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c02:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <MX_ADC1_Init+0x74>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c08:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <MX_ADC1_Init+0x74>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c0e:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <MX_ADC1_Init+0x74>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <MX_ADC1_Init+0x74>)
 8001c16:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001c1a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c1c:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <MX_ADC1_Init+0x74>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001c22:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <MX_ADC1_Init+0x74>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c28:	480d      	ldr	r0, [pc, #52]	; (8001c60 <MX_ADC1_Init+0x74>)
 8001c2a:	f001 fb97 	bl	800335c <HAL_ADC_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001c34:	f000 fe9e 	bl	8002974 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001c38:	2309      	movs	r3, #9
 8001c3a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	4619      	mov	r1, r3
 8001c48:	4805      	ldr	r0, [pc, #20]	; (8001c60 <MX_ADC1_Init+0x74>)
 8001c4a:	f001 fe1f 	bl	800388c <HAL_ADC_ConfigChannel>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001c54:	f000 fe8e 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c58:	bf00      	nop
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000208 	.word	0x20000208
 8001c64:	40012400 	.word	0x40012400

08001c68 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 0310 	add.w	r3, r7, #16
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <HAL_ADC_MspInit+0x6c>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d121      	bne.n	8001ccc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c88:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <HAL_ADC_MspInit+0x70>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	4a12      	ldr	r2, [pc, #72]	; (8001cd8 <HAL_ADC_MspInit+0x70>)
 8001c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c92:	6193      	str	r3, [r2, #24]
 8001c94:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <HAL_ADC_MspInit+0x70>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca0:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <HAL_ADC_MspInit+0x70>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	4a0c      	ldr	r2, [pc, #48]	; (8001cd8 <HAL_ADC_MspInit+0x70>)
 8001ca6:	f043 0308 	orr.w	r3, r3, #8
 8001caa:	6193      	str	r3, [r2, #24]
 8001cac:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_ADC_MspInit+0x70>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc0:	f107 0310 	add.w	r3, r7, #16
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4805      	ldr	r0, [pc, #20]	; (8001cdc <HAL_ADC_MspInit+0x74>)
 8001cc8:	f002 f934 	bl	8003f34 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001ccc:	bf00      	nop
 8001cce:	3720      	adds	r7, #32
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40012400 	.word	0x40012400
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40010c00 	.word	0x40010c00

08001ce0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce6:	f107 0310 	add.w	r3, r7, #16
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf4:	4b46      	ldr	r3, [pc, #280]	; (8001e10 <MX_GPIO_Init+0x130>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	4a45      	ldr	r2, [pc, #276]	; (8001e10 <MX_GPIO_Init+0x130>)
 8001cfa:	f043 0310 	orr.w	r3, r3, #16
 8001cfe:	6193      	str	r3, [r2, #24]
 8001d00:	4b43      	ldr	r3, [pc, #268]	; (8001e10 <MX_GPIO_Init+0x130>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	f003 0310 	and.w	r3, r3, #16
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d0c:	4b40      	ldr	r3, [pc, #256]	; (8001e10 <MX_GPIO_Init+0x130>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	4a3f      	ldr	r2, [pc, #252]	; (8001e10 <MX_GPIO_Init+0x130>)
 8001d12:	f043 0320 	orr.w	r3, r3, #32
 8001d16:	6193      	str	r3, [r2, #24]
 8001d18:	4b3d      	ldr	r3, [pc, #244]	; (8001e10 <MX_GPIO_Init+0x130>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	f003 0320 	and.w	r3, r3, #32
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d24:	4b3a      	ldr	r3, [pc, #232]	; (8001e10 <MX_GPIO_Init+0x130>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	4a39      	ldr	r2, [pc, #228]	; (8001e10 <MX_GPIO_Init+0x130>)
 8001d2a:	f043 0304 	orr.w	r3, r3, #4
 8001d2e:	6193      	str	r3, [r2, #24]
 8001d30:	4b37      	ldr	r3, [pc, #220]	; (8001e10 <MX_GPIO_Init+0x130>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3c:	4b34      	ldr	r3, [pc, #208]	; (8001e10 <MX_GPIO_Init+0x130>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	4a33      	ldr	r2, [pc, #204]	; (8001e10 <MX_GPIO_Init+0x130>)
 8001d42:	f043 0308 	orr.w	r3, r3, #8
 8001d46:	6193      	str	r3, [r2, #24]
 8001d48:	4b31      	ldr	r3, [pc, #196]	; (8001e10 <MX_GPIO_Init+0x130>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	f003 0308 	and.w	r3, r3, #8
 8001d50:	603b      	str	r3, [r7, #0]
 8001d52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_GPIO_Port, LD_Pin, GPIO_PIN_SET);
 8001d54:	2201      	movs	r2, #1
 8001d56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d5a:	482e      	ldr	r0, [pc, #184]	; (8001e14 <MX_GPIO_Init+0x134>)
 8001d5c:	f002 fa85 	bl	800426a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSOR8_Pin|SENSOR7_Pin|SENSOR6_Pin|SENSOR5_Pin
 8001d60:	2200      	movs	r2, #0
 8001d62:	21ff      	movs	r1, #255	; 0xff
 8001d64:	482c      	ldr	r0, [pc, #176]	; (8001e18 <MX_GPIO_Init+0x138>)
 8001d66:	f002 fa80 	bl	800426a <HAL_GPIO_WritePin>
                          |SENSOR4_Pin|SENSOR3_Pin|SENSOR2_Pin|SENSOR1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDON_Pin|BIN1L_Pin|BIN1R_Pin|AIN2L_Pin
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f24c 0171 	movw	r1, #49265	; 0xc071
 8001d70:	482a      	ldr	r0, [pc, #168]	; (8001e1c <MX_GPIO_Init+0x13c>)
 8001d72:	f002 fa7a 	bl	800426a <HAL_GPIO_WritePin>
                          |AIN1R_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_Pin;
 8001d76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d84:	2302      	movs	r3, #2
 8001d86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD_GPIO_Port, &GPIO_InitStruct);
 8001d88:	f107 0310 	add.w	r3, r7, #16
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4821      	ldr	r0, [pc, #132]	; (8001e14 <MX_GPIO_Init+0x134>)
 8001d90:	f002 f8d0 	bl	8003f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR8_Pin|SENSOR7_Pin|SENSOR6_Pin|SENSOR5_Pin
 8001d94:	23bf      	movs	r3, #191	; 0xbf
 8001d96:	613b      	str	r3, [r7, #16]
                          |SENSOR4_Pin|SENSOR3_Pin|SENSOR1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001da0:	2303      	movs	r3, #3
 8001da2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da4:	f107 0310 	add.w	r3, r7, #16
 8001da8:	4619      	mov	r1, r3
 8001daa:	481b      	ldr	r0, [pc, #108]	; (8001e18 <MX_GPIO_Init+0x138>)
 8001dac:	f002 f8c2 	bl	8003f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSOR2_Pin;
 8001db0:	2340      	movs	r3, #64	; 0x40
 8001db2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db4:	2301      	movs	r3, #1
 8001db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSOR2_GPIO_Port, &GPIO_InitStruct);
 8001dc0:	f107 0310 	add.w	r3, r7, #16
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4814      	ldr	r0, [pc, #80]	; (8001e18 <MX_GPIO_Init+0x138>)
 8001dc8:	f002 f8b4 	bl	8003f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LEDON_Pin|BIN1L_Pin|BIN1R_Pin|AIN2L_Pin
 8001dcc:	f24c 0331 	movw	r3, #49201	; 0xc031
 8001dd0:	613b      	str	r3, [r7, #16]
                          |AIN1R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dde:	f107 0310 	add.w	r3, r7, #16
 8001de2:	4619      	mov	r1, r3
 8001de4:	480d      	ldr	r0, [pc, #52]	; (8001e1c <MX_GPIO_Init+0x13c>)
 8001de6:	f002 f8a5 	bl	8003f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dea:	2340      	movs	r3, #64	; 0x40
 8001dec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dee:	2301      	movs	r3, #1
 8001df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001df6:	2301      	movs	r3, #1
 8001df8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfa:	f107 0310 	add.w	r3, r7, #16
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4806      	ldr	r0, [pc, #24]	; (8001e1c <MX_GPIO_Init+0x13c>)
 8001e02:	f002 f897 	bl	8003f34 <HAL_GPIO_Init>

}
 8001e06:	bf00      	nop
 8001e08:	3720      	adds	r7, #32
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40011000 	.word	0x40011000
 8001e18:	40010800 	.word	0x40010800
 8001e1c:	40010c00 	.word	0x40010c00

08001e20 <Battery_ADC_measurement>:
		break;
	}
	return ret;
}
void Battery_ADC_measurement(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
	/*Start ADC*/
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001e24:	2201      	movs	r2, #1
 8001e26:	2102      	movs	r1, #2
 8001e28:	4827      	ldr	r0, [pc, #156]	; (8001ec8 <Battery_ADC_measurement+0xa8>)
 8001e2a:	f002 fa1e 	bl	800426a <HAL_GPIO_WritePin>
	/*Get ADC value*/
	HAL_ADC_Start(&hadc1);
 8001e2e:	4827      	ldr	r0, [pc, #156]	; (8001ecc <Battery_ADC_measurement+0xac>)
 8001e30:	f001 fb6c 	bl	800350c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
 8001e34:	f04f 31ff 	mov.w	r1, #4294967295
 8001e38:	4824      	ldr	r0, [pc, #144]	; (8001ecc <Battery_ADC_measurement+0xac>)
 8001e3a:	f001 fc15 	bl	8003668 <HAL_ADC_PollForConversion>
	raw_battery = HAL_ADC_GetValue(&hadc1);
 8001e3e:	4823      	ldr	r0, [pc, #140]	; (8001ecc <Battery_ADC_measurement+0xac>)
 8001e40:	f001 fd18 	bl	8003874 <HAL_ADC_GetValue>
 8001e44:	4603      	mov	r3, r0
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <Battery_ADC_measurement+0xb0>)
 8001e4a:	801a      	strh	r2, [r3, #0]
	/*Stop ADC*/
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2102      	movs	r1, #2
 8001e50:	481d      	ldr	r0, [pc, #116]	; (8001ec8 <Battery_ADC_measurement+0xa8>)
 8001e52:	f002 fa0a 	bl	800426a <HAL_GPIO_WritePin>
	//SN_UART_Send(&huart3,"Battery_raw = %hu \r\n ",raw_battery);

	/*Percentages from raw 12bit measurement*/
	if(raw_battery != 0)
 8001e56:	4b1e      	ldr	r3, [pc, #120]	; (8001ed0 <Battery_ADC_measurement+0xb0>)
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d01a      	beq.n	8001e94 <Battery_ADC_measurement+0x74>
	{
		if(raw_battery > max_battery)
 8001e5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ed0 <Battery_ADC_measurement+0xb0>)
 8001e60:	881a      	ldrh	r2, [r3, #0]
 8001e62:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <Battery_ADC_measurement+0xb4>)
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d903      	bls.n	8001e72 <Battery_ADC_measurement+0x52>
		{
			raw_battery = max_battery;
 8001e6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <Battery_ADC_measurement+0xb4>)
 8001e6c:	881a      	ldrh	r2, [r3, #0]
 8001e6e:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <Battery_ADC_measurement+0xb0>)
 8001e70:	801a      	strh	r2, [r3, #0]
		}
		battery_procentage_raw = (raw_battery * 100) / max_battery;
 8001e72:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <Battery_ADC_measurement+0xb0>)
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	2364      	movs	r3, #100	; 0x64
 8001e7a:	fb02 f303 	mul.w	r3, r2, r3
 8001e7e:	4a15      	ldr	r2, [pc, #84]	; (8001ed4 <Battery_ADC_measurement+0xb4>)
 8001e80:	8812      	ldrh	r2, [r2, #0]
 8001e82:	fb93 f3f2 	sdiv	r3, r3, r2
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe ff32 	bl	8000cf0 <__aeabi_i2f>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	4a12      	ldr	r2, [pc, #72]	; (8001ed8 <Battery_ADC_measurement+0xb8>)
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	e003      	b.n	8001e9c <Battery_ADC_measurement+0x7c>
	}
	else
	{
		battery_procentage_raw = 0;
 8001e94:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <Battery_ADC_measurement+0xb8>)
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
	}
	/*Motor speed*/
	Speed_level = ((100 - battery_procentage_raw) + 100) / 100;
 8001e9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <Battery_ADC_measurement+0xb8>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	480e      	ldr	r0, [pc, #56]	; (8001edc <Battery_ADC_measurement+0xbc>)
 8001ea4:	f7fe fe6e 	bl	8000b84 <__aeabi_fsub>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	490c      	ldr	r1, [pc, #48]	; (8001edc <Battery_ADC_measurement+0xbc>)
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fe6b 	bl	8000b88 <__addsf3>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4909      	ldr	r1, [pc, #36]	; (8001edc <Battery_ADC_measurement+0xbc>)
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff f822 	bl	8000f00 <__aeabi_fdiv>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <Battery_ADC_measurement+0xc0>)
 8001ec2:	601a      	str	r2, [r3, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40010c00 	.word	0x40010c00
 8001ecc:	20000208 	.word	0x20000208
 8001ed0:	20000322 	.word	0x20000322
 8001ed4:	20000008 	.word	0x20000008
 8001ed8:	20000324 	.word	0x20000324
 8001edc:	42c80000 	.word	0x42c80000
 8001ee0:	20000000 	.word	0x20000000

08001ee4 <delay_us>:
void delay_us (uint16_t us)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 8001eee:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <delay_us+0x2c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 8001ef6:	bf00      	nop
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <delay_us+0x2c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001efe:	88fb      	ldrh	r3, [r7, #6]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d3f9      	bcc.n	8001ef8 <delay_us+0x14>
}
 8001f04:	bf00      	nop
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr
 8001f10:	20000374 	.word	0x20000374

08001f14 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 0308 	add.w	r3, r7, #8
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001f2e:	887b      	ldrh	r3, [r7, #2]
 8001f30:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f32:	2301      	movs	r3, #1
 8001f34:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f36:	2302      	movs	r3, #2
 8001f38:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001f3a:	f107 0308 	add.w	r3, r7, #8
 8001f3e:	4619      	mov	r1, r3
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f001 fff7 	bl	8003f34 <HAL_GPIO_Init>
}
 8001f46:	bf00      	nop
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b086      	sub	sp, #24
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	460b      	mov	r3, r1
 8001f58:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5a:	f107 0308 	add.w	r3, r7, #8
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	609a      	str	r2, [r3, #8]
 8001f66:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001f68:	887b      	ldrh	r3, [r7, #2]
 8001f6a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f70:	2301      	movs	r3, #1
 8001f72:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001f74:	f107 0308 	add.w	r3, r7, #8
 8001f78:	4619      	mov	r1, r3
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f001 ffda 	bl	8003f34 <HAL_GPIO_Init>
}
 8001f80:	bf00      	nop
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <motor_control>:


void motor_control (double pos_right, double pos_left)
{
 8001f88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f8c:	b084      	sub	sp, #16
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001f94:	e9c7 2300 	strd	r2, r3, [r7]
	if (pos_left < 0 )
 8001f98:	f04f 0200 	mov.w	r2, #0
 8001f9c:	f04f 0300 	mov.w	r3, #0
 8001fa0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fa4:	f7fe fd14 	bl	80009d0 <__aeabi_dcmplt>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d02f      	beq.n	800200e <motor_control+0x86>
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_2, (int)((ARR*pos_left*-1)*Speed_level));
 8001fae:	4b64      	ldr	r3, [pc, #400]	; (8002140 <motor_control+0x1b8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe fa30 	bl	8000418 <__aeabi_i2d>
 8001fb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fbc:	f7fe fa96 	bl	80004ec <__aeabi_dmul>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4690      	mov	r8, r2
 8001fc6:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001fca:	4b5e      	ldr	r3, [pc, #376]	; (8002144 <motor_control+0x1bc>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fa34 	bl	800043c <__aeabi_f2d>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4640      	mov	r0, r8
 8001fda:	4649      	mov	r1, r9
 8001fdc:	f7fe fa86 	bl	80004ec <__aeabi_dmul>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f7fe fd30 	bl	8000a4c <__aeabi_d2iz>
 8001fec:	4602      	mov	r2, r0
 8001fee:	4b56      	ldr	r3, [pc, #344]	; (8002148 <motor_control+0x1c0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ffa:	4854      	ldr	r0, [pc, #336]	; (800214c <motor_control+0x1c4>)
 8001ffc:	f002 f935 	bl	800426a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8002000:	2200      	movs	r2, #0
 8002002:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002006:	4851      	ldr	r0, [pc, #324]	; (800214c <motor_control+0x1c4>)
 8002008:	f002 f92f 	bl	800426a <HAL_GPIO_WritePin>
 800200c:	e02d      	b.n	800206a <motor_control+0xe2>
	}
	else
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_2, (int)((ARR*pos_left)*Speed_level));
 800200e:	4b4c      	ldr	r3, [pc, #304]	; (8002140 <motor_control+0x1b8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fa00 	bl	8000418 <__aeabi_i2d>
 8002018:	e9d7 2300 	ldrd	r2, r3, [r7]
 800201c:	f7fe fa66 	bl	80004ec <__aeabi_dmul>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4690      	mov	r8, r2
 8002026:	4699      	mov	r9, r3
 8002028:	4b46      	ldr	r3, [pc, #280]	; (8002144 <motor_control+0x1bc>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe fa05 	bl	800043c <__aeabi_f2d>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4640      	mov	r0, r8
 8002038:	4649      	mov	r1, r9
 800203a:	f7fe fa57 	bl	80004ec <__aeabi_dmul>
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	4610      	mov	r0, r2
 8002044:	4619      	mov	r1, r3
 8002046:	f7fe fd01 	bl	8000a4c <__aeabi_d2iz>
 800204a:	4602      	mov	r2, r0
 800204c:	4b3e      	ldr	r3, [pc, #248]	; (8002148 <motor_control+0x1c0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8002052:	2200      	movs	r2, #0
 8002054:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002058:	483c      	ldr	r0, [pc, #240]	; (800214c <motor_control+0x1c4>)
 800205a:	f002 f906 	bl	800426a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800205e:	2201      	movs	r2, #1
 8002060:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002064:	4839      	ldr	r0, [pc, #228]	; (800214c <motor_control+0x1c4>)
 8002066:	f002 f900 	bl	800426a <HAL_GPIO_WritePin>
	}
	if (pos_right < 0 )
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	f04f 0300 	mov.w	r3, #0
 8002072:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002076:	f7fe fcab 	bl	80009d0 <__aeabi_dcmplt>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d02d      	beq.n	80020dc <motor_control+0x154>
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_4, (int)((ARR*pos_right*-1)*Speed_level));
 8002080:	4b2f      	ldr	r3, [pc, #188]	; (8002140 <motor_control+0x1b8>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe f9c7 	bl	8000418 <__aeabi_i2d>
 800208a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800208e:	f7fe fa2d 	bl	80004ec <__aeabi_dmul>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4614      	mov	r4, r2
 8002098:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800209c:	4b29      	ldr	r3, [pc, #164]	; (8002144 <motor_control+0x1bc>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe f9cb 	bl	800043c <__aeabi_f2d>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4620      	mov	r0, r4
 80020ac:	4629      	mov	r1, r5
 80020ae:	f7fe fa1d 	bl	80004ec <__aeabi_dmul>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4610      	mov	r0, r2
 80020b8:	4619      	mov	r1, r3
 80020ba:	f7fe fcc7 	bl	8000a4c <__aeabi_d2iz>
 80020be:	4602      	mov	r2, r0
 80020c0:	4b21      	ldr	r3, [pc, #132]	; (8002148 <motor_control+0x1c0>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80020c6:	2201      	movs	r2, #1
 80020c8:	2120      	movs	r1, #32
 80020ca:	4820      	ldr	r0, [pc, #128]	; (800214c <motor_control+0x1c4>)
 80020cc:	f002 f8cd 	bl	800426a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80020d0:	2200      	movs	r2, #0
 80020d2:	2110      	movs	r1, #16
 80020d4:	481d      	ldr	r0, [pc, #116]	; (800214c <motor_control+0x1c4>)
 80020d6:	f002 f8c8 	bl	800426a <HAL_GPIO_WritePin>
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_4, (int)((ARR*pos_right)*Speed_level));
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
	}
}
 80020da:	e02b      	b.n	8002134 <motor_control+0x1ac>
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_4, (int)((ARR*pos_right)*Speed_level));
 80020dc:	4b18      	ldr	r3, [pc, #96]	; (8002140 <motor_control+0x1b8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe f999 	bl	8000418 <__aeabi_i2d>
 80020e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020ea:	f7fe f9ff 	bl	80004ec <__aeabi_dmul>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4614      	mov	r4, r2
 80020f4:	461d      	mov	r5, r3
 80020f6:	4b13      	ldr	r3, [pc, #76]	; (8002144 <motor_control+0x1bc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe f99e 	bl	800043c <__aeabi_f2d>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4620      	mov	r0, r4
 8002106:	4629      	mov	r1, r5
 8002108:	f7fe f9f0 	bl	80004ec <__aeabi_dmul>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4610      	mov	r0, r2
 8002112:	4619      	mov	r1, r3
 8002114:	f7fe fc9a 	bl	8000a4c <__aeabi_d2iz>
 8002118:	4602      	mov	r2, r0
 800211a:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <motor_control+0x1c0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002120:	2200      	movs	r2, #0
 8002122:	2120      	movs	r1, #32
 8002124:	4809      	ldr	r0, [pc, #36]	; (800214c <motor_control+0x1c4>)
 8002126:	f002 f8a0 	bl	800426a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800212a:	2201      	movs	r2, #1
 800212c:	2110      	movs	r1, #16
 800212e:	4807      	ldr	r0, [pc, #28]	; (800214c <motor_control+0x1c4>)
 8002130:	f002 f89b 	bl	800426a <HAL_GPIO_WritePin>
}
 8002134:	bf00      	nop
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800213e:	bf00      	nop
 8002140:	20000004 	.word	0x20000004
 8002144:	20000000 	.word	0x20000000
 8002148:	20000404 	.word	0x20000404
 800214c:	40010c00 	.word	0x40010c00

08002150 <sharp_turn>:


void sharp_turn () {
 8002150:	b5b0      	push	{r4, r5, r7, lr}
 8002152:	af00      	add	r7, sp, #0

	if (Last_idle < 25)
 8002154:	4b2c      	ldr	r3, [pc, #176]	; (8002208 <sharp_turn+0xb8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2b18      	cmp	r3, #24
 800215a:	dc29      	bgt.n	80021b0 <sharp_turn+0x60>
	{
		if (Last_end == 1)
 800215c:	4b2b      	ldr	r3, [pc, #172]	; (800220c <sharp_turn+0xbc>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d112      	bne.n	800218a <sharp_turn+0x3a>
			motor_control(GRUZIK.Sharp_bend_speed_right, GRUZIK.Sharp_bend_speed_left);
 8002164:	4b2a      	ldr	r3, [pc, #168]	; (8002210 <sharp_turn+0xc0>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe f955 	bl	8000418 <__aeabi_i2d>
 800216e:	4604      	mov	r4, r0
 8002170:	460d      	mov	r5, r1
 8002172:	4b27      	ldr	r3, [pc, #156]	; (8002210 <sharp_turn+0xc0>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe f94e 	bl	8000418 <__aeabi_i2d>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4620      	mov	r0, r4
 8002182:	4629      	mov	r1, r5
 8002184:	f7ff ff00 	bl	8001f88 <motor_control>
		if (Last_end == 1)
			motor_control(GRUZIK.Bend_speed_right, GRUZIK.Bend_speed_left);
		else
			motor_control(GRUZIK.Bend_speed_left, GRUZIK.Bend_speed_right);
	}
}
 8002188:	e03b      	b.n	8002202 <sharp_turn+0xb2>
			motor_control(GRUZIK.Sharp_bend_speed_left, GRUZIK.Sharp_bend_speed_right);
 800218a:	4b21      	ldr	r3, [pc, #132]	; (8002210 <sharp_turn+0xc0>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe f942 	bl	8000418 <__aeabi_i2d>
 8002194:	4604      	mov	r4, r0
 8002196:	460d      	mov	r5, r1
 8002198:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <sharp_turn+0xc0>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe f93b 	bl	8000418 <__aeabi_i2d>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4620      	mov	r0, r4
 80021a8:	4629      	mov	r1, r5
 80021aa:	f7ff feed 	bl	8001f88 <motor_control>
}
 80021ae:	e028      	b.n	8002202 <sharp_turn+0xb2>
		if (Last_end == 1)
 80021b0:	4b16      	ldr	r3, [pc, #88]	; (800220c <sharp_turn+0xbc>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d112      	bne.n	80021de <sharp_turn+0x8e>
			motor_control(GRUZIK.Bend_speed_right, GRUZIK.Bend_speed_left);
 80021b8:	4b15      	ldr	r3, [pc, #84]	; (8002210 <sharp_turn+0xc0>)
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe f92b 	bl	8000418 <__aeabi_i2d>
 80021c2:	4604      	mov	r4, r0
 80021c4:	460d      	mov	r5, r1
 80021c6:	4b12      	ldr	r3, [pc, #72]	; (8002210 <sharp_turn+0xc0>)
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe f924 	bl	8000418 <__aeabi_i2d>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4620      	mov	r0, r4
 80021d6:	4629      	mov	r1, r5
 80021d8:	f7ff fed6 	bl	8001f88 <motor_control>
}
 80021dc:	e011      	b.n	8002202 <sharp_turn+0xb2>
			motor_control(GRUZIK.Bend_speed_left, GRUZIK.Bend_speed_right);
 80021de:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <sharp_turn+0xc0>)
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe f918 	bl	8000418 <__aeabi_i2d>
 80021e8:	4604      	mov	r4, r0
 80021ea:	460d      	mov	r5, r1
 80021ec:	4b08      	ldr	r3, [pc, #32]	; (8002210 <sharp_turn+0xc0>)
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe f911 	bl	8000418 <__aeabi_i2d>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	4620      	mov	r0, r4
 80021fc:	4629      	mov	r1, r5
 80021fe:	f7ff fec3 	bl	8001f88 <motor_control>
}
 8002202:	bf00      	nop
 8002204:	bdb0      	pop	{r4, r5, r7, pc}
 8002206:	bf00      	nop
 8002208:	20000318 	.word	0x20000318
 800220c:	20000314 	.word	0x20000314
 8002210:	20000238 	.word	0x20000238

08002214 <QTR8_read>:
int QTR8_read ()
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDON_GPIO_Port, LEDON_Pin, 1);
 800221a:	2201      	movs	r2, #1
 800221c:	2101      	movs	r1, #1
 800221e:	48a2      	ldr	r0, [pc, #648]	; (80024a8 <QTR8_read+0x294>)
 8002220:	f002 f823 	bl	800426a <HAL_GPIO_WritePin>

	Set_Pin_Output(SENSOR1_GPIO_Port, SENSOR1_Pin);
 8002224:	2180      	movs	r1, #128	; 0x80
 8002226:	48a1      	ldr	r0, [pc, #644]	; (80024ac <QTR8_read+0x298>)
 8002228:	f7ff fe74 	bl	8001f14 <Set_Pin_Output>
	Set_Pin_Output(SENSOR2_GPIO_Port, SENSOR2_Pin);
 800222c:	2140      	movs	r1, #64	; 0x40
 800222e:	489f      	ldr	r0, [pc, #636]	; (80024ac <QTR8_read+0x298>)
 8002230:	f7ff fe70 	bl	8001f14 <Set_Pin_Output>
	Set_Pin_Output(SENSOR3_GPIO_Port, SENSOR3_Pin);
 8002234:	2120      	movs	r1, #32
 8002236:	489d      	ldr	r0, [pc, #628]	; (80024ac <QTR8_read+0x298>)
 8002238:	f7ff fe6c 	bl	8001f14 <Set_Pin_Output>
	Set_Pin_Output(SENSOR4_GPIO_Port, SENSOR4_Pin);
 800223c:	2110      	movs	r1, #16
 800223e:	489b      	ldr	r0, [pc, #620]	; (80024ac <QTR8_read+0x298>)
 8002240:	f7ff fe68 	bl	8001f14 <Set_Pin_Output>
	Set_Pin_Output(SENSOR5_GPIO_Port, SENSOR5_Pin);
 8002244:	2108      	movs	r1, #8
 8002246:	4899      	ldr	r0, [pc, #612]	; (80024ac <QTR8_read+0x298>)
 8002248:	f7ff fe64 	bl	8001f14 <Set_Pin_Output>
	Set_Pin_Output(SENSOR6_GPIO_Port, SENSOR6_Pin);
 800224c:	2104      	movs	r1, #4
 800224e:	4897      	ldr	r0, [pc, #604]	; (80024ac <QTR8_read+0x298>)
 8002250:	f7ff fe60 	bl	8001f14 <Set_Pin_Output>
	Set_Pin_Output(SENSOR7_GPIO_Port, SENSOR7_Pin);
 8002254:	2102      	movs	r1, #2
 8002256:	4895      	ldr	r0, [pc, #596]	; (80024ac <QTR8_read+0x298>)
 8002258:	f7ff fe5c 	bl	8001f14 <Set_Pin_Output>
	Set_Pin_Output(SENSOR8_GPIO_Port, SENSOR8_Pin);
 800225c:	2101      	movs	r1, #1
 800225e:	4893      	ldr	r0, [pc, #588]	; (80024ac <QTR8_read+0x298>)
 8002260:	f7ff fe58 	bl	8001f14 <Set_Pin_Output>

	HAL_GPIO_WritePin (SENSOR1_GPIO_Port, SENSOR1_Pin, 1);
 8002264:	2201      	movs	r2, #1
 8002266:	2180      	movs	r1, #128	; 0x80
 8002268:	4890      	ldr	r0, [pc, #576]	; (80024ac <QTR8_read+0x298>)
 800226a:	f001 fffe 	bl	800426a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR2_GPIO_Port, SENSOR2_Pin, 1);
 800226e:	2201      	movs	r2, #1
 8002270:	2140      	movs	r1, #64	; 0x40
 8002272:	488e      	ldr	r0, [pc, #568]	; (80024ac <QTR8_read+0x298>)
 8002274:	f001 fff9 	bl	800426a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR3_GPIO_Port, SENSOR3_Pin, 1);
 8002278:	2201      	movs	r2, #1
 800227a:	2120      	movs	r1, #32
 800227c:	488b      	ldr	r0, [pc, #556]	; (80024ac <QTR8_read+0x298>)
 800227e:	f001 fff4 	bl	800426a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR4_GPIO_Port, SENSOR4_Pin, 1);
 8002282:	2201      	movs	r2, #1
 8002284:	2110      	movs	r1, #16
 8002286:	4889      	ldr	r0, [pc, #548]	; (80024ac <QTR8_read+0x298>)
 8002288:	f001 ffef 	bl	800426a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR5_GPIO_Port, SENSOR5_Pin, 1);
 800228c:	2201      	movs	r2, #1
 800228e:	2108      	movs	r1, #8
 8002290:	4886      	ldr	r0, [pc, #536]	; (80024ac <QTR8_read+0x298>)
 8002292:	f001 ffea 	bl	800426a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR6_GPIO_Port, SENSOR6_Pin, 1);
 8002296:	2201      	movs	r2, #1
 8002298:	2104      	movs	r1, #4
 800229a:	4884      	ldr	r0, [pc, #528]	; (80024ac <QTR8_read+0x298>)
 800229c:	f001 ffe5 	bl	800426a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR7_GPIO_Port, SENSOR7_Pin, 1);
 80022a0:	2201      	movs	r2, #1
 80022a2:	2102      	movs	r1, #2
 80022a4:	4881      	ldr	r0, [pc, #516]	; (80024ac <QTR8_read+0x298>)
 80022a6:	f001 ffe0 	bl	800426a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR8_GPIO_Port, SENSOR8_Pin, 1);
 80022aa:	2201      	movs	r2, #1
 80022ac:	2101      	movs	r1, #1
 80022ae:	487f      	ldr	r0, [pc, #508]	; (80024ac <QTR8_read+0x298>)
 80022b0:	f001 ffdb 	bl	800426a <HAL_GPIO_WritePin>

	delay_us(10);
 80022b4:	200a      	movs	r0, #10
 80022b6:	f7ff fe15 	bl	8001ee4 <delay_us>

	Set_Pin_Input(SENSOR1_GPIO_Port, SENSOR1_Pin);
 80022ba:	2180      	movs	r1, #128	; 0x80
 80022bc:	487b      	ldr	r0, [pc, #492]	; (80024ac <QTR8_read+0x298>)
 80022be:	f7ff fe46 	bl	8001f4e <Set_Pin_Input>
	Set_Pin_Input(SENSOR2_GPIO_Port, SENSOR2_Pin);
 80022c2:	2140      	movs	r1, #64	; 0x40
 80022c4:	4879      	ldr	r0, [pc, #484]	; (80024ac <QTR8_read+0x298>)
 80022c6:	f7ff fe42 	bl	8001f4e <Set_Pin_Input>
	Set_Pin_Input(SENSOR3_GPIO_Port, SENSOR3_Pin);
 80022ca:	2120      	movs	r1, #32
 80022cc:	4877      	ldr	r0, [pc, #476]	; (80024ac <QTR8_read+0x298>)
 80022ce:	f7ff fe3e 	bl	8001f4e <Set_Pin_Input>
	Set_Pin_Input(SENSOR4_GPIO_Port, SENSOR4_Pin);
 80022d2:	2110      	movs	r1, #16
 80022d4:	4875      	ldr	r0, [pc, #468]	; (80024ac <QTR8_read+0x298>)
 80022d6:	f7ff fe3a 	bl	8001f4e <Set_Pin_Input>
	Set_Pin_Input(SENSOR5_GPIO_Port, SENSOR5_Pin);
 80022da:	2108      	movs	r1, #8
 80022dc:	4873      	ldr	r0, [pc, #460]	; (80024ac <QTR8_read+0x298>)
 80022de:	f7ff fe36 	bl	8001f4e <Set_Pin_Input>
	Set_Pin_Input(SENSOR6_GPIO_Port, SENSOR6_Pin);
 80022e2:	2104      	movs	r1, #4
 80022e4:	4871      	ldr	r0, [pc, #452]	; (80024ac <QTR8_read+0x298>)
 80022e6:	f7ff fe32 	bl	8001f4e <Set_Pin_Input>
	Set_Pin_Input(SENSOR7_GPIO_Port, SENSOR7_Pin);
 80022ea:	2102      	movs	r1, #2
 80022ec:	486f      	ldr	r0, [pc, #444]	; (80024ac <QTR8_read+0x298>)
 80022ee:	f7ff fe2e 	bl	8001f4e <Set_Pin_Input>
	Set_Pin_Input(SENSOR8_GPIO_Port, SENSOR8_Pin);
 80022f2:	2101      	movs	r1, #1
 80022f4:	486d      	ldr	r0, [pc, #436]	; (80024ac <QTR8_read+0x298>)
 80022f6:	f7ff fe2a 	bl	8001f4e <Set_Pin_Input>

	// Threshold
	 delay_us(4500);
 80022fa:	f241 1094 	movw	r0, #4500	; 0x1194
 80022fe:	f7ff fdf1 	bl	8001ee4 <delay_us>
//	 sensory[7] = HAL_GPIO_ReadPin(SENSOR8_GPIO_Port, SENSOR8_Pin);
//	 uint8_t Message[64];
//	 sprintf((char*)Message,"S1: %d S2: %d S3: %d S4: %d S5: %d S6: %d S7: %d S8: %d\n\r", sensory[0],sensory[1],sensory[2],sensory[3],sensory[4],sensory[5],sensory[6],sensory[7]);
//	 HAL_UART_Transmit(&huart3, Message, strlen((char*)Message), 100);

	Sensors_read = 0x00000000;
 8002302:	4b6b      	ldr	r3, [pc, #428]	; (80024b0 <QTR8_read+0x29c>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
	int pos = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	607b      	str	r3, [r7, #4]
  int active = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	603b      	str	r3, [r7, #0]

	if (HAL_GPIO_ReadPin(SENSOR1_GPIO_Port, SENSOR1_Pin)) {
 8002310:	2180      	movs	r1, #128	; 0x80
 8002312:	4866      	ldr	r0, [pc, #408]	; (80024ac <QTR8_read+0x298>)
 8002314:	f001 ff92 	bl	800423c <HAL_GPIO_ReadPin>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00f      	beq.n	800233e <QTR8_read+0x12a>
		Sensors_read |= 0x00000001;
 800231e:	4b64      	ldr	r3, [pc, #400]	; (80024b0 <QTR8_read+0x29c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	4a62      	ldr	r2, [pc, #392]	; (80024b0 <QTR8_read+0x29c>)
 8002328:	6013      	str	r3, [r2, #0]
		pos += 1000;//1000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002330:	607b      	str	r3, [r7, #4]
    active++;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	3301      	adds	r3, #1
 8002336:	603b      	str	r3, [r7, #0]
		Last_end = 1;
 8002338:	4b5e      	ldr	r3, [pc, #376]	; (80024b4 <QTR8_read+0x2a0>)
 800233a:	2201      	movs	r2, #1
 800233c:	601a      	str	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(SENSOR2_GPIO_Port, SENSOR2_Pin)) {
 800233e:	2140      	movs	r1, #64	; 0x40
 8002340:	485a      	ldr	r0, [pc, #360]	; (80024ac <QTR8_read+0x298>)
 8002342:	f001 ff7b 	bl	800423c <HAL_GPIO_ReadPin>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00c      	beq.n	8002366 <QTR8_read+0x152>
		Sensors_read |= 0x00000010;
 800234c:	4b58      	ldr	r3, [pc, #352]	; (80024b0 <QTR8_read+0x29c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f043 0310 	orr.w	r3, r3, #16
 8002354:	4a56      	ldr	r2, [pc, #344]	; (80024b0 <QTR8_read+0x29c>)
 8002356:	6013      	str	r3, [r2, #0]
		pos += 2000;//2000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800235e:	607b      	str	r3, [r7, #4]
    active++;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	3301      	adds	r3, #1
 8002364:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR3_GPIO_Port, SENSOR3_Pin)) {
 8002366:	2120      	movs	r1, #32
 8002368:	4850      	ldr	r0, [pc, #320]	; (80024ac <QTR8_read+0x298>)
 800236a:	f001 ff67 	bl	800423c <HAL_GPIO_ReadPin>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00c      	beq.n	800238e <QTR8_read+0x17a>
		Sensors_read |= 0x00000100;
 8002374:	4b4e      	ldr	r3, [pc, #312]	; (80024b0 <QTR8_read+0x29c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237c:	4a4c      	ldr	r2, [pc, #304]	; (80024b0 <QTR8_read+0x29c>)
 800237e:	6013      	str	r3, [r2, #0]
		pos += 3000;//3000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8002386:	607b      	str	r3, [r7, #4]
    active++;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	3301      	adds	r3, #1
 800238c:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR4_GPIO_Port, SENSOR4_Pin)) {
 800238e:	2110      	movs	r1, #16
 8002390:	4846      	ldr	r0, [pc, #280]	; (80024ac <QTR8_read+0x298>)
 8002392:	f001 ff53 	bl	800423c <HAL_GPIO_ReadPin>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00c      	beq.n	80023b6 <QTR8_read+0x1a2>
		Sensors_read |= 0x00001000;
 800239c:	4b44      	ldr	r3, [pc, #272]	; (80024b0 <QTR8_read+0x29c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023a4:	4a42      	ldr	r2, [pc, #264]	; (80024b0 <QTR8_read+0x29c>)
 80023a6:	6013      	str	r3, [r2, #0]
		pos += 4000;//4000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 80023ae:	607b      	str	r3, [r7, #4]
    active++;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	3301      	adds	r3, #1
 80023b4:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR5_GPIO_Port, SENSOR5_Pin)) {
 80023b6:	2108      	movs	r1, #8
 80023b8:	483c      	ldr	r0, [pc, #240]	; (80024ac <QTR8_read+0x298>)
 80023ba:	f001 ff3f 	bl	800423c <HAL_GPIO_ReadPin>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00d      	beq.n	80023e0 <QTR8_read+0x1cc>
		Sensors_read |= 0x00010000;
 80023c4:	4b3a      	ldr	r3, [pc, #232]	; (80024b0 <QTR8_read+0x29c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023cc:	4a38      	ldr	r2, [pc, #224]	; (80024b0 <QTR8_read+0x29c>)
 80023ce:	6013      	str	r3, [r2, #0]
		pos += 5000;//5000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80023d6:	3308      	adds	r3, #8
 80023d8:	607b      	str	r3, [r7, #4]
    active++;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	3301      	adds	r3, #1
 80023de:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR6_GPIO_Port, SENSOR6_Pin)) {
 80023e0:	2104      	movs	r1, #4
 80023e2:	4832      	ldr	r0, [pc, #200]	; (80024ac <QTR8_read+0x298>)
 80023e4:	f001 ff2a 	bl	800423c <HAL_GPIO_ReadPin>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00d      	beq.n	800240a <QTR8_read+0x1f6>
		Sensors_read |= 0x00100000;
 80023ee:	4b30      	ldr	r3, [pc, #192]	; (80024b0 <QTR8_read+0x29c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023f6:	4a2e      	ldr	r2, [pc, #184]	; (80024b0 <QTR8_read+0x29c>)
 80023f8:	6013      	str	r3, [r2, #0]
		pos += 6000;//6000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8002400:	3310      	adds	r3, #16
 8002402:	607b      	str	r3, [r7, #4]
    active++;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	3301      	adds	r3, #1
 8002408:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR7_GPIO_Port, SENSOR7_Pin)) {
 800240a:	2102      	movs	r1, #2
 800240c:	4827      	ldr	r0, [pc, #156]	; (80024ac <QTR8_read+0x298>)
 800240e:	f001 ff15 	bl	800423c <HAL_GPIO_ReadPin>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00d      	beq.n	8002434 <QTR8_read+0x220>
		Sensors_read |= 0x01000000;
 8002418:	4b25      	ldr	r3, [pc, #148]	; (80024b0 <QTR8_read+0x29c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002420:	4a23      	ldr	r2, [pc, #140]	; (80024b0 <QTR8_read+0x29c>)
 8002422:	6013      	str	r3, [r2, #0]
		pos += 7000;//7000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f503 53da 	add.w	r3, r3, #6976	; 0x1b40
 800242a:	3318      	adds	r3, #24
 800242c:	607b      	str	r3, [r7, #4]
    active++;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	3301      	adds	r3, #1
 8002432:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR8_GPIO_Port, SENSOR8_Pin)) {
 8002434:	2101      	movs	r1, #1
 8002436:	481d      	ldr	r0, [pc, #116]	; (80024ac <QTR8_read+0x298>)
 8002438:	f001 ff00 	bl	800423c <HAL_GPIO_ReadPin>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00f      	beq.n	8002462 <QTR8_read+0x24e>
		Sensors_read |= 0x10000000;
 8002442:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <QTR8_read+0x29c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800244a:	4a19      	ldr	r2, [pc, #100]	; (80024b0 <QTR8_read+0x29c>)
 800244c:	6013      	str	r3, [r2, #0]
		pos += 8000;//8000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8002454:	607b      	str	r3, [r7, #4]
    active++;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	3301      	adds	r3, #1
 800245a:	603b      	str	r3, [r7, #0]
		Last_end = 0;
 800245c:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <QTR8_read+0x2a0>)
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
  }

  HAL_GPIO_WritePin(LEDON_GPIO_Port, LEDON_Pin, 0);
 8002462:	2200      	movs	r2, #0
 8002464:	2101      	movs	r1, #1
 8002466:	4810      	ldr	r0, [pc, #64]	; (80024a8 <QTR8_read+0x294>)
 8002468:	f001 feff 	bl	800426a <HAL_GPIO_WritePin>

  actives = active;
 800246c:	4a12      	ldr	r2, [pc, #72]	; (80024b8 <QTR8_read+0x2a4>)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	6013      	str	r3, [r2, #0]
	Position = pos/active;
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	fb92 f3f3 	sdiv	r3, r2, r3
 800247a:	4a10      	ldr	r2, [pc, #64]	; (80024bc <QTR8_read+0x2a8>)
 800247c:	6013      	str	r3, [r2, #0]

	if (actives == 0)
 800247e:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <QTR8_read+0x2a4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d105      	bne.n	8002492 <QTR8_read+0x27e>
		Last_idle++;
 8002486:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <QTR8_read+0x2ac>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	3301      	adds	r3, #1
 800248c:	4a0c      	ldr	r2, [pc, #48]	; (80024c0 <QTR8_read+0x2ac>)
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	e002      	b.n	8002498 <QTR8_read+0x284>
	else
		Last_idle = 0;
 8002492:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <QTR8_read+0x2ac>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]

	return pos/active;
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	fb92 f3f3 	sdiv	r3, r2, r3
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40010c00 	.word	0x40010c00
 80024ac:	40010800 	.word	0x40010800
 80024b0:	200002c8 	.word	0x200002c8
 80024b4:	20000314 	.word	0x20000314
 80024b8:	2000031c 	.word	0x2000031c
 80024bc:	200002cc 	.word	0x200002cc
 80024c0:	20000318 	.word	0x20000318

080024c4 <forward_brake>:


void forward_brake(int pos_right, int pos_left)
{
 80024c4:	b5b0      	push	{r4, r5, r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
	if (actives == 0)
 80024ce:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <forward_brake+0x3c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d102      	bne.n	80024dc <forward_brake+0x18>
		sharp_turn();
 80024d6:	f7ff fe3b 	bl	8002150 <sharp_turn>
	else
	  motor_control(pos_right, pos_left);
}
 80024da:	e00d      	b.n	80024f8 <forward_brake+0x34>
	  motor_control(pos_right, pos_left);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7fd ff9b 	bl	8000418 <__aeabi_i2d>
 80024e2:	4604      	mov	r4, r0
 80024e4:	460d      	mov	r5, r1
 80024e6:	6838      	ldr	r0, [r7, #0]
 80024e8:	f7fd ff96 	bl	8000418 <__aeabi_i2d>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4620      	mov	r0, r4
 80024f2:	4629      	mov	r1, r5
 80024f4:	f7ff fd48 	bl	8001f88 <motor_control>
}
 80024f8:	bf00      	nop
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002500:	2000031c 	.word	0x2000031c

08002504 <past_errors>:

void past_errors (int error)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  for (int i = 9; i > 0; i--)
 800250c:	2309      	movs	r3, #9
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	e00b      	b.n	800252a <past_errors+0x26>
      Errors[i] = Errors[i-1];
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	3b01      	subs	r3, #1
 8002516:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <past_errors+0x3c>)
 8002518:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800251c:	4908      	ldr	r1, [pc, #32]	; (8002540 <past_errors+0x3c>)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int i = 9; i > 0; i--)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	3b01      	subs	r3, #1
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	dcf0      	bgt.n	8002512 <past_errors+0xe>
  Errors[0] = error;
 8002530:	4a03      	ldr	r2, [pc, #12]	; (8002540 <past_errors+0x3c>)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6013      	str	r3, [r2, #0]
}
 8002536:	bf00      	nop
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr
 8002540:	200002ec 	.word	0x200002ec

08002544 <errors_sum>:

int errors_sum (int index, int abs)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  int sum = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < index; i++)
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	e01a      	b.n	800258e <errors_sum+0x4a>
  {
    if (abs == 1 && Errors[i] < 0)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d10d      	bne.n	800257a <errors_sum+0x36>
 800255e:	4a11      	ldr	r2, [pc, #68]	; (80025a4 <errors_sum+0x60>)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002566:	2b00      	cmp	r3, #0
 8002568:	da07      	bge.n	800257a <errors_sum+0x36>
      sum += -Errors[i];
 800256a:	4a0e      	ldr	r2, [pc, #56]	; (80025a4 <errors_sum+0x60>)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	e006      	b.n	8002588 <errors_sum+0x44>
    else
      sum += Errors[i];
 800257a:	4a0a      	ldr	r2, [pc, #40]	; (80025a4 <errors_sum+0x60>)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	4413      	add	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < index; i++)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	3301      	adds	r3, #1
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	429a      	cmp	r2, r3
 8002594:	dbe0      	blt.n	8002558 <errors_sum+0x14>
  }
  return sum;
 8002596:	68fb      	ldr	r3, [r7, #12]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	200002ec 	.word	0x200002ec

080025a8 <PID_control>:

void PID_control() {
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b087      	sub	sp, #28
 80025ac:	af00      	add	r7, sp, #0
  uint16_t position = QTR8_read();
 80025ae:	f7ff fe31 	bl	8002214 <QTR8_read>
 80025b2:	4603      	mov	r3, r0
 80025b4:	81fb      	strh	r3, [r7, #14]
  int error = 4500 - position;
 80025b6:	89fb      	ldrh	r3, [r7, #14]
 80025b8:	f5c3 538c 	rsb	r3, r3, #4480	; 0x1180
 80025bc:	3314      	adds	r3, #20
 80025be:	60bb      	str	r3, [r7, #8]
  past_errors(error);
 80025c0:	68b8      	ldr	r0, [r7, #8]
 80025c2:	f7ff ff9f 	bl	8002504 <past_errors>

  P = error;
 80025c6:	4a55      	ldr	r2, [pc, #340]	; (800271c <PID_control+0x174>)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	6013      	str	r3, [r2, #0]
  I = errors_sum(5, 0);
 80025cc:	2100      	movs	r1, #0
 80025ce:	2005      	movs	r0, #5
 80025d0:	f7ff ffb8 	bl	8002544 <errors_sum>
 80025d4:	4603      	mov	r3, r0
 80025d6:	4a52      	ldr	r2, [pc, #328]	; (8002720 <PID_control+0x178>)
 80025d8:	6013      	str	r3, [r2, #0]
  D = error - Last_error;
 80025da:	4b52      	ldr	r3, [pc, #328]	; (8002724 <PID_control+0x17c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	4a51      	ldr	r2, [pc, #324]	; (8002728 <PID_control+0x180>)
 80025e4:	6013      	str	r3, [r2, #0]
  R = errors_sum(5, 1);
 80025e6:	2101      	movs	r1, #1
 80025e8:	2005      	movs	r0, #5
 80025ea:	f7ff ffab 	bl	8002544 <errors_sum>
 80025ee:	4603      	mov	r3, r0
 80025f0:	4a4e      	ldr	r2, [pc, #312]	; (800272c <PID_control+0x184>)
 80025f2:	6013      	str	r3, [r2, #0]
  Last_error = error;
 80025f4:	4a4b      	ldr	r2, [pc, #300]	; (8002724 <PID_control+0x17c>)
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	6013      	str	r3, [r2, #0]

  int motorspeed = P*GRUZIK.Kp + I*Ki + D*GRUZIK.Kd;
 80025fa:	4b48      	ldr	r3, [pc, #288]	; (800271c <PID_control+0x174>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe fb76 	bl	8000cf0 <__aeabi_i2f>
 8002604:	4602      	mov	r2, r0
 8002606:	4b4a      	ldr	r3, [pc, #296]	; (8002730 <PID_control+0x188>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4619      	mov	r1, r3
 800260c:	4610      	mov	r0, r2
 800260e:	f7fe fbc3 	bl	8000d98 <__aeabi_fmul>
 8002612:	4603      	mov	r3, r0
 8002614:	461c      	mov	r4, r3
 8002616:	4b42      	ldr	r3, [pc, #264]	; (8002720 <PID_control+0x178>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe fb68 	bl	8000cf0 <__aeabi_i2f>
 8002620:	4602      	mov	r2, r0
 8002622:	4b44      	ldr	r3, [pc, #272]	; (8002734 <PID_control+0x18c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4619      	mov	r1, r3
 8002628:	4610      	mov	r0, r2
 800262a:	f7fe fbb5 	bl	8000d98 <__aeabi_fmul>
 800262e:	4603      	mov	r3, r0
 8002630:	4619      	mov	r1, r3
 8002632:	4620      	mov	r0, r4
 8002634:	f7fe faa8 	bl	8000b88 <__addsf3>
 8002638:	4603      	mov	r3, r0
 800263a:	461c      	mov	r4, r3
 800263c:	4b3a      	ldr	r3, [pc, #232]	; (8002728 <PID_control+0x180>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe fb55 	bl	8000cf0 <__aeabi_i2f>
 8002646:	4602      	mov	r2, r0
 8002648:	4b39      	ldr	r3, [pc, #228]	; (8002730 <PID_control+0x188>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	4619      	mov	r1, r3
 800264e:	4610      	mov	r0, r2
 8002650:	f7fe fba2 	bl	8000d98 <__aeabi_fmul>
 8002654:	4603      	mov	r3, r0
 8002656:	4619      	mov	r1, r3
 8002658:	4620      	mov	r0, r4
 800265a:	f7fe fa95 	bl	8000b88 <__addsf3>
 800265e:	4603      	mov	r3, r0
 8002660:	4618      	mov	r0, r3
 8002662:	f7fe fd5f 	bl	8001124 <__aeabi_f2iz>
 8002666:	4603      	mov	r3, r0
 8002668:	607b      	str	r3, [r7, #4]

  int motorspeedl = GRUZIK.Base_speed_L + motorspeed - R*Kr;
 800266a:	4b31      	ldr	r3, [pc, #196]	; (8002730 <PID_control+0x188>)
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4413      	add	r3, r2
 8002672:	4618      	mov	r0, r3
 8002674:	f7fe fb3c 	bl	8000cf0 <__aeabi_i2f>
 8002678:	4604      	mov	r4, r0
 800267a:	4b2c      	ldr	r3, [pc, #176]	; (800272c <PID_control+0x184>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7fe fb36 	bl	8000cf0 <__aeabi_i2f>
 8002684:	4602      	mov	r2, r0
 8002686:	4b2c      	ldr	r3, [pc, #176]	; (8002738 <PID_control+0x190>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4619      	mov	r1, r3
 800268c:	4610      	mov	r0, r2
 800268e:	f7fe fb83 	bl	8000d98 <__aeabi_fmul>
 8002692:	4603      	mov	r3, r0
 8002694:	4619      	mov	r1, r3
 8002696:	4620      	mov	r0, r4
 8002698:	f7fe fa74 	bl	8000b84 <__aeabi_fsub>
 800269c:	4603      	mov	r3, r0
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe fd40 	bl	8001124 <__aeabi_f2iz>
 80026a4:	4603      	mov	r3, r0
 80026a6:	617b      	str	r3, [r7, #20]
  int motorspeedr = GRUZIK.Base_speed_R - motorspeed - R*Kr;
 80026a8:	4b21      	ldr	r3, [pc, #132]	; (8002730 <PID_control+0x188>)
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fe fb1d 	bl	8000cf0 <__aeabi_i2f>
 80026b6:	4604      	mov	r4, r0
 80026b8:	4b1c      	ldr	r3, [pc, #112]	; (800272c <PID_control+0x184>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fe fb17 	bl	8000cf0 <__aeabi_i2f>
 80026c2:	4602      	mov	r2, r0
 80026c4:	4b1c      	ldr	r3, [pc, #112]	; (8002738 <PID_control+0x190>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4619      	mov	r1, r3
 80026ca:	4610      	mov	r0, r2
 80026cc:	f7fe fb64 	bl	8000d98 <__aeabi_fmul>
 80026d0:	4603      	mov	r3, r0
 80026d2:	4619      	mov	r1, r3
 80026d4:	4620      	mov	r0, r4
 80026d6:	f7fe fa55 	bl	8000b84 <__aeabi_fsub>
 80026da:	4603      	mov	r3, r0
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fe fd21 	bl	8001124 <__aeabi_f2iz>
 80026e2:	4603      	mov	r3, r0
 80026e4:	613b      	str	r3, [r7, #16]

  if (motorspeedl > GRUZIK.Max_speed_L)
 80026e6:	4b12      	ldr	r3, [pc, #72]	; (8002730 <PID_control+0x188>)
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	dd02      	ble.n	80026f6 <PID_control+0x14e>
    motorspeedl = GRUZIK.Max_speed_L;
 80026f0:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <PID_control+0x188>)
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	617b      	str	r3, [r7, #20]
  if (motorspeedr > GRUZIK.Max_speed_R)
 80026f6:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <PID_control+0x188>)
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	dd02      	ble.n	8002706 <PID_control+0x15e>
    motorspeedr = GRUZIK.Max_speed_R;
 8002700:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <PID_control+0x188>)
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	613b      	str	r3, [r7, #16]

  	Battery_ADC_measurement();
 8002706:	f7ff fb8b 	bl	8001e20 <Battery_ADC_measurement>
	forward_brake(motorspeedr, motorspeedl);
 800270a:	6979      	ldr	r1, [r7, #20]
 800270c:	6938      	ldr	r0, [r7, #16]
 800270e:	f7ff fed9 	bl	80024c4 <forward_brake>
}
 8002712:	bf00      	nop
 8002714:	371c      	adds	r7, #28
 8002716:	46bd      	mov	sp, r7
 8002718:	bd90      	pop	{r4, r7, pc}
 800271a:	bf00      	nop
 800271c:	200002d8 	.word	0x200002d8
 8002720:	200002dc 	.word	0x200002dc
 8002724:	200002e8 	.word	0x200002e8
 8002728:	200002e0 	.word	0x200002e0
 800272c:	200002e4 	.word	0x200002e4
 8002730:	20000238 	.word	0x20000238
 8002734:	200002d0 	.word	0x200002d0
 8002738:	200002d4 	.word	0x200002d4

0800273c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002740:	f000 fdaa 	bl	8003298 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002744:	f000 f88a 	bl	800285c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002748:	f7ff faca 	bl	8001ce0 <MX_GPIO_Init>
  MX_TIM1_Init();
 800274c:	f000 fa6a 	bl	8002c24 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002750:	f000 fb06 	bl	8002d60 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002754:	f000 fb52 	bl	8002dfc <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8002758:	f000 fc94 	bl	8003084 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800275c:	f000 fcbc 	bl	80030d8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8002760:	f7ff fa44 	bl	8001bec <MX_ADC1_Init>
  MX_TIM2_Init();
 8002764:	f000 fab0 	bl	8002cc8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /*Initial values for PID*/
  	GRUZIK.Kp = 0.02;
 8002768:	4b2e      	ldr	r3, [pc, #184]	; (8002824 <main+0xe8>)
 800276a:	4a2f      	ldr	r2, [pc, #188]	; (8002828 <main+0xec>)
 800276c:	601a      	str	r2, [r3, #0]
	GRUZIK.Kd = 350;
 800276e:	4b2d      	ldr	r3, [pc, #180]	; (8002824 <main+0xe8>)
 8002770:	4a2e      	ldr	r2, [pc, #184]	; (800282c <main+0xf0>)
 8002772:	605a      	str	r2, [r3, #4]

	GRUZIK.Base_speed_R = 92;
 8002774:	4b2b      	ldr	r3, [pc, #172]	; (8002824 <main+0xe8>)
 8002776:	225c      	movs	r2, #92	; 0x5c
 8002778:	609a      	str	r2, [r3, #8]
	GRUZIK.Base_speed_L = 92;
 800277a:	4b2a      	ldr	r3, [pc, #168]	; (8002824 <main+0xe8>)
 800277c:	225c      	movs	r2, #92	; 0x5c
 800277e:	60da      	str	r2, [r3, #12]
	GRUZIK.Max_speed_R = 140;
 8002780:	4b28      	ldr	r3, [pc, #160]	; (8002824 <main+0xe8>)
 8002782:	228c      	movs	r2, #140	; 0x8c
 8002784:	611a      	str	r2, [r3, #16]
	GRUZIK.Max_speed_L = 140;
 8002786:	4b27      	ldr	r3, [pc, #156]	; (8002824 <main+0xe8>)
 8002788:	228c      	movs	r2, #140	; 0x8c
 800278a:	615a      	str	r2, [r3, #20]

	/*Sharp turn speed*/
	GRUZIK.Sharp_bend_speed_right=-90;
 800278c:	4b25      	ldr	r3, [pc, #148]	; (8002824 <main+0xe8>)
 800278e:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8002792:	619a      	str	r2, [r3, #24]
	GRUZIK.Sharp_bend_speed_left=185;
 8002794:	4b23      	ldr	r3, [pc, #140]	; (8002824 <main+0xe8>)
 8002796:	22b9      	movs	r2, #185	; 0xb9
 8002798:	61da      	str	r2, [r3, #28]
	GRUZIK.Bend_speed_right=-50;
 800279a:	4b22      	ldr	r3, [pc, #136]	; (8002824 <main+0xe8>)
 800279c:	f06f 0231 	mvn.w	r2, #49	; 0x31
 80027a0:	621a      	str	r2, [r3, #32]
	GRUZIK.Bend_speed_left=100;
 80027a2:	4b20      	ldr	r3, [pc, #128]	; (8002824 <main+0xe8>)
 80027a4:	2264      	movs	r2, #100	; 0x64
 80027a6:	625a      	str	r2, [r3, #36]	; 0x24

  /*Start receiving data from Blue tooth*/
   HAL_UART_Receive_IT(&huart1, &RxData, 1);
 80027a8:	2201      	movs	r2, #1
 80027aa:	4921      	ldr	r1, [pc, #132]	; (8002830 <main+0xf4>)
 80027ac:	4821      	ldr	r0, [pc, #132]	; (8002834 <main+0xf8>)
 80027ae:	f003 fbad 	bl	8005f0c <HAL_UART_Receive_IT>

   /*Start and compare timers*/
   HAL_TIM_Base_Start_IT(&htim1);
 80027b2:	4821      	ldr	r0, [pc, #132]	; (8002838 <main+0xfc>)
 80027b4:	f002 fb88 	bl	8004ec8 <HAL_TIM_Base_Start_IT>
   HAL_TIM_Base_Start(&htim2);
 80027b8:	4820      	ldr	r0, [pc, #128]	; (800283c <main+0x100>)
 80027ba:	f002 fb3b 	bl	8004e34 <HAL_TIM_Base_Start>
  //HAL_TIM_Base_Start(&htim3);
   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80027be:	2100      	movs	r1, #0
 80027c0:	481f      	ldr	r0, [pc, #124]	; (8002840 <main+0x104>)
 80027c2:	f002 fc83 	bl	80050cc <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80027c6:	2104      	movs	r1, #4
 80027c8:	481d      	ldr	r0, [pc, #116]	; (8002840 <main+0x104>)
 80027ca:	f002 fc7f 	bl	80050cc <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80027ce:	2108      	movs	r1, #8
 80027d0:	481b      	ldr	r0, [pc, #108]	; (8002840 <main+0x104>)
 80027d2:	f002 fc7b 	bl	80050cc <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80027d6:	210c      	movs	r1, #12
 80027d8:	4819      	ldr	r0, [pc, #100]	; (8002840 <main+0x104>)
 80027da:	f002 fc77 	bl	80050cc <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  PID_control();
 80027de:	f7ff fee3 	bl	80025a8 <PID_control>

	  /*If battery is low stop robot*/
	  if(battery_procentage_raw < 75)
 80027e2:	4b18      	ldr	r3, [pc, #96]	; (8002844 <main+0x108>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4918      	ldr	r1, [pc, #96]	; (8002848 <main+0x10c>)
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fe fc73 	bl	80010d4 <__aeabi_fcmplt>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d004      	beq.n	80027fe <main+0xc2>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80027f4:	2200      	movs	r2, #0
 80027f6:	2140      	movs	r1, #64	; 0x40
 80027f8:	4814      	ldr	r0, [pc, #80]	; (800284c <main+0x110>)
 80027fa:	f001 fd36 	bl	800426a <HAL_GPIO_WritePin>
	  }

	  if(ReceivedLines > 0)
 80027fe:	4b14      	ldr	r3, [pc, #80]	; (8002850 <main+0x114>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0eb      	beq.n	80027de <main+0xa2>
	  {
		  Parser_TakeLine(&ReceiveBuffer, &ReceivedData);
 8002806:	4913      	ldr	r1, [pc, #76]	; (8002854 <main+0x118>)
 8002808:	4813      	ldr	r0, [pc, #76]	; (8002858 <main+0x11c>)
 800280a:	f7fe fd3b 	bl	8001284 <Parser_TakeLine>
		  Parser_Parse(ReceivedData,&GRUZIK);
 800280e:	4905      	ldr	r1, [pc, #20]	; (8002824 <main+0xe8>)
 8002810:	4810      	ldr	r0, [pc, #64]	; (8002854 <main+0x118>)
 8002812:	f7ff f967 	bl	8001ae4 <Parser_Parse>

		  ReceivedLines--;
 8002816:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <main+0x114>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	3b01      	subs	r3, #1
 800281c:	b2da      	uxtb	r2, r3
 800281e:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <main+0x114>)
 8002820:	701a      	strb	r2, [r3, #0]
	  PID_control();
 8002822:	e7dc      	b.n	80027de <main+0xa2>
 8002824:	20000238 	.word	0x20000238
 8002828:	3ca3d70a 	.word	0x3ca3d70a
 800282c:	43af0000 	.word	0x43af0000
 8002830:	20000320 	.word	0x20000320
 8002834:	2000044c 	.word	0x2000044c
 8002838:	2000032c 	.word	0x2000032c
 800283c:	20000374 	.word	0x20000374
 8002840:	20000404 	.word	0x20000404
 8002844:	20000324 	.word	0x20000324
 8002848:	42960000 	.word	0x42960000
 800284c:	40010c00 	.word	0x40010c00
 8002850:	200002c4 	.word	0x200002c4
 8002854:	200002a4 	.word	0x200002a4
 8002858:	20000260 	.word	0x20000260

0800285c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b094      	sub	sp, #80	; 0x50
 8002860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002862:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002866:	2228      	movs	r2, #40	; 0x28
 8002868:	2100      	movs	r1, #0
 800286a:	4618      	mov	r0, r3
 800286c:	f004 f8b4 	bl	80069d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002870:	f107 0314 	add.w	r3, r7, #20
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002880:	1d3b      	adds	r3, r7, #4
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	605a      	str	r2, [r3, #4]
 8002888:	609a      	str	r2, [r3, #8]
 800288a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800288c:	2301      	movs	r3, #1
 800288e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002890:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002896:	2300      	movs	r3, #0
 8002898:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800289a:	2301      	movs	r3, #1
 800289c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800289e:	2302      	movs	r3, #2
 80028a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80028a8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80028ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028b2:	4618      	mov	r0, r3
 80028b4:	f001 fcf2 	bl	800429c <HAL_RCC_OscConfig>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80028be:	f000 f859 	bl	8002974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028c2:	230f      	movs	r3, #15
 80028c4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028c6:	2302      	movs	r3, #2
 80028c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80028ce:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80028d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80028d4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028da:	f107 0314 	add.w	r3, r7, #20
 80028de:	2102      	movs	r1, #2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f001 ff5d 	bl	80047a0 <HAL_RCC_ClockConfig>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80028ec:	f000 f842 	bl	8002974 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80028f0:	2302      	movs	r3, #2
 80028f2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80028f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028f8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028fa:	1d3b      	adds	r3, r7, #4
 80028fc:	4618      	mov	r0, r3
 80028fe:	f002 f8dd 	bl	8004abc <HAL_RCCEx_PeriphCLKConfig>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002908:	f000 f834 	bl	8002974 <Error_Handler>
  }
}
 800290c:	bf00      	nop
 800290e:	3750      	adds	r7, #80	; 0x50
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a0f      	ldr	r2, [pc, #60]	; (8002960 <HAL_UART_RxCpltCallback+0x4c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d117      	bne.n	8002956 <HAL_UART_RxCpltCallback+0x42>
	{
		if(RB_Write(&ReceiveBuffer, RxData) == RB_OK)
 8002926:	4b0f      	ldr	r3, [pc, #60]	; (8002964 <HAL_UART_RxCpltCallback+0x50>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	4619      	mov	r1, r3
 800292c:	480e      	ldr	r0, [pc, #56]	; (8002968 <HAL_UART_RxCpltCallback+0x54>)
 800292e:	f7fe fc57 	bl	80011e0 <RB_Write>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d109      	bne.n	800294c <HAL_UART_RxCpltCallback+0x38>
		{
			if(RxData == ENDLINE)
 8002938:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <HAL_UART_RxCpltCallback+0x50>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b0a      	cmp	r3, #10
 800293e:	d105      	bne.n	800294c <HAL_UART_RxCpltCallback+0x38>
			{
				ReceivedLines++;
 8002940:	4b0a      	ldr	r3, [pc, #40]	; (800296c <HAL_UART_RxCpltCallback+0x58>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	3301      	adds	r3, #1
 8002946:	b2da      	uxtb	r2, r3
 8002948:	4b08      	ldr	r3, [pc, #32]	; (800296c <HAL_UART_RxCpltCallback+0x58>)
 800294a:	701a      	strb	r2, [r3, #0]
			}
		}
    	HAL_UART_Receive_IT(&huart1,&RxData, 1);
 800294c:	2201      	movs	r2, #1
 800294e:	4905      	ldr	r1, [pc, #20]	; (8002964 <HAL_UART_RxCpltCallback+0x50>)
 8002950:	4807      	ldr	r0, [pc, #28]	; (8002970 <HAL_UART_RxCpltCallback+0x5c>)
 8002952:	f003 fadb 	bl	8005f0c <HAL_UART_Receive_IT>
	}
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40013800 	.word	0x40013800
 8002964:	20000320 	.word	0x20000320
 8002968:	20000260 	.word	0x20000260
 800296c:	200002c4 	.word	0x200002c4
 8002970:	2000044c 	.word	0x2000044c

08002974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002978:	b672      	cpsid	i
}
 800297a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800297c:	e7fe      	b.n	800297c <Error_Handler+0x8>
	...

08002980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002986:	4b15      	ldr	r3, [pc, #84]	; (80029dc <HAL_MspInit+0x5c>)
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	4a14      	ldr	r2, [pc, #80]	; (80029dc <HAL_MspInit+0x5c>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	6193      	str	r3, [r2, #24]
 8002992:	4b12      	ldr	r3, [pc, #72]	; (80029dc <HAL_MspInit+0x5c>)
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800299e:	4b0f      	ldr	r3, [pc, #60]	; (80029dc <HAL_MspInit+0x5c>)
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	4a0e      	ldr	r2, [pc, #56]	; (80029dc <HAL_MspInit+0x5c>)
 80029a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a8:	61d3      	str	r3, [r2, #28]
 80029aa:	4b0c      	ldr	r3, [pc, #48]	; (80029dc <HAL_MspInit+0x5c>)
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b2:	607b      	str	r3, [r7, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80029b6:	4b0a      	ldr	r3, [pc, #40]	; (80029e0 <HAL_MspInit+0x60>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	4a04      	ldr	r2, [pc, #16]	; (80029e0 <HAL_MspInit+0x60>)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029d2:	bf00      	nop
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr
 80029dc:	40021000 	.word	0x40021000
 80029e0:	40010000 	.word	0x40010000

080029e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029e8:	e7fe      	b.n	80029e8 <NMI_Handler+0x4>

080029ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029ea:	b480      	push	{r7}
 80029ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029ee:	e7fe      	b.n	80029ee <HardFault_Handler+0x4>

080029f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029f4:	e7fe      	b.n	80029f4 <MemManage_Handler+0x4>

080029f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029f6:	b480      	push	{r7}
 80029f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029fa:	e7fe      	b.n	80029fa <BusFault_Handler+0x4>

080029fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a00:	e7fe      	b.n	8002a00 <UsageFault_Handler+0x4>

08002a02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a02:	b480      	push	{r7}
 8002a04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a06:	bf00      	nop
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr

08002a0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr

08002a1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr

08002a26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a2a:	f000 fc7b 	bl	8003324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a38:	4802      	ldr	r0, [pc, #8]	; (8002a44 <TIM1_BRK_IRQHandler+0x10>)
 8002a3a:	f002 fbe9 	bl	8005210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	2000032c 	.word	0x2000032c

08002a48 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a4c:	4802      	ldr	r0, [pc, #8]	; (8002a58 <TIM1_UP_IRQHandler+0x10>)
 8002a4e:	f002 fbdf 	bl	8005210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	2000032c 	.word	0x2000032c

08002a5c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a60:	4802      	ldr	r0, [pc, #8]	; (8002a6c <TIM1_TRG_COM_IRQHandler+0x10>)
 8002a62:	f002 fbd5 	bl	8005210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	2000032c 	.word	0x2000032c

08002a70 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a74:	4802      	ldr	r0, [pc, #8]	; (8002a80 <TIM1_CC_IRQHandler+0x10>)
 8002a76:	f002 fbcb 	bl	8005210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	2000032c 	.word	0x2000032c

08002a84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a88:	4802      	ldr	r0, [pc, #8]	; (8002a94 <USART1_IRQHandler+0x10>)
 8002a8a:	f003 fa65 	bl	8005f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	2000044c 	.word	0x2000044c

08002a98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return 1;
 8002a9c:	2301      	movs	r3, #1
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr

08002aa6 <_kill>:

int _kill(int pid, int sig)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ab0:	f003 ff68 	bl	8006984 <__errno>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2216      	movs	r2, #22
 8002ab8:	601a      	str	r2, [r3, #0]
  return -1;
 8002aba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <_exit>:

void _exit (int status)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ace:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff ffe7 	bl	8002aa6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ad8:	e7fe      	b.n	8002ad8 <_exit+0x12>

08002ada <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b086      	sub	sp, #24
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	60f8      	str	r0, [r7, #12]
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
 8002aea:	e00a      	b.n	8002b02 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002aec:	f3af 8000 	nop.w
 8002af0:	4601      	mov	r1, r0
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	60ba      	str	r2, [r7, #8]
 8002af8:	b2ca      	uxtb	r2, r1
 8002afa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	3301      	adds	r3, #1
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	dbf0      	blt.n	8002aec <_read+0x12>
  }

  return len;
 8002b0a:	687b      	ldr	r3, [r7, #4]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	e009      	b.n	8002b3a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	60ba      	str	r2, [r7, #8]
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	3301      	adds	r3, #1
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	dbf1      	blt.n	8002b26 <_write+0x12>
  }
  return len;
 8002b42:	687b      	ldr	r3, [r7, #4]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <_close>:

int _close(int file)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b72:	605a      	str	r2, [r3, #4]
  return 0;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr

08002b80 <_isatty>:

int _isatty(int file)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b88:	2301      	movs	r3, #1
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr

08002b94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bb4:	4a14      	ldr	r2, [pc, #80]	; (8002c08 <_sbrk+0x5c>)
 8002bb6:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <_sbrk+0x60>)
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bc0:	4b13      	ldr	r3, [pc, #76]	; (8002c10 <_sbrk+0x64>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d102      	bne.n	8002bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bc8:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <_sbrk+0x64>)
 8002bca:	4a12      	ldr	r2, [pc, #72]	; (8002c14 <_sbrk+0x68>)
 8002bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bce:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <_sbrk+0x64>)
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d207      	bcs.n	8002bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bdc:	f003 fed2 	bl	8006984 <__errno>
 8002be0:	4603      	mov	r3, r0
 8002be2:	220c      	movs	r2, #12
 8002be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002be6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bea:	e009      	b.n	8002c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bec:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <_sbrk+0x64>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bf2:	4b07      	ldr	r3, [pc, #28]	; (8002c10 <_sbrk+0x64>)
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	4a05      	ldr	r2, [pc, #20]	; (8002c10 <_sbrk+0x64>)
 8002bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20005000 	.word	0x20005000
 8002c0c:	00000400 	.word	0x00000400
 8002c10:	20000328 	.word	0x20000328
 8002c14:	200004f0 	.word	0x200004f0

08002c18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c2a:	f107 0308 	add.w	r3, r7, #8
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	605a      	str	r2, [r3, #4]
 8002c34:	609a      	str	r2, [r3, #8]
 8002c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c38:	463b      	mov	r3, r7
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002c40:	4b1f      	ldr	r3, [pc, #124]	; (8002cc0 <MX_TIM1_Init+0x9c>)
 8002c42:	4a20      	ldr	r2, [pc, #128]	; (8002cc4 <MX_TIM1_Init+0xa0>)
 8002c44:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9000;
 8002c46:	4b1e      	ldr	r3, [pc, #120]	; (8002cc0 <MX_TIM1_Init+0x9c>)
 8002c48:	f242 3228 	movw	r2, #9000	; 0x2328
 8002c4c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002c4e:	4b1c      	ldr	r3, [pc, #112]	; (8002cc0 <MX_TIM1_Init+0x9c>)
 8002c50:	2210      	movs	r2, #16
 8002c52:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002c54:	4b1a      	ldr	r3, [pc, #104]	; (8002cc0 <MX_TIM1_Init+0x9c>)
 8002c56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c5c:	4b18      	ldr	r3, [pc, #96]	; (8002cc0 <MX_TIM1_Init+0x9c>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c62:	4b17      	ldr	r3, [pc, #92]	; (8002cc0 <MX_TIM1_Init+0x9c>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c68:	4b15      	ldr	r3, [pc, #84]	; (8002cc0 <MX_TIM1_Init+0x9c>)
 8002c6a:	2280      	movs	r2, #128	; 0x80
 8002c6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002c6e:	4814      	ldr	r0, [pc, #80]	; (8002cc0 <MX_TIM1_Init+0x9c>)
 8002c70:	f002 f890 	bl	8004d94 <HAL_TIM_Base_Init>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002c7a:	f7ff fe7b 	bl	8002974 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002c84:	f107 0308 	add.w	r3, r7, #8
 8002c88:	4619      	mov	r1, r3
 8002c8a:	480d      	ldr	r0, [pc, #52]	; (8002cc0 <MX_TIM1_Init+0x9c>)
 8002c8c:	f002 fce6 	bl	800565c <HAL_TIM_ConfigClockSource>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002c96:	f7ff fe6d 	bl	8002974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ca2:	463b      	mov	r3, r7
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4806      	ldr	r0, [pc, #24]	; (8002cc0 <MX_TIM1_Init+0x9c>)
 8002ca8:	f003 f870 	bl	8005d8c <HAL_TIMEx_MasterConfigSynchronization>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002cb2:	f7ff fe5f 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002cb6:	bf00      	nop
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	2000032c 	.word	0x2000032c
 8002cc4:	40012c00 	.word	0x40012c00

08002cc8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cce:	f107 0308 	add.w	r3, r7, #8
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	605a      	str	r2, [r3, #4]
 8002cd8:	609a      	str	r2, [r3, #8]
 8002cda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cdc:	463b      	mov	r3, r7
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ce4:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <MX_TIM2_Init+0x94>)
 8002ce6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002cea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 8002cec:	4b1b      	ldr	r3, [pc, #108]	; (8002d5c <MX_TIM2_Init+0x94>)
 8002cee:	2209      	movs	r2, #9
 8002cf0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cf2:	4b1a      	ldr	r3, [pc, #104]	; (8002d5c <MX_TIM2_Init+0x94>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002cf8:	4b18      	ldr	r3, [pc, #96]	; (8002d5c <MX_TIM2_Init+0x94>)
 8002cfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cfe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d00:	4b16      	ldr	r3, [pc, #88]	; (8002d5c <MX_TIM2_Init+0x94>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d06:	4b15      	ldr	r3, [pc, #84]	; (8002d5c <MX_TIM2_Init+0x94>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d0c:	4813      	ldr	r0, [pc, #76]	; (8002d5c <MX_TIM2_Init+0x94>)
 8002d0e:	f002 f841 	bl	8004d94 <HAL_TIM_Base_Init>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002d18:	f7ff fe2c 	bl	8002974 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d22:	f107 0308 	add.w	r3, r7, #8
 8002d26:	4619      	mov	r1, r3
 8002d28:	480c      	ldr	r0, [pc, #48]	; (8002d5c <MX_TIM2_Init+0x94>)
 8002d2a:	f002 fc97 	bl	800565c <HAL_TIM_ConfigClockSource>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002d34:	f7ff fe1e 	bl	8002974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d40:	463b      	mov	r3, r7
 8002d42:	4619      	mov	r1, r3
 8002d44:	4805      	ldr	r0, [pc, #20]	; (8002d5c <MX_TIM2_Init+0x94>)
 8002d46:	f003 f821 	bl	8005d8c <HAL_TIMEx_MasterConfigSynchronization>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002d50:	f7ff fe10 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d54:	bf00      	nop
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	20000374 	.word	0x20000374

08002d60 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d66:	f107 0308 	add.w	r3, r7, #8
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	605a      	str	r2, [r3, #4]
 8002d70:	609a      	str	r2, [r3, #8]
 8002d72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d74:	463b      	mov	r3, r7
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d7c:	4b1d      	ldr	r3, [pc, #116]	; (8002df4 <MX_TIM3_Init+0x94>)
 8002d7e:	4a1e      	ldr	r2, [pc, #120]	; (8002df8 <MX_TIM3_Init+0x98>)
 8002d80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9000;
 8002d82:	4b1c      	ldr	r3, [pc, #112]	; (8002df4 <MX_TIM3_Init+0x94>)
 8002d84:	f242 3228 	movw	r2, #9000	; 0x2328
 8002d88:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d8a:	4b1a      	ldr	r3, [pc, #104]	; (8002df4 <MX_TIM3_Init+0x94>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002d90:	4b18      	ldr	r3, [pc, #96]	; (8002df4 <MX_TIM3_Init+0x94>)
 8002d92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d96:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d98:	4b16      	ldr	r3, [pc, #88]	; (8002df4 <MX_TIM3_Init+0x94>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d9e:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <MX_TIM3_Init+0x94>)
 8002da0:	2280      	movs	r2, #128	; 0x80
 8002da2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002da4:	4813      	ldr	r0, [pc, #76]	; (8002df4 <MX_TIM3_Init+0x94>)
 8002da6:	f001 fff5 	bl	8004d94 <HAL_TIM_Base_Init>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002db0:	f7ff fde0 	bl	8002974 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002db4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002db8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002dba:	f107 0308 	add.w	r3, r7, #8
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	480c      	ldr	r0, [pc, #48]	; (8002df4 <MX_TIM3_Init+0x94>)
 8002dc2:	f002 fc4b 	bl	800565c <HAL_TIM_ConfigClockSource>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002dcc:	f7ff fdd2 	bl	8002974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002dd8:	463b      	mov	r3, r7
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4805      	ldr	r0, [pc, #20]	; (8002df4 <MX_TIM3_Init+0x94>)
 8002dde:	f002 ffd5 	bl	8005d8c <HAL_TIMEx_MasterConfigSynchronization>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002de8:	f7ff fdc4 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002dec:	bf00      	nop
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	200003bc 	.word	0x200003bc
 8002df8:	40000400 	.word	0x40000400

08002dfc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08e      	sub	sp, #56	; 0x38
 8002e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	605a      	str	r2, [r3, #4]
 8002e0c:	609a      	str	r2, [r3, #8]
 8002e0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e10:	f107 0320 	add.w	r3, r7, #32
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e1a:	1d3b      	adds	r3, r7, #4
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	605a      	str	r2, [r3, #4]
 8002e22:	609a      	str	r2, [r3, #8]
 8002e24:	60da      	str	r2, [r3, #12]
 8002e26:	611a      	str	r2, [r3, #16]
 8002e28:	615a      	str	r2, [r3, #20]
 8002e2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e2c:	4b3d      	ldr	r3, [pc, #244]	; (8002f24 <MX_TIM4_Init+0x128>)
 8002e2e:	4a3e      	ldr	r2, [pc, #248]	; (8002f28 <MX_TIM4_Init+0x12c>)
 8002e30:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 8002e32:	4b3c      	ldr	r3, [pc, #240]	; (8002f24 <MX_TIM4_Init+0x128>)
 8002e34:	220a      	movs	r2, #10
 8002e36:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e38:	4b3a      	ldr	r3, [pc, #232]	; (8002f24 <MX_TIM4_Init+0x128>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002e3e:	4b39      	ldr	r3, [pc, #228]	; (8002f24 <MX_TIM4_Init+0x128>)
 8002e40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e44:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e46:	4b37      	ldr	r3, [pc, #220]	; (8002f24 <MX_TIM4_Init+0x128>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e4c:	4b35      	ldr	r3, [pc, #212]	; (8002f24 <MX_TIM4_Init+0x128>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002e52:	4834      	ldr	r0, [pc, #208]	; (8002f24 <MX_TIM4_Init+0x128>)
 8002e54:	f001 ff9e 	bl	8004d94 <HAL_TIM_Base_Init>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002e5e:	f7ff fd89 	bl	8002974 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e66:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002e68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	482d      	ldr	r0, [pc, #180]	; (8002f24 <MX_TIM4_Init+0x128>)
 8002e70:	f002 fbf4 	bl	800565c <HAL_TIM_ConfigClockSource>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002e7a:	f7ff fd7b 	bl	8002974 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002e7e:	4829      	ldr	r0, [pc, #164]	; (8002f24 <MX_TIM4_Init+0x128>)
 8002e80:	f002 f8cc 	bl	800501c <HAL_TIM_PWM_Init>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002e8a:	f7ff fd73 	bl	8002974 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8002e8e:	4825      	ldr	r0, [pc, #148]	; (8002f24 <MX_TIM4_Init+0x128>)
 8002e90:	f002 f86c 	bl	8004f6c <HAL_TIM_OC_Init>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8002e9a:	f7ff fd6b 	bl	8002974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ea6:	f107 0320 	add.w	r3, r7, #32
 8002eaa:	4619      	mov	r1, r3
 8002eac:	481d      	ldr	r0, [pc, #116]	; (8002f24 <MX_TIM4_Init+0x128>)
 8002eae:	f002 ff6d 	bl	8005d8c <HAL_TIMEx_MasterConfigSynchronization>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8002eb8:	f7ff fd5c 	bl	8002974 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ebc:	2360      	movs	r3, #96	; 0x60
 8002ebe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ecc:	1d3b      	adds	r3, r7, #4
 8002ece:	2204      	movs	r2, #4
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4814      	ldr	r0, [pc, #80]	; (8002f24 <MX_TIM4_Init+0x128>)
 8002ed4:	f002 fb00 	bl	80054d8 <HAL_TIM_PWM_ConfigChannel>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 8002ede:	f7ff fd49 	bl	8002974 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ee6:	1d3b      	adds	r3, r7, #4
 8002ee8:	2208      	movs	r2, #8
 8002eea:	4619      	mov	r1, r3
 8002eec:	480d      	ldr	r0, [pc, #52]	; (8002f24 <MX_TIM4_Init+0x128>)
 8002eee:	f002 fa97 	bl	8005420 <HAL_TIM_OC_ConfigChannel>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 8002ef8:	f7ff fd3c 	bl	8002974 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002efc:	2360      	movs	r3, #96	; 0x60
 8002efe:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f00:	1d3b      	adds	r3, r7, #4
 8002f02:	220c      	movs	r2, #12
 8002f04:	4619      	mov	r1, r3
 8002f06:	4807      	ldr	r0, [pc, #28]	; (8002f24 <MX_TIM4_Init+0x128>)
 8002f08:	f002 fae6 	bl	80054d8 <HAL_TIM_PWM_ConfigChannel>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8002f12:	f7ff fd2f 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002f16:	4803      	ldr	r0, [pc, #12]	; (8002f24 <MX_TIM4_Init+0x128>)
 8002f18:	f000 f880 	bl	800301c <HAL_TIM_MspPostInit>

}
 8002f1c:	bf00      	nop
 8002f1e:	3738      	adds	r7, #56	; 0x38
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	20000404 	.word	0x20000404
 8002f28:	40000800 	.word	0x40000800

08002f2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a34      	ldr	r2, [pc, #208]	; (800300c <HAL_TIM_Base_MspInit+0xe0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d12c      	bne.n	8002f98 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f3e:	4b34      	ldr	r3, [pc, #208]	; (8003010 <HAL_TIM_Base_MspInit+0xe4>)
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	4a33      	ldr	r2, [pc, #204]	; (8003010 <HAL_TIM_Base_MspInit+0xe4>)
 8002f44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f48:	6193      	str	r3, [r2, #24]
 8002f4a:	4b31      	ldr	r3, [pc, #196]	; (8003010 <HAL_TIM_Base_MspInit+0xe4>)
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002f56:	2200      	movs	r2, #0
 8002f58:	2100      	movs	r1, #0
 8002f5a:	2018      	movs	r0, #24
 8002f5c:	f000 ff01 	bl	8003d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002f60:	2018      	movs	r0, #24
 8002f62:	f000 ff1a 	bl	8003d9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002f66:	2200      	movs	r2, #0
 8002f68:	2100      	movs	r1, #0
 8002f6a:	2019      	movs	r0, #25
 8002f6c:	f000 fef9 	bl	8003d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002f70:	2019      	movs	r0, #25
 8002f72:	f000 ff12 	bl	8003d9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002f76:	2200      	movs	r2, #0
 8002f78:	2100      	movs	r1, #0
 8002f7a:	201a      	movs	r0, #26
 8002f7c:	f000 fef1 	bl	8003d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002f80:	201a      	movs	r0, #26
 8002f82:	f000 ff0a 	bl	8003d9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002f86:	2200      	movs	r2, #0
 8002f88:	2100      	movs	r1, #0
 8002f8a:	201b      	movs	r0, #27
 8002f8c:	f000 fee9 	bl	8003d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002f90:	201b      	movs	r0, #27
 8002f92:	f000 ff02 	bl	8003d9a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002f96:	e034      	b.n	8003002 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM2)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa0:	d10c      	bne.n	8002fbc <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fa2:	4b1b      	ldr	r3, [pc, #108]	; (8003010 <HAL_TIM_Base_MspInit+0xe4>)
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	4a1a      	ldr	r2, [pc, #104]	; (8003010 <HAL_TIM_Base_MspInit+0xe4>)
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	61d3      	str	r3, [r2, #28]
 8002fae:	4b18      	ldr	r3, [pc, #96]	; (8003010 <HAL_TIM_Base_MspInit+0xe4>)
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	613b      	str	r3, [r7, #16]
 8002fb8:	693b      	ldr	r3, [r7, #16]
}
 8002fba:	e022      	b.n	8003002 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a14      	ldr	r2, [pc, #80]	; (8003014 <HAL_TIM_Base_MspInit+0xe8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d10c      	bne.n	8002fe0 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fc6:	4b12      	ldr	r3, [pc, #72]	; (8003010 <HAL_TIM_Base_MspInit+0xe4>)
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	4a11      	ldr	r2, [pc, #68]	; (8003010 <HAL_TIM_Base_MspInit+0xe4>)
 8002fcc:	f043 0302 	orr.w	r3, r3, #2
 8002fd0:	61d3      	str	r3, [r2, #28]
 8002fd2:	4b0f      	ldr	r3, [pc, #60]	; (8003010 <HAL_TIM_Base_MspInit+0xe4>)
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
}
 8002fde:	e010      	b.n	8003002 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a0c      	ldr	r2, [pc, #48]	; (8003018 <HAL_TIM_Base_MspInit+0xec>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d10b      	bne.n	8003002 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002fea:	4b09      	ldr	r3, [pc, #36]	; (8003010 <HAL_TIM_Base_MspInit+0xe4>)
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	4a08      	ldr	r2, [pc, #32]	; (8003010 <HAL_TIM_Base_MspInit+0xe4>)
 8002ff0:	f043 0304 	orr.w	r3, r3, #4
 8002ff4:	61d3      	str	r3, [r2, #28]
 8002ff6:	4b06      	ldr	r3, [pc, #24]	; (8003010 <HAL_TIM_Base_MspInit+0xe4>)
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	f003 0304 	and.w	r3, r3, #4
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	68bb      	ldr	r3, [r7, #8]
}
 8003002:	bf00      	nop
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40012c00 	.word	0x40012c00
 8003010:	40021000 	.word	0x40021000
 8003014:	40000400 	.word	0x40000400
 8003018:	40000800 	.word	0x40000800

0800301c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003024:	f107 0310 	add.w	r3, r7, #16
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	609a      	str	r2, [r3, #8]
 8003030:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a10      	ldr	r2, [pc, #64]	; (8003078 <HAL_TIM_MspPostInit+0x5c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d118      	bne.n	800306e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800303c:	4b0f      	ldr	r3, [pc, #60]	; (800307c <HAL_TIM_MspPostInit+0x60>)
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	4a0e      	ldr	r2, [pc, #56]	; (800307c <HAL_TIM_MspPostInit+0x60>)
 8003042:	f043 0308 	orr.w	r3, r3, #8
 8003046:	6193      	str	r3, [r2, #24]
 8003048:	4b0c      	ldr	r3, [pc, #48]	; (800307c <HAL_TIM_MspPostInit+0x60>)
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003054:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003058:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305a:	2302      	movs	r3, #2
 800305c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305e:	2302      	movs	r3, #2
 8003060:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003062:	f107 0310 	add.w	r3, r7, #16
 8003066:	4619      	mov	r1, r3
 8003068:	4805      	ldr	r0, [pc, #20]	; (8003080 <HAL_TIM_MspPostInit+0x64>)
 800306a:	f000 ff63 	bl	8003f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800306e:	bf00      	nop
 8003070:	3720      	adds	r7, #32
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40000800 	.word	0x40000800
 800307c:	40021000 	.word	0x40021000
 8003080:	40010c00 	.word	0x40010c00

08003084 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003088:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <MX_USART1_UART_Init+0x4c>)
 800308a:	4a12      	ldr	r2, [pc, #72]	; (80030d4 <MX_USART1_UART_Init+0x50>)
 800308c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800308e:	4b10      	ldr	r3, [pc, #64]	; (80030d0 <MX_USART1_UART_Init+0x4c>)
 8003090:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003094:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003096:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <MX_USART1_UART_Init+0x4c>)
 8003098:	2200      	movs	r2, #0
 800309a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800309c:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <MX_USART1_UART_Init+0x4c>)
 800309e:	2200      	movs	r2, #0
 80030a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80030a2:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <MX_USART1_UART_Init+0x4c>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80030a8:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <MX_USART1_UART_Init+0x4c>)
 80030aa:	220c      	movs	r2, #12
 80030ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030ae:	4b08      	ldr	r3, [pc, #32]	; (80030d0 <MX_USART1_UART_Init+0x4c>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80030b4:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <MX_USART1_UART_Init+0x4c>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030ba:	4805      	ldr	r0, [pc, #20]	; (80030d0 <MX_USART1_UART_Init+0x4c>)
 80030bc:	f002 fed6 	bl	8005e6c <HAL_UART_Init>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80030c6:	f7ff fc55 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80030ca:	bf00      	nop
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	2000044c 	.word	0x2000044c
 80030d4:	40013800 	.word	0x40013800

080030d8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80030dc:	4b11      	ldr	r3, [pc, #68]	; (8003124 <MX_USART3_UART_Init+0x4c>)
 80030de:	4a12      	ldr	r2, [pc, #72]	; (8003128 <MX_USART3_UART_Init+0x50>)
 80030e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80030e2:	4b10      	ldr	r3, [pc, #64]	; (8003124 <MX_USART3_UART_Init+0x4c>)
 80030e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80030ea:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <MX_USART3_UART_Init+0x4c>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80030f0:	4b0c      	ldr	r3, [pc, #48]	; (8003124 <MX_USART3_UART_Init+0x4c>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80030f6:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <MX_USART3_UART_Init+0x4c>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80030fc:	4b09      	ldr	r3, [pc, #36]	; (8003124 <MX_USART3_UART_Init+0x4c>)
 80030fe:	220c      	movs	r2, #12
 8003100:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003102:	4b08      	ldr	r3, [pc, #32]	; (8003124 <MX_USART3_UART_Init+0x4c>)
 8003104:	2200      	movs	r2, #0
 8003106:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003108:	4b06      	ldr	r3, [pc, #24]	; (8003124 <MX_USART3_UART_Init+0x4c>)
 800310a:	2200      	movs	r2, #0
 800310c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800310e:	4805      	ldr	r0, [pc, #20]	; (8003124 <MX_USART3_UART_Init+0x4c>)
 8003110:	f002 feac 	bl	8005e6c <HAL_UART_Init>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800311a:	f7ff fc2b 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800311e:	bf00      	nop
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	20000494 	.word	0x20000494
 8003128:	40004800 	.word	0x40004800

0800312c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08a      	sub	sp, #40	; 0x28
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003134:	f107 0318 	add.w	r3, r7, #24
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a3c      	ldr	r2, [pc, #240]	; (8003238 <HAL_UART_MspInit+0x10c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d13a      	bne.n	80031c2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800314c:	4b3b      	ldr	r3, [pc, #236]	; (800323c <HAL_UART_MspInit+0x110>)
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	4a3a      	ldr	r2, [pc, #232]	; (800323c <HAL_UART_MspInit+0x110>)
 8003152:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003156:	6193      	str	r3, [r2, #24]
 8003158:	4b38      	ldr	r3, [pc, #224]	; (800323c <HAL_UART_MspInit+0x110>)
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003164:	4b35      	ldr	r3, [pc, #212]	; (800323c <HAL_UART_MspInit+0x110>)
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	4a34      	ldr	r2, [pc, #208]	; (800323c <HAL_UART_MspInit+0x110>)
 800316a:	f043 0304 	orr.w	r3, r3, #4
 800316e:	6193      	str	r3, [r2, #24]
 8003170:	4b32      	ldr	r3, [pc, #200]	; (800323c <HAL_UART_MspInit+0x110>)
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	613b      	str	r3, [r7, #16]
 800317a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800317c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003182:	2302      	movs	r3, #2
 8003184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003186:	2303      	movs	r3, #3
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800318a:	f107 0318 	add.w	r3, r7, #24
 800318e:	4619      	mov	r1, r3
 8003190:	482b      	ldr	r0, [pc, #172]	; (8003240 <HAL_UART_MspInit+0x114>)
 8003192:	f000 fecf 	bl	8003f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003196:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800319a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800319c:	2300      	movs	r3, #0
 800319e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a0:	2300      	movs	r3, #0
 80031a2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a4:	f107 0318 	add.w	r3, r7, #24
 80031a8:	4619      	mov	r1, r3
 80031aa:	4825      	ldr	r0, [pc, #148]	; (8003240 <HAL_UART_MspInit+0x114>)
 80031ac:	f000 fec2 	bl	8003f34 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80031b0:	2200      	movs	r2, #0
 80031b2:	2100      	movs	r1, #0
 80031b4:	2025      	movs	r0, #37	; 0x25
 80031b6:	f000 fdd4 	bl	8003d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80031ba:	2025      	movs	r0, #37	; 0x25
 80031bc:	f000 fded 	bl	8003d9a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80031c0:	e036      	b.n	8003230 <HAL_UART_MspInit+0x104>
  else if(uartHandle->Instance==USART3)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a1f      	ldr	r2, [pc, #124]	; (8003244 <HAL_UART_MspInit+0x118>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d131      	bne.n	8003230 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 80031cc:	4b1b      	ldr	r3, [pc, #108]	; (800323c <HAL_UART_MspInit+0x110>)
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	4a1a      	ldr	r2, [pc, #104]	; (800323c <HAL_UART_MspInit+0x110>)
 80031d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031d6:	61d3      	str	r3, [r2, #28]
 80031d8:	4b18      	ldr	r3, [pc, #96]	; (800323c <HAL_UART_MspInit+0x110>)
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031e4:	4b15      	ldr	r3, [pc, #84]	; (800323c <HAL_UART_MspInit+0x110>)
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	4a14      	ldr	r2, [pc, #80]	; (800323c <HAL_UART_MspInit+0x110>)
 80031ea:	f043 0308 	orr.w	r3, r3, #8
 80031ee:	6193      	str	r3, [r2, #24]
 80031f0:	4b12      	ldr	r3, [pc, #72]	; (800323c <HAL_UART_MspInit+0x110>)
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003202:	2302      	movs	r3, #2
 8003204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003206:	2303      	movs	r3, #3
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800320a:	f107 0318 	add.w	r3, r7, #24
 800320e:	4619      	mov	r1, r3
 8003210:	480d      	ldr	r0, [pc, #52]	; (8003248 <HAL_UART_MspInit+0x11c>)
 8003212:	f000 fe8f 	bl	8003f34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003216:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800321a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800321c:	2300      	movs	r3, #0
 800321e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003220:	2300      	movs	r3, #0
 8003222:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003224:	f107 0318 	add.w	r3, r7, #24
 8003228:	4619      	mov	r1, r3
 800322a:	4807      	ldr	r0, [pc, #28]	; (8003248 <HAL_UART_MspInit+0x11c>)
 800322c:	f000 fe82 	bl	8003f34 <HAL_GPIO_Init>
}
 8003230:	bf00      	nop
 8003232:	3728      	adds	r7, #40	; 0x28
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40013800 	.word	0x40013800
 800323c:	40021000 	.word	0x40021000
 8003240:	40010800 	.word	0x40010800
 8003244:	40004800 	.word	0x40004800
 8003248:	40010c00 	.word	0x40010c00

0800324c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800324c:	f7ff fce4 	bl	8002c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003250:	480b      	ldr	r0, [pc, #44]	; (8003280 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003252:	490c      	ldr	r1, [pc, #48]	; (8003284 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003254:	4a0c      	ldr	r2, [pc, #48]	; (8003288 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003258:	e002      	b.n	8003260 <LoopCopyDataInit>

0800325a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800325a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800325c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800325e:	3304      	adds	r3, #4

08003260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003264:	d3f9      	bcc.n	800325a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003266:	4a09      	ldr	r2, [pc, #36]	; (800328c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003268:	4c09      	ldr	r4, [pc, #36]	; (8003290 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800326a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800326c:	e001      	b.n	8003272 <LoopFillZerobss>

0800326e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800326e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003270:	3204      	adds	r2, #4

08003272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003274:	d3fb      	bcc.n	800326e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003276:	f003 fb8b 	bl	8006990 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800327a:	f7ff fa5f 	bl	800273c <main>
  bx lr
 800327e:	4770      	bx	lr
  ldr r0, =_sdata
 8003280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003284:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003288:	0800b038 	.word	0x0800b038
  ldr r2, =_sbss
 800328c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8003290:	200004f0 	.word	0x200004f0

08003294 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003294:	e7fe      	b.n	8003294 <ADC1_2_IRQHandler>
	...

08003298 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800329c:	4b08      	ldr	r3, [pc, #32]	; (80032c0 <HAL_Init+0x28>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a07      	ldr	r2, [pc, #28]	; (80032c0 <HAL_Init+0x28>)
 80032a2:	f043 0310 	orr.w	r3, r3, #16
 80032a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032a8:	2003      	movs	r0, #3
 80032aa:	f000 fd4f 	bl	8003d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032ae:	200f      	movs	r0, #15
 80032b0:	f000 f808 	bl	80032c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032b4:	f7ff fb64 	bl	8002980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40022000 	.word	0x40022000

080032c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032cc:	4b12      	ldr	r3, [pc, #72]	; (8003318 <HAL_InitTick+0x54>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	4b12      	ldr	r3, [pc, #72]	; (800331c <HAL_InitTick+0x58>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	4619      	mov	r1, r3
 80032d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032da:	fbb3 f3f1 	udiv	r3, r3, r1
 80032de:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fd67 	bl	8003db6 <HAL_SYSTICK_Config>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e00e      	b.n	8003310 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b0f      	cmp	r3, #15
 80032f6:	d80a      	bhi.n	800330e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032f8:	2200      	movs	r2, #0
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003300:	f000 fd2f 	bl	8003d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003304:	4a06      	ldr	r2, [pc, #24]	; (8003320 <HAL_InitTick+0x5c>)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	e000      	b.n	8003310 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
}
 8003310:	4618      	mov	r0, r3
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	2000000c 	.word	0x2000000c
 800331c:	20000014 	.word	0x20000014
 8003320:	20000010 	.word	0x20000010

08003324 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003328:	4b05      	ldr	r3, [pc, #20]	; (8003340 <HAL_IncTick+0x1c>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	461a      	mov	r2, r3
 800332e:	4b05      	ldr	r3, [pc, #20]	; (8003344 <HAL_IncTick+0x20>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4413      	add	r3, r2
 8003334:	4a03      	ldr	r2, [pc, #12]	; (8003344 <HAL_IncTick+0x20>)
 8003336:	6013      	str	r3, [r2, #0]
}
 8003338:	bf00      	nop
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr
 8003340:	20000014 	.word	0x20000014
 8003344:	200004dc 	.word	0x200004dc

08003348 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  return uwTick;
 800334c:	4b02      	ldr	r3, [pc, #8]	; (8003358 <HAL_GetTick+0x10>)
 800334e:	681b      	ldr	r3, [r3, #0]
}
 8003350:	4618      	mov	r0, r3
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr
 8003358:	200004dc 	.word	0x200004dc

0800335c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e0be      	b.n	80034fc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003388:	2b00      	cmp	r3, #0
 800338a:	d109      	bne.n	80033a0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7fe fc64 	bl	8001c68 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 fbc5 	bl	8003b30 <ADC_ConversionStop_Disable>
 80033a6:	4603      	mov	r3, r0
 80033a8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f040 8099 	bne.w	80034ea <HAL_ADC_Init+0x18e>
 80033b8:	7dfb      	ldrb	r3, [r7, #23]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f040 8095 	bne.w	80034ea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033c8:	f023 0302 	bic.w	r3, r3, #2
 80033cc:	f043 0202 	orr.w	r2, r3, #2
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80033dc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	7b1b      	ldrb	r3, [r3, #12]
 80033e2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80033e4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f4:	d003      	beq.n	80033fe <HAL_ADC_Init+0xa2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d102      	bne.n	8003404 <HAL_ADC_Init+0xa8>
 80033fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003402:	e000      	b.n	8003406 <HAL_ADC_Init+0xaa>
 8003404:	2300      	movs	r3, #0
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	7d1b      	ldrb	r3, [r3, #20]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d119      	bne.n	8003448 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	7b1b      	ldrb	r3, [r3, #12]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d109      	bne.n	8003430 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	3b01      	subs	r3, #1
 8003422:	035a      	lsls	r2, r3, #13
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800342c:	613b      	str	r3, [r7, #16]
 800342e:	e00b      	b.n	8003448 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003434:	f043 0220 	orr.w	r2, r3, #32
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003440:	f043 0201 	orr.w	r2, r3, #1
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	430a      	orrs	r2, r1
 800345a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	4b28      	ldr	r3, [pc, #160]	; (8003504 <HAL_ADC_Init+0x1a8>)
 8003464:	4013      	ands	r3, r2
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6812      	ldr	r2, [r2, #0]
 800346a:	68b9      	ldr	r1, [r7, #8]
 800346c:	430b      	orrs	r3, r1
 800346e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003478:	d003      	beq.n	8003482 <HAL_ADC_Init+0x126>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d104      	bne.n	800348c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	3b01      	subs	r3, #1
 8003488:	051b      	lsls	r3, r3, #20
 800348a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003492:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	430a      	orrs	r2, r1
 800349e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	4b18      	ldr	r3, [pc, #96]	; (8003508 <HAL_ADC_Init+0x1ac>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d10b      	bne.n	80034c8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ba:	f023 0303 	bic.w	r3, r3, #3
 80034be:	f043 0201 	orr.w	r2, r3, #1
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80034c6:	e018      	b.n	80034fa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034cc:	f023 0312 	bic.w	r3, r3, #18
 80034d0:	f043 0210 	orr.w	r2, r3, #16
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	f043 0201 	orr.w	r2, r3, #1
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80034e8:	e007      	b.n	80034fa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ee:	f043 0210 	orr.w	r2, r3, #16
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80034fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	ffe1f7fd 	.word	0xffe1f7fd
 8003508:	ff1f0efe 	.word	0xff1f0efe

0800350c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003514:	2300      	movs	r3, #0
 8003516:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800351e:	2b01      	cmp	r3, #1
 8003520:	d101      	bne.n	8003526 <HAL_ADC_Start+0x1a>
 8003522:	2302      	movs	r3, #2
 8003524:	e098      	b.n	8003658 <HAL_ADC_Start+0x14c>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 faa4 	bl	8003a7c <ADC_Enable>
 8003534:	4603      	mov	r3, r0
 8003536:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003538:	7bfb      	ldrb	r3, [r7, #15]
 800353a:	2b00      	cmp	r3, #0
 800353c:	f040 8087 	bne.w	800364e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003548:	f023 0301 	bic.w	r3, r3, #1
 800354c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a41      	ldr	r2, [pc, #260]	; (8003660 <HAL_ADC_Start+0x154>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d105      	bne.n	800356a <HAL_ADC_Start+0x5e>
 800355e:	4b41      	ldr	r3, [pc, #260]	; (8003664 <HAL_ADC_Start+0x158>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d115      	bne.n	8003596 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003580:	2b00      	cmp	r3, #0
 8003582:	d026      	beq.n	80035d2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003588:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800358c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003594:	e01d      	b.n	80035d2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a2f      	ldr	r2, [pc, #188]	; (8003664 <HAL_ADC_Start+0x158>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d004      	beq.n	80035b6 <HAL_ADC_Start+0xaa>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a2b      	ldr	r2, [pc, #172]	; (8003660 <HAL_ADC_Start+0x154>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d10d      	bne.n	80035d2 <HAL_ADC_Start+0xc6>
 80035b6:	4b2b      	ldr	r3, [pc, #172]	; (8003664 <HAL_ADC_Start+0x158>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d007      	beq.n	80035d2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d006      	beq.n	80035ec <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e2:	f023 0206 	bic.w	r2, r3, #6
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80035ea:	e002      	b.n	80035f2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f06f 0202 	mvn.w	r2, #2
 8003602:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800360e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003612:	d113      	bne.n	800363c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003618:	4a11      	ldr	r2, [pc, #68]	; (8003660 <HAL_ADC_Start+0x154>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d105      	bne.n	800362a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800361e:	4b11      	ldr	r3, [pc, #68]	; (8003664 <HAL_ADC_Start+0x158>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003626:	2b00      	cmp	r3, #0
 8003628:	d108      	bne.n	800363c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003638:	609a      	str	r2, [r3, #8]
 800363a:	e00c      	b.n	8003656 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800364a:	609a      	str	r2, [r3, #8]
 800364c:	e003      	b.n	8003656 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003656:	7bfb      	ldrb	r3, [r7, #15]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40012800 	.word	0x40012800
 8003664:	40012400 	.word	0x40012400

08003668 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003668:	b590      	push	{r4, r7, lr}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800367e:	f7ff fe63 	bl	8003348 <HAL_GetTick>
 8003682:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00b      	beq.n	80036aa <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003696:	f043 0220 	orr.w	r2, r3, #32
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e0d3      	b.n	8003852 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d131      	bne.n	800371c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036be:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d12a      	bne.n	800371c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80036c6:	e021      	b.n	800370c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ce:	d01d      	beq.n	800370c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d007      	beq.n	80036e6 <HAL_ADC_PollForConversion+0x7e>
 80036d6:	f7ff fe37 	bl	8003348 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d212      	bcs.n	800370c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10b      	bne.n	800370c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f8:	f043 0204 	orr.w	r2, r3, #4
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e0a2      	b.n	8003852 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0d6      	beq.n	80036c8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800371a:	e070      	b.n	80037fe <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800371c:	4b4f      	ldr	r3, [pc, #316]	; (800385c <HAL_ADC_PollForConversion+0x1f4>)
 800371e:	681c      	ldr	r4, [r3, #0]
 8003720:	2002      	movs	r0, #2
 8003722:	f001 fa81 	bl	8004c28 <HAL_RCCEx_GetPeriphCLKFreq>
 8003726:	4603      	mov	r3, r0
 8003728:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6919      	ldr	r1, [r3, #16]
 8003732:	4b4b      	ldr	r3, [pc, #300]	; (8003860 <HAL_ADC_PollForConversion+0x1f8>)
 8003734:	400b      	ands	r3, r1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d118      	bne.n	800376c <HAL_ADC_PollForConversion+0x104>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68d9      	ldr	r1, [r3, #12]
 8003740:	4b48      	ldr	r3, [pc, #288]	; (8003864 <HAL_ADC_PollForConversion+0x1fc>)
 8003742:	400b      	ands	r3, r1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d111      	bne.n	800376c <HAL_ADC_PollForConversion+0x104>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6919      	ldr	r1, [r3, #16]
 800374e:	4b46      	ldr	r3, [pc, #280]	; (8003868 <HAL_ADC_PollForConversion+0x200>)
 8003750:	400b      	ands	r3, r1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d108      	bne.n	8003768 <HAL_ADC_PollForConversion+0x100>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68d9      	ldr	r1, [r3, #12]
 800375c:	4b43      	ldr	r3, [pc, #268]	; (800386c <HAL_ADC_PollForConversion+0x204>)
 800375e:	400b      	ands	r3, r1
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_ADC_PollForConversion+0x100>
 8003764:	2314      	movs	r3, #20
 8003766:	e020      	b.n	80037aa <HAL_ADC_PollForConversion+0x142>
 8003768:	2329      	movs	r3, #41	; 0x29
 800376a:	e01e      	b.n	80037aa <HAL_ADC_PollForConversion+0x142>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6919      	ldr	r1, [r3, #16]
 8003772:	4b3d      	ldr	r3, [pc, #244]	; (8003868 <HAL_ADC_PollForConversion+0x200>)
 8003774:	400b      	ands	r3, r1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d106      	bne.n	8003788 <HAL_ADC_PollForConversion+0x120>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68d9      	ldr	r1, [r3, #12]
 8003780:	4b3a      	ldr	r3, [pc, #232]	; (800386c <HAL_ADC_PollForConversion+0x204>)
 8003782:	400b      	ands	r3, r1
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00d      	beq.n	80037a4 <HAL_ADC_PollForConversion+0x13c>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6919      	ldr	r1, [r3, #16]
 800378e:	4b38      	ldr	r3, [pc, #224]	; (8003870 <HAL_ADC_PollForConversion+0x208>)
 8003790:	400b      	ands	r3, r1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d108      	bne.n	80037a8 <HAL_ADC_PollForConversion+0x140>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68d9      	ldr	r1, [r3, #12]
 800379c:	4b34      	ldr	r3, [pc, #208]	; (8003870 <HAL_ADC_PollForConversion+0x208>)
 800379e:	400b      	ands	r3, r1
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_ADC_PollForConversion+0x140>
 80037a4:	2354      	movs	r3, #84	; 0x54
 80037a6:	e000      	b.n	80037aa <HAL_ADC_PollForConversion+0x142>
 80037a8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80037aa:	fb02 f303 	mul.w	r3, r2, r3
 80037ae:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80037b0:	e021      	b.n	80037f6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b8:	d01a      	beq.n	80037f0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d007      	beq.n	80037d0 <HAL_ADC_PollForConversion+0x168>
 80037c0:	f7ff fdc2 	bl	8003348 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d20f      	bcs.n	80037f0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d90b      	bls.n	80037f0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037dc:	f043 0204 	orr.w	r2, r3, #4
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e030      	b.n	8003852 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	3301      	adds	r3, #1
 80037f4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d8d9      	bhi.n	80037b2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f06f 0212 	mvn.w	r2, #18
 8003806:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800381e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003822:	d115      	bne.n	8003850 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003828:	2b00      	cmp	r3, #0
 800382a:	d111      	bne.n	8003850 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003830:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d105      	bne.n	8003850 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003848:	f043 0201 	orr.w	r2, r3, #1
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	371c      	adds	r7, #28
 8003856:	46bd      	mov	sp, r7
 8003858:	bd90      	pop	{r4, r7, pc}
 800385a:	bf00      	nop
 800385c:	2000000c 	.word	0x2000000c
 8003860:	24924924 	.word	0x24924924
 8003864:	00924924 	.word	0x00924924
 8003868:	12492492 	.word	0x12492492
 800386c:	00492492 	.word	0x00492492
 8003870:	00249249 	.word	0x00249249

08003874 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003882:	4618      	mov	r0, r3
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr

0800388c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800389a:	2300      	movs	r3, #0
 800389c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d101      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x20>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e0dc      	b.n	8003a66 <HAL_ADC_ConfigChannel+0x1da>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b06      	cmp	r3, #6
 80038ba:	d81c      	bhi.n	80038f6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	3b05      	subs	r3, #5
 80038ce:	221f      	movs	r2, #31
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	43db      	mvns	r3, r3
 80038d6:	4019      	ands	r1, r3
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	6818      	ldr	r0, [r3, #0]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	4613      	mov	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	3b05      	subs	r3, #5
 80038e8:	fa00 f203 	lsl.w	r2, r0, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	635a      	str	r2, [r3, #52]	; 0x34
 80038f4:	e03c      	b.n	8003970 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b0c      	cmp	r3, #12
 80038fc:	d81c      	bhi.n	8003938 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	4613      	mov	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	3b23      	subs	r3, #35	; 0x23
 8003910:	221f      	movs	r2, #31
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	43db      	mvns	r3, r3
 8003918:	4019      	ands	r1, r3
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	6818      	ldr	r0, [r3, #0]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	3b23      	subs	r3, #35	; 0x23
 800392a:	fa00 f203 	lsl.w	r2, r0, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	631a      	str	r2, [r3, #48]	; 0x30
 8003936:	e01b      	b.n	8003970 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	4613      	mov	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	3b41      	subs	r3, #65	; 0x41
 800394a:	221f      	movs	r2, #31
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	43db      	mvns	r3, r3
 8003952:	4019      	ands	r1, r3
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	6818      	ldr	r0, [r3, #0]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	4613      	mov	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	3b41      	subs	r3, #65	; 0x41
 8003964:	fa00 f203 	lsl.w	r2, r0, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b09      	cmp	r3, #9
 8003976:	d91c      	bls.n	80039b2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68d9      	ldr	r1, [r3, #12]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	4613      	mov	r3, r2
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	4413      	add	r3, r2
 8003988:	3b1e      	subs	r3, #30
 800398a:	2207      	movs	r2, #7
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	43db      	mvns	r3, r3
 8003992:	4019      	ands	r1, r3
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	6898      	ldr	r0, [r3, #8]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	4613      	mov	r3, r2
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	4413      	add	r3, r2
 80039a2:	3b1e      	subs	r3, #30
 80039a4:	fa00 f203 	lsl.w	r2, r0, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	60da      	str	r2, [r3, #12]
 80039b0:	e019      	b.n	80039e6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6919      	ldr	r1, [r3, #16]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	4613      	mov	r3, r2
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	4413      	add	r3, r2
 80039c2:	2207      	movs	r2, #7
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	43db      	mvns	r3, r3
 80039ca:	4019      	ands	r1, r3
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	6898      	ldr	r0, [r3, #8]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	4613      	mov	r3, r2
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	4413      	add	r3, r2
 80039da:	fa00 f203 	lsl.w	r2, r0, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b10      	cmp	r3, #16
 80039ec:	d003      	beq.n	80039f6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80039f2:	2b11      	cmp	r3, #17
 80039f4:	d132      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a1d      	ldr	r2, [pc, #116]	; (8003a70 <HAL_ADC_ConfigChannel+0x1e4>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d125      	bne.n	8003a4c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d126      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003a1c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b10      	cmp	r3, #16
 8003a24:	d11a      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a26:	4b13      	ldr	r3, [pc, #76]	; (8003a74 <HAL_ADC_ConfigChannel+0x1e8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a13      	ldr	r2, [pc, #76]	; (8003a78 <HAL_ADC_ConfigChannel+0x1ec>)
 8003a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a30:	0c9a      	lsrs	r2, r3, #18
 8003a32:	4613      	mov	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a3c:	e002      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	3b01      	subs	r3, #1
 8003a42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1f9      	bne.n	8003a3e <HAL_ADC_ConfigChannel+0x1b2>
 8003a4a:	e007      	b.n	8003a5c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a50:	f043 0220 	orr.w	r2, r3, #32
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bc80      	pop	{r7}
 8003a6e:	4770      	bx	lr
 8003a70:	40012400 	.word	0x40012400
 8003a74:	2000000c 	.word	0x2000000c
 8003a78:	431bde83 	.word	0x431bde83

08003a7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d040      	beq.n	8003b1c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f042 0201 	orr.w	r2, r2, #1
 8003aa8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003aaa:	4b1f      	ldr	r3, [pc, #124]	; (8003b28 <ADC_Enable+0xac>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a1f      	ldr	r2, [pc, #124]	; (8003b2c <ADC_Enable+0xb0>)
 8003ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab4:	0c9b      	lsrs	r3, r3, #18
 8003ab6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003ab8:	e002      	b.n	8003ac0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f9      	bne.n	8003aba <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ac6:	f7ff fc3f 	bl	8003348 <HAL_GetTick>
 8003aca:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003acc:	e01f      	b.n	8003b0e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ace:	f7ff fc3b 	bl	8003348 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d918      	bls.n	8003b0e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d011      	beq.n	8003b0e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aee:	f043 0210 	orr.w	r2, r3, #16
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afa:	f043 0201 	orr.w	r2, r3, #1
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e007      	b.n	8003b1e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d1d8      	bne.n	8003ace <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	2000000c 	.word	0x2000000c
 8003b2c:	431bde83 	.word	0x431bde83

08003b30 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d12e      	bne.n	8003ba8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0201 	bic.w	r2, r2, #1
 8003b58:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b5a:	f7ff fbf5 	bl	8003348 <HAL_GetTick>
 8003b5e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003b60:	e01b      	b.n	8003b9a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b62:	f7ff fbf1 	bl	8003348 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d914      	bls.n	8003b9a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d10d      	bne.n	8003b9a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b82:	f043 0210 	orr.w	r2, r3, #16
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8e:	f043 0201 	orr.w	r2, r3, #1
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e007      	b.n	8003baa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d0dc      	beq.n	8003b62 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bc4:	4b0c      	ldr	r3, [pc, #48]	; (8003bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003be6:	4a04      	ldr	r2, [pc, #16]	; (8003bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	60d3      	str	r3, [r2, #12]
}
 8003bec:	bf00      	nop
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bc80      	pop	{r7}
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	e000ed00 	.word	0xe000ed00

08003bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c00:	4b04      	ldr	r3, [pc, #16]	; (8003c14 <__NVIC_GetPriorityGrouping+0x18>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	0a1b      	lsrs	r3, r3, #8
 8003c06:	f003 0307 	and.w	r3, r3, #7
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	e000ed00 	.word	0xe000ed00

08003c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	4603      	mov	r3, r0
 8003c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	db0b      	blt.n	8003c42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c2a:	79fb      	ldrb	r3, [r7, #7]
 8003c2c:	f003 021f 	and.w	r2, r3, #31
 8003c30:	4906      	ldr	r1, [pc, #24]	; (8003c4c <__NVIC_EnableIRQ+0x34>)
 8003c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c36:	095b      	lsrs	r3, r3, #5
 8003c38:	2001      	movs	r0, #1
 8003c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr
 8003c4c:	e000e100 	.word	0xe000e100

08003c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	4603      	mov	r3, r0
 8003c58:	6039      	str	r1, [r7, #0]
 8003c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	db0a      	blt.n	8003c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	490c      	ldr	r1, [pc, #48]	; (8003c9c <__NVIC_SetPriority+0x4c>)
 8003c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6e:	0112      	lsls	r2, r2, #4
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	440b      	add	r3, r1
 8003c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c78:	e00a      	b.n	8003c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	4908      	ldr	r1, [pc, #32]	; (8003ca0 <__NVIC_SetPriority+0x50>)
 8003c80:	79fb      	ldrb	r3, [r7, #7]
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	3b04      	subs	r3, #4
 8003c88:	0112      	lsls	r2, r2, #4
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	761a      	strb	r2, [r3, #24]
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	e000e100 	.word	0xe000e100
 8003ca0:	e000ed00 	.word	0xe000ed00

08003ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b089      	sub	sp, #36	; 0x24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f003 0307 	and.w	r3, r3, #7
 8003cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	f1c3 0307 	rsb	r3, r3, #7
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	bf28      	it	cs
 8003cc2:	2304      	movcs	r3, #4
 8003cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	3304      	adds	r3, #4
 8003cca:	2b06      	cmp	r3, #6
 8003ccc:	d902      	bls.n	8003cd4 <NVIC_EncodePriority+0x30>
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	3b03      	subs	r3, #3
 8003cd2:	e000      	b.n	8003cd6 <NVIC_EncodePriority+0x32>
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	43da      	mvns	r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	401a      	ands	r2, r3
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cec:	f04f 31ff 	mov.w	r1, #4294967295
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf6:	43d9      	mvns	r1, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cfc:	4313      	orrs	r3, r2
         );
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3724      	adds	r7, #36	; 0x24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bc80      	pop	{r7}
 8003d06:	4770      	bx	lr

08003d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d18:	d301      	bcc.n	8003d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e00f      	b.n	8003d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d1e:	4a0a      	ldr	r2, [pc, #40]	; (8003d48 <SysTick_Config+0x40>)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3b01      	subs	r3, #1
 8003d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d26:	210f      	movs	r1, #15
 8003d28:	f04f 30ff 	mov.w	r0, #4294967295
 8003d2c:	f7ff ff90 	bl	8003c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d30:	4b05      	ldr	r3, [pc, #20]	; (8003d48 <SysTick_Config+0x40>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d36:	4b04      	ldr	r3, [pc, #16]	; (8003d48 <SysTick_Config+0x40>)
 8003d38:	2207      	movs	r2, #7
 8003d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	e000e010 	.word	0xe000e010

08003d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff ff2d 	bl	8003bb4 <__NVIC_SetPriorityGrouping>
}
 8003d5a:	bf00      	nop
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b086      	sub	sp, #24
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	4603      	mov	r3, r0
 8003d6a:	60b9      	str	r1, [r7, #8]
 8003d6c:	607a      	str	r2, [r7, #4]
 8003d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d74:	f7ff ff42 	bl	8003bfc <__NVIC_GetPriorityGrouping>
 8003d78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	68b9      	ldr	r1, [r7, #8]
 8003d7e:	6978      	ldr	r0, [r7, #20]
 8003d80:	f7ff ff90 	bl	8003ca4 <NVIC_EncodePriority>
 8003d84:	4602      	mov	r2, r0
 8003d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff ff5f 	bl	8003c50 <__NVIC_SetPriority>
}
 8003d92:	bf00      	nop
 8003d94:	3718      	adds	r7, #24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b082      	sub	sp, #8
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	4603      	mov	r3, r0
 8003da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff ff35 	bl	8003c18 <__NVIC_EnableIRQ>
}
 8003dae:	bf00      	nop
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b082      	sub	sp, #8
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7ff ffa2 	bl	8003d08 <SysTick_Config>
 8003dc4:	4603      	mov	r3, r0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b085      	sub	sp, #20
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d008      	beq.n	8003df8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2204      	movs	r2, #4
 8003dea:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e020      	b.n	8003e3a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 020e 	bic.w	r2, r2, #14
 8003e06:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0201 	bic.w	r2, r2, #1
 8003e16:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e20:	2101      	movs	r1, #1
 8003e22:	fa01 f202 	lsl.w	r2, r1, r2
 8003e26:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr

08003e44 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d005      	beq.n	8003e68 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2204      	movs	r2, #4
 8003e60:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	73fb      	strb	r3, [r7, #15]
 8003e66:	e051      	b.n	8003f0c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 020e 	bic.w	r2, r2, #14
 8003e76:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0201 	bic.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a22      	ldr	r2, [pc, #136]	; (8003f18 <HAL_DMA_Abort_IT+0xd4>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d029      	beq.n	8003ee6 <HAL_DMA_Abort_IT+0xa2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a21      	ldr	r2, [pc, #132]	; (8003f1c <HAL_DMA_Abort_IT+0xd8>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d022      	beq.n	8003ee2 <HAL_DMA_Abort_IT+0x9e>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a1f      	ldr	r2, [pc, #124]	; (8003f20 <HAL_DMA_Abort_IT+0xdc>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d01a      	beq.n	8003edc <HAL_DMA_Abort_IT+0x98>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a1e      	ldr	r2, [pc, #120]	; (8003f24 <HAL_DMA_Abort_IT+0xe0>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d012      	beq.n	8003ed6 <HAL_DMA_Abort_IT+0x92>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a1c      	ldr	r2, [pc, #112]	; (8003f28 <HAL_DMA_Abort_IT+0xe4>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d00a      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0x8c>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a1b      	ldr	r2, [pc, #108]	; (8003f2c <HAL_DMA_Abort_IT+0xe8>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d102      	bne.n	8003eca <HAL_DMA_Abort_IT+0x86>
 8003ec4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003ec8:	e00e      	b.n	8003ee8 <HAL_DMA_Abort_IT+0xa4>
 8003eca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ece:	e00b      	b.n	8003ee8 <HAL_DMA_Abort_IT+0xa4>
 8003ed0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ed4:	e008      	b.n	8003ee8 <HAL_DMA_Abort_IT+0xa4>
 8003ed6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eda:	e005      	b.n	8003ee8 <HAL_DMA_Abort_IT+0xa4>
 8003edc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ee0:	e002      	b.n	8003ee8 <HAL_DMA_Abort_IT+0xa4>
 8003ee2:	2310      	movs	r3, #16
 8003ee4:	e000      	b.n	8003ee8 <HAL_DMA_Abort_IT+0xa4>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	4a11      	ldr	r2, [pc, #68]	; (8003f30 <HAL_DMA_Abort_IT+0xec>)
 8003eea:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	4798      	blx	r3
    } 
  }
  return status;
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40020008 	.word	0x40020008
 8003f1c:	4002001c 	.word	0x4002001c
 8003f20:	40020030 	.word	0x40020030
 8003f24:	40020044 	.word	0x40020044
 8003f28:	40020058 	.word	0x40020058
 8003f2c:	4002006c 	.word	0x4002006c
 8003f30:	40020000 	.word	0x40020000

08003f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b08b      	sub	sp, #44	; 0x2c
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003f42:	2300      	movs	r3, #0
 8003f44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f46:	e169      	b.n	800421c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003f48:	2201      	movs	r2, #1
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	69fa      	ldr	r2, [r7, #28]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	f040 8158 	bne.w	8004216 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	4a9a      	ldr	r2, [pc, #616]	; (80041d4 <HAL_GPIO_Init+0x2a0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d05e      	beq.n	800402e <HAL_GPIO_Init+0xfa>
 8003f70:	4a98      	ldr	r2, [pc, #608]	; (80041d4 <HAL_GPIO_Init+0x2a0>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d875      	bhi.n	8004062 <HAL_GPIO_Init+0x12e>
 8003f76:	4a98      	ldr	r2, [pc, #608]	; (80041d8 <HAL_GPIO_Init+0x2a4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d058      	beq.n	800402e <HAL_GPIO_Init+0xfa>
 8003f7c:	4a96      	ldr	r2, [pc, #600]	; (80041d8 <HAL_GPIO_Init+0x2a4>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d86f      	bhi.n	8004062 <HAL_GPIO_Init+0x12e>
 8003f82:	4a96      	ldr	r2, [pc, #600]	; (80041dc <HAL_GPIO_Init+0x2a8>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d052      	beq.n	800402e <HAL_GPIO_Init+0xfa>
 8003f88:	4a94      	ldr	r2, [pc, #592]	; (80041dc <HAL_GPIO_Init+0x2a8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d869      	bhi.n	8004062 <HAL_GPIO_Init+0x12e>
 8003f8e:	4a94      	ldr	r2, [pc, #592]	; (80041e0 <HAL_GPIO_Init+0x2ac>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d04c      	beq.n	800402e <HAL_GPIO_Init+0xfa>
 8003f94:	4a92      	ldr	r2, [pc, #584]	; (80041e0 <HAL_GPIO_Init+0x2ac>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d863      	bhi.n	8004062 <HAL_GPIO_Init+0x12e>
 8003f9a:	4a92      	ldr	r2, [pc, #584]	; (80041e4 <HAL_GPIO_Init+0x2b0>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d046      	beq.n	800402e <HAL_GPIO_Init+0xfa>
 8003fa0:	4a90      	ldr	r2, [pc, #576]	; (80041e4 <HAL_GPIO_Init+0x2b0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d85d      	bhi.n	8004062 <HAL_GPIO_Init+0x12e>
 8003fa6:	2b12      	cmp	r3, #18
 8003fa8:	d82a      	bhi.n	8004000 <HAL_GPIO_Init+0xcc>
 8003faa:	2b12      	cmp	r3, #18
 8003fac:	d859      	bhi.n	8004062 <HAL_GPIO_Init+0x12e>
 8003fae:	a201      	add	r2, pc, #4	; (adr r2, 8003fb4 <HAL_GPIO_Init+0x80>)
 8003fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb4:	0800402f 	.word	0x0800402f
 8003fb8:	08004009 	.word	0x08004009
 8003fbc:	0800401b 	.word	0x0800401b
 8003fc0:	0800405d 	.word	0x0800405d
 8003fc4:	08004063 	.word	0x08004063
 8003fc8:	08004063 	.word	0x08004063
 8003fcc:	08004063 	.word	0x08004063
 8003fd0:	08004063 	.word	0x08004063
 8003fd4:	08004063 	.word	0x08004063
 8003fd8:	08004063 	.word	0x08004063
 8003fdc:	08004063 	.word	0x08004063
 8003fe0:	08004063 	.word	0x08004063
 8003fe4:	08004063 	.word	0x08004063
 8003fe8:	08004063 	.word	0x08004063
 8003fec:	08004063 	.word	0x08004063
 8003ff0:	08004063 	.word	0x08004063
 8003ff4:	08004063 	.word	0x08004063
 8003ff8:	08004011 	.word	0x08004011
 8003ffc:	08004025 	.word	0x08004025
 8004000:	4a79      	ldr	r2, [pc, #484]	; (80041e8 <HAL_GPIO_Init+0x2b4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d013      	beq.n	800402e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004006:	e02c      	b.n	8004062 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	623b      	str	r3, [r7, #32]
          break;
 800400e:	e029      	b.n	8004064 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	3304      	adds	r3, #4
 8004016:	623b      	str	r3, [r7, #32]
          break;
 8004018:	e024      	b.n	8004064 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	3308      	adds	r3, #8
 8004020:	623b      	str	r3, [r7, #32]
          break;
 8004022:	e01f      	b.n	8004064 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	330c      	adds	r3, #12
 800402a:	623b      	str	r3, [r7, #32]
          break;
 800402c:	e01a      	b.n	8004064 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d102      	bne.n	800403c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004036:	2304      	movs	r3, #4
 8004038:	623b      	str	r3, [r7, #32]
          break;
 800403a:	e013      	b.n	8004064 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d105      	bne.n	8004050 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004044:	2308      	movs	r3, #8
 8004046:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	69fa      	ldr	r2, [r7, #28]
 800404c:	611a      	str	r2, [r3, #16]
          break;
 800404e:	e009      	b.n	8004064 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004050:	2308      	movs	r3, #8
 8004052:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	69fa      	ldr	r2, [r7, #28]
 8004058:	615a      	str	r2, [r3, #20]
          break;
 800405a:	e003      	b.n	8004064 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800405c:	2300      	movs	r3, #0
 800405e:	623b      	str	r3, [r7, #32]
          break;
 8004060:	e000      	b.n	8004064 <HAL_GPIO_Init+0x130>
          break;
 8004062:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	2bff      	cmp	r3, #255	; 0xff
 8004068:	d801      	bhi.n	800406e <HAL_GPIO_Init+0x13a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	e001      	b.n	8004072 <HAL_GPIO_Init+0x13e>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3304      	adds	r3, #4
 8004072:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	2bff      	cmp	r3, #255	; 0xff
 8004078:	d802      	bhi.n	8004080 <HAL_GPIO_Init+0x14c>
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	e002      	b.n	8004086 <HAL_GPIO_Init+0x152>
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	3b08      	subs	r3, #8
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	210f      	movs	r1, #15
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	fa01 f303 	lsl.w	r3, r1, r3
 8004094:	43db      	mvns	r3, r3
 8004096:	401a      	ands	r2, r3
 8004098:	6a39      	ldr	r1, [r7, #32]
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	fa01 f303 	lsl.w	r3, r1, r3
 80040a0:	431a      	orrs	r2, r3
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 80b1 	beq.w	8004216 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80040b4:	4b4d      	ldr	r3, [pc, #308]	; (80041ec <HAL_GPIO_Init+0x2b8>)
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	4a4c      	ldr	r2, [pc, #304]	; (80041ec <HAL_GPIO_Init+0x2b8>)
 80040ba:	f043 0301 	orr.w	r3, r3, #1
 80040be:	6193      	str	r3, [r2, #24]
 80040c0:	4b4a      	ldr	r3, [pc, #296]	; (80041ec <HAL_GPIO_Init+0x2b8>)
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	60bb      	str	r3, [r7, #8]
 80040ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80040cc:	4a48      	ldr	r2, [pc, #288]	; (80041f0 <HAL_GPIO_Init+0x2bc>)
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	089b      	lsrs	r3, r3, #2
 80040d2:	3302      	adds	r3, #2
 80040d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	f003 0303 	and.w	r3, r3, #3
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	220f      	movs	r2, #15
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	43db      	mvns	r3, r3
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	4013      	ands	r3, r2
 80040ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a40      	ldr	r2, [pc, #256]	; (80041f4 <HAL_GPIO_Init+0x2c0>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d013      	beq.n	8004120 <HAL_GPIO_Init+0x1ec>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a3f      	ldr	r2, [pc, #252]	; (80041f8 <HAL_GPIO_Init+0x2c4>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d00d      	beq.n	800411c <HAL_GPIO_Init+0x1e8>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a3e      	ldr	r2, [pc, #248]	; (80041fc <HAL_GPIO_Init+0x2c8>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d007      	beq.n	8004118 <HAL_GPIO_Init+0x1e4>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a3d      	ldr	r2, [pc, #244]	; (8004200 <HAL_GPIO_Init+0x2cc>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d101      	bne.n	8004114 <HAL_GPIO_Init+0x1e0>
 8004110:	2303      	movs	r3, #3
 8004112:	e006      	b.n	8004122 <HAL_GPIO_Init+0x1ee>
 8004114:	2304      	movs	r3, #4
 8004116:	e004      	b.n	8004122 <HAL_GPIO_Init+0x1ee>
 8004118:	2302      	movs	r3, #2
 800411a:	e002      	b.n	8004122 <HAL_GPIO_Init+0x1ee>
 800411c:	2301      	movs	r3, #1
 800411e:	e000      	b.n	8004122 <HAL_GPIO_Init+0x1ee>
 8004120:	2300      	movs	r3, #0
 8004122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004124:	f002 0203 	and.w	r2, r2, #3
 8004128:	0092      	lsls	r2, r2, #2
 800412a:	4093      	lsls	r3, r2
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	4313      	orrs	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004132:	492f      	ldr	r1, [pc, #188]	; (80041f0 <HAL_GPIO_Init+0x2bc>)
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	089b      	lsrs	r3, r3, #2
 8004138:	3302      	adds	r3, #2
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d006      	beq.n	800415a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800414c:	4b2d      	ldr	r3, [pc, #180]	; (8004204 <HAL_GPIO_Init+0x2d0>)
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	492c      	ldr	r1, [pc, #176]	; (8004204 <HAL_GPIO_Init+0x2d0>)
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	4313      	orrs	r3, r2
 8004156:	608b      	str	r3, [r1, #8]
 8004158:	e006      	b.n	8004168 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800415a:	4b2a      	ldr	r3, [pc, #168]	; (8004204 <HAL_GPIO_Init+0x2d0>)
 800415c:	689a      	ldr	r2, [r3, #8]
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	43db      	mvns	r3, r3
 8004162:	4928      	ldr	r1, [pc, #160]	; (8004204 <HAL_GPIO_Init+0x2d0>)
 8004164:	4013      	ands	r3, r2
 8004166:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d006      	beq.n	8004182 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004174:	4b23      	ldr	r3, [pc, #140]	; (8004204 <HAL_GPIO_Init+0x2d0>)
 8004176:	68da      	ldr	r2, [r3, #12]
 8004178:	4922      	ldr	r1, [pc, #136]	; (8004204 <HAL_GPIO_Init+0x2d0>)
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	4313      	orrs	r3, r2
 800417e:	60cb      	str	r3, [r1, #12]
 8004180:	e006      	b.n	8004190 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004182:	4b20      	ldr	r3, [pc, #128]	; (8004204 <HAL_GPIO_Init+0x2d0>)
 8004184:	68da      	ldr	r2, [r3, #12]
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	43db      	mvns	r3, r3
 800418a:	491e      	ldr	r1, [pc, #120]	; (8004204 <HAL_GPIO_Init+0x2d0>)
 800418c:	4013      	ands	r3, r2
 800418e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d006      	beq.n	80041aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800419c:	4b19      	ldr	r3, [pc, #100]	; (8004204 <HAL_GPIO_Init+0x2d0>)
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	4918      	ldr	r1, [pc, #96]	; (8004204 <HAL_GPIO_Init+0x2d0>)
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	604b      	str	r3, [r1, #4]
 80041a8:	e006      	b.n	80041b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80041aa:	4b16      	ldr	r3, [pc, #88]	; (8004204 <HAL_GPIO_Init+0x2d0>)
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	43db      	mvns	r3, r3
 80041b2:	4914      	ldr	r1, [pc, #80]	; (8004204 <HAL_GPIO_Init+0x2d0>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d021      	beq.n	8004208 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80041c4:	4b0f      	ldr	r3, [pc, #60]	; (8004204 <HAL_GPIO_Init+0x2d0>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	490e      	ldr	r1, [pc, #56]	; (8004204 <HAL_GPIO_Init+0x2d0>)
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	600b      	str	r3, [r1, #0]
 80041d0:	e021      	b.n	8004216 <HAL_GPIO_Init+0x2e2>
 80041d2:	bf00      	nop
 80041d4:	10320000 	.word	0x10320000
 80041d8:	10310000 	.word	0x10310000
 80041dc:	10220000 	.word	0x10220000
 80041e0:	10210000 	.word	0x10210000
 80041e4:	10120000 	.word	0x10120000
 80041e8:	10110000 	.word	0x10110000
 80041ec:	40021000 	.word	0x40021000
 80041f0:	40010000 	.word	0x40010000
 80041f4:	40010800 	.word	0x40010800
 80041f8:	40010c00 	.word	0x40010c00
 80041fc:	40011000 	.word	0x40011000
 8004200:	40011400 	.word	0x40011400
 8004204:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004208:	4b0b      	ldr	r3, [pc, #44]	; (8004238 <HAL_GPIO_Init+0x304>)
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	43db      	mvns	r3, r3
 8004210:	4909      	ldr	r1, [pc, #36]	; (8004238 <HAL_GPIO_Init+0x304>)
 8004212:	4013      	ands	r3, r2
 8004214:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	3301      	adds	r3, #1
 800421a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	fa22 f303 	lsr.w	r3, r2, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	f47f ae8e 	bne.w	8003f48 <HAL_GPIO_Init+0x14>
  }
}
 800422c:	bf00      	nop
 800422e:	bf00      	nop
 8004230:	372c      	adds	r7, #44	; 0x2c
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr
 8004238:	40010400 	.word	0x40010400

0800423c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	460b      	mov	r3, r1
 8004246:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	887b      	ldrh	r3, [r7, #2]
 800424e:	4013      	ands	r3, r2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d002      	beq.n	800425a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004254:	2301      	movs	r3, #1
 8004256:	73fb      	strb	r3, [r7, #15]
 8004258:	e001      	b.n	800425e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800425a:	2300      	movs	r3, #0
 800425c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800425e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	bc80      	pop	{r7}
 8004268:	4770      	bx	lr

0800426a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	460b      	mov	r3, r1
 8004274:	807b      	strh	r3, [r7, #2]
 8004276:	4613      	mov	r3, r2
 8004278:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800427a:	787b      	ldrb	r3, [r7, #1]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004280:	887a      	ldrh	r2, [r7, #2]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004286:	e003      	b.n	8004290 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004288:	887b      	ldrh	r3, [r7, #2]
 800428a:	041a      	lsls	r2, r3, #16
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	611a      	str	r2, [r3, #16]
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	bc80      	pop	{r7}
 8004298:	4770      	bx	lr
	...

0800429c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e272      	b.n	8004794 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 8087 	beq.w	80043ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042bc:	4b92      	ldr	r3, [pc, #584]	; (8004508 <HAL_RCC_OscConfig+0x26c>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f003 030c 	and.w	r3, r3, #12
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d00c      	beq.n	80042e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042c8:	4b8f      	ldr	r3, [pc, #572]	; (8004508 <HAL_RCC_OscConfig+0x26c>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f003 030c 	and.w	r3, r3, #12
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d112      	bne.n	80042fa <HAL_RCC_OscConfig+0x5e>
 80042d4:	4b8c      	ldr	r3, [pc, #560]	; (8004508 <HAL_RCC_OscConfig+0x26c>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e0:	d10b      	bne.n	80042fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e2:	4b89      	ldr	r3, [pc, #548]	; (8004508 <HAL_RCC_OscConfig+0x26c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d06c      	beq.n	80043c8 <HAL_RCC_OscConfig+0x12c>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d168      	bne.n	80043c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e24c      	b.n	8004794 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004302:	d106      	bne.n	8004312 <HAL_RCC_OscConfig+0x76>
 8004304:	4b80      	ldr	r3, [pc, #512]	; (8004508 <HAL_RCC_OscConfig+0x26c>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a7f      	ldr	r2, [pc, #508]	; (8004508 <HAL_RCC_OscConfig+0x26c>)
 800430a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800430e:	6013      	str	r3, [r2, #0]
 8004310:	e02e      	b.n	8004370 <HAL_RCC_OscConfig+0xd4>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10c      	bne.n	8004334 <HAL_RCC_OscConfig+0x98>
 800431a:	4b7b      	ldr	r3, [pc, #492]	; (8004508 <HAL_RCC_OscConfig+0x26c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a7a      	ldr	r2, [pc, #488]	; (8004508 <HAL_RCC_OscConfig+0x26c>)
 8004320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	4b78      	ldr	r3, [pc, #480]	; (8004508 <HAL_RCC_OscConfig+0x26c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a77      	ldr	r2, [pc, #476]	; (8004508 <HAL_RCC_OscConfig+0x26c>)
 800432c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	e01d      	b.n	8004370 <HAL_RCC_OscConfig+0xd4>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800433c:	d10c      	bne.n	8004358 <HAL_RCC_OscConfig+0xbc>
 800433e:	4b72      	ldr	r3, [pc, #456]	; (8004508 <HAL_RCC_OscConfig+0x26c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a71      	ldr	r2, [pc, #452]	; (8004508 <HAL_RCC_OscConfig+0x26c>)
 8004344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	4b6f      	ldr	r3, [pc, #444]	; (8004508 <HAL_RCC_OscConfig+0x26c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a6e      	ldr	r2, [pc, #440]	; (8004508 <HAL_RCC_OscConfig+0x26c>)
 8004350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	e00b      	b.n	8004370 <HAL_RCC_OscConfig+0xd4>
 8004358:	4b6b      	ldr	r3, [pc, #428]	; (8004508 <HAL_RCC_OscConfig+0x26c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a6a      	ldr	r2, [pc, #424]	; (8004508 <HAL_RCC_OscConfig+0x26c>)
 800435e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004362:	6013      	str	r3, [r2, #0]
 8004364:	4b68      	ldr	r3, [pc, #416]	; (8004508 <HAL_RCC_OscConfig+0x26c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a67      	ldr	r2, [pc, #412]	; (8004508 <HAL_RCC_OscConfig+0x26c>)
 800436a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800436e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d013      	beq.n	80043a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004378:	f7fe ffe6 	bl	8003348 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004380:	f7fe ffe2 	bl	8003348 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b64      	cmp	r3, #100	; 0x64
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e200      	b.n	8004794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004392:	4b5d      	ldr	r3, [pc, #372]	; (8004508 <HAL_RCC_OscConfig+0x26c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0f0      	beq.n	8004380 <HAL_RCC_OscConfig+0xe4>
 800439e:	e014      	b.n	80043ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a0:	f7fe ffd2 	bl	8003348 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a8:	f7fe ffce 	bl	8003348 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b64      	cmp	r3, #100	; 0x64
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e1ec      	b.n	8004794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ba:	4b53      	ldr	r3, [pc, #332]	; (8004508 <HAL_RCC_OscConfig+0x26c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1f0      	bne.n	80043a8 <HAL_RCC_OscConfig+0x10c>
 80043c6:	e000      	b.n	80043ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d063      	beq.n	800449e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043d6:	4b4c      	ldr	r3, [pc, #304]	; (8004508 <HAL_RCC_OscConfig+0x26c>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f003 030c 	and.w	r3, r3, #12
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00b      	beq.n	80043fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043e2:	4b49      	ldr	r3, [pc, #292]	; (8004508 <HAL_RCC_OscConfig+0x26c>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f003 030c 	and.w	r3, r3, #12
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d11c      	bne.n	8004428 <HAL_RCC_OscConfig+0x18c>
 80043ee:	4b46      	ldr	r3, [pc, #280]	; (8004508 <HAL_RCC_OscConfig+0x26c>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d116      	bne.n	8004428 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043fa:	4b43      	ldr	r3, [pc, #268]	; (8004508 <HAL_RCC_OscConfig+0x26c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <HAL_RCC_OscConfig+0x176>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d001      	beq.n	8004412 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e1c0      	b.n	8004794 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004412:	4b3d      	ldr	r3, [pc, #244]	; (8004508 <HAL_RCC_OscConfig+0x26c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	4939      	ldr	r1, [pc, #228]	; (8004508 <HAL_RCC_OscConfig+0x26c>)
 8004422:	4313      	orrs	r3, r2
 8004424:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004426:	e03a      	b.n	800449e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d020      	beq.n	8004472 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004430:	4b36      	ldr	r3, [pc, #216]	; (800450c <HAL_RCC_OscConfig+0x270>)
 8004432:	2201      	movs	r2, #1
 8004434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004436:	f7fe ff87 	bl	8003348 <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800443e:	f7fe ff83 	bl	8003348 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e1a1      	b.n	8004794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004450:	4b2d      	ldr	r3, [pc, #180]	; (8004508 <HAL_RCC_OscConfig+0x26c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0f0      	beq.n	800443e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800445c:	4b2a      	ldr	r3, [pc, #168]	; (8004508 <HAL_RCC_OscConfig+0x26c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	4927      	ldr	r1, [pc, #156]	; (8004508 <HAL_RCC_OscConfig+0x26c>)
 800446c:	4313      	orrs	r3, r2
 800446e:	600b      	str	r3, [r1, #0]
 8004470:	e015      	b.n	800449e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004472:	4b26      	ldr	r3, [pc, #152]	; (800450c <HAL_RCC_OscConfig+0x270>)
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004478:	f7fe ff66 	bl	8003348 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004480:	f7fe ff62 	bl	8003348 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e180      	b.n	8004794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004492:	4b1d      	ldr	r3, [pc, #116]	; (8004508 <HAL_RCC_OscConfig+0x26c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d03a      	beq.n	8004520 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d019      	beq.n	80044e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044b2:	4b17      	ldr	r3, [pc, #92]	; (8004510 <HAL_RCC_OscConfig+0x274>)
 80044b4:	2201      	movs	r2, #1
 80044b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044b8:	f7fe ff46 	bl	8003348 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044c0:	f7fe ff42 	bl	8003348 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e160      	b.n	8004794 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044d2:	4b0d      	ldr	r3, [pc, #52]	; (8004508 <HAL_RCC_OscConfig+0x26c>)
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0f0      	beq.n	80044c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044de:	2001      	movs	r0, #1
 80044e0:	f000 face 	bl	8004a80 <RCC_Delay>
 80044e4:	e01c      	b.n	8004520 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044e6:	4b0a      	ldr	r3, [pc, #40]	; (8004510 <HAL_RCC_OscConfig+0x274>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ec:	f7fe ff2c 	bl	8003348 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f2:	e00f      	b.n	8004514 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044f4:	f7fe ff28 	bl	8003348 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d908      	bls.n	8004514 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e146      	b.n	8004794 <HAL_RCC_OscConfig+0x4f8>
 8004506:	bf00      	nop
 8004508:	40021000 	.word	0x40021000
 800450c:	42420000 	.word	0x42420000
 8004510:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004514:	4b92      	ldr	r3, [pc, #584]	; (8004760 <HAL_RCC_OscConfig+0x4c4>)
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1e9      	bne.n	80044f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 80a6 	beq.w	800467a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800452e:	2300      	movs	r3, #0
 8004530:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004532:	4b8b      	ldr	r3, [pc, #556]	; (8004760 <HAL_RCC_OscConfig+0x4c4>)
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10d      	bne.n	800455a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800453e:	4b88      	ldr	r3, [pc, #544]	; (8004760 <HAL_RCC_OscConfig+0x4c4>)
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	4a87      	ldr	r2, [pc, #540]	; (8004760 <HAL_RCC_OscConfig+0x4c4>)
 8004544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004548:	61d3      	str	r3, [r2, #28]
 800454a:	4b85      	ldr	r3, [pc, #532]	; (8004760 <HAL_RCC_OscConfig+0x4c4>)
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004552:	60bb      	str	r3, [r7, #8]
 8004554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004556:	2301      	movs	r3, #1
 8004558:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455a:	4b82      	ldr	r3, [pc, #520]	; (8004764 <HAL_RCC_OscConfig+0x4c8>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004562:	2b00      	cmp	r3, #0
 8004564:	d118      	bne.n	8004598 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004566:	4b7f      	ldr	r3, [pc, #508]	; (8004764 <HAL_RCC_OscConfig+0x4c8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a7e      	ldr	r2, [pc, #504]	; (8004764 <HAL_RCC_OscConfig+0x4c8>)
 800456c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004572:	f7fe fee9 	bl	8003348 <HAL_GetTick>
 8004576:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004578:	e008      	b.n	800458c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800457a:	f7fe fee5 	bl	8003348 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b64      	cmp	r3, #100	; 0x64
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e103      	b.n	8004794 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800458c:	4b75      	ldr	r3, [pc, #468]	; (8004764 <HAL_RCC_OscConfig+0x4c8>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0f0      	beq.n	800457a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d106      	bne.n	80045ae <HAL_RCC_OscConfig+0x312>
 80045a0:	4b6f      	ldr	r3, [pc, #444]	; (8004760 <HAL_RCC_OscConfig+0x4c4>)
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	4a6e      	ldr	r2, [pc, #440]	; (8004760 <HAL_RCC_OscConfig+0x4c4>)
 80045a6:	f043 0301 	orr.w	r3, r3, #1
 80045aa:	6213      	str	r3, [r2, #32]
 80045ac:	e02d      	b.n	800460a <HAL_RCC_OscConfig+0x36e>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10c      	bne.n	80045d0 <HAL_RCC_OscConfig+0x334>
 80045b6:	4b6a      	ldr	r3, [pc, #424]	; (8004760 <HAL_RCC_OscConfig+0x4c4>)
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	4a69      	ldr	r2, [pc, #420]	; (8004760 <HAL_RCC_OscConfig+0x4c4>)
 80045bc:	f023 0301 	bic.w	r3, r3, #1
 80045c0:	6213      	str	r3, [r2, #32]
 80045c2:	4b67      	ldr	r3, [pc, #412]	; (8004760 <HAL_RCC_OscConfig+0x4c4>)
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	4a66      	ldr	r2, [pc, #408]	; (8004760 <HAL_RCC_OscConfig+0x4c4>)
 80045c8:	f023 0304 	bic.w	r3, r3, #4
 80045cc:	6213      	str	r3, [r2, #32]
 80045ce:	e01c      	b.n	800460a <HAL_RCC_OscConfig+0x36e>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	2b05      	cmp	r3, #5
 80045d6:	d10c      	bne.n	80045f2 <HAL_RCC_OscConfig+0x356>
 80045d8:	4b61      	ldr	r3, [pc, #388]	; (8004760 <HAL_RCC_OscConfig+0x4c4>)
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	4a60      	ldr	r2, [pc, #384]	; (8004760 <HAL_RCC_OscConfig+0x4c4>)
 80045de:	f043 0304 	orr.w	r3, r3, #4
 80045e2:	6213      	str	r3, [r2, #32]
 80045e4:	4b5e      	ldr	r3, [pc, #376]	; (8004760 <HAL_RCC_OscConfig+0x4c4>)
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	4a5d      	ldr	r2, [pc, #372]	; (8004760 <HAL_RCC_OscConfig+0x4c4>)
 80045ea:	f043 0301 	orr.w	r3, r3, #1
 80045ee:	6213      	str	r3, [r2, #32]
 80045f0:	e00b      	b.n	800460a <HAL_RCC_OscConfig+0x36e>
 80045f2:	4b5b      	ldr	r3, [pc, #364]	; (8004760 <HAL_RCC_OscConfig+0x4c4>)
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	4a5a      	ldr	r2, [pc, #360]	; (8004760 <HAL_RCC_OscConfig+0x4c4>)
 80045f8:	f023 0301 	bic.w	r3, r3, #1
 80045fc:	6213      	str	r3, [r2, #32]
 80045fe:	4b58      	ldr	r3, [pc, #352]	; (8004760 <HAL_RCC_OscConfig+0x4c4>)
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	4a57      	ldr	r2, [pc, #348]	; (8004760 <HAL_RCC_OscConfig+0x4c4>)
 8004604:	f023 0304 	bic.w	r3, r3, #4
 8004608:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d015      	beq.n	800463e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004612:	f7fe fe99 	bl	8003348 <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004618:	e00a      	b.n	8004630 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800461a:	f7fe fe95 	bl	8003348 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	f241 3288 	movw	r2, #5000	; 0x1388
 8004628:	4293      	cmp	r3, r2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e0b1      	b.n	8004794 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004630:	4b4b      	ldr	r3, [pc, #300]	; (8004760 <HAL_RCC_OscConfig+0x4c4>)
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0ee      	beq.n	800461a <HAL_RCC_OscConfig+0x37e>
 800463c:	e014      	b.n	8004668 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800463e:	f7fe fe83 	bl	8003348 <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004644:	e00a      	b.n	800465c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004646:	f7fe fe7f 	bl	8003348 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	f241 3288 	movw	r2, #5000	; 0x1388
 8004654:	4293      	cmp	r3, r2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e09b      	b.n	8004794 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800465c:	4b40      	ldr	r3, [pc, #256]	; (8004760 <HAL_RCC_OscConfig+0x4c4>)
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1ee      	bne.n	8004646 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004668:	7dfb      	ldrb	r3, [r7, #23]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d105      	bne.n	800467a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800466e:	4b3c      	ldr	r3, [pc, #240]	; (8004760 <HAL_RCC_OscConfig+0x4c4>)
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	4a3b      	ldr	r2, [pc, #236]	; (8004760 <HAL_RCC_OscConfig+0x4c4>)
 8004674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004678:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 8087 	beq.w	8004792 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004684:	4b36      	ldr	r3, [pc, #216]	; (8004760 <HAL_RCC_OscConfig+0x4c4>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f003 030c 	and.w	r3, r3, #12
 800468c:	2b08      	cmp	r3, #8
 800468e:	d061      	beq.n	8004754 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	69db      	ldr	r3, [r3, #28]
 8004694:	2b02      	cmp	r3, #2
 8004696:	d146      	bne.n	8004726 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004698:	4b33      	ldr	r3, [pc, #204]	; (8004768 <HAL_RCC_OscConfig+0x4cc>)
 800469a:	2200      	movs	r2, #0
 800469c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469e:	f7fe fe53 	bl	8003348 <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a6:	f7fe fe4f 	bl	8003348 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e06d      	b.n	8004794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046b8:	4b29      	ldr	r3, [pc, #164]	; (8004760 <HAL_RCC_OscConfig+0x4c4>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1f0      	bne.n	80046a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046cc:	d108      	bne.n	80046e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046ce:	4b24      	ldr	r3, [pc, #144]	; (8004760 <HAL_RCC_OscConfig+0x4c4>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	4921      	ldr	r1, [pc, #132]	; (8004760 <HAL_RCC_OscConfig+0x4c4>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046e0:	4b1f      	ldr	r3, [pc, #124]	; (8004760 <HAL_RCC_OscConfig+0x4c4>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a19      	ldr	r1, [r3, #32]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	430b      	orrs	r3, r1
 80046f2:	491b      	ldr	r1, [pc, #108]	; (8004760 <HAL_RCC_OscConfig+0x4c4>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046f8:	4b1b      	ldr	r3, [pc, #108]	; (8004768 <HAL_RCC_OscConfig+0x4cc>)
 80046fa:	2201      	movs	r2, #1
 80046fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fe:	f7fe fe23 	bl	8003348 <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004704:	e008      	b.n	8004718 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004706:	f7fe fe1f 	bl	8003348 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e03d      	b.n	8004794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004718:	4b11      	ldr	r3, [pc, #68]	; (8004760 <HAL_RCC_OscConfig+0x4c4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0f0      	beq.n	8004706 <HAL_RCC_OscConfig+0x46a>
 8004724:	e035      	b.n	8004792 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004726:	4b10      	ldr	r3, [pc, #64]	; (8004768 <HAL_RCC_OscConfig+0x4cc>)
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472c:	f7fe fe0c 	bl	8003348 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004734:	f7fe fe08 	bl	8003348 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e026      	b.n	8004794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004746:	4b06      	ldr	r3, [pc, #24]	; (8004760 <HAL_RCC_OscConfig+0x4c4>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f0      	bne.n	8004734 <HAL_RCC_OscConfig+0x498>
 8004752:	e01e      	b.n	8004792 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d107      	bne.n	800476c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e019      	b.n	8004794 <HAL_RCC_OscConfig+0x4f8>
 8004760:	40021000 	.word	0x40021000
 8004764:	40007000 	.word	0x40007000
 8004768:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800476c:	4b0b      	ldr	r3, [pc, #44]	; (800479c <HAL_RCC_OscConfig+0x500>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	429a      	cmp	r2, r3
 800477e:	d106      	bne.n	800478e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800478a:	429a      	cmp	r2, r3
 800478c:	d001      	beq.n	8004792 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e000      	b.n	8004794 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3718      	adds	r7, #24
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40021000 	.word	0x40021000

080047a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e0d0      	b.n	8004956 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047b4:	4b6a      	ldr	r3, [pc, #424]	; (8004960 <HAL_RCC_ClockConfig+0x1c0>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d910      	bls.n	80047e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c2:	4b67      	ldr	r3, [pc, #412]	; (8004960 <HAL_RCC_ClockConfig+0x1c0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f023 0207 	bic.w	r2, r3, #7
 80047ca:	4965      	ldr	r1, [pc, #404]	; (8004960 <HAL_RCC_ClockConfig+0x1c0>)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d2:	4b63      	ldr	r3, [pc, #396]	; (8004960 <HAL_RCC_ClockConfig+0x1c0>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d001      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e0b8      	b.n	8004956 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d020      	beq.n	8004832 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d005      	beq.n	8004808 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047fc:	4b59      	ldr	r3, [pc, #356]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	4a58      	ldr	r2, [pc, #352]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 8004802:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004806:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0308 	and.w	r3, r3, #8
 8004810:	2b00      	cmp	r3, #0
 8004812:	d005      	beq.n	8004820 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004814:	4b53      	ldr	r3, [pc, #332]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	4a52      	ldr	r2, [pc, #328]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 800481a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800481e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004820:	4b50      	ldr	r3, [pc, #320]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	494d      	ldr	r1, [pc, #308]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 800482e:	4313      	orrs	r3, r2
 8004830:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b00      	cmp	r3, #0
 800483c:	d040      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d107      	bne.n	8004856 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004846:	4b47      	ldr	r3, [pc, #284]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d115      	bne.n	800487e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e07f      	b.n	8004956 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b02      	cmp	r3, #2
 800485c:	d107      	bne.n	800486e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800485e:	4b41      	ldr	r3, [pc, #260]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d109      	bne.n	800487e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e073      	b.n	8004956 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800486e:	4b3d      	ldr	r3, [pc, #244]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e06b      	b.n	8004956 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800487e:	4b39      	ldr	r3, [pc, #228]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f023 0203 	bic.w	r2, r3, #3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	4936      	ldr	r1, [pc, #216]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 800488c:	4313      	orrs	r3, r2
 800488e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004890:	f7fe fd5a 	bl	8003348 <HAL_GetTick>
 8004894:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004896:	e00a      	b.n	80048ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004898:	f7fe fd56 	bl	8003348 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e053      	b.n	8004956 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ae:	4b2d      	ldr	r3, [pc, #180]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f003 020c 	and.w	r2, r3, #12
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	429a      	cmp	r2, r3
 80048be:	d1eb      	bne.n	8004898 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048c0:	4b27      	ldr	r3, [pc, #156]	; (8004960 <HAL_RCC_ClockConfig+0x1c0>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d210      	bcs.n	80048f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ce:	4b24      	ldr	r3, [pc, #144]	; (8004960 <HAL_RCC_ClockConfig+0x1c0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f023 0207 	bic.w	r2, r3, #7
 80048d6:	4922      	ldr	r1, [pc, #136]	; (8004960 <HAL_RCC_ClockConfig+0x1c0>)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	4313      	orrs	r3, r2
 80048dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048de:	4b20      	ldr	r3, [pc, #128]	; (8004960 <HAL_RCC_ClockConfig+0x1c0>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d001      	beq.n	80048f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e032      	b.n	8004956 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d008      	beq.n	800490e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048fc:	4b19      	ldr	r3, [pc, #100]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	4916      	ldr	r1, [pc, #88]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 800490a:	4313      	orrs	r3, r2
 800490c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0308 	and.w	r3, r3, #8
 8004916:	2b00      	cmp	r3, #0
 8004918:	d009      	beq.n	800492e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800491a:	4b12      	ldr	r3, [pc, #72]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	490e      	ldr	r1, [pc, #56]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 800492a:	4313      	orrs	r3, r2
 800492c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800492e:	f000 f821 	bl	8004974 <HAL_RCC_GetSysClockFreq>
 8004932:	4602      	mov	r2, r0
 8004934:	4b0b      	ldr	r3, [pc, #44]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	091b      	lsrs	r3, r3, #4
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	490a      	ldr	r1, [pc, #40]	; (8004968 <HAL_RCC_ClockConfig+0x1c8>)
 8004940:	5ccb      	ldrb	r3, [r1, r3]
 8004942:	fa22 f303 	lsr.w	r3, r2, r3
 8004946:	4a09      	ldr	r2, [pc, #36]	; (800496c <HAL_RCC_ClockConfig+0x1cc>)
 8004948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800494a:	4b09      	ldr	r3, [pc, #36]	; (8004970 <HAL_RCC_ClockConfig+0x1d0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f7fe fcb8 	bl	80032c4 <HAL_InitTick>

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	40022000 	.word	0x40022000
 8004964:	40021000 	.word	0x40021000
 8004968:	0800aaf4 	.word	0x0800aaf4
 800496c:	2000000c 	.word	0x2000000c
 8004970:	20000010 	.word	0x20000010

08004974 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	2300      	movs	r3, #0
 8004980:	60bb      	str	r3, [r7, #8]
 8004982:	2300      	movs	r3, #0
 8004984:	617b      	str	r3, [r7, #20]
 8004986:	2300      	movs	r3, #0
 8004988:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800498e:	4b1e      	ldr	r3, [pc, #120]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x94>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f003 030c 	and.w	r3, r3, #12
 800499a:	2b04      	cmp	r3, #4
 800499c:	d002      	beq.n	80049a4 <HAL_RCC_GetSysClockFreq+0x30>
 800499e:	2b08      	cmp	r3, #8
 80049a0:	d003      	beq.n	80049aa <HAL_RCC_GetSysClockFreq+0x36>
 80049a2:	e027      	b.n	80049f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049a4:	4b19      	ldr	r3, [pc, #100]	; (8004a0c <HAL_RCC_GetSysClockFreq+0x98>)
 80049a6:	613b      	str	r3, [r7, #16]
      break;
 80049a8:	e027      	b.n	80049fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	0c9b      	lsrs	r3, r3, #18
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	4a17      	ldr	r2, [pc, #92]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x9c>)
 80049b4:	5cd3      	ldrb	r3, [r2, r3]
 80049b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d010      	beq.n	80049e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049c2:	4b11      	ldr	r3, [pc, #68]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x94>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	0c5b      	lsrs	r3, r3, #17
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	4a11      	ldr	r2, [pc, #68]	; (8004a14 <HAL_RCC_GetSysClockFreq+0xa0>)
 80049ce:	5cd3      	ldrb	r3, [r2, r3]
 80049d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a0d      	ldr	r2, [pc, #52]	; (8004a0c <HAL_RCC_GetSysClockFreq+0x98>)
 80049d6:	fb03 f202 	mul.w	r2, r3, r2
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e0:	617b      	str	r3, [r7, #20]
 80049e2:	e004      	b.n	80049ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a0c      	ldr	r2, [pc, #48]	; (8004a18 <HAL_RCC_GetSysClockFreq+0xa4>)
 80049e8:	fb02 f303 	mul.w	r3, r2, r3
 80049ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	613b      	str	r3, [r7, #16]
      break;
 80049f2:	e002      	b.n	80049fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049f4:	4b05      	ldr	r3, [pc, #20]	; (8004a0c <HAL_RCC_GetSysClockFreq+0x98>)
 80049f6:	613b      	str	r3, [r7, #16]
      break;
 80049f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049fa:	693b      	ldr	r3, [r7, #16]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	371c      	adds	r7, #28
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bc80      	pop	{r7}
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	007a1200 	.word	0x007a1200
 8004a10:	0800ab0c 	.word	0x0800ab0c
 8004a14:	0800ab1c 	.word	0x0800ab1c
 8004a18:	003d0900 	.word	0x003d0900

08004a1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a20:	4b02      	ldr	r3, [pc, #8]	; (8004a2c <HAL_RCC_GetHCLKFreq+0x10>)
 8004a22:	681b      	ldr	r3, [r3, #0]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bc80      	pop	{r7}
 8004a2a:	4770      	bx	lr
 8004a2c:	2000000c 	.word	0x2000000c

08004a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a34:	f7ff fff2 	bl	8004a1c <HAL_RCC_GetHCLKFreq>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	0a1b      	lsrs	r3, r3, #8
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	4903      	ldr	r1, [pc, #12]	; (8004a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a46:	5ccb      	ldrb	r3, [r1, r3]
 8004a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40021000 	.word	0x40021000
 8004a54:	0800ab04 	.word	0x0800ab04

08004a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a5c:	f7ff ffde 	bl	8004a1c <HAL_RCC_GetHCLKFreq>
 8004a60:	4602      	mov	r2, r0
 8004a62:	4b05      	ldr	r3, [pc, #20]	; (8004a78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	0adb      	lsrs	r3, r3, #11
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	4903      	ldr	r1, [pc, #12]	; (8004a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a6e:	5ccb      	ldrb	r3, [r1, r3]
 8004a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	0800ab04 	.word	0x0800ab04

08004a80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a88:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <RCC_Delay+0x34>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a0a      	ldr	r2, [pc, #40]	; (8004ab8 <RCC_Delay+0x38>)
 8004a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a92:	0a5b      	lsrs	r3, r3, #9
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	fb02 f303 	mul.w	r3, r2, r3
 8004a9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a9c:	bf00      	nop
  }
  while (Delay --);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	1e5a      	subs	r2, r3, #1
 8004aa2:	60fa      	str	r2, [r7, #12]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1f9      	bne.n	8004a9c <RCC_Delay+0x1c>
}
 8004aa8:	bf00      	nop
 8004aaa:	bf00      	nop
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr
 8004ab4:	2000000c 	.word	0x2000000c
 8004ab8:	10624dd3 	.word	0x10624dd3

08004abc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	613b      	str	r3, [r7, #16]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d07d      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004adc:	4b4f      	ldr	r3, [pc, #316]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ade:	69db      	ldr	r3, [r3, #28]
 8004ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10d      	bne.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ae8:	4b4c      	ldr	r3, [pc, #304]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	4a4b      	ldr	r2, [pc, #300]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af2:	61d3      	str	r3, [r2, #28]
 8004af4:	4b49      	ldr	r3, [pc, #292]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004afc:	60bb      	str	r3, [r7, #8]
 8004afe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b00:	2301      	movs	r3, #1
 8004b02:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b04:	4b46      	ldr	r3, [pc, #280]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d118      	bne.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b10:	4b43      	ldr	r3, [pc, #268]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a42      	ldr	r2, [pc, #264]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b1c:	f7fe fc14 	bl	8003348 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b22:	e008      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b24:	f7fe fc10 	bl	8003348 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b64      	cmp	r3, #100	; 0x64
 8004b30:	d901      	bls.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e06d      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b36:	4b3a      	ldr	r3, [pc, #232]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d0f0      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b42:	4b36      	ldr	r3, [pc, #216]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b4a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d02e      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d027      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b60:	4b2e      	ldr	r3, [pc, #184]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b68:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b6a:	4b2e      	ldr	r3, [pc, #184]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b70:	4b2c      	ldr	r3, [pc, #176]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b76:	4a29      	ldr	r2, [pc, #164]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d014      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b86:	f7fe fbdf 	bl	8003348 <HAL_GetTick>
 8004b8a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b8c:	e00a      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b8e:	f7fe fbdb 	bl	8003348 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e036      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ba4:	4b1d      	ldr	r3, [pc, #116]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0ee      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bb0:	4b1a      	ldr	r3, [pc, #104]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	4917      	ldr	r1, [pc, #92]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004bc2:	7dfb      	ldrb	r3, [r7, #23]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d105      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bc8:	4b14      	ldr	r3, [pc, #80]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	4a13      	ldr	r2, [pc, #76]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bd2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d008      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004be0:	4b0e      	ldr	r3, [pc, #56]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	490b      	ldr	r1, [pc, #44]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0310 	and.w	r3, r3, #16
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d008      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bfe:	4b07      	ldr	r3, [pc, #28]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	4904      	ldr	r1, [pc, #16]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3718      	adds	r7, #24
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	40007000 	.word	0x40007000
 8004c24:	42420440 	.word	0x42420440

08004c28 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b088      	sub	sp, #32
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	2300      	movs	r3, #0
 8004c36:	61fb      	str	r3, [r7, #28]
 8004c38:	2300      	movs	r3, #0
 8004c3a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	2300      	movs	r3, #0
 8004c42:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b10      	cmp	r3, #16
 8004c48:	d00a      	beq.n	8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b10      	cmp	r3, #16
 8004c4e:	f200 808a 	bhi.w	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d045      	beq.n	8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d075      	beq.n	8004d4a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004c5e:	e082      	b.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004c60:	4b46      	ldr	r3, [pc, #280]	; (8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004c66:	4b45      	ldr	r3, [pc, #276]	; (8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d07b      	beq.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	0c9b      	lsrs	r3, r3, #18
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	4a41      	ldr	r2, [pc, #260]	; (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004c7c:	5cd3      	ldrb	r3, [r2, r3]
 8004c7e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d015      	beq.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c8a:	4b3c      	ldr	r3, [pc, #240]	; (8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	0c5b      	lsrs	r3, r3, #17
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	4a3b      	ldr	r2, [pc, #236]	; (8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004c96:	5cd3      	ldrb	r3, [r2, r3]
 8004c98:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00d      	beq.n	8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004ca4:	4a38      	ldr	r2, [pc, #224]	; (8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	fb02 f303 	mul.w	r3, r2, r3
 8004cb2:	61fb      	str	r3, [r7, #28]
 8004cb4:	e004      	b.n	8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	4a34      	ldr	r2, [pc, #208]	; (8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004cba:	fb02 f303 	mul.w	r3, r2, r3
 8004cbe:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004cc0:	4b2e      	ldr	r3, [pc, #184]	; (8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ccc:	d102      	bne.n	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	61bb      	str	r3, [r7, #24]
      break;
 8004cd2:	e04a      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	4a2d      	ldr	r2, [pc, #180]	; (8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004cda:	fba2 2303 	umull	r2, r3, r2, r3
 8004cde:	085b      	lsrs	r3, r3, #1
 8004ce0:	61bb      	str	r3, [r7, #24]
      break;
 8004ce2:	e042      	b.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004ce4:	4b25      	ldr	r3, [pc, #148]	; (8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf4:	d108      	bne.n	8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d003      	beq.n	8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004d00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d04:	61bb      	str	r3, [r7, #24]
 8004d06:	e01f      	b.n	8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d12:	d109      	bne.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004d14:	4b19      	ldr	r3, [pc, #100]	; (8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004d20:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004d24:	61bb      	str	r3, [r7, #24]
 8004d26:	e00f      	b.n	8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d32:	d11c      	bne.n	8004d6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004d34:	4b11      	ldr	r3, [pc, #68]	; (8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d016      	beq.n	8004d6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004d40:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004d44:	61bb      	str	r3, [r7, #24]
      break;
 8004d46:	e012      	b.n	8004d6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004d48:	e011      	b.n	8004d6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004d4a:	f7ff fe85 	bl	8004a58 <HAL_RCC_GetPCLK2Freq>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	4b0a      	ldr	r3, [pc, #40]	; (8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	0b9b      	lsrs	r3, r3, #14
 8004d56:	f003 0303 	and.w	r3, r3, #3
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d62:	61bb      	str	r3, [r7, #24]
      break;
 8004d64:	e004      	b.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004d66:	bf00      	nop
 8004d68:	e002      	b.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004d6a:	bf00      	nop
 8004d6c:	e000      	b.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004d6e:	bf00      	nop
    }
  }
  return (frequency);
 8004d70:	69bb      	ldr	r3, [r7, #24]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3720      	adds	r7, #32
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	0800ab20 	.word	0x0800ab20
 8004d84:	0800ab30 	.word	0x0800ab30
 8004d88:	007a1200 	.word	0x007a1200
 8004d8c:	003d0900 	.word	0x003d0900
 8004d90:	aaaaaaab 	.word	0xaaaaaaab

08004d94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e041      	b.n	8004e2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d106      	bne.n	8004dc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7fe f8b6 	bl	8002f2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	3304      	adds	r3, #4
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4610      	mov	r0, r2
 8004dd4:	f000 fd36 	bl	8005844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
	...

08004e34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d001      	beq.n	8004e4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e032      	b.n	8004eb2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a18      	ldr	r2, [pc, #96]	; (8004ebc <HAL_TIM_Base_Start+0x88>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d00e      	beq.n	8004e7c <HAL_TIM_Base_Start+0x48>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e66:	d009      	beq.n	8004e7c <HAL_TIM_Base_Start+0x48>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a14      	ldr	r2, [pc, #80]	; (8004ec0 <HAL_TIM_Base_Start+0x8c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d004      	beq.n	8004e7c <HAL_TIM_Base_Start+0x48>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a13      	ldr	r2, [pc, #76]	; (8004ec4 <HAL_TIM_Base_Start+0x90>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d111      	bne.n	8004ea0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 0307 	and.w	r3, r3, #7
 8004e86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b06      	cmp	r3, #6
 8004e8c:	d010      	beq.n	8004eb0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f042 0201 	orr.w	r2, r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e9e:	e007      	b.n	8004eb0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0201 	orr.w	r2, r2, #1
 8004eae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr
 8004ebc:	40012c00 	.word	0x40012c00
 8004ec0:	40000400 	.word	0x40000400
 8004ec4:	40000800 	.word	0x40000800

08004ec8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d001      	beq.n	8004ee0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e03a      	b.n	8004f56 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68da      	ldr	r2, [r3, #12]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0201 	orr.w	r2, r2, #1
 8004ef6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a18      	ldr	r2, [pc, #96]	; (8004f60 <HAL_TIM_Base_Start_IT+0x98>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d00e      	beq.n	8004f20 <HAL_TIM_Base_Start_IT+0x58>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f0a:	d009      	beq.n	8004f20 <HAL_TIM_Base_Start_IT+0x58>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a14      	ldr	r2, [pc, #80]	; (8004f64 <HAL_TIM_Base_Start_IT+0x9c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d004      	beq.n	8004f20 <HAL_TIM_Base_Start_IT+0x58>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a13      	ldr	r2, [pc, #76]	; (8004f68 <HAL_TIM_Base_Start_IT+0xa0>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d111      	bne.n	8004f44 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2b06      	cmp	r3, #6
 8004f30:	d010      	beq.n	8004f54 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0201 	orr.w	r2, r2, #1
 8004f40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f42:	e007      	b.n	8004f54 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0201 	orr.w	r2, r2, #1
 8004f52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bc80      	pop	{r7}
 8004f5e:	4770      	bx	lr
 8004f60:	40012c00 	.word	0x40012c00
 8004f64:	40000400 	.word	0x40000400
 8004f68:	40000800 	.word	0x40000800

08004f6c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e041      	b.n	8005002 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f839 	bl	800500a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4610      	mov	r0, r2
 8004fac:	f000 fc4a 	bl	8005844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005012:	bf00      	nop
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	bc80      	pop	{r7}
 800501a:	4770      	bx	lr

0800501c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e041      	b.n	80050b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d106      	bne.n	8005048 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f839 	bl	80050ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2202      	movs	r2, #2
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3304      	adds	r3, #4
 8005058:	4619      	mov	r1, r3
 800505a:	4610      	mov	r0, r2
 800505c:	f000 fbf2 	bl	8005844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bc80      	pop	{r7}
 80050ca:	4770      	bx	lr

080050cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d109      	bne.n	80050f0 <HAL_TIM_PWM_Start+0x24>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	bf14      	ite	ne
 80050e8:	2301      	movne	r3, #1
 80050ea:	2300      	moveq	r3, #0
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	e022      	b.n	8005136 <HAL_TIM_PWM_Start+0x6a>
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	d109      	bne.n	800510a <HAL_TIM_PWM_Start+0x3e>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b01      	cmp	r3, #1
 8005100:	bf14      	ite	ne
 8005102:	2301      	movne	r3, #1
 8005104:	2300      	moveq	r3, #0
 8005106:	b2db      	uxtb	r3, r3
 8005108:	e015      	b.n	8005136 <HAL_TIM_PWM_Start+0x6a>
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b08      	cmp	r3, #8
 800510e:	d109      	bne.n	8005124 <HAL_TIM_PWM_Start+0x58>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b01      	cmp	r3, #1
 800511a:	bf14      	ite	ne
 800511c:	2301      	movne	r3, #1
 800511e:	2300      	moveq	r3, #0
 8005120:	b2db      	uxtb	r3, r3
 8005122:	e008      	b.n	8005136 <HAL_TIM_PWM_Start+0x6a>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b01      	cmp	r3, #1
 800512e:	bf14      	ite	ne
 8005130:	2301      	movne	r3, #1
 8005132:	2300      	moveq	r3, #0
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e05e      	b.n	80051fc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d104      	bne.n	800514e <HAL_TIM_PWM_Start+0x82>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800514c:	e013      	b.n	8005176 <HAL_TIM_PWM_Start+0xaa>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b04      	cmp	r3, #4
 8005152:	d104      	bne.n	800515e <HAL_TIM_PWM_Start+0x92>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800515c:	e00b      	b.n	8005176 <HAL_TIM_PWM_Start+0xaa>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b08      	cmp	r3, #8
 8005162:	d104      	bne.n	800516e <HAL_TIM_PWM_Start+0xa2>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2202      	movs	r2, #2
 8005168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800516c:	e003      	b.n	8005176 <HAL_TIM_PWM_Start+0xaa>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2202      	movs	r2, #2
 8005172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2201      	movs	r2, #1
 800517c:	6839      	ldr	r1, [r7, #0]
 800517e:	4618      	mov	r0, r3
 8005180:	f000 fde0 	bl	8005d44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a1e      	ldr	r2, [pc, #120]	; (8005204 <HAL_TIM_PWM_Start+0x138>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d107      	bne.n	800519e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800519c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a18      	ldr	r2, [pc, #96]	; (8005204 <HAL_TIM_PWM_Start+0x138>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d00e      	beq.n	80051c6 <HAL_TIM_PWM_Start+0xfa>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b0:	d009      	beq.n	80051c6 <HAL_TIM_PWM_Start+0xfa>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a14      	ldr	r2, [pc, #80]	; (8005208 <HAL_TIM_PWM_Start+0x13c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d004      	beq.n	80051c6 <HAL_TIM_PWM_Start+0xfa>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a12      	ldr	r2, [pc, #72]	; (800520c <HAL_TIM_PWM_Start+0x140>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d111      	bne.n	80051ea <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f003 0307 	and.w	r3, r3, #7
 80051d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b06      	cmp	r3, #6
 80051d6:	d010      	beq.n	80051fa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0201 	orr.w	r2, r2, #1
 80051e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e8:	e007      	b.n	80051fa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f042 0201 	orr.w	r2, r2, #1
 80051f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	40012c00 	.word	0x40012c00
 8005208:	40000400 	.word	0x40000400
 800520c:	40000800 	.word	0x40000800

08005210 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b02      	cmp	r3, #2
 8005224:	d122      	bne.n	800526c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b02      	cmp	r3, #2
 8005232:	d11b      	bne.n	800526c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f06f 0202 	mvn.w	r2, #2
 800523c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	f003 0303 	and.w	r3, r3, #3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fadb 	bl	800580e <HAL_TIM_IC_CaptureCallback>
 8005258:	e005      	b.n	8005266 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 face 	bl	80057fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 fadd 	bl	8005820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	f003 0304 	and.w	r3, r3, #4
 8005276:	2b04      	cmp	r3, #4
 8005278:	d122      	bne.n	80052c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f003 0304 	and.w	r3, r3, #4
 8005284:	2b04      	cmp	r3, #4
 8005286:	d11b      	bne.n	80052c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f06f 0204 	mvn.w	r2, #4
 8005290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2202      	movs	r2, #2
 8005296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d003      	beq.n	80052ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 fab1 	bl	800580e <HAL_TIM_IC_CaptureCallback>
 80052ac:	e005      	b.n	80052ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 faa4 	bl	80057fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 fab3 	bl	8005820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	f003 0308 	and.w	r3, r3, #8
 80052ca:	2b08      	cmp	r3, #8
 80052cc:	d122      	bne.n	8005314 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f003 0308 	and.w	r3, r3, #8
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d11b      	bne.n	8005314 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f06f 0208 	mvn.w	r2, #8
 80052e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2204      	movs	r2, #4
 80052ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	f003 0303 	and.w	r3, r3, #3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fa87 	bl	800580e <HAL_TIM_IC_CaptureCallback>
 8005300:	e005      	b.n	800530e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fa7a 	bl	80057fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 fa89 	bl	8005820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f003 0310 	and.w	r3, r3, #16
 800531e:	2b10      	cmp	r3, #16
 8005320:	d122      	bne.n	8005368 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f003 0310 	and.w	r3, r3, #16
 800532c:	2b10      	cmp	r3, #16
 800532e:	d11b      	bne.n	8005368 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f06f 0210 	mvn.w	r2, #16
 8005338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2208      	movs	r2, #8
 800533e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fa5d 	bl	800580e <HAL_TIM_IC_CaptureCallback>
 8005354:	e005      	b.n	8005362 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fa50 	bl	80057fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 fa5f 	bl	8005820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b01      	cmp	r3, #1
 8005374:	d10e      	bne.n	8005394 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b01      	cmp	r3, #1
 8005382:	d107      	bne.n	8005394 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f06f 0201 	mvn.w	r2, #1
 800538c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 fa2b 	bl	80057ea <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800539e:	2b80      	cmp	r3, #128	; 0x80
 80053a0:	d10e      	bne.n	80053c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ac:	2b80      	cmp	r3, #128	; 0x80
 80053ae:	d107      	bne.n	80053c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fd4d 	bl	8005e5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ca:	2b40      	cmp	r3, #64	; 0x40
 80053cc:	d10e      	bne.n	80053ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d8:	2b40      	cmp	r3, #64	; 0x40
 80053da:	d107      	bne.n	80053ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 fa23 	bl	8005832 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f003 0320 	and.w	r3, r3, #32
 80053f6:	2b20      	cmp	r3, #32
 80053f8:	d10e      	bne.n	8005418 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f003 0320 	and.w	r3, r3, #32
 8005404:	2b20      	cmp	r3, #32
 8005406:	d107      	bne.n	8005418 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f06f 0220 	mvn.w	r2, #32
 8005410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fd18 	bl	8005e48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005418:	bf00      	nop
 800541a:	3708      	adds	r7, #8
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800542c:	2300      	movs	r3, #0
 800542e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005436:	2b01      	cmp	r3, #1
 8005438:	d101      	bne.n	800543e <HAL_TIM_OC_ConfigChannel+0x1e>
 800543a:	2302      	movs	r3, #2
 800543c:	e048      	b.n	80054d0 <HAL_TIM_OC_ConfigChannel+0xb0>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b0c      	cmp	r3, #12
 800544a:	d839      	bhi.n	80054c0 <HAL_TIM_OC_ConfigChannel+0xa0>
 800544c:	a201      	add	r2, pc, #4	; (adr r2, 8005454 <HAL_TIM_OC_ConfigChannel+0x34>)
 800544e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005452:	bf00      	nop
 8005454:	08005489 	.word	0x08005489
 8005458:	080054c1 	.word	0x080054c1
 800545c:	080054c1 	.word	0x080054c1
 8005460:	080054c1 	.word	0x080054c1
 8005464:	08005497 	.word	0x08005497
 8005468:	080054c1 	.word	0x080054c1
 800546c:	080054c1 	.word	0x080054c1
 8005470:	080054c1 	.word	0x080054c1
 8005474:	080054a5 	.word	0x080054a5
 8005478:	080054c1 	.word	0x080054c1
 800547c:	080054c1 	.word	0x080054c1
 8005480:	080054c1 	.word	0x080054c1
 8005484:	080054b3 	.word	0x080054b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68b9      	ldr	r1, [r7, #8]
 800548e:	4618      	mov	r0, r3
 8005490:	f000 fa3a 	bl	8005908 <TIM_OC1_SetConfig>
      break;
 8005494:	e017      	b.n	80054c6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68b9      	ldr	r1, [r7, #8]
 800549c:	4618      	mov	r0, r3
 800549e:	f000 fa99 	bl	80059d4 <TIM_OC2_SetConfig>
      break;
 80054a2:	e010      	b.n	80054c6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68b9      	ldr	r1, [r7, #8]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 fafc 	bl	8005aa8 <TIM_OC3_SetConfig>
      break;
 80054b0:	e009      	b.n	80054c6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68b9      	ldr	r1, [r7, #8]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f000 fb5f 	bl	8005b7c <TIM_OC4_SetConfig>
      break;
 80054be:	e002      	b.n	80054c6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	75fb      	strb	r3, [r7, #23]
      break;
 80054c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3718      	adds	r7, #24
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054e4:	2300      	movs	r3, #0
 80054e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d101      	bne.n	80054f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054f2:	2302      	movs	r3, #2
 80054f4:	e0ae      	b.n	8005654 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b0c      	cmp	r3, #12
 8005502:	f200 809f 	bhi.w	8005644 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005506:	a201      	add	r2, pc, #4	; (adr r2, 800550c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550c:	08005541 	.word	0x08005541
 8005510:	08005645 	.word	0x08005645
 8005514:	08005645 	.word	0x08005645
 8005518:	08005645 	.word	0x08005645
 800551c:	08005581 	.word	0x08005581
 8005520:	08005645 	.word	0x08005645
 8005524:	08005645 	.word	0x08005645
 8005528:	08005645 	.word	0x08005645
 800552c:	080055c3 	.word	0x080055c3
 8005530:	08005645 	.word	0x08005645
 8005534:	08005645 	.word	0x08005645
 8005538:	08005645 	.word	0x08005645
 800553c:	08005603 	.word	0x08005603
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68b9      	ldr	r1, [r7, #8]
 8005546:	4618      	mov	r0, r3
 8005548:	f000 f9de 	bl	8005908 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	699a      	ldr	r2, [r3, #24]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f042 0208 	orr.w	r2, r2, #8
 800555a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	699a      	ldr	r2, [r3, #24]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 0204 	bic.w	r2, r2, #4
 800556a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6999      	ldr	r1, [r3, #24]
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	691a      	ldr	r2, [r3, #16]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	619a      	str	r2, [r3, #24]
      break;
 800557e:	e064      	b.n	800564a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68b9      	ldr	r1, [r7, #8]
 8005586:	4618      	mov	r0, r3
 8005588:	f000 fa24 	bl	80059d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	699a      	ldr	r2, [r3, #24]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800559a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	699a      	ldr	r2, [r3, #24]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6999      	ldr	r1, [r3, #24]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	021a      	lsls	r2, r3, #8
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	430a      	orrs	r2, r1
 80055be:	619a      	str	r2, [r3, #24]
      break;
 80055c0:	e043      	b.n	800564a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68b9      	ldr	r1, [r7, #8]
 80055c8:	4618      	mov	r0, r3
 80055ca:	f000 fa6d 	bl	8005aa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	69da      	ldr	r2, [r3, #28]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f042 0208 	orr.w	r2, r2, #8
 80055dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	69da      	ldr	r2, [r3, #28]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 0204 	bic.w	r2, r2, #4
 80055ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	69d9      	ldr	r1, [r3, #28]
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	691a      	ldr	r2, [r3, #16]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	61da      	str	r2, [r3, #28]
      break;
 8005600:	e023      	b.n	800564a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68b9      	ldr	r1, [r7, #8]
 8005608:	4618      	mov	r0, r3
 800560a:	f000 fab7 	bl	8005b7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	69da      	ldr	r2, [r3, #28]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800561c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	69da      	ldr	r2, [r3, #28]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800562c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	69d9      	ldr	r1, [r3, #28]
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	021a      	lsls	r2, r3, #8
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	61da      	str	r2, [r3, #28]
      break;
 8005642:	e002      	b.n	800564a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	75fb      	strb	r3, [r7, #23]
      break;
 8005648:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005652:	7dfb      	ldrb	r3, [r7, #23]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005670:	2b01      	cmp	r3, #1
 8005672:	d101      	bne.n	8005678 <HAL_TIM_ConfigClockSource+0x1c>
 8005674:	2302      	movs	r3, #2
 8005676:	e0b4      	b.n	80057e2 <HAL_TIM_ConfigClockSource+0x186>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005696:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800569e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056b0:	d03e      	beq.n	8005730 <HAL_TIM_ConfigClockSource+0xd4>
 80056b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056b6:	f200 8087 	bhi.w	80057c8 <HAL_TIM_ConfigClockSource+0x16c>
 80056ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056be:	f000 8086 	beq.w	80057ce <HAL_TIM_ConfigClockSource+0x172>
 80056c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c6:	d87f      	bhi.n	80057c8 <HAL_TIM_ConfigClockSource+0x16c>
 80056c8:	2b70      	cmp	r3, #112	; 0x70
 80056ca:	d01a      	beq.n	8005702 <HAL_TIM_ConfigClockSource+0xa6>
 80056cc:	2b70      	cmp	r3, #112	; 0x70
 80056ce:	d87b      	bhi.n	80057c8 <HAL_TIM_ConfigClockSource+0x16c>
 80056d0:	2b60      	cmp	r3, #96	; 0x60
 80056d2:	d050      	beq.n	8005776 <HAL_TIM_ConfigClockSource+0x11a>
 80056d4:	2b60      	cmp	r3, #96	; 0x60
 80056d6:	d877      	bhi.n	80057c8 <HAL_TIM_ConfigClockSource+0x16c>
 80056d8:	2b50      	cmp	r3, #80	; 0x50
 80056da:	d03c      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0xfa>
 80056dc:	2b50      	cmp	r3, #80	; 0x50
 80056de:	d873      	bhi.n	80057c8 <HAL_TIM_ConfigClockSource+0x16c>
 80056e0:	2b40      	cmp	r3, #64	; 0x40
 80056e2:	d058      	beq.n	8005796 <HAL_TIM_ConfigClockSource+0x13a>
 80056e4:	2b40      	cmp	r3, #64	; 0x40
 80056e6:	d86f      	bhi.n	80057c8 <HAL_TIM_ConfigClockSource+0x16c>
 80056e8:	2b30      	cmp	r3, #48	; 0x30
 80056ea:	d064      	beq.n	80057b6 <HAL_TIM_ConfigClockSource+0x15a>
 80056ec:	2b30      	cmp	r3, #48	; 0x30
 80056ee:	d86b      	bhi.n	80057c8 <HAL_TIM_ConfigClockSource+0x16c>
 80056f0:	2b20      	cmp	r3, #32
 80056f2:	d060      	beq.n	80057b6 <HAL_TIM_ConfigClockSource+0x15a>
 80056f4:	2b20      	cmp	r3, #32
 80056f6:	d867      	bhi.n	80057c8 <HAL_TIM_ConfigClockSource+0x16c>
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d05c      	beq.n	80057b6 <HAL_TIM_ConfigClockSource+0x15a>
 80056fc:	2b10      	cmp	r3, #16
 80056fe:	d05a      	beq.n	80057b6 <HAL_TIM_ConfigClockSource+0x15a>
 8005700:	e062      	b.n	80057c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6818      	ldr	r0, [r3, #0]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	6899      	ldr	r1, [r3, #8]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f000 faf8 	bl	8005d06 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005724:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	609a      	str	r2, [r3, #8]
      break;
 800572e:	e04f      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6818      	ldr	r0, [r3, #0]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	6899      	ldr	r1, [r3, #8]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f000 fae1 	bl	8005d06 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689a      	ldr	r2, [r3, #8]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005752:	609a      	str	r2, [r3, #8]
      break;
 8005754:	e03c      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6818      	ldr	r0, [r3, #0]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	6859      	ldr	r1, [r3, #4]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	461a      	mov	r2, r3
 8005764:	f000 fa58 	bl	8005c18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2150      	movs	r1, #80	; 0x50
 800576e:	4618      	mov	r0, r3
 8005770:	f000 faaf 	bl	8005cd2 <TIM_ITRx_SetConfig>
      break;
 8005774:	e02c      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6818      	ldr	r0, [r3, #0]
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	6859      	ldr	r1, [r3, #4]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	461a      	mov	r2, r3
 8005784:	f000 fa76 	bl	8005c74 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2160      	movs	r1, #96	; 0x60
 800578e:	4618      	mov	r0, r3
 8005790:	f000 fa9f 	bl	8005cd2 <TIM_ITRx_SetConfig>
      break;
 8005794:	e01c      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6818      	ldr	r0, [r3, #0]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	6859      	ldr	r1, [r3, #4]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	461a      	mov	r2, r3
 80057a4:	f000 fa38 	bl	8005c18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2140      	movs	r1, #64	; 0x40
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 fa8f 	bl	8005cd2 <TIM_ITRx_SetConfig>
      break;
 80057b4:	e00c      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4619      	mov	r1, r3
 80057c0:	4610      	mov	r0, r2
 80057c2:	f000 fa86 	bl	8005cd2 <TIM_ITRx_SetConfig>
      break;
 80057c6:	e003      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	73fb      	strb	r3, [r7, #15]
      break;
 80057cc:	e000      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b083      	sub	sp, #12
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80057f2:	bf00      	nop
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bc80      	pop	{r7}
 80057fa:	4770      	bx	lr

080057fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	bc80      	pop	{r7}
 800580c:	4770      	bx	lr

0800580e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800580e:	b480      	push	{r7}
 8005810:	b083      	sub	sp, #12
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005816:	bf00      	nop
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	bc80      	pop	{r7}
 800581e:	4770      	bx	lr

08005820 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	bc80      	pop	{r7}
 8005830:	4770      	bx	lr

08005832 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005832:	b480      	push	{r7}
 8005834:	b083      	sub	sp, #12
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800583a:	bf00      	nop
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	bc80      	pop	{r7}
 8005842:	4770      	bx	lr

08005844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a29      	ldr	r2, [pc, #164]	; (80058fc <TIM_Base_SetConfig+0xb8>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d00b      	beq.n	8005874 <TIM_Base_SetConfig+0x30>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005862:	d007      	beq.n	8005874 <TIM_Base_SetConfig+0x30>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a26      	ldr	r2, [pc, #152]	; (8005900 <TIM_Base_SetConfig+0xbc>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d003      	beq.n	8005874 <TIM_Base_SetConfig+0x30>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a25      	ldr	r2, [pc, #148]	; (8005904 <TIM_Base_SetConfig+0xc0>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d108      	bne.n	8005886 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800587a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	4313      	orrs	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a1c      	ldr	r2, [pc, #112]	; (80058fc <TIM_Base_SetConfig+0xb8>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d00b      	beq.n	80058a6 <TIM_Base_SetConfig+0x62>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005894:	d007      	beq.n	80058a6 <TIM_Base_SetConfig+0x62>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a19      	ldr	r2, [pc, #100]	; (8005900 <TIM_Base_SetConfig+0xbc>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d003      	beq.n	80058a6 <TIM_Base_SetConfig+0x62>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a18      	ldr	r2, [pc, #96]	; (8005904 <TIM_Base_SetConfig+0xc0>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d108      	bne.n	80058b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	689a      	ldr	r2, [r3, #8]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a07      	ldr	r2, [pc, #28]	; (80058fc <TIM_Base_SetConfig+0xb8>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d103      	bne.n	80058ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	691a      	ldr	r2, [r3, #16]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	615a      	str	r2, [r3, #20]
}
 80058f2:	bf00      	nop
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bc80      	pop	{r7}
 80058fa:	4770      	bx	lr
 80058fc:	40012c00 	.word	0x40012c00
 8005900:	40000400 	.word	0x40000400
 8005904:	40000800 	.word	0x40000800

08005908 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	f023 0201 	bic.w	r2, r3, #1
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f023 0303 	bic.w	r3, r3, #3
 800593e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	4313      	orrs	r3, r2
 8005948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f023 0302 	bic.w	r3, r3, #2
 8005950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	4313      	orrs	r3, r2
 800595a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a1c      	ldr	r2, [pc, #112]	; (80059d0 <TIM_OC1_SetConfig+0xc8>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d10c      	bne.n	800597e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f023 0308 	bic.w	r3, r3, #8
 800596a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	4313      	orrs	r3, r2
 8005974:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f023 0304 	bic.w	r3, r3, #4
 800597c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a13      	ldr	r2, [pc, #76]	; (80059d0 <TIM_OC1_SetConfig+0xc8>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d111      	bne.n	80059aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800598c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	4313      	orrs	r3, r2
 800599e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	621a      	str	r2, [r3, #32]
}
 80059c4:	bf00      	nop
 80059c6:	371c      	adds	r7, #28
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bc80      	pop	{r7}
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	40012c00 	.word	0x40012c00

080059d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a1b      	ldr	r3, [r3, #32]
 80059e8:	f023 0210 	bic.w	r2, r3, #16
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	021b      	lsls	r3, r3, #8
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f023 0320 	bic.w	r3, r3, #32
 8005a1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	011b      	lsls	r3, r3, #4
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a1d      	ldr	r2, [pc, #116]	; (8005aa4 <TIM_OC2_SetConfig+0xd0>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d10d      	bne.n	8005a50 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	011b      	lsls	r3, r3, #4
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a14      	ldr	r2, [pc, #80]	; (8005aa4 <TIM_OC2_SetConfig+0xd0>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d113      	bne.n	8005a80 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	685a      	ldr	r2, [r3, #4]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	621a      	str	r2, [r3, #32]
}
 8005a9a:	bf00      	nop
 8005a9c:	371c      	adds	r7, #28
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bc80      	pop	{r7}
 8005aa2:	4770      	bx	lr
 8005aa4:	40012c00 	.word	0x40012c00

08005aa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 0303 	bic.w	r3, r3, #3
 8005ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005af0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	021b      	lsls	r3, r3, #8
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a1d      	ldr	r2, [pc, #116]	; (8005b78 <TIM_OC3_SetConfig+0xd0>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d10d      	bne.n	8005b22 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	021b      	lsls	r3, r3, #8
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a14      	ldr	r2, [pc, #80]	; (8005b78 <TIM_OC3_SetConfig+0xd0>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d113      	bne.n	8005b52 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	011b      	lsls	r3, r3, #4
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	011b      	lsls	r3, r3, #4
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	621a      	str	r2, [r3, #32]
}
 8005b6c:	bf00      	nop
 8005b6e:	371c      	adds	r7, #28
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bc80      	pop	{r7}
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	40012c00 	.word	0x40012c00

08005b7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	021b      	lsls	r3, r3, #8
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	031b      	lsls	r3, r3, #12
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a0f      	ldr	r2, [pc, #60]	; (8005c14 <TIM_OC4_SetConfig+0x98>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d109      	bne.n	8005bf0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005be2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	019b      	lsls	r3, r3, #6
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	621a      	str	r2, [r3, #32]
}
 8005c0a:	bf00      	nop
 8005c0c:	371c      	adds	r7, #28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bc80      	pop	{r7}
 8005c12:	4770      	bx	lr
 8005c14:	40012c00 	.word	0x40012c00

08005c18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	f023 0201 	bic.w	r2, r3, #1
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	011b      	lsls	r3, r3, #4
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f023 030a 	bic.w	r3, r3, #10
 8005c54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	621a      	str	r2, [r3, #32]
}
 8005c6a:	bf00      	nop
 8005c6c:	371c      	adds	r7, #28
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bc80      	pop	{r7}
 8005c72:	4770      	bx	lr

08005c74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	f023 0210 	bic.w	r2, r3, #16
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	031b      	lsls	r3, r3, #12
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cb0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	011b      	lsls	r3, r3, #4
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	621a      	str	r2, [r3, #32]
}
 8005cc8:	bf00      	nop
 8005cca:	371c      	adds	r7, #28
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bc80      	pop	{r7}
 8005cd0:	4770      	bx	lr

08005cd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b085      	sub	sp, #20
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	f043 0307 	orr.w	r3, r3, #7
 8005cf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	609a      	str	r2, [r3, #8]
}
 8005cfc:	bf00      	nop
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bc80      	pop	{r7}
 8005d04:	4770      	bx	lr

08005d06 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b087      	sub	sp, #28
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	60f8      	str	r0, [r7, #12]
 8005d0e:	60b9      	str	r1, [r7, #8]
 8005d10:	607a      	str	r2, [r7, #4]
 8005d12:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d20:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	021a      	lsls	r2, r3, #8
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	609a      	str	r2, [r3, #8]
}
 8005d3a:	bf00      	nop
 8005d3c:	371c      	adds	r7, #28
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bc80      	pop	{r7}
 8005d42:	4770      	bx	lr

08005d44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f003 031f 	and.w	r3, r3, #31
 8005d56:	2201      	movs	r2, #1
 8005d58:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a1a      	ldr	r2, [r3, #32]
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	43db      	mvns	r3, r3
 8005d66:	401a      	ands	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6a1a      	ldr	r2, [r3, #32]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	f003 031f 	and.w	r3, r3, #31
 8005d76:	6879      	ldr	r1, [r7, #4]
 8005d78:	fa01 f303 	lsl.w	r3, r1, r3
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	621a      	str	r2, [r3, #32]
}
 8005d82:	bf00      	nop
 8005d84:	371c      	adds	r7, #28
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bc80      	pop	{r7}
 8005d8a:	4770      	bx	lr

08005d8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d101      	bne.n	8005da4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005da0:	2302      	movs	r3, #2
 8005da2:	e046      	b.n	8005e32 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a16      	ldr	r2, [pc, #88]	; (8005e3c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d00e      	beq.n	8005e06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df0:	d009      	beq.n	8005e06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a12      	ldr	r2, [pc, #72]	; (8005e40 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d004      	beq.n	8005e06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a10      	ldr	r2, [pc, #64]	; (8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d10c      	bne.n	8005e20 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bc80      	pop	{r7}
 8005e3a:	4770      	bx	lr
 8005e3c:	40012c00 	.word	0x40012c00
 8005e40:	40000400 	.word	0x40000400
 8005e44:	40000800 	.word	0x40000800

08005e48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bc80      	pop	{r7}
 8005e58:	4770      	bx	lr

08005e5a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b083      	sub	sp, #12
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e62:	bf00      	nop
 8005e64:	370c      	adds	r7, #12
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bc80      	pop	{r7}
 8005e6a:	4770      	bx	lr

08005e6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e042      	b.n	8005f04 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d106      	bne.n	8005e98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7fd f94a 	bl	800312c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2224      	movs	r2, #36	; 0x24
 8005e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68da      	ldr	r2, [r3, #12]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005eae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 fcd5 	bl	8006860 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	691a      	ldr	r2, [r3, #16]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ec4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	695a      	ldr	r2, [r3, #20]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ed4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68da      	ldr	r2, [r3, #12]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ee4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	4613      	mov	r3, r2
 8005f18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b20      	cmp	r3, #32
 8005f24:	d112      	bne.n	8005f4c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d002      	beq.n	8005f32 <HAL_UART_Receive_IT+0x26>
 8005f2c:	88fb      	ldrh	r3, [r7, #6]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e00b      	b.n	8005f4e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005f3c:	88fb      	ldrh	r3, [r7, #6]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	68b9      	ldr	r1, [r7, #8]
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f000 fab7 	bl	80064b6 <UART_Start_Receive_IT>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	e000      	b.n	8005f4e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005f4c:	2302      	movs	r3, #2
  }
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
	...

08005f58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b0ba      	sub	sp, #232	; 0xe8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005f84:	2300      	movs	r3, #0
 8005f86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f8e:	f003 030f 	and.w	r3, r3, #15
 8005f92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005f96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10f      	bne.n	8005fbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fa2:	f003 0320 	and.w	r3, r3, #32
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d009      	beq.n	8005fbe <HAL_UART_IRQHandler+0x66>
 8005faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fae:	f003 0320 	and.w	r3, r3, #32
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 fb93 	bl	80066e2 <UART_Receive_IT>
      return;
 8005fbc:	e25b      	b.n	8006476 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005fbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f000 80de 	beq.w	8006184 <HAL_UART_IRQHandler+0x22c>
 8005fc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fcc:	f003 0301 	and.w	r3, r3, #1
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d106      	bne.n	8005fe2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fd8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 80d1 	beq.w	8006184 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00b      	beq.n	8006006 <HAL_UART_IRQHandler+0xae>
 8005fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d005      	beq.n	8006006 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffe:	f043 0201 	orr.w	r2, r3, #1
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800600a:	f003 0304 	and.w	r3, r3, #4
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00b      	beq.n	800602a <HAL_UART_IRQHandler+0xd2>
 8006012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b00      	cmp	r3, #0
 800601c:	d005      	beq.n	800602a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006022:	f043 0202 	orr.w	r2, r3, #2
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800602a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00b      	beq.n	800604e <HAL_UART_IRQHandler+0xf6>
 8006036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800603a:	f003 0301 	and.w	r3, r3, #1
 800603e:	2b00      	cmp	r3, #0
 8006040:	d005      	beq.n	800604e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006046:	f043 0204 	orr.w	r2, r3, #4
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800604e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006052:	f003 0308 	and.w	r3, r3, #8
 8006056:	2b00      	cmp	r3, #0
 8006058:	d011      	beq.n	800607e <HAL_UART_IRQHandler+0x126>
 800605a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800605e:	f003 0320 	and.w	r3, r3, #32
 8006062:	2b00      	cmp	r3, #0
 8006064:	d105      	bne.n	8006072 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b00      	cmp	r3, #0
 8006070:	d005      	beq.n	800607e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006076:	f043 0208 	orr.w	r2, r3, #8
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 81f2 	beq.w	800646c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800608c:	f003 0320 	and.w	r3, r3, #32
 8006090:	2b00      	cmp	r3, #0
 8006092:	d008      	beq.n	80060a6 <HAL_UART_IRQHandler+0x14e>
 8006094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006098:	f003 0320 	and.w	r3, r3, #32
 800609c:	2b00      	cmp	r3, #0
 800609e:	d002      	beq.n	80060a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 fb1e 	bl	80066e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	bf14      	ite	ne
 80060b4:	2301      	movne	r3, #1
 80060b6:	2300      	moveq	r3, #0
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c2:	f003 0308 	and.w	r3, r3, #8
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d103      	bne.n	80060d2 <HAL_UART_IRQHandler+0x17a>
 80060ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d04f      	beq.n	8006172 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fa28 	bl	8006528 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d041      	beq.n	800616a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	3314      	adds	r3, #20
 80060ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060f4:	e853 3f00 	ldrex	r3, [r3]
 80060f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80060fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006104:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3314      	adds	r3, #20
 800610e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006112:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006116:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800611e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006122:	e841 2300 	strex	r3, r2, [r1]
 8006126:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800612a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1d9      	bne.n	80060e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006136:	2b00      	cmp	r3, #0
 8006138:	d013      	beq.n	8006162 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800613e:	4a7e      	ldr	r2, [pc, #504]	; (8006338 <HAL_UART_IRQHandler+0x3e0>)
 8006140:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006146:	4618      	mov	r0, r3
 8006148:	f7fd fe7c 	bl	8003e44 <HAL_DMA_Abort_IT>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d016      	beq.n	8006180 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800615c:	4610      	mov	r0, r2
 800615e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006160:	e00e      	b.n	8006180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f993 	bl	800648e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006168:	e00a      	b.n	8006180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f98f 	bl	800648e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006170:	e006      	b.n	8006180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f98b 	bl	800648e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800617e:	e175      	b.n	800646c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006180:	bf00      	nop
    return;
 8006182:	e173      	b.n	800646c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006188:	2b01      	cmp	r3, #1
 800618a:	f040 814f 	bne.w	800642c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800618e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006192:	f003 0310 	and.w	r3, r3, #16
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 8148 	beq.w	800642c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800619c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061a0:	f003 0310 	and.w	r3, r3, #16
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 8141 	beq.w	800642c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061aa:	2300      	movs	r3, #0
 80061ac:	60bb      	str	r3, [r7, #8]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	60bb      	str	r3, [r7, #8]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	60bb      	str	r3, [r7, #8]
 80061be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f000 80b6 	beq.w	800633c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80061dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f000 8145 	beq.w	8006470 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061ee:	429a      	cmp	r2, r3
 80061f0:	f080 813e 	bcs.w	8006470 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	2b20      	cmp	r3, #32
 8006204:	f000 8088 	beq.w	8006318 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	330c      	adds	r3, #12
 800620e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006212:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006216:	e853 3f00 	ldrex	r3, [r3]
 800621a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800621e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006222:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006226:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	330c      	adds	r3, #12
 8006230:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006234:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006238:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006240:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006244:	e841 2300 	strex	r3, r2, [r1]
 8006248:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800624c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1d9      	bne.n	8006208 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	3314      	adds	r3, #20
 800625a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800625e:	e853 3f00 	ldrex	r3, [r3]
 8006262:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006264:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006266:	f023 0301 	bic.w	r3, r3, #1
 800626a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	3314      	adds	r3, #20
 8006274:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006278:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800627c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006280:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006284:	e841 2300 	strex	r3, r2, [r1]
 8006288:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800628a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1e1      	bne.n	8006254 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	3314      	adds	r3, #20
 8006296:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006298:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800629a:	e853 3f00 	ldrex	r3, [r3]
 800629e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80062a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	3314      	adds	r3, #20
 80062b0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80062b4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80062b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80062ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80062bc:	e841 2300 	strex	r3, r2, [r1]
 80062c0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80062c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1e3      	bne.n	8006290 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2220      	movs	r2, #32
 80062cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	330c      	adds	r3, #12
 80062dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062e0:	e853 3f00 	ldrex	r3, [r3]
 80062e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80062e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062e8:	f023 0310 	bic.w	r3, r3, #16
 80062ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	330c      	adds	r3, #12
 80062f6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80062fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80062fc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006300:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006302:	e841 2300 	strex	r3, r2, [r1]
 8006306:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1e3      	bne.n	80062d6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006312:	4618      	mov	r0, r3
 8006314:	f7fd fd5b 	bl	8003dce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2202      	movs	r2, #2
 800631c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006326:	b29b      	uxth	r3, r3
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	b29b      	uxth	r3, r3
 800632c:	4619      	mov	r1, r3
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f8b6 	bl	80064a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006334:	e09c      	b.n	8006470 <HAL_UART_IRQHandler+0x518>
 8006336:	bf00      	nop
 8006338:	080065ed 	.word	0x080065ed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006344:	b29b      	uxth	r3, r3
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006350:	b29b      	uxth	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	f000 808e 	beq.w	8006474 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006358:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 8089 	beq.w	8006474 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	330c      	adds	r3, #12
 8006368:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636c:	e853 3f00 	ldrex	r3, [r3]
 8006370:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006374:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006378:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	330c      	adds	r3, #12
 8006382:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006386:	647a      	str	r2, [r7, #68]	; 0x44
 8006388:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800638c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800638e:	e841 2300 	strex	r3, r2, [r1]
 8006392:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1e3      	bne.n	8006362 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	3314      	adds	r3, #20
 80063a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	e853 3f00 	ldrex	r3, [r3]
 80063a8:	623b      	str	r3, [r7, #32]
   return(result);
 80063aa:	6a3b      	ldr	r3, [r7, #32]
 80063ac:	f023 0301 	bic.w	r3, r3, #1
 80063b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	3314      	adds	r3, #20
 80063ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80063be:	633a      	str	r2, [r7, #48]	; 0x30
 80063c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063c6:	e841 2300 	strex	r3, r2, [r1]
 80063ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1e3      	bne.n	800639a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2220      	movs	r2, #32
 80063d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	330c      	adds	r3, #12
 80063e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	e853 3f00 	ldrex	r3, [r3]
 80063ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f023 0310 	bic.w	r3, r3, #16
 80063f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	330c      	adds	r3, #12
 8006400:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006404:	61fa      	str	r2, [r7, #28]
 8006406:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006408:	69b9      	ldr	r1, [r7, #24]
 800640a:	69fa      	ldr	r2, [r7, #28]
 800640c:	e841 2300 	strex	r3, r2, [r1]
 8006410:	617b      	str	r3, [r7, #20]
   return(result);
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1e3      	bne.n	80063e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2202      	movs	r2, #2
 800641c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800641e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006422:	4619      	mov	r1, r3
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f83b 	bl	80064a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800642a:	e023      	b.n	8006474 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800642c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006434:	2b00      	cmp	r3, #0
 8006436:	d009      	beq.n	800644c <HAL_UART_IRQHandler+0x4f4>
 8006438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800643c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006440:	2b00      	cmp	r3, #0
 8006442:	d003      	beq.n	800644c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f8e5 	bl	8006614 <UART_Transmit_IT>
    return;
 800644a:	e014      	b.n	8006476 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800644c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00e      	beq.n	8006476 <HAL_UART_IRQHandler+0x51e>
 8006458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800645c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006460:	2b00      	cmp	r3, #0
 8006462:	d008      	beq.n	8006476 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 f924 	bl	80066b2 <UART_EndTransmit_IT>
    return;
 800646a:	e004      	b.n	8006476 <HAL_UART_IRQHandler+0x51e>
    return;
 800646c:	bf00      	nop
 800646e:	e002      	b.n	8006476 <HAL_UART_IRQHandler+0x51e>
      return;
 8006470:	bf00      	nop
 8006472:	e000      	b.n	8006476 <HAL_UART_IRQHandler+0x51e>
      return;
 8006474:	bf00      	nop
  }
}
 8006476:	37e8      	adds	r7, #232	; 0xe8
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	bc80      	pop	{r7}
 800648c:	4770      	bx	lr

0800648e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800648e:	b480      	push	{r7}
 8006490:	b083      	sub	sp, #12
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006496:	bf00      	nop
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	bc80      	pop	{r7}
 800649e:	4770      	bx	lr

080064a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	460b      	mov	r3, r1
 80064aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bc80      	pop	{r7}
 80064b4:	4770      	bx	lr

080064b6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b085      	sub	sp, #20
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	60f8      	str	r0, [r7, #12]
 80064be:	60b9      	str	r1, [r7, #8]
 80064c0:	4613      	mov	r3, r2
 80064c2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	88fa      	ldrh	r2, [r7, #6]
 80064ce:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	88fa      	ldrh	r2, [r7, #6]
 80064d4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2222      	movs	r2, #34	; 0x22
 80064e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d007      	beq.n	80064fc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68da      	ldr	r2, [r3, #12]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064fa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	695a      	ldr	r2, [r3, #20]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f042 0201 	orr.w	r2, r2, #1
 800650a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68da      	ldr	r2, [r3, #12]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f042 0220 	orr.w	r2, r2, #32
 800651a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	bc80      	pop	{r7}
 8006526:	4770      	bx	lr

08006528 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006528:	b480      	push	{r7}
 800652a:	b095      	sub	sp, #84	; 0x54
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	330c      	adds	r3, #12
 8006536:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800653a:	e853 3f00 	ldrex	r3, [r3]
 800653e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006542:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006546:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	330c      	adds	r3, #12
 800654e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006550:	643a      	str	r2, [r7, #64]	; 0x40
 8006552:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006554:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006556:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006558:	e841 2300 	strex	r3, r2, [r1]
 800655c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800655e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1e5      	bne.n	8006530 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	3314      	adds	r3, #20
 800656a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	e853 3f00 	ldrex	r3, [r3]
 8006572:	61fb      	str	r3, [r7, #28]
   return(result);
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	f023 0301 	bic.w	r3, r3, #1
 800657a:	64bb      	str	r3, [r7, #72]	; 0x48
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	3314      	adds	r3, #20
 8006582:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006584:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006586:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006588:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800658a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800658c:	e841 2300 	strex	r3, r2, [r1]
 8006590:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1e5      	bne.n	8006564 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659c:	2b01      	cmp	r3, #1
 800659e:	d119      	bne.n	80065d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	330c      	adds	r3, #12
 80065a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	e853 3f00 	ldrex	r3, [r3]
 80065ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f023 0310 	bic.w	r3, r3, #16
 80065b6:	647b      	str	r3, [r7, #68]	; 0x44
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	330c      	adds	r3, #12
 80065be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065c0:	61ba      	str	r2, [r7, #24]
 80065c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c4:	6979      	ldr	r1, [r7, #20]
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	e841 2300 	strex	r3, r2, [r1]
 80065cc:	613b      	str	r3, [r7, #16]
   return(result);
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1e5      	bne.n	80065a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80065e2:	bf00      	nop
 80065e4:	3754      	adds	r7, #84	; 0x54
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bc80      	pop	{r7}
 80065ea:	4770      	bx	lr

080065ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f7ff ff41 	bl	800648e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800660c:	bf00      	nop
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b21      	cmp	r3, #33	; 0x21
 8006626:	d13e      	bne.n	80066a6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006630:	d114      	bne.n	800665c <UART_Transmit_IT+0x48>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d110      	bne.n	800665c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	881b      	ldrh	r3, [r3, #0]
 8006644:	461a      	mov	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800664e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	1c9a      	adds	r2, r3, #2
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	621a      	str	r2, [r3, #32]
 800665a:	e008      	b.n	800666e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	1c59      	adds	r1, r3, #1
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	6211      	str	r1, [r2, #32]
 8006666:	781a      	ldrb	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006672:	b29b      	uxth	r3, r3
 8006674:	3b01      	subs	r3, #1
 8006676:	b29b      	uxth	r3, r3
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	4619      	mov	r1, r3
 800667c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10f      	bne.n	80066a2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68da      	ldr	r2, [r3, #12]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006690:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68da      	ldr	r2, [r3, #12]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	e000      	b.n	80066a8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80066a6:	2302      	movs	r3, #2
  }
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3714      	adds	r7, #20
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bc80      	pop	{r7}
 80066b0:	4770      	bx	lr

080066b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b082      	sub	sp, #8
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68da      	ldr	r2, [r3, #12]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2220      	movs	r2, #32
 80066ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f7ff fed2 	bl	800647c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3708      	adds	r7, #8
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b08c      	sub	sp, #48	; 0x30
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b22      	cmp	r3, #34	; 0x22
 80066f4:	f040 80ae 	bne.w	8006854 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006700:	d117      	bne.n	8006732 <UART_Receive_IT+0x50>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d113      	bne.n	8006732 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800670a:	2300      	movs	r3, #0
 800670c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006712:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	b29b      	uxth	r3, r3
 800671c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006720:	b29a      	uxth	r2, r3
 8006722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006724:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672a:	1c9a      	adds	r2, r3, #2
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	629a      	str	r2, [r3, #40]	; 0x28
 8006730:	e026      	b.n	8006780 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006736:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006738:	2300      	movs	r3, #0
 800673a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006744:	d007      	beq.n	8006756 <UART_Receive_IT+0x74>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10a      	bne.n	8006764 <UART_Receive_IT+0x82>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d106      	bne.n	8006764 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	b2da      	uxtb	r2, r3
 800675e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006760:	701a      	strb	r2, [r3, #0]
 8006762:	e008      	b.n	8006776 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	b2db      	uxtb	r3, r3
 800676c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006770:	b2da      	uxtb	r2, r3
 8006772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006774:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006784:	b29b      	uxth	r3, r3
 8006786:	3b01      	subs	r3, #1
 8006788:	b29b      	uxth	r3, r3
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	4619      	mov	r1, r3
 800678e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006790:	2b00      	cmp	r3, #0
 8006792:	d15d      	bne.n	8006850 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68da      	ldr	r2, [r3, #12]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f022 0220 	bic.w	r2, r2, #32
 80067a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68da      	ldr	r2, [r3, #12]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	695a      	ldr	r2, [r3, #20]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f022 0201 	bic.w	r2, r2, #1
 80067c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2220      	movs	r2, #32
 80067c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d135      	bne.n	8006846 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	330c      	adds	r3, #12
 80067e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	e853 3f00 	ldrex	r3, [r3]
 80067ee:	613b      	str	r3, [r7, #16]
   return(result);
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	f023 0310 	bic.w	r3, r3, #16
 80067f6:	627b      	str	r3, [r7, #36]	; 0x24
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	330c      	adds	r3, #12
 80067fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006800:	623a      	str	r2, [r7, #32]
 8006802:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006804:	69f9      	ldr	r1, [r7, #28]
 8006806:	6a3a      	ldr	r2, [r7, #32]
 8006808:	e841 2300 	strex	r3, r2, [r1]
 800680c:	61bb      	str	r3, [r7, #24]
   return(result);
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1e5      	bne.n	80067e0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0310 	and.w	r3, r3, #16
 800681e:	2b10      	cmp	r3, #16
 8006820:	d10a      	bne.n	8006838 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006822:	2300      	movs	r3, #0
 8006824:	60fb      	str	r3, [r7, #12]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	60fb      	str	r3, [r7, #12]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	60fb      	str	r3, [r7, #12]
 8006836:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800683c:	4619      	mov	r1, r3
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f7ff fe2e 	bl	80064a0 <HAL_UARTEx_RxEventCallback>
 8006844:	e002      	b.n	800684c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7fc f864 	bl	8002914 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800684c:	2300      	movs	r3, #0
 800684e:	e002      	b.n	8006856 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006850:	2300      	movs	r3, #0
 8006852:	e000      	b.n	8006856 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006854:	2302      	movs	r3, #2
  }
}
 8006856:	4618      	mov	r0, r3
 8006858:	3730      	adds	r7, #48	; 0x30
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
	...

08006860 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68da      	ldr	r2, [r3, #12]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	689a      	ldr	r2, [r3, #8]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	431a      	orrs	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	695b      	ldr	r3, [r3, #20]
 800688c:	4313      	orrs	r3, r2
 800688e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800689a:	f023 030c 	bic.w	r3, r3, #12
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	6812      	ldr	r2, [r2, #0]
 80068a2:	68b9      	ldr	r1, [r7, #8]
 80068a4:	430b      	orrs	r3, r1
 80068a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	699a      	ldr	r2, [r3, #24]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a2c      	ldr	r2, [pc, #176]	; (8006974 <UART_SetConfig+0x114>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d103      	bne.n	80068d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80068c8:	f7fe f8c6 	bl	8004a58 <HAL_RCC_GetPCLK2Freq>
 80068cc:	60f8      	str	r0, [r7, #12]
 80068ce:	e002      	b.n	80068d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80068d0:	f7fe f8ae 	bl	8004a30 <HAL_RCC_GetPCLK1Freq>
 80068d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	4613      	mov	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4413      	add	r3, r2
 80068de:	009a      	lsls	r2, r3, #2
 80068e0:	441a      	add	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ec:	4a22      	ldr	r2, [pc, #136]	; (8006978 <UART_SetConfig+0x118>)
 80068ee:	fba2 2303 	umull	r2, r3, r2, r3
 80068f2:	095b      	lsrs	r3, r3, #5
 80068f4:	0119      	lsls	r1, r3, #4
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	4613      	mov	r3, r2
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4413      	add	r3, r2
 80068fe:	009a      	lsls	r2, r3, #2
 8006900:	441a      	add	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	fbb2 f2f3 	udiv	r2, r2, r3
 800690c:	4b1a      	ldr	r3, [pc, #104]	; (8006978 <UART_SetConfig+0x118>)
 800690e:	fba3 0302 	umull	r0, r3, r3, r2
 8006912:	095b      	lsrs	r3, r3, #5
 8006914:	2064      	movs	r0, #100	; 0x64
 8006916:	fb00 f303 	mul.w	r3, r0, r3
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	011b      	lsls	r3, r3, #4
 800691e:	3332      	adds	r3, #50	; 0x32
 8006920:	4a15      	ldr	r2, [pc, #84]	; (8006978 <UART_SetConfig+0x118>)
 8006922:	fba2 2303 	umull	r2, r3, r2, r3
 8006926:	095b      	lsrs	r3, r3, #5
 8006928:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800692c:	4419      	add	r1, r3
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	4613      	mov	r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4413      	add	r3, r2
 8006936:	009a      	lsls	r2, r3, #2
 8006938:	441a      	add	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	fbb2 f2f3 	udiv	r2, r2, r3
 8006944:	4b0c      	ldr	r3, [pc, #48]	; (8006978 <UART_SetConfig+0x118>)
 8006946:	fba3 0302 	umull	r0, r3, r3, r2
 800694a:	095b      	lsrs	r3, r3, #5
 800694c:	2064      	movs	r0, #100	; 0x64
 800694e:	fb00 f303 	mul.w	r3, r0, r3
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	011b      	lsls	r3, r3, #4
 8006956:	3332      	adds	r3, #50	; 0x32
 8006958:	4a07      	ldr	r2, [pc, #28]	; (8006978 <UART_SetConfig+0x118>)
 800695a:	fba2 2303 	umull	r2, r3, r2, r3
 800695e:	095b      	lsrs	r3, r3, #5
 8006960:	f003 020f 	and.w	r2, r3, #15
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	440a      	add	r2, r1
 800696a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800696c:	bf00      	nop
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	40013800 	.word	0x40013800
 8006978:	51eb851f 	.word	0x51eb851f

0800697c <atof>:
 800697c:	2100      	movs	r1, #0
 800697e:	f001 ba9f 	b.w	8007ec0 <strtod>
	...

08006984 <__errno>:
 8006984:	4b01      	ldr	r3, [pc, #4]	; (800698c <__errno+0x8>)
 8006986:	6818      	ldr	r0, [r3, #0]
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	20000018 	.word	0x20000018

08006990 <__libc_init_array>:
 8006990:	b570      	push	{r4, r5, r6, lr}
 8006992:	2600      	movs	r6, #0
 8006994:	4d0c      	ldr	r5, [pc, #48]	; (80069c8 <__libc_init_array+0x38>)
 8006996:	4c0d      	ldr	r4, [pc, #52]	; (80069cc <__libc_init_array+0x3c>)
 8006998:	1b64      	subs	r4, r4, r5
 800699a:	10a4      	asrs	r4, r4, #2
 800699c:	42a6      	cmp	r6, r4
 800699e:	d109      	bne.n	80069b4 <__libc_init_array+0x24>
 80069a0:	f004 f85a 	bl	800aa58 <_init>
 80069a4:	2600      	movs	r6, #0
 80069a6:	4d0a      	ldr	r5, [pc, #40]	; (80069d0 <__libc_init_array+0x40>)
 80069a8:	4c0a      	ldr	r4, [pc, #40]	; (80069d4 <__libc_init_array+0x44>)
 80069aa:	1b64      	subs	r4, r4, r5
 80069ac:	10a4      	asrs	r4, r4, #2
 80069ae:	42a6      	cmp	r6, r4
 80069b0:	d105      	bne.n	80069be <__libc_init_array+0x2e>
 80069b2:	bd70      	pop	{r4, r5, r6, pc}
 80069b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80069b8:	4798      	blx	r3
 80069ba:	3601      	adds	r6, #1
 80069bc:	e7ee      	b.n	800699c <__libc_init_array+0xc>
 80069be:	f855 3b04 	ldr.w	r3, [r5], #4
 80069c2:	4798      	blx	r3
 80069c4:	3601      	adds	r6, #1
 80069c6:	e7f2      	b.n	80069ae <__libc_init_array+0x1e>
 80069c8:	0800b030 	.word	0x0800b030
 80069cc:	0800b030 	.word	0x0800b030
 80069d0:	0800b030 	.word	0x0800b030
 80069d4:	0800b034 	.word	0x0800b034

080069d8 <memset>:
 80069d8:	4603      	mov	r3, r0
 80069da:	4402      	add	r2, r0
 80069dc:	4293      	cmp	r3, r2
 80069de:	d100      	bne.n	80069e2 <memset+0xa>
 80069e0:	4770      	bx	lr
 80069e2:	f803 1b01 	strb.w	r1, [r3], #1
 80069e6:	e7f9      	b.n	80069dc <memset+0x4>

080069e8 <__cvt>:
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069ee:	461f      	mov	r7, r3
 80069f0:	bfbb      	ittet	lt
 80069f2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80069f6:	461f      	movlt	r7, r3
 80069f8:	2300      	movge	r3, #0
 80069fa:	232d      	movlt	r3, #45	; 0x2d
 80069fc:	b088      	sub	sp, #32
 80069fe:	4614      	mov	r4, r2
 8006a00:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a02:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006a04:	7013      	strb	r3, [r2, #0]
 8006a06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a08:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006a0c:	f023 0820 	bic.w	r8, r3, #32
 8006a10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a14:	d005      	beq.n	8006a22 <__cvt+0x3a>
 8006a16:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a1a:	d100      	bne.n	8006a1e <__cvt+0x36>
 8006a1c:	3501      	adds	r5, #1
 8006a1e:	2302      	movs	r3, #2
 8006a20:	e000      	b.n	8006a24 <__cvt+0x3c>
 8006a22:	2303      	movs	r3, #3
 8006a24:	aa07      	add	r2, sp, #28
 8006a26:	9204      	str	r2, [sp, #16]
 8006a28:	aa06      	add	r2, sp, #24
 8006a2a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006a2e:	e9cd 3500 	strd	r3, r5, [sp]
 8006a32:	4622      	mov	r2, r4
 8006a34:	463b      	mov	r3, r7
 8006a36:	f001 fb57 	bl	80080e8 <_dtoa_r>
 8006a3a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006a3e:	4606      	mov	r6, r0
 8006a40:	d102      	bne.n	8006a48 <__cvt+0x60>
 8006a42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a44:	07db      	lsls	r3, r3, #31
 8006a46:	d522      	bpl.n	8006a8e <__cvt+0xa6>
 8006a48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a4c:	eb06 0905 	add.w	r9, r6, r5
 8006a50:	d110      	bne.n	8006a74 <__cvt+0x8c>
 8006a52:	7833      	ldrb	r3, [r6, #0]
 8006a54:	2b30      	cmp	r3, #48	; 0x30
 8006a56:	d10a      	bne.n	8006a6e <__cvt+0x86>
 8006a58:	2200      	movs	r2, #0
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	4639      	mov	r1, r7
 8006a60:	f7f9 ffac 	bl	80009bc <__aeabi_dcmpeq>
 8006a64:	b918      	cbnz	r0, 8006a6e <__cvt+0x86>
 8006a66:	f1c5 0501 	rsb	r5, r5, #1
 8006a6a:	f8ca 5000 	str.w	r5, [sl]
 8006a6e:	f8da 3000 	ldr.w	r3, [sl]
 8006a72:	4499      	add	r9, r3
 8006a74:	2200      	movs	r2, #0
 8006a76:	2300      	movs	r3, #0
 8006a78:	4620      	mov	r0, r4
 8006a7a:	4639      	mov	r1, r7
 8006a7c:	f7f9 ff9e 	bl	80009bc <__aeabi_dcmpeq>
 8006a80:	b108      	cbz	r0, 8006a86 <__cvt+0x9e>
 8006a82:	f8cd 901c 	str.w	r9, [sp, #28]
 8006a86:	2230      	movs	r2, #48	; 0x30
 8006a88:	9b07      	ldr	r3, [sp, #28]
 8006a8a:	454b      	cmp	r3, r9
 8006a8c:	d307      	bcc.n	8006a9e <__cvt+0xb6>
 8006a8e:	4630      	mov	r0, r6
 8006a90:	9b07      	ldr	r3, [sp, #28]
 8006a92:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006a94:	1b9b      	subs	r3, r3, r6
 8006a96:	6013      	str	r3, [r2, #0]
 8006a98:	b008      	add	sp, #32
 8006a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a9e:	1c59      	adds	r1, r3, #1
 8006aa0:	9107      	str	r1, [sp, #28]
 8006aa2:	701a      	strb	r2, [r3, #0]
 8006aa4:	e7f0      	b.n	8006a88 <__cvt+0xa0>

08006aa6 <__exponent>:
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006aaa:	2900      	cmp	r1, #0
 8006aac:	f803 2b02 	strb.w	r2, [r3], #2
 8006ab0:	bfb6      	itet	lt
 8006ab2:	222d      	movlt	r2, #45	; 0x2d
 8006ab4:	222b      	movge	r2, #43	; 0x2b
 8006ab6:	4249      	neglt	r1, r1
 8006ab8:	2909      	cmp	r1, #9
 8006aba:	7042      	strb	r2, [r0, #1]
 8006abc:	dd2b      	ble.n	8006b16 <__exponent+0x70>
 8006abe:	f10d 0407 	add.w	r4, sp, #7
 8006ac2:	46a4      	mov	ip, r4
 8006ac4:	270a      	movs	r7, #10
 8006ac6:	fb91 f6f7 	sdiv	r6, r1, r7
 8006aca:	460a      	mov	r2, r1
 8006acc:	46a6      	mov	lr, r4
 8006ace:	fb07 1516 	mls	r5, r7, r6, r1
 8006ad2:	2a63      	cmp	r2, #99	; 0x63
 8006ad4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006ad8:	4631      	mov	r1, r6
 8006ada:	f104 34ff 	add.w	r4, r4, #4294967295
 8006ade:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006ae2:	dcf0      	bgt.n	8006ac6 <__exponent+0x20>
 8006ae4:	3130      	adds	r1, #48	; 0x30
 8006ae6:	f1ae 0502 	sub.w	r5, lr, #2
 8006aea:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006aee:	4629      	mov	r1, r5
 8006af0:	1c44      	adds	r4, r0, #1
 8006af2:	4561      	cmp	r1, ip
 8006af4:	d30a      	bcc.n	8006b0c <__exponent+0x66>
 8006af6:	f10d 0209 	add.w	r2, sp, #9
 8006afa:	eba2 020e 	sub.w	r2, r2, lr
 8006afe:	4565      	cmp	r5, ip
 8006b00:	bf88      	it	hi
 8006b02:	2200      	movhi	r2, #0
 8006b04:	4413      	add	r3, r2
 8006b06:	1a18      	subs	r0, r3, r0
 8006b08:	b003      	add	sp, #12
 8006b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b0c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b10:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006b14:	e7ed      	b.n	8006af2 <__exponent+0x4c>
 8006b16:	2330      	movs	r3, #48	; 0x30
 8006b18:	3130      	adds	r1, #48	; 0x30
 8006b1a:	7083      	strb	r3, [r0, #2]
 8006b1c:	70c1      	strb	r1, [r0, #3]
 8006b1e:	1d03      	adds	r3, r0, #4
 8006b20:	e7f1      	b.n	8006b06 <__exponent+0x60>
	...

08006b24 <_printf_float>:
 8006b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b28:	b091      	sub	sp, #68	; 0x44
 8006b2a:	460c      	mov	r4, r1
 8006b2c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006b30:	4616      	mov	r6, r2
 8006b32:	461f      	mov	r7, r3
 8006b34:	4605      	mov	r5, r0
 8006b36:	f002 fc3d 	bl	80093b4 <_localeconv_r>
 8006b3a:	6803      	ldr	r3, [r0, #0]
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b40:	f7f9 fb10 	bl	8000164 <strlen>
 8006b44:	2300      	movs	r3, #0
 8006b46:	930e      	str	r3, [sp, #56]	; 0x38
 8006b48:	f8d8 3000 	ldr.w	r3, [r8]
 8006b4c:	900a      	str	r0, [sp, #40]	; 0x28
 8006b4e:	3307      	adds	r3, #7
 8006b50:	f023 0307 	bic.w	r3, r3, #7
 8006b54:	f103 0208 	add.w	r2, r3, #8
 8006b58:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006b5c:	f8d4 b000 	ldr.w	fp, [r4]
 8006b60:	f8c8 2000 	str.w	r2, [r8]
 8006b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b68:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006b6c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006b70:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006b74:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b76:	f04f 32ff 	mov.w	r2, #4294967295
 8006b7a:	4640      	mov	r0, r8
 8006b7c:	4b9c      	ldr	r3, [pc, #624]	; (8006df0 <_printf_float+0x2cc>)
 8006b7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b80:	f7f9 ff4e 	bl	8000a20 <__aeabi_dcmpun>
 8006b84:	bb70      	cbnz	r0, 8006be4 <_printf_float+0xc0>
 8006b86:	f04f 32ff 	mov.w	r2, #4294967295
 8006b8a:	4640      	mov	r0, r8
 8006b8c:	4b98      	ldr	r3, [pc, #608]	; (8006df0 <_printf_float+0x2cc>)
 8006b8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b90:	f7f9 ff28 	bl	80009e4 <__aeabi_dcmple>
 8006b94:	bb30      	cbnz	r0, 8006be4 <_printf_float+0xc0>
 8006b96:	2200      	movs	r2, #0
 8006b98:	2300      	movs	r3, #0
 8006b9a:	4640      	mov	r0, r8
 8006b9c:	4651      	mov	r1, sl
 8006b9e:	f7f9 ff17 	bl	80009d0 <__aeabi_dcmplt>
 8006ba2:	b110      	cbz	r0, 8006baa <_printf_float+0x86>
 8006ba4:	232d      	movs	r3, #45	; 0x2d
 8006ba6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006baa:	4b92      	ldr	r3, [pc, #584]	; (8006df4 <_printf_float+0x2d0>)
 8006bac:	4892      	ldr	r0, [pc, #584]	; (8006df8 <_printf_float+0x2d4>)
 8006bae:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006bb2:	bf94      	ite	ls
 8006bb4:	4698      	movls	r8, r3
 8006bb6:	4680      	movhi	r8, r0
 8006bb8:	2303      	movs	r3, #3
 8006bba:	f04f 0a00 	mov.w	sl, #0
 8006bbe:	6123      	str	r3, [r4, #16]
 8006bc0:	f02b 0304 	bic.w	r3, fp, #4
 8006bc4:	6023      	str	r3, [r4, #0]
 8006bc6:	4633      	mov	r3, r6
 8006bc8:	4621      	mov	r1, r4
 8006bca:	4628      	mov	r0, r5
 8006bcc:	9700      	str	r7, [sp, #0]
 8006bce:	aa0f      	add	r2, sp, #60	; 0x3c
 8006bd0:	f000 f9d4 	bl	8006f7c <_printf_common>
 8006bd4:	3001      	adds	r0, #1
 8006bd6:	f040 8090 	bne.w	8006cfa <_printf_float+0x1d6>
 8006bda:	f04f 30ff 	mov.w	r0, #4294967295
 8006bde:	b011      	add	sp, #68	; 0x44
 8006be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be4:	4642      	mov	r2, r8
 8006be6:	4653      	mov	r3, sl
 8006be8:	4640      	mov	r0, r8
 8006bea:	4651      	mov	r1, sl
 8006bec:	f7f9 ff18 	bl	8000a20 <__aeabi_dcmpun>
 8006bf0:	b148      	cbz	r0, 8006c06 <_printf_float+0xe2>
 8006bf2:	f1ba 0f00 	cmp.w	sl, #0
 8006bf6:	bfb8      	it	lt
 8006bf8:	232d      	movlt	r3, #45	; 0x2d
 8006bfa:	4880      	ldr	r0, [pc, #512]	; (8006dfc <_printf_float+0x2d8>)
 8006bfc:	bfb8      	it	lt
 8006bfe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c02:	4b7f      	ldr	r3, [pc, #508]	; (8006e00 <_printf_float+0x2dc>)
 8006c04:	e7d3      	b.n	8006bae <_printf_float+0x8a>
 8006c06:	6863      	ldr	r3, [r4, #4]
 8006c08:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006c0c:	1c5a      	adds	r2, r3, #1
 8006c0e:	d142      	bne.n	8006c96 <_printf_float+0x172>
 8006c10:	2306      	movs	r3, #6
 8006c12:	6063      	str	r3, [r4, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	9206      	str	r2, [sp, #24]
 8006c18:	aa0e      	add	r2, sp, #56	; 0x38
 8006c1a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006c1e:	aa0d      	add	r2, sp, #52	; 0x34
 8006c20:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006c24:	9203      	str	r2, [sp, #12]
 8006c26:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006c2a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006c2e:	6023      	str	r3, [r4, #0]
 8006c30:	6863      	ldr	r3, [r4, #4]
 8006c32:	4642      	mov	r2, r8
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	4628      	mov	r0, r5
 8006c38:	4653      	mov	r3, sl
 8006c3a:	910b      	str	r1, [sp, #44]	; 0x2c
 8006c3c:	f7ff fed4 	bl	80069e8 <__cvt>
 8006c40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c42:	4680      	mov	r8, r0
 8006c44:	2947      	cmp	r1, #71	; 0x47
 8006c46:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006c48:	d108      	bne.n	8006c5c <_printf_float+0x138>
 8006c4a:	1cc8      	adds	r0, r1, #3
 8006c4c:	db02      	blt.n	8006c54 <_printf_float+0x130>
 8006c4e:	6863      	ldr	r3, [r4, #4]
 8006c50:	4299      	cmp	r1, r3
 8006c52:	dd40      	ble.n	8006cd6 <_printf_float+0x1b2>
 8006c54:	f1a9 0902 	sub.w	r9, r9, #2
 8006c58:	fa5f f989 	uxtb.w	r9, r9
 8006c5c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006c60:	d81f      	bhi.n	8006ca2 <_printf_float+0x17e>
 8006c62:	464a      	mov	r2, r9
 8006c64:	3901      	subs	r1, #1
 8006c66:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c6a:	910d      	str	r1, [sp, #52]	; 0x34
 8006c6c:	f7ff ff1b 	bl	8006aa6 <__exponent>
 8006c70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c72:	4682      	mov	sl, r0
 8006c74:	1813      	adds	r3, r2, r0
 8006c76:	2a01      	cmp	r2, #1
 8006c78:	6123      	str	r3, [r4, #16]
 8006c7a:	dc02      	bgt.n	8006c82 <_printf_float+0x15e>
 8006c7c:	6822      	ldr	r2, [r4, #0]
 8006c7e:	07d2      	lsls	r2, r2, #31
 8006c80:	d501      	bpl.n	8006c86 <_printf_float+0x162>
 8006c82:	3301      	adds	r3, #1
 8006c84:	6123      	str	r3, [r4, #16]
 8006c86:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d09b      	beq.n	8006bc6 <_printf_float+0xa2>
 8006c8e:	232d      	movs	r3, #45	; 0x2d
 8006c90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c94:	e797      	b.n	8006bc6 <_printf_float+0xa2>
 8006c96:	2947      	cmp	r1, #71	; 0x47
 8006c98:	d1bc      	bne.n	8006c14 <_printf_float+0xf0>
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1ba      	bne.n	8006c14 <_printf_float+0xf0>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e7b7      	b.n	8006c12 <_printf_float+0xee>
 8006ca2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006ca6:	d118      	bne.n	8006cda <_printf_float+0x1b6>
 8006ca8:	2900      	cmp	r1, #0
 8006caa:	6863      	ldr	r3, [r4, #4]
 8006cac:	dd0b      	ble.n	8006cc6 <_printf_float+0x1a2>
 8006cae:	6121      	str	r1, [r4, #16]
 8006cb0:	b913      	cbnz	r3, 8006cb8 <_printf_float+0x194>
 8006cb2:	6822      	ldr	r2, [r4, #0]
 8006cb4:	07d0      	lsls	r0, r2, #31
 8006cb6:	d502      	bpl.n	8006cbe <_printf_float+0x19a>
 8006cb8:	3301      	adds	r3, #1
 8006cba:	440b      	add	r3, r1
 8006cbc:	6123      	str	r3, [r4, #16]
 8006cbe:	f04f 0a00 	mov.w	sl, #0
 8006cc2:	65a1      	str	r1, [r4, #88]	; 0x58
 8006cc4:	e7df      	b.n	8006c86 <_printf_float+0x162>
 8006cc6:	b913      	cbnz	r3, 8006cce <_printf_float+0x1aa>
 8006cc8:	6822      	ldr	r2, [r4, #0]
 8006cca:	07d2      	lsls	r2, r2, #31
 8006ccc:	d501      	bpl.n	8006cd2 <_printf_float+0x1ae>
 8006cce:	3302      	adds	r3, #2
 8006cd0:	e7f4      	b.n	8006cbc <_printf_float+0x198>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e7f2      	b.n	8006cbc <_printf_float+0x198>
 8006cd6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006cda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cdc:	4299      	cmp	r1, r3
 8006cde:	db05      	blt.n	8006cec <_printf_float+0x1c8>
 8006ce0:	6823      	ldr	r3, [r4, #0]
 8006ce2:	6121      	str	r1, [r4, #16]
 8006ce4:	07d8      	lsls	r0, r3, #31
 8006ce6:	d5ea      	bpl.n	8006cbe <_printf_float+0x19a>
 8006ce8:	1c4b      	adds	r3, r1, #1
 8006cea:	e7e7      	b.n	8006cbc <_printf_float+0x198>
 8006cec:	2900      	cmp	r1, #0
 8006cee:	bfcc      	ite	gt
 8006cf0:	2201      	movgt	r2, #1
 8006cf2:	f1c1 0202 	rsble	r2, r1, #2
 8006cf6:	4413      	add	r3, r2
 8006cf8:	e7e0      	b.n	8006cbc <_printf_float+0x198>
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	055a      	lsls	r2, r3, #21
 8006cfe:	d407      	bmi.n	8006d10 <_printf_float+0x1ec>
 8006d00:	6923      	ldr	r3, [r4, #16]
 8006d02:	4642      	mov	r2, r8
 8006d04:	4631      	mov	r1, r6
 8006d06:	4628      	mov	r0, r5
 8006d08:	47b8      	blx	r7
 8006d0a:	3001      	adds	r0, #1
 8006d0c:	d12b      	bne.n	8006d66 <_printf_float+0x242>
 8006d0e:	e764      	b.n	8006bda <_printf_float+0xb6>
 8006d10:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006d14:	f240 80dd 	bls.w	8006ed2 <_printf_float+0x3ae>
 8006d18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f7f9 fe4c 	bl	80009bc <__aeabi_dcmpeq>
 8006d24:	2800      	cmp	r0, #0
 8006d26:	d033      	beq.n	8006d90 <_printf_float+0x26c>
 8006d28:	2301      	movs	r3, #1
 8006d2a:	4631      	mov	r1, r6
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	4a35      	ldr	r2, [pc, #212]	; (8006e04 <_printf_float+0x2e0>)
 8006d30:	47b8      	blx	r7
 8006d32:	3001      	adds	r0, #1
 8006d34:	f43f af51 	beq.w	8006bda <_printf_float+0xb6>
 8006d38:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	db02      	blt.n	8006d46 <_printf_float+0x222>
 8006d40:	6823      	ldr	r3, [r4, #0]
 8006d42:	07d8      	lsls	r0, r3, #31
 8006d44:	d50f      	bpl.n	8006d66 <_printf_float+0x242>
 8006d46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d4a:	4631      	mov	r1, r6
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	47b8      	blx	r7
 8006d50:	3001      	adds	r0, #1
 8006d52:	f43f af42 	beq.w	8006bda <_printf_float+0xb6>
 8006d56:	f04f 0800 	mov.w	r8, #0
 8006d5a:	f104 091a 	add.w	r9, r4, #26
 8006d5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d60:	3b01      	subs	r3, #1
 8006d62:	4543      	cmp	r3, r8
 8006d64:	dc09      	bgt.n	8006d7a <_printf_float+0x256>
 8006d66:	6823      	ldr	r3, [r4, #0]
 8006d68:	079b      	lsls	r3, r3, #30
 8006d6a:	f100 8102 	bmi.w	8006f72 <_printf_float+0x44e>
 8006d6e:	68e0      	ldr	r0, [r4, #12]
 8006d70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d72:	4298      	cmp	r0, r3
 8006d74:	bfb8      	it	lt
 8006d76:	4618      	movlt	r0, r3
 8006d78:	e731      	b.n	8006bde <_printf_float+0xba>
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	464a      	mov	r2, r9
 8006d7e:	4631      	mov	r1, r6
 8006d80:	4628      	mov	r0, r5
 8006d82:	47b8      	blx	r7
 8006d84:	3001      	adds	r0, #1
 8006d86:	f43f af28 	beq.w	8006bda <_printf_float+0xb6>
 8006d8a:	f108 0801 	add.w	r8, r8, #1
 8006d8e:	e7e6      	b.n	8006d5e <_printf_float+0x23a>
 8006d90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	dc38      	bgt.n	8006e08 <_printf_float+0x2e4>
 8006d96:	2301      	movs	r3, #1
 8006d98:	4631      	mov	r1, r6
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	4a19      	ldr	r2, [pc, #100]	; (8006e04 <_printf_float+0x2e0>)
 8006d9e:	47b8      	blx	r7
 8006da0:	3001      	adds	r0, #1
 8006da2:	f43f af1a 	beq.w	8006bda <_printf_float+0xb6>
 8006da6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006daa:	4313      	orrs	r3, r2
 8006dac:	d102      	bne.n	8006db4 <_printf_float+0x290>
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	07d9      	lsls	r1, r3, #31
 8006db2:	d5d8      	bpl.n	8006d66 <_printf_float+0x242>
 8006db4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006db8:	4631      	mov	r1, r6
 8006dba:	4628      	mov	r0, r5
 8006dbc:	47b8      	blx	r7
 8006dbe:	3001      	adds	r0, #1
 8006dc0:	f43f af0b 	beq.w	8006bda <_printf_float+0xb6>
 8006dc4:	f04f 0900 	mov.w	r9, #0
 8006dc8:	f104 0a1a 	add.w	sl, r4, #26
 8006dcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dce:	425b      	negs	r3, r3
 8006dd0:	454b      	cmp	r3, r9
 8006dd2:	dc01      	bgt.n	8006dd8 <_printf_float+0x2b4>
 8006dd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dd6:	e794      	b.n	8006d02 <_printf_float+0x1de>
 8006dd8:	2301      	movs	r3, #1
 8006dda:	4652      	mov	r2, sl
 8006ddc:	4631      	mov	r1, r6
 8006dde:	4628      	mov	r0, r5
 8006de0:	47b8      	blx	r7
 8006de2:	3001      	adds	r0, #1
 8006de4:	f43f aef9 	beq.w	8006bda <_printf_float+0xb6>
 8006de8:	f109 0901 	add.w	r9, r9, #1
 8006dec:	e7ee      	b.n	8006dcc <_printf_float+0x2a8>
 8006dee:	bf00      	nop
 8006df0:	7fefffff 	.word	0x7fefffff
 8006df4:	0800ab38 	.word	0x0800ab38
 8006df8:	0800ab3c 	.word	0x0800ab3c
 8006dfc:	0800ab44 	.word	0x0800ab44
 8006e00:	0800ab40 	.word	0x0800ab40
 8006e04:	0800ab48 	.word	0x0800ab48
 8006e08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	bfa8      	it	ge
 8006e10:	461a      	movge	r2, r3
 8006e12:	2a00      	cmp	r2, #0
 8006e14:	4691      	mov	r9, r2
 8006e16:	dc37      	bgt.n	8006e88 <_printf_float+0x364>
 8006e18:	f04f 0b00 	mov.w	fp, #0
 8006e1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e20:	f104 021a 	add.w	r2, r4, #26
 8006e24:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006e28:	ebaa 0309 	sub.w	r3, sl, r9
 8006e2c:	455b      	cmp	r3, fp
 8006e2e:	dc33      	bgt.n	8006e98 <_printf_float+0x374>
 8006e30:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006e34:	429a      	cmp	r2, r3
 8006e36:	db3b      	blt.n	8006eb0 <_printf_float+0x38c>
 8006e38:	6823      	ldr	r3, [r4, #0]
 8006e3a:	07da      	lsls	r2, r3, #31
 8006e3c:	d438      	bmi.n	8006eb0 <_printf_float+0x38c>
 8006e3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e40:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006e42:	eba3 020a 	sub.w	r2, r3, sl
 8006e46:	eba3 0901 	sub.w	r9, r3, r1
 8006e4a:	4591      	cmp	r9, r2
 8006e4c:	bfa8      	it	ge
 8006e4e:	4691      	movge	r9, r2
 8006e50:	f1b9 0f00 	cmp.w	r9, #0
 8006e54:	dc34      	bgt.n	8006ec0 <_printf_float+0x39c>
 8006e56:	f04f 0800 	mov.w	r8, #0
 8006e5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e5e:	f104 0a1a 	add.w	sl, r4, #26
 8006e62:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006e66:	1a9b      	subs	r3, r3, r2
 8006e68:	eba3 0309 	sub.w	r3, r3, r9
 8006e6c:	4543      	cmp	r3, r8
 8006e6e:	f77f af7a 	ble.w	8006d66 <_printf_float+0x242>
 8006e72:	2301      	movs	r3, #1
 8006e74:	4652      	mov	r2, sl
 8006e76:	4631      	mov	r1, r6
 8006e78:	4628      	mov	r0, r5
 8006e7a:	47b8      	blx	r7
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	f43f aeac 	beq.w	8006bda <_printf_float+0xb6>
 8006e82:	f108 0801 	add.w	r8, r8, #1
 8006e86:	e7ec      	b.n	8006e62 <_printf_float+0x33e>
 8006e88:	4613      	mov	r3, r2
 8006e8a:	4631      	mov	r1, r6
 8006e8c:	4642      	mov	r2, r8
 8006e8e:	4628      	mov	r0, r5
 8006e90:	47b8      	blx	r7
 8006e92:	3001      	adds	r0, #1
 8006e94:	d1c0      	bne.n	8006e18 <_printf_float+0x2f4>
 8006e96:	e6a0      	b.n	8006bda <_printf_float+0xb6>
 8006e98:	2301      	movs	r3, #1
 8006e9a:	4631      	mov	r1, r6
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006ea0:	47b8      	blx	r7
 8006ea2:	3001      	adds	r0, #1
 8006ea4:	f43f ae99 	beq.w	8006bda <_printf_float+0xb6>
 8006ea8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006eaa:	f10b 0b01 	add.w	fp, fp, #1
 8006eae:	e7b9      	b.n	8006e24 <_printf_float+0x300>
 8006eb0:	4631      	mov	r1, r6
 8006eb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	47b8      	blx	r7
 8006eba:	3001      	adds	r0, #1
 8006ebc:	d1bf      	bne.n	8006e3e <_printf_float+0x31a>
 8006ebe:	e68c      	b.n	8006bda <_printf_float+0xb6>
 8006ec0:	464b      	mov	r3, r9
 8006ec2:	4631      	mov	r1, r6
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	eb08 020a 	add.w	r2, r8, sl
 8006eca:	47b8      	blx	r7
 8006ecc:	3001      	adds	r0, #1
 8006ece:	d1c2      	bne.n	8006e56 <_printf_float+0x332>
 8006ed0:	e683      	b.n	8006bda <_printf_float+0xb6>
 8006ed2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ed4:	2a01      	cmp	r2, #1
 8006ed6:	dc01      	bgt.n	8006edc <_printf_float+0x3b8>
 8006ed8:	07db      	lsls	r3, r3, #31
 8006eda:	d537      	bpl.n	8006f4c <_printf_float+0x428>
 8006edc:	2301      	movs	r3, #1
 8006ede:	4642      	mov	r2, r8
 8006ee0:	4631      	mov	r1, r6
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	47b8      	blx	r7
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	f43f ae77 	beq.w	8006bda <_printf_float+0xb6>
 8006eec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ef0:	4631      	mov	r1, r6
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	47b8      	blx	r7
 8006ef6:	3001      	adds	r0, #1
 8006ef8:	f43f ae6f 	beq.w	8006bda <_printf_float+0xb6>
 8006efc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f00:	2200      	movs	r2, #0
 8006f02:	2300      	movs	r3, #0
 8006f04:	f7f9 fd5a 	bl	80009bc <__aeabi_dcmpeq>
 8006f08:	b9d8      	cbnz	r0, 8006f42 <_printf_float+0x41e>
 8006f0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f0c:	f108 0201 	add.w	r2, r8, #1
 8006f10:	3b01      	subs	r3, #1
 8006f12:	4631      	mov	r1, r6
 8006f14:	4628      	mov	r0, r5
 8006f16:	47b8      	blx	r7
 8006f18:	3001      	adds	r0, #1
 8006f1a:	d10e      	bne.n	8006f3a <_printf_float+0x416>
 8006f1c:	e65d      	b.n	8006bda <_printf_float+0xb6>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	464a      	mov	r2, r9
 8006f22:	4631      	mov	r1, r6
 8006f24:	4628      	mov	r0, r5
 8006f26:	47b8      	blx	r7
 8006f28:	3001      	adds	r0, #1
 8006f2a:	f43f ae56 	beq.w	8006bda <_printf_float+0xb6>
 8006f2e:	f108 0801 	add.w	r8, r8, #1
 8006f32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f34:	3b01      	subs	r3, #1
 8006f36:	4543      	cmp	r3, r8
 8006f38:	dcf1      	bgt.n	8006f1e <_printf_float+0x3fa>
 8006f3a:	4653      	mov	r3, sl
 8006f3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f40:	e6e0      	b.n	8006d04 <_printf_float+0x1e0>
 8006f42:	f04f 0800 	mov.w	r8, #0
 8006f46:	f104 091a 	add.w	r9, r4, #26
 8006f4a:	e7f2      	b.n	8006f32 <_printf_float+0x40e>
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	4642      	mov	r2, r8
 8006f50:	e7df      	b.n	8006f12 <_printf_float+0x3ee>
 8006f52:	2301      	movs	r3, #1
 8006f54:	464a      	mov	r2, r9
 8006f56:	4631      	mov	r1, r6
 8006f58:	4628      	mov	r0, r5
 8006f5a:	47b8      	blx	r7
 8006f5c:	3001      	adds	r0, #1
 8006f5e:	f43f ae3c 	beq.w	8006bda <_printf_float+0xb6>
 8006f62:	f108 0801 	add.w	r8, r8, #1
 8006f66:	68e3      	ldr	r3, [r4, #12]
 8006f68:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006f6a:	1a5b      	subs	r3, r3, r1
 8006f6c:	4543      	cmp	r3, r8
 8006f6e:	dcf0      	bgt.n	8006f52 <_printf_float+0x42e>
 8006f70:	e6fd      	b.n	8006d6e <_printf_float+0x24a>
 8006f72:	f04f 0800 	mov.w	r8, #0
 8006f76:	f104 0919 	add.w	r9, r4, #25
 8006f7a:	e7f4      	b.n	8006f66 <_printf_float+0x442>

08006f7c <_printf_common>:
 8006f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f80:	4616      	mov	r6, r2
 8006f82:	4699      	mov	r9, r3
 8006f84:	688a      	ldr	r2, [r1, #8]
 8006f86:	690b      	ldr	r3, [r1, #16]
 8006f88:	4607      	mov	r7, r0
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	bfb8      	it	lt
 8006f8e:	4613      	movlt	r3, r2
 8006f90:	6033      	str	r3, [r6, #0]
 8006f92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f96:	460c      	mov	r4, r1
 8006f98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f9c:	b10a      	cbz	r2, 8006fa2 <_printf_common+0x26>
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	6033      	str	r3, [r6, #0]
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	0699      	lsls	r1, r3, #26
 8006fa6:	bf42      	ittt	mi
 8006fa8:	6833      	ldrmi	r3, [r6, #0]
 8006faa:	3302      	addmi	r3, #2
 8006fac:	6033      	strmi	r3, [r6, #0]
 8006fae:	6825      	ldr	r5, [r4, #0]
 8006fb0:	f015 0506 	ands.w	r5, r5, #6
 8006fb4:	d106      	bne.n	8006fc4 <_printf_common+0x48>
 8006fb6:	f104 0a19 	add.w	sl, r4, #25
 8006fba:	68e3      	ldr	r3, [r4, #12]
 8006fbc:	6832      	ldr	r2, [r6, #0]
 8006fbe:	1a9b      	subs	r3, r3, r2
 8006fc0:	42ab      	cmp	r3, r5
 8006fc2:	dc28      	bgt.n	8007016 <_printf_common+0x9a>
 8006fc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fc8:	1e13      	subs	r3, r2, #0
 8006fca:	6822      	ldr	r2, [r4, #0]
 8006fcc:	bf18      	it	ne
 8006fce:	2301      	movne	r3, #1
 8006fd0:	0692      	lsls	r2, r2, #26
 8006fd2:	d42d      	bmi.n	8007030 <_printf_common+0xb4>
 8006fd4:	4649      	mov	r1, r9
 8006fd6:	4638      	mov	r0, r7
 8006fd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fdc:	47c0      	blx	r8
 8006fde:	3001      	adds	r0, #1
 8006fe0:	d020      	beq.n	8007024 <_printf_common+0xa8>
 8006fe2:	6823      	ldr	r3, [r4, #0]
 8006fe4:	68e5      	ldr	r5, [r4, #12]
 8006fe6:	f003 0306 	and.w	r3, r3, #6
 8006fea:	2b04      	cmp	r3, #4
 8006fec:	bf18      	it	ne
 8006fee:	2500      	movne	r5, #0
 8006ff0:	6832      	ldr	r2, [r6, #0]
 8006ff2:	f04f 0600 	mov.w	r6, #0
 8006ff6:	68a3      	ldr	r3, [r4, #8]
 8006ff8:	bf08      	it	eq
 8006ffa:	1aad      	subeq	r5, r5, r2
 8006ffc:	6922      	ldr	r2, [r4, #16]
 8006ffe:	bf08      	it	eq
 8007000:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007004:	4293      	cmp	r3, r2
 8007006:	bfc4      	itt	gt
 8007008:	1a9b      	subgt	r3, r3, r2
 800700a:	18ed      	addgt	r5, r5, r3
 800700c:	341a      	adds	r4, #26
 800700e:	42b5      	cmp	r5, r6
 8007010:	d11a      	bne.n	8007048 <_printf_common+0xcc>
 8007012:	2000      	movs	r0, #0
 8007014:	e008      	b.n	8007028 <_printf_common+0xac>
 8007016:	2301      	movs	r3, #1
 8007018:	4652      	mov	r2, sl
 800701a:	4649      	mov	r1, r9
 800701c:	4638      	mov	r0, r7
 800701e:	47c0      	blx	r8
 8007020:	3001      	adds	r0, #1
 8007022:	d103      	bne.n	800702c <_printf_common+0xb0>
 8007024:	f04f 30ff 	mov.w	r0, #4294967295
 8007028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800702c:	3501      	adds	r5, #1
 800702e:	e7c4      	b.n	8006fba <_printf_common+0x3e>
 8007030:	2030      	movs	r0, #48	; 0x30
 8007032:	18e1      	adds	r1, r4, r3
 8007034:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800703e:	4422      	add	r2, r4
 8007040:	3302      	adds	r3, #2
 8007042:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007046:	e7c5      	b.n	8006fd4 <_printf_common+0x58>
 8007048:	2301      	movs	r3, #1
 800704a:	4622      	mov	r2, r4
 800704c:	4649      	mov	r1, r9
 800704e:	4638      	mov	r0, r7
 8007050:	47c0      	blx	r8
 8007052:	3001      	adds	r0, #1
 8007054:	d0e6      	beq.n	8007024 <_printf_common+0xa8>
 8007056:	3601      	adds	r6, #1
 8007058:	e7d9      	b.n	800700e <_printf_common+0x92>
	...

0800705c <_printf_i>:
 800705c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007060:	7e0f      	ldrb	r7, [r1, #24]
 8007062:	4691      	mov	r9, r2
 8007064:	2f78      	cmp	r7, #120	; 0x78
 8007066:	4680      	mov	r8, r0
 8007068:	460c      	mov	r4, r1
 800706a:	469a      	mov	sl, r3
 800706c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800706e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007072:	d807      	bhi.n	8007084 <_printf_i+0x28>
 8007074:	2f62      	cmp	r7, #98	; 0x62
 8007076:	d80a      	bhi.n	800708e <_printf_i+0x32>
 8007078:	2f00      	cmp	r7, #0
 800707a:	f000 80d9 	beq.w	8007230 <_printf_i+0x1d4>
 800707e:	2f58      	cmp	r7, #88	; 0x58
 8007080:	f000 80a4 	beq.w	80071cc <_printf_i+0x170>
 8007084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007088:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800708c:	e03a      	b.n	8007104 <_printf_i+0xa8>
 800708e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007092:	2b15      	cmp	r3, #21
 8007094:	d8f6      	bhi.n	8007084 <_printf_i+0x28>
 8007096:	a101      	add	r1, pc, #4	; (adr r1, 800709c <_printf_i+0x40>)
 8007098:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800709c:	080070f5 	.word	0x080070f5
 80070a0:	08007109 	.word	0x08007109
 80070a4:	08007085 	.word	0x08007085
 80070a8:	08007085 	.word	0x08007085
 80070ac:	08007085 	.word	0x08007085
 80070b0:	08007085 	.word	0x08007085
 80070b4:	08007109 	.word	0x08007109
 80070b8:	08007085 	.word	0x08007085
 80070bc:	08007085 	.word	0x08007085
 80070c0:	08007085 	.word	0x08007085
 80070c4:	08007085 	.word	0x08007085
 80070c8:	08007217 	.word	0x08007217
 80070cc:	08007139 	.word	0x08007139
 80070d0:	080071f9 	.word	0x080071f9
 80070d4:	08007085 	.word	0x08007085
 80070d8:	08007085 	.word	0x08007085
 80070dc:	08007239 	.word	0x08007239
 80070e0:	08007085 	.word	0x08007085
 80070e4:	08007139 	.word	0x08007139
 80070e8:	08007085 	.word	0x08007085
 80070ec:	08007085 	.word	0x08007085
 80070f0:	08007201 	.word	0x08007201
 80070f4:	682b      	ldr	r3, [r5, #0]
 80070f6:	1d1a      	adds	r2, r3, #4
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	602a      	str	r2, [r5, #0]
 80070fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007100:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007104:	2301      	movs	r3, #1
 8007106:	e0a4      	b.n	8007252 <_printf_i+0x1f6>
 8007108:	6820      	ldr	r0, [r4, #0]
 800710a:	6829      	ldr	r1, [r5, #0]
 800710c:	0606      	lsls	r6, r0, #24
 800710e:	f101 0304 	add.w	r3, r1, #4
 8007112:	d50a      	bpl.n	800712a <_printf_i+0xce>
 8007114:	680e      	ldr	r6, [r1, #0]
 8007116:	602b      	str	r3, [r5, #0]
 8007118:	2e00      	cmp	r6, #0
 800711a:	da03      	bge.n	8007124 <_printf_i+0xc8>
 800711c:	232d      	movs	r3, #45	; 0x2d
 800711e:	4276      	negs	r6, r6
 8007120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007124:	230a      	movs	r3, #10
 8007126:	485e      	ldr	r0, [pc, #376]	; (80072a0 <_printf_i+0x244>)
 8007128:	e019      	b.n	800715e <_printf_i+0x102>
 800712a:	680e      	ldr	r6, [r1, #0]
 800712c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007130:	602b      	str	r3, [r5, #0]
 8007132:	bf18      	it	ne
 8007134:	b236      	sxthne	r6, r6
 8007136:	e7ef      	b.n	8007118 <_printf_i+0xbc>
 8007138:	682b      	ldr	r3, [r5, #0]
 800713a:	6820      	ldr	r0, [r4, #0]
 800713c:	1d19      	adds	r1, r3, #4
 800713e:	6029      	str	r1, [r5, #0]
 8007140:	0601      	lsls	r1, r0, #24
 8007142:	d501      	bpl.n	8007148 <_printf_i+0xec>
 8007144:	681e      	ldr	r6, [r3, #0]
 8007146:	e002      	b.n	800714e <_printf_i+0xf2>
 8007148:	0646      	lsls	r6, r0, #25
 800714a:	d5fb      	bpl.n	8007144 <_printf_i+0xe8>
 800714c:	881e      	ldrh	r6, [r3, #0]
 800714e:	2f6f      	cmp	r7, #111	; 0x6f
 8007150:	bf0c      	ite	eq
 8007152:	2308      	moveq	r3, #8
 8007154:	230a      	movne	r3, #10
 8007156:	4852      	ldr	r0, [pc, #328]	; (80072a0 <_printf_i+0x244>)
 8007158:	2100      	movs	r1, #0
 800715a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800715e:	6865      	ldr	r5, [r4, #4]
 8007160:	2d00      	cmp	r5, #0
 8007162:	bfa8      	it	ge
 8007164:	6821      	ldrge	r1, [r4, #0]
 8007166:	60a5      	str	r5, [r4, #8]
 8007168:	bfa4      	itt	ge
 800716a:	f021 0104 	bicge.w	r1, r1, #4
 800716e:	6021      	strge	r1, [r4, #0]
 8007170:	b90e      	cbnz	r6, 8007176 <_printf_i+0x11a>
 8007172:	2d00      	cmp	r5, #0
 8007174:	d04d      	beq.n	8007212 <_printf_i+0x1b6>
 8007176:	4615      	mov	r5, r2
 8007178:	fbb6 f1f3 	udiv	r1, r6, r3
 800717c:	fb03 6711 	mls	r7, r3, r1, r6
 8007180:	5dc7      	ldrb	r7, [r0, r7]
 8007182:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007186:	4637      	mov	r7, r6
 8007188:	42bb      	cmp	r3, r7
 800718a:	460e      	mov	r6, r1
 800718c:	d9f4      	bls.n	8007178 <_printf_i+0x11c>
 800718e:	2b08      	cmp	r3, #8
 8007190:	d10b      	bne.n	80071aa <_printf_i+0x14e>
 8007192:	6823      	ldr	r3, [r4, #0]
 8007194:	07de      	lsls	r6, r3, #31
 8007196:	d508      	bpl.n	80071aa <_printf_i+0x14e>
 8007198:	6923      	ldr	r3, [r4, #16]
 800719a:	6861      	ldr	r1, [r4, #4]
 800719c:	4299      	cmp	r1, r3
 800719e:	bfde      	ittt	le
 80071a0:	2330      	movle	r3, #48	; 0x30
 80071a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80071aa:	1b52      	subs	r2, r2, r5
 80071ac:	6122      	str	r2, [r4, #16]
 80071ae:	464b      	mov	r3, r9
 80071b0:	4621      	mov	r1, r4
 80071b2:	4640      	mov	r0, r8
 80071b4:	f8cd a000 	str.w	sl, [sp]
 80071b8:	aa03      	add	r2, sp, #12
 80071ba:	f7ff fedf 	bl	8006f7c <_printf_common>
 80071be:	3001      	adds	r0, #1
 80071c0:	d14c      	bne.n	800725c <_printf_i+0x200>
 80071c2:	f04f 30ff 	mov.w	r0, #4294967295
 80071c6:	b004      	add	sp, #16
 80071c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071cc:	4834      	ldr	r0, [pc, #208]	; (80072a0 <_printf_i+0x244>)
 80071ce:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80071d2:	6829      	ldr	r1, [r5, #0]
 80071d4:	6823      	ldr	r3, [r4, #0]
 80071d6:	f851 6b04 	ldr.w	r6, [r1], #4
 80071da:	6029      	str	r1, [r5, #0]
 80071dc:	061d      	lsls	r5, r3, #24
 80071de:	d514      	bpl.n	800720a <_printf_i+0x1ae>
 80071e0:	07df      	lsls	r7, r3, #31
 80071e2:	bf44      	itt	mi
 80071e4:	f043 0320 	orrmi.w	r3, r3, #32
 80071e8:	6023      	strmi	r3, [r4, #0]
 80071ea:	b91e      	cbnz	r6, 80071f4 <_printf_i+0x198>
 80071ec:	6823      	ldr	r3, [r4, #0]
 80071ee:	f023 0320 	bic.w	r3, r3, #32
 80071f2:	6023      	str	r3, [r4, #0]
 80071f4:	2310      	movs	r3, #16
 80071f6:	e7af      	b.n	8007158 <_printf_i+0xfc>
 80071f8:	6823      	ldr	r3, [r4, #0]
 80071fa:	f043 0320 	orr.w	r3, r3, #32
 80071fe:	6023      	str	r3, [r4, #0]
 8007200:	2378      	movs	r3, #120	; 0x78
 8007202:	4828      	ldr	r0, [pc, #160]	; (80072a4 <_printf_i+0x248>)
 8007204:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007208:	e7e3      	b.n	80071d2 <_printf_i+0x176>
 800720a:	0659      	lsls	r1, r3, #25
 800720c:	bf48      	it	mi
 800720e:	b2b6      	uxthmi	r6, r6
 8007210:	e7e6      	b.n	80071e0 <_printf_i+0x184>
 8007212:	4615      	mov	r5, r2
 8007214:	e7bb      	b.n	800718e <_printf_i+0x132>
 8007216:	682b      	ldr	r3, [r5, #0]
 8007218:	6826      	ldr	r6, [r4, #0]
 800721a:	1d18      	adds	r0, r3, #4
 800721c:	6961      	ldr	r1, [r4, #20]
 800721e:	6028      	str	r0, [r5, #0]
 8007220:	0635      	lsls	r5, r6, #24
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	d501      	bpl.n	800722a <_printf_i+0x1ce>
 8007226:	6019      	str	r1, [r3, #0]
 8007228:	e002      	b.n	8007230 <_printf_i+0x1d4>
 800722a:	0670      	lsls	r0, r6, #25
 800722c:	d5fb      	bpl.n	8007226 <_printf_i+0x1ca>
 800722e:	8019      	strh	r1, [r3, #0]
 8007230:	2300      	movs	r3, #0
 8007232:	4615      	mov	r5, r2
 8007234:	6123      	str	r3, [r4, #16]
 8007236:	e7ba      	b.n	80071ae <_printf_i+0x152>
 8007238:	682b      	ldr	r3, [r5, #0]
 800723a:	2100      	movs	r1, #0
 800723c:	1d1a      	adds	r2, r3, #4
 800723e:	602a      	str	r2, [r5, #0]
 8007240:	681d      	ldr	r5, [r3, #0]
 8007242:	6862      	ldr	r2, [r4, #4]
 8007244:	4628      	mov	r0, r5
 8007246:	f002 f8d3 	bl	80093f0 <memchr>
 800724a:	b108      	cbz	r0, 8007250 <_printf_i+0x1f4>
 800724c:	1b40      	subs	r0, r0, r5
 800724e:	6060      	str	r0, [r4, #4]
 8007250:	6863      	ldr	r3, [r4, #4]
 8007252:	6123      	str	r3, [r4, #16]
 8007254:	2300      	movs	r3, #0
 8007256:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800725a:	e7a8      	b.n	80071ae <_printf_i+0x152>
 800725c:	462a      	mov	r2, r5
 800725e:	4649      	mov	r1, r9
 8007260:	4640      	mov	r0, r8
 8007262:	6923      	ldr	r3, [r4, #16]
 8007264:	47d0      	blx	sl
 8007266:	3001      	adds	r0, #1
 8007268:	d0ab      	beq.n	80071c2 <_printf_i+0x166>
 800726a:	6823      	ldr	r3, [r4, #0]
 800726c:	079b      	lsls	r3, r3, #30
 800726e:	d413      	bmi.n	8007298 <_printf_i+0x23c>
 8007270:	68e0      	ldr	r0, [r4, #12]
 8007272:	9b03      	ldr	r3, [sp, #12]
 8007274:	4298      	cmp	r0, r3
 8007276:	bfb8      	it	lt
 8007278:	4618      	movlt	r0, r3
 800727a:	e7a4      	b.n	80071c6 <_printf_i+0x16a>
 800727c:	2301      	movs	r3, #1
 800727e:	4632      	mov	r2, r6
 8007280:	4649      	mov	r1, r9
 8007282:	4640      	mov	r0, r8
 8007284:	47d0      	blx	sl
 8007286:	3001      	adds	r0, #1
 8007288:	d09b      	beq.n	80071c2 <_printf_i+0x166>
 800728a:	3501      	adds	r5, #1
 800728c:	68e3      	ldr	r3, [r4, #12]
 800728e:	9903      	ldr	r1, [sp, #12]
 8007290:	1a5b      	subs	r3, r3, r1
 8007292:	42ab      	cmp	r3, r5
 8007294:	dcf2      	bgt.n	800727c <_printf_i+0x220>
 8007296:	e7eb      	b.n	8007270 <_printf_i+0x214>
 8007298:	2500      	movs	r5, #0
 800729a:	f104 0619 	add.w	r6, r4, #25
 800729e:	e7f5      	b.n	800728c <_printf_i+0x230>
 80072a0:	0800ab4a 	.word	0x0800ab4a
 80072a4:	0800ab5b 	.word	0x0800ab5b

080072a8 <sulp>:
 80072a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072ac:	460f      	mov	r7, r1
 80072ae:	4690      	mov	r8, r2
 80072b0:	f002 fc2a 	bl	8009b08 <__ulp>
 80072b4:	4604      	mov	r4, r0
 80072b6:	460d      	mov	r5, r1
 80072b8:	f1b8 0f00 	cmp.w	r8, #0
 80072bc:	d011      	beq.n	80072e2 <sulp+0x3a>
 80072be:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80072c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	dd0b      	ble.n	80072e2 <sulp+0x3a>
 80072ca:	2400      	movs	r4, #0
 80072cc:	051b      	lsls	r3, r3, #20
 80072ce:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80072d2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80072d6:	4622      	mov	r2, r4
 80072d8:	462b      	mov	r3, r5
 80072da:	f7f9 f907 	bl	80004ec <__aeabi_dmul>
 80072de:	4604      	mov	r4, r0
 80072e0:	460d      	mov	r5, r1
 80072e2:	4620      	mov	r0, r4
 80072e4:	4629      	mov	r1, r5
 80072e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072ea:	0000      	movs	r0, r0
 80072ec:	0000      	movs	r0, r0
	...

080072f0 <_strtod_l>:
 80072f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f4:	469b      	mov	fp, r3
 80072f6:	2300      	movs	r3, #0
 80072f8:	b09f      	sub	sp, #124	; 0x7c
 80072fa:	931a      	str	r3, [sp, #104]	; 0x68
 80072fc:	4b9e      	ldr	r3, [pc, #632]	; (8007578 <_strtod_l+0x288>)
 80072fe:	4682      	mov	sl, r0
 8007300:	681f      	ldr	r7, [r3, #0]
 8007302:	460e      	mov	r6, r1
 8007304:	4638      	mov	r0, r7
 8007306:	9215      	str	r2, [sp, #84]	; 0x54
 8007308:	f7f8 ff2c 	bl	8000164 <strlen>
 800730c:	f04f 0800 	mov.w	r8, #0
 8007310:	4604      	mov	r4, r0
 8007312:	f04f 0900 	mov.w	r9, #0
 8007316:	9619      	str	r6, [sp, #100]	; 0x64
 8007318:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800731a:	781a      	ldrb	r2, [r3, #0]
 800731c:	2a2b      	cmp	r2, #43	; 0x2b
 800731e:	d04c      	beq.n	80073ba <_strtod_l+0xca>
 8007320:	d83a      	bhi.n	8007398 <_strtod_l+0xa8>
 8007322:	2a0d      	cmp	r2, #13
 8007324:	d833      	bhi.n	800738e <_strtod_l+0x9e>
 8007326:	2a08      	cmp	r2, #8
 8007328:	d833      	bhi.n	8007392 <_strtod_l+0xa2>
 800732a:	2a00      	cmp	r2, #0
 800732c:	d03d      	beq.n	80073aa <_strtod_l+0xba>
 800732e:	2300      	movs	r3, #0
 8007330:	930a      	str	r3, [sp, #40]	; 0x28
 8007332:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007334:	782b      	ldrb	r3, [r5, #0]
 8007336:	2b30      	cmp	r3, #48	; 0x30
 8007338:	f040 80aa 	bne.w	8007490 <_strtod_l+0x1a0>
 800733c:	786b      	ldrb	r3, [r5, #1]
 800733e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007342:	2b58      	cmp	r3, #88	; 0x58
 8007344:	d166      	bne.n	8007414 <_strtod_l+0x124>
 8007346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007348:	4650      	mov	r0, sl
 800734a:	9301      	str	r3, [sp, #4]
 800734c:	ab1a      	add	r3, sp, #104	; 0x68
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	4a8a      	ldr	r2, [pc, #552]	; (800757c <_strtod_l+0x28c>)
 8007352:	f8cd b008 	str.w	fp, [sp, #8]
 8007356:	ab1b      	add	r3, sp, #108	; 0x6c
 8007358:	a919      	add	r1, sp, #100	; 0x64
 800735a:	f001 fd2d 	bl	8008db8 <__gethex>
 800735e:	f010 0607 	ands.w	r6, r0, #7
 8007362:	4604      	mov	r4, r0
 8007364:	d005      	beq.n	8007372 <_strtod_l+0x82>
 8007366:	2e06      	cmp	r6, #6
 8007368:	d129      	bne.n	80073be <_strtod_l+0xce>
 800736a:	2300      	movs	r3, #0
 800736c:	3501      	adds	r5, #1
 800736e:	9519      	str	r5, [sp, #100]	; 0x64
 8007370:	930a      	str	r3, [sp, #40]	; 0x28
 8007372:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007374:	2b00      	cmp	r3, #0
 8007376:	f040 858a 	bne.w	8007e8e <_strtod_l+0xb9e>
 800737a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800737c:	b1d3      	cbz	r3, 80073b4 <_strtod_l+0xc4>
 800737e:	4642      	mov	r2, r8
 8007380:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007384:	4610      	mov	r0, r2
 8007386:	4619      	mov	r1, r3
 8007388:	b01f      	add	sp, #124	; 0x7c
 800738a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800738e:	2a20      	cmp	r2, #32
 8007390:	d1cd      	bne.n	800732e <_strtod_l+0x3e>
 8007392:	3301      	adds	r3, #1
 8007394:	9319      	str	r3, [sp, #100]	; 0x64
 8007396:	e7bf      	b.n	8007318 <_strtod_l+0x28>
 8007398:	2a2d      	cmp	r2, #45	; 0x2d
 800739a:	d1c8      	bne.n	800732e <_strtod_l+0x3e>
 800739c:	2201      	movs	r2, #1
 800739e:	920a      	str	r2, [sp, #40]	; 0x28
 80073a0:	1c5a      	adds	r2, r3, #1
 80073a2:	9219      	str	r2, [sp, #100]	; 0x64
 80073a4:	785b      	ldrb	r3, [r3, #1]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1c3      	bne.n	8007332 <_strtod_l+0x42>
 80073aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073ac:	9619      	str	r6, [sp, #100]	; 0x64
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f040 856b 	bne.w	8007e8a <_strtod_l+0xb9a>
 80073b4:	4642      	mov	r2, r8
 80073b6:	464b      	mov	r3, r9
 80073b8:	e7e4      	b.n	8007384 <_strtod_l+0x94>
 80073ba:	2200      	movs	r2, #0
 80073bc:	e7ef      	b.n	800739e <_strtod_l+0xae>
 80073be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80073c0:	b13a      	cbz	r2, 80073d2 <_strtod_l+0xe2>
 80073c2:	2135      	movs	r1, #53	; 0x35
 80073c4:	a81c      	add	r0, sp, #112	; 0x70
 80073c6:	f002 fca3 	bl	8009d10 <__copybits>
 80073ca:	4650      	mov	r0, sl
 80073cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80073ce:	f002 f86b 	bl	80094a8 <_Bfree>
 80073d2:	3e01      	subs	r6, #1
 80073d4:	2e04      	cmp	r6, #4
 80073d6:	d806      	bhi.n	80073e6 <_strtod_l+0xf6>
 80073d8:	e8df f006 	tbb	[pc, r6]
 80073dc:	1714030a 	.word	0x1714030a
 80073e0:	0a          	.byte	0x0a
 80073e1:	00          	.byte	0x00
 80073e2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80073e6:	0721      	lsls	r1, r4, #28
 80073e8:	d5c3      	bpl.n	8007372 <_strtod_l+0x82>
 80073ea:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80073ee:	e7c0      	b.n	8007372 <_strtod_l+0x82>
 80073f0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80073f2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80073f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80073fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80073fe:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007402:	e7f0      	b.n	80073e6 <_strtod_l+0xf6>
 8007404:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007580 <_strtod_l+0x290>
 8007408:	e7ed      	b.n	80073e6 <_strtod_l+0xf6>
 800740a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800740e:	f04f 38ff 	mov.w	r8, #4294967295
 8007412:	e7e8      	b.n	80073e6 <_strtod_l+0xf6>
 8007414:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007416:	1c5a      	adds	r2, r3, #1
 8007418:	9219      	str	r2, [sp, #100]	; 0x64
 800741a:	785b      	ldrb	r3, [r3, #1]
 800741c:	2b30      	cmp	r3, #48	; 0x30
 800741e:	d0f9      	beq.n	8007414 <_strtod_l+0x124>
 8007420:	2b00      	cmp	r3, #0
 8007422:	d0a6      	beq.n	8007372 <_strtod_l+0x82>
 8007424:	2301      	movs	r3, #1
 8007426:	9307      	str	r3, [sp, #28]
 8007428:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800742a:	220a      	movs	r2, #10
 800742c:	9308      	str	r3, [sp, #32]
 800742e:	2300      	movs	r3, #0
 8007430:	469b      	mov	fp, r3
 8007432:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007436:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007438:	7805      	ldrb	r5, [r0, #0]
 800743a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800743e:	b2d9      	uxtb	r1, r3
 8007440:	2909      	cmp	r1, #9
 8007442:	d927      	bls.n	8007494 <_strtod_l+0x1a4>
 8007444:	4622      	mov	r2, r4
 8007446:	4639      	mov	r1, r7
 8007448:	f002 ff04 	bl	800a254 <strncmp>
 800744c:	2800      	cmp	r0, #0
 800744e:	d033      	beq.n	80074b8 <_strtod_l+0x1c8>
 8007450:	2000      	movs	r0, #0
 8007452:	462a      	mov	r2, r5
 8007454:	465c      	mov	r4, fp
 8007456:	4603      	mov	r3, r0
 8007458:	9004      	str	r0, [sp, #16]
 800745a:	2a65      	cmp	r2, #101	; 0x65
 800745c:	d001      	beq.n	8007462 <_strtod_l+0x172>
 800745e:	2a45      	cmp	r2, #69	; 0x45
 8007460:	d114      	bne.n	800748c <_strtod_l+0x19c>
 8007462:	b91c      	cbnz	r4, 800746c <_strtod_l+0x17c>
 8007464:	9a07      	ldr	r2, [sp, #28]
 8007466:	4302      	orrs	r2, r0
 8007468:	d09f      	beq.n	80073aa <_strtod_l+0xba>
 800746a:	2400      	movs	r4, #0
 800746c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800746e:	1c72      	adds	r2, r6, #1
 8007470:	9219      	str	r2, [sp, #100]	; 0x64
 8007472:	7872      	ldrb	r2, [r6, #1]
 8007474:	2a2b      	cmp	r2, #43	; 0x2b
 8007476:	d079      	beq.n	800756c <_strtod_l+0x27c>
 8007478:	2a2d      	cmp	r2, #45	; 0x2d
 800747a:	f000 8083 	beq.w	8007584 <_strtod_l+0x294>
 800747e:	2700      	movs	r7, #0
 8007480:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007484:	2909      	cmp	r1, #9
 8007486:	f240 8083 	bls.w	8007590 <_strtod_l+0x2a0>
 800748a:	9619      	str	r6, [sp, #100]	; 0x64
 800748c:	2500      	movs	r5, #0
 800748e:	e09f      	b.n	80075d0 <_strtod_l+0x2e0>
 8007490:	2300      	movs	r3, #0
 8007492:	e7c8      	b.n	8007426 <_strtod_l+0x136>
 8007494:	f1bb 0f08 	cmp.w	fp, #8
 8007498:	bfd5      	itete	le
 800749a:	9906      	ldrle	r1, [sp, #24]
 800749c:	9905      	ldrgt	r1, [sp, #20]
 800749e:	fb02 3301 	mlale	r3, r2, r1, r3
 80074a2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80074a6:	f100 0001 	add.w	r0, r0, #1
 80074aa:	bfd4      	ite	le
 80074ac:	9306      	strle	r3, [sp, #24]
 80074ae:	9305      	strgt	r3, [sp, #20]
 80074b0:	f10b 0b01 	add.w	fp, fp, #1
 80074b4:	9019      	str	r0, [sp, #100]	; 0x64
 80074b6:	e7be      	b.n	8007436 <_strtod_l+0x146>
 80074b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80074ba:	191a      	adds	r2, r3, r4
 80074bc:	9219      	str	r2, [sp, #100]	; 0x64
 80074be:	5d1a      	ldrb	r2, [r3, r4]
 80074c0:	f1bb 0f00 	cmp.w	fp, #0
 80074c4:	d036      	beq.n	8007534 <_strtod_l+0x244>
 80074c6:	465c      	mov	r4, fp
 80074c8:	9004      	str	r0, [sp, #16]
 80074ca:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80074ce:	2b09      	cmp	r3, #9
 80074d0:	d912      	bls.n	80074f8 <_strtod_l+0x208>
 80074d2:	2301      	movs	r3, #1
 80074d4:	e7c1      	b.n	800745a <_strtod_l+0x16a>
 80074d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80074d8:	3001      	adds	r0, #1
 80074da:	1c5a      	adds	r2, r3, #1
 80074dc:	9219      	str	r2, [sp, #100]	; 0x64
 80074de:	785a      	ldrb	r2, [r3, #1]
 80074e0:	2a30      	cmp	r2, #48	; 0x30
 80074e2:	d0f8      	beq.n	80074d6 <_strtod_l+0x1e6>
 80074e4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80074e8:	2b08      	cmp	r3, #8
 80074ea:	f200 84d5 	bhi.w	8007e98 <_strtod_l+0xba8>
 80074ee:	9004      	str	r0, [sp, #16]
 80074f0:	2000      	movs	r0, #0
 80074f2:	4604      	mov	r4, r0
 80074f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80074f6:	9308      	str	r3, [sp, #32]
 80074f8:	3a30      	subs	r2, #48	; 0x30
 80074fa:	f100 0301 	add.w	r3, r0, #1
 80074fe:	d013      	beq.n	8007528 <_strtod_l+0x238>
 8007500:	9904      	ldr	r1, [sp, #16]
 8007502:	1905      	adds	r5, r0, r4
 8007504:	4419      	add	r1, r3
 8007506:	9104      	str	r1, [sp, #16]
 8007508:	4623      	mov	r3, r4
 800750a:	210a      	movs	r1, #10
 800750c:	42ab      	cmp	r3, r5
 800750e:	d113      	bne.n	8007538 <_strtod_l+0x248>
 8007510:	1823      	adds	r3, r4, r0
 8007512:	2b08      	cmp	r3, #8
 8007514:	f104 0401 	add.w	r4, r4, #1
 8007518:	4404      	add	r4, r0
 800751a:	dc1b      	bgt.n	8007554 <_strtod_l+0x264>
 800751c:	230a      	movs	r3, #10
 800751e:	9906      	ldr	r1, [sp, #24]
 8007520:	fb03 2301 	mla	r3, r3, r1, r2
 8007524:	9306      	str	r3, [sp, #24]
 8007526:	2300      	movs	r3, #0
 8007528:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800752a:	4618      	mov	r0, r3
 800752c:	1c51      	adds	r1, r2, #1
 800752e:	9119      	str	r1, [sp, #100]	; 0x64
 8007530:	7852      	ldrb	r2, [r2, #1]
 8007532:	e7ca      	b.n	80074ca <_strtod_l+0x1da>
 8007534:	4658      	mov	r0, fp
 8007536:	e7d3      	b.n	80074e0 <_strtod_l+0x1f0>
 8007538:	2b08      	cmp	r3, #8
 800753a:	dc04      	bgt.n	8007546 <_strtod_l+0x256>
 800753c:	9f06      	ldr	r7, [sp, #24]
 800753e:	434f      	muls	r7, r1
 8007540:	9706      	str	r7, [sp, #24]
 8007542:	3301      	adds	r3, #1
 8007544:	e7e2      	b.n	800750c <_strtod_l+0x21c>
 8007546:	1c5f      	adds	r7, r3, #1
 8007548:	2f10      	cmp	r7, #16
 800754a:	bfde      	ittt	le
 800754c:	9f05      	ldrle	r7, [sp, #20]
 800754e:	434f      	mulle	r7, r1
 8007550:	9705      	strle	r7, [sp, #20]
 8007552:	e7f6      	b.n	8007542 <_strtod_l+0x252>
 8007554:	2c10      	cmp	r4, #16
 8007556:	bfdf      	itttt	le
 8007558:	230a      	movle	r3, #10
 800755a:	9905      	ldrle	r1, [sp, #20]
 800755c:	fb03 2301 	mlale	r3, r3, r1, r2
 8007560:	9305      	strle	r3, [sp, #20]
 8007562:	e7e0      	b.n	8007526 <_strtod_l+0x236>
 8007564:	2300      	movs	r3, #0
 8007566:	9304      	str	r3, [sp, #16]
 8007568:	2301      	movs	r3, #1
 800756a:	e77b      	b.n	8007464 <_strtod_l+0x174>
 800756c:	2700      	movs	r7, #0
 800756e:	1cb2      	adds	r2, r6, #2
 8007570:	9219      	str	r2, [sp, #100]	; 0x64
 8007572:	78b2      	ldrb	r2, [r6, #2]
 8007574:	e784      	b.n	8007480 <_strtod_l+0x190>
 8007576:	bf00      	nop
 8007578:	0800ad50 	.word	0x0800ad50
 800757c:	0800ab6c 	.word	0x0800ab6c
 8007580:	7ff00000 	.word	0x7ff00000
 8007584:	2701      	movs	r7, #1
 8007586:	e7f2      	b.n	800756e <_strtod_l+0x27e>
 8007588:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800758a:	1c51      	adds	r1, r2, #1
 800758c:	9119      	str	r1, [sp, #100]	; 0x64
 800758e:	7852      	ldrb	r2, [r2, #1]
 8007590:	2a30      	cmp	r2, #48	; 0x30
 8007592:	d0f9      	beq.n	8007588 <_strtod_l+0x298>
 8007594:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007598:	2908      	cmp	r1, #8
 800759a:	f63f af77 	bhi.w	800748c <_strtod_l+0x19c>
 800759e:	f04f 0e0a 	mov.w	lr, #10
 80075a2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80075a6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80075a8:	9209      	str	r2, [sp, #36]	; 0x24
 80075aa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80075ac:	1c51      	adds	r1, r2, #1
 80075ae:	9119      	str	r1, [sp, #100]	; 0x64
 80075b0:	7852      	ldrb	r2, [r2, #1]
 80075b2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80075b6:	2d09      	cmp	r5, #9
 80075b8:	d935      	bls.n	8007626 <_strtod_l+0x336>
 80075ba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80075bc:	1b49      	subs	r1, r1, r5
 80075be:	2908      	cmp	r1, #8
 80075c0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80075c4:	dc02      	bgt.n	80075cc <_strtod_l+0x2dc>
 80075c6:	4565      	cmp	r5, ip
 80075c8:	bfa8      	it	ge
 80075ca:	4665      	movge	r5, ip
 80075cc:	b107      	cbz	r7, 80075d0 <_strtod_l+0x2e0>
 80075ce:	426d      	negs	r5, r5
 80075d0:	2c00      	cmp	r4, #0
 80075d2:	d14c      	bne.n	800766e <_strtod_l+0x37e>
 80075d4:	9907      	ldr	r1, [sp, #28]
 80075d6:	4301      	orrs	r1, r0
 80075d8:	f47f aecb 	bne.w	8007372 <_strtod_l+0x82>
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f47f aee4 	bne.w	80073aa <_strtod_l+0xba>
 80075e2:	2a69      	cmp	r2, #105	; 0x69
 80075e4:	d026      	beq.n	8007634 <_strtod_l+0x344>
 80075e6:	dc23      	bgt.n	8007630 <_strtod_l+0x340>
 80075e8:	2a49      	cmp	r2, #73	; 0x49
 80075ea:	d023      	beq.n	8007634 <_strtod_l+0x344>
 80075ec:	2a4e      	cmp	r2, #78	; 0x4e
 80075ee:	f47f aedc 	bne.w	80073aa <_strtod_l+0xba>
 80075f2:	499d      	ldr	r1, [pc, #628]	; (8007868 <_strtod_l+0x578>)
 80075f4:	a819      	add	r0, sp, #100	; 0x64
 80075f6:	f001 fe2d 	bl	8009254 <__match>
 80075fa:	2800      	cmp	r0, #0
 80075fc:	f43f aed5 	beq.w	80073aa <_strtod_l+0xba>
 8007600:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	2b28      	cmp	r3, #40	; 0x28
 8007606:	d12c      	bne.n	8007662 <_strtod_l+0x372>
 8007608:	4998      	ldr	r1, [pc, #608]	; (800786c <_strtod_l+0x57c>)
 800760a:	aa1c      	add	r2, sp, #112	; 0x70
 800760c:	a819      	add	r0, sp, #100	; 0x64
 800760e:	f001 fe35 	bl	800927c <__hexnan>
 8007612:	2805      	cmp	r0, #5
 8007614:	d125      	bne.n	8007662 <_strtod_l+0x372>
 8007616:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007618:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800761c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007620:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007624:	e6a5      	b.n	8007372 <_strtod_l+0x82>
 8007626:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800762a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800762e:	e7bc      	b.n	80075aa <_strtod_l+0x2ba>
 8007630:	2a6e      	cmp	r2, #110	; 0x6e
 8007632:	e7dc      	b.n	80075ee <_strtod_l+0x2fe>
 8007634:	498e      	ldr	r1, [pc, #568]	; (8007870 <_strtod_l+0x580>)
 8007636:	a819      	add	r0, sp, #100	; 0x64
 8007638:	f001 fe0c 	bl	8009254 <__match>
 800763c:	2800      	cmp	r0, #0
 800763e:	f43f aeb4 	beq.w	80073aa <_strtod_l+0xba>
 8007642:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007644:	498b      	ldr	r1, [pc, #556]	; (8007874 <_strtod_l+0x584>)
 8007646:	3b01      	subs	r3, #1
 8007648:	a819      	add	r0, sp, #100	; 0x64
 800764a:	9319      	str	r3, [sp, #100]	; 0x64
 800764c:	f001 fe02 	bl	8009254 <__match>
 8007650:	b910      	cbnz	r0, 8007658 <_strtod_l+0x368>
 8007652:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007654:	3301      	adds	r3, #1
 8007656:	9319      	str	r3, [sp, #100]	; 0x64
 8007658:	f04f 0800 	mov.w	r8, #0
 800765c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8007878 <_strtod_l+0x588>
 8007660:	e687      	b.n	8007372 <_strtod_l+0x82>
 8007662:	4886      	ldr	r0, [pc, #536]	; (800787c <_strtod_l+0x58c>)
 8007664:	f002 fde0 	bl	800a228 <nan>
 8007668:	4680      	mov	r8, r0
 800766a:	4689      	mov	r9, r1
 800766c:	e681      	b.n	8007372 <_strtod_l+0x82>
 800766e:	9b04      	ldr	r3, [sp, #16]
 8007670:	f1bb 0f00 	cmp.w	fp, #0
 8007674:	bf08      	it	eq
 8007676:	46a3      	moveq	fp, r4
 8007678:	1aeb      	subs	r3, r5, r3
 800767a:	2c10      	cmp	r4, #16
 800767c:	9806      	ldr	r0, [sp, #24]
 800767e:	4626      	mov	r6, r4
 8007680:	9307      	str	r3, [sp, #28]
 8007682:	bfa8      	it	ge
 8007684:	2610      	movge	r6, #16
 8007686:	f7f8 feb7 	bl	80003f8 <__aeabi_ui2d>
 800768a:	2c09      	cmp	r4, #9
 800768c:	4680      	mov	r8, r0
 800768e:	4689      	mov	r9, r1
 8007690:	dd13      	ble.n	80076ba <_strtod_l+0x3ca>
 8007692:	4b7b      	ldr	r3, [pc, #492]	; (8007880 <_strtod_l+0x590>)
 8007694:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007698:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800769c:	f7f8 ff26 	bl	80004ec <__aeabi_dmul>
 80076a0:	4680      	mov	r8, r0
 80076a2:	9805      	ldr	r0, [sp, #20]
 80076a4:	4689      	mov	r9, r1
 80076a6:	f7f8 fea7 	bl	80003f8 <__aeabi_ui2d>
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	4640      	mov	r0, r8
 80076b0:	4649      	mov	r1, r9
 80076b2:	f7f8 fd65 	bl	8000180 <__adddf3>
 80076b6:	4680      	mov	r8, r0
 80076b8:	4689      	mov	r9, r1
 80076ba:	2c0f      	cmp	r4, #15
 80076bc:	dc36      	bgt.n	800772c <_strtod_l+0x43c>
 80076be:	9b07      	ldr	r3, [sp, #28]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f43f ae56 	beq.w	8007372 <_strtod_l+0x82>
 80076c6:	dd22      	ble.n	800770e <_strtod_l+0x41e>
 80076c8:	2b16      	cmp	r3, #22
 80076ca:	dc09      	bgt.n	80076e0 <_strtod_l+0x3f0>
 80076cc:	496c      	ldr	r1, [pc, #432]	; (8007880 <_strtod_l+0x590>)
 80076ce:	4642      	mov	r2, r8
 80076d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80076d4:	464b      	mov	r3, r9
 80076d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076da:	f7f8 ff07 	bl	80004ec <__aeabi_dmul>
 80076de:	e7c3      	b.n	8007668 <_strtod_l+0x378>
 80076e0:	9a07      	ldr	r2, [sp, #28]
 80076e2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80076e6:	4293      	cmp	r3, r2
 80076e8:	db20      	blt.n	800772c <_strtod_l+0x43c>
 80076ea:	4d65      	ldr	r5, [pc, #404]	; (8007880 <_strtod_l+0x590>)
 80076ec:	f1c4 040f 	rsb	r4, r4, #15
 80076f0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80076f4:	4642      	mov	r2, r8
 80076f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076fa:	464b      	mov	r3, r9
 80076fc:	f7f8 fef6 	bl	80004ec <__aeabi_dmul>
 8007700:	9b07      	ldr	r3, [sp, #28]
 8007702:	1b1c      	subs	r4, r3, r4
 8007704:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007708:	e9d5 2300 	ldrd	r2, r3, [r5]
 800770c:	e7e5      	b.n	80076da <_strtod_l+0x3ea>
 800770e:	9b07      	ldr	r3, [sp, #28]
 8007710:	3316      	adds	r3, #22
 8007712:	db0b      	blt.n	800772c <_strtod_l+0x43c>
 8007714:	9b04      	ldr	r3, [sp, #16]
 8007716:	4640      	mov	r0, r8
 8007718:	1b5d      	subs	r5, r3, r5
 800771a:	4b59      	ldr	r3, [pc, #356]	; (8007880 <_strtod_l+0x590>)
 800771c:	4649      	mov	r1, r9
 800771e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007722:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007726:	f7f9 f80b 	bl	8000740 <__aeabi_ddiv>
 800772a:	e79d      	b.n	8007668 <_strtod_l+0x378>
 800772c:	9b07      	ldr	r3, [sp, #28]
 800772e:	1ba6      	subs	r6, r4, r6
 8007730:	441e      	add	r6, r3
 8007732:	2e00      	cmp	r6, #0
 8007734:	dd74      	ble.n	8007820 <_strtod_l+0x530>
 8007736:	f016 030f 	ands.w	r3, r6, #15
 800773a:	d00a      	beq.n	8007752 <_strtod_l+0x462>
 800773c:	4950      	ldr	r1, [pc, #320]	; (8007880 <_strtod_l+0x590>)
 800773e:	4642      	mov	r2, r8
 8007740:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007744:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007748:	464b      	mov	r3, r9
 800774a:	f7f8 fecf 	bl	80004ec <__aeabi_dmul>
 800774e:	4680      	mov	r8, r0
 8007750:	4689      	mov	r9, r1
 8007752:	f036 060f 	bics.w	r6, r6, #15
 8007756:	d052      	beq.n	80077fe <_strtod_l+0x50e>
 8007758:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800775c:	dd27      	ble.n	80077ae <_strtod_l+0x4be>
 800775e:	f04f 0b00 	mov.w	fp, #0
 8007762:	f8cd b010 	str.w	fp, [sp, #16]
 8007766:	f8cd b020 	str.w	fp, [sp, #32]
 800776a:	f8cd b018 	str.w	fp, [sp, #24]
 800776e:	2322      	movs	r3, #34	; 0x22
 8007770:	f04f 0800 	mov.w	r8, #0
 8007774:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007878 <_strtod_l+0x588>
 8007778:	f8ca 3000 	str.w	r3, [sl]
 800777c:	9b08      	ldr	r3, [sp, #32]
 800777e:	2b00      	cmp	r3, #0
 8007780:	f43f adf7 	beq.w	8007372 <_strtod_l+0x82>
 8007784:	4650      	mov	r0, sl
 8007786:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007788:	f001 fe8e 	bl	80094a8 <_Bfree>
 800778c:	4650      	mov	r0, sl
 800778e:	9906      	ldr	r1, [sp, #24]
 8007790:	f001 fe8a 	bl	80094a8 <_Bfree>
 8007794:	4650      	mov	r0, sl
 8007796:	9904      	ldr	r1, [sp, #16]
 8007798:	f001 fe86 	bl	80094a8 <_Bfree>
 800779c:	4650      	mov	r0, sl
 800779e:	9908      	ldr	r1, [sp, #32]
 80077a0:	f001 fe82 	bl	80094a8 <_Bfree>
 80077a4:	4659      	mov	r1, fp
 80077a6:	4650      	mov	r0, sl
 80077a8:	f001 fe7e 	bl	80094a8 <_Bfree>
 80077ac:	e5e1      	b.n	8007372 <_strtod_l+0x82>
 80077ae:	4b35      	ldr	r3, [pc, #212]	; (8007884 <_strtod_l+0x594>)
 80077b0:	4640      	mov	r0, r8
 80077b2:	9305      	str	r3, [sp, #20]
 80077b4:	2300      	movs	r3, #0
 80077b6:	4649      	mov	r1, r9
 80077b8:	461f      	mov	r7, r3
 80077ba:	1136      	asrs	r6, r6, #4
 80077bc:	2e01      	cmp	r6, #1
 80077be:	dc21      	bgt.n	8007804 <_strtod_l+0x514>
 80077c0:	b10b      	cbz	r3, 80077c6 <_strtod_l+0x4d6>
 80077c2:	4680      	mov	r8, r0
 80077c4:	4689      	mov	r9, r1
 80077c6:	4b2f      	ldr	r3, [pc, #188]	; (8007884 <_strtod_l+0x594>)
 80077c8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80077cc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80077d0:	4642      	mov	r2, r8
 80077d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077d6:	464b      	mov	r3, r9
 80077d8:	f7f8 fe88 	bl	80004ec <__aeabi_dmul>
 80077dc:	4b26      	ldr	r3, [pc, #152]	; (8007878 <_strtod_l+0x588>)
 80077de:	460a      	mov	r2, r1
 80077e0:	400b      	ands	r3, r1
 80077e2:	4929      	ldr	r1, [pc, #164]	; (8007888 <_strtod_l+0x598>)
 80077e4:	4680      	mov	r8, r0
 80077e6:	428b      	cmp	r3, r1
 80077e8:	d8b9      	bhi.n	800775e <_strtod_l+0x46e>
 80077ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80077ee:	428b      	cmp	r3, r1
 80077f0:	bf86      	itte	hi
 80077f2:	f04f 38ff 	movhi.w	r8, #4294967295
 80077f6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800788c <_strtod_l+0x59c>
 80077fa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80077fe:	2300      	movs	r3, #0
 8007800:	9305      	str	r3, [sp, #20]
 8007802:	e07f      	b.n	8007904 <_strtod_l+0x614>
 8007804:	07f2      	lsls	r2, r6, #31
 8007806:	d505      	bpl.n	8007814 <_strtod_l+0x524>
 8007808:	9b05      	ldr	r3, [sp, #20]
 800780a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780e:	f7f8 fe6d 	bl	80004ec <__aeabi_dmul>
 8007812:	2301      	movs	r3, #1
 8007814:	9a05      	ldr	r2, [sp, #20]
 8007816:	3701      	adds	r7, #1
 8007818:	3208      	adds	r2, #8
 800781a:	1076      	asrs	r6, r6, #1
 800781c:	9205      	str	r2, [sp, #20]
 800781e:	e7cd      	b.n	80077bc <_strtod_l+0x4cc>
 8007820:	d0ed      	beq.n	80077fe <_strtod_l+0x50e>
 8007822:	4276      	negs	r6, r6
 8007824:	f016 020f 	ands.w	r2, r6, #15
 8007828:	d00a      	beq.n	8007840 <_strtod_l+0x550>
 800782a:	4b15      	ldr	r3, [pc, #84]	; (8007880 <_strtod_l+0x590>)
 800782c:	4640      	mov	r0, r8
 800782e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007832:	4649      	mov	r1, r9
 8007834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007838:	f7f8 ff82 	bl	8000740 <__aeabi_ddiv>
 800783c:	4680      	mov	r8, r0
 800783e:	4689      	mov	r9, r1
 8007840:	1136      	asrs	r6, r6, #4
 8007842:	d0dc      	beq.n	80077fe <_strtod_l+0x50e>
 8007844:	2e1f      	cmp	r6, #31
 8007846:	dd23      	ble.n	8007890 <_strtod_l+0x5a0>
 8007848:	f04f 0b00 	mov.w	fp, #0
 800784c:	f8cd b010 	str.w	fp, [sp, #16]
 8007850:	f8cd b020 	str.w	fp, [sp, #32]
 8007854:	f8cd b018 	str.w	fp, [sp, #24]
 8007858:	2322      	movs	r3, #34	; 0x22
 800785a:	f04f 0800 	mov.w	r8, #0
 800785e:	f04f 0900 	mov.w	r9, #0
 8007862:	f8ca 3000 	str.w	r3, [sl]
 8007866:	e789      	b.n	800777c <_strtod_l+0x48c>
 8007868:	0800ab45 	.word	0x0800ab45
 800786c:	0800ab80 	.word	0x0800ab80
 8007870:	0800ab3d 	.word	0x0800ab3d
 8007874:	0800ac73 	.word	0x0800ac73
 8007878:	7ff00000 	.word	0x7ff00000
 800787c:	0800ac6f 	.word	0x0800ac6f
 8007880:	0800ade8 	.word	0x0800ade8
 8007884:	0800adc0 	.word	0x0800adc0
 8007888:	7ca00000 	.word	0x7ca00000
 800788c:	7fefffff 	.word	0x7fefffff
 8007890:	f016 0310 	ands.w	r3, r6, #16
 8007894:	bf18      	it	ne
 8007896:	236a      	movne	r3, #106	; 0x6a
 8007898:	4640      	mov	r0, r8
 800789a:	9305      	str	r3, [sp, #20]
 800789c:	4649      	mov	r1, r9
 800789e:	2300      	movs	r3, #0
 80078a0:	4fb0      	ldr	r7, [pc, #704]	; (8007b64 <_strtod_l+0x874>)
 80078a2:	07f2      	lsls	r2, r6, #31
 80078a4:	d504      	bpl.n	80078b0 <_strtod_l+0x5c0>
 80078a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078aa:	f7f8 fe1f 	bl	80004ec <__aeabi_dmul>
 80078ae:	2301      	movs	r3, #1
 80078b0:	1076      	asrs	r6, r6, #1
 80078b2:	f107 0708 	add.w	r7, r7, #8
 80078b6:	d1f4      	bne.n	80078a2 <_strtod_l+0x5b2>
 80078b8:	b10b      	cbz	r3, 80078be <_strtod_l+0x5ce>
 80078ba:	4680      	mov	r8, r0
 80078bc:	4689      	mov	r9, r1
 80078be:	9b05      	ldr	r3, [sp, #20]
 80078c0:	b1c3      	cbz	r3, 80078f4 <_strtod_l+0x604>
 80078c2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80078c6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	4649      	mov	r1, r9
 80078ce:	dd11      	ble.n	80078f4 <_strtod_l+0x604>
 80078d0:	2b1f      	cmp	r3, #31
 80078d2:	f340 8127 	ble.w	8007b24 <_strtod_l+0x834>
 80078d6:	2b34      	cmp	r3, #52	; 0x34
 80078d8:	bfd8      	it	le
 80078da:	f04f 33ff 	movle.w	r3, #4294967295
 80078de:	f04f 0800 	mov.w	r8, #0
 80078e2:	bfcf      	iteee	gt
 80078e4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80078e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80078ec:	fa03 f202 	lslle.w	r2, r3, r2
 80078f0:	ea02 0901 	andle.w	r9, r2, r1
 80078f4:	2200      	movs	r2, #0
 80078f6:	2300      	movs	r3, #0
 80078f8:	4640      	mov	r0, r8
 80078fa:	4649      	mov	r1, r9
 80078fc:	f7f9 f85e 	bl	80009bc <__aeabi_dcmpeq>
 8007900:	2800      	cmp	r0, #0
 8007902:	d1a1      	bne.n	8007848 <_strtod_l+0x558>
 8007904:	9b06      	ldr	r3, [sp, #24]
 8007906:	465a      	mov	r2, fp
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	4650      	mov	r0, sl
 800790c:	4623      	mov	r3, r4
 800790e:	9908      	ldr	r1, [sp, #32]
 8007910:	f001 fe32 	bl	8009578 <__s2b>
 8007914:	9008      	str	r0, [sp, #32]
 8007916:	2800      	cmp	r0, #0
 8007918:	f43f af21 	beq.w	800775e <_strtod_l+0x46e>
 800791c:	9b04      	ldr	r3, [sp, #16]
 800791e:	f04f 0b00 	mov.w	fp, #0
 8007922:	1b5d      	subs	r5, r3, r5
 8007924:	9b07      	ldr	r3, [sp, #28]
 8007926:	f8cd b010 	str.w	fp, [sp, #16]
 800792a:	2b00      	cmp	r3, #0
 800792c:	bfb4      	ite	lt
 800792e:	462b      	movlt	r3, r5
 8007930:	2300      	movge	r3, #0
 8007932:	930e      	str	r3, [sp, #56]	; 0x38
 8007934:	9b07      	ldr	r3, [sp, #28]
 8007936:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800793a:	9314      	str	r3, [sp, #80]	; 0x50
 800793c:	9b08      	ldr	r3, [sp, #32]
 800793e:	4650      	mov	r0, sl
 8007940:	6859      	ldr	r1, [r3, #4]
 8007942:	f001 fd71 	bl	8009428 <_Balloc>
 8007946:	9006      	str	r0, [sp, #24]
 8007948:	2800      	cmp	r0, #0
 800794a:	f43f af10 	beq.w	800776e <_strtod_l+0x47e>
 800794e:	9b08      	ldr	r3, [sp, #32]
 8007950:	300c      	adds	r0, #12
 8007952:	691a      	ldr	r2, [r3, #16]
 8007954:	f103 010c 	add.w	r1, r3, #12
 8007958:	3202      	adds	r2, #2
 800795a:	0092      	lsls	r2, r2, #2
 800795c:	f001 fd56 	bl	800940c <memcpy>
 8007960:	ab1c      	add	r3, sp, #112	; 0x70
 8007962:	9301      	str	r3, [sp, #4]
 8007964:	ab1b      	add	r3, sp, #108	; 0x6c
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	4642      	mov	r2, r8
 800796a:	464b      	mov	r3, r9
 800796c:	4650      	mov	r0, sl
 800796e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8007972:	f002 f943 	bl	8009bfc <__d2b>
 8007976:	901a      	str	r0, [sp, #104]	; 0x68
 8007978:	2800      	cmp	r0, #0
 800797a:	f43f aef8 	beq.w	800776e <_strtod_l+0x47e>
 800797e:	2101      	movs	r1, #1
 8007980:	4650      	mov	r0, sl
 8007982:	f001 fe91 	bl	80096a8 <__i2b>
 8007986:	4603      	mov	r3, r0
 8007988:	9004      	str	r0, [sp, #16]
 800798a:	2800      	cmp	r0, #0
 800798c:	f43f aeef 	beq.w	800776e <_strtod_l+0x47e>
 8007990:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007992:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007994:	2d00      	cmp	r5, #0
 8007996:	bfab      	itete	ge
 8007998:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800799a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800799c:	18ee      	addge	r6, r5, r3
 800799e:	1b5c      	sublt	r4, r3, r5
 80079a0:	9b05      	ldr	r3, [sp, #20]
 80079a2:	bfa8      	it	ge
 80079a4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80079a6:	eba5 0503 	sub.w	r5, r5, r3
 80079aa:	4415      	add	r5, r2
 80079ac:	4b6e      	ldr	r3, [pc, #440]	; (8007b68 <_strtod_l+0x878>)
 80079ae:	f105 35ff 	add.w	r5, r5, #4294967295
 80079b2:	bfb8      	it	lt
 80079b4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80079b6:	429d      	cmp	r5, r3
 80079b8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80079bc:	f280 80c4 	bge.w	8007b48 <_strtod_l+0x858>
 80079c0:	1b5b      	subs	r3, r3, r5
 80079c2:	2b1f      	cmp	r3, #31
 80079c4:	f04f 0701 	mov.w	r7, #1
 80079c8:	eba2 0203 	sub.w	r2, r2, r3
 80079cc:	f300 80b1 	bgt.w	8007b32 <_strtod_l+0x842>
 80079d0:	2500      	movs	r5, #0
 80079d2:	fa07 f303 	lsl.w	r3, r7, r3
 80079d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80079d8:	18b7      	adds	r7, r6, r2
 80079da:	9b05      	ldr	r3, [sp, #20]
 80079dc:	42be      	cmp	r6, r7
 80079de:	4414      	add	r4, r2
 80079e0:	441c      	add	r4, r3
 80079e2:	4633      	mov	r3, r6
 80079e4:	bfa8      	it	ge
 80079e6:	463b      	movge	r3, r7
 80079e8:	42a3      	cmp	r3, r4
 80079ea:	bfa8      	it	ge
 80079ec:	4623      	movge	r3, r4
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	bfc2      	ittt	gt
 80079f2:	1aff      	subgt	r7, r7, r3
 80079f4:	1ae4      	subgt	r4, r4, r3
 80079f6:	1af6      	subgt	r6, r6, r3
 80079f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	dd17      	ble.n	8007a2e <_strtod_l+0x73e>
 80079fe:	461a      	mov	r2, r3
 8007a00:	4650      	mov	r0, sl
 8007a02:	9904      	ldr	r1, [sp, #16]
 8007a04:	f001 ff0e 	bl	8009824 <__pow5mult>
 8007a08:	9004      	str	r0, [sp, #16]
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	f43f aeaf 	beq.w	800776e <_strtod_l+0x47e>
 8007a10:	4601      	mov	r1, r0
 8007a12:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007a14:	4650      	mov	r0, sl
 8007a16:	f001 fe5d 	bl	80096d4 <__multiply>
 8007a1a:	9009      	str	r0, [sp, #36]	; 0x24
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	f43f aea6 	beq.w	800776e <_strtod_l+0x47e>
 8007a22:	4650      	mov	r0, sl
 8007a24:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007a26:	f001 fd3f 	bl	80094a8 <_Bfree>
 8007a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a2c:	931a      	str	r3, [sp, #104]	; 0x68
 8007a2e:	2f00      	cmp	r7, #0
 8007a30:	f300 808e 	bgt.w	8007b50 <_strtod_l+0x860>
 8007a34:	9b07      	ldr	r3, [sp, #28]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	dd08      	ble.n	8007a4c <_strtod_l+0x75c>
 8007a3a:	4650      	mov	r0, sl
 8007a3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007a3e:	9906      	ldr	r1, [sp, #24]
 8007a40:	f001 fef0 	bl	8009824 <__pow5mult>
 8007a44:	9006      	str	r0, [sp, #24]
 8007a46:	2800      	cmp	r0, #0
 8007a48:	f43f ae91 	beq.w	800776e <_strtod_l+0x47e>
 8007a4c:	2c00      	cmp	r4, #0
 8007a4e:	dd08      	ble.n	8007a62 <_strtod_l+0x772>
 8007a50:	4622      	mov	r2, r4
 8007a52:	4650      	mov	r0, sl
 8007a54:	9906      	ldr	r1, [sp, #24]
 8007a56:	f001 ff3f 	bl	80098d8 <__lshift>
 8007a5a:	9006      	str	r0, [sp, #24]
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	f43f ae86 	beq.w	800776e <_strtod_l+0x47e>
 8007a62:	2e00      	cmp	r6, #0
 8007a64:	dd08      	ble.n	8007a78 <_strtod_l+0x788>
 8007a66:	4632      	mov	r2, r6
 8007a68:	4650      	mov	r0, sl
 8007a6a:	9904      	ldr	r1, [sp, #16]
 8007a6c:	f001 ff34 	bl	80098d8 <__lshift>
 8007a70:	9004      	str	r0, [sp, #16]
 8007a72:	2800      	cmp	r0, #0
 8007a74:	f43f ae7b 	beq.w	800776e <_strtod_l+0x47e>
 8007a78:	4650      	mov	r0, sl
 8007a7a:	9a06      	ldr	r2, [sp, #24]
 8007a7c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007a7e:	f001 ffb7 	bl	80099f0 <__mdiff>
 8007a82:	4683      	mov	fp, r0
 8007a84:	2800      	cmp	r0, #0
 8007a86:	f43f ae72 	beq.w	800776e <_strtod_l+0x47e>
 8007a8a:	2400      	movs	r4, #0
 8007a8c:	68c3      	ldr	r3, [r0, #12]
 8007a8e:	9904      	ldr	r1, [sp, #16]
 8007a90:	60c4      	str	r4, [r0, #12]
 8007a92:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a94:	f001 ff90 	bl	80099b8 <__mcmp>
 8007a98:	42a0      	cmp	r0, r4
 8007a9a:	da6b      	bge.n	8007b74 <_strtod_l+0x884>
 8007a9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a9e:	ea53 0308 	orrs.w	r3, r3, r8
 8007aa2:	f040 8091 	bne.w	8007bc8 <_strtod_l+0x8d8>
 8007aa6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f040 808c 	bne.w	8007bc8 <_strtod_l+0x8d8>
 8007ab0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ab4:	0d1b      	lsrs	r3, r3, #20
 8007ab6:	051b      	lsls	r3, r3, #20
 8007ab8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007abc:	f240 8084 	bls.w	8007bc8 <_strtod_l+0x8d8>
 8007ac0:	f8db 3014 	ldr.w	r3, [fp, #20]
 8007ac4:	b91b      	cbnz	r3, 8007ace <_strtod_l+0x7de>
 8007ac6:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	dd7c      	ble.n	8007bc8 <_strtod_l+0x8d8>
 8007ace:	4659      	mov	r1, fp
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	4650      	mov	r0, sl
 8007ad4:	f001 ff00 	bl	80098d8 <__lshift>
 8007ad8:	9904      	ldr	r1, [sp, #16]
 8007ada:	4683      	mov	fp, r0
 8007adc:	f001 ff6c 	bl	80099b8 <__mcmp>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	dd71      	ble.n	8007bc8 <_strtod_l+0x8d8>
 8007ae4:	9905      	ldr	r1, [sp, #20]
 8007ae6:	464b      	mov	r3, r9
 8007ae8:	4a20      	ldr	r2, [pc, #128]	; (8007b6c <_strtod_l+0x87c>)
 8007aea:	2900      	cmp	r1, #0
 8007aec:	f000 808c 	beq.w	8007c08 <_strtod_l+0x918>
 8007af0:	ea02 0109 	and.w	r1, r2, r9
 8007af4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007af8:	f300 8086 	bgt.w	8007c08 <_strtod_l+0x918>
 8007afc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007b00:	f77f aeaa 	ble.w	8007858 <_strtod_l+0x568>
 8007b04:	4640      	mov	r0, r8
 8007b06:	4649      	mov	r1, r9
 8007b08:	4b19      	ldr	r3, [pc, #100]	; (8007b70 <_strtod_l+0x880>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f7f8 fcee 	bl	80004ec <__aeabi_dmul>
 8007b10:	460b      	mov	r3, r1
 8007b12:	4303      	orrs	r3, r0
 8007b14:	bf08      	it	eq
 8007b16:	2322      	moveq	r3, #34	; 0x22
 8007b18:	4680      	mov	r8, r0
 8007b1a:	4689      	mov	r9, r1
 8007b1c:	bf08      	it	eq
 8007b1e:	f8ca 3000 	streq.w	r3, [sl]
 8007b22:	e62f      	b.n	8007784 <_strtod_l+0x494>
 8007b24:	f04f 32ff 	mov.w	r2, #4294967295
 8007b28:	fa02 f303 	lsl.w	r3, r2, r3
 8007b2c:	ea03 0808 	and.w	r8, r3, r8
 8007b30:	e6e0      	b.n	80078f4 <_strtod_l+0x604>
 8007b32:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8007b36:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8007b3a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007b3e:	35e2      	adds	r5, #226	; 0xe2
 8007b40:	fa07 f505 	lsl.w	r5, r7, r5
 8007b44:	970f      	str	r7, [sp, #60]	; 0x3c
 8007b46:	e747      	b.n	80079d8 <_strtod_l+0x6e8>
 8007b48:	2301      	movs	r3, #1
 8007b4a:	2500      	movs	r5, #0
 8007b4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b4e:	e743      	b.n	80079d8 <_strtod_l+0x6e8>
 8007b50:	463a      	mov	r2, r7
 8007b52:	4650      	mov	r0, sl
 8007b54:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007b56:	f001 febf 	bl	80098d8 <__lshift>
 8007b5a:	901a      	str	r0, [sp, #104]	; 0x68
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	f47f af69 	bne.w	8007a34 <_strtod_l+0x744>
 8007b62:	e604      	b.n	800776e <_strtod_l+0x47e>
 8007b64:	0800ab98 	.word	0x0800ab98
 8007b68:	fffffc02 	.word	0xfffffc02
 8007b6c:	7ff00000 	.word	0x7ff00000
 8007b70:	39500000 	.word	0x39500000
 8007b74:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007b78:	d165      	bne.n	8007c46 <_strtod_l+0x956>
 8007b7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b80:	b35a      	cbz	r2, 8007bda <_strtod_l+0x8ea>
 8007b82:	4a99      	ldr	r2, [pc, #612]	; (8007de8 <_strtod_l+0xaf8>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d12b      	bne.n	8007be0 <_strtod_l+0x8f0>
 8007b88:	9b05      	ldr	r3, [sp, #20]
 8007b8a:	4641      	mov	r1, r8
 8007b8c:	b303      	cbz	r3, 8007bd0 <_strtod_l+0x8e0>
 8007b8e:	464a      	mov	r2, r9
 8007b90:	4b96      	ldr	r3, [pc, #600]	; (8007dec <_strtod_l+0xafc>)
 8007b92:	4013      	ands	r3, r2
 8007b94:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007b98:	f04f 32ff 	mov.w	r2, #4294967295
 8007b9c:	d81b      	bhi.n	8007bd6 <_strtod_l+0x8e6>
 8007b9e:	0d1b      	lsrs	r3, r3, #20
 8007ba0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba8:	4299      	cmp	r1, r3
 8007baa:	d119      	bne.n	8007be0 <_strtod_l+0x8f0>
 8007bac:	4b90      	ldr	r3, [pc, #576]	; (8007df0 <_strtod_l+0xb00>)
 8007bae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d102      	bne.n	8007bba <_strtod_l+0x8ca>
 8007bb4:	3101      	adds	r1, #1
 8007bb6:	f43f adda 	beq.w	800776e <_strtod_l+0x47e>
 8007bba:	f04f 0800 	mov.w	r8, #0
 8007bbe:	4b8b      	ldr	r3, [pc, #556]	; (8007dec <_strtod_l+0xafc>)
 8007bc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bc2:	401a      	ands	r2, r3
 8007bc4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8007bc8:	9b05      	ldr	r3, [sp, #20]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d19a      	bne.n	8007b04 <_strtod_l+0x814>
 8007bce:	e5d9      	b.n	8007784 <_strtod_l+0x494>
 8007bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8007bd4:	e7e8      	b.n	8007ba8 <_strtod_l+0x8b8>
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	e7e6      	b.n	8007ba8 <_strtod_l+0x8b8>
 8007bda:	ea53 0308 	orrs.w	r3, r3, r8
 8007bde:	d081      	beq.n	8007ae4 <_strtod_l+0x7f4>
 8007be0:	b1e5      	cbz	r5, 8007c1c <_strtod_l+0x92c>
 8007be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007be4:	421d      	tst	r5, r3
 8007be6:	d0ef      	beq.n	8007bc8 <_strtod_l+0x8d8>
 8007be8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bea:	4640      	mov	r0, r8
 8007bec:	4649      	mov	r1, r9
 8007bee:	9a05      	ldr	r2, [sp, #20]
 8007bf0:	b1c3      	cbz	r3, 8007c24 <_strtod_l+0x934>
 8007bf2:	f7ff fb59 	bl	80072a8 <sulp>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007bfe:	f7f8 fabf 	bl	8000180 <__adddf3>
 8007c02:	4680      	mov	r8, r0
 8007c04:	4689      	mov	r9, r1
 8007c06:	e7df      	b.n	8007bc8 <_strtod_l+0x8d8>
 8007c08:	4013      	ands	r3, r2
 8007c0a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007c0e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007c12:	f04f 38ff 	mov.w	r8, #4294967295
 8007c16:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007c1a:	e7d5      	b.n	8007bc8 <_strtod_l+0x8d8>
 8007c1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c1e:	ea13 0f08 	tst.w	r3, r8
 8007c22:	e7e0      	b.n	8007be6 <_strtod_l+0x8f6>
 8007c24:	f7ff fb40 	bl	80072a8 <sulp>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c30:	f7f8 faa4 	bl	800017c <__aeabi_dsub>
 8007c34:	2200      	movs	r2, #0
 8007c36:	2300      	movs	r3, #0
 8007c38:	4680      	mov	r8, r0
 8007c3a:	4689      	mov	r9, r1
 8007c3c:	f7f8 febe 	bl	80009bc <__aeabi_dcmpeq>
 8007c40:	2800      	cmp	r0, #0
 8007c42:	d0c1      	beq.n	8007bc8 <_strtod_l+0x8d8>
 8007c44:	e608      	b.n	8007858 <_strtod_l+0x568>
 8007c46:	4658      	mov	r0, fp
 8007c48:	9904      	ldr	r1, [sp, #16]
 8007c4a:	f002 f833 	bl	8009cb4 <__ratio>
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007c54:	4606      	mov	r6, r0
 8007c56:	460f      	mov	r7, r1
 8007c58:	f7f8 fec4 	bl	80009e4 <__aeabi_dcmple>
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	d070      	beq.n	8007d42 <_strtod_l+0xa52>
 8007c60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d042      	beq.n	8007cec <_strtod_l+0x9fc>
 8007c66:	2600      	movs	r6, #0
 8007c68:	4f62      	ldr	r7, [pc, #392]	; (8007df4 <_strtod_l+0xb04>)
 8007c6a:	4d62      	ldr	r5, [pc, #392]	; (8007df4 <_strtod_l+0xb04>)
 8007c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c72:	0d1b      	lsrs	r3, r3, #20
 8007c74:	051b      	lsls	r3, r3, #20
 8007c76:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c7a:	4b5f      	ldr	r3, [pc, #380]	; (8007df8 <_strtod_l+0xb08>)
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	f040 80c3 	bne.w	8007e08 <_strtod_l+0xb18>
 8007c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c84:	4640      	mov	r0, r8
 8007c86:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8007c8a:	4649      	mov	r1, r9
 8007c8c:	f001 ff3c 	bl	8009b08 <__ulp>
 8007c90:	4602      	mov	r2, r0
 8007c92:	460b      	mov	r3, r1
 8007c94:	4630      	mov	r0, r6
 8007c96:	4639      	mov	r1, r7
 8007c98:	f7f8 fc28 	bl	80004ec <__aeabi_dmul>
 8007c9c:	4642      	mov	r2, r8
 8007c9e:	464b      	mov	r3, r9
 8007ca0:	f7f8 fa6e 	bl	8000180 <__adddf3>
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	4951      	ldr	r1, [pc, #324]	; (8007dec <_strtod_l+0xafc>)
 8007ca8:	4a54      	ldr	r2, [pc, #336]	; (8007dfc <_strtod_l+0xb0c>)
 8007caa:	4019      	ands	r1, r3
 8007cac:	4291      	cmp	r1, r2
 8007cae:	4680      	mov	r8, r0
 8007cb0:	d95d      	bls.n	8007d6e <_strtod_l+0xa7e>
 8007cb2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007cb4:	4b4e      	ldr	r3, [pc, #312]	; (8007df0 <_strtod_l+0xb00>)
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d103      	bne.n	8007cc2 <_strtod_l+0x9d2>
 8007cba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	f43f ad56 	beq.w	800776e <_strtod_l+0x47e>
 8007cc2:	f04f 38ff 	mov.w	r8, #4294967295
 8007cc6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007df0 <_strtod_l+0xb00>
 8007cca:	4650      	mov	r0, sl
 8007ccc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007cce:	f001 fbeb 	bl	80094a8 <_Bfree>
 8007cd2:	4650      	mov	r0, sl
 8007cd4:	9906      	ldr	r1, [sp, #24]
 8007cd6:	f001 fbe7 	bl	80094a8 <_Bfree>
 8007cda:	4650      	mov	r0, sl
 8007cdc:	9904      	ldr	r1, [sp, #16]
 8007cde:	f001 fbe3 	bl	80094a8 <_Bfree>
 8007ce2:	4659      	mov	r1, fp
 8007ce4:	4650      	mov	r0, sl
 8007ce6:	f001 fbdf 	bl	80094a8 <_Bfree>
 8007cea:	e627      	b.n	800793c <_strtod_l+0x64c>
 8007cec:	f1b8 0f00 	cmp.w	r8, #0
 8007cf0:	d119      	bne.n	8007d26 <_strtod_l+0xa36>
 8007cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cf8:	b9e3      	cbnz	r3, 8007d34 <_strtod_l+0xa44>
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	4630      	mov	r0, r6
 8007cfe:	4639      	mov	r1, r7
 8007d00:	4b3c      	ldr	r3, [pc, #240]	; (8007df4 <_strtod_l+0xb04>)
 8007d02:	f7f8 fe65 	bl	80009d0 <__aeabi_dcmplt>
 8007d06:	b9c8      	cbnz	r0, 8007d3c <_strtod_l+0xa4c>
 8007d08:	2200      	movs	r2, #0
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	4639      	mov	r1, r7
 8007d0e:	4b3c      	ldr	r3, [pc, #240]	; (8007e00 <_strtod_l+0xb10>)
 8007d10:	f7f8 fbec 	bl	80004ec <__aeabi_dmul>
 8007d14:	4604      	mov	r4, r0
 8007d16:	460d      	mov	r5, r1
 8007d18:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007d1c:	9416      	str	r4, [sp, #88]	; 0x58
 8007d1e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007d20:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8007d24:	e7a2      	b.n	8007c6c <_strtod_l+0x97c>
 8007d26:	f1b8 0f01 	cmp.w	r8, #1
 8007d2a:	d103      	bne.n	8007d34 <_strtod_l+0xa44>
 8007d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f43f ad92 	beq.w	8007858 <_strtod_l+0x568>
 8007d34:	2600      	movs	r6, #0
 8007d36:	2400      	movs	r4, #0
 8007d38:	4f32      	ldr	r7, [pc, #200]	; (8007e04 <_strtod_l+0xb14>)
 8007d3a:	e796      	b.n	8007c6a <_strtod_l+0x97a>
 8007d3c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007d3e:	4d30      	ldr	r5, [pc, #192]	; (8007e00 <_strtod_l+0xb10>)
 8007d40:	e7ea      	b.n	8007d18 <_strtod_l+0xa28>
 8007d42:	4b2f      	ldr	r3, [pc, #188]	; (8007e00 <_strtod_l+0xb10>)
 8007d44:	2200      	movs	r2, #0
 8007d46:	4630      	mov	r0, r6
 8007d48:	4639      	mov	r1, r7
 8007d4a:	f7f8 fbcf 	bl	80004ec <__aeabi_dmul>
 8007d4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d50:	4604      	mov	r4, r0
 8007d52:	460d      	mov	r5, r1
 8007d54:	b933      	cbnz	r3, 8007d64 <_strtod_l+0xa74>
 8007d56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d5a:	9010      	str	r0, [sp, #64]	; 0x40
 8007d5c:	9311      	str	r3, [sp, #68]	; 0x44
 8007d5e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007d62:	e783      	b.n	8007c6c <_strtod_l+0x97c>
 8007d64:	4602      	mov	r2, r0
 8007d66:	460b      	mov	r3, r1
 8007d68:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007d6c:	e7f7      	b.n	8007d5e <_strtod_l+0xa6e>
 8007d6e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007d72:	9b05      	ldr	r3, [sp, #20]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1a8      	bne.n	8007cca <_strtod_l+0x9da>
 8007d78:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d7e:	0d1b      	lsrs	r3, r3, #20
 8007d80:	051b      	lsls	r3, r3, #20
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d1a1      	bne.n	8007cca <_strtod_l+0x9da>
 8007d86:	4620      	mov	r0, r4
 8007d88:	4629      	mov	r1, r5
 8007d8a:	f7f9 f9f1 	bl	8001170 <__aeabi_d2lz>
 8007d8e:	f7f8 fb7f 	bl	8000490 <__aeabi_l2d>
 8007d92:	4602      	mov	r2, r0
 8007d94:	460b      	mov	r3, r1
 8007d96:	4620      	mov	r0, r4
 8007d98:	4629      	mov	r1, r5
 8007d9a:	f7f8 f9ef 	bl	800017c <__aeabi_dsub>
 8007d9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007da0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007da4:	ea43 0308 	orr.w	r3, r3, r8
 8007da8:	4313      	orrs	r3, r2
 8007daa:	4604      	mov	r4, r0
 8007dac:	460d      	mov	r5, r1
 8007dae:	d066      	beq.n	8007e7e <_strtod_l+0xb8e>
 8007db0:	a309      	add	r3, pc, #36	; (adr r3, 8007dd8 <_strtod_l+0xae8>)
 8007db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db6:	f7f8 fe0b 	bl	80009d0 <__aeabi_dcmplt>
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	f47f ace2 	bne.w	8007784 <_strtod_l+0x494>
 8007dc0:	a307      	add	r3, pc, #28	; (adr r3, 8007de0 <_strtod_l+0xaf0>)
 8007dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	4629      	mov	r1, r5
 8007dca:	f7f8 fe1f 	bl	8000a0c <__aeabi_dcmpgt>
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	f43f af7b 	beq.w	8007cca <_strtod_l+0x9da>
 8007dd4:	e4d6      	b.n	8007784 <_strtod_l+0x494>
 8007dd6:	bf00      	nop
 8007dd8:	94a03595 	.word	0x94a03595
 8007ddc:	3fdfffff 	.word	0x3fdfffff
 8007de0:	35afe535 	.word	0x35afe535
 8007de4:	3fe00000 	.word	0x3fe00000
 8007de8:	000fffff 	.word	0x000fffff
 8007dec:	7ff00000 	.word	0x7ff00000
 8007df0:	7fefffff 	.word	0x7fefffff
 8007df4:	3ff00000 	.word	0x3ff00000
 8007df8:	7fe00000 	.word	0x7fe00000
 8007dfc:	7c9fffff 	.word	0x7c9fffff
 8007e00:	3fe00000 	.word	0x3fe00000
 8007e04:	bff00000 	.word	0xbff00000
 8007e08:	9b05      	ldr	r3, [sp, #20]
 8007e0a:	b313      	cbz	r3, 8007e52 <_strtod_l+0xb62>
 8007e0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e0e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007e12:	d81e      	bhi.n	8007e52 <_strtod_l+0xb62>
 8007e14:	a326      	add	r3, pc, #152	; (adr r3, 8007eb0 <_strtod_l+0xbc0>)
 8007e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	4629      	mov	r1, r5
 8007e1e:	f7f8 fde1 	bl	80009e4 <__aeabi_dcmple>
 8007e22:	b190      	cbz	r0, 8007e4a <_strtod_l+0xb5a>
 8007e24:	4629      	mov	r1, r5
 8007e26:	4620      	mov	r0, r4
 8007e28:	f7f8 fe38 	bl	8000a9c <__aeabi_d2uiz>
 8007e2c:	2801      	cmp	r0, #1
 8007e2e:	bf38      	it	cc
 8007e30:	2001      	movcc	r0, #1
 8007e32:	f7f8 fae1 	bl	80003f8 <__aeabi_ui2d>
 8007e36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e38:	4604      	mov	r4, r0
 8007e3a:	460d      	mov	r5, r1
 8007e3c:	b9d3      	cbnz	r3, 8007e74 <_strtod_l+0xb84>
 8007e3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e42:	9012      	str	r0, [sp, #72]	; 0x48
 8007e44:	9313      	str	r3, [sp, #76]	; 0x4c
 8007e46:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007e4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e4c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007e50:	1a9f      	subs	r7, r3, r2
 8007e52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e56:	f001 fe57 	bl	8009b08 <__ulp>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	4630      	mov	r0, r6
 8007e60:	4639      	mov	r1, r7
 8007e62:	f7f8 fb43 	bl	80004ec <__aeabi_dmul>
 8007e66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007e6a:	f7f8 f989 	bl	8000180 <__adddf3>
 8007e6e:	4680      	mov	r8, r0
 8007e70:	4689      	mov	r9, r1
 8007e72:	e77e      	b.n	8007d72 <_strtod_l+0xa82>
 8007e74:	4602      	mov	r2, r0
 8007e76:	460b      	mov	r3, r1
 8007e78:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007e7c:	e7e3      	b.n	8007e46 <_strtod_l+0xb56>
 8007e7e:	a30e      	add	r3, pc, #56	; (adr r3, 8007eb8 <_strtod_l+0xbc8>)
 8007e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e84:	f7f8 fda4 	bl	80009d0 <__aeabi_dcmplt>
 8007e88:	e7a1      	b.n	8007dce <_strtod_l+0xade>
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	930a      	str	r3, [sp, #40]	; 0x28
 8007e8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e90:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007e92:	6013      	str	r3, [r2, #0]
 8007e94:	f7ff ba71 	b.w	800737a <_strtod_l+0x8a>
 8007e98:	2a65      	cmp	r2, #101	; 0x65
 8007e9a:	f43f ab63 	beq.w	8007564 <_strtod_l+0x274>
 8007e9e:	2a45      	cmp	r2, #69	; 0x45
 8007ea0:	f43f ab60 	beq.w	8007564 <_strtod_l+0x274>
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	f7ff bb95 	b.w	80075d4 <_strtod_l+0x2e4>
 8007eaa:	bf00      	nop
 8007eac:	f3af 8000 	nop.w
 8007eb0:	ffc00000 	.word	0xffc00000
 8007eb4:	41dfffff 	.word	0x41dfffff
 8007eb8:	94a03595 	.word	0x94a03595
 8007ebc:	3fcfffff 	.word	0x3fcfffff

08007ec0 <strtod>:
 8007ec0:	460a      	mov	r2, r1
 8007ec2:	4601      	mov	r1, r0
 8007ec4:	4802      	ldr	r0, [pc, #8]	; (8007ed0 <strtod+0x10>)
 8007ec6:	4b03      	ldr	r3, [pc, #12]	; (8007ed4 <strtod+0x14>)
 8007ec8:	6800      	ldr	r0, [r0, #0]
 8007eca:	f7ff ba11 	b.w	80072f0 <_strtod_l>
 8007ece:	bf00      	nop
 8007ed0:	20000018 	.word	0x20000018
 8007ed4:	20000080 	.word	0x20000080

08007ed8 <strtok>:
 8007ed8:	4b16      	ldr	r3, [pc, #88]	; (8007f34 <strtok+0x5c>)
 8007eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ede:	681f      	ldr	r7, [r3, #0]
 8007ee0:	4605      	mov	r5, r0
 8007ee2:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8007ee4:	460e      	mov	r6, r1
 8007ee6:	b9ec      	cbnz	r4, 8007f24 <strtok+0x4c>
 8007ee8:	2050      	movs	r0, #80	; 0x50
 8007eea:	f001 fa67 	bl	80093bc <malloc>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	65b8      	str	r0, [r7, #88]	; 0x58
 8007ef2:	b920      	cbnz	r0, 8007efe <strtok+0x26>
 8007ef4:	2157      	movs	r1, #87	; 0x57
 8007ef6:	4b10      	ldr	r3, [pc, #64]	; (8007f38 <strtok+0x60>)
 8007ef8:	4810      	ldr	r0, [pc, #64]	; (8007f3c <strtok+0x64>)
 8007efa:	f000 f849 	bl	8007f90 <__assert_func>
 8007efe:	e9c0 4400 	strd	r4, r4, [r0]
 8007f02:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007f06:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007f0a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007f0e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007f12:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007f16:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007f1a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007f1e:	6184      	str	r4, [r0, #24]
 8007f20:	7704      	strb	r4, [r0, #28]
 8007f22:	6244      	str	r4, [r0, #36]	; 0x24
 8007f24:	4631      	mov	r1, r6
 8007f26:	4628      	mov	r0, r5
 8007f28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f30:	f000 b806 	b.w	8007f40 <__strtok_r>
 8007f34:	20000018 	.word	0x20000018
 8007f38:	0800abc0 	.word	0x0800abc0
 8007f3c:	0800abd7 	.word	0x0800abd7

08007f40 <__strtok_r>:
 8007f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f42:	b908      	cbnz	r0, 8007f48 <__strtok_r+0x8>
 8007f44:	6810      	ldr	r0, [r2, #0]
 8007f46:	b188      	cbz	r0, 8007f6c <__strtok_r+0x2c>
 8007f48:	4604      	mov	r4, r0
 8007f4a:	460f      	mov	r7, r1
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007f52:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007f56:	b91e      	cbnz	r6, 8007f60 <__strtok_r+0x20>
 8007f58:	b965      	cbnz	r5, 8007f74 <__strtok_r+0x34>
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	6015      	str	r5, [r2, #0]
 8007f5e:	e005      	b.n	8007f6c <__strtok_r+0x2c>
 8007f60:	42b5      	cmp	r5, r6
 8007f62:	d1f6      	bne.n	8007f52 <__strtok_r+0x12>
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d1f0      	bne.n	8007f4a <__strtok_r+0xa>
 8007f68:	6014      	str	r4, [r2, #0]
 8007f6a:	7003      	strb	r3, [r0, #0]
 8007f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f6e:	461c      	mov	r4, r3
 8007f70:	e00c      	b.n	8007f8c <__strtok_r+0x4c>
 8007f72:	b915      	cbnz	r5, 8007f7a <__strtok_r+0x3a>
 8007f74:	460e      	mov	r6, r1
 8007f76:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007f7a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007f7e:	42ab      	cmp	r3, r5
 8007f80:	d1f7      	bne.n	8007f72 <__strtok_r+0x32>
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d0f3      	beq.n	8007f6e <__strtok_r+0x2e>
 8007f86:	2300      	movs	r3, #0
 8007f88:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007f8c:	6014      	str	r4, [r2, #0]
 8007f8e:	e7ed      	b.n	8007f6c <__strtok_r+0x2c>

08007f90 <__assert_func>:
 8007f90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f92:	4614      	mov	r4, r2
 8007f94:	461a      	mov	r2, r3
 8007f96:	4b09      	ldr	r3, [pc, #36]	; (8007fbc <__assert_func+0x2c>)
 8007f98:	4605      	mov	r5, r0
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68d8      	ldr	r0, [r3, #12]
 8007f9e:	b14c      	cbz	r4, 8007fb4 <__assert_func+0x24>
 8007fa0:	4b07      	ldr	r3, [pc, #28]	; (8007fc0 <__assert_func+0x30>)
 8007fa2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007fa6:	9100      	str	r1, [sp, #0]
 8007fa8:	462b      	mov	r3, r5
 8007faa:	4906      	ldr	r1, [pc, #24]	; (8007fc4 <__assert_func+0x34>)
 8007fac:	f000 fe8a 	bl	8008cc4 <fiprintf>
 8007fb0:	f002 fa32 	bl	800a418 <abort>
 8007fb4:	4b04      	ldr	r3, [pc, #16]	; (8007fc8 <__assert_func+0x38>)
 8007fb6:	461c      	mov	r4, r3
 8007fb8:	e7f3      	b.n	8007fa2 <__assert_func+0x12>
 8007fba:	bf00      	nop
 8007fbc:	20000018 	.word	0x20000018
 8007fc0:	0800ac34 	.word	0x0800ac34
 8007fc4:	0800ac41 	.word	0x0800ac41
 8007fc8:	0800ac6f 	.word	0x0800ac6f

08007fcc <quorem>:
 8007fcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd0:	6903      	ldr	r3, [r0, #16]
 8007fd2:	690c      	ldr	r4, [r1, #16]
 8007fd4:	4607      	mov	r7, r0
 8007fd6:	42a3      	cmp	r3, r4
 8007fd8:	f2c0 8082 	blt.w	80080e0 <quorem+0x114>
 8007fdc:	3c01      	subs	r4, #1
 8007fde:	f100 0514 	add.w	r5, r0, #20
 8007fe2:	f101 0814 	add.w	r8, r1, #20
 8007fe6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007fea:	9301      	str	r3, [sp, #4]
 8007fec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ff0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ffc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008000:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008004:	d331      	bcc.n	800806a <quorem+0x9e>
 8008006:	f04f 0e00 	mov.w	lr, #0
 800800a:	4640      	mov	r0, r8
 800800c:	46ac      	mov	ip, r5
 800800e:	46f2      	mov	sl, lr
 8008010:	f850 2b04 	ldr.w	r2, [r0], #4
 8008014:	b293      	uxth	r3, r2
 8008016:	fb06 e303 	mla	r3, r6, r3, lr
 800801a:	0c12      	lsrs	r2, r2, #16
 800801c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008020:	b29b      	uxth	r3, r3
 8008022:	fb06 e202 	mla	r2, r6, r2, lr
 8008026:	ebaa 0303 	sub.w	r3, sl, r3
 800802a:	f8dc a000 	ldr.w	sl, [ip]
 800802e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008032:	fa1f fa8a 	uxth.w	sl, sl
 8008036:	4453      	add	r3, sl
 8008038:	f8dc a000 	ldr.w	sl, [ip]
 800803c:	b292      	uxth	r2, r2
 800803e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008042:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008046:	b29b      	uxth	r3, r3
 8008048:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800804c:	4581      	cmp	r9, r0
 800804e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008052:	f84c 3b04 	str.w	r3, [ip], #4
 8008056:	d2db      	bcs.n	8008010 <quorem+0x44>
 8008058:	f855 300b 	ldr.w	r3, [r5, fp]
 800805c:	b92b      	cbnz	r3, 800806a <quorem+0x9e>
 800805e:	9b01      	ldr	r3, [sp, #4]
 8008060:	3b04      	subs	r3, #4
 8008062:	429d      	cmp	r5, r3
 8008064:	461a      	mov	r2, r3
 8008066:	d32f      	bcc.n	80080c8 <quorem+0xfc>
 8008068:	613c      	str	r4, [r7, #16]
 800806a:	4638      	mov	r0, r7
 800806c:	f001 fca4 	bl	80099b8 <__mcmp>
 8008070:	2800      	cmp	r0, #0
 8008072:	db25      	blt.n	80080c0 <quorem+0xf4>
 8008074:	4628      	mov	r0, r5
 8008076:	f04f 0c00 	mov.w	ip, #0
 800807a:	3601      	adds	r6, #1
 800807c:	f858 1b04 	ldr.w	r1, [r8], #4
 8008080:	f8d0 e000 	ldr.w	lr, [r0]
 8008084:	b28b      	uxth	r3, r1
 8008086:	ebac 0303 	sub.w	r3, ip, r3
 800808a:	fa1f f28e 	uxth.w	r2, lr
 800808e:	4413      	add	r3, r2
 8008090:	0c0a      	lsrs	r2, r1, #16
 8008092:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008096:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800809a:	b29b      	uxth	r3, r3
 800809c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080a0:	45c1      	cmp	r9, r8
 80080a2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80080a6:	f840 3b04 	str.w	r3, [r0], #4
 80080aa:	d2e7      	bcs.n	800807c <quorem+0xb0>
 80080ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080b4:	b922      	cbnz	r2, 80080c0 <quorem+0xf4>
 80080b6:	3b04      	subs	r3, #4
 80080b8:	429d      	cmp	r5, r3
 80080ba:	461a      	mov	r2, r3
 80080bc:	d30a      	bcc.n	80080d4 <quorem+0x108>
 80080be:	613c      	str	r4, [r7, #16]
 80080c0:	4630      	mov	r0, r6
 80080c2:	b003      	add	sp, #12
 80080c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080c8:	6812      	ldr	r2, [r2, #0]
 80080ca:	3b04      	subs	r3, #4
 80080cc:	2a00      	cmp	r2, #0
 80080ce:	d1cb      	bne.n	8008068 <quorem+0x9c>
 80080d0:	3c01      	subs	r4, #1
 80080d2:	e7c6      	b.n	8008062 <quorem+0x96>
 80080d4:	6812      	ldr	r2, [r2, #0]
 80080d6:	3b04      	subs	r3, #4
 80080d8:	2a00      	cmp	r2, #0
 80080da:	d1f0      	bne.n	80080be <quorem+0xf2>
 80080dc:	3c01      	subs	r4, #1
 80080de:	e7eb      	b.n	80080b8 <quorem+0xec>
 80080e0:	2000      	movs	r0, #0
 80080e2:	e7ee      	b.n	80080c2 <quorem+0xf6>
 80080e4:	0000      	movs	r0, r0
	...

080080e8 <_dtoa_r>:
 80080e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ec:	4616      	mov	r6, r2
 80080ee:	461f      	mov	r7, r3
 80080f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80080f2:	b099      	sub	sp, #100	; 0x64
 80080f4:	4605      	mov	r5, r0
 80080f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80080fa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80080fe:	b974      	cbnz	r4, 800811e <_dtoa_r+0x36>
 8008100:	2010      	movs	r0, #16
 8008102:	f001 f95b 	bl	80093bc <malloc>
 8008106:	4602      	mov	r2, r0
 8008108:	6268      	str	r0, [r5, #36]	; 0x24
 800810a:	b920      	cbnz	r0, 8008116 <_dtoa_r+0x2e>
 800810c:	21ea      	movs	r1, #234	; 0xea
 800810e:	4ba8      	ldr	r3, [pc, #672]	; (80083b0 <_dtoa_r+0x2c8>)
 8008110:	48a8      	ldr	r0, [pc, #672]	; (80083b4 <_dtoa_r+0x2cc>)
 8008112:	f7ff ff3d 	bl	8007f90 <__assert_func>
 8008116:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800811a:	6004      	str	r4, [r0, #0]
 800811c:	60c4      	str	r4, [r0, #12]
 800811e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008120:	6819      	ldr	r1, [r3, #0]
 8008122:	b151      	cbz	r1, 800813a <_dtoa_r+0x52>
 8008124:	685a      	ldr	r2, [r3, #4]
 8008126:	2301      	movs	r3, #1
 8008128:	4093      	lsls	r3, r2
 800812a:	604a      	str	r2, [r1, #4]
 800812c:	608b      	str	r3, [r1, #8]
 800812e:	4628      	mov	r0, r5
 8008130:	f001 f9ba 	bl	80094a8 <_Bfree>
 8008134:	2200      	movs	r2, #0
 8008136:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008138:	601a      	str	r2, [r3, #0]
 800813a:	1e3b      	subs	r3, r7, #0
 800813c:	bfaf      	iteee	ge
 800813e:	2300      	movge	r3, #0
 8008140:	2201      	movlt	r2, #1
 8008142:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008146:	9305      	strlt	r3, [sp, #20]
 8008148:	bfa8      	it	ge
 800814a:	f8c8 3000 	strge.w	r3, [r8]
 800814e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008152:	4b99      	ldr	r3, [pc, #612]	; (80083b8 <_dtoa_r+0x2d0>)
 8008154:	bfb8      	it	lt
 8008156:	f8c8 2000 	strlt.w	r2, [r8]
 800815a:	ea33 0309 	bics.w	r3, r3, r9
 800815e:	d119      	bne.n	8008194 <_dtoa_r+0xac>
 8008160:	f242 730f 	movw	r3, #9999	; 0x270f
 8008164:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008166:	6013      	str	r3, [r2, #0]
 8008168:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800816c:	4333      	orrs	r3, r6
 800816e:	f000 857f 	beq.w	8008c70 <_dtoa_r+0xb88>
 8008172:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008174:	b953      	cbnz	r3, 800818c <_dtoa_r+0xa4>
 8008176:	4b91      	ldr	r3, [pc, #580]	; (80083bc <_dtoa_r+0x2d4>)
 8008178:	e022      	b.n	80081c0 <_dtoa_r+0xd8>
 800817a:	4b91      	ldr	r3, [pc, #580]	; (80083c0 <_dtoa_r+0x2d8>)
 800817c:	9303      	str	r3, [sp, #12]
 800817e:	3308      	adds	r3, #8
 8008180:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008182:	6013      	str	r3, [r2, #0]
 8008184:	9803      	ldr	r0, [sp, #12]
 8008186:	b019      	add	sp, #100	; 0x64
 8008188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800818c:	4b8b      	ldr	r3, [pc, #556]	; (80083bc <_dtoa_r+0x2d4>)
 800818e:	9303      	str	r3, [sp, #12]
 8008190:	3303      	adds	r3, #3
 8008192:	e7f5      	b.n	8008180 <_dtoa_r+0x98>
 8008194:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008198:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800819c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80081a0:	2200      	movs	r2, #0
 80081a2:	2300      	movs	r3, #0
 80081a4:	f7f8 fc0a 	bl	80009bc <__aeabi_dcmpeq>
 80081a8:	4680      	mov	r8, r0
 80081aa:	b158      	cbz	r0, 80081c4 <_dtoa_r+0xdc>
 80081ac:	2301      	movs	r3, #1
 80081ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80081b0:	6013      	str	r3, [r2, #0]
 80081b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f000 8558 	beq.w	8008c6a <_dtoa_r+0xb82>
 80081ba:	4882      	ldr	r0, [pc, #520]	; (80083c4 <_dtoa_r+0x2dc>)
 80081bc:	6018      	str	r0, [r3, #0]
 80081be:	1e43      	subs	r3, r0, #1
 80081c0:	9303      	str	r3, [sp, #12]
 80081c2:	e7df      	b.n	8008184 <_dtoa_r+0x9c>
 80081c4:	ab16      	add	r3, sp, #88	; 0x58
 80081c6:	9301      	str	r3, [sp, #4]
 80081c8:	ab17      	add	r3, sp, #92	; 0x5c
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	4628      	mov	r0, r5
 80081ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80081d2:	f001 fd13 	bl	8009bfc <__d2b>
 80081d6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80081da:	4683      	mov	fp, r0
 80081dc:	2c00      	cmp	r4, #0
 80081de:	d07f      	beq.n	80082e0 <_dtoa_r+0x1f8>
 80081e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80081e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081e6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80081ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081ee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80081f2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80081f6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80081fa:	2200      	movs	r2, #0
 80081fc:	4b72      	ldr	r3, [pc, #456]	; (80083c8 <_dtoa_r+0x2e0>)
 80081fe:	f7f7 ffbd 	bl	800017c <__aeabi_dsub>
 8008202:	a365      	add	r3, pc, #404	; (adr r3, 8008398 <_dtoa_r+0x2b0>)
 8008204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008208:	f7f8 f970 	bl	80004ec <__aeabi_dmul>
 800820c:	a364      	add	r3, pc, #400	; (adr r3, 80083a0 <_dtoa_r+0x2b8>)
 800820e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008212:	f7f7 ffb5 	bl	8000180 <__adddf3>
 8008216:	4606      	mov	r6, r0
 8008218:	4620      	mov	r0, r4
 800821a:	460f      	mov	r7, r1
 800821c:	f7f8 f8fc 	bl	8000418 <__aeabi_i2d>
 8008220:	a361      	add	r3, pc, #388	; (adr r3, 80083a8 <_dtoa_r+0x2c0>)
 8008222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008226:	f7f8 f961 	bl	80004ec <__aeabi_dmul>
 800822a:	4602      	mov	r2, r0
 800822c:	460b      	mov	r3, r1
 800822e:	4630      	mov	r0, r6
 8008230:	4639      	mov	r1, r7
 8008232:	f7f7 ffa5 	bl	8000180 <__adddf3>
 8008236:	4606      	mov	r6, r0
 8008238:	460f      	mov	r7, r1
 800823a:	f7f8 fc07 	bl	8000a4c <__aeabi_d2iz>
 800823e:	2200      	movs	r2, #0
 8008240:	4682      	mov	sl, r0
 8008242:	2300      	movs	r3, #0
 8008244:	4630      	mov	r0, r6
 8008246:	4639      	mov	r1, r7
 8008248:	f7f8 fbc2 	bl	80009d0 <__aeabi_dcmplt>
 800824c:	b148      	cbz	r0, 8008262 <_dtoa_r+0x17a>
 800824e:	4650      	mov	r0, sl
 8008250:	f7f8 f8e2 	bl	8000418 <__aeabi_i2d>
 8008254:	4632      	mov	r2, r6
 8008256:	463b      	mov	r3, r7
 8008258:	f7f8 fbb0 	bl	80009bc <__aeabi_dcmpeq>
 800825c:	b908      	cbnz	r0, 8008262 <_dtoa_r+0x17a>
 800825e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008262:	f1ba 0f16 	cmp.w	sl, #22
 8008266:	d858      	bhi.n	800831a <_dtoa_r+0x232>
 8008268:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800826c:	4b57      	ldr	r3, [pc, #348]	; (80083cc <_dtoa_r+0x2e4>)
 800826e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008276:	f7f8 fbab 	bl	80009d0 <__aeabi_dcmplt>
 800827a:	2800      	cmp	r0, #0
 800827c:	d04f      	beq.n	800831e <_dtoa_r+0x236>
 800827e:	2300      	movs	r3, #0
 8008280:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008284:	930f      	str	r3, [sp, #60]	; 0x3c
 8008286:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008288:	1b1c      	subs	r4, r3, r4
 800828a:	1e63      	subs	r3, r4, #1
 800828c:	9309      	str	r3, [sp, #36]	; 0x24
 800828e:	bf49      	itett	mi
 8008290:	f1c4 0301 	rsbmi	r3, r4, #1
 8008294:	2300      	movpl	r3, #0
 8008296:	9306      	strmi	r3, [sp, #24]
 8008298:	2300      	movmi	r3, #0
 800829a:	bf54      	ite	pl
 800829c:	9306      	strpl	r3, [sp, #24]
 800829e:	9309      	strmi	r3, [sp, #36]	; 0x24
 80082a0:	f1ba 0f00 	cmp.w	sl, #0
 80082a4:	db3d      	blt.n	8008322 <_dtoa_r+0x23a>
 80082a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082a8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80082ac:	4453      	add	r3, sl
 80082ae:	9309      	str	r3, [sp, #36]	; 0x24
 80082b0:	2300      	movs	r3, #0
 80082b2:	930a      	str	r3, [sp, #40]	; 0x28
 80082b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082b6:	2b09      	cmp	r3, #9
 80082b8:	f200 808c 	bhi.w	80083d4 <_dtoa_r+0x2ec>
 80082bc:	2b05      	cmp	r3, #5
 80082be:	bfc4      	itt	gt
 80082c0:	3b04      	subgt	r3, #4
 80082c2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80082c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082c6:	bfc8      	it	gt
 80082c8:	2400      	movgt	r4, #0
 80082ca:	f1a3 0302 	sub.w	r3, r3, #2
 80082ce:	bfd8      	it	le
 80082d0:	2401      	movle	r4, #1
 80082d2:	2b03      	cmp	r3, #3
 80082d4:	f200 808a 	bhi.w	80083ec <_dtoa_r+0x304>
 80082d8:	e8df f003 	tbb	[pc, r3]
 80082dc:	5b4d4f2d 	.word	0x5b4d4f2d
 80082e0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80082e4:	441c      	add	r4, r3
 80082e6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80082ea:	2b20      	cmp	r3, #32
 80082ec:	bfc3      	ittte	gt
 80082ee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80082f2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80082f6:	fa09 f303 	lslgt.w	r3, r9, r3
 80082fa:	f1c3 0320 	rsble	r3, r3, #32
 80082fe:	bfc6      	itte	gt
 8008300:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008304:	4318      	orrgt	r0, r3
 8008306:	fa06 f003 	lslle.w	r0, r6, r3
 800830a:	f7f8 f875 	bl	80003f8 <__aeabi_ui2d>
 800830e:	2301      	movs	r3, #1
 8008310:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008314:	3c01      	subs	r4, #1
 8008316:	9313      	str	r3, [sp, #76]	; 0x4c
 8008318:	e76f      	b.n	80081fa <_dtoa_r+0x112>
 800831a:	2301      	movs	r3, #1
 800831c:	e7b2      	b.n	8008284 <_dtoa_r+0x19c>
 800831e:	900f      	str	r0, [sp, #60]	; 0x3c
 8008320:	e7b1      	b.n	8008286 <_dtoa_r+0x19e>
 8008322:	9b06      	ldr	r3, [sp, #24]
 8008324:	eba3 030a 	sub.w	r3, r3, sl
 8008328:	9306      	str	r3, [sp, #24]
 800832a:	f1ca 0300 	rsb	r3, sl, #0
 800832e:	930a      	str	r3, [sp, #40]	; 0x28
 8008330:	2300      	movs	r3, #0
 8008332:	930e      	str	r3, [sp, #56]	; 0x38
 8008334:	e7be      	b.n	80082b4 <_dtoa_r+0x1cc>
 8008336:	2300      	movs	r3, #0
 8008338:	930b      	str	r3, [sp, #44]	; 0x2c
 800833a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800833c:	2b00      	cmp	r3, #0
 800833e:	dc58      	bgt.n	80083f2 <_dtoa_r+0x30a>
 8008340:	f04f 0901 	mov.w	r9, #1
 8008344:	464b      	mov	r3, r9
 8008346:	f8cd 9020 	str.w	r9, [sp, #32]
 800834a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800834e:	2200      	movs	r2, #0
 8008350:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008352:	6042      	str	r2, [r0, #4]
 8008354:	2204      	movs	r2, #4
 8008356:	f102 0614 	add.w	r6, r2, #20
 800835a:	429e      	cmp	r6, r3
 800835c:	6841      	ldr	r1, [r0, #4]
 800835e:	d94e      	bls.n	80083fe <_dtoa_r+0x316>
 8008360:	4628      	mov	r0, r5
 8008362:	f001 f861 	bl	8009428 <_Balloc>
 8008366:	9003      	str	r0, [sp, #12]
 8008368:	2800      	cmp	r0, #0
 800836a:	d14c      	bne.n	8008406 <_dtoa_r+0x31e>
 800836c:	4602      	mov	r2, r0
 800836e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008372:	4b17      	ldr	r3, [pc, #92]	; (80083d0 <_dtoa_r+0x2e8>)
 8008374:	e6cc      	b.n	8008110 <_dtoa_r+0x28>
 8008376:	2301      	movs	r3, #1
 8008378:	e7de      	b.n	8008338 <_dtoa_r+0x250>
 800837a:	2300      	movs	r3, #0
 800837c:	930b      	str	r3, [sp, #44]	; 0x2c
 800837e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008380:	eb0a 0903 	add.w	r9, sl, r3
 8008384:	f109 0301 	add.w	r3, r9, #1
 8008388:	2b01      	cmp	r3, #1
 800838a:	9308      	str	r3, [sp, #32]
 800838c:	bfb8      	it	lt
 800838e:	2301      	movlt	r3, #1
 8008390:	e7dd      	b.n	800834e <_dtoa_r+0x266>
 8008392:	2301      	movs	r3, #1
 8008394:	e7f2      	b.n	800837c <_dtoa_r+0x294>
 8008396:	bf00      	nop
 8008398:	636f4361 	.word	0x636f4361
 800839c:	3fd287a7 	.word	0x3fd287a7
 80083a0:	8b60c8b3 	.word	0x8b60c8b3
 80083a4:	3fc68a28 	.word	0x3fc68a28
 80083a8:	509f79fb 	.word	0x509f79fb
 80083ac:	3fd34413 	.word	0x3fd34413
 80083b0:	0800abc0 	.word	0x0800abc0
 80083b4:	0800ac7d 	.word	0x0800ac7d
 80083b8:	7ff00000 	.word	0x7ff00000
 80083bc:	0800ac79 	.word	0x0800ac79
 80083c0:	0800ac70 	.word	0x0800ac70
 80083c4:	0800ab49 	.word	0x0800ab49
 80083c8:	3ff80000 	.word	0x3ff80000
 80083cc:	0800ade8 	.word	0x0800ade8
 80083d0:	0800acd8 	.word	0x0800acd8
 80083d4:	2401      	movs	r4, #1
 80083d6:	2300      	movs	r3, #0
 80083d8:	940b      	str	r4, [sp, #44]	; 0x2c
 80083da:	9322      	str	r3, [sp, #136]	; 0x88
 80083dc:	f04f 39ff 	mov.w	r9, #4294967295
 80083e0:	2200      	movs	r2, #0
 80083e2:	2312      	movs	r3, #18
 80083e4:	f8cd 9020 	str.w	r9, [sp, #32]
 80083e8:	9223      	str	r2, [sp, #140]	; 0x8c
 80083ea:	e7b0      	b.n	800834e <_dtoa_r+0x266>
 80083ec:	2301      	movs	r3, #1
 80083ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80083f0:	e7f4      	b.n	80083dc <_dtoa_r+0x2f4>
 80083f2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80083f6:	464b      	mov	r3, r9
 80083f8:	f8cd 9020 	str.w	r9, [sp, #32]
 80083fc:	e7a7      	b.n	800834e <_dtoa_r+0x266>
 80083fe:	3101      	adds	r1, #1
 8008400:	6041      	str	r1, [r0, #4]
 8008402:	0052      	lsls	r2, r2, #1
 8008404:	e7a7      	b.n	8008356 <_dtoa_r+0x26e>
 8008406:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008408:	9a03      	ldr	r2, [sp, #12]
 800840a:	601a      	str	r2, [r3, #0]
 800840c:	9b08      	ldr	r3, [sp, #32]
 800840e:	2b0e      	cmp	r3, #14
 8008410:	f200 80a8 	bhi.w	8008564 <_dtoa_r+0x47c>
 8008414:	2c00      	cmp	r4, #0
 8008416:	f000 80a5 	beq.w	8008564 <_dtoa_r+0x47c>
 800841a:	f1ba 0f00 	cmp.w	sl, #0
 800841e:	dd34      	ble.n	800848a <_dtoa_r+0x3a2>
 8008420:	4a9a      	ldr	r2, [pc, #616]	; (800868c <_dtoa_r+0x5a4>)
 8008422:	f00a 030f 	and.w	r3, sl, #15
 8008426:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800842a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800842e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008432:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008436:	ea4f 142a 	mov.w	r4, sl, asr #4
 800843a:	d016      	beq.n	800846a <_dtoa_r+0x382>
 800843c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008440:	4b93      	ldr	r3, [pc, #588]	; (8008690 <_dtoa_r+0x5a8>)
 8008442:	2703      	movs	r7, #3
 8008444:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008448:	f7f8 f97a 	bl	8000740 <__aeabi_ddiv>
 800844c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008450:	f004 040f 	and.w	r4, r4, #15
 8008454:	4e8e      	ldr	r6, [pc, #568]	; (8008690 <_dtoa_r+0x5a8>)
 8008456:	b954      	cbnz	r4, 800846e <_dtoa_r+0x386>
 8008458:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800845c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008460:	f7f8 f96e 	bl	8000740 <__aeabi_ddiv>
 8008464:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008468:	e029      	b.n	80084be <_dtoa_r+0x3d6>
 800846a:	2702      	movs	r7, #2
 800846c:	e7f2      	b.n	8008454 <_dtoa_r+0x36c>
 800846e:	07e1      	lsls	r1, r4, #31
 8008470:	d508      	bpl.n	8008484 <_dtoa_r+0x39c>
 8008472:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008476:	e9d6 2300 	ldrd	r2, r3, [r6]
 800847a:	f7f8 f837 	bl	80004ec <__aeabi_dmul>
 800847e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008482:	3701      	adds	r7, #1
 8008484:	1064      	asrs	r4, r4, #1
 8008486:	3608      	adds	r6, #8
 8008488:	e7e5      	b.n	8008456 <_dtoa_r+0x36e>
 800848a:	f000 80a5 	beq.w	80085d8 <_dtoa_r+0x4f0>
 800848e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008492:	f1ca 0400 	rsb	r4, sl, #0
 8008496:	4b7d      	ldr	r3, [pc, #500]	; (800868c <_dtoa_r+0x5a4>)
 8008498:	f004 020f 	and.w	r2, r4, #15
 800849c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a4:	f7f8 f822 	bl	80004ec <__aeabi_dmul>
 80084a8:	2702      	movs	r7, #2
 80084aa:	2300      	movs	r3, #0
 80084ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084b0:	4e77      	ldr	r6, [pc, #476]	; (8008690 <_dtoa_r+0x5a8>)
 80084b2:	1124      	asrs	r4, r4, #4
 80084b4:	2c00      	cmp	r4, #0
 80084b6:	f040 8084 	bne.w	80085c2 <_dtoa_r+0x4da>
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1d2      	bne.n	8008464 <_dtoa_r+0x37c>
 80084be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f000 808b 	beq.w	80085dc <_dtoa_r+0x4f4>
 80084c6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80084ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80084ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80084d2:	2200      	movs	r2, #0
 80084d4:	4b6f      	ldr	r3, [pc, #444]	; (8008694 <_dtoa_r+0x5ac>)
 80084d6:	f7f8 fa7b 	bl	80009d0 <__aeabi_dcmplt>
 80084da:	2800      	cmp	r0, #0
 80084dc:	d07e      	beq.n	80085dc <_dtoa_r+0x4f4>
 80084de:	9b08      	ldr	r3, [sp, #32]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d07b      	beq.n	80085dc <_dtoa_r+0x4f4>
 80084e4:	f1b9 0f00 	cmp.w	r9, #0
 80084e8:	dd38      	ble.n	800855c <_dtoa_r+0x474>
 80084ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80084ee:	2200      	movs	r2, #0
 80084f0:	4b69      	ldr	r3, [pc, #420]	; (8008698 <_dtoa_r+0x5b0>)
 80084f2:	f7f7 fffb 	bl	80004ec <__aeabi_dmul>
 80084f6:	464c      	mov	r4, r9
 80084f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084fc:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008500:	3701      	adds	r7, #1
 8008502:	4638      	mov	r0, r7
 8008504:	f7f7 ff88 	bl	8000418 <__aeabi_i2d>
 8008508:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800850c:	f7f7 ffee 	bl	80004ec <__aeabi_dmul>
 8008510:	2200      	movs	r2, #0
 8008512:	4b62      	ldr	r3, [pc, #392]	; (800869c <_dtoa_r+0x5b4>)
 8008514:	f7f7 fe34 	bl	8000180 <__adddf3>
 8008518:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800851c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008520:	9611      	str	r6, [sp, #68]	; 0x44
 8008522:	2c00      	cmp	r4, #0
 8008524:	d15d      	bne.n	80085e2 <_dtoa_r+0x4fa>
 8008526:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800852a:	2200      	movs	r2, #0
 800852c:	4b5c      	ldr	r3, [pc, #368]	; (80086a0 <_dtoa_r+0x5b8>)
 800852e:	f7f7 fe25 	bl	800017c <__aeabi_dsub>
 8008532:	4602      	mov	r2, r0
 8008534:	460b      	mov	r3, r1
 8008536:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800853a:	4633      	mov	r3, r6
 800853c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800853e:	f7f8 fa65 	bl	8000a0c <__aeabi_dcmpgt>
 8008542:	2800      	cmp	r0, #0
 8008544:	f040 829c 	bne.w	8008a80 <_dtoa_r+0x998>
 8008548:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800854c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800854e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008552:	f7f8 fa3d 	bl	80009d0 <__aeabi_dcmplt>
 8008556:	2800      	cmp	r0, #0
 8008558:	f040 8290 	bne.w	8008a7c <_dtoa_r+0x994>
 800855c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008560:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008564:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008566:	2b00      	cmp	r3, #0
 8008568:	f2c0 8152 	blt.w	8008810 <_dtoa_r+0x728>
 800856c:	f1ba 0f0e 	cmp.w	sl, #14
 8008570:	f300 814e 	bgt.w	8008810 <_dtoa_r+0x728>
 8008574:	4b45      	ldr	r3, [pc, #276]	; (800868c <_dtoa_r+0x5a4>)
 8008576:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800857a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800857e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008582:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008584:	2b00      	cmp	r3, #0
 8008586:	f280 80db 	bge.w	8008740 <_dtoa_r+0x658>
 800858a:	9b08      	ldr	r3, [sp, #32]
 800858c:	2b00      	cmp	r3, #0
 800858e:	f300 80d7 	bgt.w	8008740 <_dtoa_r+0x658>
 8008592:	f040 8272 	bne.w	8008a7a <_dtoa_r+0x992>
 8008596:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800859a:	2200      	movs	r2, #0
 800859c:	4b40      	ldr	r3, [pc, #256]	; (80086a0 <_dtoa_r+0x5b8>)
 800859e:	f7f7 ffa5 	bl	80004ec <__aeabi_dmul>
 80085a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085a6:	f7f8 fa27 	bl	80009f8 <__aeabi_dcmpge>
 80085aa:	9c08      	ldr	r4, [sp, #32]
 80085ac:	4626      	mov	r6, r4
 80085ae:	2800      	cmp	r0, #0
 80085b0:	f040 8248 	bne.w	8008a44 <_dtoa_r+0x95c>
 80085b4:	2331      	movs	r3, #49	; 0x31
 80085b6:	9f03      	ldr	r7, [sp, #12]
 80085b8:	f10a 0a01 	add.w	sl, sl, #1
 80085bc:	f807 3b01 	strb.w	r3, [r7], #1
 80085c0:	e244      	b.n	8008a4c <_dtoa_r+0x964>
 80085c2:	07e2      	lsls	r2, r4, #31
 80085c4:	d505      	bpl.n	80085d2 <_dtoa_r+0x4ea>
 80085c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80085ca:	f7f7 ff8f 	bl	80004ec <__aeabi_dmul>
 80085ce:	2301      	movs	r3, #1
 80085d0:	3701      	adds	r7, #1
 80085d2:	1064      	asrs	r4, r4, #1
 80085d4:	3608      	adds	r6, #8
 80085d6:	e76d      	b.n	80084b4 <_dtoa_r+0x3cc>
 80085d8:	2702      	movs	r7, #2
 80085da:	e770      	b.n	80084be <_dtoa_r+0x3d6>
 80085dc:	46d0      	mov	r8, sl
 80085de:	9c08      	ldr	r4, [sp, #32]
 80085e0:	e78f      	b.n	8008502 <_dtoa_r+0x41a>
 80085e2:	9903      	ldr	r1, [sp, #12]
 80085e4:	4b29      	ldr	r3, [pc, #164]	; (800868c <_dtoa_r+0x5a4>)
 80085e6:	4421      	add	r1, r4
 80085e8:	9112      	str	r1, [sp, #72]	; 0x48
 80085ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80085ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80085f0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80085f4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80085f8:	2900      	cmp	r1, #0
 80085fa:	d055      	beq.n	80086a8 <_dtoa_r+0x5c0>
 80085fc:	2000      	movs	r0, #0
 80085fe:	4929      	ldr	r1, [pc, #164]	; (80086a4 <_dtoa_r+0x5bc>)
 8008600:	f7f8 f89e 	bl	8000740 <__aeabi_ddiv>
 8008604:	463b      	mov	r3, r7
 8008606:	4632      	mov	r2, r6
 8008608:	f7f7 fdb8 	bl	800017c <__aeabi_dsub>
 800860c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008610:	9f03      	ldr	r7, [sp, #12]
 8008612:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008616:	f7f8 fa19 	bl	8000a4c <__aeabi_d2iz>
 800861a:	4604      	mov	r4, r0
 800861c:	f7f7 fefc 	bl	8000418 <__aeabi_i2d>
 8008620:	4602      	mov	r2, r0
 8008622:	460b      	mov	r3, r1
 8008624:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008628:	f7f7 fda8 	bl	800017c <__aeabi_dsub>
 800862c:	4602      	mov	r2, r0
 800862e:	460b      	mov	r3, r1
 8008630:	3430      	adds	r4, #48	; 0x30
 8008632:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008636:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800863a:	f807 4b01 	strb.w	r4, [r7], #1
 800863e:	f7f8 f9c7 	bl	80009d0 <__aeabi_dcmplt>
 8008642:	2800      	cmp	r0, #0
 8008644:	d174      	bne.n	8008730 <_dtoa_r+0x648>
 8008646:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800864a:	2000      	movs	r0, #0
 800864c:	4911      	ldr	r1, [pc, #68]	; (8008694 <_dtoa_r+0x5ac>)
 800864e:	f7f7 fd95 	bl	800017c <__aeabi_dsub>
 8008652:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008656:	f7f8 f9bb 	bl	80009d0 <__aeabi_dcmplt>
 800865a:	2800      	cmp	r0, #0
 800865c:	f040 80b7 	bne.w	80087ce <_dtoa_r+0x6e6>
 8008660:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008662:	429f      	cmp	r7, r3
 8008664:	f43f af7a 	beq.w	800855c <_dtoa_r+0x474>
 8008668:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800866c:	2200      	movs	r2, #0
 800866e:	4b0a      	ldr	r3, [pc, #40]	; (8008698 <_dtoa_r+0x5b0>)
 8008670:	f7f7 ff3c 	bl	80004ec <__aeabi_dmul>
 8008674:	2200      	movs	r2, #0
 8008676:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800867a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800867e:	4b06      	ldr	r3, [pc, #24]	; (8008698 <_dtoa_r+0x5b0>)
 8008680:	f7f7 ff34 	bl	80004ec <__aeabi_dmul>
 8008684:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008688:	e7c3      	b.n	8008612 <_dtoa_r+0x52a>
 800868a:	bf00      	nop
 800868c:	0800ade8 	.word	0x0800ade8
 8008690:	0800adc0 	.word	0x0800adc0
 8008694:	3ff00000 	.word	0x3ff00000
 8008698:	40240000 	.word	0x40240000
 800869c:	401c0000 	.word	0x401c0000
 80086a0:	40140000 	.word	0x40140000
 80086a4:	3fe00000 	.word	0x3fe00000
 80086a8:	4630      	mov	r0, r6
 80086aa:	4639      	mov	r1, r7
 80086ac:	f7f7 ff1e 	bl	80004ec <__aeabi_dmul>
 80086b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80086b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80086b6:	9c03      	ldr	r4, [sp, #12]
 80086b8:	9314      	str	r3, [sp, #80]	; 0x50
 80086ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086be:	f7f8 f9c5 	bl	8000a4c <__aeabi_d2iz>
 80086c2:	9015      	str	r0, [sp, #84]	; 0x54
 80086c4:	f7f7 fea8 	bl	8000418 <__aeabi_i2d>
 80086c8:	4602      	mov	r2, r0
 80086ca:	460b      	mov	r3, r1
 80086cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086d0:	f7f7 fd54 	bl	800017c <__aeabi_dsub>
 80086d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086d6:	4606      	mov	r6, r0
 80086d8:	3330      	adds	r3, #48	; 0x30
 80086da:	f804 3b01 	strb.w	r3, [r4], #1
 80086de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80086e0:	460f      	mov	r7, r1
 80086e2:	429c      	cmp	r4, r3
 80086e4:	f04f 0200 	mov.w	r2, #0
 80086e8:	d124      	bne.n	8008734 <_dtoa_r+0x64c>
 80086ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80086ee:	4bb0      	ldr	r3, [pc, #704]	; (80089b0 <_dtoa_r+0x8c8>)
 80086f0:	f7f7 fd46 	bl	8000180 <__adddf3>
 80086f4:	4602      	mov	r2, r0
 80086f6:	460b      	mov	r3, r1
 80086f8:	4630      	mov	r0, r6
 80086fa:	4639      	mov	r1, r7
 80086fc:	f7f8 f986 	bl	8000a0c <__aeabi_dcmpgt>
 8008700:	2800      	cmp	r0, #0
 8008702:	d163      	bne.n	80087cc <_dtoa_r+0x6e4>
 8008704:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008708:	2000      	movs	r0, #0
 800870a:	49a9      	ldr	r1, [pc, #676]	; (80089b0 <_dtoa_r+0x8c8>)
 800870c:	f7f7 fd36 	bl	800017c <__aeabi_dsub>
 8008710:	4602      	mov	r2, r0
 8008712:	460b      	mov	r3, r1
 8008714:	4630      	mov	r0, r6
 8008716:	4639      	mov	r1, r7
 8008718:	f7f8 f95a 	bl	80009d0 <__aeabi_dcmplt>
 800871c:	2800      	cmp	r0, #0
 800871e:	f43f af1d 	beq.w	800855c <_dtoa_r+0x474>
 8008722:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008724:	1e7b      	subs	r3, r7, #1
 8008726:	9314      	str	r3, [sp, #80]	; 0x50
 8008728:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800872c:	2b30      	cmp	r3, #48	; 0x30
 800872e:	d0f8      	beq.n	8008722 <_dtoa_r+0x63a>
 8008730:	46c2      	mov	sl, r8
 8008732:	e03b      	b.n	80087ac <_dtoa_r+0x6c4>
 8008734:	4b9f      	ldr	r3, [pc, #636]	; (80089b4 <_dtoa_r+0x8cc>)
 8008736:	f7f7 fed9 	bl	80004ec <__aeabi_dmul>
 800873a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800873e:	e7bc      	b.n	80086ba <_dtoa_r+0x5d2>
 8008740:	9f03      	ldr	r7, [sp, #12]
 8008742:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008746:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800874a:	4640      	mov	r0, r8
 800874c:	4649      	mov	r1, r9
 800874e:	f7f7 fff7 	bl	8000740 <__aeabi_ddiv>
 8008752:	f7f8 f97b 	bl	8000a4c <__aeabi_d2iz>
 8008756:	4604      	mov	r4, r0
 8008758:	f7f7 fe5e 	bl	8000418 <__aeabi_i2d>
 800875c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008760:	f7f7 fec4 	bl	80004ec <__aeabi_dmul>
 8008764:	4602      	mov	r2, r0
 8008766:	460b      	mov	r3, r1
 8008768:	4640      	mov	r0, r8
 800876a:	4649      	mov	r1, r9
 800876c:	f7f7 fd06 	bl	800017c <__aeabi_dsub>
 8008770:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008774:	f807 6b01 	strb.w	r6, [r7], #1
 8008778:	9e03      	ldr	r6, [sp, #12]
 800877a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800877e:	1bbe      	subs	r6, r7, r6
 8008780:	45b4      	cmp	ip, r6
 8008782:	4602      	mov	r2, r0
 8008784:	460b      	mov	r3, r1
 8008786:	d136      	bne.n	80087f6 <_dtoa_r+0x70e>
 8008788:	f7f7 fcfa 	bl	8000180 <__adddf3>
 800878c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008790:	4680      	mov	r8, r0
 8008792:	4689      	mov	r9, r1
 8008794:	f7f8 f93a 	bl	8000a0c <__aeabi_dcmpgt>
 8008798:	bb58      	cbnz	r0, 80087f2 <_dtoa_r+0x70a>
 800879a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800879e:	4640      	mov	r0, r8
 80087a0:	4649      	mov	r1, r9
 80087a2:	f7f8 f90b 	bl	80009bc <__aeabi_dcmpeq>
 80087a6:	b108      	cbz	r0, 80087ac <_dtoa_r+0x6c4>
 80087a8:	07e1      	lsls	r1, r4, #31
 80087aa:	d422      	bmi.n	80087f2 <_dtoa_r+0x70a>
 80087ac:	4628      	mov	r0, r5
 80087ae:	4659      	mov	r1, fp
 80087b0:	f000 fe7a 	bl	80094a8 <_Bfree>
 80087b4:	2300      	movs	r3, #0
 80087b6:	703b      	strb	r3, [r7, #0]
 80087b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80087ba:	f10a 0001 	add.w	r0, sl, #1
 80087be:	6018      	str	r0, [r3, #0]
 80087c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	f43f acde 	beq.w	8008184 <_dtoa_r+0x9c>
 80087c8:	601f      	str	r7, [r3, #0]
 80087ca:	e4db      	b.n	8008184 <_dtoa_r+0x9c>
 80087cc:	4627      	mov	r7, r4
 80087ce:	463b      	mov	r3, r7
 80087d0:	461f      	mov	r7, r3
 80087d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087d6:	2a39      	cmp	r2, #57	; 0x39
 80087d8:	d107      	bne.n	80087ea <_dtoa_r+0x702>
 80087da:	9a03      	ldr	r2, [sp, #12]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d1f7      	bne.n	80087d0 <_dtoa_r+0x6e8>
 80087e0:	2230      	movs	r2, #48	; 0x30
 80087e2:	9903      	ldr	r1, [sp, #12]
 80087e4:	f108 0801 	add.w	r8, r8, #1
 80087e8:	700a      	strb	r2, [r1, #0]
 80087ea:	781a      	ldrb	r2, [r3, #0]
 80087ec:	3201      	adds	r2, #1
 80087ee:	701a      	strb	r2, [r3, #0]
 80087f0:	e79e      	b.n	8008730 <_dtoa_r+0x648>
 80087f2:	46d0      	mov	r8, sl
 80087f4:	e7eb      	b.n	80087ce <_dtoa_r+0x6e6>
 80087f6:	2200      	movs	r2, #0
 80087f8:	4b6e      	ldr	r3, [pc, #440]	; (80089b4 <_dtoa_r+0x8cc>)
 80087fa:	f7f7 fe77 	bl	80004ec <__aeabi_dmul>
 80087fe:	2200      	movs	r2, #0
 8008800:	2300      	movs	r3, #0
 8008802:	4680      	mov	r8, r0
 8008804:	4689      	mov	r9, r1
 8008806:	f7f8 f8d9 	bl	80009bc <__aeabi_dcmpeq>
 800880a:	2800      	cmp	r0, #0
 800880c:	d09b      	beq.n	8008746 <_dtoa_r+0x65e>
 800880e:	e7cd      	b.n	80087ac <_dtoa_r+0x6c4>
 8008810:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008812:	2a00      	cmp	r2, #0
 8008814:	f000 80d0 	beq.w	80089b8 <_dtoa_r+0x8d0>
 8008818:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800881a:	2a01      	cmp	r2, #1
 800881c:	f300 80ae 	bgt.w	800897c <_dtoa_r+0x894>
 8008820:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008822:	2a00      	cmp	r2, #0
 8008824:	f000 80a6 	beq.w	8008974 <_dtoa_r+0x88c>
 8008828:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800882c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800882e:	9f06      	ldr	r7, [sp, #24]
 8008830:	9a06      	ldr	r2, [sp, #24]
 8008832:	2101      	movs	r1, #1
 8008834:	441a      	add	r2, r3
 8008836:	9206      	str	r2, [sp, #24]
 8008838:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800883a:	4628      	mov	r0, r5
 800883c:	441a      	add	r2, r3
 800883e:	9209      	str	r2, [sp, #36]	; 0x24
 8008840:	f000 ff32 	bl	80096a8 <__i2b>
 8008844:	4606      	mov	r6, r0
 8008846:	2f00      	cmp	r7, #0
 8008848:	dd0c      	ble.n	8008864 <_dtoa_r+0x77c>
 800884a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800884c:	2b00      	cmp	r3, #0
 800884e:	dd09      	ble.n	8008864 <_dtoa_r+0x77c>
 8008850:	42bb      	cmp	r3, r7
 8008852:	bfa8      	it	ge
 8008854:	463b      	movge	r3, r7
 8008856:	9a06      	ldr	r2, [sp, #24]
 8008858:	1aff      	subs	r7, r7, r3
 800885a:	1ad2      	subs	r2, r2, r3
 800885c:	9206      	str	r2, [sp, #24]
 800885e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008860:	1ad3      	subs	r3, r2, r3
 8008862:	9309      	str	r3, [sp, #36]	; 0x24
 8008864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008866:	b1f3      	cbz	r3, 80088a6 <_dtoa_r+0x7be>
 8008868:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800886a:	2b00      	cmp	r3, #0
 800886c:	f000 80a8 	beq.w	80089c0 <_dtoa_r+0x8d8>
 8008870:	2c00      	cmp	r4, #0
 8008872:	dd10      	ble.n	8008896 <_dtoa_r+0x7ae>
 8008874:	4631      	mov	r1, r6
 8008876:	4622      	mov	r2, r4
 8008878:	4628      	mov	r0, r5
 800887a:	f000 ffd3 	bl	8009824 <__pow5mult>
 800887e:	465a      	mov	r2, fp
 8008880:	4601      	mov	r1, r0
 8008882:	4606      	mov	r6, r0
 8008884:	4628      	mov	r0, r5
 8008886:	f000 ff25 	bl	80096d4 <__multiply>
 800888a:	4680      	mov	r8, r0
 800888c:	4659      	mov	r1, fp
 800888e:	4628      	mov	r0, r5
 8008890:	f000 fe0a 	bl	80094a8 <_Bfree>
 8008894:	46c3      	mov	fp, r8
 8008896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008898:	1b1a      	subs	r2, r3, r4
 800889a:	d004      	beq.n	80088a6 <_dtoa_r+0x7be>
 800889c:	4659      	mov	r1, fp
 800889e:	4628      	mov	r0, r5
 80088a0:	f000 ffc0 	bl	8009824 <__pow5mult>
 80088a4:	4683      	mov	fp, r0
 80088a6:	2101      	movs	r1, #1
 80088a8:	4628      	mov	r0, r5
 80088aa:	f000 fefd 	bl	80096a8 <__i2b>
 80088ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088b0:	4604      	mov	r4, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f340 8086 	ble.w	80089c4 <_dtoa_r+0x8dc>
 80088b8:	461a      	mov	r2, r3
 80088ba:	4601      	mov	r1, r0
 80088bc:	4628      	mov	r0, r5
 80088be:	f000 ffb1 	bl	8009824 <__pow5mult>
 80088c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088c4:	4604      	mov	r4, r0
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	dd7f      	ble.n	80089ca <_dtoa_r+0x8e2>
 80088ca:	f04f 0800 	mov.w	r8, #0
 80088ce:	6923      	ldr	r3, [r4, #16]
 80088d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80088d4:	6918      	ldr	r0, [r3, #16]
 80088d6:	f000 fe99 	bl	800960c <__hi0bits>
 80088da:	f1c0 0020 	rsb	r0, r0, #32
 80088de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088e0:	4418      	add	r0, r3
 80088e2:	f010 001f 	ands.w	r0, r0, #31
 80088e6:	f000 8092 	beq.w	8008a0e <_dtoa_r+0x926>
 80088ea:	f1c0 0320 	rsb	r3, r0, #32
 80088ee:	2b04      	cmp	r3, #4
 80088f0:	f340 808a 	ble.w	8008a08 <_dtoa_r+0x920>
 80088f4:	f1c0 001c 	rsb	r0, r0, #28
 80088f8:	9b06      	ldr	r3, [sp, #24]
 80088fa:	4407      	add	r7, r0
 80088fc:	4403      	add	r3, r0
 80088fe:	9306      	str	r3, [sp, #24]
 8008900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008902:	4403      	add	r3, r0
 8008904:	9309      	str	r3, [sp, #36]	; 0x24
 8008906:	9b06      	ldr	r3, [sp, #24]
 8008908:	2b00      	cmp	r3, #0
 800890a:	dd05      	ble.n	8008918 <_dtoa_r+0x830>
 800890c:	4659      	mov	r1, fp
 800890e:	461a      	mov	r2, r3
 8008910:	4628      	mov	r0, r5
 8008912:	f000 ffe1 	bl	80098d8 <__lshift>
 8008916:	4683      	mov	fp, r0
 8008918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800891a:	2b00      	cmp	r3, #0
 800891c:	dd05      	ble.n	800892a <_dtoa_r+0x842>
 800891e:	4621      	mov	r1, r4
 8008920:	461a      	mov	r2, r3
 8008922:	4628      	mov	r0, r5
 8008924:	f000 ffd8 	bl	80098d8 <__lshift>
 8008928:	4604      	mov	r4, r0
 800892a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800892c:	2b00      	cmp	r3, #0
 800892e:	d070      	beq.n	8008a12 <_dtoa_r+0x92a>
 8008930:	4621      	mov	r1, r4
 8008932:	4658      	mov	r0, fp
 8008934:	f001 f840 	bl	80099b8 <__mcmp>
 8008938:	2800      	cmp	r0, #0
 800893a:	da6a      	bge.n	8008a12 <_dtoa_r+0x92a>
 800893c:	2300      	movs	r3, #0
 800893e:	4659      	mov	r1, fp
 8008940:	220a      	movs	r2, #10
 8008942:	4628      	mov	r0, r5
 8008944:	f000 fdd2 	bl	80094ec <__multadd>
 8008948:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800894a:	4683      	mov	fp, r0
 800894c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008950:	2b00      	cmp	r3, #0
 8008952:	f000 8194 	beq.w	8008c7e <_dtoa_r+0xb96>
 8008956:	4631      	mov	r1, r6
 8008958:	2300      	movs	r3, #0
 800895a:	220a      	movs	r2, #10
 800895c:	4628      	mov	r0, r5
 800895e:	f000 fdc5 	bl	80094ec <__multadd>
 8008962:	f1b9 0f00 	cmp.w	r9, #0
 8008966:	4606      	mov	r6, r0
 8008968:	f300 8093 	bgt.w	8008a92 <_dtoa_r+0x9aa>
 800896c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800896e:	2b02      	cmp	r3, #2
 8008970:	dc57      	bgt.n	8008a22 <_dtoa_r+0x93a>
 8008972:	e08e      	b.n	8008a92 <_dtoa_r+0x9aa>
 8008974:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008976:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800897a:	e757      	b.n	800882c <_dtoa_r+0x744>
 800897c:	9b08      	ldr	r3, [sp, #32]
 800897e:	1e5c      	subs	r4, r3, #1
 8008980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008982:	42a3      	cmp	r3, r4
 8008984:	bfb7      	itett	lt
 8008986:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008988:	1b1c      	subge	r4, r3, r4
 800898a:	1ae2      	sublt	r2, r4, r3
 800898c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800898e:	bfbe      	ittt	lt
 8008990:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008992:	189b      	addlt	r3, r3, r2
 8008994:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008996:	9b08      	ldr	r3, [sp, #32]
 8008998:	bfb8      	it	lt
 800899a:	2400      	movlt	r4, #0
 800899c:	2b00      	cmp	r3, #0
 800899e:	bfbb      	ittet	lt
 80089a0:	9b06      	ldrlt	r3, [sp, #24]
 80089a2:	9a08      	ldrlt	r2, [sp, #32]
 80089a4:	9f06      	ldrge	r7, [sp, #24]
 80089a6:	1a9f      	sublt	r7, r3, r2
 80089a8:	bfac      	ite	ge
 80089aa:	9b08      	ldrge	r3, [sp, #32]
 80089ac:	2300      	movlt	r3, #0
 80089ae:	e73f      	b.n	8008830 <_dtoa_r+0x748>
 80089b0:	3fe00000 	.word	0x3fe00000
 80089b4:	40240000 	.word	0x40240000
 80089b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80089ba:	9f06      	ldr	r7, [sp, #24]
 80089bc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80089be:	e742      	b.n	8008846 <_dtoa_r+0x75e>
 80089c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089c2:	e76b      	b.n	800889c <_dtoa_r+0x7b4>
 80089c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	dc19      	bgt.n	80089fe <_dtoa_r+0x916>
 80089ca:	9b04      	ldr	r3, [sp, #16]
 80089cc:	b9bb      	cbnz	r3, 80089fe <_dtoa_r+0x916>
 80089ce:	9b05      	ldr	r3, [sp, #20]
 80089d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089d4:	b99b      	cbnz	r3, 80089fe <_dtoa_r+0x916>
 80089d6:	9b05      	ldr	r3, [sp, #20]
 80089d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089dc:	0d1b      	lsrs	r3, r3, #20
 80089de:	051b      	lsls	r3, r3, #20
 80089e0:	b183      	cbz	r3, 8008a04 <_dtoa_r+0x91c>
 80089e2:	f04f 0801 	mov.w	r8, #1
 80089e6:	9b06      	ldr	r3, [sp, #24]
 80089e8:	3301      	adds	r3, #1
 80089ea:	9306      	str	r3, [sp, #24]
 80089ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ee:	3301      	adds	r3, #1
 80089f0:	9309      	str	r3, [sp, #36]	; 0x24
 80089f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f47f af6a 	bne.w	80088ce <_dtoa_r+0x7e6>
 80089fa:	2001      	movs	r0, #1
 80089fc:	e76f      	b.n	80088de <_dtoa_r+0x7f6>
 80089fe:	f04f 0800 	mov.w	r8, #0
 8008a02:	e7f6      	b.n	80089f2 <_dtoa_r+0x90a>
 8008a04:	4698      	mov	r8, r3
 8008a06:	e7f4      	b.n	80089f2 <_dtoa_r+0x90a>
 8008a08:	f43f af7d 	beq.w	8008906 <_dtoa_r+0x81e>
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	301c      	adds	r0, #28
 8008a10:	e772      	b.n	80088f8 <_dtoa_r+0x810>
 8008a12:	9b08      	ldr	r3, [sp, #32]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	dc36      	bgt.n	8008a86 <_dtoa_r+0x99e>
 8008a18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	dd33      	ble.n	8008a86 <_dtoa_r+0x99e>
 8008a1e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a22:	f1b9 0f00 	cmp.w	r9, #0
 8008a26:	d10d      	bne.n	8008a44 <_dtoa_r+0x95c>
 8008a28:	4621      	mov	r1, r4
 8008a2a:	464b      	mov	r3, r9
 8008a2c:	2205      	movs	r2, #5
 8008a2e:	4628      	mov	r0, r5
 8008a30:	f000 fd5c 	bl	80094ec <__multadd>
 8008a34:	4601      	mov	r1, r0
 8008a36:	4604      	mov	r4, r0
 8008a38:	4658      	mov	r0, fp
 8008a3a:	f000 ffbd 	bl	80099b8 <__mcmp>
 8008a3e:	2800      	cmp	r0, #0
 8008a40:	f73f adb8 	bgt.w	80085b4 <_dtoa_r+0x4cc>
 8008a44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008a46:	9f03      	ldr	r7, [sp, #12]
 8008a48:	ea6f 0a03 	mvn.w	sl, r3
 8008a4c:	f04f 0800 	mov.w	r8, #0
 8008a50:	4621      	mov	r1, r4
 8008a52:	4628      	mov	r0, r5
 8008a54:	f000 fd28 	bl	80094a8 <_Bfree>
 8008a58:	2e00      	cmp	r6, #0
 8008a5a:	f43f aea7 	beq.w	80087ac <_dtoa_r+0x6c4>
 8008a5e:	f1b8 0f00 	cmp.w	r8, #0
 8008a62:	d005      	beq.n	8008a70 <_dtoa_r+0x988>
 8008a64:	45b0      	cmp	r8, r6
 8008a66:	d003      	beq.n	8008a70 <_dtoa_r+0x988>
 8008a68:	4641      	mov	r1, r8
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	f000 fd1c 	bl	80094a8 <_Bfree>
 8008a70:	4631      	mov	r1, r6
 8008a72:	4628      	mov	r0, r5
 8008a74:	f000 fd18 	bl	80094a8 <_Bfree>
 8008a78:	e698      	b.n	80087ac <_dtoa_r+0x6c4>
 8008a7a:	2400      	movs	r4, #0
 8008a7c:	4626      	mov	r6, r4
 8008a7e:	e7e1      	b.n	8008a44 <_dtoa_r+0x95c>
 8008a80:	46c2      	mov	sl, r8
 8008a82:	4626      	mov	r6, r4
 8008a84:	e596      	b.n	80085b4 <_dtoa_r+0x4cc>
 8008a86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f000 80fd 	beq.w	8008c8c <_dtoa_r+0xba4>
 8008a92:	2f00      	cmp	r7, #0
 8008a94:	dd05      	ble.n	8008aa2 <_dtoa_r+0x9ba>
 8008a96:	4631      	mov	r1, r6
 8008a98:	463a      	mov	r2, r7
 8008a9a:	4628      	mov	r0, r5
 8008a9c:	f000 ff1c 	bl	80098d8 <__lshift>
 8008aa0:	4606      	mov	r6, r0
 8008aa2:	f1b8 0f00 	cmp.w	r8, #0
 8008aa6:	d05c      	beq.n	8008b62 <_dtoa_r+0xa7a>
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	6871      	ldr	r1, [r6, #4]
 8008aac:	f000 fcbc 	bl	8009428 <_Balloc>
 8008ab0:	4607      	mov	r7, r0
 8008ab2:	b928      	cbnz	r0, 8008ac0 <_dtoa_r+0x9d8>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008aba:	4b7f      	ldr	r3, [pc, #508]	; (8008cb8 <_dtoa_r+0xbd0>)
 8008abc:	f7ff bb28 	b.w	8008110 <_dtoa_r+0x28>
 8008ac0:	6932      	ldr	r2, [r6, #16]
 8008ac2:	f106 010c 	add.w	r1, r6, #12
 8008ac6:	3202      	adds	r2, #2
 8008ac8:	0092      	lsls	r2, r2, #2
 8008aca:	300c      	adds	r0, #12
 8008acc:	f000 fc9e 	bl	800940c <memcpy>
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	4639      	mov	r1, r7
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	f000 feff 	bl	80098d8 <__lshift>
 8008ada:	46b0      	mov	r8, r6
 8008adc:	4606      	mov	r6, r0
 8008ade:	9b03      	ldr	r3, [sp, #12]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	9308      	str	r3, [sp, #32]
 8008ae4:	9b03      	ldr	r3, [sp, #12]
 8008ae6:	444b      	add	r3, r9
 8008ae8:	930a      	str	r3, [sp, #40]	; 0x28
 8008aea:	9b04      	ldr	r3, [sp, #16]
 8008aec:	f003 0301 	and.w	r3, r3, #1
 8008af0:	9309      	str	r3, [sp, #36]	; 0x24
 8008af2:	9b08      	ldr	r3, [sp, #32]
 8008af4:	4621      	mov	r1, r4
 8008af6:	3b01      	subs	r3, #1
 8008af8:	4658      	mov	r0, fp
 8008afa:	9304      	str	r3, [sp, #16]
 8008afc:	f7ff fa66 	bl	8007fcc <quorem>
 8008b00:	4603      	mov	r3, r0
 8008b02:	4641      	mov	r1, r8
 8008b04:	3330      	adds	r3, #48	; 0x30
 8008b06:	9006      	str	r0, [sp, #24]
 8008b08:	4658      	mov	r0, fp
 8008b0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b0c:	f000 ff54 	bl	80099b8 <__mcmp>
 8008b10:	4632      	mov	r2, r6
 8008b12:	4681      	mov	r9, r0
 8008b14:	4621      	mov	r1, r4
 8008b16:	4628      	mov	r0, r5
 8008b18:	f000 ff6a 	bl	80099f0 <__mdiff>
 8008b1c:	68c2      	ldr	r2, [r0, #12]
 8008b1e:	4607      	mov	r7, r0
 8008b20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b22:	bb02      	cbnz	r2, 8008b66 <_dtoa_r+0xa7e>
 8008b24:	4601      	mov	r1, r0
 8008b26:	4658      	mov	r0, fp
 8008b28:	f000 ff46 	bl	80099b8 <__mcmp>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b30:	4639      	mov	r1, r7
 8008b32:	4628      	mov	r0, r5
 8008b34:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008b38:	f000 fcb6 	bl	80094a8 <_Bfree>
 8008b3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b40:	9f08      	ldr	r7, [sp, #32]
 8008b42:	ea43 0102 	orr.w	r1, r3, r2
 8008b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b48:	430b      	orrs	r3, r1
 8008b4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b4c:	d10d      	bne.n	8008b6a <_dtoa_r+0xa82>
 8008b4e:	2b39      	cmp	r3, #57	; 0x39
 8008b50:	d029      	beq.n	8008ba6 <_dtoa_r+0xabe>
 8008b52:	f1b9 0f00 	cmp.w	r9, #0
 8008b56:	dd01      	ble.n	8008b5c <_dtoa_r+0xa74>
 8008b58:	9b06      	ldr	r3, [sp, #24]
 8008b5a:	3331      	adds	r3, #49	; 0x31
 8008b5c:	9a04      	ldr	r2, [sp, #16]
 8008b5e:	7013      	strb	r3, [r2, #0]
 8008b60:	e776      	b.n	8008a50 <_dtoa_r+0x968>
 8008b62:	4630      	mov	r0, r6
 8008b64:	e7b9      	b.n	8008ada <_dtoa_r+0x9f2>
 8008b66:	2201      	movs	r2, #1
 8008b68:	e7e2      	b.n	8008b30 <_dtoa_r+0xa48>
 8008b6a:	f1b9 0f00 	cmp.w	r9, #0
 8008b6e:	db06      	blt.n	8008b7e <_dtoa_r+0xa96>
 8008b70:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008b72:	ea41 0909 	orr.w	r9, r1, r9
 8008b76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b78:	ea59 0101 	orrs.w	r1, r9, r1
 8008b7c:	d120      	bne.n	8008bc0 <_dtoa_r+0xad8>
 8008b7e:	2a00      	cmp	r2, #0
 8008b80:	ddec      	ble.n	8008b5c <_dtoa_r+0xa74>
 8008b82:	4659      	mov	r1, fp
 8008b84:	2201      	movs	r2, #1
 8008b86:	4628      	mov	r0, r5
 8008b88:	9308      	str	r3, [sp, #32]
 8008b8a:	f000 fea5 	bl	80098d8 <__lshift>
 8008b8e:	4621      	mov	r1, r4
 8008b90:	4683      	mov	fp, r0
 8008b92:	f000 ff11 	bl	80099b8 <__mcmp>
 8008b96:	2800      	cmp	r0, #0
 8008b98:	9b08      	ldr	r3, [sp, #32]
 8008b9a:	dc02      	bgt.n	8008ba2 <_dtoa_r+0xaba>
 8008b9c:	d1de      	bne.n	8008b5c <_dtoa_r+0xa74>
 8008b9e:	07da      	lsls	r2, r3, #31
 8008ba0:	d5dc      	bpl.n	8008b5c <_dtoa_r+0xa74>
 8008ba2:	2b39      	cmp	r3, #57	; 0x39
 8008ba4:	d1d8      	bne.n	8008b58 <_dtoa_r+0xa70>
 8008ba6:	2339      	movs	r3, #57	; 0x39
 8008ba8:	9a04      	ldr	r2, [sp, #16]
 8008baa:	7013      	strb	r3, [r2, #0]
 8008bac:	463b      	mov	r3, r7
 8008bae:	461f      	mov	r7, r3
 8008bb0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	2a39      	cmp	r2, #57	; 0x39
 8008bb8:	d050      	beq.n	8008c5c <_dtoa_r+0xb74>
 8008bba:	3201      	adds	r2, #1
 8008bbc:	701a      	strb	r2, [r3, #0]
 8008bbe:	e747      	b.n	8008a50 <_dtoa_r+0x968>
 8008bc0:	2a00      	cmp	r2, #0
 8008bc2:	dd03      	ble.n	8008bcc <_dtoa_r+0xae4>
 8008bc4:	2b39      	cmp	r3, #57	; 0x39
 8008bc6:	d0ee      	beq.n	8008ba6 <_dtoa_r+0xabe>
 8008bc8:	3301      	adds	r3, #1
 8008bca:	e7c7      	b.n	8008b5c <_dtoa_r+0xa74>
 8008bcc:	9a08      	ldr	r2, [sp, #32]
 8008bce:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008bd0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008bd4:	428a      	cmp	r2, r1
 8008bd6:	d02a      	beq.n	8008c2e <_dtoa_r+0xb46>
 8008bd8:	4659      	mov	r1, fp
 8008bda:	2300      	movs	r3, #0
 8008bdc:	220a      	movs	r2, #10
 8008bde:	4628      	mov	r0, r5
 8008be0:	f000 fc84 	bl	80094ec <__multadd>
 8008be4:	45b0      	cmp	r8, r6
 8008be6:	4683      	mov	fp, r0
 8008be8:	f04f 0300 	mov.w	r3, #0
 8008bec:	f04f 020a 	mov.w	r2, #10
 8008bf0:	4641      	mov	r1, r8
 8008bf2:	4628      	mov	r0, r5
 8008bf4:	d107      	bne.n	8008c06 <_dtoa_r+0xb1e>
 8008bf6:	f000 fc79 	bl	80094ec <__multadd>
 8008bfa:	4680      	mov	r8, r0
 8008bfc:	4606      	mov	r6, r0
 8008bfe:	9b08      	ldr	r3, [sp, #32]
 8008c00:	3301      	adds	r3, #1
 8008c02:	9308      	str	r3, [sp, #32]
 8008c04:	e775      	b.n	8008af2 <_dtoa_r+0xa0a>
 8008c06:	f000 fc71 	bl	80094ec <__multadd>
 8008c0a:	4631      	mov	r1, r6
 8008c0c:	4680      	mov	r8, r0
 8008c0e:	2300      	movs	r3, #0
 8008c10:	220a      	movs	r2, #10
 8008c12:	4628      	mov	r0, r5
 8008c14:	f000 fc6a 	bl	80094ec <__multadd>
 8008c18:	4606      	mov	r6, r0
 8008c1a:	e7f0      	b.n	8008bfe <_dtoa_r+0xb16>
 8008c1c:	f1b9 0f00 	cmp.w	r9, #0
 8008c20:	bfcc      	ite	gt
 8008c22:	464f      	movgt	r7, r9
 8008c24:	2701      	movle	r7, #1
 8008c26:	f04f 0800 	mov.w	r8, #0
 8008c2a:	9a03      	ldr	r2, [sp, #12]
 8008c2c:	4417      	add	r7, r2
 8008c2e:	4659      	mov	r1, fp
 8008c30:	2201      	movs	r2, #1
 8008c32:	4628      	mov	r0, r5
 8008c34:	9308      	str	r3, [sp, #32]
 8008c36:	f000 fe4f 	bl	80098d8 <__lshift>
 8008c3a:	4621      	mov	r1, r4
 8008c3c:	4683      	mov	fp, r0
 8008c3e:	f000 febb 	bl	80099b8 <__mcmp>
 8008c42:	2800      	cmp	r0, #0
 8008c44:	dcb2      	bgt.n	8008bac <_dtoa_r+0xac4>
 8008c46:	d102      	bne.n	8008c4e <_dtoa_r+0xb66>
 8008c48:	9b08      	ldr	r3, [sp, #32]
 8008c4a:	07db      	lsls	r3, r3, #31
 8008c4c:	d4ae      	bmi.n	8008bac <_dtoa_r+0xac4>
 8008c4e:	463b      	mov	r3, r7
 8008c50:	461f      	mov	r7, r3
 8008c52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c56:	2a30      	cmp	r2, #48	; 0x30
 8008c58:	d0fa      	beq.n	8008c50 <_dtoa_r+0xb68>
 8008c5a:	e6f9      	b.n	8008a50 <_dtoa_r+0x968>
 8008c5c:	9a03      	ldr	r2, [sp, #12]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d1a5      	bne.n	8008bae <_dtoa_r+0xac6>
 8008c62:	2331      	movs	r3, #49	; 0x31
 8008c64:	f10a 0a01 	add.w	sl, sl, #1
 8008c68:	e779      	b.n	8008b5e <_dtoa_r+0xa76>
 8008c6a:	4b14      	ldr	r3, [pc, #80]	; (8008cbc <_dtoa_r+0xbd4>)
 8008c6c:	f7ff baa8 	b.w	80081c0 <_dtoa_r+0xd8>
 8008c70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f47f aa81 	bne.w	800817a <_dtoa_r+0x92>
 8008c78:	4b11      	ldr	r3, [pc, #68]	; (8008cc0 <_dtoa_r+0xbd8>)
 8008c7a:	f7ff baa1 	b.w	80081c0 <_dtoa_r+0xd8>
 8008c7e:	f1b9 0f00 	cmp.w	r9, #0
 8008c82:	dc03      	bgt.n	8008c8c <_dtoa_r+0xba4>
 8008c84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	f73f aecb 	bgt.w	8008a22 <_dtoa_r+0x93a>
 8008c8c:	9f03      	ldr	r7, [sp, #12]
 8008c8e:	4621      	mov	r1, r4
 8008c90:	4658      	mov	r0, fp
 8008c92:	f7ff f99b 	bl	8007fcc <quorem>
 8008c96:	9a03      	ldr	r2, [sp, #12]
 8008c98:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008c9c:	f807 3b01 	strb.w	r3, [r7], #1
 8008ca0:	1aba      	subs	r2, r7, r2
 8008ca2:	4591      	cmp	r9, r2
 8008ca4:	ddba      	ble.n	8008c1c <_dtoa_r+0xb34>
 8008ca6:	4659      	mov	r1, fp
 8008ca8:	2300      	movs	r3, #0
 8008caa:	220a      	movs	r2, #10
 8008cac:	4628      	mov	r0, r5
 8008cae:	f000 fc1d 	bl	80094ec <__multadd>
 8008cb2:	4683      	mov	fp, r0
 8008cb4:	e7eb      	b.n	8008c8e <_dtoa_r+0xba6>
 8008cb6:	bf00      	nop
 8008cb8:	0800acd8 	.word	0x0800acd8
 8008cbc:	0800ab48 	.word	0x0800ab48
 8008cc0:	0800ac70 	.word	0x0800ac70

08008cc4 <fiprintf>:
 8008cc4:	b40e      	push	{r1, r2, r3}
 8008cc6:	b503      	push	{r0, r1, lr}
 8008cc8:	4601      	mov	r1, r0
 8008cca:	ab03      	add	r3, sp, #12
 8008ccc:	4805      	ldr	r0, [pc, #20]	; (8008ce4 <fiprintf+0x20>)
 8008cce:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cd2:	6800      	ldr	r0, [r0, #0]
 8008cd4:	9301      	str	r3, [sp, #4]
 8008cd6:	f001 f977 	bl	8009fc8 <_vfiprintf_r>
 8008cda:	b002      	add	sp, #8
 8008cdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ce0:	b003      	add	sp, #12
 8008ce2:	4770      	bx	lr
 8008ce4:	20000018 	.word	0x20000018

08008ce8 <rshift>:
 8008ce8:	6903      	ldr	r3, [r0, #16]
 8008cea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008cee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008cf2:	f100 0414 	add.w	r4, r0, #20
 8008cf6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008cfa:	dd46      	ble.n	8008d8a <rshift+0xa2>
 8008cfc:	f011 011f 	ands.w	r1, r1, #31
 8008d00:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008d04:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008d08:	d10c      	bne.n	8008d24 <rshift+0x3c>
 8008d0a:	4629      	mov	r1, r5
 8008d0c:	f100 0710 	add.w	r7, r0, #16
 8008d10:	42b1      	cmp	r1, r6
 8008d12:	d335      	bcc.n	8008d80 <rshift+0x98>
 8008d14:	1a9b      	subs	r3, r3, r2
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	1eea      	subs	r2, r5, #3
 8008d1a:	4296      	cmp	r6, r2
 8008d1c:	bf38      	it	cc
 8008d1e:	2300      	movcc	r3, #0
 8008d20:	4423      	add	r3, r4
 8008d22:	e015      	b.n	8008d50 <rshift+0x68>
 8008d24:	46a1      	mov	r9, r4
 8008d26:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008d2a:	f1c1 0820 	rsb	r8, r1, #32
 8008d2e:	40cf      	lsrs	r7, r1
 8008d30:	f105 0e04 	add.w	lr, r5, #4
 8008d34:	4576      	cmp	r6, lr
 8008d36:	46f4      	mov	ip, lr
 8008d38:	d816      	bhi.n	8008d68 <rshift+0x80>
 8008d3a:	1a9a      	subs	r2, r3, r2
 8008d3c:	0092      	lsls	r2, r2, #2
 8008d3e:	3a04      	subs	r2, #4
 8008d40:	3501      	adds	r5, #1
 8008d42:	42ae      	cmp	r6, r5
 8008d44:	bf38      	it	cc
 8008d46:	2200      	movcc	r2, #0
 8008d48:	18a3      	adds	r3, r4, r2
 8008d4a:	50a7      	str	r7, [r4, r2]
 8008d4c:	b107      	cbz	r7, 8008d50 <rshift+0x68>
 8008d4e:	3304      	adds	r3, #4
 8008d50:	42a3      	cmp	r3, r4
 8008d52:	eba3 0204 	sub.w	r2, r3, r4
 8008d56:	bf08      	it	eq
 8008d58:	2300      	moveq	r3, #0
 8008d5a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008d5e:	6102      	str	r2, [r0, #16]
 8008d60:	bf08      	it	eq
 8008d62:	6143      	streq	r3, [r0, #20]
 8008d64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d68:	f8dc c000 	ldr.w	ip, [ip]
 8008d6c:	fa0c fc08 	lsl.w	ip, ip, r8
 8008d70:	ea4c 0707 	orr.w	r7, ip, r7
 8008d74:	f849 7b04 	str.w	r7, [r9], #4
 8008d78:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008d7c:	40cf      	lsrs	r7, r1
 8008d7e:	e7d9      	b.n	8008d34 <rshift+0x4c>
 8008d80:	f851 cb04 	ldr.w	ip, [r1], #4
 8008d84:	f847 cf04 	str.w	ip, [r7, #4]!
 8008d88:	e7c2      	b.n	8008d10 <rshift+0x28>
 8008d8a:	4623      	mov	r3, r4
 8008d8c:	e7e0      	b.n	8008d50 <rshift+0x68>

08008d8e <__hexdig_fun>:
 8008d8e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008d92:	2b09      	cmp	r3, #9
 8008d94:	d802      	bhi.n	8008d9c <__hexdig_fun+0xe>
 8008d96:	3820      	subs	r0, #32
 8008d98:	b2c0      	uxtb	r0, r0
 8008d9a:	4770      	bx	lr
 8008d9c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008da0:	2b05      	cmp	r3, #5
 8008da2:	d801      	bhi.n	8008da8 <__hexdig_fun+0x1a>
 8008da4:	3847      	subs	r0, #71	; 0x47
 8008da6:	e7f7      	b.n	8008d98 <__hexdig_fun+0xa>
 8008da8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008dac:	2b05      	cmp	r3, #5
 8008dae:	d801      	bhi.n	8008db4 <__hexdig_fun+0x26>
 8008db0:	3827      	subs	r0, #39	; 0x27
 8008db2:	e7f1      	b.n	8008d98 <__hexdig_fun+0xa>
 8008db4:	2000      	movs	r0, #0
 8008db6:	4770      	bx	lr

08008db8 <__gethex>:
 8008db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dbc:	b08b      	sub	sp, #44	; 0x2c
 8008dbe:	9305      	str	r3, [sp, #20]
 8008dc0:	4bb2      	ldr	r3, [pc, #712]	; (800908c <__gethex+0x2d4>)
 8008dc2:	9002      	str	r0, [sp, #8]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	468b      	mov	fp, r1
 8008dc8:	4618      	mov	r0, r3
 8008dca:	4690      	mov	r8, r2
 8008dcc:	9303      	str	r3, [sp, #12]
 8008dce:	f7f7 f9c9 	bl	8000164 <strlen>
 8008dd2:	4682      	mov	sl, r0
 8008dd4:	9b03      	ldr	r3, [sp, #12]
 8008dd6:	f8db 2000 	ldr.w	r2, [fp]
 8008dda:	4403      	add	r3, r0
 8008ddc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008de0:	9306      	str	r3, [sp, #24]
 8008de2:	1c93      	adds	r3, r2, #2
 8008de4:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008de8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008dec:	32fe      	adds	r2, #254	; 0xfe
 8008dee:	18d1      	adds	r1, r2, r3
 8008df0:	461f      	mov	r7, r3
 8008df2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008df6:	9101      	str	r1, [sp, #4]
 8008df8:	2830      	cmp	r0, #48	; 0x30
 8008dfa:	d0f8      	beq.n	8008dee <__gethex+0x36>
 8008dfc:	f7ff ffc7 	bl	8008d8e <__hexdig_fun>
 8008e00:	4604      	mov	r4, r0
 8008e02:	2800      	cmp	r0, #0
 8008e04:	d13a      	bne.n	8008e7c <__gethex+0xc4>
 8008e06:	4652      	mov	r2, sl
 8008e08:	4638      	mov	r0, r7
 8008e0a:	9903      	ldr	r1, [sp, #12]
 8008e0c:	f001 fa22 	bl	800a254 <strncmp>
 8008e10:	4605      	mov	r5, r0
 8008e12:	2800      	cmp	r0, #0
 8008e14:	d166      	bne.n	8008ee4 <__gethex+0x12c>
 8008e16:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008e1a:	eb07 060a 	add.w	r6, r7, sl
 8008e1e:	f7ff ffb6 	bl	8008d8e <__hexdig_fun>
 8008e22:	2800      	cmp	r0, #0
 8008e24:	d060      	beq.n	8008ee8 <__gethex+0x130>
 8008e26:	4633      	mov	r3, r6
 8008e28:	7818      	ldrb	r0, [r3, #0]
 8008e2a:	461f      	mov	r7, r3
 8008e2c:	2830      	cmp	r0, #48	; 0x30
 8008e2e:	f103 0301 	add.w	r3, r3, #1
 8008e32:	d0f9      	beq.n	8008e28 <__gethex+0x70>
 8008e34:	f7ff ffab 	bl	8008d8e <__hexdig_fun>
 8008e38:	2301      	movs	r3, #1
 8008e3a:	fab0 f480 	clz	r4, r0
 8008e3e:	4635      	mov	r5, r6
 8008e40:	0964      	lsrs	r4, r4, #5
 8008e42:	9301      	str	r3, [sp, #4]
 8008e44:	463a      	mov	r2, r7
 8008e46:	4616      	mov	r6, r2
 8008e48:	7830      	ldrb	r0, [r6, #0]
 8008e4a:	3201      	adds	r2, #1
 8008e4c:	f7ff ff9f 	bl	8008d8e <__hexdig_fun>
 8008e50:	2800      	cmp	r0, #0
 8008e52:	d1f8      	bne.n	8008e46 <__gethex+0x8e>
 8008e54:	4652      	mov	r2, sl
 8008e56:	4630      	mov	r0, r6
 8008e58:	9903      	ldr	r1, [sp, #12]
 8008e5a:	f001 f9fb 	bl	800a254 <strncmp>
 8008e5e:	b980      	cbnz	r0, 8008e82 <__gethex+0xca>
 8008e60:	b94d      	cbnz	r5, 8008e76 <__gethex+0xbe>
 8008e62:	eb06 050a 	add.w	r5, r6, sl
 8008e66:	462a      	mov	r2, r5
 8008e68:	4616      	mov	r6, r2
 8008e6a:	7830      	ldrb	r0, [r6, #0]
 8008e6c:	3201      	adds	r2, #1
 8008e6e:	f7ff ff8e 	bl	8008d8e <__hexdig_fun>
 8008e72:	2800      	cmp	r0, #0
 8008e74:	d1f8      	bne.n	8008e68 <__gethex+0xb0>
 8008e76:	1bad      	subs	r5, r5, r6
 8008e78:	00ad      	lsls	r5, r5, #2
 8008e7a:	e004      	b.n	8008e86 <__gethex+0xce>
 8008e7c:	2400      	movs	r4, #0
 8008e7e:	4625      	mov	r5, r4
 8008e80:	e7e0      	b.n	8008e44 <__gethex+0x8c>
 8008e82:	2d00      	cmp	r5, #0
 8008e84:	d1f7      	bne.n	8008e76 <__gethex+0xbe>
 8008e86:	7833      	ldrb	r3, [r6, #0]
 8008e88:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008e8c:	2b50      	cmp	r3, #80	; 0x50
 8008e8e:	d139      	bne.n	8008f04 <__gethex+0x14c>
 8008e90:	7873      	ldrb	r3, [r6, #1]
 8008e92:	2b2b      	cmp	r3, #43	; 0x2b
 8008e94:	d02a      	beq.n	8008eec <__gethex+0x134>
 8008e96:	2b2d      	cmp	r3, #45	; 0x2d
 8008e98:	d02c      	beq.n	8008ef4 <__gethex+0x13c>
 8008e9a:	f04f 0900 	mov.w	r9, #0
 8008e9e:	1c71      	adds	r1, r6, #1
 8008ea0:	7808      	ldrb	r0, [r1, #0]
 8008ea2:	f7ff ff74 	bl	8008d8e <__hexdig_fun>
 8008ea6:	1e43      	subs	r3, r0, #1
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	2b18      	cmp	r3, #24
 8008eac:	d82a      	bhi.n	8008f04 <__gethex+0x14c>
 8008eae:	f1a0 0210 	sub.w	r2, r0, #16
 8008eb2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008eb6:	f7ff ff6a 	bl	8008d8e <__hexdig_fun>
 8008eba:	1e43      	subs	r3, r0, #1
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	2b18      	cmp	r3, #24
 8008ec0:	d91b      	bls.n	8008efa <__gethex+0x142>
 8008ec2:	f1b9 0f00 	cmp.w	r9, #0
 8008ec6:	d000      	beq.n	8008eca <__gethex+0x112>
 8008ec8:	4252      	negs	r2, r2
 8008eca:	4415      	add	r5, r2
 8008ecc:	f8cb 1000 	str.w	r1, [fp]
 8008ed0:	b1d4      	cbz	r4, 8008f08 <__gethex+0x150>
 8008ed2:	9b01      	ldr	r3, [sp, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	bf14      	ite	ne
 8008ed8:	2700      	movne	r7, #0
 8008eda:	2706      	moveq	r7, #6
 8008edc:	4638      	mov	r0, r7
 8008ede:	b00b      	add	sp, #44	; 0x2c
 8008ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ee4:	463e      	mov	r6, r7
 8008ee6:	4625      	mov	r5, r4
 8008ee8:	2401      	movs	r4, #1
 8008eea:	e7cc      	b.n	8008e86 <__gethex+0xce>
 8008eec:	f04f 0900 	mov.w	r9, #0
 8008ef0:	1cb1      	adds	r1, r6, #2
 8008ef2:	e7d5      	b.n	8008ea0 <__gethex+0xe8>
 8008ef4:	f04f 0901 	mov.w	r9, #1
 8008ef8:	e7fa      	b.n	8008ef0 <__gethex+0x138>
 8008efa:	230a      	movs	r3, #10
 8008efc:	fb03 0202 	mla	r2, r3, r2, r0
 8008f00:	3a10      	subs	r2, #16
 8008f02:	e7d6      	b.n	8008eb2 <__gethex+0xfa>
 8008f04:	4631      	mov	r1, r6
 8008f06:	e7e1      	b.n	8008ecc <__gethex+0x114>
 8008f08:	4621      	mov	r1, r4
 8008f0a:	1bf3      	subs	r3, r6, r7
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	2b07      	cmp	r3, #7
 8008f10:	dc0a      	bgt.n	8008f28 <__gethex+0x170>
 8008f12:	9802      	ldr	r0, [sp, #8]
 8008f14:	f000 fa88 	bl	8009428 <_Balloc>
 8008f18:	4604      	mov	r4, r0
 8008f1a:	b940      	cbnz	r0, 8008f2e <__gethex+0x176>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	21de      	movs	r1, #222	; 0xde
 8008f20:	4b5b      	ldr	r3, [pc, #364]	; (8009090 <__gethex+0x2d8>)
 8008f22:	485c      	ldr	r0, [pc, #368]	; (8009094 <__gethex+0x2dc>)
 8008f24:	f7ff f834 	bl	8007f90 <__assert_func>
 8008f28:	3101      	adds	r1, #1
 8008f2a:	105b      	asrs	r3, r3, #1
 8008f2c:	e7ef      	b.n	8008f0e <__gethex+0x156>
 8008f2e:	f04f 0b00 	mov.w	fp, #0
 8008f32:	f100 0914 	add.w	r9, r0, #20
 8008f36:	f1ca 0301 	rsb	r3, sl, #1
 8008f3a:	f8cd 9010 	str.w	r9, [sp, #16]
 8008f3e:	f8cd b004 	str.w	fp, [sp, #4]
 8008f42:	9308      	str	r3, [sp, #32]
 8008f44:	42b7      	cmp	r7, r6
 8008f46:	d33f      	bcc.n	8008fc8 <__gethex+0x210>
 8008f48:	9f04      	ldr	r7, [sp, #16]
 8008f4a:	9b01      	ldr	r3, [sp, #4]
 8008f4c:	f847 3b04 	str.w	r3, [r7], #4
 8008f50:	eba7 0709 	sub.w	r7, r7, r9
 8008f54:	10bf      	asrs	r7, r7, #2
 8008f56:	6127      	str	r7, [r4, #16]
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f000 fb57 	bl	800960c <__hi0bits>
 8008f5e:	017f      	lsls	r7, r7, #5
 8008f60:	f8d8 6000 	ldr.w	r6, [r8]
 8008f64:	1a3f      	subs	r7, r7, r0
 8008f66:	42b7      	cmp	r7, r6
 8008f68:	dd62      	ble.n	8009030 <__gethex+0x278>
 8008f6a:	1bbf      	subs	r7, r7, r6
 8008f6c:	4639      	mov	r1, r7
 8008f6e:	4620      	mov	r0, r4
 8008f70:	f000 fef1 	bl	8009d56 <__any_on>
 8008f74:	4682      	mov	sl, r0
 8008f76:	b1a8      	cbz	r0, 8008fa4 <__gethex+0x1ec>
 8008f78:	f04f 0a01 	mov.w	sl, #1
 8008f7c:	1e7b      	subs	r3, r7, #1
 8008f7e:	1159      	asrs	r1, r3, #5
 8008f80:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008f84:	f003 021f 	and.w	r2, r3, #31
 8008f88:	fa0a f202 	lsl.w	r2, sl, r2
 8008f8c:	420a      	tst	r2, r1
 8008f8e:	d009      	beq.n	8008fa4 <__gethex+0x1ec>
 8008f90:	4553      	cmp	r3, sl
 8008f92:	dd05      	ble.n	8008fa0 <__gethex+0x1e8>
 8008f94:	4620      	mov	r0, r4
 8008f96:	1eb9      	subs	r1, r7, #2
 8008f98:	f000 fedd 	bl	8009d56 <__any_on>
 8008f9c:	2800      	cmp	r0, #0
 8008f9e:	d144      	bne.n	800902a <__gethex+0x272>
 8008fa0:	f04f 0a02 	mov.w	sl, #2
 8008fa4:	4639      	mov	r1, r7
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	f7ff fe9e 	bl	8008ce8 <rshift>
 8008fac:	443d      	add	r5, r7
 8008fae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008fb2:	42ab      	cmp	r3, r5
 8008fb4:	da4a      	bge.n	800904c <__gethex+0x294>
 8008fb6:	4621      	mov	r1, r4
 8008fb8:	9802      	ldr	r0, [sp, #8]
 8008fba:	f000 fa75 	bl	80094a8 <_Bfree>
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008fc2:	27a3      	movs	r7, #163	; 0xa3
 8008fc4:	6013      	str	r3, [r2, #0]
 8008fc6:	e789      	b.n	8008edc <__gethex+0x124>
 8008fc8:	1e73      	subs	r3, r6, #1
 8008fca:	9a06      	ldr	r2, [sp, #24]
 8008fcc:	9307      	str	r3, [sp, #28]
 8008fce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d019      	beq.n	800900a <__gethex+0x252>
 8008fd6:	f1bb 0f20 	cmp.w	fp, #32
 8008fda:	d107      	bne.n	8008fec <__gethex+0x234>
 8008fdc:	9b04      	ldr	r3, [sp, #16]
 8008fde:	9a01      	ldr	r2, [sp, #4]
 8008fe0:	f843 2b04 	str.w	r2, [r3], #4
 8008fe4:	9304      	str	r3, [sp, #16]
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	469b      	mov	fp, r3
 8008fea:	9301      	str	r3, [sp, #4]
 8008fec:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008ff0:	f7ff fecd 	bl	8008d8e <__hexdig_fun>
 8008ff4:	9b01      	ldr	r3, [sp, #4]
 8008ff6:	f000 000f 	and.w	r0, r0, #15
 8008ffa:	fa00 f00b 	lsl.w	r0, r0, fp
 8008ffe:	4303      	orrs	r3, r0
 8009000:	9301      	str	r3, [sp, #4]
 8009002:	f10b 0b04 	add.w	fp, fp, #4
 8009006:	9b07      	ldr	r3, [sp, #28]
 8009008:	e00d      	b.n	8009026 <__gethex+0x26e>
 800900a:	9a08      	ldr	r2, [sp, #32]
 800900c:	1e73      	subs	r3, r6, #1
 800900e:	4413      	add	r3, r2
 8009010:	42bb      	cmp	r3, r7
 8009012:	d3e0      	bcc.n	8008fd6 <__gethex+0x21e>
 8009014:	4618      	mov	r0, r3
 8009016:	4652      	mov	r2, sl
 8009018:	9903      	ldr	r1, [sp, #12]
 800901a:	9309      	str	r3, [sp, #36]	; 0x24
 800901c:	f001 f91a 	bl	800a254 <strncmp>
 8009020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009022:	2800      	cmp	r0, #0
 8009024:	d1d7      	bne.n	8008fd6 <__gethex+0x21e>
 8009026:	461e      	mov	r6, r3
 8009028:	e78c      	b.n	8008f44 <__gethex+0x18c>
 800902a:	f04f 0a03 	mov.w	sl, #3
 800902e:	e7b9      	b.n	8008fa4 <__gethex+0x1ec>
 8009030:	da09      	bge.n	8009046 <__gethex+0x28e>
 8009032:	1bf7      	subs	r7, r6, r7
 8009034:	4621      	mov	r1, r4
 8009036:	463a      	mov	r2, r7
 8009038:	9802      	ldr	r0, [sp, #8]
 800903a:	f000 fc4d 	bl	80098d8 <__lshift>
 800903e:	4604      	mov	r4, r0
 8009040:	1bed      	subs	r5, r5, r7
 8009042:	f100 0914 	add.w	r9, r0, #20
 8009046:	f04f 0a00 	mov.w	sl, #0
 800904a:	e7b0      	b.n	8008fae <__gethex+0x1f6>
 800904c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009050:	42a8      	cmp	r0, r5
 8009052:	dd72      	ble.n	800913a <__gethex+0x382>
 8009054:	1b45      	subs	r5, r0, r5
 8009056:	42ae      	cmp	r6, r5
 8009058:	dc35      	bgt.n	80090c6 <__gethex+0x30e>
 800905a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800905e:	2b02      	cmp	r3, #2
 8009060:	d029      	beq.n	80090b6 <__gethex+0x2fe>
 8009062:	2b03      	cmp	r3, #3
 8009064:	d02b      	beq.n	80090be <__gethex+0x306>
 8009066:	2b01      	cmp	r3, #1
 8009068:	d11c      	bne.n	80090a4 <__gethex+0x2ec>
 800906a:	42ae      	cmp	r6, r5
 800906c:	d11a      	bne.n	80090a4 <__gethex+0x2ec>
 800906e:	2e01      	cmp	r6, #1
 8009070:	d112      	bne.n	8009098 <__gethex+0x2e0>
 8009072:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009076:	9a05      	ldr	r2, [sp, #20]
 8009078:	2762      	movs	r7, #98	; 0x62
 800907a:	6013      	str	r3, [r2, #0]
 800907c:	2301      	movs	r3, #1
 800907e:	6123      	str	r3, [r4, #16]
 8009080:	f8c9 3000 	str.w	r3, [r9]
 8009084:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009086:	601c      	str	r4, [r3, #0]
 8009088:	e728      	b.n	8008edc <__gethex+0x124>
 800908a:	bf00      	nop
 800908c:	0800ad50 	.word	0x0800ad50
 8009090:	0800acd8 	.word	0x0800acd8
 8009094:	0800ace9 	.word	0x0800ace9
 8009098:	4620      	mov	r0, r4
 800909a:	1e71      	subs	r1, r6, #1
 800909c:	f000 fe5b 	bl	8009d56 <__any_on>
 80090a0:	2800      	cmp	r0, #0
 80090a2:	d1e6      	bne.n	8009072 <__gethex+0x2ba>
 80090a4:	4621      	mov	r1, r4
 80090a6:	9802      	ldr	r0, [sp, #8]
 80090a8:	f000 f9fe 	bl	80094a8 <_Bfree>
 80090ac:	2300      	movs	r3, #0
 80090ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80090b0:	2750      	movs	r7, #80	; 0x50
 80090b2:	6013      	str	r3, [r2, #0]
 80090b4:	e712      	b.n	8008edc <__gethex+0x124>
 80090b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d1f3      	bne.n	80090a4 <__gethex+0x2ec>
 80090bc:	e7d9      	b.n	8009072 <__gethex+0x2ba>
 80090be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1d6      	bne.n	8009072 <__gethex+0x2ba>
 80090c4:	e7ee      	b.n	80090a4 <__gethex+0x2ec>
 80090c6:	1e6f      	subs	r7, r5, #1
 80090c8:	f1ba 0f00 	cmp.w	sl, #0
 80090cc:	d132      	bne.n	8009134 <__gethex+0x37c>
 80090ce:	b127      	cbz	r7, 80090da <__gethex+0x322>
 80090d0:	4639      	mov	r1, r7
 80090d2:	4620      	mov	r0, r4
 80090d4:	f000 fe3f 	bl	8009d56 <__any_on>
 80090d8:	4682      	mov	sl, r0
 80090da:	2101      	movs	r1, #1
 80090dc:	117b      	asrs	r3, r7, #5
 80090de:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80090e2:	f007 071f 	and.w	r7, r7, #31
 80090e6:	fa01 f707 	lsl.w	r7, r1, r7
 80090ea:	421f      	tst	r7, r3
 80090ec:	f04f 0702 	mov.w	r7, #2
 80090f0:	4629      	mov	r1, r5
 80090f2:	4620      	mov	r0, r4
 80090f4:	bf18      	it	ne
 80090f6:	f04a 0a02 	orrne.w	sl, sl, #2
 80090fa:	1b76      	subs	r6, r6, r5
 80090fc:	f7ff fdf4 	bl	8008ce8 <rshift>
 8009100:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009104:	f1ba 0f00 	cmp.w	sl, #0
 8009108:	d048      	beq.n	800919c <__gethex+0x3e4>
 800910a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800910e:	2b02      	cmp	r3, #2
 8009110:	d015      	beq.n	800913e <__gethex+0x386>
 8009112:	2b03      	cmp	r3, #3
 8009114:	d017      	beq.n	8009146 <__gethex+0x38e>
 8009116:	2b01      	cmp	r3, #1
 8009118:	d109      	bne.n	800912e <__gethex+0x376>
 800911a:	f01a 0f02 	tst.w	sl, #2
 800911e:	d006      	beq.n	800912e <__gethex+0x376>
 8009120:	f8d9 0000 	ldr.w	r0, [r9]
 8009124:	ea4a 0a00 	orr.w	sl, sl, r0
 8009128:	f01a 0f01 	tst.w	sl, #1
 800912c:	d10e      	bne.n	800914c <__gethex+0x394>
 800912e:	f047 0710 	orr.w	r7, r7, #16
 8009132:	e033      	b.n	800919c <__gethex+0x3e4>
 8009134:	f04f 0a01 	mov.w	sl, #1
 8009138:	e7cf      	b.n	80090da <__gethex+0x322>
 800913a:	2701      	movs	r7, #1
 800913c:	e7e2      	b.n	8009104 <__gethex+0x34c>
 800913e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009140:	f1c3 0301 	rsb	r3, r3, #1
 8009144:	9315      	str	r3, [sp, #84]	; 0x54
 8009146:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009148:	2b00      	cmp	r3, #0
 800914a:	d0f0      	beq.n	800912e <__gethex+0x376>
 800914c:	f04f 0c00 	mov.w	ip, #0
 8009150:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009154:	f104 0314 	add.w	r3, r4, #20
 8009158:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800915c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009160:	4618      	mov	r0, r3
 8009162:	f853 2b04 	ldr.w	r2, [r3], #4
 8009166:	f1b2 3fff 	cmp.w	r2, #4294967295
 800916a:	d01c      	beq.n	80091a6 <__gethex+0x3ee>
 800916c:	3201      	adds	r2, #1
 800916e:	6002      	str	r2, [r0, #0]
 8009170:	2f02      	cmp	r7, #2
 8009172:	f104 0314 	add.w	r3, r4, #20
 8009176:	d13d      	bne.n	80091f4 <__gethex+0x43c>
 8009178:	f8d8 2000 	ldr.w	r2, [r8]
 800917c:	3a01      	subs	r2, #1
 800917e:	42b2      	cmp	r2, r6
 8009180:	d10a      	bne.n	8009198 <__gethex+0x3e0>
 8009182:	2201      	movs	r2, #1
 8009184:	1171      	asrs	r1, r6, #5
 8009186:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800918a:	f006 061f 	and.w	r6, r6, #31
 800918e:	fa02 f606 	lsl.w	r6, r2, r6
 8009192:	421e      	tst	r6, r3
 8009194:	bf18      	it	ne
 8009196:	4617      	movne	r7, r2
 8009198:	f047 0720 	orr.w	r7, r7, #32
 800919c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800919e:	601c      	str	r4, [r3, #0]
 80091a0:	9b05      	ldr	r3, [sp, #20]
 80091a2:	601d      	str	r5, [r3, #0]
 80091a4:	e69a      	b.n	8008edc <__gethex+0x124>
 80091a6:	4299      	cmp	r1, r3
 80091a8:	f843 cc04 	str.w	ip, [r3, #-4]
 80091ac:	d8d8      	bhi.n	8009160 <__gethex+0x3a8>
 80091ae:	68a3      	ldr	r3, [r4, #8]
 80091b0:	459b      	cmp	fp, r3
 80091b2:	db17      	blt.n	80091e4 <__gethex+0x42c>
 80091b4:	6861      	ldr	r1, [r4, #4]
 80091b6:	9802      	ldr	r0, [sp, #8]
 80091b8:	3101      	adds	r1, #1
 80091ba:	f000 f935 	bl	8009428 <_Balloc>
 80091be:	4681      	mov	r9, r0
 80091c0:	b918      	cbnz	r0, 80091ca <__gethex+0x412>
 80091c2:	4602      	mov	r2, r0
 80091c4:	2184      	movs	r1, #132	; 0x84
 80091c6:	4b19      	ldr	r3, [pc, #100]	; (800922c <__gethex+0x474>)
 80091c8:	e6ab      	b.n	8008f22 <__gethex+0x16a>
 80091ca:	6922      	ldr	r2, [r4, #16]
 80091cc:	f104 010c 	add.w	r1, r4, #12
 80091d0:	3202      	adds	r2, #2
 80091d2:	0092      	lsls	r2, r2, #2
 80091d4:	300c      	adds	r0, #12
 80091d6:	f000 f919 	bl	800940c <memcpy>
 80091da:	4621      	mov	r1, r4
 80091dc:	9802      	ldr	r0, [sp, #8]
 80091de:	f000 f963 	bl	80094a8 <_Bfree>
 80091e2:	464c      	mov	r4, r9
 80091e4:	6923      	ldr	r3, [r4, #16]
 80091e6:	1c5a      	adds	r2, r3, #1
 80091e8:	6122      	str	r2, [r4, #16]
 80091ea:	2201      	movs	r2, #1
 80091ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80091f0:	615a      	str	r2, [r3, #20]
 80091f2:	e7bd      	b.n	8009170 <__gethex+0x3b8>
 80091f4:	6922      	ldr	r2, [r4, #16]
 80091f6:	455a      	cmp	r2, fp
 80091f8:	dd0b      	ble.n	8009212 <__gethex+0x45a>
 80091fa:	2101      	movs	r1, #1
 80091fc:	4620      	mov	r0, r4
 80091fe:	f7ff fd73 	bl	8008ce8 <rshift>
 8009202:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009206:	3501      	adds	r5, #1
 8009208:	42ab      	cmp	r3, r5
 800920a:	f6ff aed4 	blt.w	8008fb6 <__gethex+0x1fe>
 800920e:	2701      	movs	r7, #1
 8009210:	e7c2      	b.n	8009198 <__gethex+0x3e0>
 8009212:	f016 061f 	ands.w	r6, r6, #31
 8009216:	d0fa      	beq.n	800920e <__gethex+0x456>
 8009218:	4453      	add	r3, sl
 800921a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800921e:	f000 f9f5 	bl	800960c <__hi0bits>
 8009222:	f1c6 0620 	rsb	r6, r6, #32
 8009226:	42b0      	cmp	r0, r6
 8009228:	dbe7      	blt.n	80091fa <__gethex+0x442>
 800922a:	e7f0      	b.n	800920e <__gethex+0x456>
 800922c:	0800acd8 	.word	0x0800acd8

08009230 <L_shift>:
 8009230:	f1c2 0208 	rsb	r2, r2, #8
 8009234:	0092      	lsls	r2, r2, #2
 8009236:	b570      	push	{r4, r5, r6, lr}
 8009238:	f1c2 0620 	rsb	r6, r2, #32
 800923c:	6843      	ldr	r3, [r0, #4]
 800923e:	6804      	ldr	r4, [r0, #0]
 8009240:	fa03 f506 	lsl.w	r5, r3, r6
 8009244:	432c      	orrs	r4, r5
 8009246:	40d3      	lsrs	r3, r2
 8009248:	6004      	str	r4, [r0, #0]
 800924a:	f840 3f04 	str.w	r3, [r0, #4]!
 800924e:	4288      	cmp	r0, r1
 8009250:	d3f4      	bcc.n	800923c <L_shift+0xc>
 8009252:	bd70      	pop	{r4, r5, r6, pc}

08009254 <__match>:
 8009254:	b530      	push	{r4, r5, lr}
 8009256:	6803      	ldr	r3, [r0, #0]
 8009258:	3301      	adds	r3, #1
 800925a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800925e:	b914      	cbnz	r4, 8009266 <__match+0x12>
 8009260:	6003      	str	r3, [r0, #0]
 8009262:	2001      	movs	r0, #1
 8009264:	bd30      	pop	{r4, r5, pc}
 8009266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800926a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800926e:	2d19      	cmp	r5, #25
 8009270:	bf98      	it	ls
 8009272:	3220      	addls	r2, #32
 8009274:	42a2      	cmp	r2, r4
 8009276:	d0f0      	beq.n	800925a <__match+0x6>
 8009278:	2000      	movs	r0, #0
 800927a:	e7f3      	b.n	8009264 <__match+0x10>

0800927c <__hexnan>:
 800927c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009280:	2500      	movs	r5, #0
 8009282:	680b      	ldr	r3, [r1, #0]
 8009284:	4682      	mov	sl, r0
 8009286:	115e      	asrs	r6, r3, #5
 8009288:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800928c:	f013 031f 	ands.w	r3, r3, #31
 8009290:	bf18      	it	ne
 8009292:	3604      	addne	r6, #4
 8009294:	1f37      	subs	r7, r6, #4
 8009296:	46b9      	mov	r9, r7
 8009298:	463c      	mov	r4, r7
 800929a:	46ab      	mov	fp, r5
 800929c:	b087      	sub	sp, #28
 800929e:	4690      	mov	r8, r2
 80092a0:	6802      	ldr	r2, [r0, #0]
 80092a2:	9301      	str	r3, [sp, #4]
 80092a4:	f846 5c04 	str.w	r5, [r6, #-4]
 80092a8:	9502      	str	r5, [sp, #8]
 80092aa:	7851      	ldrb	r1, [r2, #1]
 80092ac:	1c53      	adds	r3, r2, #1
 80092ae:	9303      	str	r3, [sp, #12]
 80092b0:	b341      	cbz	r1, 8009304 <__hexnan+0x88>
 80092b2:	4608      	mov	r0, r1
 80092b4:	9205      	str	r2, [sp, #20]
 80092b6:	9104      	str	r1, [sp, #16]
 80092b8:	f7ff fd69 	bl	8008d8e <__hexdig_fun>
 80092bc:	2800      	cmp	r0, #0
 80092be:	d14f      	bne.n	8009360 <__hexnan+0xe4>
 80092c0:	9904      	ldr	r1, [sp, #16]
 80092c2:	9a05      	ldr	r2, [sp, #20]
 80092c4:	2920      	cmp	r1, #32
 80092c6:	d818      	bhi.n	80092fa <__hexnan+0x7e>
 80092c8:	9b02      	ldr	r3, [sp, #8]
 80092ca:	459b      	cmp	fp, r3
 80092cc:	dd13      	ble.n	80092f6 <__hexnan+0x7a>
 80092ce:	454c      	cmp	r4, r9
 80092d0:	d206      	bcs.n	80092e0 <__hexnan+0x64>
 80092d2:	2d07      	cmp	r5, #7
 80092d4:	dc04      	bgt.n	80092e0 <__hexnan+0x64>
 80092d6:	462a      	mov	r2, r5
 80092d8:	4649      	mov	r1, r9
 80092da:	4620      	mov	r0, r4
 80092dc:	f7ff ffa8 	bl	8009230 <L_shift>
 80092e0:	4544      	cmp	r4, r8
 80092e2:	d950      	bls.n	8009386 <__hexnan+0x10a>
 80092e4:	2300      	movs	r3, #0
 80092e6:	f1a4 0904 	sub.w	r9, r4, #4
 80092ea:	f844 3c04 	str.w	r3, [r4, #-4]
 80092ee:	461d      	mov	r5, r3
 80092f0:	464c      	mov	r4, r9
 80092f2:	f8cd b008 	str.w	fp, [sp, #8]
 80092f6:	9a03      	ldr	r2, [sp, #12]
 80092f8:	e7d7      	b.n	80092aa <__hexnan+0x2e>
 80092fa:	2929      	cmp	r1, #41	; 0x29
 80092fc:	d156      	bne.n	80093ac <__hexnan+0x130>
 80092fe:	3202      	adds	r2, #2
 8009300:	f8ca 2000 	str.w	r2, [sl]
 8009304:	f1bb 0f00 	cmp.w	fp, #0
 8009308:	d050      	beq.n	80093ac <__hexnan+0x130>
 800930a:	454c      	cmp	r4, r9
 800930c:	d206      	bcs.n	800931c <__hexnan+0xa0>
 800930e:	2d07      	cmp	r5, #7
 8009310:	dc04      	bgt.n	800931c <__hexnan+0xa0>
 8009312:	462a      	mov	r2, r5
 8009314:	4649      	mov	r1, r9
 8009316:	4620      	mov	r0, r4
 8009318:	f7ff ff8a 	bl	8009230 <L_shift>
 800931c:	4544      	cmp	r4, r8
 800931e:	d934      	bls.n	800938a <__hexnan+0x10e>
 8009320:	4623      	mov	r3, r4
 8009322:	f1a8 0204 	sub.w	r2, r8, #4
 8009326:	f853 1b04 	ldr.w	r1, [r3], #4
 800932a:	429f      	cmp	r7, r3
 800932c:	f842 1f04 	str.w	r1, [r2, #4]!
 8009330:	d2f9      	bcs.n	8009326 <__hexnan+0xaa>
 8009332:	1b3b      	subs	r3, r7, r4
 8009334:	f023 0303 	bic.w	r3, r3, #3
 8009338:	3304      	adds	r3, #4
 800933a:	3401      	adds	r4, #1
 800933c:	3e03      	subs	r6, #3
 800933e:	42b4      	cmp	r4, r6
 8009340:	bf88      	it	hi
 8009342:	2304      	movhi	r3, #4
 8009344:	2200      	movs	r2, #0
 8009346:	4443      	add	r3, r8
 8009348:	f843 2b04 	str.w	r2, [r3], #4
 800934c:	429f      	cmp	r7, r3
 800934e:	d2fb      	bcs.n	8009348 <__hexnan+0xcc>
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	b91b      	cbnz	r3, 800935c <__hexnan+0xe0>
 8009354:	4547      	cmp	r7, r8
 8009356:	d127      	bne.n	80093a8 <__hexnan+0x12c>
 8009358:	2301      	movs	r3, #1
 800935a:	603b      	str	r3, [r7, #0]
 800935c:	2005      	movs	r0, #5
 800935e:	e026      	b.n	80093ae <__hexnan+0x132>
 8009360:	3501      	adds	r5, #1
 8009362:	2d08      	cmp	r5, #8
 8009364:	f10b 0b01 	add.w	fp, fp, #1
 8009368:	dd06      	ble.n	8009378 <__hexnan+0xfc>
 800936a:	4544      	cmp	r4, r8
 800936c:	d9c3      	bls.n	80092f6 <__hexnan+0x7a>
 800936e:	2300      	movs	r3, #0
 8009370:	2501      	movs	r5, #1
 8009372:	f844 3c04 	str.w	r3, [r4, #-4]
 8009376:	3c04      	subs	r4, #4
 8009378:	6822      	ldr	r2, [r4, #0]
 800937a:	f000 000f 	and.w	r0, r0, #15
 800937e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009382:	6022      	str	r2, [r4, #0]
 8009384:	e7b7      	b.n	80092f6 <__hexnan+0x7a>
 8009386:	2508      	movs	r5, #8
 8009388:	e7b5      	b.n	80092f6 <__hexnan+0x7a>
 800938a:	9b01      	ldr	r3, [sp, #4]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d0df      	beq.n	8009350 <__hexnan+0xd4>
 8009390:	f04f 32ff 	mov.w	r2, #4294967295
 8009394:	f1c3 0320 	rsb	r3, r3, #32
 8009398:	fa22 f303 	lsr.w	r3, r2, r3
 800939c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80093a0:	401a      	ands	r2, r3
 80093a2:	f846 2c04 	str.w	r2, [r6, #-4]
 80093a6:	e7d3      	b.n	8009350 <__hexnan+0xd4>
 80093a8:	3f04      	subs	r7, #4
 80093aa:	e7d1      	b.n	8009350 <__hexnan+0xd4>
 80093ac:	2004      	movs	r0, #4
 80093ae:	b007      	add	sp, #28
 80093b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080093b4 <_localeconv_r>:
 80093b4:	4800      	ldr	r0, [pc, #0]	; (80093b8 <_localeconv_r+0x4>)
 80093b6:	4770      	bx	lr
 80093b8:	20000170 	.word	0x20000170

080093bc <malloc>:
 80093bc:	4b02      	ldr	r3, [pc, #8]	; (80093c8 <malloc+0xc>)
 80093be:	4601      	mov	r1, r0
 80093c0:	6818      	ldr	r0, [r3, #0]
 80093c2:	f000 bd65 	b.w	8009e90 <_malloc_r>
 80093c6:	bf00      	nop
 80093c8:	20000018 	.word	0x20000018

080093cc <__ascii_mbtowc>:
 80093cc:	b082      	sub	sp, #8
 80093ce:	b901      	cbnz	r1, 80093d2 <__ascii_mbtowc+0x6>
 80093d0:	a901      	add	r1, sp, #4
 80093d2:	b142      	cbz	r2, 80093e6 <__ascii_mbtowc+0x1a>
 80093d4:	b14b      	cbz	r3, 80093ea <__ascii_mbtowc+0x1e>
 80093d6:	7813      	ldrb	r3, [r2, #0]
 80093d8:	600b      	str	r3, [r1, #0]
 80093da:	7812      	ldrb	r2, [r2, #0]
 80093dc:	1e10      	subs	r0, r2, #0
 80093de:	bf18      	it	ne
 80093e0:	2001      	movne	r0, #1
 80093e2:	b002      	add	sp, #8
 80093e4:	4770      	bx	lr
 80093e6:	4610      	mov	r0, r2
 80093e8:	e7fb      	b.n	80093e2 <__ascii_mbtowc+0x16>
 80093ea:	f06f 0001 	mvn.w	r0, #1
 80093ee:	e7f8      	b.n	80093e2 <__ascii_mbtowc+0x16>

080093f0 <memchr>:
 80093f0:	4603      	mov	r3, r0
 80093f2:	b510      	push	{r4, lr}
 80093f4:	b2c9      	uxtb	r1, r1
 80093f6:	4402      	add	r2, r0
 80093f8:	4293      	cmp	r3, r2
 80093fa:	4618      	mov	r0, r3
 80093fc:	d101      	bne.n	8009402 <memchr+0x12>
 80093fe:	2000      	movs	r0, #0
 8009400:	e003      	b.n	800940a <memchr+0x1a>
 8009402:	7804      	ldrb	r4, [r0, #0]
 8009404:	3301      	adds	r3, #1
 8009406:	428c      	cmp	r4, r1
 8009408:	d1f6      	bne.n	80093f8 <memchr+0x8>
 800940a:	bd10      	pop	{r4, pc}

0800940c <memcpy>:
 800940c:	440a      	add	r2, r1
 800940e:	4291      	cmp	r1, r2
 8009410:	f100 33ff 	add.w	r3, r0, #4294967295
 8009414:	d100      	bne.n	8009418 <memcpy+0xc>
 8009416:	4770      	bx	lr
 8009418:	b510      	push	{r4, lr}
 800941a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800941e:	4291      	cmp	r1, r2
 8009420:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009424:	d1f9      	bne.n	800941a <memcpy+0xe>
 8009426:	bd10      	pop	{r4, pc}

08009428 <_Balloc>:
 8009428:	b570      	push	{r4, r5, r6, lr}
 800942a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800942c:	4604      	mov	r4, r0
 800942e:	460d      	mov	r5, r1
 8009430:	b976      	cbnz	r6, 8009450 <_Balloc+0x28>
 8009432:	2010      	movs	r0, #16
 8009434:	f7ff ffc2 	bl	80093bc <malloc>
 8009438:	4602      	mov	r2, r0
 800943a:	6260      	str	r0, [r4, #36]	; 0x24
 800943c:	b920      	cbnz	r0, 8009448 <_Balloc+0x20>
 800943e:	2166      	movs	r1, #102	; 0x66
 8009440:	4b17      	ldr	r3, [pc, #92]	; (80094a0 <_Balloc+0x78>)
 8009442:	4818      	ldr	r0, [pc, #96]	; (80094a4 <_Balloc+0x7c>)
 8009444:	f7fe fda4 	bl	8007f90 <__assert_func>
 8009448:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800944c:	6006      	str	r6, [r0, #0]
 800944e:	60c6      	str	r6, [r0, #12]
 8009450:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009452:	68f3      	ldr	r3, [r6, #12]
 8009454:	b183      	cbz	r3, 8009478 <_Balloc+0x50>
 8009456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800945e:	b9b8      	cbnz	r0, 8009490 <_Balloc+0x68>
 8009460:	2101      	movs	r1, #1
 8009462:	fa01 f605 	lsl.w	r6, r1, r5
 8009466:	1d72      	adds	r2, r6, #5
 8009468:	4620      	mov	r0, r4
 800946a:	0092      	lsls	r2, r2, #2
 800946c:	f000 fc94 	bl	8009d98 <_calloc_r>
 8009470:	b160      	cbz	r0, 800948c <_Balloc+0x64>
 8009472:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009476:	e00e      	b.n	8009496 <_Balloc+0x6e>
 8009478:	2221      	movs	r2, #33	; 0x21
 800947a:	2104      	movs	r1, #4
 800947c:	4620      	mov	r0, r4
 800947e:	f000 fc8b 	bl	8009d98 <_calloc_r>
 8009482:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009484:	60f0      	str	r0, [r6, #12]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1e4      	bne.n	8009456 <_Balloc+0x2e>
 800948c:	2000      	movs	r0, #0
 800948e:	bd70      	pop	{r4, r5, r6, pc}
 8009490:	6802      	ldr	r2, [r0, #0]
 8009492:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009496:	2300      	movs	r3, #0
 8009498:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800949c:	e7f7      	b.n	800948e <_Balloc+0x66>
 800949e:	bf00      	nop
 80094a0:	0800abc0 	.word	0x0800abc0
 80094a4:	0800ad64 	.word	0x0800ad64

080094a8 <_Bfree>:
 80094a8:	b570      	push	{r4, r5, r6, lr}
 80094aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80094ac:	4605      	mov	r5, r0
 80094ae:	460c      	mov	r4, r1
 80094b0:	b976      	cbnz	r6, 80094d0 <_Bfree+0x28>
 80094b2:	2010      	movs	r0, #16
 80094b4:	f7ff ff82 	bl	80093bc <malloc>
 80094b8:	4602      	mov	r2, r0
 80094ba:	6268      	str	r0, [r5, #36]	; 0x24
 80094bc:	b920      	cbnz	r0, 80094c8 <_Bfree+0x20>
 80094be:	218a      	movs	r1, #138	; 0x8a
 80094c0:	4b08      	ldr	r3, [pc, #32]	; (80094e4 <_Bfree+0x3c>)
 80094c2:	4809      	ldr	r0, [pc, #36]	; (80094e8 <_Bfree+0x40>)
 80094c4:	f7fe fd64 	bl	8007f90 <__assert_func>
 80094c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094cc:	6006      	str	r6, [r0, #0]
 80094ce:	60c6      	str	r6, [r0, #12]
 80094d0:	b13c      	cbz	r4, 80094e2 <_Bfree+0x3a>
 80094d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80094d4:	6862      	ldr	r2, [r4, #4]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094dc:	6021      	str	r1, [r4, #0]
 80094de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094e2:	bd70      	pop	{r4, r5, r6, pc}
 80094e4:	0800abc0 	.word	0x0800abc0
 80094e8:	0800ad64 	.word	0x0800ad64

080094ec <__multadd>:
 80094ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094f0:	4607      	mov	r7, r0
 80094f2:	460c      	mov	r4, r1
 80094f4:	461e      	mov	r6, r3
 80094f6:	2000      	movs	r0, #0
 80094f8:	690d      	ldr	r5, [r1, #16]
 80094fa:	f101 0c14 	add.w	ip, r1, #20
 80094fe:	f8dc 3000 	ldr.w	r3, [ip]
 8009502:	3001      	adds	r0, #1
 8009504:	b299      	uxth	r1, r3
 8009506:	fb02 6101 	mla	r1, r2, r1, r6
 800950a:	0c1e      	lsrs	r6, r3, #16
 800950c:	0c0b      	lsrs	r3, r1, #16
 800950e:	fb02 3306 	mla	r3, r2, r6, r3
 8009512:	b289      	uxth	r1, r1
 8009514:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009518:	4285      	cmp	r5, r0
 800951a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800951e:	f84c 1b04 	str.w	r1, [ip], #4
 8009522:	dcec      	bgt.n	80094fe <__multadd+0x12>
 8009524:	b30e      	cbz	r6, 800956a <__multadd+0x7e>
 8009526:	68a3      	ldr	r3, [r4, #8]
 8009528:	42ab      	cmp	r3, r5
 800952a:	dc19      	bgt.n	8009560 <__multadd+0x74>
 800952c:	6861      	ldr	r1, [r4, #4]
 800952e:	4638      	mov	r0, r7
 8009530:	3101      	adds	r1, #1
 8009532:	f7ff ff79 	bl	8009428 <_Balloc>
 8009536:	4680      	mov	r8, r0
 8009538:	b928      	cbnz	r0, 8009546 <__multadd+0x5a>
 800953a:	4602      	mov	r2, r0
 800953c:	21b5      	movs	r1, #181	; 0xb5
 800953e:	4b0c      	ldr	r3, [pc, #48]	; (8009570 <__multadd+0x84>)
 8009540:	480c      	ldr	r0, [pc, #48]	; (8009574 <__multadd+0x88>)
 8009542:	f7fe fd25 	bl	8007f90 <__assert_func>
 8009546:	6922      	ldr	r2, [r4, #16]
 8009548:	f104 010c 	add.w	r1, r4, #12
 800954c:	3202      	adds	r2, #2
 800954e:	0092      	lsls	r2, r2, #2
 8009550:	300c      	adds	r0, #12
 8009552:	f7ff ff5b 	bl	800940c <memcpy>
 8009556:	4621      	mov	r1, r4
 8009558:	4638      	mov	r0, r7
 800955a:	f7ff ffa5 	bl	80094a8 <_Bfree>
 800955e:	4644      	mov	r4, r8
 8009560:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009564:	3501      	adds	r5, #1
 8009566:	615e      	str	r6, [r3, #20]
 8009568:	6125      	str	r5, [r4, #16]
 800956a:	4620      	mov	r0, r4
 800956c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009570:	0800acd8 	.word	0x0800acd8
 8009574:	0800ad64 	.word	0x0800ad64

08009578 <__s2b>:
 8009578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800957c:	4615      	mov	r5, r2
 800957e:	2209      	movs	r2, #9
 8009580:	461f      	mov	r7, r3
 8009582:	3308      	adds	r3, #8
 8009584:	460c      	mov	r4, r1
 8009586:	fb93 f3f2 	sdiv	r3, r3, r2
 800958a:	4606      	mov	r6, r0
 800958c:	2201      	movs	r2, #1
 800958e:	2100      	movs	r1, #0
 8009590:	429a      	cmp	r2, r3
 8009592:	db09      	blt.n	80095a8 <__s2b+0x30>
 8009594:	4630      	mov	r0, r6
 8009596:	f7ff ff47 	bl	8009428 <_Balloc>
 800959a:	b940      	cbnz	r0, 80095ae <__s2b+0x36>
 800959c:	4602      	mov	r2, r0
 800959e:	21ce      	movs	r1, #206	; 0xce
 80095a0:	4b18      	ldr	r3, [pc, #96]	; (8009604 <__s2b+0x8c>)
 80095a2:	4819      	ldr	r0, [pc, #100]	; (8009608 <__s2b+0x90>)
 80095a4:	f7fe fcf4 	bl	8007f90 <__assert_func>
 80095a8:	0052      	lsls	r2, r2, #1
 80095aa:	3101      	adds	r1, #1
 80095ac:	e7f0      	b.n	8009590 <__s2b+0x18>
 80095ae:	9b08      	ldr	r3, [sp, #32]
 80095b0:	2d09      	cmp	r5, #9
 80095b2:	6143      	str	r3, [r0, #20]
 80095b4:	f04f 0301 	mov.w	r3, #1
 80095b8:	6103      	str	r3, [r0, #16]
 80095ba:	dd16      	ble.n	80095ea <__s2b+0x72>
 80095bc:	f104 0909 	add.w	r9, r4, #9
 80095c0:	46c8      	mov	r8, r9
 80095c2:	442c      	add	r4, r5
 80095c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80095c8:	4601      	mov	r1, r0
 80095ca:	220a      	movs	r2, #10
 80095cc:	4630      	mov	r0, r6
 80095ce:	3b30      	subs	r3, #48	; 0x30
 80095d0:	f7ff ff8c 	bl	80094ec <__multadd>
 80095d4:	45a0      	cmp	r8, r4
 80095d6:	d1f5      	bne.n	80095c4 <__s2b+0x4c>
 80095d8:	f1a5 0408 	sub.w	r4, r5, #8
 80095dc:	444c      	add	r4, r9
 80095de:	1b2d      	subs	r5, r5, r4
 80095e0:	1963      	adds	r3, r4, r5
 80095e2:	42bb      	cmp	r3, r7
 80095e4:	db04      	blt.n	80095f0 <__s2b+0x78>
 80095e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095ea:	2509      	movs	r5, #9
 80095ec:	340a      	adds	r4, #10
 80095ee:	e7f6      	b.n	80095de <__s2b+0x66>
 80095f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80095f4:	4601      	mov	r1, r0
 80095f6:	220a      	movs	r2, #10
 80095f8:	4630      	mov	r0, r6
 80095fa:	3b30      	subs	r3, #48	; 0x30
 80095fc:	f7ff ff76 	bl	80094ec <__multadd>
 8009600:	e7ee      	b.n	80095e0 <__s2b+0x68>
 8009602:	bf00      	nop
 8009604:	0800acd8 	.word	0x0800acd8
 8009608:	0800ad64 	.word	0x0800ad64

0800960c <__hi0bits>:
 800960c:	0c02      	lsrs	r2, r0, #16
 800960e:	0412      	lsls	r2, r2, #16
 8009610:	4603      	mov	r3, r0
 8009612:	b9ca      	cbnz	r2, 8009648 <__hi0bits+0x3c>
 8009614:	0403      	lsls	r3, r0, #16
 8009616:	2010      	movs	r0, #16
 8009618:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800961c:	bf04      	itt	eq
 800961e:	021b      	lsleq	r3, r3, #8
 8009620:	3008      	addeq	r0, #8
 8009622:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009626:	bf04      	itt	eq
 8009628:	011b      	lsleq	r3, r3, #4
 800962a:	3004      	addeq	r0, #4
 800962c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009630:	bf04      	itt	eq
 8009632:	009b      	lsleq	r3, r3, #2
 8009634:	3002      	addeq	r0, #2
 8009636:	2b00      	cmp	r3, #0
 8009638:	db05      	blt.n	8009646 <__hi0bits+0x3a>
 800963a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800963e:	f100 0001 	add.w	r0, r0, #1
 8009642:	bf08      	it	eq
 8009644:	2020      	moveq	r0, #32
 8009646:	4770      	bx	lr
 8009648:	2000      	movs	r0, #0
 800964a:	e7e5      	b.n	8009618 <__hi0bits+0xc>

0800964c <__lo0bits>:
 800964c:	6803      	ldr	r3, [r0, #0]
 800964e:	4602      	mov	r2, r0
 8009650:	f013 0007 	ands.w	r0, r3, #7
 8009654:	d00b      	beq.n	800966e <__lo0bits+0x22>
 8009656:	07d9      	lsls	r1, r3, #31
 8009658:	d421      	bmi.n	800969e <__lo0bits+0x52>
 800965a:	0798      	lsls	r0, r3, #30
 800965c:	bf49      	itett	mi
 800965e:	085b      	lsrmi	r3, r3, #1
 8009660:	089b      	lsrpl	r3, r3, #2
 8009662:	2001      	movmi	r0, #1
 8009664:	6013      	strmi	r3, [r2, #0]
 8009666:	bf5c      	itt	pl
 8009668:	2002      	movpl	r0, #2
 800966a:	6013      	strpl	r3, [r2, #0]
 800966c:	4770      	bx	lr
 800966e:	b299      	uxth	r1, r3
 8009670:	b909      	cbnz	r1, 8009676 <__lo0bits+0x2a>
 8009672:	2010      	movs	r0, #16
 8009674:	0c1b      	lsrs	r3, r3, #16
 8009676:	b2d9      	uxtb	r1, r3
 8009678:	b909      	cbnz	r1, 800967e <__lo0bits+0x32>
 800967a:	3008      	adds	r0, #8
 800967c:	0a1b      	lsrs	r3, r3, #8
 800967e:	0719      	lsls	r1, r3, #28
 8009680:	bf04      	itt	eq
 8009682:	091b      	lsreq	r3, r3, #4
 8009684:	3004      	addeq	r0, #4
 8009686:	0799      	lsls	r1, r3, #30
 8009688:	bf04      	itt	eq
 800968a:	089b      	lsreq	r3, r3, #2
 800968c:	3002      	addeq	r0, #2
 800968e:	07d9      	lsls	r1, r3, #31
 8009690:	d403      	bmi.n	800969a <__lo0bits+0x4e>
 8009692:	085b      	lsrs	r3, r3, #1
 8009694:	f100 0001 	add.w	r0, r0, #1
 8009698:	d003      	beq.n	80096a2 <__lo0bits+0x56>
 800969a:	6013      	str	r3, [r2, #0]
 800969c:	4770      	bx	lr
 800969e:	2000      	movs	r0, #0
 80096a0:	4770      	bx	lr
 80096a2:	2020      	movs	r0, #32
 80096a4:	4770      	bx	lr
	...

080096a8 <__i2b>:
 80096a8:	b510      	push	{r4, lr}
 80096aa:	460c      	mov	r4, r1
 80096ac:	2101      	movs	r1, #1
 80096ae:	f7ff febb 	bl	8009428 <_Balloc>
 80096b2:	4602      	mov	r2, r0
 80096b4:	b928      	cbnz	r0, 80096c2 <__i2b+0x1a>
 80096b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80096ba:	4b04      	ldr	r3, [pc, #16]	; (80096cc <__i2b+0x24>)
 80096bc:	4804      	ldr	r0, [pc, #16]	; (80096d0 <__i2b+0x28>)
 80096be:	f7fe fc67 	bl	8007f90 <__assert_func>
 80096c2:	2301      	movs	r3, #1
 80096c4:	6144      	str	r4, [r0, #20]
 80096c6:	6103      	str	r3, [r0, #16]
 80096c8:	bd10      	pop	{r4, pc}
 80096ca:	bf00      	nop
 80096cc:	0800acd8 	.word	0x0800acd8
 80096d0:	0800ad64 	.word	0x0800ad64

080096d4 <__multiply>:
 80096d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d8:	4691      	mov	r9, r2
 80096da:	690a      	ldr	r2, [r1, #16]
 80096dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80096e0:	460c      	mov	r4, r1
 80096e2:	429a      	cmp	r2, r3
 80096e4:	bfbe      	ittt	lt
 80096e6:	460b      	movlt	r3, r1
 80096e8:	464c      	movlt	r4, r9
 80096ea:	4699      	movlt	r9, r3
 80096ec:	6927      	ldr	r7, [r4, #16]
 80096ee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80096f2:	68a3      	ldr	r3, [r4, #8]
 80096f4:	6861      	ldr	r1, [r4, #4]
 80096f6:	eb07 060a 	add.w	r6, r7, sl
 80096fa:	42b3      	cmp	r3, r6
 80096fc:	b085      	sub	sp, #20
 80096fe:	bfb8      	it	lt
 8009700:	3101      	addlt	r1, #1
 8009702:	f7ff fe91 	bl	8009428 <_Balloc>
 8009706:	b930      	cbnz	r0, 8009716 <__multiply+0x42>
 8009708:	4602      	mov	r2, r0
 800970a:	f240 115d 	movw	r1, #349	; 0x15d
 800970e:	4b43      	ldr	r3, [pc, #268]	; (800981c <__multiply+0x148>)
 8009710:	4843      	ldr	r0, [pc, #268]	; (8009820 <__multiply+0x14c>)
 8009712:	f7fe fc3d 	bl	8007f90 <__assert_func>
 8009716:	f100 0514 	add.w	r5, r0, #20
 800971a:	462b      	mov	r3, r5
 800971c:	2200      	movs	r2, #0
 800971e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009722:	4543      	cmp	r3, r8
 8009724:	d321      	bcc.n	800976a <__multiply+0x96>
 8009726:	f104 0314 	add.w	r3, r4, #20
 800972a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800972e:	f109 0314 	add.w	r3, r9, #20
 8009732:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009736:	9202      	str	r2, [sp, #8]
 8009738:	1b3a      	subs	r2, r7, r4
 800973a:	3a15      	subs	r2, #21
 800973c:	f022 0203 	bic.w	r2, r2, #3
 8009740:	3204      	adds	r2, #4
 8009742:	f104 0115 	add.w	r1, r4, #21
 8009746:	428f      	cmp	r7, r1
 8009748:	bf38      	it	cc
 800974a:	2204      	movcc	r2, #4
 800974c:	9201      	str	r2, [sp, #4]
 800974e:	9a02      	ldr	r2, [sp, #8]
 8009750:	9303      	str	r3, [sp, #12]
 8009752:	429a      	cmp	r2, r3
 8009754:	d80c      	bhi.n	8009770 <__multiply+0x9c>
 8009756:	2e00      	cmp	r6, #0
 8009758:	dd03      	ble.n	8009762 <__multiply+0x8e>
 800975a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800975e:	2b00      	cmp	r3, #0
 8009760:	d059      	beq.n	8009816 <__multiply+0x142>
 8009762:	6106      	str	r6, [r0, #16]
 8009764:	b005      	add	sp, #20
 8009766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800976a:	f843 2b04 	str.w	r2, [r3], #4
 800976e:	e7d8      	b.n	8009722 <__multiply+0x4e>
 8009770:	f8b3 a000 	ldrh.w	sl, [r3]
 8009774:	f1ba 0f00 	cmp.w	sl, #0
 8009778:	d023      	beq.n	80097c2 <__multiply+0xee>
 800977a:	46a9      	mov	r9, r5
 800977c:	f04f 0c00 	mov.w	ip, #0
 8009780:	f104 0e14 	add.w	lr, r4, #20
 8009784:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009788:	f8d9 1000 	ldr.w	r1, [r9]
 800978c:	fa1f fb82 	uxth.w	fp, r2
 8009790:	b289      	uxth	r1, r1
 8009792:	fb0a 110b 	mla	r1, sl, fp, r1
 8009796:	4461      	add	r1, ip
 8009798:	f8d9 c000 	ldr.w	ip, [r9]
 800979c:	0c12      	lsrs	r2, r2, #16
 800979e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80097a2:	fb0a c202 	mla	r2, sl, r2, ip
 80097a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80097aa:	b289      	uxth	r1, r1
 80097ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80097b0:	4577      	cmp	r7, lr
 80097b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80097b6:	f849 1b04 	str.w	r1, [r9], #4
 80097ba:	d8e3      	bhi.n	8009784 <__multiply+0xb0>
 80097bc:	9a01      	ldr	r2, [sp, #4]
 80097be:	f845 c002 	str.w	ip, [r5, r2]
 80097c2:	9a03      	ldr	r2, [sp, #12]
 80097c4:	3304      	adds	r3, #4
 80097c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80097ca:	f1b9 0f00 	cmp.w	r9, #0
 80097ce:	d020      	beq.n	8009812 <__multiply+0x13e>
 80097d0:	46ae      	mov	lr, r5
 80097d2:	f04f 0a00 	mov.w	sl, #0
 80097d6:	6829      	ldr	r1, [r5, #0]
 80097d8:	f104 0c14 	add.w	ip, r4, #20
 80097dc:	f8bc b000 	ldrh.w	fp, [ip]
 80097e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80097e4:	b289      	uxth	r1, r1
 80097e6:	fb09 220b 	mla	r2, r9, fp, r2
 80097ea:	4492      	add	sl, r2
 80097ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80097f0:	f84e 1b04 	str.w	r1, [lr], #4
 80097f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80097f8:	f8be 1000 	ldrh.w	r1, [lr]
 80097fc:	0c12      	lsrs	r2, r2, #16
 80097fe:	fb09 1102 	mla	r1, r9, r2, r1
 8009802:	4567      	cmp	r7, ip
 8009804:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009808:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800980c:	d8e6      	bhi.n	80097dc <__multiply+0x108>
 800980e:	9a01      	ldr	r2, [sp, #4]
 8009810:	50a9      	str	r1, [r5, r2]
 8009812:	3504      	adds	r5, #4
 8009814:	e79b      	b.n	800974e <__multiply+0x7a>
 8009816:	3e01      	subs	r6, #1
 8009818:	e79d      	b.n	8009756 <__multiply+0x82>
 800981a:	bf00      	nop
 800981c:	0800acd8 	.word	0x0800acd8
 8009820:	0800ad64 	.word	0x0800ad64

08009824 <__pow5mult>:
 8009824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009828:	4615      	mov	r5, r2
 800982a:	f012 0203 	ands.w	r2, r2, #3
 800982e:	4606      	mov	r6, r0
 8009830:	460f      	mov	r7, r1
 8009832:	d007      	beq.n	8009844 <__pow5mult+0x20>
 8009834:	4c25      	ldr	r4, [pc, #148]	; (80098cc <__pow5mult+0xa8>)
 8009836:	3a01      	subs	r2, #1
 8009838:	2300      	movs	r3, #0
 800983a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800983e:	f7ff fe55 	bl	80094ec <__multadd>
 8009842:	4607      	mov	r7, r0
 8009844:	10ad      	asrs	r5, r5, #2
 8009846:	d03d      	beq.n	80098c4 <__pow5mult+0xa0>
 8009848:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800984a:	b97c      	cbnz	r4, 800986c <__pow5mult+0x48>
 800984c:	2010      	movs	r0, #16
 800984e:	f7ff fdb5 	bl	80093bc <malloc>
 8009852:	4602      	mov	r2, r0
 8009854:	6270      	str	r0, [r6, #36]	; 0x24
 8009856:	b928      	cbnz	r0, 8009864 <__pow5mult+0x40>
 8009858:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800985c:	4b1c      	ldr	r3, [pc, #112]	; (80098d0 <__pow5mult+0xac>)
 800985e:	481d      	ldr	r0, [pc, #116]	; (80098d4 <__pow5mult+0xb0>)
 8009860:	f7fe fb96 	bl	8007f90 <__assert_func>
 8009864:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009868:	6004      	str	r4, [r0, #0]
 800986a:	60c4      	str	r4, [r0, #12]
 800986c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009870:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009874:	b94c      	cbnz	r4, 800988a <__pow5mult+0x66>
 8009876:	f240 2171 	movw	r1, #625	; 0x271
 800987a:	4630      	mov	r0, r6
 800987c:	f7ff ff14 	bl	80096a8 <__i2b>
 8009880:	2300      	movs	r3, #0
 8009882:	4604      	mov	r4, r0
 8009884:	f8c8 0008 	str.w	r0, [r8, #8]
 8009888:	6003      	str	r3, [r0, #0]
 800988a:	f04f 0900 	mov.w	r9, #0
 800988e:	07eb      	lsls	r3, r5, #31
 8009890:	d50a      	bpl.n	80098a8 <__pow5mult+0x84>
 8009892:	4639      	mov	r1, r7
 8009894:	4622      	mov	r2, r4
 8009896:	4630      	mov	r0, r6
 8009898:	f7ff ff1c 	bl	80096d4 <__multiply>
 800989c:	4680      	mov	r8, r0
 800989e:	4639      	mov	r1, r7
 80098a0:	4630      	mov	r0, r6
 80098a2:	f7ff fe01 	bl	80094a8 <_Bfree>
 80098a6:	4647      	mov	r7, r8
 80098a8:	106d      	asrs	r5, r5, #1
 80098aa:	d00b      	beq.n	80098c4 <__pow5mult+0xa0>
 80098ac:	6820      	ldr	r0, [r4, #0]
 80098ae:	b938      	cbnz	r0, 80098c0 <__pow5mult+0x9c>
 80098b0:	4622      	mov	r2, r4
 80098b2:	4621      	mov	r1, r4
 80098b4:	4630      	mov	r0, r6
 80098b6:	f7ff ff0d 	bl	80096d4 <__multiply>
 80098ba:	6020      	str	r0, [r4, #0]
 80098bc:	f8c0 9000 	str.w	r9, [r0]
 80098c0:	4604      	mov	r4, r0
 80098c2:	e7e4      	b.n	800988e <__pow5mult+0x6a>
 80098c4:	4638      	mov	r0, r7
 80098c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098ca:	bf00      	nop
 80098cc:	0800aeb0 	.word	0x0800aeb0
 80098d0:	0800abc0 	.word	0x0800abc0
 80098d4:	0800ad64 	.word	0x0800ad64

080098d8 <__lshift>:
 80098d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098dc:	460c      	mov	r4, r1
 80098de:	4607      	mov	r7, r0
 80098e0:	4691      	mov	r9, r2
 80098e2:	6923      	ldr	r3, [r4, #16]
 80098e4:	6849      	ldr	r1, [r1, #4]
 80098e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80098ea:	68a3      	ldr	r3, [r4, #8]
 80098ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80098f0:	f108 0601 	add.w	r6, r8, #1
 80098f4:	42b3      	cmp	r3, r6
 80098f6:	db0b      	blt.n	8009910 <__lshift+0x38>
 80098f8:	4638      	mov	r0, r7
 80098fa:	f7ff fd95 	bl	8009428 <_Balloc>
 80098fe:	4605      	mov	r5, r0
 8009900:	b948      	cbnz	r0, 8009916 <__lshift+0x3e>
 8009902:	4602      	mov	r2, r0
 8009904:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009908:	4b29      	ldr	r3, [pc, #164]	; (80099b0 <__lshift+0xd8>)
 800990a:	482a      	ldr	r0, [pc, #168]	; (80099b4 <__lshift+0xdc>)
 800990c:	f7fe fb40 	bl	8007f90 <__assert_func>
 8009910:	3101      	adds	r1, #1
 8009912:	005b      	lsls	r3, r3, #1
 8009914:	e7ee      	b.n	80098f4 <__lshift+0x1c>
 8009916:	2300      	movs	r3, #0
 8009918:	f100 0114 	add.w	r1, r0, #20
 800991c:	f100 0210 	add.w	r2, r0, #16
 8009920:	4618      	mov	r0, r3
 8009922:	4553      	cmp	r3, sl
 8009924:	db37      	blt.n	8009996 <__lshift+0xbe>
 8009926:	6920      	ldr	r0, [r4, #16]
 8009928:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800992c:	f104 0314 	add.w	r3, r4, #20
 8009930:	f019 091f 	ands.w	r9, r9, #31
 8009934:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009938:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800993c:	d02f      	beq.n	800999e <__lshift+0xc6>
 800993e:	468a      	mov	sl, r1
 8009940:	f04f 0c00 	mov.w	ip, #0
 8009944:	f1c9 0e20 	rsb	lr, r9, #32
 8009948:	681a      	ldr	r2, [r3, #0]
 800994a:	fa02 f209 	lsl.w	r2, r2, r9
 800994e:	ea42 020c 	orr.w	r2, r2, ip
 8009952:	f84a 2b04 	str.w	r2, [sl], #4
 8009956:	f853 2b04 	ldr.w	r2, [r3], #4
 800995a:	4298      	cmp	r0, r3
 800995c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009960:	d8f2      	bhi.n	8009948 <__lshift+0x70>
 8009962:	1b03      	subs	r3, r0, r4
 8009964:	3b15      	subs	r3, #21
 8009966:	f023 0303 	bic.w	r3, r3, #3
 800996a:	3304      	adds	r3, #4
 800996c:	f104 0215 	add.w	r2, r4, #21
 8009970:	4290      	cmp	r0, r2
 8009972:	bf38      	it	cc
 8009974:	2304      	movcc	r3, #4
 8009976:	f841 c003 	str.w	ip, [r1, r3]
 800997a:	f1bc 0f00 	cmp.w	ip, #0
 800997e:	d001      	beq.n	8009984 <__lshift+0xac>
 8009980:	f108 0602 	add.w	r6, r8, #2
 8009984:	3e01      	subs	r6, #1
 8009986:	4638      	mov	r0, r7
 8009988:	4621      	mov	r1, r4
 800998a:	612e      	str	r6, [r5, #16]
 800998c:	f7ff fd8c 	bl	80094a8 <_Bfree>
 8009990:	4628      	mov	r0, r5
 8009992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009996:	f842 0f04 	str.w	r0, [r2, #4]!
 800999a:	3301      	adds	r3, #1
 800999c:	e7c1      	b.n	8009922 <__lshift+0x4a>
 800999e:	3904      	subs	r1, #4
 80099a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80099a4:	4298      	cmp	r0, r3
 80099a6:	f841 2f04 	str.w	r2, [r1, #4]!
 80099aa:	d8f9      	bhi.n	80099a0 <__lshift+0xc8>
 80099ac:	e7ea      	b.n	8009984 <__lshift+0xac>
 80099ae:	bf00      	nop
 80099b0:	0800acd8 	.word	0x0800acd8
 80099b4:	0800ad64 	.word	0x0800ad64

080099b8 <__mcmp>:
 80099b8:	4603      	mov	r3, r0
 80099ba:	690a      	ldr	r2, [r1, #16]
 80099bc:	6900      	ldr	r0, [r0, #16]
 80099be:	b530      	push	{r4, r5, lr}
 80099c0:	1a80      	subs	r0, r0, r2
 80099c2:	d10d      	bne.n	80099e0 <__mcmp+0x28>
 80099c4:	3314      	adds	r3, #20
 80099c6:	3114      	adds	r1, #20
 80099c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80099cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80099d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80099d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80099d8:	4295      	cmp	r5, r2
 80099da:	d002      	beq.n	80099e2 <__mcmp+0x2a>
 80099dc:	d304      	bcc.n	80099e8 <__mcmp+0x30>
 80099de:	2001      	movs	r0, #1
 80099e0:	bd30      	pop	{r4, r5, pc}
 80099e2:	42a3      	cmp	r3, r4
 80099e4:	d3f4      	bcc.n	80099d0 <__mcmp+0x18>
 80099e6:	e7fb      	b.n	80099e0 <__mcmp+0x28>
 80099e8:	f04f 30ff 	mov.w	r0, #4294967295
 80099ec:	e7f8      	b.n	80099e0 <__mcmp+0x28>
	...

080099f0 <__mdiff>:
 80099f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f4:	460d      	mov	r5, r1
 80099f6:	4607      	mov	r7, r0
 80099f8:	4611      	mov	r1, r2
 80099fa:	4628      	mov	r0, r5
 80099fc:	4614      	mov	r4, r2
 80099fe:	f7ff ffdb 	bl	80099b8 <__mcmp>
 8009a02:	1e06      	subs	r6, r0, #0
 8009a04:	d111      	bne.n	8009a2a <__mdiff+0x3a>
 8009a06:	4631      	mov	r1, r6
 8009a08:	4638      	mov	r0, r7
 8009a0a:	f7ff fd0d 	bl	8009428 <_Balloc>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	b928      	cbnz	r0, 8009a1e <__mdiff+0x2e>
 8009a12:	f240 2132 	movw	r1, #562	; 0x232
 8009a16:	4b3a      	ldr	r3, [pc, #232]	; (8009b00 <__mdiff+0x110>)
 8009a18:	483a      	ldr	r0, [pc, #232]	; (8009b04 <__mdiff+0x114>)
 8009a1a:	f7fe fab9 	bl	8007f90 <__assert_func>
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009a24:	4610      	mov	r0, r2
 8009a26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a2a:	bfa4      	itt	ge
 8009a2c:	4623      	movge	r3, r4
 8009a2e:	462c      	movge	r4, r5
 8009a30:	4638      	mov	r0, r7
 8009a32:	6861      	ldr	r1, [r4, #4]
 8009a34:	bfa6      	itte	ge
 8009a36:	461d      	movge	r5, r3
 8009a38:	2600      	movge	r6, #0
 8009a3a:	2601      	movlt	r6, #1
 8009a3c:	f7ff fcf4 	bl	8009428 <_Balloc>
 8009a40:	4602      	mov	r2, r0
 8009a42:	b918      	cbnz	r0, 8009a4c <__mdiff+0x5c>
 8009a44:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009a48:	4b2d      	ldr	r3, [pc, #180]	; (8009b00 <__mdiff+0x110>)
 8009a4a:	e7e5      	b.n	8009a18 <__mdiff+0x28>
 8009a4c:	f102 0814 	add.w	r8, r2, #20
 8009a50:	46c2      	mov	sl, r8
 8009a52:	f04f 0c00 	mov.w	ip, #0
 8009a56:	6927      	ldr	r7, [r4, #16]
 8009a58:	60c6      	str	r6, [r0, #12]
 8009a5a:	692e      	ldr	r6, [r5, #16]
 8009a5c:	f104 0014 	add.w	r0, r4, #20
 8009a60:	f105 0914 	add.w	r9, r5, #20
 8009a64:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009a68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009a6c:	3410      	adds	r4, #16
 8009a6e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009a72:	f859 3b04 	ldr.w	r3, [r9], #4
 8009a76:	fa1f f18b 	uxth.w	r1, fp
 8009a7a:	448c      	add	ip, r1
 8009a7c:	b299      	uxth	r1, r3
 8009a7e:	0c1b      	lsrs	r3, r3, #16
 8009a80:	ebac 0101 	sub.w	r1, ip, r1
 8009a84:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009a88:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009a8c:	b289      	uxth	r1, r1
 8009a8e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009a92:	454e      	cmp	r6, r9
 8009a94:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009a98:	f84a 3b04 	str.w	r3, [sl], #4
 8009a9c:	d8e7      	bhi.n	8009a6e <__mdiff+0x7e>
 8009a9e:	1b73      	subs	r3, r6, r5
 8009aa0:	3b15      	subs	r3, #21
 8009aa2:	f023 0303 	bic.w	r3, r3, #3
 8009aa6:	3515      	adds	r5, #21
 8009aa8:	3304      	adds	r3, #4
 8009aaa:	42ae      	cmp	r6, r5
 8009aac:	bf38      	it	cc
 8009aae:	2304      	movcc	r3, #4
 8009ab0:	4418      	add	r0, r3
 8009ab2:	4443      	add	r3, r8
 8009ab4:	461e      	mov	r6, r3
 8009ab6:	4605      	mov	r5, r0
 8009ab8:	4575      	cmp	r5, lr
 8009aba:	d30e      	bcc.n	8009ada <__mdiff+0xea>
 8009abc:	f10e 0103 	add.w	r1, lr, #3
 8009ac0:	1a09      	subs	r1, r1, r0
 8009ac2:	f021 0103 	bic.w	r1, r1, #3
 8009ac6:	3803      	subs	r0, #3
 8009ac8:	4586      	cmp	lr, r0
 8009aca:	bf38      	it	cc
 8009acc:	2100      	movcc	r1, #0
 8009ace:	4419      	add	r1, r3
 8009ad0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009ad4:	b18b      	cbz	r3, 8009afa <__mdiff+0x10a>
 8009ad6:	6117      	str	r7, [r2, #16]
 8009ad8:	e7a4      	b.n	8009a24 <__mdiff+0x34>
 8009ada:	f855 8b04 	ldr.w	r8, [r5], #4
 8009ade:	fa1f f188 	uxth.w	r1, r8
 8009ae2:	4461      	add	r1, ip
 8009ae4:	140c      	asrs	r4, r1, #16
 8009ae6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009aea:	b289      	uxth	r1, r1
 8009aec:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009af0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009af4:	f846 1b04 	str.w	r1, [r6], #4
 8009af8:	e7de      	b.n	8009ab8 <__mdiff+0xc8>
 8009afa:	3f01      	subs	r7, #1
 8009afc:	e7e8      	b.n	8009ad0 <__mdiff+0xe0>
 8009afe:	bf00      	nop
 8009b00:	0800acd8 	.word	0x0800acd8
 8009b04:	0800ad64 	.word	0x0800ad64

08009b08 <__ulp>:
 8009b08:	4b11      	ldr	r3, [pc, #68]	; (8009b50 <__ulp+0x48>)
 8009b0a:	400b      	ands	r3, r1
 8009b0c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	dd02      	ble.n	8009b1a <__ulp+0x12>
 8009b14:	2000      	movs	r0, #0
 8009b16:	4619      	mov	r1, r3
 8009b18:	4770      	bx	lr
 8009b1a:	425b      	negs	r3, r3
 8009b1c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009b20:	f04f 0000 	mov.w	r0, #0
 8009b24:	f04f 0100 	mov.w	r1, #0
 8009b28:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009b2c:	da04      	bge.n	8009b38 <__ulp+0x30>
 8009b2e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009b32:	fa43 f102 	asr.w	r1, r3, r2
 8009b36:	4770      	bx	lr
 8009b38:	f1a2 0314 	sub.w	r3, r2, #20
 8009b3c:	2b1e      	cmp	r3, #30
 8009b3e:	bfd6      	itet	le
 8009b40:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009b44:	2301      	movgt	r3, #1
 8009b46:	fa22 f303 	lsrle.w	r3, r2, r3
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	4770      	bx	lr
 8009b4e:	bf00      	nop
 8009b50:	7ff00000 	.word	0x7ff00000

08009b54 <__b2d>:
 8009b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b58:	6907      	ldr	r7, [r0, #16]
 8009b5a:	f100 0914 	add.w	r9, r0, #20
 8009b5e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009b62:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009b66:	f1a7 0804 	sub.w	r8, r7, #4
 8009b6a:	4630      	mov	r0, r6
 8009b6c:	f7ff fd4e 	bl	800960c <__hi0bits>
 8009b70:	f1c0 0320 	rsb	r3, r0, #32
 8009b74:	280a      	cmp	r0, #10
 8009b76:	600b      	str	r3, [r1, #0]
 8009b78:	491f      	ldr	r1, [pc, #124]	; (8009bf8 <__b2d+0xa4>)
 8009b7a:	dc17      	bgt.n	8009bac <__b2d+0x58>
 8009b7c:	45c1      	cmp	r9, r8
 8009b7e:	bf28      	it	cs
 8009b80:	2200      	movcs	r2, #0
 8009b82:	f1c0 0c0b 	rsb	ip, r0, #11
 8009b86:	fa26 f30c 	lsr.w	r3, r6, ip
 8009b8a:	bf38      	it	cc
 8009b8c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009b90:	ea43 0501 	orr.w	r5, r3, r1
 8009b94:	f100 0315 	add.w	r3, r0, #21
 8009b98:	fa06 f303 	lsl.w	r3, r6, r3
 8009b9c:	fa22 f20c 	lsr.w	r2, r2, ip
 8009ba0:	ea43 0402 	orr.w	r4, r3, r2
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	4629      	mov	r1, r5
 8009ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bac:	45c1      	cmp	r9, r8
 8009bae:	bf2e      	itee	cs
 8009bb0:	2200      	movcs	r2, #0
 8009bb2:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009bb6:	f1a7 0808 	subcc.w	r8, r7, #8
 8009bba:	f1b0 030b 	subs.w	r3, r0, #11
 8009bbe:	d016      	beq.n	8009bee <__b2d+0x9a>
 8009bc0:	f1c3 0720 	rsb	r7, r3, #32
 8009bc4:	fa22 f107 	lsr.w	r1, r2, r7
 8009bc8:	45c8      	cmp	r8, r9
 8009bca:	fa06 f603 	lsl.w	r6, r6, r3
 8009bce:	ea46 0601 	orr.w	r6, r6, r1
 8009bd2:	bf94      	ite	ls
 8009bd4:	2100      	movls	r1, #0
 8009bd6:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009bda:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8009bde:	fa02 f003 	lsl.w	r0, r2, r3
 8009be2:	40f9      	lsrs	r1, r7
 8009be4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009be8:	ea40 0401 	orr.w	r4, r0, r1
 8009bec:	e7da      	b.n	8009ba4 <__b2d+0x50>
 8009bee:	4614      	mov	r4, r2
 8009bf0:	ea46 0501 	orr.w	r5, r6, r1
 8009bf4:	e7d6      	b.n	8009ba4 <__b2d+0x50>
 8009bf6:	bf00      	nop
 8009bf8:	3ff00000 	.word	0x3ff00000

08009bfc <__d2b>:
 8009bfc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009c00:	2101      	movs	r1, #1
 8009c02:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009c06:	4690      	mov	r8, r2
 8009c08:	461d      	mov	r5, r3
 8009c0a:	f7ff fc0d 	bl	8009428 <_Balloc>
 8009c0e:	4604      	mov	r4, r0
 8009c10:	b930      	cbnz	r0, 8009c20 <__d2b+0x24>
 8009c12:	4602      	mov	r2, r0
 8009c14:	f240 310a 	movw	r1, #778	; 0x30a
 8009c18:	4b24      	ldr	r3, [pc, #144]	; (8009cac <__d2b+0xb0>)
 8009c1a:	4825      	ldr	r0, [pc, #148]	; (8009cb0 <__d2b+0xb4>)
 8009c1c:	f7fe f9b8 	bl	8007f90 <__assert_func>
 8009c20:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009c24:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009c28:	bb2d      	cbnz	r5, 8009c76 <__d2b+0x7a>
 8009c2a:	9301      	str	r3, [sp, #4]
 8009c2c:	f1b8 0300 	subs.w	r3, r8, #0
 8009c30:	d026      	beq.n	8009c80 <__d2b+0x84>
 8009c32:	4668      	mov	r0, sp
 8009c34:	9300      	str	r3, [sp, #0]
 8009c36:	f7ff fd09 	bl	800964c <__lo0bits>
 8009c3a:	9900      	ldr	r1, [sp, #0]
 8009c3c:	b1f0      	cbz	r0, 8009c7c <__d2b+0x80>
 8009c3e:	9a01      	ldr	r2, [sp, #4]
 8009c40:	f1c0 0320 	rsb	r3, r0, #32
 8009c44:	fa02 f303 	lsl.w	r3, r2, r3
 8009c48:	430b      	orrs	r3, r1
 8009c4a:	40c2      	lsrs	r2, r0
 8009c4c:	6163      	str	r3, [r4, #20]
 8009c4e:	9201      	str	r2, [sp, #4]
 8009c50:	9b01      	ldr	r3, [sp, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	bf14      	ite	ne
 8009c56:	2102      	movne	r1, #2
 8009c58:	2101      	moveq	r1, #1
 8009c5a:	61a3      	str	r3, [r4, #24]
 8009c5c:	6121      	str	r1, [r4, #16]
 8009c5e:	b1c5      	cbz	r5, 8009c92 <__d2b+0x96>
 8009c60:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009c64:	4405      	add	r5, r0
 8009c66:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c6a:	603d      	str	r5, [r7, #0]
 8009c6c:	6030      	str	r0, [r6, #0]
 8009c6e:	4620      	mov	r0, r4
 8009c70:	b002      	add	sp, #8
 8009c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c7a:	e7d6      	b.n	8009c2a <__d2b+0x2e>
 8009c7c:	6161      	str	r1, [r4, #20]
 8009c7e:	e7e7      	b.n	8009c50 <__d2b+0x54>
 8009c80:	a801      	add	r0, sp, #4
 8009c82:	f7ff fce3 	bl	800964c <__lo0bits>
 8009c86:	2101      	movs	r1, #1
 8009c88:	9b01      	ldr	r3, [sp, #4]
 8009c8a:	6121      	str	r1, [r4, #16]
 8009c8c:	6163      	str	r3, [r4, #20]
 8009c8e:	3020      	adds	r0, #32
 8009c90:	e7e5      	b.n	8009c5e <__d2b+0x62>
 8009c92:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009c96:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c9a:	6038      	str	r0, [r7, #0]
 8009c9c:	6918      	ldr	r0, [r3, #16]
 8009c9e:	f7ff fcb5 	bl	800960c <__hi0bits>
 8009ca2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009ca6:	6031      	str	r1, [r6, #0]
 8009ca8:	e7e1      	b.n	8009c6e <__d2b+0x72>
 8009caa:	bf00      	nop
 8009cac:	0800acd8 	.word	0x0800acd8
 8009cb0:	0800ad64 	.word	0x0800ad64

08009cb4 <__ratio>:
 8009cb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb8:	4688      	mov	r8, r1
 8009cba:	4669      	mov	r1, sp
 8009cbc:	4681      	mov	r9, r0
 8009cbe:	f7ff ff49 	bl	8009b54 <__b2d>
 8009cc2:	460f      	mov	r7, r1
 8009cc4:	4604      	mov	r4, r0
 8009cc6:	460d      	mov	r5, r1
 8009cc8:	4640      	mov	r0, r8
 8009cca:	a901      	add	r1, sp, #4
 8009ccc:	f7ff ff42 	bl	8009b54 <__b2d>
 8009cd0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009cd4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009cd8:	468b      	mov	fp, r1
 8009cda:	eba3 0c02 	sub.w	ip, r3, r2
 8009cde:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009ce2:	1a9b      	subs	r3, r3, r2
 8009ce4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	bfd5      	itete	le
 8009cec:	460a      	movle	r2, r1
 8009cee:	462a      	movgt	r2, r5
 8009cf0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009cf4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009cf8:	bfd8      	it	le
 8009cfa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009cfe:	465b      	mov	r3, fp
 8009d00:	4602      	mov	r2, r0
 8009d02:	4639      	mov	r1, r7
 8009d04:	4620      	mov	r0, r4
 8009d06:	f7f6 fd1b 	bl	8000740 <__aeabi_ddiv>
 8009d0a:	b003      	add	sp, #12
 8009d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d10 <__copybits>:
 8009d10:	3901      	subs	r1, #1
 8009d12:	b570      	push	{r4, r5, r6, lr}
 8009d14:	1149      	asrs	r1, r1, #5
 8009d16:	6914      	ldr	r4, [r2, #16]
 8009d18:	3101      	adds	r1, #1
 8009d1a:	f102 0314 	add.w	r3, r2, #20
 8009d1e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009d22:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009d26:	1f05      	subs	r5, r0, #4
 8009d28:	42a3      	cmp	r3, r4
 8009d2a:	d30c      	bcc.n	8009d46 <__copybits+0x36>
 8009d2c:	1aa3      	subs	r3, r4, r2
 8009d2e:	3b11      	subs	r3, #17
 8009d30:	f023 0303 	bic.w	r3, r3, #3
 8009d34:	3211      	adds	r2, #17
 8009d36:	42a2      	cmp	r2, r4
 8009d38:	bf88      	it	hi
 8009d3a:	2300      	movhi	r3, #0
 8009d3c:	4418      	add	r0, r3
 8009d3e:	2300      	movs	r3, #0
 8009d40:	4288      	cmp	r0, r1
 8009d42:	d305      	bcc.n	8009d50 <__copybits+0x40>
 8009d44:	bd70      	pop	{r4, r5, r6, pc}
 8009d46:	f853 6b04 	ldr.w	r6, [r3], #4
 8009d4a:	f845 6f04 	str.w	r6, [r5, #4]!
 8009d4e:	e7eb      	b.n	8009d28 <__copybits+0x18>
 8009d50:	f840 3b04 	str.w	r3, [r0], #4
 8009d54:	e7f4      	b.n	8009d40 <__copybits+0x30>

08009d56 <__any_on>:
 8009d56:	f100 0214 	add.w	r2, r0, #20
 8009d5a:	6900      	ldr	r0, [r0, #16]
 8009d5c:	114b      	asrs	r3, r1, #5
 8009d5e:	4298      	cmp	r0, r3
 8009d60:	b510      	push	{r4, lr}
 8009d62:	db11      	blt.n	8009d88 <__any_on+0x32>
 8009d64:	dd0a      	ble.n	8009d7c <__any_on+0x26>
 8009d66:	f011 011f 	ands.w	r1, r1, #31
 8009d6a:	d007      	beq.n	8009d7c <__any_on+0x26>
 8009d6c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009d70:	fa24 f001 	lsr.w	r0, r4, r1
 8009d74:	fa00 f101 	lsl.w	r1, r0, r1
 8009d78:	428c      	cmp	r4, r1
 8009d7a:	d10b      	bne.n	8009d94 <__any_on+0x3e>
 8009d7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d803      	bhi.n	8009d8c <__any_on+0x36>
 8009d84:	2000      	movs	r0, #0
 8009d86:	bd10      	pop	{r4, pc}
 8009d88:	4603      	mov	r3, r0
 8009d8a:	e7f7      	b.n	8009d7c <__any_on+0x26>
 8009d8c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d90:	2900      	cmp	r1, #0
 8009d92:	d0f5      	beq.n	8009d80 <__any_on+0x2a>
 8009d94:	2001      	movs	r0, #1
 8009d96:	e7f6      	b.n	8009d86 <__any_on+0x30>

08009d98 <_calloc_r>:
 8009d98:	b570      	push	{r4, r5, r6, lr}
 8009d9a:	fba1 5402 	umull	r5, r4, r1, r2
 8009d9e:	b934      	cbnz	r4, 8009dae <_calloc_r+0x16>
 8009da0:	4629      	mov	r1, r5
 8009da2:	f000 f875 	bl	8009e90 <_malloc_r>
 8009da6:	4606      	mov	r6, r0
 8009da8:	b928      	cbnz	r0, 8009db6 <_calloc_r+0x1e>
 8009daa:	4630      	mov	r0, r6
 8009dac:	bd70      	pop	{r4, r5, r6, pc}
 8009dae:	220c      	movs	r2, #12
 8009db0:	2600      	movs	r6, #0
 8009db2:	6002      	str	r2, [r0, #0]
 8009db4:	e7f9      	b.n	8009daa <_calloc_r+0x12>
 8009db6:	462a      	mov	r2, r5
 8009db8:	4621      	mov	r1, r4
 8009dba:	f7fc fe0d 	bl	80069d8 <memset>
 8009dbe:	e7f4      	b.n	8009daa <_calloc_r+0x12>

08009dc0 <_free_r>:
 8009dc0:	b538      	push	{r3, r4, r5, lr}
 8009dc2:	4605      	mov	r5, r0
 8009dc4:	2900      	cmp	r1, #0
 8009dc6:	d040      	beq.n	8009e4a <_free_r+0x8a>
 8009dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dcc:	1f0c      	subs	r4, r1, #4
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	bfb8      	it	lt
 8009dd2:	18e4      	addlt	r4, r4, r3
 8009dd4:	f000 fd44 	bl	800a860 <__malloc_lock>
 8009dd8:	4a1c      	ldr	r2, [pc, #112]	; (8009e4c <_free_r+0x8c>)
 8009dda:	6813      	ldr	r3, [r2, #0]
 8009ddc:	b933      	cbnz	r3, 8009dec <_free_r+0x2c>
 8009dde:	6063      	str	r3, [r4, #4]
 8009de0:	6014      	str	r4, [r2, #0]
 8009de2:	4628      	mov	r0, r5
 8009de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009de8:	f000 bd40 	b.w	800a86c <__malloc_unlock>
 8009dec:	42a3      	cmp	r3, r4
 8009dee:	d908      	bls.n	8009e02 <_free_r+0x42>
 8009df0:	6820      	ldr	r0, [r4, #0]
 8009df2:	1821      	adds	r1, r4, r0
 8009df4:	428b      	cmp	r3, r1
 8009df6:	bf01      	itttt	eq
 8009df8:	6819      	ldreq	r1, [r3, #0]
 8009dfa:	685b      	ldreq	r3, [r3, #4]
 8009dfc:	1809      	addeq	r1, r1, r0
 8009dfe:	6021      	streq	r1, [r4, #0]
 8009e00:	e7ed      	b.n	8009dde <_free_r+0x1e>
 8009e02:	461a      	mov	r2, r3
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	b10b      	cbz	r3, 8009e0c <_free_r+0x4c>
 8009e08:	42a3      	cmp	r3, r4
 8009e0a:	d9fa      	bls.n	8009e02 <_free_r+0x42>
 8009e0c:	6811      	ldr	r1, [r2, #0]
 8009e0e:	1850      	adds	r0, r2, r1
 8009e10:	42a0      	cmp	r0, r4
 8009e12:	d10b      	bne.n	8009e2c <_free_r+0x6c>
 8009e14:	6820      	ldr	r0, [r4, #0]
 8009e16:	4401      	add	r1, r0
 8009e18:	1850      	adds	r0, r2, r1
 8009e1a:	4283      	cmp	r3, r0
 8009e1c:	6011      	str	r1, [r2, #0]
 8009e1e:	d1e0      	bne.n	8009de2 <_free_r+0x22>
 8009e20:	6818      	ldr	r0, [r3, #0]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	4401      	add	r1, r0
 8009e26:	6011      	str	r1, [r2, #0]
 8009e28:	6053      	str	r3, [r2, #4]
 8009e2a:	e7da      	b.n	8009de2 <_free_r+0x22>
 8009e2c:	d902      	bls.n	8009e34 <_free_r+0x74>
 8009e2e:	230c      	movs	r3, #12
 8009e30:	602b      	str	r3, [r5, #0]
 8009e32:	e7d6      	b.n	8009de2 <_free_r+0x22>
 8009e34:	6820      	ldr	r0, [r4, #0]
 8009e36:	1821      	adds	r1, r4, r0
 8009e38:	428b      	cmp	r3, r1
 8009e3a:	bf01      	itttt	eq
 8009e3c:	6819      	ldreq	r1, [r3, #0]
 8009e3e:	685b      	ldreq	r3, [r3, #4]
 8009e40:	1809      	addeq	r1, r1, r0
 8009e42:	6021      	streq	r1, [r4, #0]
 8009e44:	6063      	str	r3, [r4, #4]
 8009e46:	6054      	str	r4, [r2, #4]
 8009e48:	e7cb      	b.n	8009de2 <_free_r+0x22>
 8009e4a:	bd38      	pop	{r3, r4, r5, pc}
 8009e4c:	200004e0 	.word	0x200004e0

08009e50 <sbrk_aligned>:
 8009e50:	b570      	push	{r4, r5, r6, lr}
 8009e52:	4e0e      	ldr	r6, [pc, #56]	; (8009e8c <sbrk_aligned+0x3c>)
 8009e54:	460c      	mov	r4, r1
 8009e56:	6831      	ldr	r1, [r6, #0]
 8009e58:	4605      	mov	r5, r0
 8009e5a:	b911      	cbnz	r1, 8009e62 <sbrk_aligned+0x12>
 8009e5c:	f000 f9ea 	bl	800a234 <_sbrk_r>
 8009e60:	6030      	str	r0, [r6, #0]
 8009e62:	4621      	mov	r1, r4
 8009e64:	4628      	mov	r0, r5
 8009e66:	f000 f9e5 	bl	800a234 <_sbrk_r>
 8009e6a:	1c43      	adds	r3, r0, #1
 8009e6c:	d00a      	beq.n	8009e84 <sbrk_aligned+0x34>
 8009e6e:	1cc4      	adds	r4, r0, #3
 8009e70:	f024 0403 	bic.w	r4, r4, #3
 8009e74:	42a0      	cmp	r0, r4
 8009e76:	d007      	beq.n	8009e88 <sbrk_aligned+0x38>
 8009e78:	1a21      	subs	r1, r4, r0
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	f000 f9da 	bl	800a234 <_sbrk_r>
 8009e80:	3001      	adds	r0, #1
 8009e82:	d101      	bne.n	8009e88 <sbrk_aligned+0x38>
 8009e84:	f04f 34ff 	mov.w	r4, #4294967295
 8009e88:	4620      	mov	r0, r4
 8009e8a:	bd70      	pop	{r4, r5, r6, pc}
 8009e8c:	200004e4 	.word	0x200004e4

08009e90 <_malloc_r>:
 8009e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e94:	1ccd      	adds	r5, r1, #3
 8009e96:	f025 0503 	bic.w	r5, r5, #3
 8009e9a:	3508      	adds	r5, #8
 8009e9c:	2d0c      	cmp	r5, #12
 8009e9e:	bf38      	it	cc
 8009ea0:	250c      	movcc	r5, #12
 8009ea2:	2d00      	cmp	r5, #0
 8009ea4:	4607      	mov	r7, r0
 8009ea6:	db01      	blt.n	8009eac <_malloc_r+0x1c>
 8009ea8:	42a9      	cmp	r1, r5
 8009eaa:	d905      	bls.n	8009eb8 <_malloc_r+0x28>
 8009eac:	230c      	movs	r3, #12
 8009eae:	2600      	movs	r6, #0
 8009eb0:	603b      	str	r3, [r7, #0]
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009eb8:	4e2e      	ldr	r6, [pc, #184]	; (8009f74 <_malloc_r+0xe4>)
 8009eba:	f000 fcd1 	bl	800a860 <__malloc_lock>
 8009ebe:	6833      	ldr	r3, [r6, #0]
 8009ec0:	461c      	mov	r4, r3
 8009ec2:	bb34      	cbnz	r4, 8009f12 <_malloc_r+0x82>
 8009ec4:	4629      	mov	r1, r5
 8009ec6:	4638      	mov	r0, r7
 8009ec8:	f7ff ffc2 	bl	8009e50 <sbrk_aligned>
 8009ecc:	1c43      	adds	r3, r0, #1
 8009ece:	4604      	mov	r4, r0
 8009ed0:	d14d      	bne.n	8009f6e <_malloc_r+0xde>
 8009ed2:	6834      	ldr	r4, [r6, #0]
 8009ed4:	4626      	mov	r6, r4
 8009ed6:	2e00      	cmp	r6, #0
 8009ed8:	d140      	bne.n	8009f5c <_malloc_r+0xcc>
 8009eda:	6823      	ldr	r3, [r4, #0]
 8009edc:	4631      	mov	r1, r6
 8009ede:	4638      	mov	r0, r7
 8009ee0:	eb04 0803 	add.w	r8, r4, r3
 8009ee4:	f000 f9a6 	bl	800a234 <_sbrk_r>
 8009ee8:	4580      	cmp	r8, r0
 8009eea:	d13a      	bne.n	8009f62 <_malloc_r+0xd2>
 8009eec:	6821      	ldr	r1, [r4, #0]
 8009eee:	3503      	adds	r5, #3
 8009ef0:	1a6d      	subs	r5, r5, r1
 8009ef2:	f025 0503 	bic.w	r5, r5, #3
 8009ef6:	3508      	adds	r5, #8
 8009ef8:	2d0c      	cmp	r5, #12
 8009efa:	bf38      	it	cc
 8009efc:	250c      	movcc	r5, #12
 8009efe:	4638      	mov	r0, r7
 8009f00:	4629      	mov	r1, r5
 8009f02:	f7ff ffa5 	bl	8009e50 <sbrk_aligned>
 8009f06:	3001      	adds	r0, #1
 8009f08:	d02b      	beq.n	8009f62 <_malloc_r+0xd2>
 8009f0a:	6823      	ldr	r3, [r4, #0]
 8009f0c:	442b      	add	r3, r5
 8009f0e:	6023      	str	r3, [r4, #0]
 8009f10:	e00e      	b.n	8009f30 <_malloc_r+0xa0>
 8009f12:	6822      	ldr	r2, [r4, #0]
 8009f14:	1b52      	subs	r2, r2, r5
 8009f16:	d41e      	bmi.n	8009f56 <_malloc_r+0xc6>
 8009f18:	2a0b      	cmp	r2, #11
 8009f1a:	d916      	bls.n	8009f4a <_malloc_r+0xba>
 8009f1c:	1961      	adds	r1, r4, r5
 8009f1e:	42a3      	cmp	r3, r4
 8009f20:	6025      	str	r5, [r4, #0]
 8009f22:	bf18      	it	ne
 8009f24:	6059      	strne	r1, [r3, #4]
 8009f26:	6863      	ldr	r3, [r4, #4]
 8009f28:	bf08      	it	eq
 8009f2a:	6031      	streq	r1, [r6, #0]
 8009f2c:	5162      	str	r2, [r4, r5]
 8009f2e:	604b      	str	r3, [r1, #4]
 8009f30:	4638      	mov	r0, r7
 8009f32:	f104 060b 	add.w	r6, r4, #11
 8009f36:	f000 fc99 	bl	800a86c <__malloc_unlock>
 8009f3a:	f026 0607 	bic.w	r6, r6, #7
 8009f3e:	1d23      	adds	r3, r4, #4
 8009f40:	1af2      	subs	r2, r6, r3
 8009f42:	d0b6      	beq.n	8009eb2 <_malloc_r+0x22>
 8009f44:	1b9b      	subs	r3, r3, r6
 8009f46:	50a3      	str	r3, [r4, r2]
 8009f48:	e7b3      	b.n	8009eb2 <_malloc_r+0x22>
 8009f4a:	6862      	ldr	r2, [r4, #4]
 8009f4c:	42a3      	cmp	r3, r4
 8009f4e:	bf0c      	ite	eq
 8009f50:	6032      	streq	r2, [r6, #0]
 8009f52:	605a      	strne	r2, [r3, #4]
 8009f54:	e7ec      	b.n	8009f30 <_malloc_r+0xa0>
 8009f56:	4623      	mov	r3, r4
 8009f58:	6864      	ldr	r4, [r4, #4]
 8009f5a:	e7b2      	b.n	8009ec2 <_malloc_r+0x32>
 8009f5c:	4634      	mov	r4, r6
 8009f5e:	6876      	ldr	r6, [r6, #4]
 8009f60:	e7b9      	b.n	8009ed6 <_malloc_r+0x46>
 8009f62:	230c      	movs	r3, #12
 8009f64:	4638      	mov	r0, r7
 8009f66:	603b      	str	r3, [r7, #0]
 8009f68:	f000 fc80 	bl	800a86c <__malloc_unlock>
 8009f6c:	e7a1      	b.n	8009eb2 <_malloc_r+0x22>
 8009f6e:	6025      	str	r5, [r4, #0]
 8009f70:	e7de      	b.n	8009f30 <_malloc_r+0xa0>
 8009f72:	bf00      	nop
 8009f74:	200004e0 	.word	0x200004e0

08009f78 <__sfputc_r>:
 8009f78:	6893      	ldr	r3, [r2, #8]
 8009f7a:	b410      	push	{r4}
 8009f7c:	3b01      	subs	r3, #1
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	6093      	str	r3, [r2, #8]
 8009f82:	da07      	bge.n	8009f94 <__sfputc_r+0x1c>
 8009f84:	6994      	ldr	r4, [r2, #24]
 8009f86:	42a3      	cmp	r3, r4
 8009f88:	db01      	blt.n	8009f8e <__sfputc_r+0x16>
 8009f8a:	290a      	cmp	r1, #10
 8009f8c:	d102      	bne.n	8009f94 <__sfputc_r+0x1c>
 8009f8e:	bc10      	pop	{r4}
 8009f90:	f000 b974 	b.w	800a27c <__swbuf_r>
 8009f94:	6813      	ldr	r3, [r2, #0]
 8009f96:	1c58      	adds	r0, r3, #1
 8009f98:	6010      	str	r0, [r2, #0]
 8009f9a:	7019      	strb	r1, [r3, #0]
 8009f9c:	4608      	mov	r0, r1
 8009f9e:	bc10      	pop	{r4}
 8009fa0:	4770      	bx	lr

08009fa2 <__sfputs_r>:
 8009fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa4:	4606      	mov	r6, r0
 8009fa6:	460f      	mov	r7, r1
 8009fa8:	4614      	mov	r4, r2
 8009faa:	18d5      	adds	r5, r2, r3
 8009fac:	42ac      	cmp	r4, r5
 8009fae:	d101      	bne.n	8009fb4 <__sfputs_r+0x12>
 8009fb0:	2000      	movs	r0, #0
 8009fb2:	e007      	b.n	8009fc4 <__sfputs_r+0x22>
 8009fb4:	463a      	mov	r2, r7
 8009fb6:	4630      	mov	r0, r6
 8009fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fbc:	f7ff ffdc 	bl	8009f78 <__sfputc_r>
 8009fc0:	1c43      	adds	r3, r0, #1
 8009fc2:	d1f3      	bne.n	8009fac <__sfputs_r+0xa>
 8009fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009fc8 <_vfiprintf_r>:
 8009fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fcc:	460d      	mov	r5, r1
 8009fce:	4614      	mov	r4, r2
 8009fd0:	4698      	mov	r8, r3
 8009fd2:	4606      	mov	r6, r0
 8009fd4:	b09d      	sub	sp, #116	; 0x74
 8009fd6:	b118      	cbz	r0, 8009fe0 <_vfiprintf_r+0x18>
 8009fd8:	6983      	ldr	r3, [r0, #24]
 8009fda:	b90b      	cbnz	r3, 8009fe0 <_vfiprintf_r+0x18>
 8009fdc:	f000 fb3a 	bl	800a654 <__sinit>
 8009fe0:	4b89      	ldr	r3, [pc, #548]	; (800a208 <_vfiprintf_r+0x240>)
 8009fe2:	429d      	cmp	r5, r3
 8009fe4:	d11b      	bne.n	800a01e <_vfiprintf_r+0x56>
 8009fe6:	6875      	ldr	r5, [r6, #4]
 8009fe8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fea:	07d9      	lsls	r1, r3, #31
 8009fec:	d405      	bmi.n	8009ffa <_vfiprintf_r+0x32>
 8009fee:	89ab      	ldrh	r3, [r5, #12]
 8009ff0:	059a      	lsls	r2, r3, #22
 8009ff2:	d402      	bmi.n	8009ffa <_vfiprintf_r+0x32>
 8009ff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ff6:	f000 fbcb 	bl	800a790 <__retarget_lock_acquire_recursive>
 8009ffa:	89ab      	ldrh	r3, [r5, #12]
 8009ffc:	071b      	lsls	r3, r3, #28
 8009ffe:	d501      	bpl.n	800a004 <_vfiprintf_r+0x3c>
 800a000:	692b      	ldr	r3, [r5, #16]
 800a002:	b9eb      	cbnz	r3, 800a040 <_vfiprintf_r+0x78>
 800a004:	4629      	mov	r1, r5
 800a006:	4630      	mov	r0, r6
 800a008:	f000 f998 	bl	800a33c <__swsetup_r>
 800a00c:	b1c0      	cbz	r0, 800a040 <_vfiprintf_r+0x78>
 800a00e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a010:	07dc      	lsls	r4, r3, #31
 800a012:	d50e      	bpl.n	800a032 <_vfiprintf_r+0x6a>
 800a014:	f04f 30ff 	mov.w	r0, #4294967295
 800a018:	b01d      	add	sp, #116	; 0x74
 800a01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a01e:	4b7b      	ldr	r3, [pc, #492]	; (800a20c <_vfiprintf_r+0x244>)
 800a020:	429d      	cmp	r5, r3
 800a022:	d101      	bne.n	800a028 <_vfiprintf_r+0x60>
 800a024:	68b5      	ldr	r5, [r6, #8]
 800a026:	e7df      	b.n	8009fe8 <_vfiprintf_r+0x20>
 800a028:	4b79      	ldr	r3, [pc, #484]	; (800a210 <_vfiprintf_r+0x248>)
 800a02a:	429d      	cmp	r5, r3
 800a02c:	bf08      	it	eq
 800a02e:	68f5      	ldreq	r5, [r6, #12]
 800a030:	e7da      	b.n	8009fe8 <_vfiprintf_r+0x20>
 800a032:	89ab      	ldrh	r3, [r5, #12]
 800a034:	0598      	lsls	r0, r3, #22
 800a036:	d4ed      	bmi.n	800a014 <_vfiprintf_r+0x4c>
 800a038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a03a:	f000 fbaa 	bl	800a792 <__retarget_lock_release_recursive>
 800a03e:	e7e9      	b.n	800a014 <_vfiprintf_r+0x4c>
 800a040:	2300      	movs	r3, #0
 800a042:	9309      	str	r3, [sp, #36]	; 0x24
 800a044:	2320      	movs	r3, #32
 800a046:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a04a:	2330      	movs	r3, #48	; 0x30
 800a04c:	f04f 0901 	mov.w	r9, #1
 800a050:	f8cd 800c 	str.w	r8, [sp, #12]
 800a054:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a214 <_vfiprintf_r+0x24c>
 800a058:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a05c:	4623      	mov	r3, r4
 800a05e:	469a      	mov	sl, r3
 800a060:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a064:	b10a      	cbz	r2, 800a06a <_vfiprintf_r+0xa2>
 800a066:	2a25      	cmp	r2, #37	; 0x25
 800a068:	d1f9      	bne.n	800a05e <_vfiprintf_r+0x96>
 800a06a:	ebba 0b04 	subs.w	fp, sl, r4
 800a06e:	d00b      	beq.n	800a088 <_vfiprintf_r+0xc0>
 800a070:	465b      	mov	r3, fp
 800a072:	4622      	mov	r2, r4
 800a074:	4629      	mov	r1, r5
 800a076:	4630      	mov	r0, r6
 800a078:	f7ff ff93 	bl	8009fa2 <__sfputs_r>
 800a07c:	3001      	adds	r0, #1
 800a07e:	f000 80aa 	beq.w	800a1d6 <_vfiprintf_r+0x20e>
 800a082:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a084:	445a      	add	r2, fp
 800a086:	9209      	str	r2, [sp, #36]	; 0x24
 800a088:	f89a 3000 	ldrb.w	r3, [sl]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	f000 80a2 	beq.w	800a1d6 <_vfiprintf_r+0x20e>
 800a092:	2300      	movs	r3, #0
 800a094:	f04f 32ff 	mov.w	r2, #4294967295
 800a098:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a09c:	f10a 0a01 	add.w	sl, sl, #1
 800a0a0:	9304      	str	r3, [sp, #16]
 800a0a2:	9307      	str	r3, [sp, #28]
 800a0a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0a8:	931a      	str	r3, [sp, #104]	; 0x68
 800a0aa:	4654      	mov	r4, sl
 800a0ac:	2205      	movs	r2, #5
 800a0ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0b2:	4858      	ldr	r0, [pc, #352]	; (800a214 <_vfiprintf_r+0x24c>)
 800a0b4:	f7ff f99c 	bl	80093f0 <memchr>
 800a0b8:	9a04      	ldr	r2, [sp, #16]
 800a0ba:	b9d8      	cbnz	r0, 800a0f4 <_vfiprintf_r+0x12c>
 800a0bc:	06d1      	lsls	r1, r2, #27
 800a0be:	bf44      	itt	mi
 800a0c0:	2320      	movmi	r3, #32
 800a0c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0c6:	0713      	lsls	r3, r2, #28
 800a0c8:	bf44      	itt	mi
 800a0ca:	232b      	movmi	r3, #43	; 0x2b
 800a0cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0d0:	f89a 3000 	ldrb.w	r3, [sl]
 800a0d4:	2b2a      	cmp	r3, #42	; 0x2a
 800a0d6:	d015      	beq.n	800a104 <_vfiprintf_r+0x13c>
 800a0d8:	4654      	mov	r4, sl
 800a0da:	2000      	movs	r0, #0
 800a0dc:	f04f 0c0a 	mov.w	ip, #10
 800a0e0:	9a07      	ldr	r2, [sp, #28]
 800a0e2:	4621      	mov	r1, r4
 800a0e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0e8:	3b30      	subs	r3, #48	; 0x30
 800a0ea:	2b09      	cmp	r3, #9
 800a0ec:	d94e      	bls.n	800a18c <_vfiprintf_r+0x1c4>
 800a0ee:	b1b0      	cbz	r0, 800a11e <_vfiprintf_r+0x156>
 800a0f0:	9207      	str	r2, [sp, #28]
 800a0f2:	e014      	b.n	800a11e <_vfiprintf_r+0x156>
 800a0f4:	eba0 0308 	sub.w	r3, r0, r8
 800a0f8:	fa09 f303 	lsl.w	r3, r9, r3
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	46a2      	mov	sl, r4
 800a100:	9304      	str	r3, [sp, #16]
 800a102:	e7d2      	b.n	800a0aa <_vfiprintf_r+0xe2>
 800a104:	9b03      	ldr	r3, [sp, #12]
 800a106:	1d19      	adds	r1, r3, #4
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	9103      	str	r1, [sp, #12]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	bfbb      	ittet	lt
 800a110:	425b      	neglt	r3, r3
 800a112:	f042 0202 	orrlt.w	r2, r2, #2
 800a116:	9307      	strge	r3, [sp, #28]
 800a118:	9307      	strlt	r3, [sp, #28]
 800a11a:	bfb8      	it	lt
 800a11c:	9204      	strlt	r2, [sp, #16]
 800a11e:	7823      	ldrb	r3, [r4, #0]
 800a120:	2b2e      	cmp	r3, #46	; 0x2e
 800a122:	d10c      	bne.n	800a13e <_vfiprintf_r+0x176>
 800a124:	7863      	ldrb	r3, [r4, #1]
 800a126:	2b2a      	cmp	r3, #42	; 0x2a
 800a128:	d135      	bne.n	800a196 <_vfiprintf_r+0x1ce>
 800a12a:	9b03      	ldr	r3, [sp, #12]
 800a12c:	3402      	adds	r4, #2
 800a12e:	1d1a      	adds	r2, r3, #4
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	9203      	str	r2, [sp, #12]
 800a134:	2b00      	cmp	r3, #0
 800a136:	bfb8      	it	lt
 800a138:	f04f 33ff 	movlt.w	r3, #4294967295
 800a13c:	9305      	str	r3, [sp, #20]
 800a13e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a218 <_vfiprintf_r+0x250>
 800a142:	2203      	movs	r2, #3
 800a144:	4650      	mov	r0, sl
 800a146:	7821      	ldrb	r1, [r4, #0]
 800a148:	f7ff f952 	bl	80093f0 <memchr>
 800a14c:	b140      	cbz	r0, 800a160 <_vfiprintf_r+0x198>
 800a14e:	2340      	movs	r3, #64	; 0x40
 800a150:	eba0 000a 	sub.w	r0, r0, sl
 800a154:	fa03 f000 	lsl.w	r0, r3, r0
 800a158:	9b04      	ldr	r3, [sp, #16]
 800a15a:	3401      	adds	r4, #1
 800a15c:	4303      	orrs	r3, r0
 800a15e:	9304      	str	r3, [sp, #16]
 800a160:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a164:	2206      	movs	r2, #6
 800a166:	482d      	ldr	r0, [pc, #180]	; (800a21c <_vfiprintf_r+0x254>)
 800a168:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a16c:	f7ff f940 	bl	80093f0 <memchr>
 800a170:	2800      	cmp	r0, #0
 800a172:	d03f      	beq.n	800a1f4 <_vfiprintf_r+0x22c>
 800a174:	4b2a      	ldr	r3, [pc, #168]	; (800a220 <_vfiprintf_r+0x258>)
 800a176:	bb1b      	cbnz	r3, 800a1c0 <_vfiprintf_r+0x1f8>
 800a178:	9b03      	ldr	r3, [sp, #12]
 800a17a:	3307      	adds	r3, #7
 800a17c:	f023 0307 	bic.w	r3, r3, #7
 800a180:	3308      	adds	r3, #8
 800a182:	9303      	str	r3, [sp, #12]
 800a184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a186:	443b      	add	r3, r7
 800a188:	9309      	str	r3, [sp, #36]	; 0x24
 800a18a:	e767      	b.n	800a05c <_vfiprintf_r+0x94>
 800a18c:	460c      	mov	r4, r1
 800a18e:	2001      	movs	r0, #1
 800a190:	fb0c 3202 	mla	r2, ip, r2, r3
 800a194:	e7a5      	b.n	800a0e2 <_vfiprintf_r+0x11a>
 800a196:	2300      	movs	r3, #0
 800a198:	f04f 0c0a 	mov.w	ip, #10
 800a19c:	4619      	mov	r1, r3
 800a19e:	3401      	adds	r4, #1
 800a1a0:	9305      	str	r3, [sp, #20]
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1a8:	3a30      	subs	r2, #48	; 0x30
 800a1aa:	2a09      	cmp	r2, #9
 800a1ac:	d903      	bls.n	800a1b6 <_vfiprintf_r+0x1ee>
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d0c5      	beq.n	800a13e <_vfiprintf_r+0x176>
 800a1b2:	9105      	str	r1, [sp, #20]
 800a1b4:	e7c3      	b.n	800a13e <_vfiprintf_r+0x176>
 800a1b6:	4604      	mov	r4, r0
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1be:	e7f0      	b.n	800a1a2 <_vfiprintf_r+0x1da>
 800a1c0:	ab03      	add	r3, sp, #12
 800a1c2:	9300      	str	r3, [sp, #0]
 800a1c4:	462a      	mov	r2, r5
 800a1c6:	4630      	mov	r0, r6
 800a1c8:	4b16      	ldr	r3, [pc, #88]	; (800a224 <_vfiprintf_r+0x25c>)
 800a1ca:	a904      	add	r1, sp, #16
 800a1cc:	f7fc fcaa 	bl	8006b24 <_printf_float>
 800a1d0:	4607      	mov	r7, r0
 800a1d2:	1c78      	adds	r0, r7, #1
 800a1d4:	d1d6      	bne.n	800a184 <_vfiprintf_r+0x1bc>
 800a1d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1d8:	07d9      	lsls	r1, r3, #31
 800a1da:	d405      	bmi.n	800a1e8 <_vfiprintf_r+0x220>
 800a1dc:	89ab      	ldrh	r3, [r5, #12]
 800a1de:	059a      	lsls	r2, r3, #22
 800a1e0:	d402      	bmi.n	800a1e8 <_vfiprintf_r+0x220>
 800a1e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1e4:	f000 fad5 	bl	800a792 <__retarget_lock_release_recursive>
 800a1e8:	89ab      	ldrh	r3, [r5, #12]
 800a1ea:	065b      	lsls	r3, r3, #25
 800a1ec:	f53f af12 	bmi.w	800a014 <_vfiprintf_r+0x4c>
 800a1f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1f2:	e711      	b.n	800a018 <_vfiprintf_r+0x50>
 800a1f4:	ab03      	add	r3, sp, #12
 800a1f6:	9300      	str	r3, [sp, #0]
 800a1f8:	462a      	mov	r2, r5
 800a1fa:	4630      	mov	r0, r6
 800a1fc:	4b09      	ldr	r3, [pc, #36]	; (800a224 <_vfiprintf_r+0x25c>)
 800a1fe:	a904      	add	r1, sp, #16
 800a200:	f7fc ff2c 	bl	800705c <_printf_i>
 800a204:	e7e4      	b.n	800a1d0 <_vfiprintf_r+0x208>
 800a206:	bf00      	nop
 800a208:	0800aff0 	.word	0x0800aff0
 800a20c:	0800b010 	.word	0x0800b010
 800a210:	0800afd0 	.word	0x0800afd0
 800a214:	0800aebc 	.word	0x0800aebc
 800a218:	0800aec2 	.word	0x0800aec2
 800a21c:	0800aec6 	.word	0x0800aec6
 800a220:	08006b25 	.word	0x08006b25
 800a224:	08009fa3 	.word	0x08009fa3

0800a228 <nan>:
 800a228:	2000      	movs	r0, #0
 800a22a:	4901      	ldr	r1, [pc, #4]	; (800a230 <nan+0x8>)
 800a22c:	4770      	bx	lr
 800a22e:	bf00      	nop
 800a230:	7ff80000 	.word	0x7ff80000

0800a234 <_sbrk_r>:
 800a234:	b538      	push	{r3, r4, r5, lr}
 800a236:	2300      	movs	r3, #0
 800a238:	4d05      	ldr	r5, [pc, #20]	; (800a250 <_sbrk_r+0x1c>)
 800a23a:	4604      	mov	r4, r0
 800a23c:	4608      	mov	r0, r1
 800a23e:	602b      	str	r3, [r5, #0]
 800a240:	f7f8 fcb4 	bl	8002bac <_sbrk>
 800a244:	1c43      	adds	r3, r0, #1
 800a246:	d102      	bne.n	800a24e <_sbrk_r+0x1a>
 800a248:	682b      	ldr	r3, [r5, #0]
 800a24a:	b103      	cbz	r3, 800a24e <_sbrk_r+0x1a>
 800a24c:	6023      	str	r3, [r4, #0]
 800a24e:	bd38      	pop	{r3, r4, r5, pc}
 800a250:	200004ec 	.word	0x200004ec

0800a254 <strncmp>:
 800a254:	4603      	mov	r3, r0
 800a256:	b510      	push	{r4, lr}
 800a258:	b172      	cbz	r2, 800a278 <strncmp+0x24>
 800a25a:	3901      	subs	r1, #1
 800a25c:	1884      	adds	r4, r0, r2
 800a25e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a262:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a266:	4290      	cmp	r0, r2
 800a268:	d101      	bne.n	800a26e <strncmp+0x1a>
 800a26a:	42a3      	cmp	r3, r4
 800a26c:	d101      	bne.n	800a272 <strncmp+0x1e>
 800a26e:	1a80      	subs	r0, r0, r2
 800a270:	bd10      	pop	{r4, pc}
 800a272:	2800      	cmp	r0, #0
 800a274:	d1f3      	bne.n	800a25e <strncmp+0xa>
 800a276:	e7fa      	b.n	800a26e <strncmp+0x1a>
 800a278:	4610      	mov	r0, r2
 800a27a:	e7f9      	b.n	800a270 <strncmp+0x1c>

0800a27c <__swbuf_r>:
 800a27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a27e:	460e      	mov	r6, r1
 800a280:	4614      	mov	r4, r2
 800a282:	4605      	mov	r5, r0
 800a284:	b118      	cbz	r0, 800a28e <__swbuf_r+0x12>
 800a286:	6983      	ldr	r3, [r0, #24]
 800a288:	b90b      	cbnz	r3, 800a28e <__swbuf_r+0x12>
 800a28a:	f000 f9e3 	bl	800a654 <__sinit>
 800a28e:	4b21      	ldr	r3, [pc, #132]	; (800a314 <__swbuf_r+0x98>)
 800a290:	429c      	cmp	r4, r3
 800a292:	d12b      	bne.n	800a2ec <__swbuf_r+0x70>
 800a294:	686c      	ldr	r4, [r5, #4]
 800a296:	69a3      	ldr	r3, [r4, #24]
 800a298:	60a3      	str	r3, [r4, #8]
 800a29a:	89a3      	ldrh	r3, [r4, #12]
 800a29c:	071a      	lsls	r2, r3, #28
 800a29e:	d52f      	bpl.n	800a300 <__swbuf_r+0x84>
 800a2a0:	6923      	ldr	r3, [r4, #16]
 800a2a2:	b36b      	cbz	r3, 800a300 <__swbuf_r+0x84>
 800a2a4:	6923      	ldr	r3, [r4, #16]
 800a2a6:	6820      	ldr	r0, [r4, #0]
 800a2a8:	b2f6      	uxtb	r6, r6
 800a2aa:	1ac0      	subs	r0, r0, r3
 800a2ac:	6963      	ldr	r3, [r4, #20]
 800a2ae:	4637      	mov	r7, r6
 800a2b0:	4283      	cmp	r3, r0
 800a2b2:	dc04      	bgt.n	800a2be <__swbuf_r+0x42>
 800a2b4:	4621      	mov	r1, r4
 800a2b6:	4628      	mov	r0, r5
 800a2b8:	f000 f938 	bl	800a52c <_fflush_r>
 800a2bc:	bb30      	cbnz	r0, 800a30c <__swbuf_r+0x90>
 800a2be:	68a3      	ldr	r3, [r4, #8]
 800a2c0:	3001      	adds	r0, #1
 800a2c2:	3b01      	subs	r3, #1
 800a2c4:	60a3      	str	r3, [r4, #8]
 800a2c6:	6823      	ldr	r3, [r4, #0]
 800a2c8:	1c5a      	adds	r2, r3, #1
 800a2ca:	6022      	str	r2, [r4, #0]
 800a2cc:	701e      	strb	r6, [r3, #0]
 800a2ce:	6963      	ldr	r3, [r4, #20]
 800a2d0:	4283      	cmp	r3, r0
 800a2d2:	d004      	beq.n	800a2de <__swbuf_r+0x62>
 800a2d4:	89a3      	ldrh	r3, [r4, #12]
 800a2d6:	07db      	lsls	r3, r3, #31
 800a2d8:	d506      	bpl.n	800a2e8 <__swbuf_r+0x6c>
 800a2da:	2e0a      	cmp	r6, #10
 800a2dc:	d104      	bne.n	800a2e8 <__swbuf_r+0x6c>
 800a2de:	4621      	mov	r1, r4
 800a2e0:	4628      	mov	r0, r5
 800a2e2:	f000 f923 	bl	800a52c <_fflush_r>
 800a2e6:	b988      	cbnz	r0, 800a30c <__swbuf_r+0x90>
 800a2e8:	4638      	mov	r0, r7
 800a2ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2ec:	4b0a      	ldr	r3, [pc, #40]	; (800a318 <__swbuf_r+0x9c>)
 800a2ee:	429c      	cmp	r4, r3
 800a2f0:	d101      	bne.n	800a2f6 <__swbuf_r+0x7a>
 800a2f2:	68ac      	ldr	r4, [r5, #8]
 800a2f4:	e7cf      	b.n	800a296 <__swbuf_r+0x1a>
 800a2f6:	4b09      	ldr	r3, [pc, #36]	; (800a31c <__swbuf_r+0xa0>)
 800a2f8:	429c      	cmp	r4, r3
 800a2fa:	bf08      	it	eq
 800a2fc:	68ec      	ldreq	r4, [r5, #12]
 800a2fe:	e7ca      	b.n	800a296 <__swbuf_r+0x1a>
 800a300:	4621      	mov	r1, r4
 800a302:	4628      	mov	r0, r5
 800a304:	f000 f81a 	bl	800a33c <__swsetup_r>
 800a308:	2800      	cmp	r0, #0
 800a30a:	d0cb      	beq.n	800a2a4 <__swbuf_r+0x28>
 800a30c:	f04f 37ff 	mov.w	r7, #4294967295
 800a310:	e7ea      	b.n	800a2e8 <__swbuf_r+0x6c>
 800a312:	bf00      	nop
 800a314:	0800aff0 	.word	0x0800aff0
 800a318:	0800b010 	.word	0x0800b010
 800a31c:	0800afd0 	.word	0x0800afd0

0800a320 <__ascii_wctomb>:
 800a320:	4603      	mov	r3, r0
 800a322:	4608      	mov	r0, r1
 800a324:	b141      	cbz	r1, 800a338 <__ascii_wctomb+0x18>
 800a326:	2aff      	cmp	r2, #255	; 0xff
 800a328:	d904      	bls.n	800a334 <__ascii_wctomb+0x14>
 800a32a:	228a      	movs	r2, #138	; 0x8a
 800a32c:	f04f 30ff 	mov.w	r0, #4294967295
 800a330:	601a      	str	r2, [r3, #0]
 800a332:	4770      	bx	lr
 800a334:	2001      	movs	r0, #1
 800a336:	700a      	strb	r2, [r1, #0]
 800a338:	4770      	bx	lr
	...

0800a33c <__swsetup_r>:
 800a33c:	4b32      	ldr	r3, [pc, #200]	; (800a408 <__swsetup_r+0xcc>)
 800a33e:	b570      	push	{r4, r5, r6, lr}
 800a340:	681d      	ldr	r5, [r3, #0]
 800a342:	4606      	mov	r6, r0
 800a344:	460c      	mov	r4, r1
 800a346:	b125      	cbz	r5, 800a352 <__swsetup_r+0x16>
 800a348:	69ab      	ldr	r3, [r5, #24]
 800a34a:	b913      	cbnz	r3, 800a352 <__swsetup_r+0x16>
 800a34c:	4628      	mov	r0, r5
 800a34e:	f000 f981 	bl	800a654 <__sinit>
 800a352:	4b2e      	ldr	r3, [pc, #184]	; (800a40c <__swsetup_r+0xd0>)
 800a354:	429c      	cmp	r4, r3
 800a356:	d10f      	bne.n	800a378 <__swsetup_r+0x3c>
 800a358:	686c      	ldr	r4, [r5, #4]
 800a35a:	89a3      	ldrh	r3, [r4, #12]
 800a35c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a360:	0719      	lsls	r1, r3, #28
 800a362:	d42c      	bmi.n	800a3be <__swsetup_r+0x82>
 800a364:	06dd      	lsls	r5, r3, #27
 800a366:	d411      	bmi.n	800a38c <__swsetup_r+0x50>
 800a368:	2309      	movs	r3, #9
 800a36a:	6033      	str	r3, [r6, #0]
 800a36c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a370:	f04f 30ff 	mov.w	r0, #4294967295
 800a374:	81a3      	strh	r3, [r4, #12]
 800a376:	e03e      	b.n	800a3f6 <__swsetup_r+0xba>
 800a378:	4b25      	ldr	r3, [pc, #148]	; (800a410 <__swsetup_r+0xd4>)
 800a37a:	429c      	cmp	r4, r3
 800a37c:	d101      	bne.n	800a382 <__swsetup_r+0x46>
 800a37e:	68ac      	ldr	r4, [r5, #8]
 800a380:	e7eb      	b.n	800a35a <__swsetup_r+0x1e>
 800a382:	4b24      	ldr	r3, [pc, #144]	; (800a414 <__swsetup_r+0xd8>)
 800a384:	429c      	cmp	r4, r3
 800a386:	bf08      	it	eq
 800a388:	68ec      	ldreq	r4, [r5, #12]
 800a38a:	e7e6      	b.n	800a35a <__swsetup_r+0x1e>
 800a38c:	0758      	lsls	r0, r3, #29
 800a38e:	d512      	bpl.n	800a3b6 <__swsetup_r+0x7a>
 800a390:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a392:	b141      	cbz	r1, 800a3a6 <__swsetup_r+0x6a>
 800a394:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a398:	4299      	cmp	r1, r3
 800a39a:	d002      	beq.n	800a3a2 <__swsetup_r+0x66>
 800a39c:	4630      	mov	r0, r6
 800a39e:	f7ff fd0f 	bl	8009dc0 <_free_r>
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	6363      	str	r3, [r4, #52]	; 0x34
 800a3a6:	89a3      	ldrh	r3, [r4, #12]
 800a3a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a3ac:	81a3      	strh	r3, [r4, #12]
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	6063      	str	r3, [r4, #4]
 800a3b2:	6923      	ldr	r3, [r4, #16]
 800a3b4:	6023      	str	r3, [r4, #0]
 800a3b6:	89a3      	ldrh	r3, [r4, #12]
 800a3b8:	f043 0308 	orr.w	r3, r3, #8
 800a3bc:	81a3      	strh	r3, [r4, #12]
 800a3be:	6923      	ldr	r3, [r4, #16]
 800a3c0:	b94b      	cbnz	r3, 800a3d6 <__swsetup_r+0x9a>
 800a3c2:	89a3      	ldrh	r3, [r4, #12]
 800a3c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a3c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3cc:	d003      	beq.n	800a3d6 <__swsetup_r+0x9a>
 800a3ce:	4621      	mov	r1, r4
 800a3d0:	4630      	mov	r0, r6
 800a3d2:	f000 fa05 	bl	800a7e0 <__smakebuf_r>
 800a3d6:	89a0      	ldrh	r0, [r4, #12]
 800a3d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3dc:	f010 0301 	ands.w	r3, r0, #1
 800a3e0:	d00a      	beq.n	800a3f8 <__swsetup_r+0xbc>
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	60a3      	str	r3, [r4, #8]
 800a3e6:	6963      	ldr	r3, [r4, #20]
 800a3e8:	425b      	negs	r3, r3
 800a3ea:	61a3      	str	r3, [r4, #24]
 800a3ec:	6923      	ldr	r3, [r4, #16]
 800a3ee:	b943      	cbnz	r3, 800a402 <__swsetup_r+0xc6>
 800a3f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a3f4:	d1ba      	bne.n	800a36c <__swsetup_r+0x30>
 800a3f6:	bd70      	pop	{r4, r5, r6, pc}
 800a3f8:	0781      	lsls	r1, r0, #30
 800a3fa:	bf58      	it	pl
 800a3fc:	6963      	ldrpl	r3, [r4, #20]
 800a3fe:	60a3      	str	r3, [r4, #8]
 800a400:	e7f4      	b.n	800a3ec <__swsetup_r+0xb0>
 800a402:	2000      	movs	r0, #0
 800a404:	e7f7      	b.n	800a3f6 <__swsetup_r+0xba>
 800a406:	bf00      	nop
 800a408:	20000018 	.word	0x20000018
 800a40c:	0800aff0 	.word	0x0800aff0
 800a410:	0800b010 	.word	0x0800b010
 800a414:	0800afd0 	.word	0x0800afd0

0800a418 <abort>:
 800a418:	2006      	movs	r0, #6
 800a41a:	b508      	push	{r3, lr}
 800a41c:	f000 fa54 	bl	800a8c8 <raise>
 800a420:	2001      	movs	r0, #1
 800a422:	f7f8 fb50 	bl	8002ac6 <_exit>
	...

0800a428 <__sflush_r>:
 800a428:	898a      	ldrh	r2, [r1, #12]
 800a42a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a42c:	4605      	mov	r5, r0
 800a42e:	0710      	lsls	r0, r2, #28
 800a430:	460c      	mov	r4, r1
 800a432:	d457      	bmi.n	800a4e4 <__sflush_r+0xbc>
 800a434:	684b      	ldr	r3, [r1, #4]
 800a436:	2b00      	cmp	r3, #0
 800a438:	dc04      	bgt.n	800a444 <__sflush_r+0x1c>
 800a43a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	dc01      	bgt.n	800a444 <__sflush_r+0x1c>
 800a440:	2000      	movs	r0, #0
 800a442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a444:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a446:	2e00      	cmp	r6, #0
 800a448:	d0fa      	beq.n	800a440 <__sflush_r+0x18>
 800a44a:	2300      	movs	r3, #0
 800a44c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a450:	682f      	ldr	r7, [r5, #0]
 800a452:	602b      	str	r3, [r5, #0]
 800a454:	d032      	beq.n	800a4bc <__sflush_r+0x94>
 800a456:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a458:	89a3      	ldrh	r3, [r4, #12]
 800a45a:	075a      	lsls	r2, r3, #29
 800a45c:	d505      	bpl.n	800a46a <__sflush_r+0x42>
 800a45e:	6863      	ldr	r3, [r4, #4]
 800a460:	1ac0      	subs	r0, r0, r3
 800a462:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a464:	b10b      	cbz	r3, 800a46a <__sflush_r+0x42>
 800a466:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a468:	1ac0      	subs	r0, r0, r3
 800a46a:	2300      	movs	r3, #0
 800a46c:	4602      	mov	r2, r0
 800a46e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a470:	4628      	mov	r0, r5
 800a472:	6a21      	ldr	r1, [r4, #32]
 800a474:	47b0      	blx	r6
 800a476:	1c43      	adds	r3, r0, #1
 800a478:	89a3      	ldrh	r3, [r4, #12]
 800a47a:	d106      	bne.n	800a48a <__sflush_r+0x62>
 800a47c:	6829      	ldr	r1, [r5, #0]
 800a47e:	291d      	cmp	r1, #29
 800a480:	d82c      	bhi.n	800a4dc <__sflush_r+0xb4>
 800a482:	4a29      	ldr	r2, [pc, #164]	; (800a528 <__sflush_r+0x100>)
 800a484:	40ca      	lsrs	r2, r1
 800a486:	07d6      	lsls	r6, r2, #31
 800a488:	d528      	bpl.n	800a4dc <__sflush_r+0xb4>
 800a48a:	2200      	movs	r2, #0
 800a48c:	6062      	str	r2, [r4, #4]
 800a48e:	6922      	ldr	r2, [r4, #16]
 800a490:	04d9      	lsls	r1, r3, #19
 800a492:	6022      	str	r2, [r4, #0]
 800a494:	d504      	bpl.n	800a4a0 <__sflush_r+0x78>
 800a496:	1c42      	adds	r2, r0, #1
 800a498:	d101      	bne.n	800a49e <__sflush_r+0x76>
 800a49a:	682b      	ldr	r3, [r5, #0]
 800a49c:	b903      	cbnz	r3, 800a4a0 <__sflush_r+0x78>
 800a49e:	6560      	str	r0, [r4, #84]	; 0x54
 800a4a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4a2:	602f      	str	r7, [r5, #0]
 800a4a4:	2900      	cmp	r1, #0
 800a4a6:	d0cb      	beq.n	800a440 <__sflush_r+0x18>
 800a4a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4ac:	4299      	cmp	r1, r3
 800a4ae:	d002      	beq.n	800a4b6 <__sflush_r+0x8e>
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	f7ff fc85 	bl	8009dc0 <_free_r>
 800a4b6:	2000      	movs	r0, #0
 800a4b8:	6360      	str	r0, [r4, #52]	; 0x34
 800a4ba:	e7c2      	b.n	800a442 <__sflush_r+0x1a>
 800a4bc:	6a21      	ldr	r1, [r4, #32]
 800a4be:	2301      	movs	r3, #1
 800a4c0:	4628      	mov	r0, r5
 800a4c2:	47b0      	blx	r6
 800a4c4:	1c41      	adds	r1, r0, #1
 800a4c6:	d1c7      	bne.n	800a458 <__sflush_r+0x30>
 800a4c8:	682b      	ldr	r3, [r5, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d0c4      	beq.n	800a458 <__sflush_r+0x30>
 800a4ce:	2b1d      	cmp	r3, #29
 800a4d0:	d001      	beq.n	800a4d6 <__sflush_r+0xae>
 800a4d2:	2b16      	cmp	r3, #22
 800a4d4:	d101      	bne.n	800a4da <__sflush_r+0xb2>
 800a4d6:	602f      	str	r7, [r5, #0]
 800a4d8:	e7b2      	b.n	800a440 <__sflush_r+0x18>
 800a4da:	89a3      	ldrh	r3, [r4, #12]
 800a4dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4e0:	81a3      	strh	r3, [r4, #12]
 800a4e2:	e7ae      	b.n	800a442 <__sflush_r+0x1a>
 800a4e4:	690f      	ldr	r7, [r1, #16]
 800a4e6:	2f00      	cmp	r7, #0
 800a4e8:	d0aa      	beq.n	800a440 <__sflush_r+0x18>
 800a4ea:	0793      	lsls	r3, r2, #30
 800a4ec:	bf18      	it	ne
 800a4ee:	2300      	movne	r3, #0
 800a4f0:	680e      	ldr	r6, [r1, #0]
 800a4f2:	bf08      	it	eq
 800a4f4:	694b      	ldreq	r3, [r1, #20]
 800a4f6:	1bf6      	subs	r6, r6, r7
 800a4f8:	600f      	str	r7, [r1, #0]
 800a4fa:	608b      	str	r3, [r1, #8]
 800a4fc:	2e00      	cmp	r6, #0
 800a4fe:	dd9f      	ble.n	800a440 <__sflush_r+0x18>
 800a500:	4633      	mov	r3, r6
 800a502:	463a      	mov	r2, r7
 800a504:	4628      	mov	r0, r5
 800a506:	6a21      	ldr	r1, [r4, #32]
 800a508:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a50c:	47e0      	blx	ip
 800a50e:	2800      	cmp	r0, #0
 800a510:	dc06      	bgt.n	800a520 <__sflush_r+0xf8>
 800a512:	89a3      	ldrh	r3, [r4, #12]
 800a514:	f04f 30ff 	mov.w	r0, #4294967295
 800a518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a51c:	81a3      	strh	r3, [r4, #12]
 800a51e:	e790      	b.n	800a442 <__sflush_r+0x1a>
 800a520:	4407      	add	r7, r0
 800a522:	1a36      	subs	r6, r6, r0
 800a524:	e7ea      	b.n	800a4fc <__sflush_r+0xd4>
 800a526:	bf00      	nop
 800a528:	20400001 	.word	0x20400001

0800a52c <_fflush_r>:
 800a52c:	b538      	push	{r3, r4, r5, lr}
 800a52e:	690b      	ldr	r3, [r1, #16]
 800a530:	4605      	mov	r5, r0
 800a532:	460c      	mov	r4, r1
 800a534:	b913      	cbnz	r3, 800a53c <_fflush_r+0x10>
 800a536:	2500      	movs	r5, #0
 800a538:	4628      	mov	r0, r5
 800a53a:	bd38      	pop	{r3, r4, r5, pc}
 800a53c:	b118      	cbz	r0, 800a546 <_fflush_r+0x1a>
 800a53e:	6983      	ldr	r3, [r0, #24]
 800a540:	b90b      	cbnz	r3, 800a546 <_fflush_r+0x1a>
 800a542:	f000 f887 	bl	800a654 <__sinit>
 800a546:	4b14      	ldr	r3, [pc, #80]	; (800a598 <_fflush_r+0x6c>)
 800a548:	429c      	cmp	r4, r3
 800a54a:	d11b      	bne.n	800a584 <_fflush_r+0x58>
 800a54c:	686c      	ldr	r4, [r5, #4]
 800a54e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d0ef      	beq.n	800a536 <_fflush_r+0xa>
 800a556:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a558:	07d0      	lsls	r0, r2, #31
 800a55a:	d404      	bmi.n	800a566 <_fflush_r+0x3a>
 800a55c:	0599      	lsls	r1, r3, #22
 800a55e:	d402      	bmi.n	800a566 <_fflush_r+0x3a>
 800a560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a562:	f000 f915 	bl	800a790 <__retarget_lock_acquire_recursive>
 800a566:	4628      	mov	r0, r5
 800a568:	4621      	mov	r1, r4
 800a56a:	f7ff ff5d 	bl	800a428 <__sflush_r>
 800a56e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a570:	4605      	mov	r5, r0
 800a572:	07da      	lsls	r2, r3, #31
 800a574:	d4e0      	bmi.n	800a538 <_fflush_r+0xc>
 800a576:	89a3      	ldrh	r3, [r4, #12]
 800a578:	059b      	lsls	r3, r3, #22
 800a57a:	d4dd      	bmi.n	800a538 <_fflush_r+0xc>
 800a57c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a57e:	f000 f908 	bl	800a792 <__retarget_lock_release_recursive>
 800a582:	e7d9      	b.n	800a538 <_fflush_r+0xc>
 800a584:	4b05      	ldr	r3, [pc, #20]	; (800a59c <_fflush_r+0x70>)
 800a586:	429c      	cmp	r4, r3
 800a588:	d101      	bne.n	800a58e <_fflush_r+0x62>
 800a58a:	68ac      	ldr	r4, [r5, #8]
 800a58c:	e7df      	b.n	800a54e <_fflush_r+0x22>
 800a58e:	4b04      	ldr	r3, [pc, #16]	; (800a5a0 <_fflush_r+0x74>)
 800a590:	429c      	cmp	r4, r3
 800a592:	bf08      	it	eq
 800a594:	68ec      	ldreq	r4, [r5, #12]
 800a596:	e7da      	b.n	800a54e <_fflush_r+0x22>
 800a598:	0800aff0 	.word	0x0800aff0
 800a59c:	0800b010 	.word	0x0800b010
 800a5a0:	0800afd0 	.word	0x0800afd0

0800a5a4 <std>:
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	b510      	push	{r4, lr}
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	e9c0 3300 	strd	r3, r3, [r0]
 800a5ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5b2:	6083      	str	r3, [r0, #8]
 800a5b4:	8181      	strh	r1, [r0, #12]
 800a5b6:	6643      	str	r3, [r0, #100]	; 0x64
 800a5b8:	81c2      	strh	r2, [r0, #14]
 800a5ba:	6183      	str	r3, [r0, #24]
 800a5bc:	4619      	mov	r1, r3
 800a5be:	2208      	movs	r2, #8
 800a5c0:	305c      	adds	r0, #92	; 0x5c
 800a5c2:	f7fc fa09 	bl	80069d8 <memset>
 800a5c6:	4b05      	ldr	r3, [pc, #20]	; (800a5dc <std+0x38>)
 800a5c8:	6224      	str	r4, [r4, #32]
 800a5ca:	6263      	str	r3, [r4, #36]	; 0x24
 800a5cc:	4b04      	ldr	r3, [pc, #16]	; (800a5e0 <std+0x3c>)
 800a5ce:	62a3      	str	r3, [r4, #40]	; 0x28
 800a5d0:	4b04      	ldr	r3, [pc, #16]	; (800a5e4 <std+0x40>)
 800a5d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a5d4:	4b04      	ldr	r3, [pc, #16]	; (800a5e8 <std+0x44>)
 800a5d6:	6323      	str	r3, [r4, #48]	; 0x30
 800a5d8:	bd10      	pop	{r4, pc}
 800a5da:	bf00      	nop
 800a5dc:	0800a901 	.word	0x0800a901
 800a5e0:	0800a923 	.word	0x0800a923
 800a5e4:	0800a95b 	.word	0x0800a95b
 800a5e8:	0800a97f 	.word	0x0800a97f

0800a5ec <_cleanup_r>:
 800a5ec:	4901      	ldr	r1, [pc, #4]	; (800a5f4 <_cleanup_r+0x8>)
 800a5ee:	f000 b8af 	b.w	800a750 <_fwalk_reent>
 800a5f2:	bf00      	nop
 800a5f4:	0800a52d 	.word	0x0800a52d

0800a5f8 <__sfmoreglue>:
 800a5f8:	2268      	movs	r2, #104	; 0x68
 800a5fa:	b570      	push	{r4, r5, r6, lr}
 800a5fc:	1e4d      	subs	r5, r1, #1
 800a5fe:	4355      	muls	r5, r2
 800a600:	460e      	mov	r6, r1
 800a602:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a606:	f7ff fc43 	bl	8009e90 <_malloc_r>
 800a60a:	4604      	mov	r4, r0
 800a60c:	b140      	cbz	r0, 800a620 <__sfmoreglue+0x28>
 800a60e:	2100      	movs	r1, #0
 800a610:	e9c0 1600 	strd	r1, r6, [r0]
 800a614:	300c      	adds	r0, #12
 800a616:	60a0      	str	r0, [r4, #8]
 800a618:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a61c:	f7fc f9dc 	bl	80069d8 <memset>
 800a620:	4620      	mov	r0, r4
 800a622:	bd70      	pop	{r4, r5, r6, pc}

0800a624 <__sfp_lock_acquire>:
 800a624:	4801      	ldr	r0, [pc, #4]	; (800a62c <__sfp_lock_acquire+0x8>)
 800a626:	f000 b8b3 	b.w	800a790 <__retarget_lock_acquire_recursive>
 800a62a:	bf00      	nop
 800a62c:	200004e9 	.word	0x200004e9

0800a630 <__sfp_lock_release>:
 800a630:	4801      	ldr	r0, [pc, #4]	; (800a638 <__sfp_lock_release+0x8>)
 800a632:	f000 b8ae 	b.w	800a792 <__retarget_lock_release_recursive>
 800a636:	bf00      	nop
 800a638:	200004e9 	.word	0x200004e9

0800a63c <__sinit_lock_acquire>:
 800a63c:	4801      	ldr	r0, [pc, #4]	; (800a644 <__sinit_lock_acquire+0x8>)
 800a63e:	f000 b8a7 	b.w	800a790 <__retarget_lock_acquire_recursive>
 800a642:	bf00      	nop
 800a644:	200004ea 	.word	0x200004ea

0800a648 <__sinit_lock_release>:
 800a648:	4801      	ldr	r0, [pc, #4]	; (800a650 <__sinit_lock_release+0x8>)
 800a64a:	f000 b8a2 	b.w	800a792 <__retarget_lock_release_recursive>
 800a64e:	bf00      	nop
 800a650:	200004ea 	.word	0x200004ea

0800a654 <__sinit>:
 800a654:	b510      	push	{r4, lr}
 800a656:	4604      	mov	r4, r0
 800a658:	f7ff fff0 	bl	800a63c <__sinit_lock_acquire>
 800a65c:	69a3      	ldr	r3, [r4, #24]
 800a65e:	b11b      	cbz	r3, 800a668 <__sinit+0x14>
 800a660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a664:	f7ff bff0 	b.w	800a648 <__sinit_lock_release>
 800a668:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a66c:	6523      	str	r3, [r4, #80]	; 0x50
 800a66e:	4b13      	ldr	r3, [pc, #76]	; (800a6bc <__sinit+0x68>)
 800a670:	4a13      	ldr	r2, [pc, #76]	; (800a6c0 <__sinit+0x6c>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	62a2      	str	r2, [r4, #40]	; 0x28
 800a676:	42a3      	cmp	r3, r4
 800a678:	bf08      	it	eq
 800a67a:	2301      	moveq	r3, #1
 800a67c:	4620      	mov	r0, r4
 800a67e:	bf08      	it	eq
 800a680:	61a3      	streq	r3, [r4, #24]
 800a682:	f000 f81f 	bl	800a6c4 <__sfp>
 800a686:	6060      	str	r0, [r4, #4]
 800a688:	4620      	mov	r0, r4
 800a68a:	f000 f81b 	bl	800a6c4 <__sfp>
 800a68e:	60a0      	str	r0, [r4, #8]
 800a690:	4620      	mov	r0, r4
 800a692:	f000 f817 	bl	800a6c4 <__sfp>
 800a696:	2200      	movs	r2, #0
 800a698:	2104      	movs	r1, #4
 800a69a:	60e0      	str	r0, [r4, #12]
 800a69c:	6860      	ldr	r0, [r4, #4]
 800a69e:	f7ff ff81 	bl	800a5a4 <std>
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	2109      	movs	r1, #9
 800a6a6:	68a0      	ldr	r0, [r4, #8]
 800a6a8:	f7ff ff7c 	bl	800a5a4 <std>
 800a6ac:	2202      	movs	r2, #2
 800a6ae:	2112      	movs	r1, #18
 800a6b0:	68e0      	ldr	r0, [r4, #12]
 800a6b2:	f7ff ff77 	bl	800a5a4 <std>
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	61a3      	str	r3, [r4, #24]
 800a6ba:	e7d1      	b.n	800a660 <__sinit+0xc>
 800a6bc:	0800ab34 	.word	0x0800ab34
 800a6c0:	0800a5ed 	.word	0x0800a5ed

0800a6c4 <__sfp>:
 800a6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6c6:	4607      	mov	r7, r0
 800a6c8:	f7ff ffac 	bl	800a624 <__sfp_lock_acquire>
 800a6cc:	4b1e      	ldr	r3, [pc, #120]	; (800a748 <__sfp+0x84>)
 800a6ce:	681e      	ldr	r6, [r3, #0]
 800a6d0:	69b3      	ldr	r3, [r6, #24]
 800a6d2:	b913      	cbnz	r3, 800a6da <__sfp+0x16>
 800a6d4:	4630      	mov	r0, r6
 800a6d6:	f7ff ffbd 	bl	800a654 <__sinit>
 800a6da:	3648      	adds	r6, #72	; 0x48
 800a6dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a6e0:	3b01      	subs	r3, #1
 800a6e2:	d503      	bpl.n	800a6ec <__sfp+0x28>
 800a6e4:	6833      	ldr	r3, [r6, #0]
 800a6e6:	b30b      	cbz	r3, 800a72c <__sfp+0x68>
 800a6e8:	6836      	ldr	r6, [r6, #0]
 800a6ea:	e7f7      	b.n	800a6dc <__sfp+0x18>
 800a6ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a6f0:	b9d5      	cbnz	r5, 800a728 <__sfp+0x64>
 800a6f2:	4b16      	ldr	r3, [pc, #88]	; (800a74c <__sfp+0x88>)
 800a6f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a6f8:	60e3      	str	r3, [r4, #12]
 800a6fa:	6665      	str	r5, [r4, #100]	; 0x64
 800a6fc:	f000 f847 	bl	800a78e <__retarget_lock_init_recursive>
 800a700:	f7ff ff96 	bl	800a630 <__sfp_lock_release>
 800a704:	2208      	movs	r2, #8
 800a706:	4629      	mov	r1, r5
 800a708:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a70c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a710:	6025      	str	r5, [r4, #0]
 800a712:	61a5      	str	r5, [r4, #24]
 800a714:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a718:	f7fc f95e 	bl	80069d8 <memset>
 800a71c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a720:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a724:	4620      	mov	r0, r4
 800a726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a728:	3468      	adds	r4, #104	; 0x68
 800a72a:	e7d9      	b.n	800a6e0 <__sfp+0x1c>
 800a72c:	2104      	movs	r1, #4
 800a72e:	4638      	mov	r0, r7
 800a730:	f7ff ff62 	bl	800a5f8 <__sfmoreglue>
 800a734:	4604      	mov	r4, r0
 800a736:	6030      	str	r0, [r6, #0]
 800a738:	2800      	cmp	r0, #0
 800a73a:	d1d5      	bne.n	800a6e8 <__sfp+0x24>
 800a73c:	f7ff ff78 	bl	800a630 <__sfp_lock_release>
 800a740:	230c      	movs	r3, #12
 800a742:	603b      	str	r3, [r7, #0]
 800a744:	e7ee      	b.n	800a724 <__sfp+0x60>
 800a746:	bf00      	nop
 800a748:	0800ab34 	.word	0x0800ab34
 800a74c:	ffff0001 	.word	0xffff0001

0800a750 <_fwalk_reent>:
 800a750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a754:	4606      	mov	r6, r0
 800a756:	4688      	mov	r8, r1
 800a758:	2700      	movs	r7, #0
 800a75a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a75e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a762:	f1b9 0901 	subs.w	r9, r9, #1
 800a766:	d505      	bpl.n	800a774 <_fwalk_reent+0x24>
 800a768:	6824      	ldr	r4, [r4, #0]
 800a76a:	2c00      	cmp	r4, #0
 800a76c:	d1f7      	bne.n	800a75e <_fwalk_reent+0xe>
 800a76e:	4638      	mov	r0, r7
 800a770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a774:	89ab      	ldrh	r3, [r5, #12]
 800a776:	2b01      	cmp	r3, #1
 800a778:	d907      	bls.n	800a78a <_fwalk_reent+0x3a>
 800a77a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a77e:	3301      	adds	r3, #1
 800a780:	d003      	beq.n	800a78a <_fwalk_reent+0x3a>
 800a782:	4629      	mov	r1, r5
 800a784:	4630      	mov	r0, r6
 800a786:	47c0      	blx	r8
 800a788:	4307      	orrs	r7, r0
 800a78a:	3568      	adds	r5, #104	; 0x68
 800a78c:	e7e9      	b.n	800a762 <_fwalk_reent+0x12>

0800a78e <__retarget_lock_init_recursive>:
 800a78e:	4770      	bx	lr

0800a790 <__retarget_lock_acquire_recursive>:
 800a790:	4770      	bx	lr

0800a792 <__retarget_lock_release_recursive>:
 800a792:	4770      	bx	lr

0800a794 <__swhatbuf_r>:
 800a794:	b570      	push	{r4, r5, r6, lr}
 800a796:	460e      	mov	r6, r1
 800a798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a79c:	4614      	mov	r4, r2
 800a79e:	2900      	cmp	r1, #0
 800a7a0:	461d      	mov	r5, r3
 800a7a2:	b096      	sub	sp, #88	; 0x58
 800a7a4:	da08      	bge.n	800a7b8 <__swhatbuf_r+0x24>
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a7ac:	602a      	str	r2, [r5, #0]
 800a7ae:	061a      	lsls	r2, r3, #24
 800a7b0:	d410      	bmi.n	800a7d4 <__swhatbuf_r+0x40>
 800a7b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7b6:	e00e      	b.n	800a7d6 <__swhatbuf_r+0x42>
 800a7b8:	466a      	mov	r2, sp
 800a7ba:	f000 f907 	bl	800a9cc <_fstat_r>
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	dbf1      	blt.n	800a7a6 <__swhatbuf_r+0x12>
 800a7c2:	9a01      	ldr	r2, [sp, #4]
 800a7c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a7c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a7cc:	425a      	negs	r2, r3
 800a7ce:	415a      	adcs	r2, r3
 800a7d0:	602a      	str	r2, [r5, #0]
 800a7d2:	e7ee      	b.n	800a7b2 <__swhatbuf_r+0x1e>
 800a7d4:	2340      	movs	r3, #64	; 0x40
 800a7d6:	2000      	movs	r0, #0
 800a7d8:	6023      	str	r3, [r4, #0]
 800a7da:	b016      	add	sp, #88	; 0x58
 800a7dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a7e0 <__smakebuf_r>:
 800a7e0:	898b      	ldrh	r3, [r1, #12]
 800a7e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7e4:	079d      	lsls	r5, r3, #30
 800a7e6:	4606      	mov	r6, r0
 800a7e8:	460c      	mov	r4, r1
 800a7ea:	d507      	bpl.n	800a7fc <__smakebuf_r+0x1c>
 800a7ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7f0:	6023      	str	r3, [r4, #0]
 800a7f2:	6123      	str	r3, [r4, #16]
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	6163      	str	r3, [r4, #20]
 800a7f8:	b002      	add	sp, #8
 800a7fa:	bd70      	pop	{r4, r5, r6, pc}
 800a7fc:	466a      	mov	r2, sp
 800a7fe:	ab01      	add	r3, sp, #4
 800a800:	f7ff ffc8 	bl	800a794 <__swhatbuf_r>
 800a804:	9900      	ldr	r1, [sp, #0]
 800a806:	4605      	mov	r5, r0
 800a808:	4630      	mov	r0, r6
 800a80a:	f7ff fb41 	bl	8009e90 <_malloc_r>
 800a80e:	b948      	cbnz	r0, 800a824 <__smakebuf_r+0x44>
 800a810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a814:	059a      	lsls	r2, r3, #22
 800a816:	d4ef      	bmi.n	800a7f8 <__smakebuf_r+0x18>
 800a818:	f023 0303 	bic.w	r3, r3, #3
 800a81c:	f043 0302 	orr.w	r3, r3, #2
 800a820:	81a3      	strh	r3, [r4, #12]
 800a822:	e7e3      	b.n	800a7ec <__smakebuf_r+0xc>
 800a824:	4b0d      	ldr	r3, [pc, #52]	; (800a85c <__smakebuf_r+0x7c>)
 800a826:	62b3      	str	r3, [r6, #40]	; 0x28
 800a828:	89a3      	ldrh	r3, [r4, #12]
 800a82a:	6020      	str	r0, [r4, #0]
 800a82c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a830:	81a3      	strh	r3, [r4, #12]
 800a832:	9b00      	ldr	r3, [sp, #0]
 800a834:	6120      	str	r0, [r4, #16]
 800a836:	6163      	str	r3, [r4, #20]
 800a838:	9b01      	ldr	r3, [sp, #4]
 800a83a:	b15b      	cbz	r3, 800a854 <__smakebuf_r+0x74>
 800a83c:	4630      	mov	r0, r6
 800a83e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a842:	f000 f8d5 	bl	800a9f0 <_isatty_r>
 800a846:	b128      	cbz	r0, 800a854 <__smakebuf_r+0x74>
 800a848:	89a3      	ldrh	r3, [r4, #12]
 800a84a:	f023 0303 	bic.w	r3, r3, #3
 800a84e:	f043 0301 	orr.w	r3, r3, #1
 800a852:	81a3      	strh	r3, [r4, #12]
 800a854:	89a0      	ldrh	r0, [r4, #12]
 800a856:	4305      	orrs	r5, r0
 800a858:	81a5      	strh	r5, [r4, #12]
 800a85a:	e7cd      	b.n	800a7f8 <__smakebuf_r+0x18>
 800a85c:	0800a5ed 	.word	0x0800a5ed

0800a860 <__malloc_lock>:
 800a860:	4801      	ldr	r0, [pc, #4]	; (800a868 <__malloc_lock+0x8>)
 800a862:	f7ff bf95 	b.w	800a790 <__retarget_lock_acquire_recursive>
 800a866:	bf00      	nop
 800a868:	200004e8 	.word	0x200004e8

0800a86c <__malloc_unlock>:
 800a86c:	4801      	ldr	r0, [pc, #4]	; (800a874 <__malloc_unlock+0x8>)
 800a86e:	f7ff bf90 	b.w	800a792 <__retarget_lock_release_recursive>
 800a872:	bf00      	nop
 800a874:	200004e8 	.word	0x200004e8

0800a878 <_raise_r>:
 800a878:	291f      	cmp	r1, #31
 800a87a:	b538      	push	{r3, r4, r5, lr}
 800a87c:	4604      	mov	r4, r0
 800a87e:	460d      	mov	r5, r1
 800a880:	d904      	bls.n	800a88c <_raise_r+0x14>
 800a882:	2316      	movs	r3, #22
 800a884:	6003      	str	r3, [r0, #0]
 800a886:	f04f 30ff 	mov.w	r0, #4294967295
 800a88a:	bd38      	pop	{r3, r4, r5, pc}
 800a88c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a88e:	b112      	cbz	r2, 800a896 <_raise_r+0x1e>
 800a890:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a894:	b94b      	cbnz	r3, 800a8aa <_raise_r+0x32>
 800a896:	4620      	mov	r0, r4
 800a898:	f000 f830 	bl	800a8fc <_getpid_r>
 800a89c:	462a      	mov	r2, r5
 800a89e:	4601      	mov	r1, r0
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8a6:	f000 b817 	b.w	800a8d8 <_kill_r>
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d00a      	beq.n	800a8c4 <_raise_r+0x4c>
 800a8ae:	1c59      	adds	r1, r3, #1
 800a8b0:	d103      	bne.n	800a8ba <_raise_r+0x42>
 800a8b2:	2316      	movs	r3, #22
 800a8b4:	6003      	str	r3, [r0, #0]
 800a8b6:	2001      	movs	r0, #1
 800a8b8:	e7e7      	b.n	800a88a <_raise_r+0x12>
 800a8ba:	2400      	movs	r4, #0
 800a8bc:	4628      	mov	r0, r5
 800a8be:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a8c2:	4798      	blx	r3
 800a8c4:	2000      	movs	r0, #0
 800a8c6:	e7e0      	b.n	800a88a <_raise_r+0x12>

0800a8c8 <raise>:
 800a8c8:	4b02      	ldr	r3, [pc, #8]	; (800a8d4 <raise+0xc>)
 800a8ca:	4601      	mov	r1, r0
 800a8cc:	6818      	ldr	r0, [r3, #0]
 800a8ce:	f7ff bfd3 	b.w	800a878 <_raise_r>
 800a8d2:	bf00      	nop
 800a8d4:	20000018 	.word	0x20000018

0800a8d8 <_kill_r>:
 800a8d8:	b538      	push	{r3, r4, r5, lr}
 800a8da:	2300      	movs	r3, #0
 800a8dc:	4d06      	ldr	r5, [pc, #24]	; (800a8f8 <_kill_r+0x20>)
 800a8de:	4604      	mov	r4, r0
 800a8e0:	4608      	mov	r0, r1
 800a8e2:	4611      	mov	r1, r2
 800a8e4:	602b      	str	r3, [r5, #0]
 800a8e6:	f7f8 f8de 	bl	8002aa6 <_kill>
 800a8ea:	1c43      	adds	r3, r0, #1
 800a8ec:	d102      	bne.n	800a8f4 <_kill_r+0x1c>
 800a8ee:	682b      	ldr	r3, [r5, #0]
 800a8f0:	b103      	cbz	r3, 800a8f4 <_kill_r+0x1c>
 800a8f2:	6023      	str	r3, [r4, #0]
 800a8f4:	bd38      	pop	{r3, r4, r5, pc}
 800a8f6:	bf00      	nop
 800a8f8:	200004ec 	.word	0x200004ec

0800a8fc <_getpid_r>:
 800a8fc:	f7f8 b8cc 	b.w	8002a98 <_getpid>

0800a900 <__sread>:
 800a900:	b510      	push	{r4, lr}
 800a902:	460c      	mov	r4, r1
 800a904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a908:	f000 f894 	bl	800aa34 <_read_r>
 800a90c:	2800      	cmp	r0, #0
 800a90e:	bfab      	itete	ge
 800a910:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a912:	89a3      	ldrhlt	r3, [r4, #12]
 800a914:	181b      	addge	r3, r3, r0
 800a916:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a91a:	bfac      	ite	ge
 800a91c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a91e:	81a3      	strhlt	r3, [r4, #12]
 800a920:	bd10      	pop	{r4, pc}

0800a922 <__swrite>:
 800a922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a926:	461f      	mov	r7, r3
 800a928:	898b      	ldrh	r3, [r1, #12]
 800a92a:	4605      	mov	r5, r0
 800a92c:	05db      	lsls	r3, r3, #23
 800a92e:	460c      	mov	r4, r1
 800a930:	4616      	mov	r6, r2
 800a932:	d505      	bpl.n	800a940 <__swrite+0x1e>
 800a934:	2302      	movs	r3, #2
 800a936:	2200      	movs	r2, #0
 800a938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a93c:	f000 f868 	bl	800aa10 <_lseek_r>
 800a940:	89a3      	ldrh	r3, [r4, #12]
 800a942:	4632      	mov	r2, r6
 800a944:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a948:	81a3      	strh	r3, [r4, #12]
 800a94a:	4628      	mov	r0, r5
 800a94c:	463b      	mov	r3, r7
 800a94e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a956:	f000 b817 	b.w	800a988 <_write_r>

0800a95a <__sseek>:
 800a95a:	b510      	push	{r4, lr}
 800a95c:	460c      	mov	r4, r1
 800a95e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a962:	f000 f855 	bl	800aa10 <_lseek_r>
 800a966:	1c43      	adds	r3, r0, #1
 800a968:	89a3      	ldrh	r3, [r4, #12]
 800a96a:	bf15      	itete	ne
 800a96c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a96e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a972:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a976:	81a3      	strheq	r3, [r4, #12]
 800a978:	bf18      	it	ne
 800a97a:	81a3      	strhne	r3, [r4, #12]
 800a97c:	bd10      	pop	{r4, pc}

0800a97e <__sclose>:
 800a97e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a982:	f000 b813 	b.w	800a9ac <_close_r>
	...

0800a988 <_write_r>:
 800a988:	b538      	push	{r3, r4, r5, lr}
 800a98a:	4604      	mov	r4, r0
 800a98c:	4608      	mov	r0, r1
 800a98e:	4611      	mov	r1, r2
 800a990:	2200      	movs	r2, #0
 800a992:	4d05      	ldr	r5, [pc, #20]	; (800a9a8 <_write_r+0x20>)
 800a994:	602a      	str	r2, [r5, #0]
 800a996:	461a      	mov	r2, r3
 800a998:	f7f8 f8bc 	bl	8002b14 <_write>
 800a99c:	1c43      	adds	r3, r0, #1
 800a99e:	d102      	bne.n	800a9a6 <_write_r+0x1e>
 800a9a0:	682b      	ldr	r3, [r5, #0]
 800a9a2:	b103      	cbz	r3, 800a9a6 <_write_r+0x1e>
 800a9a4:	6023      	str	r3, [r4, #0]
 800a9a6:	bd38      	pop	{r3, r4, r5, pc}
 800a9a8:	200004ec 	.word	0x200004ec

0800a9ac <_close_r>:
 800a9ac:	b538      	push	{r3, r4, r5, lr}
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	4d05      	ldr	r5, [pc, #20]	; (800a9c8 <_close_r+0x1c>)
 800a9b2:	4604      	mov	r4, r0
 800a9b4:	4608      	mov	r0, r1
 800a9b6:	602b      	str	r3, [r5, #0]
 800a9b8:	f7f8 f8c8 	bl	8002b4c <_close>
 800a9bc:	1c43      	adds	r3, r0, #1
 800a9be:	d102      	bne.n	800a9c6 <_close_r+0x1a>
 800a9c0:	682b      	ldr	r3, [r5, #0]
 800a9c2:	b103      	cbz	r3, 800a9c6 <_close_r+0x1a>
 800a9c4:	6023      	str	r3, [r4, #0]
 800a9c6:	bd38      	pop	{r3, r4, r5, pc}
 800a9c8:	200004ec 	.word	0x200004ec

0800a9cc <_fstat_r>:
 800a9cc:	b538      	push	{r3, r4, r5, lr}
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	4d06      	ldr	r5, [pc, #24]	; (800a9ec <_fstat_r+0x20>)
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	4608      	mov	r0, r1
 800a9d6:	4611      	mov	r1, r2
 800a9d8:	602b      	str	r3, [r5, #0]
 800a9da:	f7f8 f8c2 	bl	8002b62 <_fstat>
 800a9de:	1c43      	adds	r3, r0, #1
 800a9e0:	d102      	bne.n	800a9e8 <_fstat_r+0x1c>
 800a9e2:	682b      	ldr	r3, [r5, #0]
 800a9e4:	b103      	cbz	r3, 800a9e8 <_fstat_r+0x1c>
 800a9e6:	6023      	str	r3, [r4, #0]
 800a9e8:	bd38      	pop	{r3, r4, r5, pc}
 800a9ea:	bf00      	nop
 800a9ec:	200004ec 	.word	0x200004ec

0800a9f0 <_isatty_r>:
 800a9f0:	b538      	push	{r3, r4, r5, lr}
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	4d05      	ldr	r5, [pc, #20]	; (800aa0c <_isatty_r+0x1c>)
 800a9f6:	4604      	mov	r4, r0
 800a9f8:	4608      	mov	r0, r1
 800a9fa:	602b      	str	r3, [r5, #0]
 800a9fc:	f7f8 f8c0 	bl	8002b80 <_isatty>
 800aa00:	1c43      	adds	r3, r0, #1
 800aa02:	d102      	bne.n	800aa0a <_isatty_r+0x1a>
 800aa04:	682b      	ldr	r3, [r5, #0]
 800aa06:	b103      	cbz	r3, 800aa0a <_isatty_r+0x1a>
 800aa08:	6023      	str	r3, [r4, #0]
 800aa0a:	bd38      	pop	{r3, r4, r5, pc}
 800aa0c:	200004ec 	.word	0x200004ec

0800aa10 <_lseek_r>:
 800aa10:	b538      	push	{r3, r4, r5, lr}
 800aa12:	4604      	mov	r4, r0
 800aa14:	4608      	mov	r0, r1
 800aa16:	4611      	mov	r1, r2
 800aa18:	2200      	movs	r2, #0
 800aa1a:	4d05      	ldr	r5, [pc, #20]	; (800aa30 <_lseek_r+0x20>)
 800aa1c:	602a      	str	r2, [r5, #0]
 800aa1e:	461a      	mov	r2, r3
 800aa20:	f7f8 f8b8 	bl	8002b94 <_lseek>
 800aa24:	1c43      	adds	r3, r0, #1
 800aa26:	d102      	bne.n	800aa2e <_lseek_r+0x1e>
 800aa28:	682b      	ldr	r3, [r5, #0]
 800aa2a:	b103      	cbz	r3, 800aa2e <_lseek_r+0x1e>
 800aa2c:	6023      	str	r3, [r4, #0]
 800aa2e:	bd38      	pop	{r3, r4, r5, pc}
 800aa30:	200004ec 	.word	0x200004ec

0800aa34 <_read_r>:
 800aa34:	b538      	push	{r3, r4, r5, lr}
 800aa36:	4604      	mov	r4, r0
 800aa38:	4608      	mov	r0, r1
 800aa3a:	4611      	mov	r1, r2
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	4d05      	ldr	r5, [pc, #20]	; (800aa54 <_read_r+0x20>)
 800aa40:	602a      	str	r2, [r5, #0]
 800aa42:	461a      	mov	r2, r3
 800aa44:	f7f8 f849 	bl	8002ada <_read>
 800aa48:	1c43      	adds	r3, r0, #1
 800aa4a:	d102      	bne.n	800aa52 <_read_r+0x1e>
 800aa4c:	682b      	ldr	r3, [r5, #0]
 800aa4e:	b103      	cbz	r3, 800aa52 <_read_r+0x1e>
 800aa50:	6023      	str	r3, [r4, #0]
 800aa52:	bd38      	pop	{r3, r4, r5, pc}
 800aa54:	200004ec 	.word	0x200004ec

0800aa58 <_init>:
 800aa58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa5a:	bf00      	nop
 800aa5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa5e:	bc08      	pop	{r3}
 800aa60:	469e      	mov	lr, r3
 800aa62:	4770      	bx	lr

0800aa64 <_fini>:
 800aa64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa66:	bf00      	nop
 800aa68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa6a:	bc08      	pop	{r3}
 800aa6c:	469e      	mov	lr, r3
 800aa6e:	4770      	bx	lr
