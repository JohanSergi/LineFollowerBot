
GRUZIK2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8fc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  0800aa10  0800aa10  0001aa10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af5c  0800af5c  00020214  2**0
                  CONTENTS
  4 .ARM          00000000  0800af5c  0800af5c  00020214  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800af5c  0800af5c  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af5c  0800af5c  0001af5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af60  0800af60  0001af60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800af64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000214  0800b178  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  0800b178  0002045c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010125  00000000  00000000  0002023d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002979  00000000  00000000  00030362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  00032ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e00  00000000  00000000  00033bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019da0  00000000  00000000  000349d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012185  00000000  00000000  0004e778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091334  00000000  00000000  000608fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1c31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005448  00000000  00000000  000f1c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000214 	.word	0x20000214
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a9f4 	.word	0x0800a9f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000218 	.word	0x20000218
 800014c:	0800a9f4 	.word	0x0800a9f4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_d2lz>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	4605      	mov	r5, r0
 8001160:	460c      	mov	r4, r1
 8001162:	2200      	movs	r2, #0
 8001164:	2300      	movs	r3, #0
 8001166:	4628      	mov	r0, r5
 8001168:	4621      	mov	r1, r4
 800116a:	f7ff fc27 	bl	80009bc <__aeabi_dcmplt>
 800116e:	b928      	cbnz	r0, 800117c <__aeabi_d2lz+0x20>
 8001170:	4628      	mov	r0, r5
 8001172:	4621      	mov	r1, r4
 8001174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001178:	f000 b80a 	b.w	8001190 <__aeabi_d2ulz>
 800117c:	4628      	mov	r0, r5
 800117e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001182:	f000 f805 	bl	8001190 <__aeabi_d2ulz>
 8001186:	4240      	negs	r0, r0
 8001188:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800118c:	bd38      	pop	{r3, r4, r5, pc}
 800118e:	bf00      	nop

08001190 <__aeabi_d2ulz>:
 8001190:	b5d0      	push	{r4, r6, r7, lr}
 8001192:	2200      	movs	r2, #0
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <__aeabi_d2ulz+0x34>)
 8001196:	4606      	mov	r6, r0
 8001198:	460f      	mov	r7, r1
 800119a:	f7ff f99d 	bl	80004d8 <__aeabi_dmul>
 800119e:	f7ff fc73 	bl	8000a88 <__aeabi_d2uiz>
 80011a2:	4604      	mov	r4, r0
 80011a4:	f7ff f91e 	bl	80003e4 <__aeabi_ui2d>
 80011a8:	2200      	movs	r2, #0
 80011aa:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <__aeabi_d2ulz+0x38>)
 80011ac:	f7ff f994 	bl	80004d8 <__aeabi_dmul>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4630      	mov	r0, r6
 80011b6:	4639      	mov	r1, r7
 80011b8:	f7fe ffd6 	bl	8000168 <__aeabi_dsub>
 80011bc:	f7ff fc64 	bl	8000a88 <__aeabi_d2uiz>
 80011c0:	4621      	mov	r1, r4
 80011c2:	bdd0      	pop	{r4, r6, r7, pc}
 80011c4:	3df00000 	.word	0x3df00000
 80011c8:	41f00000 	.word	0x41f00000

080011cc <SN_UART_Send>:
}

/*Example usage of this function looks like that*/
// Uart_send(&huart2, "data:%d %s %d\r\n",cokolwiek, cos, itd);
void SN_UART_Send(UART_HandleTypeDef *huart, const char *print, ...)
{
 80011cc:	b40e      	push	{r1, r2, r3}
 80011ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	466b      	mov	r3, sp
 80011da:	461e      	mov	r6, r3
    int timeout = 100;
 80011dc:	2364      	movs	r3, #100	; 0x64
 80011de:	61fb      	str	r3, [r7, #28]

    // Determine the length of the formatted string
    va_list args;
    va_start(args, print);
 80011e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011e4:	60fb      	str	r3, [r7, #12]
    int len = vsnprintf(NULL, 0, print, args);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80011ea:	2100      	movs	r1, #0
 80011ec:	2000      	movs	r0, #0
 80011ee:	f006 fce5 	bl	8007bbc <vsniprintf>
 80011f2:	61b8      	str	r0, [r7, #24]
    va_end(args);

    // Allocate the buffer with the correct length
    char Buffer[len];
 80011f4:	69b9      	ldr	r1, [r7, #24]
 80011f6:	1e4b      	subs	r3, r1, #1
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	460a      	mov	r2, r1
 80011fc:	2300      	movs	r3, #0
 80011fe:	4690      	mov	r8, r2
 8001200:	4699      	mov	r9, r3
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	f04f 0300 	mov.w	r3, #0
 800120a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800120e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001212:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001216:	460a      	mov	r2, r1
 8001218:	2300      	movs	r3, #0
 800121a:	4614      	mov	r4, r2
 800121c:	461d      	mov	r5, r3
 800121e:	f04f 0200 	mov.w	r2, #0
 8001222:	f04f 0300 	mov.w	r3, #0
 8001226:	00eb      	lsls	r3, r5, #3
 8001228:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800122c:	00e2      	lsls	r2, r4, #3
 800122e:	460b      	mov	r3, r1
 8001230:	3307      	adds	r3, #7
 8001232:	08db      	lsrs	r3, r3, #3
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	ebad 0d03 	sub.w	sp, sp, r3
 800123a:	466b      	mov	r3, sp
 800123c:	3300      	adds	r3, #0
 800123e:	613b      	str	r3, [r7, #16]

    // Format the string into the buffer
    va_start(args, print);
 8001240:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001244:	60fb      	str	r3, [r7, #12]
    vsnprintf(Buffer, len, print, args);
 8001246:	69b9      	ldr	r1, [r7, #24]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800124c:	6938      	ldr	r0, [r7, #16]
 800124e:	f006 fcb5 	bl	8007bbc <vsniprintf>
    va_end(args);

    // Transmit the formatted string through UART
    HAL_UART_Transmit(huart, (uint8_t *)Buffer, len, timeout);
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	b29a      	uxth	r2, r3
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	6939      	ldr	r1, [r7, #16]
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f004 fb04 	bl	8005868 <HAL_UART_Transmit>
 8001260:	46b5      	mov	sp, r6
}
 8001262:	bf00      	nop
 8001264:	3720      	adds	r7, #32
 8001266:	46bd      	mov	sp, r7
 8001268:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800126c:	b003      	add	sp, #12
 800126e:	4770      	bx	lr

08001270 <SN_Find_first>:
/*decode received message*/
int SN_Find_first(const char*message, const char*token)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b0a8      	sub	sp, #160	; 0xa0
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
	char buff[128];
	int token_len = sprintf(buff,token);
 800127a:	f107 0308 	add.w	r3, r7, #8
 800127e:	6839      	ldr	r1, [r7, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f005 fdb3 	bl	8006dec <siprintf>
 8001286:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	int msg_size = sprintf(buff,message);
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	4618      	mov	r0, r3
 8001292:	f005 fdab 	bl	8006dec <siprintf>
 8001296:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	int token_place;
	int true_tokens = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


	for(int i = 0; i <= (msg_size - 1); i++)
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80012a6:	e042      	b.n	800132e <SN_Find_first+0xbe>
	{
		if(message[i] == token[0])
 80012a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	4413      	add	r3, r2
 80012b0:	781a      	ldrb	r2, [r3, #0]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d134      	bne.n	8001324 <SN_Find_first+0xb4>
		{
			true_tokens = 1;
 80012ba:	2301      	movs	r3, #1
 80012bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			for(int j = 1; j <= (token_len - 1); j++)
 80012c0:	2301      	movs	r3, #1
 80012c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80012c6:	e019      	b.n	80012fc <SN_Find_first+0x8c>
			{
				if(message[i + j] == token[j])
 80012c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80012cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012d0:	4413      	add	r3, r2
 80012d2:	461a      	mov	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	781a      	ldrb	r2, [r3, #0]
 80012da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012de:	6839      	ldr	r1, [r7, #0]
 80012e0:	440b      	add	r3, r1
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d104      	bne.n	80012f2 <SN_Find_first+0x82>
				{
					true_tokens++;
 80012e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80012ec:	3301      	adds	r3, #1
 80012ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			for(int j = 1; j <= (token_len - 1); j++)
 80012f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012f6:	3301      	adds	r3, #1
 80012f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80012fc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001300:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001304:	429a      	cmp	r2, r3
 8001306:	dcdf      	bgt.n	80012c8 <SN_Find_first+0x58>
				}
			}

			if(true_tokens == token_len)
 8001308:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800130c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001310:	429a      	cmp	r2, r3
 8001312:	d104      	bne.n	800131e <SN_Find_first+0xae>
			{
				token_place = i;
 8001314:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001318:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
				break;
 800131c:	e00d      	b.n	800133a <SN_Find_first+0xca>
			}
			else
			{
				true_tokens = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	for(int i = 0; i <= (msg_size - 1); i++)
 8001324:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001328:	3301      	adds	r3, #1
 800132a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800132e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001332:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001336:	429a      	cmp	r2, r3
 8001338:	dcb6      	bgt.n	80012a8 <SN_Find_first+0x38>
			}
		}
 }
 return token_place;
 800133a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
}
 800133e:	4618      	mov	r0, r3
 8001340:	37a0      	adds	r7, #160	; 0xa0
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <SN_Value_In_Message>:
		}
 }
 return token_place;
}
void SN_Value_In_Message(const char*message, int from, int to, char*Value)
{
 8001346:	b480      	push	{r7}
 8001348:	b087      	sub	sp, #28
 800134a:	af00      	add	r7, sp, #0
 800134c:	60f8      	str	r0, [r7, #12]
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	603b      	str	r3, [r7, #0]
	int j = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
	for(int i = from; i <= (to - 1); i++)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	e00d      	b.n	800137a <SN_Value_In_Message+0x34>
	{
		Value[j] = message[i];
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	441a      	add	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	6839      	ldr	r1, [r7, #0]
 8001368:	440b      	add	r3, r1
 800136a:	7812      	ldrb	r2, [r2, #0]
 800136c:	701a      	strb	r2, [r3, #0]
		j++;
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	3301      	adds	r3, #1
 8001372:	617b      	str	r3, [r7, #20]
	for(int i = from; i <= (to - 1); i++)
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	3301      	adds	r3, #1
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	429a      	cmp	r2, r3
 8001380:	dced      	bgt.n	800135e <SN_Value_In_Message+0x18>
	}
}
 8001382:	bf00      	nop
 8001384:	bf00      	nop
 8001386:	371c      	adds	r7, #28
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
	...

08001390 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013a0:	4b18      	ldr	r3, [pc, #96]	; (8001404 <MX_ADC1_Init+0x74>)
 80013a2:	4a19      	ldr	r2, [pc, #100]	; (8001408 <MX_ADC1_Init+0x78>)
 80013a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013a6:	4b17      	ldr	r3, [pc, #92]	; (8001404 <MX_ADC1_Init+0x74>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013ac:	4b15      	ldr	r3, [pc, #84]	; (8001404 <MX_ADC1_Init+0x74>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013b2:	4b14      	ldr	r3, [pc, #80]	; (8001404 <MX_ADC1_Init+0x74>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <MX_ADC1_Init+0x74>)
 80013ba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80013be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013c0:	4b10      	ldr	r3, [pc, #64]	; (8001404 <MX_ADC1_Init+0x74>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <MX_ADC1_Init+0x74>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013cc:	480d      	ldr	r0, [pc, #52]	; (8001404 <MX_ADC1_Init+0x74>)
 80013ce:	f001 fe0b 	bl	8002fe8 <HAL_ADC_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80013d8:	f001 f996 	bl	8002708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80013dc:	2309      	movs	r3, #9
 80013de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013e0:	2301      	movs	r3, #1
 80013e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	4619      	mov	r1, r3
 80013ec:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_ADC1_Init+0x74>)
 80013ee:	f002 f893 	bl	8003518 <HAL_ADC_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80013f8:	f001 f986 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013fc:	bf00      	nop
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000230 	.word	0x20000230
 8001408:	40012400 	.word	0x40012400

0800140c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0310 	add.w	r3, r7, #16
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a14      	ldr	r2, [pc, #80]	; (8001478 <HAL_ADC_MspInit+0x6c>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d121      	bne.n	8001470 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800142c:	4b13      	ldr	r3, [pc, #76]	; (800147c <HAL_ADC_MspInit+0x70>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	4a12      	ldr	r2, [pc, #72]	; (800147c <HAL_ADC_MspInit+0x70>)
 8001432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001436:	6193      	str	r3, [r2, #24]
 8001438:	4b10      	ldr	r3, [pc, #64]	; (800147c <HAL_ADC_MspInit+0x70>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001444:	4b0d      	ldr	r3, [pc, #52]	; (800147c <HAL_ADC_MspInit+0x70>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	4a0c      	ldr	r2, [pc, #48]	; (800147c <HAL_ADC_MspInit+0x70>)
 800144a:	f043 0308 	orr.w	r3, r3, #8
 800144e:	6193      	str	r3, [r2, #24]
 8001450:	4b0a      	ldr	r3, [pc, #40]	; (800147c <HAL_ADC_MspInit+0x70>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	f003 0308 	and.w	r3, r3, #8
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800145c:	2302      	movs	r3, #2
 800145e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001460:	2303      	movs	r3, #3
 8001462:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	4619      	mov	r1, r3
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <HAL_ADC_MspInit+0x74>)
 800146c:	f002 fba8 	bl	8003bc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001470:	bf00      	nop
 8001472:	3720      	adds	r7, #32
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40012400 	.word	0x40012400
 800147c:	40021000 	.word	0x40021000
 8001480:	40010c00 	.word	0x40010c00

08001484 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148a:	f107 0310 	add.w	r3, r7, #16
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001498:	4b3f      	ldr	r3, [pc, #252]	; (8001598 <MX_GPIO_Init+0x114>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4a3e      	ldr	r2, [pc, #248]	; (8001598 <MX_GPIO_Init+0x114>)
 800149e:	f043 0310 	orr.w	r3, r3, #16
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	4b3c      	ldr	r3, [pc, #240]	; (8001598 <MX_GPIO_Init+0x114>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f003 0310 	and.w	r3, r3, #16
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b0:	4b39      	ldr	r3, [pc, #228]	; (8001598 <MX_GPIO_Init+0x114>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	4a38      	ldr	r2, [pc, #224]	; (8001598 <MX_GPIO_Init+0x114>)
 80014b6:	f043 0320 	orr.w	r3, r3, #32
 80014ba:	6193      	str	r3, [r2, #24]
 80014bc:	4b36      	ldr	r3, [pc, #216]	; (8001598 <MX_GPIO_Init+0x114>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	f003 0320 	and.w	r3, r3, #32
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c8:	4b33      	ldr	r3, [pc, #204]	; (8001598 <MX_GPIO_Init+0x114>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	4a32      	ldr	r2, [pc, #200]	; (8001598 <MX_GPIO_Init+0x114>)
 80014ce:	f043 0304 	orr.w	r3, r3, #4
 80014d2:	6193      	str	r3, [r2, #24]
 80014d4:	4b30      	ldr	r3, [pc, #192]	; (8001598 <MX_GPIO_Init+0x114>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e0:	4b2d      	ldr	r3, [pc, #180]	; (8001598 <MX_GPIO_Init+0x114>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a2c      	ldr	r2, [pc, #176]	; (8001598 <MX_GPIO_Init+0x114>)
 80014e6:	f043 0308 	orr.w	r3, r3, #8
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <MX_GPIO_Init+0x114>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_GPIO_Port, LD_Pin, GPIO_PIN_SET);
 80014f8:	2201      	movs	r2, #1
 80014fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014fe:	4827      	ldr	r0, [pc, #156]	; (800159c <MX_GPIO_Init+0x118>)
 8001500:	f002 fcf9 	bl	8003ef6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSOR1_Pin|SENSOR2_Pin|SENSOR3_Pin|SENSOR4_Pin
 8001504:	2200      	movs	r2, #0
 8001506:	21ff      	movs	r1, #255	; 0xff
 8001508:	4825      	ldr	r0, [pc, #148]	; (80015a0 <MX_GPIO_Init+0x11c>)
 800150a:	f002 fcf4 	bl	8003ef6 <HAL_GPIO_WritePin>
                          |SENSOR5_Pin|SENSOR6_Pin|SENSOR7_Pin|SENSOR8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDON_Pin|BIN1L_Pin|BIN1R_Pin|AIN2L_Pin
 800150e:	2200      	movs	r2, #0
 8001510:	f24c 0171 	movw	r1, #49265	; 0xc071
 8001514:	4823      	ldr	r0, [pc, #140]	; (80015a4 <MX_GPIO_Init+0x120>)
 8001516:	f002 fcee 	bl	8003ef6 <HAL_GPIO_WritePin>
                          |AIN1R_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_Pin;
 800151a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800151e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001520:	2301      	movs	r3, #1
 8001522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2302      	movs	r3, #2
 800152a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD_GPIO_Port, &GPIO_InitStruct);
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	4619      	mov	r1, r3
 8001532:	481a      	ldr	r0, [pc, #104]	; (800159c <MX_GPIO_Init+0x118>)
 8001534:	f002 fb44 	bl	8003bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR1_Pin|SENSOR2_Pin|SENSOR3_Pin|SENSOR4_Pin
 8001538:	23ff      	movs	r3, #255	; 0xff
 800153a:	613b      	str	r3, [r7, #16]
                          |SENSOR5_Pin|SENSOR6_Pin|SENSOR7_Pin|SENSOR8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153c:	2301      	movs	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001544:	2303      	movs	r3, #3
 8001546:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	4619      	mov	r1, r3
 800154e:	4814      	ldr	r0, [pc, #80]	; (80015a0 <MX_GPIO_Init+0x11c>)
 8001550:	f002 fb36 	bl	8003bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LEDON_Pin|BIN1L_Pin|BIN1R_Pin|AIN2L_Pin
 8001554:	f24c 0331 	movw	r3, #49201	; 0xc031
 8001558:	613b      	str	r3, [r7, #16]
                          |AIN1R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001562:	2303      	movs	r3, #3
 8001564:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001566:	f107 0310 	add.w	r3, r7, #16
 800156a:	4619      	mov	r1, r3
 800156c:	480d      	ldr	r0, [pc, #52]	; (80015a4 <MX_GPIO_Init+0x120>)
 800156e:	f002 fb27 	bl	8003bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001572:	2340      	movs	r3, #64	; 0x40
 8001574:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001576:	2301      	movs	r3, #1
 8001578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800157e:	2301      	movs	r3, #1
 8001580:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001582:	f107 0310 	add.w	r3, r7, #16
 8001586:	4619      	mov	r1, r3
 8001588:	4806      	ldr	r0, [pc, #24]	; (80015a4 <MX_GPIO_Init+0x120>)
 800158a:	f002 fb19 	bl	8003bc0 <HAL_GPIO_Init>

}
 800158e:	bf00      	nop
 8001590:	3720      	adds	r7, #32
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40021000 	.word	0x40021000
 800159c:	40011000 	.word	0x40011000
 80015a0:	40010800 	.word	0x40010800
 80015a4:	40010c00 	.word	0x40010c00

080015a8 <Battery_ADC_measurement>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Battery_ADC_measurement(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	/*Start ADC*/
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80015ac:	2201      	movs	r2, #1
 80015ae:	2102      	movs	r1, #2
 80015b0:	4827      	ldr	r0, [pc, #156]	; (8001650 <Battery_ADC_measurement+0xa8>)
 80015b2:	f002 fca0 	bl	8003ef6 <HAL_GPIO_WritePin>
	/*Get ADC value*/
	HAL_ADC_Start(&hadc1);
 80015b6:	4827      	ldr	r0, [pc, #156]	; (8001654 <Battery_ADC_measurement+0xac>)
 80015b8:	f001 fdee 	bl	8003198 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295
 80015c0:	4824      	ldr	r0, [pc, #144]	; (8001654 <Battery_ADC_measurement+0xac>)
 80015c2:	f001 fe97 	bl	80032f4 <HAL_ADC_PollForConversion>
	raw_battery = HAL_ADC_GetValue(&hadc1);
 80015c6:	4823      	ldr	r0, [pc, #140]	; (8001654 <Battery_ADC_measurement+0xac>)
 80015c8:	f001 ff9a 	bl	8003500 <HAL_ADC_GetValue>
 80015cc:	4603      	mov	r3, r0
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	4b21      	ldr	r3, [pc, #132]	; (8001658 <Battery_ADC_measurement+0xb0>)
 80015d2:	801a      	strh	r2, [r3, #0]
	/*Stop ADC*/
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2102      	movs	r1, #2
 80015d8:	481d      	ldr	r0, [pc, #116]	; (8001650 <Battery_ADC_measurement+0xa8>)
 80015da:	f002 fc8c 	bl	8003ef6 <HAL_GPIO_WritePin>
	//SN_UART_Send(&huart3,"Battery_raw = %hu \r\n ",raw_battery);

	/*Percentages from raw 12bit measurement*/
	if(raw_battery != 0)
 80015de:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <Battery_ADC_measurement+0xb0>)
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d01a      	beq.n	800161c <Battery_ADC_measurement+0x74>
	{
		if(raw_battery > max_battery)
 80015e6:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <Battery_ADC_measurement+0xb0>)
 80015e8:	881a      	ldrh	r2, [r3, #0]
 80015ea:	4b1c      	ldr	r3, [pc, #112]	; (800165c <Battery_ADC_measurement+0xb4>)
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d903      	bls.n	80015fa <Battery_ADC_measurement+0x52>
		{
			raw_battery = max_battery;
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <Battery_ADC_measurement+0xb4>)
 80015f4:	881a      	ldrh	r2, [r3, #0]
 80015f6:	4b18      	ldr	r3, [pc, #96]	; (8001658 <Battery_ADC_measurement+0xb0>)
 80015f8:	801a      	strh	r2, [r3, #0]
		}
		battery_procentage_raw = (raw_battery * 100) / max_battery;
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <Battery_ADC_measurement+0xb0>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	2364      	movs	r3, #100	; 0x64
 8001602:	fb02 f303 	mul.w	r3, r2, r3
 8001606:	4a15      	ldr	r2, [pc, #84]	; (800165c <Battery_ADC_measurement+0xb4>)
 8001608:	8812      	ldrh	r2, [r2, #0]
 800160a:	fb93 f3f2 	sdiv	r3, r3, r2
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fb64 	bl	8000cdc <__aeabi_i2f>
 8001614:	4603      	mov	r3, r0
 8001616:	4a12      	ldr	r2, [pc, #72]	; (8001660 <Battery_ADC_measurement+0xb8>)
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e003      	b.n	8001624 <Battery_ADC_measurement+0x7c>
	}
	else
	{
		battery_procentage_raw = 0;
 800161c:	4b10      	ldr	r3, [pc, #64]	; (8001660 <Battery_ADC_measurement+0xb8>)
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
	}
	/*Motor speed*/
	speedlevel = ((100 - battery_procentage_raw) + 100) / 100;
 8001624:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <Battery_ADC_measurement+0xb8>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	480e      	ldr	r0, [pc, #56]	; (8001664 <Battery_ADC_measurement+0xbc>)
 800162c:	f7ff faa0 	bl	8000b70 <__aeabi_fsub>
 8001630:	4603      	mov	r3, r0
 8001632:	490c      	ldr	r1, [pc, #48]	; (8001664 <Battery_ADC_measurement+0xbc>)
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fa9d 	bl	8000b74 <__addsf3>
 800163a:	4603      	mov	r3, r0
 800163c:	4909      	ldr	r1, [pc, #36]	; (8001664 <Battery_ADC_measurement+0xbc>)
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fc54 	bl	8000eec <__aeabi_fdiv>
 8001644:	4603      	mov	r3, r0
 8001646:	461a      	mov	r2, r3
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <Battery_ADC_measurement+0xc0>)
 800164a:	601a      	str	r2, [r3, #0]
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40010c00 	.word	0x40010c00
 8001654:	20000230 	.word	0x20000230
 8001658:	200002d4 	.word	0x200002d4
 800165c:	20000030 	.word	0x20000030
 8001660:	200002d8 	.word	0x200002d8
 8001664:	42c80000 	.word	0x42c80000
 8001668:	20000008 	.word	0x20000008

0800166c <delay_us>:
void delay_us (uint16_t us)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <delay_us+0x2c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2200      	movs	r2, #0
 800167c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 800167e:	bf00      	nop
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <delay_us+0x2c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	429a      	cmp	r2, r3
 800168a:	d3f9      	bcc.n	8001680 <delay_us+0x14>
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	200002e0 	.word	0x200002e0

0800169c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0308 	add.w	r3, r7, #8
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80016b6:	887b      	ldrh	r3, [r7, #2]
 80016b8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ba:	2301      	movs	r3, #1
 80016bc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2302      	movs	r3, #2
 80016c0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	4619      	mov	r1, r3
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f002 fa79 	bl	8003bc0 <HAL_GPIO_Init>
}
 80016ce:	bf00      	nop
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b086      	sub	sp, #24
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	460b      	mov	r3, r1
 80016e0:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e2:	f107 0308 	add.w	r3, r7, #8
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80016f0:	887b      	ldrh	r3, [r7, #2]
 80016f2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016f8:	2301      	movs	r3, #1
 80016fa:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80016fc:	f107 0308 	add.w	r3, r7, #8
 8001700:	4619      	mov	r1, r3
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f002 fa5c 	bl	8003bc0 <HAL_GPIO_Init>
}
 8001708:	bf00      	nop
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <motor_control>:


void motor_control (double pos_right, double pos_left)
{
 8001710:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001714:	b084      	sub	sp, #16
 8001716:	af00      	add	r7, sp, #0
 8001718:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800171c:	e9c7 2300 	strd	r2, r3, [r7]
	if (pos_left < 0 )
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	e9d7 0100 	ldrd	r0, r1, [r7]
 800172c:	f7ff f946 	bl	80009bc <__aeabi_dcmplt>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d02f      	beq.n	8001796 <motor_control+0x86>
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_2, (int)((ARR*pos_left*-1)*speedlevel));
 8001736:	4b64      	ldr	r3, [pc, #400]	; (80018c8 <motor_control+0x1b8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe fe62 	bl	8000404 <__aeabi_i2d>
 8001740:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001744:	f7fe fec8 	bl	80004d8 <__aeabi_dmul>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4690      	mov	r8, r2
 800174e:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001752:	4b5e      	ldr	r3, [pc, #376]	; (80018cc <motor_control+0x1bc>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe fe66 	bl	8000428 <__aeabi_f2d>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4640      	mov	r0, r8
 8001762:	4649      	mov	r1, r9
 8001764:	f7fe feb8 	bl	80004d8 <__aeabi_dmul>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4610      	mov	r0, r2
 800176e:	4619      	mov	r1, r3
 8001770:	f7ff f962 	bl	8000a38 <__aeabi_d2iz>
 8001774:	4602      	mov	r2, r0
 8001776:	4b56      	ldr	r3, [pc, #344]	; (80018d0 <motor_control+0x1c0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800177c:	2201      	movs	r2, #1
 800177e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001782:	4854      	ldr	r0, [pc, #336]	; (80018d4 <motor_control+0x1c4>)
 8001784:	f002 fbb7 	bl	8003ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001788:	2200      	movs	r2, #0
 800178a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800178e:	4851      	ldr	r0, [pc, #324]	; (80018d4 <motor_control+0x1c4>)
 8001790:	f002 fbb1 	bl	8003ef6 <HAL_GPIO_WritePin>
 8001794:	e02d      	b.n	80017f2 <motor_control+0xe2>
	}
	else
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_2, (int)((ARR*pos_left)*speedlevel));
 8001796:	4b4c      	ldr	r3, [pc, #304]	; (80018c8 <motor_control+0x1b8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe fe32 	bl	8000404 <__aeabi_i2d>
 80017a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017a4:	f7fe fe98 	bl	80004d8 <__aeabi_dmul>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4690      	mov	r8, r2
 80017ae:	4699      	mov	r9, r3
 80017b0:	4b46      	ldr	r3, [pc, #280]	; (80018cc <motor_control+0x1bc>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe fe37 	bl	8000428 <__aeabi_f2d>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4640      	mov	r0, r8
 80017c0:	4649      	mov	r1, r9
 80017c2:	f7fe fe89 	bl	80004d8 <__aeabi_dmul>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4610      	mov	r0, r2
 80017cc:	4619      	mov	r1, r3
 80017ce:	f7ff f933 	bl	8000a38 <__aeabi_d2iz>
 80017d2:	4602      	mov	r2, r0
 80017d4:	4b3e      	ldr	r3, [pc, #248]	; (80018d0 <motor_control+0x1c0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80017da:	2200      	movs	r2, #0
 80017dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017e0:	483c      	ldr	r0, [pc, #240]	; (80018d4 <motor_control+0x1c4>)
 80017e2:	f002 fb88 	bl	8003ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80017e6:	2201      	movs	r2, #1
 80017e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017ec:	4839      	ldr	r0, [pc, #228]	; (80018d4 <motor_control+0x1c4>)
 80017ee:	f002 fb82 	bl	8003ef6 <HAL_GPIO_WritePin>
	}
	if (pos_right < 0 )
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	f04f 0300 	mov.w	r3, #0
 80017fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017fe:	f7ff f8dd 	bl	80009bc <__aeabi_dcmplt>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d02d      	beq.n	8001864 <motor_control+0x154>
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_4, (int)((ARR*pos_right*-1)*speedlevel));
 8001808:	4b2f      	ldr	r3, [pc, #188]	; (80018c8 <motor_control+0x1b8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe fdf9 	bl	8000404 <__aeabi_i2d>
 8001812:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001816:	f7fe fe5f 	bl	80004d8 <__aeabi_dmul>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4614      	mov	r4, r2
 8001820:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001824:	4b29      	ldr	r3, [pc, #164]	; (80018cc <motor_control+0x1bc>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fdfd 	bl	8000428 <__aeabi_f2d>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4620      	mov	r0, r4
 8001834:	4629      	mov	r1, r5
 8001836:	f7fe fe4f 	bl	80004d8 <__aeabi_dmul>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	f7ff f8f9 	bl	8000a38 <__aeabi_d2iz>
 8001846:	4602      	mov	r2, r0
 8001848:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <motor_control+0x1c0>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800184e:	2201      	movs	r2, #1
 8001850:	2120      	movs	r1, #32
 8001852:	4820      	ldr	r0, [pc, #128]	; (80018d4 <motor_control+0x1c4>)
 8001854:	f002 fb4f 	bl	8003ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001858:	2200      	movs	r2, #0
 800185a:	2110      	movs	r1, #16
 800185c:	481d      	ldr	r0, [pc, #116]	; (80018d4 <motor_control+0x1c4>)
 800185e:	f002 fb4a 	bl	8003ef6 <HAL_GPIO_WritePin>
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_4, (int)((ARR*pos_right)*speedlevel));
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
	}
}
 8001862:	e02b      	b.n	80018bc <motor_control+0x1ac>
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_4, (int)((ARR*pos_right)*speedlevel));
 8001864:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <motor_control+0x1b8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fdcb 	bl	8000404 <__aeabi_i2d>
 800186e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001872:	f7fe fe31 	bl	80004d8 <__aeabi_dmul>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4614      	mov	r4, r2
 800187c:	461d      	mov	r5, r3
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <motor_control+0x1bc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fdd0 	bl	8000428 <__aeabi_f2d>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4620      	mov	r0, r4
 800188e:	4629      	mov	r1, r5
 8001890:	f7fe fe22 	bl	80004d8 <__aeabi_dmul>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	f7ff f8cc 	bl	8000a38 <__aeabi_d2iz>
 80018a0:	4602      	mov	r2, r0
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <motor_control+0x1c0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80018a8:	2200      	movs	r2, #0
 80018aa:	2120      	movs	r1, #32
 80018ac:	4809      	ldr	r0, [pc, #36]	; (80018d4 <motor_control+0x1c4>)
 80018ae:	f002 fb22 	bl	8003ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80018b2:	2201      	movs	r2, #1
 80018b4:	2110      	movs	r1, #16
 80018b6:	4807      	ldr	r0, [pc, #28]	; (80018d4 <motor_control+0x1c4>)
 80018b8:	f002 fb1d 	bl	8003ef6 <HAL_GPIO_WritePin>
}
 80018bc:	bf00      	nop
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018c6:	bf00      	nop
 80018c8:	2000001c 	.word	0x2000001c
 80018cc:	20000008 	.word	0x20000008
 80018d0:	20000370 	.word	0x20000370
 80018d4:	40010c00 	.word	0x40010c00

080018d8 <sharp_turn>:


void sharp_turn () {
 80018d8:	b5b0      	push	{r4, r5, r7, lr}
 80018da:	af00      	add	r7, sp, #0

	if (last_idle < 25)
 80018dc:	4b2c      	ldr	r3, [pc, #176]	; (8001990 <sharp_turn+0xb8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b18      	cmp	r3, #24
 80018e2:	dc29      	bgt.n	8001938 <sharp_turn+0x60>
	{
		if (last_end == 1)
 80018e4:	4b2b      	ldr	r3, [pc, #172]	; (8001994 <sharp_turn+0xbc>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d112      	bne.n	8001912 <sharp_turn+0x3a>
			motor_control(Sharp_bend_speed_right, Sharp_bend_speed_left);
 80018ec:	4b2a      	ldr	r3, [pc, #168]	; (8001998 <sharp_turn+0xc0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fd87 	bl	8000404 <__aeabi_i2d>
 80018f6:	4604      	mov	r4, r0
 80018f8:	460d      	mov	r5, r1
 80018fa:	4b28      	ldr	r3, [pc, #160]	; (800199c <sharp_turn+0xc4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fd80 	bl	8000404 <__aeabi_i2d>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4620      	mov	r0, r4
 800190a:	4629      	mov	r1, r5
 800190c:	f7ff ff00 	bl	8001710 <motor_control>
		if (last_end == 1)
			motor_control(Bend_speed_right, Bend_speed_left);
		else
			motor_control(Bend_speed_left, Bend_speed_right);
	}
}
 8001910:	e03b      	b.n	800198a <sharp_turn+0xb2>
			motor_control(Sharp_bend_speed_left, Sharp_bend_speed_right);
 8001912:	4b22      	ldr	r3, [pc, #136]	; (800199c <sharp_turn+0xc4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fd74 	bl	8000404 <__aeabi_i2d>
 800191c:	4604      	mov	r4, r0
 800191e:	460d      	mov	r5, r1
 8001920:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <sharp_turn+0xc0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fd6d 	bl	8000404 <__aeabi_i2d>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4620      	mov	r0, r4
 8001930:	4629      	mov	r1, r5
 8001932:	f7ff feed 	bl	8001710 <motor_control>
}
 8001936:	e028      	b.n	800198a <sharp_turn+0xb2>
		if (last_end == 1)
 8001938:	4b16      	ldr	r3, [pc, #88]	; (8001994 <sharp_turn+0xbc>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d112      	bne.n	8001966 <sharp_turn+0x8e>
			motor_control(Bend_speed_right, Bend_speed_left);
 8001940:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <sharp_turn+0xc8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fd5d 	bl	8000404 <__aeabi_i2d>
 800194a:	4604      	mov	r4, r0
 800194c:	460d      	mov	r5, r1
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <sharp_turn+0xcc>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fd56 	bl	8000404 <__aeabi_i2d>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4620      	mov	r0, r4
 800195e:	4629      	mov	r1, r5
 8001960:	f7ff fed6 	bl	8001710 <motor_control>
}
 8001964:	e011      	b.n	800198a <sharp_turn+0xb2>
			motor_control(Bend_speed_left, Bend_speed_right);
 8001966:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <sharp_turn+0xcc>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fd4a 	bl	8000404 <__aeabi_i2d>
 8001970:	4604      	mov	r4, r0
 8001972:	460d      	mov	r5, r1
 8001974:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <sharp_turn+0xc8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f7fe fd43 	bl	8000404 <__aeabi_i2d>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4620      	mov	r0, r4
 8001984:	4629      	mov	r1, r5
 8001986:	f7ff fec3 	bl	8001710 <motor_control>
}
 800198a:	bf00      	nop
 800198c:	bdb0      	pop	{r4, r5, r7, pc}
 800198e:	bf00      	nop
 8001990:	200002b0 	.word	0x200002b0
 8001994:	200002ac 	.word	0x200002ac
 8001998:	20000020 	.word	0x20000020
 800199c:	20000024 	.word	0x20000024
 80019a0:	20000028 	.word	0x20000028
 80019a4:	2000002c 	.word	0x2000002c

080019a8 <QTR8_read>:
int QTR8_read ()
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDON_GPIO_Port, LEDON_Pin, 1);
 80019ae:	2201      	movs	r2, #1
 80019b0:	2101      	movs	r1, #1
 80019b2:	48a2      	ldr	r0, [pc, #648]	; (8001c3c <QTR8_read+0x294>)
 80019b4:	f002 fa9f 	bl	8003ef6 <HAL_GPIO_WritePin>

	Set_Pin_Output(SENSOR1_GPIO_Port, SENSOR1_Pin);
 80019b8:	2101      	movs	r1, #1
 80019ba:	48a1      	ldr	r0, [pc, #644]	; (8001c40 <QTR8_read+0x298>)
 80019bc:	f7ff fe6e 	bl	800169c <Set_Pin_Output>
	Set_Pin_Output(SENSOR2_GPIO_Port, SENSOR2_Pin);
 80019c0:	2102      	movs	r1, #2
 80019c2:	489f      	ldr	r0, [pc, #636]	; (8001c40 <QTR8_read+0x298>)
 80019c4:	f7ff fe6a 	bl	800169c <Set_Pin_Output>
	Set_Pin_Output(SENSOR3_GPIO_Port, SENSOR3_Pin);
 80019c8:	2104      	movs	r1, #4
 80019ca:	489d      	ldr	r0, [pc, #628]	; (8001c40 <QTR8_read+0x298>)
 80019cc:	f7ff fe66 	bl	800169c <Set_Pin_Output>
	Set_Pin_Output(SENSOR4_GPIO_Port, SENSOR4_Pin);
 80019d0:	2108      	movs	r1, #8
 80019d2:	489b      	ldr	r0, [pc, #620]	; (8001c40 <QTR8_read+0x298>)
 80019d4:	f7ff fe62 	bl	800169c <Set_Pin_Output>
	Set_Pin_Output(SENSOR5_GPIO_Port, SENSOR5_Pin);
 80019d8:	2110      	movs	r1, #16
 80019da:	4899      	ldr	r0, [pc, #612]	; (8001c40 <QTR8_read+0x298>)
 80019dc:	f7ff fe5e 	bl	800169c <Set_Pin_Output>
	Set_Pin_Output(SENSOR6_GPIO_Port, SENSOR6_Pin);
 80019e0:	2120      	movs	r1, #32
 80019e2:	4897      	ldr	r0, [pc, #604]	; (8001c40 <QTR8_read+0x298>)
 80019e4:	f7ff fe5a 	bl	800169c <Set_Pin_Output>
	Set_Pin_Output(SENSOR7_GPIO_Port, SENSOR7_Pin);
 80019e8:	2140      	movs	r1, #64	; 0x40
 80019ea:	4895      	ldr	r0, [pc, #596]	; (8001c40 <QTR8_read+0x298>)
 80019ec:	f7ff fe56 	bl	800169c <Set_Pin_Output>
	Set_Pin_Output(SENSOR8_GPIO_Port, SENSOR8_Pin);
 80019f0:	2180      	movs	r1, #128	; 0x80
 80019f2:	4893      	ldr	r0, [pc, #588]	; (8001c40 <QTR8_read+0x298>)
 80019f4:	f7ff fe52 	bl	800169c <Set_Pin_Output>

	HAL_GPIO_WritePin (SENSOR1_GPIO_Port, SENSOR1_Pin, 1);
 80019f8:	2201      	movs	r2, #1
 80019fa:	2101      	movs	r1, #1
 80019fc:	4890      	ldr	r0, [pc, #576]	; (8001c40 <QTR8_read+0x298>)
 80019fe:	f002 fa7a 	bl	8003ef6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR2_GPIO_Port, SENSOR2_Pin, 1);
 8001a02:	2201      	movs	r2, #1
 8001a04:	2102      	movs	r1, #2
 8001a06:	488e      	ldr	r0, [pc, #568]	; (8001c40 <QTR8_read+0x298>)
 8001a08:	f002 fa75 	bl	8003ef6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR3_GPIO_Port, SENSOR3_Pin, 1);
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	2104      	movs	r1, #4
 8001a10:	488b      	ldr	r0, [pc, #556]	; (8001c40 <QTR8_read+0x298>)
 8001a12:	f002 fa70 	bl	8003ef6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR4_GPIO_Port, SENSOR4_Pin, 1);
 8001a16:	2201      	movs	r2, #1
 8001a18:	2108      	movs	r1, #8
 8001a1a:	4889      	ldr	r0, [pc, #548]	; (8001c40 <QTR8_read+0x298>)
 8001a1c:	f002 fa6b 	bl	8003ef6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR5_GPIO_Port, SENSOR5_Pin, 1);
 8001a20:	2201      	movs	r2, #1
 8001a22:	2110      	movs	r1, #16
 8001a24:	4886      	ldr	r0, [pc, #536]	; (8001c40 <QTR8_read+0x298>)
 8001a26:	f002 fa66 	bl	8003ef6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR6_GPIO_Port, SENSOR6_Pin, 1);
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	2120      	movs	r1, #32
 8001a2e:	4884      	ldr	r0, [pc, #528]	; (8001c40 <QTR8_read+0x298>)
 8001a30:	f002 fa61 	bl	8003ef6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR7_GPIO_Port, SENSOR7_Pin, 1);
 8001a34:	2201      	movs	r2, #1
 8001a36:	2140      	movs	r1, #64	; 0x40
 8001a38:	4881      	ldr	r0, [pc, #516]	; (8001c40 <QTR8_read+0x298>)
 8001a3a:	f002 fa5c 	bl	8003ef6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR8_GPIO_Port, SENSOR8_Pin, 1);
 8001a3e:	2201      	movs	r2, #1
 8001a40:	2180      	movs	r1, #128	; 0x80
 8001a42:	487f      	ldr	r0, [pc, #508]	; (8001c40 <QTR8_read+0x298>)
 8001a44:	f002 fa57 	bl	8003ef6 <HAL_GPIO_WritePin>

	delay_us(10);
 8001a48:	200a      	movs	r0, #10
 8001a4a:	f7ff fe0f 	bl	800166c <delay_us>

	Set_Pin_Input(SENSOR1_GPIO_Port, SENSOR1_Pin);
 8001a4e:	2101      	movs	r1, #1
 8001a50:	487b      	ldr	r0, [pc, #492]	; (8001c40 <QTR8_read+0x298>)
 8001a52:	f7ff fe40 	bl	80016d6 <Set_Pin_Input>
	Set_Pin_Input(SENSOR2_GPIO_Port, SENSOR2_Pin);
 8001a56:	2102      	movs	r1, #2
 8001a58:	4879      	ldr	r0, [pc, #484]	; (8001c40 <QTR8_read+0x298>)
 8001a5a:	f7ff fe3c 	bl	80016d6 <Set_Pin_Input>
	Set_Pin_Input(SENSOR3_GPIO_Port, SENSOR3_Pin);
 8001a5e:	2104      	movs	r1, #4
 8001a60:	4877      	ldr	r0, [pc, #476]	; (8001c40 <QTR8_read+0x298>)
 8001a62:	f7ff fe38 	bl	80016d6 <Set_Pin_Input>
	Set_Pin_Input(SENSOR4_GPIO_Port, SENSOR4_Pin);
 8001a66:	2108      	movs	r1, #8
 8001a68:	4875      	ldr	r0, [pc, #468]	; (8001c40 <QTR8_read+0x298>)
 8001a6a:	f7ff fe34 	bl	80016d6 <Set_Pin_Input>
	Set_Pin_Input(SENSOR5_GPIO_Port, SENSOR5_Pin);
 8001a6e:	2110      	movs	r1, #16
 8001a70:	4873      	ldr	r0, [pc, #460]	; (8001c40 <QTR8_read+0x298>)
 8001a72:	f7ff fe30 	bl	80016d6 <Set_Pin_Input>
	Set_Pin_Input(SENSOR6_GPIO_Port, SENSOR6_Pin);
 8001a76:	2120      	movs	r1, #32
 8001a78:	4871      	ldr	r0, [pc, #452]	; (8001c40 <QTR8_read+0x298>)
 8001a7a:	f7ff fe2c 	bl	80016d6 <Set_Pin_Input>
	Set_Pin_Input(SENSOR7_GPIO_Port, SENSOR7_Pin);
 8001a7e:	2140      	movs	r1, #64	; 0x40
 8001a80:	486f      	ldr	r0, [pc, #444]	; (8001c40 <QTR8_read+0x298>)
 8001a82:	f7ff fe28 	bl	80016d6 <Set_Pin_Input>
	Set_Pin_Input(SENSOR8_GPIO_Port, SENSOR8_Pin);
 8001a86:	2180      	movs	r1, #128	; 0x80
 8001a88:	486d      	ldr	r0, [pc, #436]	; (8001c40 <QTR8_read+0x298>)
 8001a8a:	f7ff fe24 	bl	80016d6 <Set_Pin_Input>

	// Threshold
	 delay_us(4500);
 8001a8e:	f241 1094 	movw	r0, #4500	; 0x1194
 8001a92:	f7ff fdeb 	bl	800166c <delay_us>

	sensor_read = 0x00000000;
 8001a96:	4b6b      	ldr	r3, [pc, #428]	; (8001c44 <QTR8_read+0x29c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
	int pos = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	607b      	str	r3, [r7, #4]
  int active = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	603b      	str	r3, [r7, #0]

	if (HAL_GPIO_ReadPin(SENSOR1_GPIO_Port, SENSOR1_Pin)) {
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	4866      	ldr	r0, [pc, #408]	; (8001c40 <QTR8_read+0x298>)
 8001aa8:	f002 fa0e 	bl	8003ec8 <HAL_GPIO_ReadPin>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00f      	beq.n	8001ad2 <QTR8_read+0x12a>
		sensor_read |= 0x00000001;
 8001ab2:	4b64      	ldr	r3, [pc, #400]	; (8001c44 <QTR8_read+0x29c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	4a62      	ldr	r2, [pc, #392]	; (8001c44 <QTR8_read+0x29c>)
 8001abc:	6013      	str	r3, [r2, #0]
		pos += 1000;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001ac4:	607b      	str	r3, [r7, #4]
    active++;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	603b      	str	r3, [r7, #0]
		last_end = 1;
 8001acc:	4b5e      	ldr	r3, [pc, #376]	; (8001c48 <QTR8_read+0x2a0>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(SENSOR2_GPIO_Port, SENSOR2_Pin)) {
 8001ad2:	2102      	movs	r1, #2
 8001ad4:	485a      	ldr	r0, [pc, #360]	; (8001c40 <QTR8_read+0x298>)
 8001ad6:	f002 f9f7 	bl	8003ec8 <HAL_GPIO_ReadPin>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00c      	beq.n	8001afa <QTR8_read+0x152>
		sensor_read |= 0x00000010;
 8001ae0:	4b58      	ldr	r3, [pc, #352]	; (8001c44 <QTR8_read+0x29c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f043 0310 	orr.w	r3, r3, #16
 8001ae8:	4a56      	ldr	r2, [pc, #344]	; (8001c44 <QTR8_read+0x29c>)
 8001aea:	6013      	str	r3, [r2, #0]
		pos += 2000;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001af2:	607b      	str	r3, [r7, #4]
    active++;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	3301      	adds	r3, #1
 8001af8:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR3_GPIO_Port, SENSOR3_Pin)) {
 8001afa:	2104      	movs	r1, #4
 8001afc:	4850      	ldr	r0, [pc, #320]	; (8001c40 <QTR8_read+0x298>)
 8001afe:	f002 f9e3 	bl	8003ec8 <HAL_GPIO_ReadPin>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00c      	beq.n	8001b22 <QTR8_read+0x17a>
		sensor_read |= 0x00000100;
 8001b08:	4b4e      	ldr	r3, [pc, #312]	; (8001c44 <QTR8_read+0x29c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b10:	4a4c      	ldr	r2, [pc, #304]	; (8001c44 <QTR8_read+0x29c>)
 8001b12:	6013      	str	r3, [r2, #0]
		pos += 3000;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8001b1a:	607b      	str	r3, [r7, #4]
    active++;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR4_GPIO_Port, SENSOR4_Pin)) {
 8001b22:	2108      	movs	r1, #8
 8001b24:	4846      	ldr	r0, [pc, #280]	; (8001c40 <QTR8_read+0x298>)
 8001b26:	f002 f9cf 	bl	8003ec8 <HAL_GPIO_ReadPin>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00c      	beq.n	8001b4a <QTR8_read+0x1a2>
		sensor_read |= 0x00001000;
 8001b30:	4b44      	ldr	r3, [pc, #272]	; (8001c44 <QTR8_read+0x29c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b38:	4a42      	ldr	r2, [pc, #264]	; (8001c44 <QTR8_read+0x29c>)
 8001b3a:	6013      	str	r3, [r2, #0]
		pos += 4000;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8001b42:	607b      	str	r3, [r7, #4]
    active++;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	3301      	adds	r3, #1
 8001b48:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR5_GPIO_Port, SENSOR5_Pin)) {
 8001b4a:	2110      	movs	r1, #16
 8001b4c:	483c      	ldr	r0, [pc, #240]	; (8001c40 <QTR8_read+0x298>)
 8001b4e:	f002 f9bb 	bl	8003ec8 <HAL_GPIO_ReadPin>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00d      	beq.n	8001b74 <QTR8_read+0x1cc>
		sensor_read |= 0x00010000;
 8001b58:	4b3a      	ldr	r3, [pc, #232]	; (8001c44 <QTR8_read+0x29c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b60:	4a38      	ldr	r2, [pc, #224]	; (8001c44 <QTR8_read+0x29c>)
 8001b62:	6013      	str	r3, [r2, #0]
		pos += 5000;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8001b6a:	3308      	adds	r3, #8
 8001b6c:	607b      	str	r3, [r7, #4]
    active++;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	3301      	adds	r3, #1
 8001b72:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR6_GPIO_Port, SENSOR6_Pin)) {
 8001b74:	2120      	movs	r1, #32
 8001b76:	4832      	ldr	r0, [pc, #200]	; (8001c40 <QTR8_read+0x298>)
 8001b78:	f002 f9a6 	bl	8003ec8 <HAL_GPIO_ReadPin>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00d      	beq.n	8001b9e <QTR8_read+0x1f6>
		sensor_read |= 0x00100000;
 8001b82:	4b30      	ldr	r3, [pc, #192]	; (8001c44 <QTR8_read+0x29c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b8a:	4a2e      	ldr	r2, [pc, #184]	; (8001c44 <QTR8_read+0x29c>)
 8001b8c:	6013      	str	r3, [r2, #0]
		pos += 6000;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8001b94:	3310      	adds	r3, #16
 8001b96:	607b      	str	r3, [r7, #4]
    active++;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR7_GPIO_Port, SENSOR7_Pin)) {
 8001b9e:	2140      	movs	r1, #64	; 0x40
 8001ba0:	4827      	ldr	r0, [pc, #156]	; (8001c40 <QTR8_read+0x298>)
 8001ba2:	f002 f991 	bl	8003ec8 <HAL_GPIO_ReadPin>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00d      	beq.n	8001bc8 <QTR8_read+0x220>
		sensor_read |= 0x01000000;
 8001bac:	4b25      	ldr	r3, [pc, #148]	; (8001c44 <QTR8_read+0x29c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bb4:	4a23      	ldr	r2, [pc, #140]	; (8001c44 <QTR8_read+0x29c>)
 8001bb6:	6013      	str	r3, [r2, #0]
		pos += 7000;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f503 53da 	add.w	r3, r3, #6976	; 0x1b40
 8001bbe:	3318      	adds	r3, #24
 8001bc0:	607b      	str	r3, [r7, #4]
    active++;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR8_GPIO_Port, SENSOR8_Pin)) {
 8001bc8:	2180      	movs	r1, #128	; 0x80
 8001bca:	481d      	ldr	r0, [pc, #116]	; (8001c40 <QTR8_read+0x298>)
 8001bcc:	f002 f97c 	bl	8003ec8 <HAL_GPIO_ReadPin>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00f      	beq.n	8001bf6 <QTR8_read+0x24e>
		sensor_read |= 0x10000000;
 8001bd6:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <QTR8_read+0x29c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bde:	4a19      	ldr	r2, [pc, #100]	; (8001c44 <QTR8_read+0x29c>)
 8001be0:	6013      	str	r3, [r2, #0]
		pos += 8000;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8001be8:	607b      	str	r3, [r7, #4]
    active++;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	3301      	adds	r3, #1
 8001bee:	603b      	str	r3, [r7, #0]
		last_end = 0;
 8001bf0:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <QTR8_read+0x2a0>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
  }

  HAL_GPIO_WritePin(LEDON_GPIO_Port, LEDON_Pin, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	4810      	ldr	r0, [pc, #64]	; (8001c3c <QTR8_read+0x294>)
 8001bfc:	f002 f97b 	bl	8003ef6 <HAL_GPIO_WritePin>

  actives = active;
 8001c00:	4a12      	ldr	r2, [pc, #72]	; (8001c4c <QTR8_read+0x2a4>)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	6013      	str	r3, [r2, #0]
	position = pos/active;
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c0e:	4a10      	ldr	r2, [pc, #64]	; (8001c50 <QTR8_read+0x2a8>)
 8001c10:	6013      	str	r3, [r2, #0]

	if (actives == 0)
 8001c12:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <QTR8_read+0x2a4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d105      	bne.n	8001c26 <QTR8_read+0x27e>
		last_idle++;
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <QTR8_read+0x2ac>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	4a0c      	ldr	r2, [pc, #48]	; (8001c54 <QTR8_read+0x2ac>)
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	e002      	b.n	8001c2c <QTR8_read+0x284>
	else
		last_idle = 0;
 8001c26:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <QTR8_read+0x2ac>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]

	return pos/active;
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40010c00 	.word	0x40010c00
 8001c40:	40010800 	.word	0x40010800
 8001c44:	20000260 	.word	0x20000260
 8001c48:	200002ac 	.word	0x200002ac
 8001c4c:	200002b4 	.word	0x200002b4
 8001c50:	20000264 	.word	0x20000264
 8001c54:	200002b0 	.word	0x200002b0

08001c58 <forward_brake>:


void forward_brake(int pos_right, int pos_left)
{
 8001c58:	b5b0      	push	{r4, r5, r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
	if (actives == 0)
 8001c62:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <forward_brake+0x3c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d102      	bne.n	8001c70 <forward_brake+0x18>
		sharp_turn();
 8001c6a:	f7ff fe35 	bl	80018d8 <sharp_turn>
	else
	  motor_control(pos_right, pos_left);
}
 8001c6e:	e00d      	b.n	8001c8c <forward_brake+0x34>
	  motor_control(pos_right, pos_left);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7fe fbc7 	bl	8000404 <__aeabi_i2d>
 8001c76:	4604      	mov	r4, r0
 8001c78:	460d      	mov	r5, r1
 8001c7a:	6838      	ldr	r0, [r7, #0]
 8001c7c:	f7fe fbc2 	bl	8000404 <__aeabi_i2d>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4620      	mov	r0, r4
 8001c86:	4629      	mov	r1, r5
 8001c88:	f7ff fd42 	bl	8001710 <motor_control>
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bdb0      	pop	{r4, r5, r7, pc}
 8001c94:	200002b4 	.word	0x200002b4

08001c98 <past_errors>:

void past_errors (int error)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  for (int i = 9; i > 0; i--)
 8001ca0:	2309      	movs	r3, #9
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	e00b      	b.n	8001cbe <past_errors+0x26>
      errors[i] = errors[i-1];
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <past_errors+0x3c>)
 8001cac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cb0:	4908      	ldr	r1, [pc, #32]	; (8001cd4 <past_errors+0x3c>)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int i = 9; i > 0; i--)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	dcf0      	bgt.n	8001ca6 <past_errors+0xe>
  errors[0] = error;
 8001cc4:	4a03      	ldr	r2, [pc, #12]	; (8001cd4 <past_errors+0x3c>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6013      	str	r3, [r2, #0]
}
 8001cca:	bf00      	nop
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr
 8001cd4:	20000284 	.word	0x20000284

08001cd8 <errors_sum>:

int errors_sum (int index, int abs)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  int sum = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < index; i++)
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	e01a      	b.n	8001d22 <errors_sum+0x4a>
  {
    if (abs == 1 && errors[i] < 0)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d10d      	bne.n	8001d0e <errors_sum+0x36>
 8001cf2:	4a11      	ldr	r2, [pc, #68]	; (8001d38 <errors_sum+0x60>)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	da07      	bge.n	8001d0e <errors_sum+0x36>
      sum += -errors[i];
 8001cfe:	4a0e      	ldr	r2, [pc, #56]	; (8001d38 <errors_sum+0x60>)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	e006      	b.n	8001d1c <errors_sum+0x44>
    else
      sum += errors[i];
 8001d0e:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <errors_sum+0x60>)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	4413      	add	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < index; i++)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	dbe0      	blt.n	8001cec <errors_sum+0x14>
  }
  return sum;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000284 	.word	0x20000284

08001d3c <PID_control>:

void PID_control() {
 8001d3c:	b590      	push	{r4, r7, lr}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af00      	add	r7, sp, #0
  uint16_t position = QTR8_read();
 8001d42:	f7ff fe31 	bl	80019a8 <QTR8_read>
 8001d46:	4603      	mov	r3, r0
 8001d48:	81fb      	strh	r3, [r7, #14]
  int error = 4500 - position;
 8001d4a:	89fb      	ldrh	r3, [r7, #14]
 8001d4c:	f5c3 538c 	rsb	r3, r3, #4480	; 0x1180
 8001d50:	3314      	adds	r3, #20
 8001d52:	60bb      	str	r3, [r7, #8]
  past_errors(error);
 8001d54:	68b8      	ldr	r0, [r7, #8]
 8001d56:	f7ff ff9f 	bl	8001c98 <past_errors>

  P = error;
 8001d5a:	4a55      	ldr	r2, [pc, #340]	; (8001eb0 <PID_control+0x174>)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	6013      	str	r3, [r2, #0]
  I = errors_sum(5, 0);
 8001d60:	2100      	movs	r1, #0
 8001d62:	2005      	movs	r0, #5
 8001d64:	f7ff ffb8 	bl	8001cd8 <errors_sum>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4a52      	ldr	r2, [pc, #328]	; (8001eb4 <PID_control+0x178>)
 8001d6c:	6013      	str	r3, [r2, #0]
  D = error - lastError;
 8001d6e:	4b52      	ldr	r3, [pc, #328]	; (8001eb8 <PID_control+0x17c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	4a51      	ldr	r2, [pc, #324]	; (8001ebc <PID_control+0x180>)
 8001d78:	6013      	str	r3, [r2, #0]
  R = errors_sum(5, 1);
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	2005      	movs	r0, #5
 8001d7e:	f7ff ffab 	bl	8001cd8 <errors_sum>
 8001d82:	4603      	mov	r3, r0
 8001d84:	4a4e      	ldr	r2, [pc, #312]	; (8001ec0 <PID_control+0x184>)
 8001d86:	6013      	str	r3, [r2, #0]
  lastError = error;
 8001d88:	4a4b      	ldr	r2, [pc, #300]	; (8001eb8 <PID_control+0x17c>)
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	6013      	str	r3, [r2, #0]

  int motorspeed = P*Kp + I*Ki + D*Kd;
 8001d8e:	4b48      	ldr	r3, [pc, #288]	; (8001eb0 <PID_control+0x174>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe ffa2 	bl	8000cdc <__aeabi_i2f>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	4b4a      	ldr	r3, [pc, #296]	; (8001ec4 <PID_control+0x188>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4610      	mov	r0, r2
 8001da2:	f7fe ffef 	bl	8000d84 <__aeabi_fmul>
 8001da6:	4603      	mov	r3, r0
 8001da8:	461c      	mov	r4, r3
 8001daa:	4b42      	ldr	r3, [pc, #264]	; (8001eb4 <PID_control+0x178>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe ff94 	bl	8000cdc <__aeabi_i2f>
 8001db4:	4602      	mov	r2, r0
 8001db6:	4b44      	ldr	r3, [pc, #272]	; (8001ec8 <PID_control+0x18c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	f7fe ffe1 	bl	8000d84 <__aeabi_fmul>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4620      	mov	r0, r4
 8001dc8:	f7fe fed4 	bl	8000b74 <__addsf3>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	461c      	mov	r4, r3
 8001dd0:	4b3a      	ldr	r3, [pc, #232]	; (8001ebc <PID_control+0x180>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe ff81 	bl	8000cdc <__aeabi_i2f>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	4b3b      	ldr	r3, [pc, #236]	; (8001ecc <PID_control+0x190>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4619      	mov	r1, r3
 8001de2:	4610      	mov	r0, r2
 8001de4:	f7fe ffce 	bl	8000d84 <__aeabi_fmul>
 8001de8:	4603      	mov	r3, r0
 8001dea:	4619      	mov	r1, r3
 8001dec:	4620      	mov	r0, r4
 8001dee:	f7fe fec1 	bl	8000b74 <__addsf3>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff f98b 	bl	8001110 <__aeabi_f2iz>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	607b      	str	r3, [r7, #4]

  int motorspeedl = basespeedl + motorspeed - R*Kr;
 8001dfe:	4b34      	ldr	r3, [pc, #208]	; (8001ed0 <PID_control+0x194>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4413      	add	r3, r2
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe ff68 	bl	8000cdc <__aeabi_i2f>
 8001e0c:	4604      	mov	r4, r0
 8001e0e:	4b2c      	ldr	r3, [pc, #176]	; (8001ec0 <PID_control+0x184>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe ff62 	bl	8000cdc <__aeabi_i2f>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	4b2e      	ldr	r3, [pc, #184]	; (8001ed4 <PID_control+0x198>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4610      	mov	r0, r2
 8001e22:	f7fe ffaf 	bl	8000d84 <__aeabi_fmul>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	f7fe fea0 	bl	8000b70 <__aeabi_fsub>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff f96c 	bl	8001110 <__aeabi_f2iz>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	617b      	str	r3, [r7, #20]
  int motorspeedr = basespeedr - motorspeed - R*Kr;
 8001e3c:	4b26      	ldr	r3, [pc, #152]	; (8001ed8 <PID_control+0x19c>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe ff49 	bl	8000cdc <__aeabi_i2f>
 8001e4a:	4604      	mov	r4, r0
 8001e4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <PID_control+0x184>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe ff43 	bl	8000cdc <__aeabi_i2f>
 8001e56:	4602      	mov	r2, r0
 8001e58:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <PID_control+0x198>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4610      	mov	r0, r2
 8001e60:	f7fe ff90 	bl	8000d84 <__aeabi_fmul>
 8001e64:	4603      	mov	r3, r0
 8001e66:	4619      	mov	r1, r3
 8001e68:	4620      	mov	r0, r4
 8001e6a:	f7fe fe81 	bl	8000b70 <__aeabi_fsub>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff f94d 	bl	8001110 <__aeabi_f2iz>
 8001e76:	4603      	mov	r3, r0
 8001e78:	613b      	str	r3, [r7, #16]

  if (motorspeedl > maxspeedl)
 8001e7a:	4b18      	ldr	r3, [pc, #96]	; (8001edc <PID_control+0x1a0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	dd02      	ble.n	8001e8a <PID_control+0x14e>
    motorspeedl = maxspeedl;
 8001e84:	4b15      	ldr	r3, [pc, #84]	; (8001edc <PID_control+0x1a0>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	617b      	str	r3, [r7, #20]
  if (motorspeedr > maxspeedr)
 8001e8a:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <PID_control+0x1a4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	dd02      	ble.n	8001e9a <PID_control+0x15e>
    motorspeedr = maxspeedr;
 8001e94:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <PID_control+0x1a4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	613b      	str	r3, [r7, #16]

  	Battery_ADC_measurement();
 8001e9a:	f7ff fb85 	bl	80015a8 <Battery_ADC_measurement>
	forward_brake(motorspeedr, motorspeedl);
 8001e9e:	6979      	ldr	r1, [r7, #20]
 8001ea0:	6938      	ldr	r0, [r7, #16]
 8001ea2:	f7ff fed9 	bl	8001c58 <forward_brake>
}
 8001ea6:	bf00      	nop
 8001ea8:	371c      	adds	r7, #28
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd90      	pop	{r4, r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000270 	.word	0x20000270
 8001eb4:	20000274 	.word	0x20000274
 8001eb8:	20000280 	.word	0x20000280
 8001ebc:	20000278 	.word	0x20000278
 8001ec0:	2000027c 	.word	0x2000027c
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	20000268 	.word	0x20000268
 8001ecc:	20000004 	.word	0x20000004
 8001ed0:	20000018 	.word	0x20000018
 8001ed4:	2000026c 	.word	0x2000026c
 8001ed8:	20000014 	.word	0x20000014
 8001edc:	20000010 	.word	0x20000010
 8001ee0:	2000000c 	.word	0x2000000c

08001ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ee8:	f000 fff8 	bl	8002edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eec:	f000 f85a 	bl	8001fa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ef0:	f7ff fac8 	bl	8001484 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001ef4:	f000 fd38 	bl	8002968 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001ef8:	f000 fd86 	bl	8002a08 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001efc:	f000 fdd2 	bl	8002aa4 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001f00:	f000 fee2 	bl	8002cc8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001f04:	f000 ff0a 	bl	8002d1c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001f08:	f7ff fa42 	bl	8001390 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
   HAL_UART_Receive_IT(&huart1,(uint8_t*)RxData,28); //Oczekiwanie na dane z HC-05 i włączenie timerów
 8001f0c:	221c      	movs	r2, #28
 8001f0e:	491e      	ldr	r1, [pc, #120]	; (8001f88 <main+0xa4>)
 8001f10:	481e      	ldr	r0, [pc, #120]	; (8001f8c <main+0xa8>)
 8001f12:	f003 fd2c 	bl	800596e <HAL_UART_Receive_IT>
   HAL_TIM_Base_Start(&htim1);
 8001f16:	481e      	ldr	r0, [pc, #120]	; (8001f90 <main+0xac>)
 8001f18:	f002 fdd2 	bl	8004ac0 <HAL_TIM_Base_Start>
   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	481d      	ldr	r0, [pc, #116]	; (8001f94 <main+0xb0>)
 8001f20:	f002 fec8 	bl	8004cb4 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001f24:	2108      	movs	r1, #8
 8001f26:	481b      	ldr	r0, [pc, #108]	; (8001f94 <main+0xb0>)
 8001f28:	f002 fec4 	bl	8004cb4 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001f2c:	210c      	movs	r1, #12
 8001f2e:	4819      	ldr	r0, [pc, #100]	; (8001f94 <main+0xb0>)
 8001f30:	f002 fec0 	bl	8004cb4 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001f34:	2104      	movs	r1, #4
 8001f36:	4817      	ldr	r0, [pc, #92]	; (8001f94 <main+0xb0>)
 8001f38:	f002 febc 	bl	8004cb4 <HAL_TIM_PWM_Start>
   //__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_1, 100);
   __HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_2, 100);
 8001f3c:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <main+0xb0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2264      	movs	r2, #100	; 0x64
 8001f42:	639a      	str	r2, [r3, #56]	; 0x38
   __HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_1, 0);
 8001f44:	4b13      	ldr	r3, [pc, #76]	; (8001f94 <main+0xb0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	635a      	str	r2, [r3, #52]	; 0x34
   __HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_3, 100);
 8001f4c:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <main+0xb0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2264      	movs	r2, #100	; 0x64
 8001f52:	63da      	str	r2, [r3, #60]	; 0x3c
   __HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_4, 100);
 8001f54:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <main+0xb0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2264      	movs	r2, #100	; 0x64
 8001f5a:	641a      	str	r2, [r3, #64]	; 0x40
   HAL_Delay(2000);
 8001f5c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001f60:	f001 f81e 	bl	8002fa0 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  PID_control();
 8001f64:	f7ff feea 	bl	8001d3c <PID_control>
	  if(battery_procentage_raw < 75)
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <main+0xb4>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	490b      	ldr	r1, [pc, #44]	; (8001f9c <main+0xb8>)
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff f8a6 	bl	80010c0 <__aeabi_fcmplt>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d004      	beq.n	8001f84 <main+0xa0>
	  {
		  /*If battery is low stop robot*/
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2140      	movs	r1, #64	; 0x40
 8001f7e:	4808      	ldr	r0, [pc, #32]	; (8001fa0 <main+0xbc>)
 8001f80:	f001 ffb9 	bl	8003ef6 <HAL_GPIO_WritePin>
	  PID_control();
 8001f84:	e7ee      	b.n	8001f64 <main+0x80>
 8001f86:	bf00      	nop
 8001f88:	200002b8 	.word	0x200002b8
 8001f8c:	200003b8 	.word	0x200003b8
 8001f90:	200002e0 	.word	0x200002e0
 8001f94:	20000370 	.word	0x20000370
 8001f98:	200002d8 	.word	0x200002d8
 8001f9c:	42960000 	.word	0x42960000
 8001fa0:	40010c00 	.word	0x40010c00

08001fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b094      	sub	sp, #80	; 0x50
 8001fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001faa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fae:	2228      	movs	r2, #40	; 0x28
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f004 fab2 	bl	800651c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fc8:	1d3b      	adds	r3, r7, #4
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ff0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ff6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f001 ff94 	bl	8003f28 <HAL_RCC_OscConfig>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002006:	f000 fb7f 	bl	8002708 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800200a:	230f      	movs	r3, #15
 800200c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800200e:	2302      	movs	r3, #2
 8002010:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800201a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800201c:	2300      	movs	r3, #0
 800201e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	2102      	movs	r1, #2
 8002026:	4618      	mov	r0, r3
 8002028:	f002 fa00 	bl	800442c <HAL_RCC_ClockConfig>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002032:	f000 fb69 	bl	8002708 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002036:	2302      	movs	r3, #2
 8002038:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800203a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800203e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	4618      	mov	r0, r3
 8002044:	f002 fb80 	bl	8004748 <HAL_RCCEx_PeriphCLKConfig>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800204e:	f000 fb5b 	bl	8002708 <Error_Handler>
  }
}
 8002052:	bf00      	nop
 8002054:	3750      	adds	r7, #80	; 0x50
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800205c:	b5b0      	push	{r4, r5, r7, lr}
 800205e:	b090      	sub	sp, #64	; 0x40
 8002060:	af04      	add	r7, sp, #16
 8002062:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4aab      	ldr	r2, [pc, #684]	; (8002318 <HAL_UART_RxCpltCallback+0x2bc>)
 800206a:	4293      	cmp	r3, r2
 800206c:	f040 8326 	bne.w	80026bc <HAL_UART_RxCpltCallback+0x660>
	{
		if(RxData[0] == 78) // Ascii value of 'N' is 78 (N for NO)              START I STOP
 8002070:	4baa      	ldr	r3, [pc, #680]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b4e      	cmp	r3, #78	; 0x4e
 8002076:	d115      	bne.n	80020a4 <HAL_UART_RxCpltCallback+0x48>
		{
			/*Stop GRUZIK2.0 and turn off the LED*/
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002078:	2200      	movs	r2, #0
 800207a:	2140      	movs	r1, #64	; 0x40
 800207c:	48a8      	ldr	r0, [pc, #672]	; (8002320 <HAL_UART_RxCpltCallback+0x2c4>)
 800207e:	f001 ff3a 	bl	8003ef6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002082:	2200      	movs	r2, #0
 8002084:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002088:	48a6      	ldr	r0, [pc, #664]	; (8002324 <HAL_UART_RxCpltCallback+0x2c8>)
 800208a:	f001 ff34 	bl	8003ef6 <HAL_GPIO_WritePin>
			/*Send battery percentage*/
			SN_UART_Send(&huart1, "%.1f" ,battery_procentage_raw);
 800208e:	4ba6      	ldr	r3, [pc, #664]	; (8002328 <HAL_UART_RxCpltCallback+0x2cc>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe f9c8 	bl	8000428 <__aeabi_f2d>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	49a3      	ldr	r1, [pc, #652]	; (800232c <HAL_UART_RxCpltCallback+0x2d0>)
 800209e:	48a4      	ldr	r0, [pc, #656]	; (8002330 <HAL_UART_RxCpltCallback+0x2d4>)
 80020a0:	f7ff f894 	bl	80011cc <SN_UART_Send>
		}
		if (RxData[0] == 89) // Ascii value of 'Y' is 89 (Y for YES)
 80020a4:	4b9d      	ldr	r3, [pc, #628]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b59      	cmp	r3, #89	; 0x59
 80020aa:	d10c      	bne.n	80020c6 <HAL_UART_RxCpltCallback+0x6a>
		{
			/*Do Battery measurement before start*/
			Battery_ADC_measurement();
 80020ac:	f7ff fa7c 	bl	80015a8 <Battery_ADC_measurement>
			/*Start GRUZIK2.0 and turn on the LED*/
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80020b0:	2201      	movs	r2, #1
 80020b2:	2140      	movs	r1, #64	; 0x40
 80020b4:	489a      	ldr	r0, [pc, #616]	; (8002320 <HAL_UART_RxCpltCallback+0x2c4>)
 80020b6:	f001 ff1e 	bl	8003ef6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80020ba:	2201      	movs	r2, #1
 80020bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020c0:	4898      	ldr	r0, [pc, #608]	; (8002324 <HAL_UART_RxCpltCallback+0x2c8>)
 80020c2:	f001 ff18 	bl	8003ef6 <HAL_GPIO_WritePin>
		}
		/*Terminal communication*/
		if(RxData[0] == 'T')
 80020c6:	4b95      	ldr	r3, [pc, #596]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b54      	cmp	r3, #84	; 0x54
 80020cc:	d143      	bne.n	8002156 <HAL_UART_RxCpltCallback+0xfa>
		{
			char char_value[10];
			if(RxData[2] == 'p')
 80020ce:	4b93      	ldr	r3, [pc, #588]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80020d0:	789b      	ldrb	r3, [r3, #2]
 80020d2:	2b70      	cmp	r3, #112	; 0x70
 80020d4:	d11d      	bne.n	8002112 <HAL_UART_RxCpltCallback+0xb6>
			{
				SN_Value_In_Message(RxData, SN_Find_first(RxData, "p:"), SN_Find_first(RxData, "end") , char_value);
 80020d6:	4997      	ldr	r1, [pc, #604]	; (8002334 <HAL_UART_RxCpltCallback+0x2d8>)
 80020d8:	4890      	ldr	r0, [pc, #576]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80020da:	f7ff f8c9 	bl	8001270 <SN_Find_first>
 80020de:	4604      	mov	r4, r0
 80020e0:	4995      	ldr	r1, [pc, #596]	; (8002338 <HAL_UART_RxCpltCallback+0x2dc>)
 80020e2:	488e      	ldr	r0, [pc, #568]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80020e4:	f7ff f8c4 	bl	8001270 <SN_Find_first>
 80020e8:	4602      	mov	r2, r0
 80020ea:	f107 0314 	add.w	r3, r7, #20
 80020ee:	4621      	mov	r1, r4
 80020f0:	488a      	ldr	r0, [pc, #552]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80020f2:	f7ff f928 	bl	8001346 <SN_Value_In_Message>
				Kp = atof(char_value);
 80020f6:	f107 0314 	add.w	r3, r7, #20
 80020fa:	4618      	mov	r0, r3
 80020fc:	f004 f9dc 	bl	80064b8 <atof>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4610      	mov	r0, r2
 8002106:	4619      	mov	r1, r3
 8002108:	f7fe fcde 	bl	8000ac8 <__aeabi_d2f>
 800210c:	4603      	mov	r3, r0
 800210e:	4a8b      	ldr	r2, [pc, #556]	; (800233c <HAL_UART_RxCpltCallback+0x2e0>)
 8002110:	6013      	str	r3, [r2, #0]
			}
			if(RxData[2] == 'p')
 8002112:	4b82      	ldr	r3, [pc, #520]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 8002114:	789b      	ldrb	r3, [r3, #2]
 8002116:	2b70      	cmp	r3, #112	; 0x70
 8002118:	d11d      	bne.n	8002156 <HAL_UART_RxCpltCallback+0xfa>
			{
				SN_Value_In_Message(RxData, SN_Find_first(RxData, "d:"), SN_Find_first(RxData, "end") , char_value);
 800211a:	4989      	ldr	r1, [pc, #548]	; (8002340 <HAL_UART_RxCpltCallback+0x2e4>)
 800211c:	487f      	ldr	r0, [pc, #508]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 800211e:	f7ff f8a7 	bl	8001270 <SN_Find_first>
 8002122:	4604      	mov	r4, r0
 8002124:	4984      	ldr	r1, [pc, #528]	; (8002338 <HAL_UART_RxCpltCallback+0x2dc>)
 8002126:	487d      	ldr	r0, [pc, #500]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 8002128:	f7ff f8a2 	bl	8001270 <SN_Find_first>
 800212c:	4602      	mov	r2, r0
 800212e:	f107 0314 	add.w	r3, r7, #20
 8002132:	4621      	mov	r1, r4
 8002134:	4879      	ldr	r0, [pc, #484]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 8002136:	f7ff f906 	bl	8001346 <SN_Value_In_Message>
				Kd= atof(char_value);
 800213a:	f107 0314 	add.w	r3, r7, #20
 800213e:	4618      	mov	r0, r3
 8002140:	f004 f9ba 	bl	80064b8 <atof>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4610      	mov	r0, r2
 800214a:	4619      	mov	r1, r3
 800214c:	f7fe fcbc 	bl	8000ac8 <__aeabi_d2f>
 8002150:	4603      	mov	r3, r0
 8002152:	4a7c      	ldr	r2, [pc, #496]	; (8002344 <HAL_UART_RxCpltCallback+0x2e8>)
 8002154:	6013      	str	r3, [r2, #0]
			}
		}
		/*Time mode*/
		if(RxData[0] == 'g')
 8002156:	4b71      	ldr	r3, [pc, #452]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b67      	cmp	r3, #103	; 0x67
 800215c:	d165      	bne.n	800222a <HAL_UART_RxCpltCallback+0x1ce>
		{
			char char_value[10];
			/*RxData = "m1: ? m2: ? st: ? ct: ?*/
			int m1, m2, st, ct;
			/*mode 1*/
			SN_Value_In_Message(RxData, SN_Find_first(RxData, "m1:") + 3, SN_Find_first(RxData, "m2:") , char_value);
 800215e:	497a      	ldr	r1, [pc, #488]	; (8002348 <HAL_UART_RxCpltCallback+0x2ec>)
 8002160:	486e      	ldr	r0, [pc, #440]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 8002162:	f7ff f885 	bl	8001270 <SN_Find_first>
 8002166:	4603      	mov	r3, r0
 8002168:	1cdc      	adds	r4, r3, #3
 800216a:	4978      	ldr	r1, [pc, #480]	; (800234c <HAL_UART_RxCpltCallback+0x2f0>)
 800216c:	486b      	ldr	r0, [pc, #428]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 800216e:	f7ff f87f 	bl	8001270 <SN_Find_first>
 8002172:	4602      	mov	r2, r0
 8002174:	f107 0308 	add.w	r3, r7, #8
 8002178:	4621      	mov	r1, r4
 800217a:	4868      	ldr	r0, [pc, #416]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 800217c:	f7ff f8e3 	bl	8001346 <SN_Value_In_Message>
			m1 = atoi(char_value);
 8002180:	f107 0308 	add.w	r3, r7, #8
 8002184:	4618      	mov	r0, r3
 8002186:	f004 f99a 	bl	80064be <atoi>
 800218a:	62f8      	str	r0, [r7, #44]	; 0x2c
			/*mode 2*/
			SN_Value_In_Message(RxData, SN_Find_first(RxData, "m2:") + 3, SN_Find_first(RxData, "st:") , char_value);
 800218c:	496f      	ldr	r1, [pc, #444]	; (800234c <HAL_UART_RxCpltCallback+0x2f0>)
 800218e:	4863      	ldr	r0, [pc, #396]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 8002190:	f7ff f86e 	bl	8001270 <SN_Find_first>
 8002194:	4603      	mov	r3, r0
 8002196:	1cdc      	adds	r4, r3, #3
 8002198:	496d      	ldr	r1, [pc, #436]	; (8002350 <HAL_UART_RxCpltCallback+0x2f4>)
 800219a:	4860      	ldr	r0, [pc, #384]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 800219c:	f7ff f868 	bl	8001270 <SN_Find_first>
 80021a0:	4602      	mov	r2, r0
 80021a2:	f107 0308 	add.w	r3, r7, #8
 80021a6:	4621      	mov	r1, r4
 80021a8:	485c      	ldr	r0, [pc, #368]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80021aa:	f7ff f8cc 	bl	8001346 <SN_Value_In_Message>
			m2 = atoi(char_value);
 80021ae:	f107 0308 	add.w	r3, r7, #8
 80021b2:	4618      	mov	r0, r3
 80021b4:	f004 f983 	bl	80064be <atoi>
 80021b8:	62b8      	str	r0, [r7, #40]	; 0x28
			/*Start time*/
			SN_Value_In_Message(RxData, SN_Find_first(RxData, "st:") + 3, SN_Find_first(RxData, "ct:") , char_value);
 80021ba:	4965      	ldr	r1, [pc, #404]	; (8002350 <HAL_UART_RxCpltCallback+0x2f4>)
 80021bc:	4857      	ldr	r0, [pc, #348]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80021be:	f7ff f857 	bl	8001270 <SN_Find_first>
 80021c2:	4603      	mov	r3, r0
 80021c4:	1cdc      	adds	r4, r3, #3
 80021c6:	4963      	ldr	r1, [pc, #396]	; (8002354 <HAL_UART_RxCpltCallback+0x2f8>)
 80021c8:	4854      	ldr	r0, [pc, #336]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80021ca:	f7ff f851 	bl	8001270 <SN_Find_first>
 80021ce:	4602      	mov	r2, r0
 80021d0:	f107 0308 	add.w	r3, r7, #8
 80021d4:	4621      	mov	r1, r4
 80021d6:	4851      	ldr	r0, [pc, #324]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80021d8:	f7ff f8b5 	bl	8001346 <SN_Value_In_Message>
			st = atoi(char_value);
 80021dc:	f107 0308 	add.w	r3, r7, #8
 80021e0:	4618      	mov	r0, r3
 80021e2:	f004 f96c 	bl	80064be <atoi>
 80021e6:	6278      	str	r0, [r7, #36]	; 0x24
			/*mode 1*/
			SN_Value_In_Message(RxData, SN_Find_first(RxData, "ct:") + 3, SN_Find_first(RxData, "end") , char_value);
 80021e8:	495a      	ldr	r1, [pc, #360]	; (8002354 <HAL_UART_RxCpltCallback+0x2f8>)
 80021ea:	484c      	ldr	r0, [pc, #304]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80021ec:	f7ff f840 	bl	8001270 <SN_Find_first>
 80021f0:	4603      	mov	r3, r0
 80021f2:	1cdc      	adds	r4, r3, #3
 80021f4:	4950      	ldr	r1, [pc, #320]	; (8002338 <HAL_UART_RxCpltCallback+0x2dc>)
 80021f6:	4849      	ldr	r0, [pc, #292]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80021f8:	f7ff f83a 	bl	8001270 <SN_Find_first>
 80021fc:	4602      	mov	r2, r0
 80021fe:	f107 0308 	add.w	r3, r7, #8
 8002202:	4621      	mov	r1, r4
 8002204:	4845      	ldr	r0, [pc, #276]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 8002206:	f7ff f89e 	bl	8001346 <SN_Value_In_Message>
			ct = atoi(char_value);
 800220a:	f107 0308 	add.w	r3, r7, #8
 800220e:	4618      	mov	r0, r3
 8002210:	f004 f955 	bl	80064be <atoi>
 8002214:	6238      	str	r0, [r7, #32]
			/*rest in future*/
			ct = (m1 * m2 * st) + ct; //<-- to don't get any warning
 8002216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002218:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800221a:	fb02 f303 	mul.w	r3, r2, r3
 800221e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002220:	fb02 f303 	mul.w	r3, r2, r3
 8002224:	6a3a      	ldr	r2, [r7, #32]
 8002226:	4413      	add	r3, r2
 8002228:	623b      	str	r3, [r7, #32]
		}
     	/*LOW mode*/
     	if(RxData[0] == 'a')
 800222a:	4b3c      	ldr	r3, [pc, #240]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b61      	cmp	r3, #97	; 0x61
 8002230:	d122      	bne.n	8002278 <HAL_UART_RxCpltCallback+0x21c>
     	{
    	 	 ARR=3;
 8002232:	4b49      	ldr	r3, [pc, #292]	; (8002358 <HAL_UART_RxCpltCallback+0x2fc>)
 8002234:	2203      	movs	r2, #3
 8002236:	601a      	str	r2, [r3, #0]
     	 	 basespeedr = 150;
 8002238:	4b48      	ldr	r3, [pc, #288]	; (800235c <HAL_UART_RxCpltCallback+0x300>)
 800223a:	2296      	movs	r2, #150	; 0x96
 800223c:	601a      	str	r2, [r3, #0]
     	 	 basespeedl = 150;
 800223e:	4b48      	ldr	r3, [pc, #288]	; (8002360 <HAL_UART_RxCpltCallback+0x304>)
 8002240:	2296      	movs	r2, #150	; 0x96
 8002242:	601a      	str	r2, [r3, #0]
     	 	 maxspeedl=130;
 8002244:	4b47      	ldr	r3, [pc, #284]	; (8002364 <HAL_UART_RxCpltCallback+0x308>)
 8002246:	2282      	movs	r2, #130	; 0x82
 8002248:	601a      	str	r2, [r3, #0]
     	 	 maxspeedr=130;
 800224a:	4b47      	ldr	r3, [pc, #284]	; (8002368 <HAL_UART_RxCpltCallback+0x30c>)
 800224c:	2282      	movs	r2, #130	; 0x82
 800224e:	601a      	str	r2, [r3, #0]
     	 	 Sharp_bend_speed_right=-115;
 8002250:	4b46      	ldr	r3, [pc, #280]	; (800236c <HAL_UART_RxCpltCallback+0x310>)
 8002252:	f06f 0272 	mvn.w	r2, #114	; 0x72
 8002256:	601a      	str	r2, [r3, #0]
     	 	 Sharp_bend_speed_left=120;
 8002258:	4b45      	ldr	r3, [pc, #276]	; (8002370 <HAL_UART_RxCpltCallback+0x314>)
 800225a:	2278      	movs	r2, #120	; 0x78
 800225c:	601a      	str	r2, [r3, #0]
     	 	 Bend_speed_right=-76;
 800225e:	4b45      	ldr	r3, [pc, #276]	; (8002374 <HAL_UART_RxCpltCallback+0x318>)
 8002260:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8002264:	601a      	str	r2, [r3, #0]
     	 	 Bend_speed_left=125;
 8002266:	4b44      	ldr	r3, [pc, #272]	; (8002378 <HAL_UART_RxCpltCallback+0x31c>)
 8002268:	227d      	movs	r2, #125	; 0x7d
 800226a:	601a      	str	r2, [r3, #0]
     	 	 Kp = 0.02;
 800226c:	4b33      	ldr	r3, [pc, #204]	; (800233c <HAL_UART_RxCpltCallback+0x2e0>)
 800226e:	4a43      	ldr	r2, [pc, #268]	; (800237c <HAL_UART_RxCpltCallback+0x320>)
 8002270:	601a      	str	r2, [r3, #0]
     	 	 Kd = 65;
 8002272:	4b34      	ldr	r3, [pc, #208]	; (8002344 <HAL_UART_RxCpltCallback+0x2e8>)
 8002274:	4a42      	ldr	r2, [pc, #264]	; (8002380 <HAL_UART_RxCpltCallback+0x324>)
 8002276:	601a      	str	r2, [r3, #0]
     	}
     	/*LOW+ mode*/
     	if(RxData[0] == 'd')
 8002278:	4b28      	ldr	r3, [pc, #160]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b64      	cmp	r3, #100	; 0x64
 800227e:	d122      	bne.n	80022c6 <HAL_UART_RxCpltCallback+0x26a>
     	{
    	 	 ARR=3;
 8002280:	4b35      	ldr	r3, [pc, #212]	; (8002358 <HAL_UART_RxCpltCallback+0x2fc>)
 8002282:	2203      	movs	r2, #3
 8002284:	601a      	str	r2, [r3, #0]
     	 	 basespeedr = 165;
 8002286:	4b35      	ldr	r3, [pc, #212]	; (800235c <HAL_UART_RxCpltCallback+0x300>)
 8002288:	22a5      	movs	r2, #165	; 0xa5
 800228a:	601a      	str	r2, [r3, #0]
     	 	 basespeedl = 165;
 800228c:	4b34      	ldr	r3, [pc, #208]	; (8002360 <HAL_UART_RxCpltCallback+0x304>)
 800228e:	22a5      	movs	r2, #165	; 0xa5
 8002290:	601a      	str	r2, [r3, #0]
     	 	 maxspeedl=130;
 8002292:	4b34      	ldr	r3, [pc, #208]	; (8002364 <HAL_UART_RxCpltCallback+0x308>)
 8002294:	2282      	movs	r2, #130	; 0x82
 8002296:	601a      	str	r2, [r3, #0]
     	 	 maxspeedr=130;
 8002298:	4b33      	ldr	r3, [pc, #204]	; (8002368 <HAL_UART_RxCpltCallback+0x30c>)
 800229a:	2282      	movs	r2, #130	; 0x82
 800229c:	601a      	str	r2, [r3, #0]
     	 	 Sharp_bend_speed_right=-120;
 800229e:	4b33      	ldr	r3, [pc, #204]	; (800236c <HAL_UART_RxCpltCallback+0x310>)
 80022a0:	f06f 0277 	mvn.w	r2, #119	; 0x77
 80022a4:	601a      	str	r2, [r3, #0]
     	 	 Sharp_bend_speed_left=125;
 80022a6:	4b32      	ldr	r3, [pc, #200]	; (8002370 <HAL_UART_RxCpltCallback+0x314>)
 80022a8:	227d      	movs	r2, #125	; 0x7d
 80022aa:	601a      	str	r2, [r3, #0]
     	 	 Bend_speed_right=-76;
 80022ac:	4b31      	ldr	r3, [pc, #196]	; (8002374 <HAL_UART_RxCpltCallback+0x318>)
 80022ae:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 80022b2:	601a      	str	r2, [r3, #0]
     	 	 Bend_speed_left=125;
 80022b4:	4b30      	ldr	r3, [pc, #192]	; (8002378 <HAL_UART_RxCpltCallback+0x31c>)
 80022b6:	227d      	movs	r2, #125	; 0x7d
 80022b8:	601a      	str	r2, [r3, #0]
     	 	 Kp = 0.04;
 80022ba:	4b20      	ldr	r3, [pc, #128]	; (800233c <HAL_UART_RxCpltCallback+0x2e0>)
 80022bc:	4a31      	ldr	r2, [pc, #196]	; (8002384 <HAL_UART_RxCpltCallback+0x328>)
 80022be:	601a      	str	r2, [r3, #0]
     	 	 Kd = 75;
 80022c0:	4b20      	ldr	r3, [pc, #128]	; (8002344 <HAL_UART_RxCpltCallback+0x2e8>)
 80022c2:	4a31      	ldr	r2, [pc, #196]	; (8002388 <HAL_UART_RxCpltCallback+0x32c>)
 80022c4:	601a      	str	r2, [r3, #0]
     	}
     	/*Medium mode*/
     	if(RxData[0] == 'b')
 80022c6:	4b15      	ldr	r3, [pc, #84]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b62      	cmp	r3, #98	; 0x62
 80022cc:	d162      	bne.n	8002394 <HAL_UART_RxCpltCallback+0x338>
     	{
    	 	 ARR=3;
 80022ce:	4b22      	ldr	r3, [pc, #136]	; (8002358 <HAL_UART_RxCpltCallback+0x2fc>)
 80022d0:	2203      	movs	r2, #3
 80022d2:	601a      	str	r2, [r3, #0]
     	 	 basespeedr = 175;
 80022d4:	4b21      	ldr	r3, [pc, #132]	; (800235c <HAL_UART_RxCpltCallback+0x300>)
 80022d6:	22af      	movs	r2, #175	; 0xaf
 80022d8:	601a      	str	r2, [r3, #0]
     	 	 basespeedl = 175;
 80022da:	4b21      	ldr	r3, [pc, #132]	; (8002360 <HAL_UART_RxCpltCallback+0x304>)
 80022dc:	22af      	movs	r2, #175	; 0xaf
 80022de:	601a      	str	r2, [r3, #0]
     	 	 maxspeedl = 135;
 80022e0:	4b20      	ldr	r3, [pc, #128]	; (8002364 <HAL_UART_RxCpltCallback+0x308>)
 80022e2:	2287      	movs	r2, #135	; 0x87
 80022e4:	601a      	str	r2, [r3, #0]
     	 	 maxspeedr = 135;
 80022e6:	4b20      	ldr	r3, [pc, #128]	; (8002368 <HAL_UART_RxCpltCallback+0x30c>)
 80022e8:	2287      	movs	r2, #135	; 0x87
 80022ea:	601a      	str	r2, [r3, #0]
     	 	 Sharp_bend_speed_right = -120;
 80022ec:	4b1f      	ldr	r3, [pc, #124]	; (800236c <HAL_UART_RxCpltCallback+0x310>)
 80022ee:	f06f 0277 	mvn.w	r2, #119	; 0x77
 80022f2:	601a      	str	r2, [r3, #0]
     	 	 Sharp_bend_speed_left = 125;
 80022f4:	4b1e      	ldr	r3, [pc, #120]	; (8002370 <HAL_UART_RxCpltCallback+0x314>)
 80022f6:	227d      	movs	r2, #125	; 0x7d
 80022f8:	601a      	str	r2, [r3, #0]
     	 	 Bend_speed_right = -76;
 80022fa:	4b1e      	ldr	r3, [pc, #120]	; (8002374 <HAL_UART_RxCpltCallback+0x318>)
 80022fc:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8002300:	601a      	str	r2, [r3, #0]
     	 	 Bend_speed_left = 125;
 8002302:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <HAL_UART_RxCpltCallback+0x31c>)
 8002304:	227d      	movs	r2, #125	; 0x7d
 8002306:	601a      	str	r2, [r3, #0]
     	 	 Kp = 0.03;
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <HAL_UART_RxCpltCallback+0x2e0>)
 800230a:	4a20      	ldr	r2, [pc, #128]	; (800238c <HAL_UART_RxCpltCallback+0x330>)
 800230c:	601a      	str	r2, [r3, #0]
     	 	 Kd = 70;
 800230e:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <HAL_UART_RxCpltCallback+0x2e8>)
 8002310:	4a1f      	ldr	r2, [pc, #124]	; (8002390 <HAL_UART_RxCpltCallback+0x334>)
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	e03e      	b.n	8002394 <HAL_UART_RxCpltCallback+0x338>
 8002316:	bf00      	nop
 8002318:	40013800 	.word	0x40013800
 800231c:	200002b8 	.word	0x200002b8
 8002320:	40010c00 	.word	0x40010c00
 8002324:	40011000 	.word	0x40011000
 8002328:	200002d8 	.word	0x200002d8
 800232c:	0800aa10 	.word	0x0800aa10
 8002330:	200003b8 	.word	0x200003b8
 8002334:	0800aa18 	.word	0x0800aa18
 8002338:	0800aa1c 	.word	0x0800aa1c
 800233c:	20000000 	.word	0x20000000
 8002340:	0800aa20 	.word	0x0800aa20
 8002344:	20000004 	.word	0x20000004
 8002348:	0800aa24 	.word	0x0800aa24
 800234c:	0800aa28 	.word	0x0800aa28
 8002350:	0800aa2c 	.word	0x0800aa2c
 8002354:	0800aa30 	.word	0x0800aa30
 8002358:	2000001c 	.word	0x2000001c
 800235c:	20000014 	.word	0x20000014
 8002360:	20000018 	.word	0x20000018
 8002364:	20000010 	.word	0x20000010
 8002368:	2000000c 	.word	0x2000000c
 800236c:	20000020 	.word	0x20000020
 8002370:	20000024 	.word	0x20000024
 8002374:	20000028 	.word	0x20000028
 8002378:	2000002c 	.word	0x2000002c
 800237c:	3ca3d70a 	.word	0x3ca3d70a
 8002380:	42820000 	.word	0x42820000
 8002384:	3d23d70a 	.word	0x3d23d70a
 8002388:	42960000 	.word	0x42960000
 800238c:	3cf5c28f 	.word	0x3cf5c28f
 8002390:	428c0000 	.word	0x428c0000
     	}
     	/*Medium+ mode*/
     	if(RxData[0] == 'e')
 8002394:	4b95      	ldr	r3, [pc, #596]	; (80025ec <HAL_UART_RxCpltCallback+0x590>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b65      	cmp	r3, #101	; 0x65
 800239a:	d122      	bne.n	80023e2 <HAL_UART_RxCpltCallback+0x386>
     	{
    	 	 ARR=3;
 800239c:	4b94      	ldr	r3, [pc, #592]	; (80025f0 <HAL_UART_RxCpltCallback+0x594>)
 800239e:	2203      	movs	r2, #3
 80023a0:	601a      	str	r2, [r3, #0]
     	 	 basespeedr = 190;
 80023a2:	4b94      	ldr	r3, [pc, #592]	; (80025f4 <HAL_UART_RxCpltCallback+0x598>)
 80023a4:	22be      	movs	r2, #190	; 0xbe
 80023a6:	601a      	str	r2, [r3, #0]
     	 	 basespeedl = 190;
 80023a8:	4b93      	ldr	r3, [pc, #588]	; (80025f8 <HAL_UART_RxCpltCallback+0x59c>)
 80023aa:	22be      	movs	r2, #190	; 0xbe
 80023ac:	601a      	str	r2, [r3, #0]
     	 	 maxspeedl = 145;
 80023ae:	4b93      	ldr	r3, [pc, #588]	; (80025fc <HAL_UART_RxCpltCallback+0x5a0>)
 80023b0:	2291      	movs	r2, #145	; 0x91
 80023b2:	601a      	str	r2, [r3, #0]
     	 	 maxspeedr = 145;
 80023b4:	4b92      	ldr	r3, [pc, #584]	; (8002600 <HAL_UART_RxCpltCallback+0x5a4>)
 80023b6:	2291      	movs	r2, #145	; 0x91
 80023b8:	601a      	str	r2, [r3, #0]
     	 	 Sharp_bend_speed_right = -100;
 80023ba:	4b92      	ldr	r3, [pc, #584]	; (8002604 <HAL_UART_RxCpltCallback+0x5a8>)
 80023bc:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80023c0:	601a      	str	r2, [r3, #0]
     	 	 Sharp_bend_speed_left = 100;
 80023c2:	4b91      	ldr	r3, [pc, #580]	; (8002608 <HAL_UART_RxCpltCallback+0x5ac>)
 80023c4:	2264      	movs	r2, #100	; 0x64
 80023c6:	601a      	str	r2, [r3, #0]
     	 	 Bend_speed_right = -76;
 80023c8:	4b90      	ldr	r3, [pc, #576]	; (800260c <HAL_UART_RxCpltCallback+0x5b0>)
 80023ca:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 80023ce:	601a      	str	r2, [r3, #0]
     	 	 Bend_speed_left = 125;
 80023d0:	4b8f      	ldr	r3, [pc, #572]	; (8002610 <HAL_UART_RxCpltCallback+0x5b4>)
 80023d2:	227d      	movs	r2, #125	; 0x7d
 80023d4:	601a      	str	r2, [r3, #0]
     	 	 Kp = 0.03;
 80023d6:	4b8f      	ldr	r3, [pc, #572]	; (8002614 <HAL_UART_RxCpltCallback+0x5b8>)
 80023d8:	4a8f      	ldr	r2, [pc, #572]	; (8002618 <HAL_UART_RxCpltCallback+0x5bc>)
 80023da:	601a      	str	r2, [r3, #0]
     	 	 Kd = 70;
 80023dc:	4b8f      	ldr	r3, [pc, #572]	; (800261c <HAL_UART_RxCpltCallback+0x5c0>)
 80023de:	4a90      	ldr	r2, [pc, #576]	; (8002620 <HAL_UART_RxCpltCallback+0x5c4>)
 80023e0:	601a      	str	r2, [r3, #0]
     	}
     	/*HIGH mode*/
     	if(RxData[0] == 'c')
 80023e2:	4b82      	ldr	r3, [pc, #520]	; (80025ec <HAL_UART_RxCpltCallback+0x590>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b63      	cmp	r3, #99	; 0x63
 80023e8:	d122      	bne.n	8002430 <HAL_UART_RxCpltCallback+0x3d4>
     	{
    	 	ARR=3;
 80023ea:	4b81      	ldr	r3, [pc, #516]	; (80025f0 <HAL_UART_RxCpltCallback+0x594>)
 80023ec:	2203      	movs	r2, #3
 80023ee:	601a      	str	r2, [r3, #0]
     	 	basespeedr = 225;
 80023f0:	4b80      	ldr	r3, [pc, #512]	; (80025f4 <HAL_UART_RxCpltCallback+0x598>)
 80023f2:	22e1      	movs	r2, #225	; 0xe1
 80023f4:	601a      	str	r2, [r3, #0]
     	 	basespeedl = 225;
 80023f6:	4b80      	ldr	r3, [pc, #512]	; (80025f8 <HAL_UART_RxCpltCallback+0x59c>)
 80023f8:	22e1      	movs	r2, #225	; 0xe1
 80023fa:	601a      	str	r2, [r3, #0]
     	 	maxspeedl = 150;
 80023fc:	4b7f      	ldr	r3, [pc, #508]	; (80025fc <HAL_UART_RxCpltCallback+0x5a0>)
 80023fe:	2296      	movs	r2, #150	; 0x96
 8002400:	601a      	str	r2, [r3, #0]
     	 	maxspeedr = 150;
 8002402:	4b7f      	ldr	r3, [pc, #508]	; (8002600 <HAL_UART_RxCpltCallback+0x5a4>)
 8002404:	2296      	movs	r2, #150	; 0x96
 8002406:	601a      	str	r2, [r3, #0]
     	 	Sharp_bend_speed_right = -73;
 8002408:	4b7e      	ldr	r3, [pc, #504]	; (8002604 <HAL_UART_RxCpltCallback+0x5a8>)
 800240a:	f06f 0248 	mvn.w	r2, #72	; 0x48
 800240e:	601a      	str	r2, [r3, #0]
     	 	Sharp_bend_speed_left = 78;
 8002410:	4b7d      	ldr	r3, [pc, #500]	; (8002608 <HAL_UART_RxCpltCallback+0x5ac>)
 8002412:	224e      	movs	r2, #78	; 0x4e
 8002414:	601a      	str	r2, [r3, #0]
     	 	Bend_speed_right = -76;
 8002416:	4b7d      	ldr	r3, [pc, #500]	; (800260c <HAL_UART_RxCpltCallback+0x5b0>)
 8002418:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 800241c:	601a      	str	r2, [r3, #0]
     	 	Bend_speed_left = 125;
 800241e:	4b7c      	ldr	r3, [pc, #496]	; (8002610 <HAL_UART_RxCpltCallback+0x5b4>)
 8002420:	227d      	movs	r2, #125	; 0x7d
 8002422:	601a      	str	r2, [r3, #0]
     	 	Kp = 0.04;
 8002424:	4b7b      	ldr	r3, [pc, #492]	; (8002614 <HAL_UART_RxCpltCallback+0x5b8>)
 8002426:	4a7f      	ldr	r2, [pc, #508]	; (8002624 <HAL_UART_RxCpltCallback+0x5c8>)
 8002428:	601a      	str	r2, [r3, #0]
     	 	Kd = 75;
 800242a:	4b7c      	ldr	r3, [pc, #496]	; (800261c <HAL_UART_RxCpltCallback+0x5c0>)
 800242c:	4a7e      	ldr	r2, [pc, #504]	; (8002628 <HAL_UART_RxCpltCallback+0x5cc>)
 800242e:	601a      	str	r2, [r3, #0]
     	}
     	/*HIGH+ mode*/
     	if(RxData[0] == 'f')
 8002430:	4b6e      	ldr	r3, [pc, #440]	; (80025ec <HAL_UART_RxCpltCallback+0x590>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b66      	cmp	r3, #102	; 0x66
 8002436:	d122      	bne.n	800247e <HAL_UART_RxCpltCallback+0x422>
     	{
    	 	ARR=3;
 8002438:	4b6d      	ldr	r3, [pc, #436]	; (80025f0 <HAL_UART_RxCpltCallback+0x594>)
 800243a:	2203      	movs	r2, #3
 800243c:	601a      	str	r2, [r3, #0]
    	 	basespeedr = 250;
 800243e:	4b6d      	ldr	r3, [pc, #436]	; (80025f4 <HAL_UART_RxCpltCallback+0x598>)
 8002440:	22fa      	movs	r2, #250	; 0xfa
 8002442:	601a      	str	r2, [r3, #0]
    	 	basespeedl = 250;
 8002444:	4b6c      	ldr	r3, [pc, #432]	; (80025f8 <HAL_UART_RxCpltCallback+0x59c>)
 8002446:	22fa      	movs	r2, #250	; 0xfa
 8002448:	601a      	str	r2, [r3, #0]
    	 	maxspeedl=160;
 800244a:	4b6c      	ldr	r3, [pc, #432]	; (80025fc <HAL_UART_RxCpltCallback+0x5a0>)
 800244c:	22a0      	movs	r2, #160	; 0xa0
 800244e:	601a      	str	r2, [r3, #0]
    	 	maxspeedr=160;
 8002450:	4b6b      	ldr	r3, [pc, #428]	; (8002600 <HAL_UART_RxCpltCallback+0x5a4>)
 8002452:	22a0      	movs	r2, #160	; 0xa0
 8002454:	601a      	str	r2, [r3, #0]
    	 	Sharp_bend_speed_right = -65;
 8002456:	4b6b      	ldr	r3, [pc, #428]	; (8002604 <HAL_UART_RxCpltCallback+0x5a8>)
 8002458:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800245c:	601a      	str	r2, [r3, #0]
     		Sharp_bend_speed_left = 70;
 800245e:	4b6a      	ldr	r3, [pc, #424]	; (8002608 <HAL_UART_RxCpltCallback+0x5ac>)
 8002460:	2246      	movs	r2, #70	; 0x46
 8002462:	601a      	str	r2, [r3, #0]
     		Bend_speed_right=-76;
 8002464:	4b69      	ldr	r3, [pc, #420]	; (800260c <HAL_UART_RxCpltCallback+0x5b0>)
 8002466:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 800246a:	601a      	str	r2, [r3, #0]
     		Bend_speed_left=125;
 800246c:	4b68      	ldr	r3, [pc, #416]	; (8002610 <HAL_UART_RxCpltCallback+0x5b4>)
 800246e:	227d      	movs	r2, #125	; 0x7d
 8002470:	601a      	str	r2, [r3, #0]
     		Kp = 0.04;
 8002472:	4b68      	ldr	r3, [pc, #416]	; (8002614 <HAL_UART_RxCpltCallback+0x5b8>)
 8002474:	4a6b      	ldr	r2, [pc, #428]	; (8002624 <HAL_UART_RxCpltCallback+0x5c8>)
 8002476:	601a      	str	r2, [r3, #0]
     	 	Kd=75;
 8002478:	4b68      	ldr	r3, [pc, #416]	; (800261c <HAL_UART_RxCpltCallback+0x5c0>)
 800247a:	4a6b      	ldr	r2, [pc, #428]	; (8002628 <HAL_UART_RxCpltCallback+0x5cc>)
 800247c:	601a      	str	r2, [r3, #0]
     	}
     	/*TRUBO mode*/
     	if(RxData[0] == 'i')
 800247e:	4b5b      	ldr	r3, [pc, #364]	; (80025ec <HAL_UART_RxCpltCallback+0x590>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b69      	cmp	r3, #105	; 0x69
 8002484:	d124      	bne.n	80024d0 <HAL_UART_RxCpltCallback+0x474>
     	{
    	 	ARR=3;
 8002486:	4b5a      	ldr	r3, [pc, #360]	; (80025f0 <HAL_UART_RxCpltCallback+0x594>)
 8002488:	2203      	movs	r2, #3
 800248a:	601a      	str	r2, [r3, #0]
    	 	basespeedr = 270;
 800248c:	4b59      	ldr	r3, [pc, #356]	; (80025f4 <HAL_UART_RxCpltCallback+0x598>)
 800248e:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8002492:	601a      	str	r2, [r3, #0]
    	 	basespeedl = 270;
 8002494:	4b58      	ldr	r3, [pc, #352]	; (80025f8 <HAL_UART_RxCpltCallback+0x59c>)
 8002496:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800249a:	601a      	str	r2, [r3, #0]
    	 	maxspeedl = 150;
 800249c:	4b57      	ldr	r3, [pc, #348]	; (80025fc <HAL_UART_RxCpltCallback+0x5a0>)
 800249e:	2296      	movs	r2, #150	; 0x96
 80024a0:	601a      	str	r2, [r3, #0]
    	 	maxspeedr = 150;
 80024a2:	4b57      	ldr	r3, [pc, #348]	; (8002600 <HAL_UART_RxCpltCallback+0x5a4>)
 80024a4:	2296      	movs	r2, #150	; 0x96
 80024a6:	601a      	str	r2, [r3, #0]
    	 	Sharp_bend_speed_right = -65;
 80024a8:	4b56      	ldr	r3, [pc, #344]	; (8002604 <HAL_UART_RxCpltCallback+0x5a8>)
 80024aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024ae:	601a      	str	r2, [r3, #0]
    	 	Sharp_bend_speed_left = 70;
 80024b0:	4b55      	ldr	r3, [pc, #340]	; (8002608 <HAL_UART_RxCpltCallback+0x5ac>)
 80024b2:	2246      	movs	r2, #70	; 0x46
 80024b4:	601a      	str	r2, [r3, #0]
    	 	Bend_speed_right = -76;
 80024b6:	4b55      	ldr	r3, [pc, #340]	; (800260c <HAL_UART_RxCpltCallback+0x5b0>)
 80024b8:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 80024bc:	601a      	str	r2, [r3, #0]
    	 	Bend_speed_left = 130;
 80024be:	4b54      	ldr	r3, [pc, #336]	; (8002610 <HAL_UART_RxCpltCallback+0x5b4>)
 80024c0:	2282      	movs	r2, #130	; 0x82
 80024c2:	601a      	str	r2, [r3, #0]
    	 	Kp = 0.045;
 80024c4:	4b53      	ldr	r3, [pc, #332]	; (8002614 <HAL_UART_RxCpltCallback+0x5b8>)
 80024c6:	4a59      	ldr	r2, [pc, #356]	; (800262c <HAL_UART_RxCpltCallback+0x5d0>)
 80024c8:	601a      	str	r2, [r3, #0]
    	 	Kd = 75;
 80024ca:	4b54      	ldr	r3, [pc, #336]	; (800261c <HAL_UART_RxCpltCallback+0x5c0>)
 80024cc:	4a56      	ldr	r2, [pc, #344]	; (8002628 <HAL_UART_RxCpltCallback+0x5cc>)
 80024ce:	601a      	str	r2, [r3, #0]
     	}
     	/*TRUBO+ mode*/
     	if(RxData[0] == 'j')
 80024d0:	4b46      	ldr	r3, [pc, #280]	; (80025ec <HAL_UART_RxCpltCallback+0x590>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b6a      	cmp	r3, #106	; 0x6a
 80024d6:	d124      	bne.n	8002522 <HAL_UART_RxCpltCallback+0x4c6>
     	{
     	    ARR=3;
 80024d8:	4b45      	ldr	r3, [pc, #276]	; (80025f0 <HAL_UART_RxCpltCallback+0x594>)
 80024da:	2203      	movs	r2, #3
 80024dc:	601a      	str	r2, [r3, #0]
     	    basespeedr = 295;
 80024de:	4b45      	ldr	r3, [pc, #276]	; (80025f4 <HAL_UART_RxCpltCallback+0x598>)
 80024e0:	f240 1227 	movw	r2, #295	; 0x127
 80024e4:	601a      	str	r2, [r3, #0]
     	    basespeedl = 295;
 80024e6:	4b44      	ldr	r3, [pc, #272]	; (80025f8 <HAL_UART_RxCpltCallback+0x59c>)
 80024e8:	f240 1227 	movw	r2, #295	; 0x127
 80024ec:	601a      	str	r2, [r3, #0]
     	    maxspeedl = 165;
 80024ee:	4b43      	ldr	r3, [pc, #268]	; (80025fc <HAL_UART_RxCpltCallback+0x5a0>)
 80024f0:	22a5      	movs	r2, #165	; 0xa5
 80024f2:	601a      	str	r2, [r3, #0]
     	    maxspeedr = 165;
 80024f4:	4b42      	ldr	r3, [pc, #264]	; (8002600 <HAL_UART_RxCpltCallback+0x5a4>)
 80024f6:	22a5      	movs	r2, #165	; 0xa5
 80024f8:	601a      	str	r2, [r3, #0]
     	    Sharp_bend_speed_right = -70;
 80024fa:	4b42      	ldr	r3, [pc, #264]	; (8002604 <HAL_UART_RxCpltCallback+0x5a8>)
 80024fc:	f06f 0245 	mvn.w	r2, #69	; 0x45
 8002500:	601a      	str	r2, [r3, #0]
     	    Sharp_bend_speed_left = 73;
 8002502:	4b41      	ldr	r3, [pc, #260]	; (8002608 <HAL_UART_RxCpltCallback+0x5ac>)
 8002504:	2249      	movs	r2, #73	; 0x49
 8002506:	601a      	str	r2, [r3, #0]
     	    Bend_speed_right = -76;
 8002508:	4b40      	ldr	r3, [pc, #256]	; (800260c <HAL_UART_RxCpltCallback+0x5b0>)
 800250a:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 800250e:	601a      	str	r2, [r3, #0]
     	    Bend_speed_left = 130;
 8002510:	4b3f      	ldr	r3, [pc, #252]	; (8002610 <HAL_UART_RxCpltCallback+0x5b4>)
 8002512:	2282      	movs	r2, #130	; 0x82
 8002514:	601a      	str	r2, [r3, #0]
     	    Kp = 0.05;
 8002516:	4b3f      	ldr	r3, [pc, #252]	; (8002614 <HAL_UART_RxCpltCallback+0x5b8>)
 8002518:	4a45      	ldr	r2, [pc, #276]	; (8002630 <HAL_UART_RxCpltCallback+0x5d4>)
 800251a:	601a      	str	r2, [r3, #0]
     	    Kd = 80;
 800251c:	4b3f      	ldr	r3, [pc, #252]	; (800261c <HAL_UART_RxCpltCallback+0x5c0>)
 800251e:	4a45      	ldr	r2, [pc, #276]	; (8002634 <HAL_UART_RxCpltCallback+0x5d8>)
 8002520:	601a      	str	r2, [r3, #0]
     	  }
     	/*ULTRA mode*/
     	if(RxData[0] == 'k')
 8002522:	4b32      	ldr	r3, [pc, #200]	; (80025ec <HAL_UART_RxCpltCallback+0x590>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b6b      	cmp	r3, #107	; 0x6b
 8002528:	d124      	bne.n	8002574 <HAL_UART_RxCpltCallback+0x518>
     	{
     	    ARR=3;
 800252a:	4b31      	ldr	r3, [pc, #196]	; (80025f0 <HAL_UART_RxCpltCallback+0x594>)
 800252c:	2203      	movs	r2, #3
 800252e:	601a      	str	r2, [r3, #0]
     	    basespeedr = 315;
 8002530:	4b30      	ldr	r3, [pc, #192]	; (80025f4 <HAL_UART_RxCpltCallback+0x598>)
 8002532:	f240 123b 	movw	r2, #315	; 0x13b
 8002536:	601a      	str	r2, [r3, #0]
     	    basespeedl = 315;
 8002538:	4b2f      	ldr	r3, [pc, #188]	; (80025f8 <HAL_UART_RxCpltCallback+0x59c>)
 800253a:	f240 123b 	movw	r2, #315	; 0x13b
 800253e:	601a      	str	r2, [r3, #0]
     	    maxspeedl = 168;//170
 8002540:	4b2e      	ldr	r3, [pc, #184]	; (80025fc <HAL_UART_RxCpltCallback+0x5a0>)
 8002542:	22a8      	movs	r2, #168	; 0xa8
 8002544:	601a      	str	r2, [r3, #0]
     	    maxspeedr = 168;
 8002546:	4b2e      	ldr	r3, [pc, #184]	; (8002600 <HAL_UART_RxCpltCallback+0x5a4>)
 8002548:	22a8      	movs	r2, #168	; 0xa8
 800254a:	601a      	str	r2, [r3, #0]
     	    Sharp_bend_speed_right = -70;//70;
 800254c:	4b2d      	ldr	r3, [pc, #180]	; (8002604 <HAL_UART_RxCpltCallback+0x5a8>)
 800254e:	f06f 0245 	mvn.w	r2, #69	; 0x45
 8002552:	601a      	str	r2, [r3, #0]
     	    Sharp_bend_speed_left = 73;//73
 8002554:	4b2c      	ldr	r3, [pc, #176]	; (8002608 <HAL_UART_RxCpltCallback+0x5ac>)
 8002556:	2249      	movs	r2, #73	; 0x49
 8002558:	601a      	str	r2, [r3, #0]
     	    Bend_speed_right = -76;
 800255a:	4b2c      	ldr	r3, [pc, #176]	; (800260c <HAL_UART_RxCpltCallback+0x5b0>)
 800255c:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8002560:	601a      	str	r2, [r3, #0]
     	    Bend_speed_left = 128;
 8002562:	4b2b      	ldr	r3, [pc, #172]	; (8002610 <HAL_UART_RxCpltCallback+0x5b4>)
 8002564:	2280      	movs	r2, #128	; 0x80
 8002566:	601a      	str	r2, [r3, #0]
     	    Kp = 0.067;//0.07
 8002568:	4b2a      	ldr	r3, [pc, #168]	; (8002614 <HAL_UART_RxCpltCallback+0x5b8>)
 800256a:	4a33      	ldr	r2, [pc, #204]	; (8002638 <HAL_UART_RxCpltCallback+0x5dc>)
 800256c:	601a      	str	r2, [r3, #0]
     	    Kd = 95;//95
 800256e:	4b2b      	ldr	r3, [pc, #172]	; (800261c <HAL_UART_RxCpltCallback+0x5c0>)
 8002570:	4a32      	ldr	r2, [pc, #200]	; (800263c <HAL_UART_RxCpltCallback+0x5e0>)
 8002572:	601a      	str	r2, [r3, #0]
     	 }
     	 /*ULTRA+ mode*/
     	 if(RxData[0] == 'k')
 8002574:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <HAL_UART_RxCpltCallback+0x590>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b6b      	cmp	r3, #107	; 0x6b
 800257a:	d124      	bne.n	80025c6 <HAL_UART_RxCpltCallback+0x56a>
     	 {
     	     ARR=3;
 800257c:	4b1c      	ldr	r3, [pc, #112]	; (80025f0 <HAL_UART_RxCpltCallback+0x594>)
 800257e:	2203      	movs	r2, #3
 8002580:	601a      	str	r2, [r3, #0]
     	     basespeedr = 365;
 8002582:	4b1c      	ldr	r3, [pc, #112]	; (80025f4 <HAL_UART_RxCpltCallback+0x598>)
 8002584:	f240 126d 	movw	r2, #365	; 0x16d
 8002588:	601a      	str	r2, [r3, #0]
     	     basespeedl = 365;
 800258a:	4b1b      	ldr	r3, [pc, #108]	; (80025f8 <HAL_UART_RxCpltCallback+0x59c>)
 800258c:	f240 126d 	movw	r2, #365	; 0x16d
 8002590:	601a      	str	r2, [r3, #0]
     	     maxspeedl = 155;//170
 8002592:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <HAL_UART_RxCpltCallback+0x5a0>)
 8002594:	229b      	movs	r2, #155	; 0x9b
 8002596:	601a      	str	r2, [r3, #0]
     	     maxspeedr = 155;
 8002598:	4b19      	ldr	r3, [pc, #100]	; (8002600 <HAL_UART_RxCpltCallback+0x5a4>)
 800259a:	229b      	movs	r2, #155	; 0x9b
 800259c:	601a      	str	r2, [r3, #0]
     	     Sharp_bend_speed_right = -67;//70;
 800259e:	4b19      	ldr	r3, [pc, #100]	; (8002604 <HAL_UART_RxCpltCallback+0x5a8>)
 80025a0:	f06f 0242 	mvn.w	r2, #66	; 0x42
 80025a4:	601a      	str	r2, [r3, #0]
     	     Sharp_bend_speed_left = 72;//73
 80025a6:	4b18      	ldr	r3, [pc, #96]	; (8002608 <HAL_UART_RxCpltCallback+0x5ac>)
 80025a8:	2248      	movs	r2, #72	; 0x48
 80025aa:	601a      	str	r2, [r3, #0]
     	     Bend_speed_right = -140;
 80025ac:	4b17      	ldr	r3, [pc, #92]	; (800260c <HAL_UART_RxCpltCallback+0x5b0>)
 80025ae:	f06f 028b 	mvn.w	r2, #139	; 0x8b
 80025b2:	601a      	str	r2, [r3, #0]
     	     Bend_speed_left = 190;
 80025b4:	4b16      	ldr	r3, [pc, #88]	; (8002610 <HAL_UART_RxCpltCallback+0x5b4>)
 80025b6:	22be      	movs	r2, #190	; 0xbe
 80025b8:	601a      	str	r2, [r3, #0]
     	     Kp = 0.027;//0.027
 80025ba:	4b16      	ldr	r3, [pc, #88]	; (8002614 <HAL_UART_RxCpltCallback+0x5b8>)
 80025bc:	4a20      	ldr	r2, [pc, #128]	; (8002640 <HAL_UART_RxCpltCallback+0x5e4>)
 80025be:	601a      	str	r2, [r3, #0]
     	     Kd = 70;//75
 80025c0:	4b16      	ldr	r3, [pc, #88]	; (800261c <HAL_UART_RxCpltCallback+0x5c0>)
 80025c2:	4a17      	ldr	r2, [pc, #92]	; (8002620 <HAL_UART_RxCpltCallback+0x5c4>)
 80025c4:	601a      	str	r2, [r3, #0]
     	  }
     	  /*SPECIAL mode*/
     	  if(RxData[0] == 'l')
 80025c6:	4b09      	ldr	r3, [pc, #36]	; (80025ec <HAL_UART_RxCpltCallback+0x590>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b6c      	cmp	r3, #108	; 0x6c
 80025cc:	d151      	bne.n	8002672 <HAL_UART_RxCpltCallback+0x616>
     	  {
     	     ARR=3;
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <HAL_UART_RxCpltCallback+0x594>)
 80025d0:	2203      	movs	r2, #3
 80025d2:	601a      	str	r2, [r3, #0]
     	     basespeedr = 395;
 80025d4:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <HAL_UART_RxCpltCallback+0x598>)
 80025d6:	f240 128b 	movw	r2, #395	; 0x18b
 80025da:	601a      	str	r2, [r3, #0]
     	     basespeedl = 395;
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_UART_RxCpltCallback+0x59c>)
 80025de:	f240 128b 	movw	r2, #395	; 0x18b
 80025e2:	601a      	str	r2, [r3, #0]
     	     maxspeedl = 155;//170
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <HAL_UART_RxCpltCallback+0x5a0>)
 80025e6:	229b      	movs	r2, #155	; 0x9b
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	e02b      	b.n	8002644 <HAL_UART_RxCpltCallback+0x5e8>
 80025ec:	200002b8 	.word	0x200002b8
 80025f0:	2000001c 	.word	0x2000001c
 80025f4:	20000014 	.word	0x20000014
 80025f8:	20000018 	.word	0x20000018
 80025fc:	20000010 	.word	0x20000010
 8002600:	2000000c 	.word	0x2000000c
 8002604:	20000020 	.word	0x20000020
 8002608:	20000024 	.word	0x20000024
 800260c:	20000028 	.word	0x20000028
 8002610:	2000002c 	.word	0x2000002c
 8002614:	20000000 	.word	0x20000000
 8002618:	3cf5c28f 	.word	0x3cf5c28f
 800261c:	20000004 	.word	0x20000004
 8002620:	428c0000 	.word	0x428c0000
 8002624:	3d23d70a 	.word	0x3d23d70a
 8002628:	42960000 	.word	0x42960000
 800262c:	3d3851ec 	.word	0x3d3851ec
 8002630:	3d4ccccd 	.word	0x3d4ccccd
 8002634:	42a00000 	.word	0x42a00000
 8002638:	3d89374c 	.word	0x3d89374c
 800263c:	42be0000 	.word	0x42be0000
 8002640:	3cdd2f1b 	.word	0x3cdd2f1b
     	     maxspeedr = 155;
 8002644:	4b1f      	ldr	r3, [pc, #124]	; (80026c4 <HAL_UART_RxCpltCallback+0x668>)
 8002646:	229b      	movs	r2, #155	; 0x9b
 8002648:	601a      	str	r2, [r3, #0]
     	     Sharp_bend_speed_right = -67;//70;
 800264a:	4b1f      	ldr	r3, [pc, #124]	; (80026c8 <HAL_UART_RxCpltCallback+0x66c>)
 800264c:	f06f 0242 	mvn.w	r2, #66	; 0x42
 8002650:	601a      	str	r2, [r3, #0]
     	     Sharp_bend_speed_left = 73;//73
 8002652:	4b1e      	ldr	r3, [pc, #120]	; (80026cc <HAL_UART_RxCpltCallback+0x670>)
 8002654:	2249      	movs	r2, #73	; 0x49
 8002656:	601a      	str	r2, [r3, #0]
     	     Bend_speed_right = -140;
 8002658:	4b1d      	ldr	r3, [pc, #116]	; (80026d0 <HAL_UART_RxCpltCallback+0x674>)
 800265a:	f06f 028b 	mvn.w	r2, #139	; 0x8b
 800265e:	601a      	str	r2, [r3, #0]
     	     Bend_speed_left = 190;
 8002660:	4b1c      	ldr	r3, [pc, #112]	; (80026d4 <HAL_UART_RxCpltCallback+0x678>)
 8002662:	22be      	movs	r2, #190	; 0xbe
 8002664:	601a      	str	r2, [r3, #0]
     	     Kp = 0.027;//0.07
 8002666:	4b1c      	ldr	r3, [pc, #112]	; (80026d8 <HAL_UART_RxCpltCallback+0x67c>)
 8002668:	4a1c      	ldr	r2, [pc, #112]	; (80026dc <HAL_UART_RxCpltCallback+0x680>)
 800266a:	601a      	str	r2, [r3, #0]
     	     Kd = 70;//95
 800266c:	4b1c      	ldr	r3, [pc, #112]	; (80026e0 <HAL_UART_RxCpltCallback+0x684>)
 800266e:	4a1d      	ldr	r2, [pc, #116]	; (80026e4 <HAL_UART_RxCpltCallback+0x688>)
 8002670:	601a      	str	r2, [r3, #0]
     	     	 }
     	/*Send some data through UART3-USB terminal*/
     	Battery_ADC_measurement();
 8002672:	f7fe ff99 	bl	80015a8 <Battery_ADC_measurement>
    	SN_UART_Send(&huart3,"rxData: %d \r \n ",RxData);
 8002676:	4a1c      	ldr	r2, [pc, #112]	; (80026e8 <HAL_UART_RxCpltCallback+0x68c>)
 8002678:	491c      	ldr	r1, [pc, #112]	; (80026ec <HAL_UART_RxCpltCallback+0x690>)
 800267a:	481d      	ldr	r0, [pc, #116]	; (80026f0 <HAL_UART_RxCpltCallback+0x694>)
 800267c:	f7fe fda6 	bl	80011cc <SN_UART_Send>
    	SN_UART_Send(&huart3,"speedlevel = %.1f \r \n battery: %.1f \r \n raw= %d \r \n ",speedlevel,battery_procentage_raw,raw_battery);
 8002680:	4b1c      	ldr	r3, [pc, #112]	; (80026f4 <HAL_UART_RxCpltCallback+0x698>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7fd fecf 	bl	8000428 <__aeabi_f2d>
 800268a:	4604      	mov	r4, r0
 800268c:	460d      	mov	r5, r1
 800268e:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <HAL_UART_RxCpltCallback+0x69c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7fd fec8 	bl	8000428 <__aeabi_f2d>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4917      	ldr	r1, [pc, #92]	; (80026fc <HAL_UART_RxCpltCallback+0x6a0>)
 800269e:	8809      	ldrh	r1, [r1, #0]
 80026a0:	9102      	str	r1, [sp, #8]
 80026a2:	e9cd 2300 	strd	r2, r3, [sp]
 80026a6:	4622      	mov	r2, r4
 80026a8:	462b      	mov	r3, r5
 80026aa:	4915      	ldr	r1, [pc, #84]	; (8002700 <HAL_UART_RxCpltCallback+0x6a4>)
 80026ac:	4810      	ldr	r0, [pc, #64]	; (80026f0 <HAL_UART_RxCpltCallback+0x694>)
 80026ae:	f7fe fd8d 	bl	80011cc <SN_UART_Send>
    	/*Begin receiving*/
    	HAL_UART_Receive_IT(&huart1,(uint8_t*)RxData,28);
 80026b2:	221c      	movs	r2, #28
 80026b4:	490c      	ldr	r1, [pc, #48]	; (80026e8 <HAL_UART_RxCpltCallback+0x68c>)
 80026b6:	4813      	ldr	r0, [pc, #76]	; (8002704 <HAL_UART_RxCpltCallback+0x6a8>)
 80026b8:	f003 f959 	bl	800596e <HAL_UART_Receive_IT>
	}
}
 80026bc:	bf00      	nop
 80026be:	3730      	adds	r7, #48	; 0x30
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bdb0      	pop	{r4, r5, r7, pc}
 80026c4:	2000000c 	.word	0x2000000c
 80026c8:	20000020 	.word	0x20000020
 80026cc:	20000024 	.word	0x20000024
 80026d0:	20000028 	.word	0x20000028
 80026d4:	2000002c 	.word	0x2000002c
 80026d8:	20000000 	.word	0x20000000
 80026dc:	3cdd2f1b 	.word	0x3cdd2f1b
 80026e0:	20000004 	.word	0x20000004
 80026e4:	428c0000 	.word	0x428c0000
 80026e8:	200002b8 	.word	0x200002b8
 80026ec:	0800aa34 	.word	0x0800aa34
 80026f0:	20000400 	.word	0x20000400
 80026f4:	20000008 	.word	0x20000008
 80026f8:	200002d8 	.word	0x200002d8
 80026fc:	200002d4 	.word	0x200002d4
 8002700:	0800aa44 	.word	0x0800aa44
 8002704:	200003b8 	.word	0x200003b8

08002708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800270c:	b672      	cpsid	i
}
 800270e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002710:	e7fe      	b.n	8002710 <Error_Handler+0x8>
	...

08002714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800271a:	4b15      	ldr	r3, [pc, #84]	; (8002770 <HAL_MspInit+0x5c>)
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	4a14      	ldr	r2, [pc, #80]	; (8002770 <HAL_MspInit+0x5c>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	6193      	str	r3, [r2, #24]
 8002726:	4b12      	ldr	r3, [pc, #72]	; (8002770 <HAL_MspInit+0x5c>)
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002732:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <HAL_MspInit+0x5c>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	4a0e      	ldr	r2, [pc, #56]	; (8002770 <HAL_MspInit+0x5c>)
 8002738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273c:	61d3      	str	r3, [r2, #28]
 800273e:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <HAL_MspInit+0x5c>)
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002746:	607b      	str	r3, [r7, #4]
 8002748:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800274a:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <HAL_MspInit+0x60>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	4a04      	ldr	r2, [pc, #16]	; (8002774 <HAL_MspInit+0x60>)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002766:	bf00      	nop
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr
 8002770:	40021000 	.word	0x40021000
 8002774:	40010000 	.word	0x40010000

08002778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800277c:	e7fe      	b.n	800277c <NMI_Handler+0x4>

0800277e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800277e:	b480      	push	{r7}
 8002780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002782:	e7fe      	b.n	8002782 <HardFault_Handler+0x4>

08002784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002788:	e7fe      	b.n	8002788 <MemManage_Handler+0x4>

0800278a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800278a:	b480      	push	{r7}
 800278c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800278e:	e7fe      	b.n	800278e <BusFault_Handler+0x4>

08002790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002794:	e7fe      	b.n	8002794 <UsageFault_Handler+0x4>

08002796 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002796:	b480      	push	{r7}
 8002798:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr

080027a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027a2:	b480      	push	{r7}
 80027a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc80      	pop	{r7}
 80027ac:	4770      	bx	lr

080027ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027ae:	b480      	push	{r7}
 80027b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr

080027ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027be:	f000 fbd3 	bl	8002f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027cc:	4802      	ldr	r0, [pc, #8]	; (80027d8 <USART1_IRQHandler+0x10>)
 80027ce:	f003 f8f3 	bl	80059b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	200003b8 	.word	0x200003b8

080027dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  return 1;
 80027e0:	2301      	movs	r3, #1
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr

080027ea <_kill>:

int _kill(int pid, int sig)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027f4:	f003 fe68 	bl	80064c8 <__errno>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2216      	movs	r2, #22
 80027fc:	601a      	str	r2, [r3, #0]
  return -1;
 80027fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <_exit>:

void _exit (int status)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002812:	f04f 31ff 	mov.w	r1, #4294967295
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7ff ffe7 	bl	80027ea <_kill>
  while (1) {}    /* Make sure we hang here */
 800281c:	e7fe      	b.n	800281c <_exit+0x12>

0800281e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b086      	sub	sp, #24
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	e00a      	b.n	8002846 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002830:	f3af 8000 	nop.w
 8002834:	4601      	mov	r1, r0
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	1c5a      	adds	r2, r3, #1
 800283a:	60ba      	str	r2, [r7, #8]
 800283c:	b2ca      	uxtb	r2, r1
 800283e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	3301      	adds	r3, #1
 8002844:	617b      	str	r3, [r7, #20]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	429a      	cmp	r2, r3
 800284c:	dbf0      	blt.n	8002830 <_read+0x12>
  }

  return len;
 800284e:	687b      	ldr	r3, [r7, #4]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	e009      	b.n	800287e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	60ba      	str	r2, [r7, #8]
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	3301      	adds	r3, #1
 800287c:	617b      	str	r3, [r7, #20]
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	429a      	cmp	r2, r3
 8002884:	dbf1      	blt.n	800286a <_write+0x12>
  }
  return len;
 8002886:	687b      	ldr	r3, [r7, #4]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <_close>:

int _close(int file)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002898:	f04f 33ff 	mov.w	r3, #4294967295
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr

080028a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028b6:	605a      	str	r2, [r3, #4]
  return 0;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <_isatty>:

int _isatty(int file)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028cc:	2301      	movs	r3, #1
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028f8:	4a14      	ldr	r2, [pc, #80]	; (800294c <_sbrk+0x5c>)
 80028fa:	4b15      	ldr	r3, [pc, #84]	; (8002950 <_sbrk+0x60>)
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002904:	4b13      	ldr	r3, [pc, #76]	; (8002954 <_sbrk+0x64>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d102      	bne.n	8002912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800290c:	4b11      	ldr	r3, [pc, #68]	; (8002954 <_sbrk+0x64>)
 800290e:	4a12      	ldr	r2, [pc, #72]	; (8002958 <_sbrk+0x68>)
 8002910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002912:	4b10      	ldr	r3, [pc, #64]	; (8002954 <_sbrk+0x64>)
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4413      	add	r3, r2
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	429a      	cmp	r2, r3
 800291e:	d207      	bcs.n	8002930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002920:	f003 fdd2 	bl	80064c8 <__errno>
 8002924:	4603      	mov	r3, r0
 8002926:	220c      	movs	r2, #12
 8002928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800292a:	f04f 33ff 	mov.w	r3, #4294967295
 800292e:	e009      	b.n	8002944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002930:	4b08      	ldr	r3, [pc, #32]	; (8002954 <_sbrk+0x64>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002936:	4b07      	ldr	r3, [pc, #28]	; (8002954 <_sbrk+0x64>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4413      	add	r3, r2
 800293e:	4a05      	ldr	r2, [pc, #20]	; (8002954 <_sbrk+0x64>)
 8002940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002942:	68fb      	ldr	r3, [r7, #12]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20005000 	.word	0x20005000
 8002950:	00000400 	.word	0x00000400
 8002954:	200002dc 	.word	0x200002dc
 8002958:	20000460 	.word	0x20000460

0800295c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800296e:	f107 0308 	add.w	r3, r7, #8
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	605a      	str	r2, [r3, #4]
 8002978:	609a      	str	r2, [r3, #8]
 800297a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800297c:	463b      	mov	r3, r7
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002984:	4b1e      	ldr	r3, [pc, #120]	; (8002a00 <MX_TIM1_Init+0x98>)
 8002986:	4a1f      	ldr	r2, [pc, #124]	; (8002a04 <MX_TIM1_Init+0x9c>)
 8002988:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800298a:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <MX_TIM1_Init+0x98>)
 800298c:	2247      	movs	r2, #71	; 0x47
 800298e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002990:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <MX_TIM1_Init+0x98>)
 8002992:	2200      	movs	r2, #0
 8002994:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002996:	4b1a      	ldr	r3, [pc, #104]	; (8002a00 <MX_TIM1_Init+0x98>)
 8002998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800299c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800299e:	4b18      	ldr	r3, [pc, #96]	; (8002a00 <MX_TIM1_Init+0x98>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029a4:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <MX_TIM1_Init+0x98>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029aa:	4b15      	ldr	r3, [pc, #84]	; (8002a00 <MX_TIM1_Init+0x98>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80029b0:	4813      	ldr	r0, [pc, #76]	; (8002a00 <MX_TIM1_Init+0x98>)
 80029b2:	f002 f835 	bl	8004a20 <HAL_TIM_Base_Init>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80029bc:	f7ff fea4 	bl	8002708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80029c6:	f107 0308 	add.w	r3, r7, #8
 80029ca:	4619      	mov	r1, r3
 80029cc:	480c      	ldr	r0, [pc, #48]	; (8002a00 <MX_TIM1_Init+0x98>)
 80029ce:	f002 fb31 	bl	8005034 <HAL_TIM_ConfigClockSource>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80029d8:	f7ff fe96 	bl	8002708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029dc:	2300      	movs	r3, #0
 80029de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029e0:	2300      	movs	r3, #0
 80029e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029e4:	463b      	mov	r3, r7
 80029e6:	4619      	mov	r1, r3
 80029e8:	4805      	ldr	r0, [pc, #20]	; (8002a00 <MX_TIM1_Init+0x98>)
 80029ea:	f002 fe8f 	bl	800570c <HAL_TIMEx_MasterConfigSynchronization>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80029f4:	f7ff fe88 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80029f8:	bf00      	nop
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	200002e0 	.word	0x200002e0
 8002a04:	40012c00 	.word	0x40012c00

08002a08 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a0e:	f107 0308 	add.w	r3, r7, #8
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	605a      	str	r2, [r3, #4]
 8002a18:	609a      	str	r2, [r3, #8]
 8002a1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a1c:	463b      	mov	r3, r7
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a24:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <MX_TIM3_Init+0x94>)
 8002a26:	4a1e      	ldr	r2, [pc, #120]	; (8002aa0 <MX_TIM3_Init+0x98>)
 8002a28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002a2a:	4b1c      	ldr	r3, [pc, #112]	; (8002a9c <MX_TIM3_Init+0x94>)
 8002a2c:	2247      	movs	r2, #71	; 0x47
 8002a2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a30:	4b1a      	ldr	r3, [pc, #104]	; (8002a9c <MX_TIM3_Init+0x94>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002a36:	4b19      	ldr	r3, [pc, #100]	; (8002a9c <MX_TIM3_Init+0x94>)
 8002a38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a3e:	4b17      	ldr	r3, [pc, #92]	; (8002a9c <MX_TIM3_Init+0x94>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a44:	4b15      	ldr	r3, [pc, #84]	; (8002a9c <MX_TIM3_Init+0x94>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a4a:	4814      	ldr	r0, [pc, #80]	; (8002a9c <MX_TIM3_Init+0x94>)
 8002a4c:	f001 ffe8 	bl	8004a20 <HAL_TIM_Base_Init>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002a56:	f7ff fe57 	bl	8002708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a60:	f107 0308 	add.w	r3, r7, #8
 8002a64:	4619      	mov	r1, r3
 8002a66:	480d      	ldr	r0, [pc, #52]	; (8002a9c <MX_TIM3_Init+0x94>)
 8002a68:	f002 fae4 	bl	8005034 <HAL_TIM_ConfigClockSource>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002a72:	f7ff fe49 	bl	8002708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a76:	2300      	movs	r3, #0
 8002a78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a7e:	463b      	mov	r3, r7
 8002a80:	4619      	mov	r1, r3
 8002a82:	4806      	ldr	r0, [pc, #24]	; (8002a9c <MX_TIM3_Init+0x94>)
 8002a84:	f002 fe42 	bl	800570c <HAL_TIMEx_MasterConfigSynchronization>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002a8e:	f7ff fe3b 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a92:	bf00      	nop
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000328 	.word	0x20000328
 8002aa0:	40000400 	.word	0x40000400

08002aa4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08e      	sub	sp, #56	; 0x38
 8002aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	605a      	str	r2, [r3, #4]
 8002ab4:	609a      	str	r2, [r3, #8]
 8002ab6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ab8:	f107 0320 	add.w	r3, r7, #32
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ac2:	1d3b      	adds	r3, r7, #4
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]
 8002ace:	611a      	str	r2, [r3, #16]
 8002ad0:	615a      	str	r2, [r3, #20]
 8002ad2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ad4:	4b3d      	ldr	r3, [pc, #244]	; (8002bcc <MX_TIM4_Init+0x128>)
 8002ad6:	4a3e      	ldr	r2, [pc, #248]	; (8002bd0 <MX_TIM4_Init+0x12c>)
 8002ad8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8002ada:	4b3c      	ldr	r3, [pc, #240]	; (8002bcc <MX_TIM4_Init+0x128>)
 8002adc:	224f      	movs	r2, #79	; 0x4f
 8002ade:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae0:	4b3a      	ldr	r3, [pc, #232]	; (8002bcc <MX_TIM4_Init+0x128>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002ae6:	4b39      	ldr	r3, [pc, #228]	; (8002bcc <MX_TIM4_Init+0x128>)
 8002ae8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002aec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aee:	4b37      	ldr	r3, [pc, #220]	; (8002bcc <MX_TIM4_Init+0x128>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002af4:	4b35      	ldr	r3, [pc, #212]	; (8002bcc <MX_TIM4_Init+0x128>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002afa:	4834      	ldr	r0, [pc, #208]	; (8002bcc <MX_TIM4_Init+0x128>)
 8002afc:	f001 ff90 	bl	8004a20 <HAL_TIM_Base_Init>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002b06:	f7ff fdff 	bl	8002708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002b10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b14:	4619      	mov	r1, r3
 8002b16:	482d      	ldr	r0, [pc, #180]	; (8002bcc <MX_TIM4_Init+0x128>)
 8002b18:	f002 fa8c 	bl	8005034 <HAL_TIM_ConfigClockSource>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002b22:	f7ff fdf1 	bl	8002708 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002b26:	4829      	ldr	r0, [pc, #164]	; (8002bcc <MX_TIM4_Init+0x128>)
 8002b28:	f002 f86c 	bl	8004c04 <HAL_TIM_PWM_Init>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002b32:	f7ff fde9 	bl	8002708 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8002b36:	4825      	ldr	r0, [pc, #148]	; (8002bcc <MX_TIM4_Init+0x128>)
 8002b38:	f002 f80c 	bl	8004b54 <HAL_TIM_OC_Init>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8002b42:	f7ff fde1 	bl	8002708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b46:	2300      	movs	r3, #0
 8002b48:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b4e:	f107 0320 	add.w	r3, r7, #32
 8002b52:	4619      	mov	r1, r3
 8002b54:	481d      	ldr	r0, [pc, #116]	; (8002bcc <MX_TIM4_Init+0x128>)
 8002b56:	f002 fdd9 	bl	800570c <HAL_TIMEx_MasterConfigSynchronization>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8002b60:	f7ff fdd2 	bl	8002708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b64:	2360      	movs	r3, #96	; 0x60
 8002b66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b74:	1d3b      	adds	r3, r7, #4
 8002b76:	2204      	movs	r2, #4
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4814      	ldr	r0, [pc, #80]	; (8002bcc <MX_TIM4_Init+0x128>)
 8002b7c:	f002 f998 	bl	8004eb0 <HAL_TIM_PWM_ConfigChannel>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 8002b86:	f7ff fdbf 	bl	8002708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b8e:	1d3b      	adds	r3, r7, #4
 8002b90:	2208      	movs	r2, #8
 8002b92:	4619      	mov	r1, r3
 8002b94:	480d      	ldr	r0, [pc, #52]	; (8002bcc <MX_TIM4_Init+0x128>)
 8002b96:	f002 f92f 	bl	8004df8 <HAL_TIM_OC_ConfigChannel>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 8002ba0:	f7ff fdb2 	bl	8002708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ba4:	2360      	movs	r3, #96	; 0x60
 8002ba6:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ba8:	1d3b      	adds	r3, r7, #4
 8002baa:	220c      	movs	r2, #12
 8002bac:	4619      	mov	r1, r3
 8002bae:	4807      	ldr	r0, [pc, #28]	; (8002bcc <MX_TIM4_Init+0x128>)
 8002bb0:	f002 f97e 	bl	8004eb0 <HAL_TIM_PWM_ConfigChannel>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8002bba:	f7ff fda5 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002bbe:	4803      	ldr	r0, [pc, #12]	; (8002bcc <MX_TIM4_Init+0x128>)
 8002bc0:	f000 f84e 	bl	8002c60 <HAL_TIM_MspPostInit>

}
 8002bc4:	bf00      	nop
 8002bc6:	3738      	adds	r7, #56	; 0x38
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20000370 	.word	0x20000370
 8002bd0:	40000800 	.word	0x40000800

08002bd4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b087      	sub	sp, #28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a1b      	ldr	r2, [pc, #108]	; (8002c50 <HAL_TIM_Base_MspInit+0x7c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d10c      	bne.n	8002c00 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002be6:	4b1b      	ldr	r3, [pc, #108]	; (8002c54 <HAL_TIM_Base_MspInit+0x80>)
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	4a1a      	ldr	r2, [pc, #104]	; (8002c54 <HAL_TIM_Base_MspInit+0x80>)
 8002bec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bf0:	6193      	str	r3, [r2, #24]
 8002bf2:	4b18      	ldr	r3, [pc, #96]	; (8002c54 <HAL_TIM_Base_MspInit+0x80>)
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002bfe:	e022      	b.n	8002c46 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a14      	ldr	r2, [pc, #80]	; (8002c58 <HAL_TIM_Base_MspInit+0x84>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d10c      	bne.n	8002c24 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c0a:	4b12      	ldr	r3, [pc, #72]	; (8002c54 <HAL_TIM_Base_MspInit+0x80>)
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	4a11      	ldr	r2, [pc, #68]	; (8002c54 <HAL_TIM_Base_MspInit+0x80>)
 8002c10:	f043 0302 	orr.w	r3, r3, #2
 8002c14:	61d3      	str	r3, [r2, #28]
 8002c16:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <HAL_TIM_Base_MspInit+0x80>)
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	613b      	str	r3, [r7, #16]
 8002c20:	693b      	ldr	r3, [r7, #16]
}
 8002c22:	e010      	b.n	8002c46 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM4)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a0c      	ldr	r2, [pc, #48]	; (8002c5c <HAL_TIM_Base_MspInit+0x88>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d10b      	bne.n	8002c46 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c2e:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <HAL_TIM_Base_MspInit+0x80>)
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	4a08      	ldr	r2, [pc, #32]	; (8002c54 <HAL_TIM_Base_MspInit+0x80>)
 8002c34:	f043 0304 	orr.w	r3, r3, #4
 8002c38:	61d3      	str	r3, [r2, #28]
 8002c3a:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <HAL_TIM_Base_MspInit+0x80>)
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
}
 8002c46:	bf00      	nop
 8002c48:	371c      	adds	r7, #28
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr
 8002c50:	40012c00 	.word	0x40012c00
 8002c54:	40021000 	.word	0x40021000
 8002c58:	40000400 	.word	0x40000400
 8002c5c:	40000800 	.word	0x40000800

08002c60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c68:	f107 0310 	add.w	r3, r7, #16
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	605a      	str	r2, [r3, #4]
 8002c72:	609a      	str	r2, [r3, #8]
 8002c74:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a10      	ldr	r2, [pc, #64]	; (8002cbc <HAL_TIM_MspPostInit+0x5c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d118      	bne.n	8002cb2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c80:	4b0f      	ldr	r3, [pc, #60]	; (8002cc0 <HAL_TIM_MspPostInit+0x60>)
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	4a0e      	ldr	r2, [pc, #56]	; (8002cc0 <HAL_TIM_MspPostInit+0x60>)
 8002c86:	f043 0308 	orr.w	r3, r3, #8
 8002c8a:	6193      	str	r3, [r2, #24]
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <HAL_TIM_MspPostInit+0x60>)
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002c98:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002c9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca6:	f107 0310 	add.w	r3, r7, #16
 8002caa:	4619      	mov	r1, r3
 8002cac:	4805      	ldr	r0, [pc, #20]	; (8002cc4 <HAL_TIM_MspPostInit+0x64>)
 8002cae:	f000 ff87 	bl	8003bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002cb2:	bf00      	nop
 8002cb4:	3720      	adds	r7, #32
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40000800 	.word	0x40000800
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	40010c00 	.word	0x40010c00

08002cc8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ccc:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <MX_USART1_UART_Init+0x4c>)
 8002cce:	4a12      	ldr	r2, [pc, #72]	; (8002d18 <MX_USART1_UART_Init+0x50>)
 8002cd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002cd2:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <MX_USART1_UART_Init+0x4c>)
 8002cd4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002cd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cda:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <MX_USART1_UART_Init+0x4c>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <MX_USART1_UART_Init+0x4c>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ce6:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <MX_USART1_UART_Init+0x4c>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002cec:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <MX_USART1_UART_Init+0x4c>)
 8002cee:	220c      	movs	r2, #12
 8002cf0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cf2:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <MX_USART1_UART_Init+0x4c>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cf8:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <MX_USART1_UART_Init+0x4c>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002cfe:	4805      	ldr	r0, [pc, #20]	; (8002d14 <MX_USART1_UART_Init+0x4c>)
 8002d00:	f002 fd62 	bl	80057c8 <HAL_UART_Init>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002d0a:	f7ff fcfd 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	200003b8 	.word	0x200003b8
 8002d18:	40013800 	.word	0x40013800

08002d1c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002d20:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <MX_USART3_UART_Init+0x4c>)
 8002d22:	4a12      	ldr	r2, [pc, #72]	; (8002d6c <MX_USART3_UART_Init+0x50>)
 8002d24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002d26:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <MX_USART3_UART_Init+0x4c>)
 8002d28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d2e:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <MX_USART3_UART_Init+0x4c>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d34:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <MX_USART3_UART_Init+0x4c>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d3a:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <MX_USART3_UART_Init+0x4c>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d40:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <MX_USART3_UART_Init+0x4c>)
 8002d42:	220c      	movs	r2, #12
 8002d44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d46:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <MX_USART3_UART_Init+0x4c>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d4c:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <MX_USART3_UART_Init+0x4c>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002d52:	4805      	ldr	r0, [pc, #20]	; (8002d68 <MX_USART3_UART_Init+0x4c>)
 8002d54:	f002 fd38 	bl	80057c8 <HAL_UART_Init>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002d5e:	f7ff fcd3 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002d62:	bf00      	nop
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000400 	.word	0x20000400
 8002d6c:	40004800 	.word	0x40004800

08002d70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08a      	sub	sp, #40	; 0x28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d78:	f107 0318 	add.w	r3, r7, #24
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a3c      	ldr	r2, [pc, #240]	; (8002e7c <HAL_UART_MspInit+0x10c>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d13a      	bne.n	8002e06 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d90:	4b3b      	ldr	r3, [pc, #236]	; (8002e80 <HAL_UART_MspInit+0x110>)
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	4a3a      	ldr	r2, [pc, #232]	; (8002e80 <HAL_UART_MspInit+0x110>)
 8002d96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d9a:	6193      	str	r3, [r2, #24]
 8002d9c:	4b38      	ldr	r3, [pc, #224]	; (8002e80 <HAL_UART_MspInit+0x110>)
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da8:	4b35      	ldr	r3, [pc, #212]	; (8002e80 <HAL_UART_MspInit+0x110>)
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	4a34      	ldr	r2, [pc, #208]	; (8002e80 <HAL_UART_MspInit+0x110>)
 8002dae:	f043 0304 	orr.w	r3, r3, #4
 8002db2:	6193      	str	r3, [r2, #24]
 8002db4:	4b32      	ldr	r3, [pc, #200]	; (8002e80 <HAL_UART_MspInit+0x110>)
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	613b      	str	r3, [r7, #16]
 8002dbe:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dce:	f107 0318 	add.w	r3, r7, #24
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	482b      	ldr	r0, [pc, #172]	; (8002e84 <HAL_UART_MspInit+0x114>)
 8002dd6:	f000 fef3 	bl	8003bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002de0:	2300      	movs	r3, #0
 8002de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de8:	f107 0318 	add.w	r3, r7, #24
 8002dec:	4619      	mov	r1, r3
 8002dee:	4825      	ldr	r0, [pc, #148]	; (8002e84 <HAL_UART_MspInit+0x114>)
 8002df0:	f000 fee6 	bl	8003bc0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002df4:	2200      	movs	r2, #0
 8002df6:	2100      	movs	r1, #0
 8002df8:	2025      	movs	r0, #37	; 0x25
 8002dfa:	f000 fdf8 	bl	80039ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002dfe:	2025      	movs	r0, #37	; 0x25
 8002e00:	f000 fe11 	bl	8003a26 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002e04:	e036      	b.n	8002e74 <HAL_UART_MspInit+0x104>
  else if(uartHandle->Instance==USART3)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a1f      	ldr	r2, [pc, #124]	; (8002e88 <HAL_UART_MspInit+0x118>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d131      	bne.n	8002e74 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e10:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <HAL_UART_MspInit+0x110>)
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	4a1a      	ldr	r2, [pc, #104]	; (8002e80 <HAL_UART_MspInit+0x110>)
 8002e16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e1a:	61d3      	str	r3, [r2, #28]
 8002e1c:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <HAL_UART_MspInit+0x110>)
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e28:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <HAL_UART_MspInit+0x110>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	4a14      	ldr	r2, [pc, #80]	; (8002e80 <HAL_UART_MspInit+0x110>)
 8002e2e:	f043 0308 	orr.w	r3, r3, #8
 8002e32:	6193      	str	r3, [r2, #24]
 8002e34:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <HAL_UART_MspInit+0x110>)
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e46:	2302      	movs	r3, #2
 8002e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e4e:	f107 0318 	add.w	r3, r7, #24
 8002e52:	4619      	mov	r1, r3
 8002e54:	480d      	ldr	r0, [pc, #52]	; (8002e8c <HAL_UART_MspInit+0x11c>)
 8002e56:	f000 feb3 	bl	8003bc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002e5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e60:	2300      	movs	r3, #0
 8002e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e64:	2300      	movs	r3, #0
 8002e66:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e68:	f107 0318 	add.w	r3, r7, #24
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4807      	ldr	r0, [pc, #28]	; (8002e8c <HAL_UART_MspInit+0x11c>)
 8002e70:	f000 fea6 	bl	8003bc0 <HAL_GPIO_Init>
}
 8002e74:	bf00      	nop
 8002e76:	3728      	adds	r7, #40	; 0x28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40013800 	.word	0x40013800
 8002e80:	40021000 	.word	0x40021000
 8002e84:	40010800 	.word	0x40010800
 8002e88:	40004800 	.word	0x40004800
 8002e8c:	40010c00 	.word	0x40010c00

08002e90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e90:	f7ff fd64 	bl	800295c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e94:	480b      	ldr	r0, [pc, #44]	; (8002ec4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002e96:	490c      	ldr	r1, [pc, #48]	; (8002ec8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002e98:	4a0c      	ldr	r2, [pc, #48]	; (8002ecc <LoopFillZerobss+0x16>)
  movs r3, #0
 8002e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e9c:	e002      	b.n	8002ea4 <LoopCopyDataInit>

08002e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ea2:	3304      	adds	r3, #4

08002ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ea8:	d3f9      	bcc.n	8002e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eaa:	4a09      	ldr	r2, [pc, #36]	; (8002ed0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002eac:	4c09      	ldr	r4, [pc, #36]	; (8002ed4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002eb0:	e001      	b.n	8002eb6 <LoopFillZerobss>

08002eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eb4:	3204      	adds	r2, #4

08002eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002eb8:	d3fb      	bcc.n	8002eb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002eba:	f003 fb0b 	bl	80064d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ebe:	f7ff f811 	bl	8001ee4 <main>
  bx lr
 8002ec2:	4770      	bx	lr
  ldr r0, =_sdata
 8002ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ec8:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8002ecc:	0800af64 	.word	0x0800af64
  ldr r2, =_sbss
 8002ed0:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8002ed4:	2000045c 	.word	0x2000045c

08002ed8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ed8:	e7fe      	b.n	8002ed8 <ADC1_2_IRQHandler>
	...

08002edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ee0:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <HAL_Init+0x28>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a07      	ldr	r2, [pc, #28]	; (8002f04 <HAL_Init+0x28>)
 8002ee6:	f043 0310 	orr.w	r3, r3, #16
 8002eea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eec:	2003      	movs	r0, #3
 8002eee:	f000 fd73 	bl	80039d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ef2:	200f      	movs	r0, #15
 8002ef4:	f000 f808 	bl	8002f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ef8:	f7ff fc0c 	bl	8002714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40022000 	.word	0x40022000

08002f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f10:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <HAL_InitTick+0x54>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <HAL_InitTick+0x58>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	4619      	mov	r1, r3
 8002f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 fd8b 	bl	8003a42 <HAL_SYSTICK_Config>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e00e      	b.n	8002f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b0f      	cmp	r3, #15
 8002f3a:	d80a      	bhi.n	8002f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	f04f 30ff 	mov.w	r0, #4294967295
 8002f44:	f000 fd53 	bl	80039ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f48:	4a06      	ldr	r2, [pc, #24]	; (8002f64 <HAL_InitTick+0x5c>)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	e000      	b.n	8002f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	20000034 	.word	0x20000034
 8002f60:	2000003c 	.word	0x2000003c
 8002f64:	20000038 	.word	0x20000038

08002f68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f6c:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <HAL_IncTick+0x1c>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	461a      	mov	r2, r3
 8002f72:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <HAL_IncTick+0x20>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4413      	add	r3, r2
 8002f78:	4a03      	ldr	r2, [pc, #12]	; (8002f88 <HAL_IncTick+0x20>)
 8002f7a:	6013      	str	r3, [r2, #0]
}
 8002f7c:	bf00      	nop
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr
 8002f84:	2000003c 	.word	0x2000003c
 8002f88:	20000448 	.word	0x20000448

08002f8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f90:	4b02      	ldr	r3, [pc, #8]	; (8002f9c <HAL_GetTick+0x10>)
 8002f92:	681b      	ldr	r3, [r3, #0]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr
 8002f9c:	20000448 	.word	0x20000448

08002fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fa8:	f7ff fff0 	bl	8002f8c <HAL_GetTick>
 8002fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb8:	d005      	beq.n	8002fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fba:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <HAL_Delay+0x44>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fc6:	bf00      	nop
 8002fc8:	f7ff ffe0 	bl	8002f8c <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d8f7      	bhi.n	8002fc8 <HAL_Delay+0x28>
  {
  }
}
 8002fd8:	bf00      	nop
 8002fda:	bf00      	nop
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	2000003c 	.word	0x2000003c

08002fe8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e0be      	b.n	8003188 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003014:	2b00      	cmp	r3, #0
 8003016:	d109      	bne.n	800302c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fe f9f0 	bl	800140c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 fbc5 	bl	80037bc <ADC_ConversionStop_Disable>
 8003032:	4603      	mov	r3, r0
 8003034:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303a:	f003 0310 	and.w	r3, r3, #16
 800303e:	2b00      	cmp	r3, #0
 8003040:	f040 8099 	bne.w	8003176 <HAL_ADC_Init+0x18e>
 8003044:	7dfb      	ldrb	r3, [r7, #23]
 8003046:	2b00      	cmp	r3, #0
 8003048:	f040 8095 	bne.w	8003176 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003050:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003054:	f023 0302 	bic.w	r3, r3, #2
 8003058:	f043 0202 	orr.w	r2, r3, #2
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003068:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	7b1b      	ldrb	r3, [r3, #12]
 800306e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003070:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	4313      	orrs	r3, r2
 8003076:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003080:	d003      	beq.n	800308a <HAL_ADC_Init+0xa2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d102      	bne.n	8003090 <HAL_ADC_Init+0xa8>
 800308a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800308e:	e000      	b.n	8003092 <HAL_ADC_Init+0xaa>
 8003090:	2300      	movs	r3, #0
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	7d1b      	ldrb	r3, [r3, #20]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d119      	bne.n	80030d4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	7b1b      	ldrb	r3, [r3, #12]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d109      	bne.n	80030bc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	3b01      	subs	r3, #1
 80030ae:	035a      	lsls	r2, r3, #13
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	e00b      	b.n	80030d4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	f043 0220 	orr.w	r2, r3, #32
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030cc:	f043 0201 	orr.w	r2, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	4b28      	ldr	r3, [pc, #160]	; (8003190 <HAL_ADC_Init+0x1a8>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6812      	ldr	r2, [r2, #0]
 80030f6:	68b9      	ldr	r1, [r7, #8]
 80030f8:	430b      	orrs	r3, r1
 80030fa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003104:	d003      	beq.n	800310e <HAL_ADC_Init+0x126>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d104      	bne.n	8003118 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	3b01      	subs	r3, #1
 8003114:	051b      	lsls	r3, r3, #20
 8003116:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	430a      	orrs	r2, r1
 800312a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	4b18      	ldr	r3, [pc, #96]	; (8003194 <HAL_ADC_Init+0x1ac>)
 8003134:	4013      	ands	r3, r2
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	429a      	cmp	r2, r3
 800313a:	d10b      	bne.n	8003154 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003146:	f023 0303 	bic.w	r3, r3, #3
 800314a:	f043 0201 	orr.w	r2, r3, #1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003152:	e018      	b.n	8003186 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003158:	f023 0312 	bic.w	r3, r3, #18
 800315c:	f043 0210 	orr.w	r2, r3, #16
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003168:	f043 0201 	orr.w	r2, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003174:	e007      	b.n	8003186 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317a:	f043 0210 	orr.w	r2, r3, #16
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003186:	7dfb      	ldrb	r3, [r7, #23]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	ffe1f7fd 	.word	0xffe1f7fd
 8003194:	ff1f0efe 	.word	0xff1f0efe

08003198 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031a0:	2300      	movs	r3, #0
 80031a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_ADC_Start+0x1a>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e098      	b.n	80032e4 <HAL_ADC_Start+0x14c>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 faa4 	bl	8003708 <ADC_Enable>
 80031c0:	4603      	mov	r3, r0
 80031c2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f040 8087 	bne.w	80032da <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d4:	f023 0301 	bic.w	r3, r3, #1
 80031d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a41      	ldr	r2, [pc, #260]	; (80032ec <HAL_ADC_Start+0x154>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d105      	bne.n	80031f6 <HAL_ADC_Start+0x5e>
 80031ea:	4b41      	ldr	r3, [pc, #260]	; (80032f0 <HAL_ADC_Start+0x158>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d115      	bne.n	8003222 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800320c:	2b00      	cmp	r3, #0
 800320e:	d026      	beq.n	800325e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003214:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003218:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003220:	e01d      	b.n	800325e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003226:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a2f      	ldr	r2, [pc, #188]	; (80032f0 <HAL_ADC_Start+0x158>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d004      	beq.n	8003242 <HAL_ADC_Start+0xaa>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a2b      	ldr	r2, [pc, #172]	; (80032ec <HAL_ADC_Start+0x154>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d10d      	bne.n	800325e <HAL_ADC_Start+0xc6>
 8003242:	4b2b      	ldr	r3, [pc, #172]	; (80032f0 <HAL_ADC_Start+0x158>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324a:	2b00      	cmp	r3, #0
 800324c:	d007      	beq.n	800325e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003252:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003256:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d006      	beq.n	8003278 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326e:	f023 0206 	bic.w	r2, r3, #6
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	62da      	str	r2, [r3, #44]	; 0x2c
 8003276:	e002      	b.n	800327e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f06f 0202 	mvn.w	r2, #2
 800328e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800329a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800329e:	d113      	bne.n	80032c8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80032a4:	4a11      	ldr	r2, [pc, #68]	; (80032ec <HAL_ADC_Start+0x154>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d105      	bne.n	80032b6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80032aa:	4b11      	ldr	r3, [pc, #68]	; (80032f0 <HAL_ADC_Start+0x158>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d108      	bne.n	80032c8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80032c4:	609a      	str	r2, [r3, #8]
 80032c6:	e00c      	b.n	80032e2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80032d6:	609a      	str	r2, [r3, #8]
 80032d8:	e003      	b.n	80032e2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80032e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40012800 	.word	0x40012800
 80032f0:	40012400 	.word	0x40012400

080032f4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80032f4:	b590      	push	{r4, r7, lr}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003302:	2300      	movs	r3, #0
 8003304:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800330a:	f7ff fe3f 	bl	8002f8c <HAL_GetTick>
 800330e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00b      	beq.n	8003336 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003322:	f043 0220 	orr.w	r2, r3, #32
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e0d3      	b.n	80034de <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003340:	2b00      	cmp	r3, #0
 8003342:	d131      	bne.n	80033a8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800334e:	2b00      	cmp	r3, #0
 8003350:	d12a      	bne.n	80033a8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003352:	e021      	b.n	8003398 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335a:	d01d      	beq.n	8003398 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d007      	beq.n	8003372 <HAL_ADC_PollForConversion+0x7e>
 8003362:	f7ff fe13 	bl	8002f8c <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	429a      	cmp	r2, r3
 8003370:	d212      	bcs.n	8003398 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10b      	bne.n	8003398 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003384:	f043 0204 	orr.w	r2, r3, #4
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e0a2      	b.n	80034de <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0d6      	beq.n	8003354 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80033a6:	e070      	b.n	800348a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80033a8:	4b4f      	ldr	r3, [pc, #316]	; (80034e8 <HAL_ADC_PollForConversion+0x1f4>)
 80033aa:	681c      	ldr	r4, [r3, #0]
 80033ac:	2002      	movs	r0, #2
 80033ae:	f001 fa81 	bl	80048b4 <HAL_RCCEx_GetPeriphCLKFreq>
 80033b2:	4603      	mov	r3, r0
 80033b4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6919      	ldr	r1, [r3, #16]
 80033be:	4b4b      	ldr	r3, [pc, #300]	; (80034ec <HAL_ADC_PollForConversion+0x1f8>)
 80033c0:	400b      	ands	r3, r1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d118      	bne.n	80033f8 <HAL_ADC_PollForConversion+0x104>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68d9      	ldr	r1, [r3, #12]
 80033cc:	4b48      	ldr	r3, [pc, #288]	; (80034f0 <HAL_ADC_PollForConversion+0x1fc>)
 80033ce:	400b      	ands	r3, r1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d111      	bne.n	80033f8 <HAL_ADC_PollForConversion+0x104>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6919      	ldr	r1, [r3, #16]
 80033da:	4b46      	ldr	r3, [pc, #280]	; (80034f4 <HAL_ADC_PollForConversion+0x200>)
 80033dc:	400b      	ands	r3, r1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d108      	bne.n	80033f4 <HAL_ADC_PollForConversion+0x100>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68d9      	ldr	r1, [r3, #12]
 80033e8:	4b43      	ldr	r3, [pc, #268]	; (80034f8 <HAL_ADC_PollForConversion+0x204>)
 80033ea:	400b      	ands	r3, r1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_ADC_PollForConversion+0x100>
 80033f0:	2314      	movs	r3, #20
 80033f2:	e020      	b.n	8003436 <HAL_ADC_PollForConversion+0x142>
 80033f4:	2329      	movs	r3, #41	; 0x29
 80033f6:	e01e      	b.n	8003436 <HAL_ADC_PollForConversion+0x142>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6919      	ldr	r1, [r3, #16]
 80033fe:	4b3d      	ldr	r3, [pc, #244]	; (80034f4 <HAL_ADC_PollForConversion+0x200>)
 8003400:	400b      	ands	r3, r1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d106      	bne.n	8003414 <HAL_ADC_PollForConversion+0x120>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68d9      	ldr	r1, [r3, #12]
 800340c:	4b3a      	ldr	r3, [pc, #232]	; (80034f8 <HAL_ADC_PollForConversion+0x204>)
 800340e:	400b      	ands	r3, r1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00d      	beq.n	8003430 <HAL_ADC_PollForConversion+0x13c>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6919      	ldr	r1, [r3, #16]
 800341a:	4b38      	ldr	r3, [pc, #224]	; (80034fc <HAL_ADC_PollForConversion+0x208>)
 800341c:	400b      	ands	r3, r1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d108      	bne.n	8003434 <HAL_ADC_PollForConversion+0x140>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68d9      	ldr	r1, [r3, #12]
 8003428:	4b34      	ldr	r3, [pc, #208]	; (80034fc <HAL_ADC_PollForConversion+0x208>)
 800342a:	400b      	ands	r3, r1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_ADC_PollForConversion+0x140>
 8003430:	2354      	movs	r3, #84	; 0x54
 8003432:	e000      	b.n	8003436 <HAL_ADC_PollForConversion+0x142>
 8003434:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003436:	fb02 f303 	mul.w	r3, r2, r3
 800343a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800343c:	e021      	b.n	8003482 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003444:	d01a      	beq.n	800347c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d007      	beq.n	800345c <HAL_ADC_PollForConversion+0x168>
 800344c:	f7ff fd9e 	bl	8002f8c <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	429a      	cmp	r2, r3
 800345a:	d20f      	bcs.n	800347c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	429a      	cmp	r2, r3
 8003462:	d90b      	bls.n	800347c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003468:	f043 0204 	orr.w	r2, r3, #4
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e030      	b.n	80034de <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	3301      	adds	r3, #1
 8003480:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	429a      	cmp	r2, r3
 8003488:	d8d9      	bhi.n	800343e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f06f 0212 	mvn.w	r2, #18
 8003492:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003498:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80034aa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80034ae:	d115      	bne.n	80034dc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d111      	bne.n	80034dc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d105      	bne.n	80034dc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d4:	f043 0201 	orr.w	r2, r3, #1
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	371c      	adds	r7, #28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd90      	pop	{r4, r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20000034 	.word	0x20000034
 80034ec:	24924924 	.word	0x24924924
 80034f0:	00924924 	.word	0x00924924
 80034f4:	12492492 	.word	0x12492492
 80034f8:	00492492 	.word	0x00492492
 80034fc:	00249249 	.word	0x00249249

08003500 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800350e:	4618      	mov	r0, r3
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr

08003518 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003522:	2300      	movs	r3, #0
 8003524:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003526:	2300      	movs	r3, #0
 8003528:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003530:	2b01      	cmp	r3, #1
 8003532:	d101      	bne.n	8003538 <HAL_ADC_ConfigChannel+0x20>
 8003534:	2302      	movs	r3, #2
 8003536:	e0dc      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x1da>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b06      	cmp	r3, #6
 8003546:	d81c      	bhi.n	8003582 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4413      	add	r3, r2
 8003558:	3b05      	subs	r3, #5
 800355a:	221f      	movs	r2, #31
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	43db      	mvns	r3, r3
 8003562:	4019      	ands	r1, r3
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	6818      	ldr	r0, [r3, #0]
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	4613      	mov	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	3b05      	subs	r3, #5
 8003574:	fa00 f203 	lsl.w	r2, r0, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	635a      	str	r2, [r3, #52]	; 0x34
 8003580:	e03c      	b.n	80035fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b0c      	cmp	r3, #12
 8003588:	d81c      	bhi.n	80035c4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	3b23      	subs	r3, #35	; 0x23
 800359c:	221f      	movs	r2, #31
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	43db      	mvns	r3, r3
 80035a4:	4019      	ands	r1, r3
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	3b23      	subs	r3, #35	; 0x23
 80035b6:	fa00 f203 	lsl.w	r2, r0, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	631a      	str	r2, [r3, #48]	; 0x30
 80035c2:	e01b      	b.n	80035fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	3b41      	subs	r3, #65	; 0x41
 80035d6:	221f      	movs	r2, #31
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	43db      	mvns	r3, r3
 80035de:	4019      	ands	r1, r3
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	6818      	ldr	r0, [r3, #0]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	3b41      	subs	r3, #65	; 0x41
 80035f0:	fa00 f203 	lsl.w	r2, r0, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b09      	cmp	r3, #9
 8003602:	d91c      	bls.n	800363e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68d9      	ldr	r1, [r3, #12]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	4613      	mov	r3, r2
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	4413      	add	r3, r2
 8003614:	3b1e      	subs	r3, #30
 8003616:	2207      	movs	r2, #7
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	43db      	mvns	r3, r3
 800361e:	4019      	ands	r1, r3
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	6898      	ldr	r0, [r3, #8]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	4613      	mov	r3, r2
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	4413      	add	r3, r2
 800362e:	3b1e      	subs	r3, #30
 8003630:	fa00 f203 	lsl.w	r2, r0, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	430a      	orrs	r2, r1
 800363a:	60da      	str	r2, [r3, #12]
 800363c:	e019      	b.n	8003672 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6919      	ldr	r1, [r3, #16]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	4613      	mov	r3, r2
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	4413      	add	r3, r2
 800364e:	2207      	movs	r2, #7
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	43db      	mvns	r3, r3
 8003656:	4019      	ands	r1, r3
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	6898      	ldr	r0, [r3, #8]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	4613      	mov	r3, r2
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	4413      	add	r3, r2
 8003666:	fa00 f203 	lsl.w	r2, r0, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b10      	cmp	r3, #16
 8003678:	d003      	beq.n	8003682 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800367e:	2b11      	cmp	r3, #17
 8003680:	d132      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1d      	ldr	r2, [pc, #116]	; (80036fc <HAL_ADC_ConfigChannel+0x1e4>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d125      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d126      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80036a8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b10      	cmp	r3, #16
 80036b0:	d11a      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036b2:	4b13      	ldr	r3, [pc, #76]	; (8003700 <HAL_ADC_ConfigChannel+0x1e8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a13      	ldr	r2, [pc, #76]	; (8003704 <HAL_ADC_ConfigChannel+0x1ec>)
 80036b8:	fba2 2303 	umull	r2, r3, r2, r3
 80036bc:	0c9a      	lsrs	r2, r3, #18
 80036be:	4613      	mov	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80036c8:	e002      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	3b01      	subs	r3, #1
 80036ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f9      	bne.n	80036ca <HAL_ADC_ConfigChannel+0x1b2>
 80036d6:	e007      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036dc:	f043 0220 	orr.w	r2, r3, #32
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr
 80036fc:	40012400 	.word	0x40012400
 8003700:	20000034 	.word	0x20000034
 8003704:	431bde83 	.word	0x431bde83

08003708 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b01      	cmp	r3, #1
 8003724:	d040      	beq.n	80037a8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f042 0201 	orr.w	r2, r2, #1
 8003734:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003736:	4b1f      	ldr	r3, [pc, #124]	; (80037b4 <ADC_Enable+0xac>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a1f      	ldr	r2, [pc, #124]	; (80037b8 <ADC_Enable+0xb0>)
 800373c:	fba2 2303 	umull	r2, r3, r2, r3
 8003740:	0c9b      	lsrs	r3, r3, #18
 8003742:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003744:	e002      	b.n	800374c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	3b01      	subs	r3, #1
 800374a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f9      	bne.n	8003746 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003752:	f7ff fc1b 	bl	8002f8c <HAL_GetTick>
 8003756:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003758:	e01f      	b.n	800379a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800375a:	f7ff fc17 	bl	8002f8c <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d918      	bls.n	800379a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b01      	cmp	r3, #1
 8003774:	d011      	beq.n	800379a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377a:	f043 0210 	orr.w	r2, r3, #16
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003786:	f043 0201 	orr.w	r2, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e007      	b.n	80037aa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d1d8      	bne.n	800375a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	20000034 	.word	0x20000034
 80037b8:	431bde83 	.word	0x431bde83

080037bc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d12e      	bne.n	8003834 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0201 	bic.w	r2, r2, #1
 80037e4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80037e6:	f7ff fbd1 	bl	8002f8c <HAL_GetTick>
 80037ea:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80037ec:	e01b      	b.n	8003826 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80037ee:	f7ff fbcd 	bl	8002f8c <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d914      	bls.n	8003826 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b01      	cmp	r3, #1
 8003808:	d10d      	bne.n	8003826 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380e:	f043 0210 	orr.w	r2, r3, #16
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381a:	f043 0201 	orr.w	r2, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e007      	b.n	8003836 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b01      	cmp	r3, #1
 8003832:	d0dc      	beq.n	80037ee <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
	...

08003840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003850:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <__NVIC_SetPriorityGrouping+0x44>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800385c:	4013      	ands	r3, r2
 800385e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003868:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800386c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003872:	4a04      	ldr	r2, [pc, #16]	; (8003884 <__NVIC_SetPriorityGrouping+0x44>)
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	60d3      	str	r3, [r2, #12]
}
 8003878:	bf00      	nop
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	e000ed00 	.word	0xe000ed00

08003888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800388c:	4b04      	ldr	r3, [pc, #16]	; (80038a0 <__NVIC_GetPriorityGrouping+0x18>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	0a1b      	lsrs	r3, r3, #8
 8003892:	f003 0307 	and.w	r3, r3, #7
}
 8003896:	4618      	mov	r0, r3
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	e000ed00 	.word	0xe000ed00

080038a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4603      	mov	r3, r0
 80038ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	db0b      	blt.n	80038ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038b6:	79fb      	ldrb	r3, [r7, #7]
 80038b8:	f003 021f 	and.w	r2, r3, #31
 80038bc:	4906      	ldr	r1, [pc, #24]	; (80038d8 <__NVIC_EnableIRQ+0x34>)
 80038be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c2:	095b      	lsrs	r3, r3, #5
 80038c4:	2001      	movs	r0, #1
 80038c6:	fa00 f202 	lsl.w	r2, r0, r2
 80038ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr
 80038d8:	e000e100 	.word	0xe000e100

080038dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	4603      	mov	r3, r0
 80038e4:	6039      	str	r1, [r7, #0]
 80038e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	db0a      	blt.n	8003906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	490c      	ldr	r1, [pc, #48]	; (8003928 <__NVIC_SetPriority+0x4c>)
 80038f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fa:	0112      	lsls	r2, r2, #4
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	440b      	add	r3, r1
 8003900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003904:	e00a      	b.n	800391c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	b2da      	uxtb	r2, r3
 800390a:	4908      	ldr	r1, [pc, #32]	; (800392c <__NVIC_SetPriority+0x50>)
 800390c:	79fb      	ldrb	r3, [r7, #7]
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	3b04      	subs	r3, #4
 8003914:	0112      	lsls	r2, r2, #4
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	440b      	add	r3, r1
 800391a:	761a      	strb	r2, [r3, #24]
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	e000e100 	.word	0xe000e100
 800392c:	e000ed00 	.word	0xe000ed00

08003930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003930:	b480      	push	{r7}
 8003932:	b089      	sub	sp, #36	; 0x24
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f1c3 0307 	rsb	r3, r3, #7
 800394a:	2b04      	cmp	r3, #4
 800394c:	bf28      	it	cs
 800394e:	2304      	movcs	r3, #4
 8003950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	3304      	adds	r3, #4
 8003956:	2b06      	cmp	r3, #6
 8003958:	d902      	bls.n	8003960 <NVIC_EncodePriority+0x30>
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	3b03      	subs	r3, #3
 800395e:	e000      	b.n	8003962 <NVIC_EncodePriority+0x32>
 8003960:	2300      	movs	r3, #0
 8003962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003964:	f04f 32ff 	mov.w	r2, #4294967295
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	43da      	mvns	r2, r3
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	401a      	ands	r2, r3
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003978:	f04f 31ff 	mov.w	r1, #4294967295
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	fa01 f303 	lsl.w	r3, r1, r3
 8003982:	43d9      	mvns	r1, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003988:	4313      	orrs	r3, r2
         );
}
 800398a:	4618      	mov	r0, r3
 800398c:	3724      	adds	r7, #36	; 0x24
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3b01      	subs	r3, #1
 80039a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039a4:	d301      	bcc.n	80039aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039a6:	2301      	movs	r3, #1
 80039a8:	e00f      	b.n	80039ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039aa:	4a0a      	ldr	r2, [pc, #40]	; (80039d4 <SysTick_Config+0x40>)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3b01      	subs	r3, #1
 80039b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039b2:	210f      	movs	r1, #15
 80039b4:	f04f 30ff 	mov.w	r0, #4294967295
 80039b8:	f7ff ff90 	bl	80038dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039bc:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <SysTick_Config+0x40>)
 80039be:	2200      	movs	r2, #0
 80039c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039c2:	4b04      	ldr	r3, [pc, #16]	; (80039d4 <SysTick_Config+0x40>)
 80039c4:	2207      	movs	r2, #7
 80039c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	e000e010 	.word	0xe000e010

080039d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7ff ff2d 	bl	8003840 <__NVIC_SetPriorityGrouping>
}
 80039e6:	bf00      	nop
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b086      	sub	sp, #24
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	4603      	mov	r3, r0
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	607a      	str	r2, [r7, #4]
 80039fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a00:	f7ff ff42 	bl	8003888 <__NVIC_GetPriorityGrouping>
 8003a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	68b9      	ldr	r1, [r7, #8]
 8003a0a:	6978      	ldr	r0, [r7, #20]
 8003a0c:	f7ff ff90 	bl	8003930 <NVIC_EncodePriority>
 8003a10:	4602      	mov	r2, r0
 8003a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a16:	4611      	mov	r1, r2
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7ff ff5f 	bl	80038dc <__NVIC_SetPriority>
}
 8003a1e:	bf00      	nop
 8003a20:	3718      	adds	r7, #24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b082      	sub	sp, #8
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff ff35 	bl	80038a4 <__NVIC_EnableIRQ>
}
 8003a3a:	bf00      	nop
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b082      	sub	sp, #8
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff ffa2 	bl	8003994 <SysTick_Config>
 8003a50:	4603      	mov	r3, r0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b085      	sub	sp, #20
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d008      	beq.n	8003a84 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2204      	movs	r2, #4
 8003a76:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e020      	b.n	8003ac6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 020e 	bic.w	r2, r2, #14
 8003a92:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0201 	bic.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aac:	2101      	movs	r1, #1
 8003aae:	fa01 f202 	lsl.w	r2, r1, r2
 8003ab2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr

08003ad0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d005      	beq.n	8003af4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2204      	movs	r2, #4
 8003aec:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	73fb      	strb	r3, [r7, #15]
 8003af2:	e051      	b.n	8003b98 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 020e 	bic.w	r2, r2, #14
 8003b02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0201 	bic.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a22      	ldr	r2, [pc, #136]	; (8003ba4 <HAL_DMA_Abort_IT+0xd4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d029      	beq.n	8003b72 <HAL_DMA_Abort_IT+0xa2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a21      	ldr	r2, [pc, #132]	; (8003ba8 <HAL_DMA_Abort_IT+0xd8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d022      	beq.n	8003b6e <HAL_DMA_Abort_IT+0x9e>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1f      	ldr	r2, [pc, #124]	; (8003bac <HAL_DMA_Abort_IT+0xdc>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d01a      	beq.n	8003b68 <HAL_DMA_Abort_IT+0x98>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1e      	ldr	r2, [pc, #120]	; (8003bb0 <HAL_DMA_Abort_IT+0xe0>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d012      	beq.n	8003b62 <HAL_DMA_Abort_IT+0x92>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a1c      	ldr	r2, [pc, #112]	; (8003bb4 <HAL_DMA_Abort_IT+0xe4>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d00a      	beq.n	8003b5c <HAL_DMA_Abort_IT+0x8c>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a1b      	ldr	r2, [pc, #108]	; (8003bb8 <HAL_DMA_Abort_IT+0xe8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d102      	bne.n	8003b56 <HAL_DMA_Abort_IT+0x86>
 8003b50:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003b54:	e00e      	b.n	8003b74 <HAL_DMA_Abort_IT+0xa4>
 8003b56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b5a:	e00b      	b.n	8003b74 <HAL_DMA_Abort_IT+0xa4>
 8003b5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b60:	e008      	b.n	8003b74 <HAL_DMA_Abort_IT+0xa4>
 8003b62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b66:	e005      	b.n	8003b74 <HAL_DMA_Abort_IT+0xa4>
 8003b68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b6c:	e002      	b.n	8003b74 <HAL_DMA_Abort_IT+0xa4>
 8003b6e:	2310      	movs	r3, #16
 8003b70:	e000      	b.n	8003b74 <HAL_DMA_Abort_IT+0xa4>
 8003b72:	2301      	movs	r3, #1
 8003b74:	4a11      	ldr	r2, [pc, #68]	; (8003bbc <HAL_DMA_Abort_IT+0xec>)
 8003b76:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d003      	beq.n	8003b98 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	4798      	blx	r3
    } 
  }
  return status;
 8003b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40020008 	.word	0x40020008
 8003ba8:	4002001c 	.word	0x4002001c
 8003bac:	40020030 	.word	0x40020030
 8003bb0:	40020044 	.word	0x40020044
 8003bb4:	40020058 	.word	0x40020058
 8003bb8:	4002006c 	.word	0x4002006c
 8003bbc:	40020000 	.word	0x40020000

08003bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b08b      	sub	sp, #44	; 0x2c
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bd2:	e169      	b.n	8003ea8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	69fa      	ldr	r2, [r7, #28]
 8003be4:	4013      	ands	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	f040 8158 	bne.w	8003ea2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	4a9a      	ldr	r2, [pc, #616]	; (8003e60 <HAL_GPIO_Init+0x2a0>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d05e      	beq.n	8003cba <HAL_GPIO_Init+0xfa>
 8003bfc:	4a98      	ldr	r2, [pc, #608]	; (8003e60 <HAL_GPIO_Init+0x2a0>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d875      	bhi.n	8003cee <HAL_GPIO_Init+0x12e>
 8003c02:	4a98      	ldr	r2, [pc, #608]	; (8003e64 <HAL_GPIO_Init+0x2a4>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d058      	beq.n	8003cba <HAL_GPIO_Init+0xfa>
 8003c08:	4a96      	ldr	r2, [pc, #600]	; (8003e64 <HAL_GPIO_Init+0x2a4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d86f      	bhi.n	8003cee <HAL_GPIO_Init+0x12e>
 8003c0e:	4a96      	ldr	r2, [pc, #600]	; (8003e68 <HAL_GPIO_Init+0x2a8>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d052      	beq.n	8003cba <HAL_GPIO_Init+0xfa>
 8003c14:	4a94      	ldr	r2, [pc, #592]	; (8003e68 <HAL_GPIO_Init+0x2a8>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d869      	bhi.n	8003cee <HAL_GPIO_Init+0x12e>
 8003c1a:	4a94      	ldr	r2, [pc, #592]	; (8003e6c <HAL_GPIO_Init+0x2ac>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d04c      	beq.n	8003cba <HAL_GPIO_Init+0xfa>
 8003c20:	4a92      	ldr	r2, [pc, #584]	; (8003e6c <HAL_GPIO_Init+0x2ac>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d863      	bhi.n	8003cee <HAL_GPIO_Init+0x12e>
 8003c26:	4a92      	ldr	r2, [pc, #584]	; (8003e70 <HAL_GPIO_Init+0x2b0>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d046      	beq.n	8003cba <HAL_GPIO_Init+0xfa>
 8003c2c:	4a90      	ldr	r2, [pc, #576]	; (8003e70 <HAL_GPIO_Init+0x2b0>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d85d      	bhi.n	8003cee <HAL_GPIO_Init+0x12e>
 8003c32:	2b12      	cmp	r3, #18
 8003c34:	d82a      	bhi.n	8003c8c <HAL_GPIO_Init+0xcc>
 8003c36:	2b12      	cmp	r3, #18
 8003c38:	d859      	bhi.n	8003cee <HAL_GPIO_Init+0x12e>
 8003c3a:	a201      	add	r2, pc, #4	; (adr r2, 8003c40 <HAL_GPIO_Init+0x80>)
 8003c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c40:	08003cbb 	.word	0x08003cbb
 8003c44:	08003c95 	.word	0x08003c95
 8003c48:	08003ca7 	.word	0x08003ca7
 8003c4c:	08003ce9 	.word	0x08003ce9
 8003c50:	08003cef 	.word	0x08003cef
 8003c54:	08003cef 	.word	0x08003cef
 8003c58:	08003cef 	.word	0x08003cef
 8003c5c:	08003cef 	.word	0x08003cef
 8003c60:	08003cef 	.word	0x08003cef
 8003c64:	08003cef 	.word	0x08003cef
 8003c68:	08003cef 	.word	0x08003cef
 8003c6c:	08003cef 	.word	0x08003cef
 8003c70:	08003cef 	.word	0x08003cef
 8003c74:	08003cef 	.word	0x08003cef
 8003c78:	08003cef 	.word	0x08003cef
 8003c7c:	08003cef 	.word	0x08003cef
 8003c80:	08003cef 	.word	0x08003cef
 8003c84:	08003c9d 	.word	0x08003c9d
 8003c88:	08003cb1 	.word	0x08003cb1
 8003c8c:	4a79      	ldr	r2, [pc, #484]	; (8003e74 <HAL_GPIO_Init+0x2b4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d013      	beq.n	8003cba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c92:	e02c      	b.n	8003cee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	623b      	str	r3, [r7, #32]
          break;
 8003c9a:	e029      	b.n	8003cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	623b      	str	r3, [r7, #32]
          break;
 8003ca4:	e024      	b.n	8003cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	3308      	adds	r3, #8
 8003cac:	623b      	str	r3, [r7, #32]
          break;
 8003cae:	e01f      	b.n	8003cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	330c      	adds	r3, #12
 8003cb6:	623b      	str	r3, [r7, #32]
          break;
 8003cb8:	e01a      	b.n	8003cf0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d102      	bne.n	8003cc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003cc2:	2304      	movs	r3, #4
 8003cc4:	623b      	str	r3, [r7, #32]
          break;
 8003cc6:	e013      	b.n	8003cf0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d105      	bne.n	8003cdc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cd0:	2308      	movs	r3, #8
 8003cd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69fa      	ldr	r2, [r7, #28]
 8003cd8:	611a      	str	r2, [r3, #16]
          break;
 8003cda:	e009      	b.n	8003cf0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cdc:	2308      	movs	r3, #8
 8003cde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	69fa      	ldr	r2, [r7, #28]
 8003ce4:	615a      	str	r2, [r3, #20]
          break;
 8003ce6:	e003      	b.n	8003cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	623b      	str	r3, [r7, #32]
          break;
 8003cec:	e000      	b.n	8003cf0 <HAL_GPIO_Init+0x130>
          break;
 8003cee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	2bff      	cmp	r3, #255	; 0xff
 8003cf4:	d801      	bhi.n	8003cfa <HAL_GPIO_Init+0x13a>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	e001      	b.n	8003cfe <HAL_GPIO_Init+0x13e>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	2bff      	cmp	r3, #255	; 0xff
 8003d04:	d802      	bhi.n	8003d0c <HAL_GPIO_Init+0x14c>
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	e002      	b.n	8003d12 <HAL_GPIO_Init+0x152>
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	3b08      	subs	r3, #8
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	210f      	movs	r1, #15
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d20:	43db      	mvns	r3, r3
 8003d22:	401a      	ands	r2, r3
 8003d24:	6a39      	ldr	r1, [r7, #32]
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 80b1 	beq.w	8003ea2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d40:	4b4d      	ldr	r3, [pc, #308]	; (8003e78 <HAL_GPIO_Init+0x2b8>)
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	4a4c      	ldr	r2, [pc, #304]	; (8003e78 <HAL_GPIO_Init+0x2b8>)
 8003d46:	f043 0301 	orr.w	r3, r3, #1
 8003d4a:	6193      	str	r3, [r2, #24]
 8003d4c:	4b4a      	ldr	r3, [pc, #296]	; (8003e78 <HAL_GPIO_Init+0x2b8>)
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003d58:	4a48      	ldr	r2, [pc, #288]	; (8003e7c <HAL_GPIO_Init+0x2bc>)
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	089b      	lsrs	r3, r3, #2
 8003d5e:	3302      	adds	r3, #2
 8003d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	f003 0303 	and.w	r3, r3, #3
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	220f      	movs	r2, #15
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	43db      	mvns	r3, r3
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a40      	ldr	r2, [pc, #256]	; (8003e80 <HAL_GPIO_Init+0x2c0>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d013      	beq.n	8003dac <HAL_GPIO_Init+0x1ec>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a3f      	ldr	r2, [pc, #252]	; (8003e84 <HAL_GPIO_Init+0x2c4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d00d      	beq.n	8003da8 <HAL_GPIO_Init+0x1e8>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a3e      	ldr	r2, [pc, #248]	; (8003e88 <HAL_GPIO_Init+0x2c8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d007      	beq.n	8003da4 <HAL_GPIO_Init+0x1e4>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a3d      	ldr	r2, [pc, #244]	; (8003e8c <HAL_GPIO_Init+0x2cc>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d101      	bne.n	8003da0 <HAL_GPIO_Init+0x1e0>
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e006      	b.n	8003dae <HAL_GPIO_Init+0x1ee>
 8003da0:	2304      	movs	r3, #4
 8003da2:	e004      	b.n	8003dae <HAL_GPIO_Init+0x1ee>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e002      	b.n	8003dae <HAL_GPIO_Init+0x1ee>
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <HAL_GPIO_Init+0x1ee>
 8003dac:	2300      	movs	r3, #0
 8003dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db0:	f002 0203 	and.w	r2, r2, #3
 8003db4:	0092      	lsls	r2, r2, #2
 8003db6:	4093      	lsls	r3, r2
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003dbe:	492f      	ldr	r1, [pc, #188]	; (8003e7c <HAL_GPIO_Init+0x2bc>)
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	089b      	lsrs	r3, r3, #2
 8003dc4:	3302      	adds	r3, #2
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d006      	beq.n	8003de6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003dd8:	4b2d      	ldr	r3, [pc, #180]	; (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	492c      	ldr	r1, [pc, #176]	; (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	608b      	str	r3, [r1, #8]
 8003de4:	e006      	b.n	8003df4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003de6:	4b2a      	ldr	r3, [pc, #168]	; (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	43db      	mvns	r3, r3
 8003dee:	4928      	ldr	r1, [pc, #160]	; (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003df0:	4013      	ands	r3, r2
 8003df2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d006      	beq.n	8003e0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e00:	4b23      	ldr	r3, [pc, #140]	; (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003e02:	68da      	ldr	r2, [r3, #12]
 8003e04:	4922      	ldr	r1, [pc, #136]	; (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	60cb      	str	r3, [r1, #12]
 8003e0c:	e006      	b.n	8003e1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e0e:	4b20      	ldr	r3, [pc, #128]	; (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	43db      	mvns	r3, r3
 8003e16:	491e      	ldr	r1, [pc, #120]	; (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d006      	beq.n	8003e36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e28:	4b19      	ldr	r3, [pc, #100]	; (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	4918      	ldr	r1, [pc, #96]	; (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	604b      	str	r3, [r1, #4]
 8003e34:	e006      	b.n	8003e44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e36:	4b16      	ldr	r3, [pc, #88]	; (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	4914      	ldr	r1, [pc, #80]	; (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d021      	beq.n	8003e94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e50:	4b0f      	ldr	r3, [pc, #60]	; (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	490e      	ldr	r1, [pc, #56]	; (8003e90 <HAL_GPIO_Init+0x2d0>)
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	600b      	str	r3, [r1, #0]
 8003e5c:	e021      	b.n	8003ea2 <HAL_GPIO_Init+0x2e2>
 8003e5e:	bf00      	nop
 8003e60:	10320000 	.word	0x10320000
 8003e64:	10310000 	.word	0x10310000
 8003e68:	10220000 	.word	0x10220000
 8003e6c:	10210000 	.word	0x10210000
 8003e70:	10120000 	.word	0x10120000
 8003e74:	10110000 	.word	0x10110000
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	40010000 	.word	0x40010000
 8003e80:	40010800 	.word	0x40010800
 8003e84:	40010c00 	.word	0x40010c00
 8003e88:	40011000 	.word	0x40011000
 8003e8c:	40011400 	.word	0x40011400
 8003e90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e94:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <HAL_GPIO_Init+0x304>)
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	43db      	mvns	r3, r3
 8003e9c:	4909      	ldr	r1, [pc, #36]	; (8003ec4 <HAL_GPIO_Init+0x304>)
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f47f ae8e 	bne.w	8003bd4 <HAL_GPIO_Init+0x14>
  }
}
 8003eb8:	bf00      	nop
 8003eba:	bf00      	nop
 8003ebc:	372c      	adds	r7, #44	; 0x2c
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr
 8003ec4:	40010400 	.word	0x40010400

08003ec8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	887b      	ldrh	r3, [r7, #2]
 8003eda:	4013      	ands	r3, r2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	73fb      	strb	r3, [r7, #15]
 8003ee4:	e001      	b.n	8003eea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bc80      	pop	{r7}
 8003ef4:	4770      	bx	lr

08003ef6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
 8003efe:	460b      	mov	r3, r1
 8003f00:	807b      	strh	r3, [r7, #2]
 8003f02:	4613      	mov	r3, r2
 8003f04:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f06:	787b      	ldrb	r3, [r7, #1]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f0c:	887a      	ldrh	r2, [r7, #2]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003f12:	e003      	b.n	8003f1c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f14:	887b      	ldrh	r3, [r7, #2]
 8003f16:	041a      	lsls	r2, r3, #16
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	611a      	str	r2, [r3, #16]
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc80      	pop	{r7}
 8003f24:	4770      	bx	lr
	...

08003f28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e272      	b.n	8004420 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 8087 	beq.w	8004056 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f48:	4b92      	ldr	r3, [pc, #584]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f003 030c 	and.w	r3, r3, #12
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d00c      	beq.n	8003f6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f54:	4b8f      	ldr	r3, [pc, #572]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f003 030c 	and.w	r3, r3, #12
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d112      	bne.n	8003f86 <HAL_RCC_OscConfig+0x5e>
 8003f60:	4b8c      	ldr	r3, [pc, #560]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f6c:	d10b      	bne.n	8003f86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f6e:	4b89      	ldr	r3, [pc, #548]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d06c      	beq.n	8004054 <HAL_RCC_OscConfig+0x12c>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d168      	bne.n	8004054 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e24c      	b.n	8004420 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f8e:	d106      	bne.n	8003f9e <HAL_RCC_OscConfig+0x76>
 8003f90:	4b80      	ldr	r3, [pc, #512]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a7f      	ldr	r2, [pc, #508]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9a:	6013      	str	r3, [r2, #0]
 8003f9c:	e02e      	b.n	8003ffc <HAL_RCC_OscConfig+0xd4>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10c      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x98>
 8003fa6:	4b7b      	ldr	r3, [pc, #492]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a7a      	ldr	r2, [pc, #488]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb0:	6013      	str	r3, [r2, #0]
 8003fb2:	4b78      	ldr	r3, [pc, #480]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a77      	ldr	r2, [pc, #476]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003fb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	e01d      	b.n	8003ffc <HAL_RCC_OscConfig+0xd4>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fc8:	d10c      	bne.n	8003fe4 <HAL_RCC_OscConfig+0xbc>
 8003fca:	4b72      	ldr	r3, [pc, #456]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a71      	ldr	r2, [pc, #452]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	4b6f      	ldr	r3, [pc, #444]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a6e      	ldr	r2, [pc, #440]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	e00b      	b.n	8003ffc <HAL_RCC_OscConfig+0xd4>
 8003fe4:	4b6b      	ldr	r3, [pc, #428]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a6a      	ldr	r2, [pc, #424]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	4b68      	ldr	r3, [pc, #416]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a67      	ldr	r2, [pc, #412]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8003ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ffa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d013      	beq.n	800402c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004004:	f7fe ffc2 	bl	8002f8c <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800400c:	f7fe ffbe 	bl	8002f8c <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b64      	cmp	r3, #100	; 0x64
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e200      	b.n	8004420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800401e:	4b5d      	ldr	r3, [pc, #372]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0f0      	beq.n	800400c <HAL_RCC_OscConfig+0xe4>
 800402a:	e014      	b.n	8004056 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402c:	f7fe ffae 	bl	8002f8c <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004034:	f7fe ffaa 	bl	8002f8c <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b64      	cmp	r3, #100	; 0x64
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e1ec      	b.n	8004420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004046:	4b53      	ldr	r3, [pc, #332]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_OscConfig+0x10c>
 8004052:	e000      	b.n	8004056 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d063      	beq.n	800412a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004062:	4b4c      	ldr	r3, [pc, #304]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f003 030c 	and.w	r3, r3, #12
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00b      	beq.n	8004086 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800406e:	4b49      	ldr	r3, [pc, #292]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f003 030c 	and.w	r3, r3, #12
 8004076:	2b08      	cmp	r3, #8
 8004078:	d11c      	bne.n	80040b4 <HAL_RCC_OscConfig+0x18c>
 800407a:	4b46      	ldr	r3, [pc, #280]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d116      	bne.n	80040b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004086:	4b43      	ldr	r3, [pc, #268]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d005      	beq.n	800409e <HAL_RCC_OscConfig+0x176>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d001      	beq.n	800409e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e1c0      	b.n	8004420 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800409e:	4b3d      	ldr	r3, [pc, #244]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	4939      	ldr	r1, [pc, #228]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040b2:	e03a      	b.n	800412a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d020      	beq.n	80040fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040bc:	4b36      	ldr	r3, [pc, #216]	; (8004198 <HAL_RCC_OscConfig+0x270>)
 80040be:	2201      	movs	r2, #1
 80040c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c2:	f7fe ff63 	bl	8002f8c <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ca:	f7fe ff5f 	bl	8002f8c <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e1a1      	b.n	8004420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040dc:	4b2d      	ldr	r3, [pc, #180]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0f0      	beq.n	80040ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e8:	4b2a      	ldr	r3, [pc, #168]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	4927      	ldr	r1, [pc, #156]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	600b      	str	r3, [r1, #0]
 80040fc:	e015      	b.n	800412a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040fe:	4b26      	ldr	r3, [pc, #152]	; (8004198 <HAL_RCC_OscConfig+0x270>)
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004104:	f7fe ff42 	bl	8002f8c <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800410c:	f7fe ff3e 	bl	8002f8c <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e180      	b.n	8004420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800411e:	4b1d      	ldr	r3, [pc, #116]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f0      	bne.n	800410c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	2b00      	cmp	r3, #0
 8004134:	d03a      	beq.n	80041ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d019      	beq.n	8004172 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800413e:	4b17      	ldr	r3, [pc, #92]	; (800419c <HAL_RCC_OscConfig+0x274>)
 8004140:	2201      	movs	r2, #1
 8004142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004144:	f7fe ff22 	bl	8002f8c <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800414c:	f7fe ff1e 	bl	8002f8c <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e160      	b.n	8004420 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800415e:	4b0d      	ldr	r3, [pc, #52]	; (8004194 <HAL_RCC_OscConfig+0x26c>)
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0f0      	beq.n	800414c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800416a:	2001      	movs	r0, #1
 800416c:	f000 face 	bl	800470c <RCC_Delay>
 8004170:	e01c      	b.n	80041ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004172:	4b0a      	ldr	r3, [pc, #40]	; (800419c <HAL_RCC_OscConfig+0x274>)
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004178:	f7fe ff08 	bl	8002f8c <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800417e:	e00f      	b.n	80041a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004180:	f7fe ff04 	bl	8002f8c <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d908      	bls.n	80041a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e146      	b.n	8004420 <HAL_RCC_OscConfig+0x4f8>
 8004192:	bf00      	nop
 8004194:	40021000 	.word	0x40021000
 8004198:	42420000 	.word	0x42420000
 800419c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a0:	4b92      	ldr	r3, [pc, #584]	; (80043ec <HAL_RCC_OscConfig+0x4c4>)
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1e9      	bne.n	8004180 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 80a6 	beq.w	8004306 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ba:	2300      	movs	r3, #0
 80041bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041be:	4b8b      	ldr	r3, [pc, #556]	; (80043ec <HAL_RCC_OscConfig+0x4c4>)
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10d      	bne.n	80041e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ca:	4b88      	ldr	r3, [pc, #544]	; (80043ec <HAL_RCC_OscConfig+0x4c4>)
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	4a87      	ldr	r2, [pc, #540]	; (80043ec <HAL_RCC_OscConfig+0x4c4>)
 80041d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d4:	61d3      	str	r3, [r2, #28]
 80041d6:	4b85      	ldr	r3, [pc, #532]	; (80043ec <HAL_RCC_OscConfig+0x4c4>)
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041de:	60bb      	str	r3, [r7, #8]
 80041e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041e2:	2301      	movs	r3, #1
 80041e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e6:	4b82      	ldr	r3, [pc, #520]	; (80043f0 <HAL_RCC_OscConfig+0x4c8>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d118      	bne.n	8004224 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041f2:	4b7f      	ldr	r3, [pc, #508]	; (80043f0 <HAL_RCC_OscConfig+0x4c8>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a7e      	ldr	r2, [pc, #504]	; (80043f0 <HAL_RCC_OscConfig+0x4c8>)
 80041f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041fe:	f7fe fec5 	bl	8002f8c <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004206:	f7fe fec1 	bl	8002f8c <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b64      	cmp	r3, #100	; 0x64
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e103      	b.n	8004420 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004218:	4b75      	ldr	r3, [pc, #468]	; (80043f0 <HAL_RCC_OscConfig+0x4c8>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d106      	bne.n	800423a <HAL_RCC_OscConfig+0x312>
 800422c:	4b6f      	ldr	r3, [pc, #444]	; (80043ec <HAL_RCC_OscConfig+0x4c4>)
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	4a6e      	ldr	r2, [pc, #440]	; (80043ec <HAL_RCC_OscConfig+0x4c4>)
 8004232:	f043 0301 	orr.w	r3, r3, #1
 8004236:	6213      	str	r3, [r2, #32]
 8004238:	e02d      	b.n	8004296 <HAL_RCC_OscConfig+0x36e>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10c      	bne.n	800425c <HAL_RCC_OscConfig+0x334>
 8004242:	4b6a      	ldr	r3, [pc, #424]	; (80043ec <HAL_RCC_OscConfig+0x4c4>)
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	4a69      	ldr	r2, [pc, #420]	; (80043ec <HAL_RCC_OscConfig+0x4c4>)
 8004248:	f023 0301 	bic.w	r3, r3, #1
 800424c:	6213      	str	r3, [r2, #32]
 800424e:	4b67      	ldr	r3, [pc, #412]	; (80043ec <HAL_RCC_OscConfig+0x4c4>)
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	4a66      	ldr	r2, [pc, #408]	; (80043ec <HAL_RCC_OscConfig+0x4c4>)
 8004254:	f023 0304 	bic.w	r3, r3, #4
 8004258:	6213      	str	r3, [r2, #32]
 800425a:	e01c      	b.n	8004296 <HAL_RCC_OscConfig+0x36e>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	2b05      	cmp	r3, #5
 8004262:	d10c      	bne.n	800427e <HAL_RCC_OscConfig+0x356>
 8004264:	4b61      	ldr	r3, [pc, #388]	; (80043ec <HAL_RCC_OscConfig+0x4c4>)
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	4a60      	ldr	r2, [pc, #384]	; (80043ec <HAL_RCC_OscConfig+0x4c4>)
 800426a:	f043 0304 	orr.w	r3, r3, #4
 800426e:	6213      	str	r3, [r2, #32]
 8004270:	4b5e      	ldr	r3, [pc, #376]	; (80043ec <HAL_RCC_OscConfig+0x4c4>)
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	4a5d      	ldr	r2, [pc, #372]	; (80043ec <HAL_RCC_OscConfig+0x4c4>)
 8004276:	f043 0301 	orr.w	r3, r3, #1
 800427a:	6213      	str	r3, [r2, #32]
 800427c:	e00b      	b.n	8004296 <HAL_RCC_OscConfig+0x36e>
 800427e:	4b5b      	ldr	r3, [pc, #364]	; (80043ec <HAL_RCC_OscConfig+0x4c4>)
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	4a5a      	ldr	r2, [pc, #360]	; (80043ec <HAL_RCC_OscConfig+0x4c4>)
 8004284:	f023 0301 	bic.w	r3, r3, #1
 8004288:	6213      	str	r3, [r2, #32]
 800428a:	4b58      	ldr	r3, [pc, #352]	; (80043ec <HAL_RCC_OscConfig+0x4c4>)
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	4a57      	ldr	r2, [pc, #348]	; (80043ec <HAL_RCC_OscConfig+0x4c4>)
 8004290:	f023 0304 	bic.w	r3, r3, #4
 8004294:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d015      	beq.n	80042ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800429e:	f7fe fe75 	bl	8002f8c <HAL_GetTick>
 80042a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a4:	e00a      	b.n	80042bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042a6:	f7fe fe71 	bl	8002f8c <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e0b1      	b.n	8004420 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042bc:	4b4b      	ldr	r3, [pc, #300]	; (80043ec <HAL_RCC_OscConfig+0x4c4>)
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0ee      	beq.n	80042a6 <HAL_RCC_OscConfig+0x37e>
 80042c8:	e014      	b.n	80042f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ca:	f7fe fe5f 	bl	8002f8c <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042d0:	e00a      	b.n	80042e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d2:	f7fe fe5b 	bl	8002f8c <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e09b      	b.n	8004420 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042e8:	4b40      	ldr	r3, [pc, #256]	; (80043ec <HAL_RCC_OscConfig+0x4c4>)
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1ee      	bne.n	80042d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042f4:	7dfb      	ldrb	r3, [r7, #23]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d105      	bne.n	8004306 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042fa:	4b3c      	ldr	r3, [pc, #240]	; (80043ec <HAL_RCC_OscConfig+0x4c4>)
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	4a3b      	ldr	r2, [pc, #236]	; (80043ec <HAL_RCC_OscConfig+0x4c4>)
 8004300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004304:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 8087 	beq.w	800441e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004310:	4b36      	ldr	r3, [pc, #216]	; (80043ec <HAL_RCC_OscConfig+0x4c4>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f003 030c 	and.w	r3, r3, #12
 8004318:	2b08      	cmp	r3, #8
 800431a:	d061      	beq.n	80043e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	2b02      	cmp	r3, #2
 8004322:	d146      	bne.n	80043b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004324:	4b33      	ldr	r3, [pc, #204]	; (80043f4 <HAL_RCC_OscConfig+0x4cc>)
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432a:	f7fe fe2f 	bl	8002f8c <HAL_GetTick>
 800432e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004330:	e008      	b.n	8004344 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004332:	f7fe fe2b 	bl	8002f8c <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e06d      	b.n	8004420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004344:	4b29      	ldr	r3, [pc, #164]	; (80043ec <HAL_RCC_OscConfig+0x4c4>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1f0      	bne.n	8004332 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004358:	d108      	bne.n	800436c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800435a:	4b24      	ldr	r3, [pc, #144]	; (80043ec <HAL_RCC_OscConfig+0x4c4>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	4921      	ldr	r1, [pc, #132]	; (80043ec <HAL_RCC_OscConfig+0x4c4>)
 8004368:	4313      	orrs	r3, r2
 800436a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800436c:	4b1f      	ldr	r3, [pc, #124]	; (80043ec <HAL_RCC_OscConfig+0x4c4>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a19      	ldr	r1, [r3, #32]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	430b      	orrs	r3, r1
 800437e:	491b      	ldr	r1, [pc, #108]	; (80043ec <HAL_RCC_OscConfig+0x4c4>)
 8004380:	4313      	orrs	r3, r2
 8004382:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004384:	4b1b      	ldr	r3, [pc, #108]	; (80043f4 <HAL_RCC_OscConfig+0x4cc>)
 8004386:	2201      	movs	r2, #1
 8004388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800438a:	f7fe fdff 	bl	8002f8c <HAL_GetTick>
 800438e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004390:	e008      	b.n	80043a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004392:	f7fe fdfb 	bl	8002f8c <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d901      	bls.n	80043a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e03d      	b.n	8004420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043a4:	4b11      	ldr	r3, [pc, #68]	; (80043ec <HAL_RCC_OscConfig+0x4c4>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d0f0      	beq.n	8004392 <HAL_RCC_OscConfig+0x46a>
 80043b0:	e035      	b.n	800441e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b2:	4b10      	ldr	r3, [pc, #64]	; (80043f4 <HAL_RCC_OscConfig+0x4cc>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b8:	f7fe fde8 	bl	8002f8c <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c0:	f7fe fde4 	bl	8002f8c <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e026      	b.n	8004420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043d2:	4b06      	ldr	r3, [pc, #24]	; (80043ec <HAL_RCC_OscConfig+0x4c4>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1f0      	bne.n	80043c0 <HAL_RCC_OscConfig+0x498>
 80043de:	e01e      	b.n	800441e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	69db      	ldr	r3, [r3, #28]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d107      	bne.n	80043f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e019      	b.n	8004420 <HAL_RCC_OscConfig+0x4f8>
 80043ec:	40021000 	.word	0x40021000
 80043f0:	40007000 	.word	0x40007000
 80043f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043f8:	4b0b      	ldr	r3, [pc, #44]	; (8004428 <HAL_RCC_OscConfig+0x500>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	429a      	cmp	r2, r3
 800440a:	d106      	bne.n	800441a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004416:	429a      	cmp	r2, r3
 8004418:	d001      	beq.n	800441e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3718      	adds	r7, #24
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40021000 	.word	0x40021000

0800442c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e0d0      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004440:	4b6a      	ldr	r3, [pc, #424]	; (80045ec <HAL_RCC_ClockConfig+0x1c0>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d910      	bls.n	8004470 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444e:	4b67      	ldr	r3, [pc, #412]	; (80045ec <HAL_RCC_ClockConfig+0x1c0>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f023 0207 	bic.w	r2, r3, #7
 8004456:	4965      	ldr	r1, [pc, #404]	; (80045ec <HAL_RCC_ClockConfig+0x1c0>)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	4313      	orrs	r3, r2
 800445c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800445e:	4b63      	ldr	r3, [pc, #396]	; (80045ec <HAL_RCC_ClockConfig+0x1c0>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	429a      	cmp	r2, r3
 800446a:	d001      	beq.n	8004470 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e0b8      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d020      	beq.n	80044be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	d005      	beq.n	8004494 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004488:	4b59      	ldr	r3, [pc, #356]	; (80045f0 <HAL_RCC_ClockConfig+0x1c4>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	4a58      	ldr	r2, [pc, #352]	; (80045f0 <HAL_RCC_ClockConfig+0x1c4>)
 800448e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004492:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	2b00      	cmp	r3, #0
 800449e:	d005      	beq.n	80044ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044a0:	4b53      	ldr	r3, [pc, #332]	; (80045f0 <HAL_RCC_ClockConfig+0x1c4>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	4a52      	ldr	r2, [pc, #328]	; (80045f0 <HAL_RCC_ClockConfig+0x1c4>)
 80044a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80044aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ac:	4b50      	ldr	r3, [pc, #320]	; (80045f0 <HAL_RCC_ClockConfig+0x1c4>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	494d      	ldr	r1, [pc, #308]	; (80045f0 <HAL_RCC_ClockConfig+0x1c4>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d040      	beq.n	800454c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d107      	bne.n	80044e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d2:	4b47      	ldr	r3, [pc, #284]	; (80045f0 <HAL_RCC_ClockConfig+0x1c4>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d115      	bne.n	800450a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e07f      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d107      	bne.n	80044fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ea:	4b41      	ldr	r3, [pc, #260]	; (80045f0 <HAL_RCC_ClockConfig+0x1c4>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d109      	bne.n	800450a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e073      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044fa:	4b3d      	ldr	r3, [pc, #244]	; (80045f0 <HAL_RCC_ClockConfig+0x1c4>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e06b      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800450a:	4b39      	ldr	r3, [pc, #228]	; (80045f0 <HAL_RCC_ClockConfig+0x1c4>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f023 0203 	bic.w	r2, r3, #3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	4936      	ldr	r1, [pc, #216]	; (80045f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004518:	4313      	orrs	r3, r2
 800451a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800451c:	f7fe fd36 	bl	8002f8c <HAL_GetTick>
 8004520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004522:	e00a      	b.n	800453a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004524:	f7fe fd32 	bl	8002f8c <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004532:	4293      	cmp	r3, r2
 8004534:	d901      	bls.n	800453a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e053      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453a:	4b2d      	ldr	r3, [pc, #180]	; (80045f0 <HAL_RCC_ClockConfig+0x1c4>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f003 020c 	and.w	r2, r3, #12
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	429a      	cmp	r2, r3
 800454a:	d1eb      	bne.n	8004524 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800454c:	4b27      	ldr	r3, [pc, #156]	; (80045ec <HAL_RCC_ClockConfig+0x1c0>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d210      	bcs.n	800457c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800455a:	4b24      	ldr	r3, [pc, #144]	; (80045ec <HAL_RCC_ClockConfig+0x1c0>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f023 0207 	bic.w	r2, r3, #7
 8004562:	4922      	ldr	r1, [pc, #136]	; (80045ec <HAL_RCC_ClockConfig+0x1c0>)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	4313      	orrs	r3, r2
 8004568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800456a:	4b20      	ldr	r3, [pc, #128]	; (80045ec <HAL_RCC_ClockConfig+0x1c0>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0307 	and.w	r3, r3, #7
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d001      	beq.n	800457c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e032      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	d008      	beq.n	800459a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004588:	4b19      	ldr	r3, [pc, #100]	; (80045f0 <HAL_RCC_ClockConfig+0x1c4>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	4916      	ldr	r1, [pc, #88]	; (80045f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004596:	4313      	orrs	r3, r2
 8004598:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d009      	beq.n	80045ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045a6:	4b12      	ldr	r3, [pc, #72]	; (80045f0 <HAL_RCC_ClockConfig+0x1c4>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	490e      	ldr	r1, [pc, #56]	; (80045f0 <HAL_RCC_ClockConfig+0x1c4>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045ba:	f000 f821 	bl	8004600 <HAL_RCC_GetSysClockFreq>
 80045be:	4602      	mov	r2, r0
 80045c0:	4b0b      	ldr	r3, [pc, #44]	; (80045f0 <HAL_RCC_ClockConfig+0x1c4>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	091b      	lsrs	r3, r3, #4
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	490a      	ldr	r1, [pc, #40]	; (80045f4 <HAL_RCC_ClockConfig+0x1c8>)
 80045cc:	5ccb      	ldrb	r3, [r1, r3]
 80045ce:	fa22 f303 	lsr.w	r3, r2, r3
 80045d2:	4a09      	ldr	r2, [pc, #36]	; (80045f8 <HAL_RCC_ClockConfig+0x1cc>)
 80045d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045d6:	4b09      	ldr	r3, [pc, #36]	; (80045fc <HAL_RCC_ClockConfig+0x1d0>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fe fc94 	bl	8002f08 <HAL_InitTick>

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40022000 	.word	0x40022000
 80045f0:	40021000 	.word	0x40021000
 80045f4:	0800aa7c 	.word	0x0800aa7c
 80045f8:	20000034 	.word	0x20000034
 80045fc:	20000038 	.word	0x20000038

08004600 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004600:	b480      	push	{r7}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	2300      	movs	r3, #0
 800460c:	60bb      	str	r3, [r7, #8]
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]
 8004612:	2300      	movs	r3, #0
 8004614:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004616:	2300      	movs	r3, #0
 8004618:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800461a:	4b1e      	ldr	r3, [pc, #120]	; (8004694 <HAL_RCC_GetSysClockFreq+0x94>)
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f003 030c 	and.w	r3, r3, #12
 8004626:	2b04      	cmp	r3, #4
 8004628:	d002      	beq.n	8004630 <HAL_RCC_GetSysClockFreq+0x30>
 800462a:	2b08      	cmp	r3, #8
 800462c:	d003      	beq.n	8004636 <HAL_RCC_GetSysClockFreq+0x36>
 800462e:	e027      	b.n	8004680 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004630:	4b19      	ldr	r3, [pc, #100]	; (8004698 <HAL_RCC_GetSysClockFreq+0x98>)
 8004632:	613b      	str	r3, [r7, #16]
      break;
 8004634:	e027      	b.n	8004686 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	0c9b      	lsrs	r3, r3, #18
 800463a:	f003 030f 	and.w	r3, r3, #15
 800463e:	4a17      	ldr	r2, [pc, #92]	; (800469c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004640:	5cd3      	ldrb	r3, [r2, r3]
 8004642:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d010      	beq.n	8004670 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800464e:	4b11      	ldr	r3, [pc, #68]	; (8004694 <HAL_RCC_GetSysClockFreq+0x94>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	0c5b      	lsrs	r3, r3, #17
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	4a11      	ldr	r2, [pc, #68]	; (80046a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800465a:	5cd3      	ldrb	r3, [r2, r3]
 800465c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a0d      	ldr	r2, [pc, #52]	; (8004698 <HAL_RCC_GetSysClockFreq+0x98>)
 8004662:	fb03 f202 	mul.w	r2, r3, r2
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	fbb2 f3f3 	udiv	r3, r2, r3
 800466c:	617b      	str	r3, [r7, #20]
 800466e:	e004      	b.n	800467a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a0c      	ldr	r2, [pc, #48]	; (80046a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004674:	fb02 f303 	mul.w	r3, r2, r3
 8004678:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	613b      	str	r3, [r7, #16]
      break;
 800467e:	e002      	b.n	8004686 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004680:	4b05      	ldr	r3, [pc, #20]	; (8004698 <HAL_RCC_GetSysClockFreq+0x98>)
 8004682:	613b      	str	r3, [r7, #16]
      break;
 8004684:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004686:	693b      	ldr	r3, [r7, #16]
}
 8004688:	4618      	mov	r0, r3
 800468a:	371c      	adds	r7, #28
 800468c:	46bd      	mov	sp, r7
 800468e:	bc80      	pop	{r7}
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40021000 	.word	0x40021000
 8004698:	007a1200 	.word	0x007a1200
 800469c:	0800aa94 	.word	0x0800aa94
 80046a0:	0800aaa4 	.word	0x0800aaa4
 80046a4:	003d0900 	.word	0x003d0900

080046a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046ac:	4b02      	ldr	r3, [pc, #8]	; (80046b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80046ae:	681b      	ldr	r3, [r3, #0]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bc80      	pop	{r7}
 80046b6:	4770      	bx	lr
 80046b8:	20000034 	.word	0x20000034

080046bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046c0:	f7ff fff2 	bl	80046a8 <HAL_RCC_GetHCLKFreq>
 80046c4:	4602      	mov	r2, r0
 80046c6:	4b05      	ldr	r3, [pc, #20]	; (80046dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	0a1b      	lsrs	r3, r3, #8
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	4903      	ldr	r1, [pc, #12]	; (80046e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046d2:	5ccb      	ldrb	r3, [r1, r3]
 80046d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046d8:	4618      	mov	r0, r3
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	40021000 	.word	0x40021000
 80046e0:	0800aa8c 	.word	0x0800aa8c

080046e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046e8:	f7ff ffde 	bl	80046a8 <HAL_RCC_GetHCLKFreq>
 80046ec:	4602      	mov	r2, r0
 80046ee:	4b05      	ldr	r3, [pc, #20]	; (8004704 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	0adb      	lsrs	r3, r3, #11
 80046f4:	f003 0307 	and.w	r3, r3, #7
 80046f8:	4903      	ldr	r1, [pc, #12]	; (8004708 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046fa:	5ccb      	ldrb	r3, [r1, r3]
 80046fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004700:	4618      	mov	r0, r3
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40021000 	.word	0x40021000
 8004708:	0800aa8c 	.word	0x0800aa8c

0800470c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004714:	4b0a      	ldr	r3, [pc, #40]	; (8004740 <RCC_Delay+0x34>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a0a      	ldr	r2, [pc, #40]	; (8004744 <RCC_Delay+0x38>)
 800471a:	fba2 2303 	umull	r2, r3, r2, r3
 800471e:	0a5b      	lsrs	r3, r3, #9
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	fb02 f303 	mul.w	r3, r2, r3
 8004726:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004728:	bf00      	nop
  }
  while (Delay --);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	1e5a      	subs	r2, r3, #1
 800472e:	60fa      	str	r2, [r7, #12]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1f9      	bne.n	8004728 <RCC_Delay+0x1c>
}
 8004734:	bf00      	nop
 8004736:	bf00      	nop
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	bc80      	pop	{r7}
 800473e:	4770      	bx	lr
 8004740:	20000034 	.word	0x20000034
 8004744:	10624dd3 	.word	0x10624dd3

08004748 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	613b      	str	r3, [r7, #16]
 8004754:	2300      	movs	r3, #0
 8004756:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d07d      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004764:	2300      	movs	r3, #0
 8004766:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004768:	4b4f      	ldr	r3, [pc, #316]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800476a:	69db      	ldr	r3, [r3, #28]
 800476c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10d      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004774:	4b4c      	ldr	r3, [pc, #304]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004776:	69db      	ldr	r3, [r3, #28]
 8004778:	4a4b      	ldr	r2, [pc, #300]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800477a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800477e:	61d3      	str	r3, [r2, #28]
 8004780:	4b49      	ldr	r3, [pc, #292]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004788:	60bb      	str	r3, [r7, #8]
 800478a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800478c:	2301      	movs	r3, #1
 800478e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004790:	4b46      	ldr	r3, [pc, #280]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004798:	2b00      	cmp	r3, #0
 800479a:	d118      	bne.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800479c:	4b43      	ldr	r3, [pc, #268]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a42      	ldr	r2, [pc, #264]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047a8:	f7fe fbf0 	bl	8002f8c <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ae:	e008      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047b0:	f7fe fbec 	bl	8002f8c <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b64      	cmp	r3, #100	; 0x64
 80047bc:	d901      	bls.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e06d      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c2:	4b3a      	ldr	r3, [pc, #232]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f0      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047ce:	4b36      	ldr	r3, [pc, #216]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d02e      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d027      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047ec:	4b2e      	ldr	r3, [pc, #184]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047f6:	4b2e      	ldr	r3, [pc, #184]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047f8:	2201      	movs	r2, #1
 80047fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047fc:	4b2c      	ldr	r3, [pc, #176]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047fe:	2200      	movs	r2, #0
 8004800:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004802:	4a29      	ldr	r2, [pc, #164]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d014      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004812:	f7fe fbbb 	bl	8002f8c <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004818:	e00a      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800481a:	f7fe fbb7 	bl	8002f8c <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	f241 3288 	movw	r2, #5000	; 0x1388
 8004828:	4293      	cmp	r3, r2
 800482a:	d901      	bls.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e036      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004830:	4b1d      	ldr	r3, [pc, #116]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d0ee      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800483c:	4b1a      	ldr	r3, [pc, #104]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	4917      	ldr	r1, [pc, #92]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800484a:	4313      	orrs	r3, r2
 800484c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800484e:	7dfb      	ldrb	r3, [r7, #23]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d105      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004854:	4b14      	ldr	r3, [pc, #80]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004856:	69db      	ldr	r3, [r3, #28]
 8004858:	4a13      	ldr	r2, [pc, #76]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800485a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800485e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d008      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800486c:	4b0e      	ldr	r3, [pc, #56]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	490b      	ldr	r1, [pc, #44]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800487a:	4313      	orrs	r3, r2
 800487c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0310 	and.w	r3, r3, #16
 8004886:	2b00      	cmp	r3, #0
 8004888:	d008      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800488a:	4b07      	ldr	r3, [pc, #28]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	4904      	ldr	r1, [pc, #16]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004898:	4313      	orrs	r3, r2
 800489a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3718      	adds	r7, #24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	40021000 	.word	0x40021000
 80048ac:	40007000 	.word	0x40007000
 80048b0:	42420440 	.word	0x42420440

080048b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b088      	sub	sp, #32
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80048bc:	2300      	movs	r3, #0
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	2300      	movs	r3, #0
 80048c2:	61fb      	str	r3, [r7, #28]
 80048c4:	2300      	movs	r3, #0
 80048c6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	2300      	movs	r3, #0
 80048ce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b10      	cmp	r3, #16
 80048d4:	d00a      	beq.n	80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b10      	cmp	r3, #16
 80048da:	f200 808a 	bhi.w	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d045      	beq.n	8004970 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d075      	beq.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80048ea:	e082      	b.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80048ec:	4b46      	ldr	r3, [pc, #280]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80048f2:	4b45      	ldr	r3, [pc, #276]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d07b      	beq.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	0c9b      	lsrs	r3, r3, #18
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	4a41      	ldr	r2, [pc, #260]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004908:	5cd3      	ldrb	r3, [r2, r3]
 800490a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d015      	beq.n	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004916:	4b3c      	ldr	r3, [pc, #240]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	0c5b      	lsrs	r3, r3, #17
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	4a3b      	ldr	r2, [pc, #236]	; (8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004922:	5cd3      	ldrb	r3, [r2, r3]
 8004924:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00d      	beq.n	800494c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004930:	4a38      	ldr	r2, [pc, #224]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	fbb2 f2f3 	udiv	r2, r2, r3
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	fb02 f303 	mul.w	r3, r2, r3
 800493e:	61fb      	str	r3, [r7, #28]
 8004940:	e004      	b.n	800494c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	4a34      	ldr	r2, [pc, #208]	; (8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004946:	fb02 f303 	mul.w	r3, r2, r3
 800494a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800494c:	4b2e      	ldr	r3, [pc, #184]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004954:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004958:	d102      	bne.n	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	61bb      	str	r3, [r7, #24]
      break;
 800495e:	e04a      	b.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	4a2d      	ldr	r2, [pc, #180]	; (8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004966:	fba2 2303 	umull	r2, r3, r2, r3
 800496a:	085b      	lsrs	r3, r3, #1
 800496c:	61bb      	str	r3, [r7, #24]
      break;
 800496e:	e042      	b.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004970:	4b25      	ldr	r3, [pc, #148]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800497c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004980:	d108      	bne.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800498c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	e01f      	b.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800499a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800499e:	d109      	bne.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80049a0:	4b19      	ldr	r3, [pc, #100]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80049ac:	f649 4340 	movw	r3, #40000	; 0x9c40
 80049b0:	61bb      	str	r3, [r7, #24]
 80049b2:	e00f      	b.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049be:	d11c      	bne.n	80049fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80049c0:	4b11      	ldr	r3, [pc, #68]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d016      	beq.n	80049fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80049cc:	f24f 4324 	movw	r3, #62500	; 0xf424
 80049d0:	61bb      	str	r3, [r7, #24]
      break;
 80049d2:	e012      	b.n	80049fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80049d4:	e011      	b.n	80049fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80049d6:	f7ff fe85 	bl	80046e4 <HAL_RCC_GetPCLK2Freq>
 80049da:	4602      	mov	r2, r0
 80049dc:	4b0a      	ldr	r3, [pc, #40]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	0b9b      	lsrs	r3, r3, #14
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	3301      	adds	r3, #1
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ee:	61bb      	str	r3, [r7, #24]
      break;
 80049f0:	e004      	b.n	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80049f2:	bf00      	nop
 80049f4:	e002      	b.n	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80049f6:	bf00      	nop
 80049f8:	e000      	b.n	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80049fa:	bf00      	nop
    }
  }
  return (frequency);
 80049fc:	69bb      	ldr	r3, [r7, #24]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3720      	adds	r7, #32
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	0800aaa8 	.word	0x0800aaa8
 8004a10:	0800aab8 	.word	0x0800aab8
 8004a14:	007a1200 	.word	0x007a1200
 8004a18:	003d0900 	.word	0x003d0900
 8004a1c:	aaaaaaab 	.word	0xaaaaaaab

08004a20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e041      	b.n	8004ab6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d106      	bne.n	8004a4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7fe f8c4 	bl	8002bd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	3304      	adds	r3, #4
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	4610      	mov	r0, r2
 8004a60:	f000 fbb0 	bl	80051c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
	...

08004ac0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d001      	beq.n	8004ad8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e032      	b.n	8004b3e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2202      	movs	r2, #2
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a18      	ldr	r2, [pc, #96]	; (8004b48 <HAL_TIM_Base_Start+0x88>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d00e      	beq.n	8004b08 <HAL_TIM_Base_Start+0x48>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af2:	d009      	beq.n	8004b08 <HAL_TIM_Base_Start+0x48>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a14      	ldr	r2, [pc, #80]	; (8004b4c <HAL_TIM_Base_Start+0x8c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d004      	beq.n	8004b08 <HAL_TIM_Base_Start+0x48>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a13      	ldr	r2, [pc, #76]	; (8004b50 <HAL_TIM_Base_Start+0x90>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d111      	bne.n	8004b2c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2b06      	cmp	r3, #6
 8004b18:	d010      	beq.n	8004b3c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f042 0201 	orr.w	r2, r2, #1
 8004b28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b2a:	e007      	b.n	8004b3c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0201 	orr.w	r2, r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bc80      	pop	{r7}
 8004b46:	4770      	bx	lr
 8004b48:	40012c00 	.word	0x40012c00
 8004b4c:	40000400 	.word	0x40000400
 8004b50:	40000800 	.word	0x40000800

08004b54 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e041      	b.n	8004bea <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d106      	bne.n	8004b80 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f839 	bl	8004bf2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	4619      	mov	r1, r3
 8004b92:	4610      	mov	r0, r2
 8004b94:	f000 fb16 	bl	80051c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b083      	sub	sp, #12
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bc80      	pop	{r7}
 8004c02:	4770      	bx	lr

08004c04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e041      	b.n	8004c9a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d106      	bne.n	8004c30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f839 	bl	8004ca2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	3304      	adds	r3, #4
 8004c40:	4619      	mov	r1, r3
 8004c42:	4610      	mov	r0, r2
 8004c44:	f000 fabe 	bl	80051c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d109      	bne.n	8004cd8 <HAL_TIM_PWM_Start+0x24>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	bf14      	ite	ne
 8004cd0:	2301      	movne	r3, #1
 8004cd2:	2300      	moveq	r3, #0
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	e022      	b.n	8004d1e <HAL_TIM_PWM_Start+0x6a>
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	d109      	bne.n	8004cf2 <HAL_TIM_PWM_Start+0x3e>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	bf14      	ite	ne
 8004cea:	2301      	movne	r3, #1
 8004cec:	2300      	moveq	r3, #0
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	e015      	b.n	8004d1e <HAL_TIM_PWM_Start+0x6a>
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d109      	bne.n	8004d0c <HAL_TIM_PWM_Start+0x58>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	bf14      	ite	ne
 8004d04:	2301      	movne	r3, #1
 8004d06:	2300      	moveq	r3, #0
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	e008      	b.n	8004d1e <HAL_TIM_PWM_Start+0x6a>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	bf14      	ite	ne
 8004d18:	2301      	movne	r3, #1
 8004d1a:	2300      	moveq	r3, #0
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e05e      	b.n	8004de4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d104      	bne.n	8004d36 <HAL_TIM_PWM_Start+0x82>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d34:	e013      	b.n	8004d5e <HAL_TIM_PWM_Start+0xaa>
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b04      	cmp	r3, #4
 8004d3a:	d104      	bne.n	8004d46 <HAL_TIM_PWM_Start+0x92>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d44:	e00b      	b.n	8004d5e <HAL_TIM_PWM_Start+0xaa>
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d104      	bne.n	8004d56 <HAL_TIM_PWM_Start+0xa2>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d54:	e003      	b.n	8004d5e <HAL_TIM_PWM_Start+0xaa>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2202      	movs	r2, #2
 8004d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2201      	movs	r2, #1
 8004d64:	6839      	ldr	r1, [r7, #0]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fcac 	bl	80056c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a1e      	ldr	r2, [pc, #120]	; (8004dec <HAL_TIM_PWM_Start+0x138>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d107      	bne.n	8004d86 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a18      	ldr	r2, [pc, #96]	; (8004dec <HAL_TIM_PWM_Start+0x138>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d00e      	beq.n	8004dae <HAL_TIM_PWM_Start+0xfa>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d98:	d009      	beq.n	8004dae <HAL_TIM_PWM_Start+0xfa>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a14      	ldr	r2, [pc, #80]	; (8004df0 <HAL_TIM_PWM_Start+0x13c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d004      	beq.n	8004dae <HAL_TIM_PWM_Start+0xfa>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a12      	ldr	r2, [pc, #72]	; (8004df4 <HAL_TIM_PWM_Start+0x140>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d111      	bne.n	8004dd2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2b06      	cmp	r3, #6
 8004dbe:	d010      	beq.n	8004de2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 0201 	orr.w	r2, r2, #1
 8004dce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd0:	e007      	b.n	8004de2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f042 0201 	orr.w	r2, r2, #1
 8004de0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40012c00 	.word	0x40012c00
 8004df0:	40000400 	.word	0x40000400
 8004df4:	40000800 	.word	0x40000800

08004df8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e04:	2300      	movs	r3, #0
 8004e06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d101      	bne.n	8004e16 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004e12:	2302      	movs	r3, #2
 8004e14:	e048      	b.n	8004ea8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b0c      	cmp	r3, #12
 8004e22:	d839      	bhi.n	8004e98 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004e24:	a201      	add	r2, pc, #4	; (adr r2, 8004e2c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2a:	bf00      	nop
 8004e2c:	08004e61 	.word	0x08004e61
 8004e30:	08004e99 	.word	0x08004e99
 8004e34:	08004e99 	.word	0x08004e99
 8004e38:	08004e99 	.word	0x08004e99
 8004e3c:	08004e6f 	.word	0x08004e6f
 8004e40:	08004e99 	.word	0x08004e99
 8004e44:	08004e99 	.word	0x08004e99
 8004e48:	08004e99 	.word	0x08004e99
 8004e4c:	08004e7d 	.word	0x08004e7d
 8004e50:	08004e99 	.word	0x08004e99
 8004e54:	08004e99 	.word	0x08004e99
 8004e58:	08004e99 	.word	0x08004e99
 8004e5c:	08004e8b 	.word	0x08004e8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68b9      	ldr	r1, [r7, #8]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 fa0e 	bl	8005288 <TIM_OC1_SetConfig>
      break;
 8004e6c:	e017      	b.n	8004e9e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68b9      	ldr	r1, [r7, #8]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f000 fa6d 	bl	8005354 <TIM_OC2_SetConfig>
      break;
 8004e7a:	e010      	b.n	8004e9e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68b9      	ldr	r1, [r7, #8]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 fad0 	bl	8005428 <TIM_OC3_SetConfig>
      break;
 8004e88:	e009      	b.n	8004e9e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68b9      	ldr	r1, [r7, #8]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f000 fb33 	bl	80054fc <TIM_OC4_SetConfig>
      break;
 8004e96:	e002      	b.n	8004e9e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d101      	bne.n	8004ece <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004eca:	2302      	movs	r3, #2
 8004ecc:	e0ae      	b.n	800502c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b0c      	cmp	r3, #12
 8004eda:	f200 809f 	bhi.w	800501c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ede:	a201      	add	r2, pc, #4	; (adr r2, 8004ee4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee4:	08004f19 	.word	0x08004f19
 8004ee8:	0800501d 	.word	0x0800501d
 8004eec:	0800501d 	.word	0x0800501d
 8004ef0:	0800501d 	.word	0x0800501d
 8004ef4:	08004f59 	.word	0x08004f59
 8004ef8:	0800501d 	.word	0x0800501d
 8004efc:	0800501d 	.word	0x0800501d
 8004f00:	0800501d 	.word	0x0800501d
 8004f04:	08004f9b 	.word	0x08004f9b
 8004f08:	0800501d 	.word	0x0800501d
 8004f0c:	0800501d 	.word	0x0800501d
 8004f10:	0800501d 	.word	0x0800501d
 8004f14:	08004fdb 	.word	0x08004fdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68b9      	ldr	r1, [r7, #8]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 f9b2 	bl	8005288 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	699a      	ldr	r2, [r3, #24]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0208 	orr.w	r2, r2, #8
 8004f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	699a      	ldr	r2, [r3, #24]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 0204 	bic.w	r2, r2, #4
 8004f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6999      	ldr	r1, [r3, #24]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	691a      	ldr	r2, [r3, #16]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	619a      	str	r2, [r3, #24]
      break;
 8004f56:	e064      	b.n	8005022 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68b9      	ldr	r1, [r7, #8]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 f9f8 	bl	8005354 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699a      	ldr	r2, [r3, #24]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699a      	ldr	r2, [r3, #24]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6999      	ldr	r1, [r3, #24]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	021a      	lsls	r2, r3, #8
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	619a      	str	r2, [r3, #24]
      break;
 8004f98:	e043      	b.n	8005022 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68b9      	ldr	r1, [r7, #8]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 fa41 	bl	8005428 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69da      	ldr	r2, [r3, #28]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0208 	orr.w	r2, r2, #8
 8004fb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	69da      	ldr	r2, [r3, #28]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0204 	bic.w	r2, r2, #4
 8004fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69d9      	ldr	r1, [r3, #28]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	691a      	ldr	r2, [r3, #16]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	61da      	str	r2, [r3, #28]
      break;
 8004fd8:	e023      	b.n	8005022 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68b9      	ldr	r1, [r7, #8]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 fa8b 	bl	80054fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	69da      	ldr	r2, [r3, #28]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ff4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	69da      	ldr	r2, [r3, #28]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005004:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	69d9      	ldr	r1, [r3, #28]
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	021a      	lsls	r2, r3, #8
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	61da      	str	r2, [r3, #28]
      break;
 800501a:	e002      	b.n	8005022 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	75fb      	strb	r3, [r7, #23]
      break;
 8005020:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800502a:	7dfb      	ldrb	r3, [r7, #23]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3718      	adds	r7, #24
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800503e:	2300      	movs	r3, #0
 8005040:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005048:	2b01      	cmp	r3, #1
 800504a:	d101      	bne.n	8005050 <HAL_TIM_ConfigClockSource+0x1c>
 800504c:	2302      	movs	r3, #2
 800504e:	e0b4      	b.n	80051ba <HAL_TIM_ConfigClockSource+0x186>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800506e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005076:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005088:	d03e      	beq.n	8005108 <HAL_TIM_ConfigClockSource+0xd4>
 800508a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800508e:	f200 8087 	bhi.w	80051a0 <HAL_TIM_ConfigClockSource+0x16c>
 8005092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005096:	f000 8086 	beq.w	80051a6 <HAL_TIM_ConfigClockSource+0x172>
 800509a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800509e:	d87f      	bhi.n	80051a0 <HAL_TIM_ConfigClockSource+0x16c>
 80050a0:	2b70      	cmp	r3, #112	; 0x70
 80050a2:	d01a      	beq.n	80050da <HAL_TIM_ConfigClockSource+0xa6>
 80050a4:	2b70      	cmp	r3, #112	; 0x70
 80050a6:	d87b      	bhi.n	80051a0 <HAL_TIM_ConfigClockSource+0x16c>
 80050a8:	2b60      	cmp	r3, #96	; 0x60
 80050aa:	d050      	beq.n	800514e <HAL_TIM_ConfigClockSource+0x11a>
 80050ac:	2b60      	cmp	r3, #96	; 0x60
 80050ae:	d877      	bhi.n	80051a0 <HAL_TIM_ConfigClockSource+0x16c>
 80050b0:	2b50      	cmp	r3, #80	; 0x50
 80050b2:	d03c      	beq.n	800512e <HAL_TIM_ConfigClockSource+0xfa>
 80050b4:	2b50      	cmp	r3, #80	; 0x50
 80050b6:	d873      	bhi.n	80051a0 <HAL_TIM_ConfigClockSource+0x16c>
 80050b8:	2b40      	cmp	r3, #64	; 0x40
 80050ba:	d058      	beq.n	800516e <HAL_TIM_ConfigClockSource+0x13a>
 80050bc:	2b40      	cmp	r3, #64	; 0x40
 80050be:	d86f      	bhi.n	80051a0 <HAL_TIM_ConfigClockSource+0x16c>
 80050c0:	2b30      	cmp	r3, #48	; 0x30
 80050c2:	d064      	beq.n	800518e <HAL_TIM_ConfigClockSource+0x15a>
 80050c4:	2b30      	cmp	r3, #48	; 0x30
 80050c6:	d86b      	bhi.n	80051a0 <HAL_TIM_ConfigClockSource+0x16c>
 80050c8:	2b20      	cmp	r3, #32
 80050ca:	d060      	beq.n	800518e <HAL_TIM_ConfigClockSource+0x15a>
 80050cc:	2b20      	cmp	r3, #32
 80050ce:	d867      	bhi.n	80051a0 <HAL_TIM_ConfigClockSource+0x16c>
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d05c      	beq.n	800518e <HAL_TIM_ConfigClockSource+0x15a>
 80050d4:	2b10      	cmp	r3, #16
 80050d6:	d05a      	beq.n	800518e <HAL_TIM_ConfigClockSource+0x15a>
 80050d8:	e062      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6818      	ldr	r0, [r3, #0]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	6899      	ldr	r1, [r3, #8]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f000 facc 	bl	8005686 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	609a      	str	r2, [r3, #8]
      break;
 8005106:	e04f      	b.n	80051a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6818      	ldr	r0, [r3, #0]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	6899      	ldr	r1, [r3, #8]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f000 fab5 	bl	8005686 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689a      	ldr	r2, [r3, #8]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800512a:	609a      	str	r2, [r3, #8]
      break;
 800512c:	e03c      	b.n	80051a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6818      	ldr	r0, [r3, #0]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	6859      	ldr	r1, [r3, #4]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	461a      	mov	r2, r3
 800513c:	f000 fa2c 	bl	8005598 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2150      	movs	r1, #80	; 0x50
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fa83 	bl	8005652 <TIM_ITRx_SetConfig>
      break;
 800514c:	e02c      	b.n	80051a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6818      	ldr	r0, [r3, #0]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	6859      	ldr	r1, [r3, #4]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	461a      	mov	r2, r3
 800515c:	f000 fa4a 	bl	80055f4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2160      	movs	r1, #96	; 0x60
 8005166:	4618      	mov	r0, r3
 8005168:	f000 fa73 	bl	8005652 <TIM_ITRx_SetConfig>
      break;
 800516c:	e01c      	b.n	80051a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6818      	ldr	r0, [r3, #0]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	6859      	ldr	r1, [r3, #4]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	461a      	mov	r2, r3
 800517c:	f000 fa0c 	bl	8005598 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2140      	movs	r1, #64	; 0x40
 8005186:	4618      	mov	r0, r3
 8005188:	f000 fa63 	bl	8005652 <TIM_ITRx_SetConfig>
      break;
 800518c:	e00c      	b.n	80051a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4619      	mov	r1, r3
 8005198:	4610      	mov	r0, r2
 800519a:	f000 fa5a 	bl	8005652 <TIM_ITRx_SetConfig>
      break;
 800519e:	e003      	b.n	80051a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	73fb      	strb	r3, [r7, #15]
      break;
 80051a4:	e000      	b.n	80051a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
	...

080051c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a29      	ldr	r2, [pc, #164]	; (800527c <TIM_Base_SetConfig+0xb8>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00b      	beq.n	80051f4 <TIM_Base_SetConfig+0x30>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e2:	d007      	beq.n	80051f4 <TIM_Base_SetConfig+0x30>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a26      	ldr	r2, [pc, #152]	; (8005280 <TIM_Base_SetConfig+0xbc>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d003      	beq.n	80051f4 <TIM_Base_SetConfig+0x30>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a25      	ldr	r2, [pc, #148]	; (8005284 <TIM_Base_SetConfig+0xc0>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d108      	bne.n	8005206 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a1c      	ldr	r2, [pc, #112]	; (800527c <TIM_Base_SetConfig+0xb8>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d00b      	beq.n	8005226 <TIM_Base_SetConfig+0x62>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005214:	d007      	beq.n	8005226 <TIM_Base_SetConfig+0x62>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a19      	ldr	r2, [pc, #100]	; (8005280 <TIM_Base_SetConfig+0xbc>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d003      	beq.n	8005226 <TIM_Base_SetConfig+0x62>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a18      	ldr	r2, [pc, #96]	; (8005284 <TIM_Base_SetConfig+0xc0>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d108      	bne.n	8005238 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800522c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	4313      	orrs	r3, r2
 8005236:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	4313      	orrs	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	689a      	ldr	r2, [r3, #8]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a07      	ldr	r2, [pc, #28]	; (800527c <TIM_Base_SetConfig+0xb8>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d103      	bne.n	800526c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	615a      	str	r2, [r3, #20]
}
 8005272:	bf00      	nop
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	bc80      	pop	{r7}
 800527a:	4770      	bx	lr
 800527c:	40012c00 	.word	0x40012c00
 8005280:	40000400 	.word	0x40000400
 8005284:	40000800 	.word	0x40000800

08005288 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	f023 0201 	bic.w	r2, r3, #1
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 0303 	bic.w	r3, r3, #3
 80052be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f023 0302 	bic.w	r3, r3, #2
 80052d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	4313      	orrs	r3, r2
 80052da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a1c      	ldr	r2, [pc, #112]	; (8005350 <TIM_OC1_SetConfig+0xc8>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d10c      	bne.n	80052fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f023 0308 	bic.w	r3, r3, #8
 80052ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f023 0304 	bic.w	r3, r3, #4
 80052fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a13      	ldr	r2, [pc, #76]	; (8005350 <TIM_OC1_SetConfig+0xc8>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d111      	bne.n	800532a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800530c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	4313      	orrs	r3, r2
 800531e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	4313      	orrs	r3, r2
 8005328:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	621a      	str	r2, [r3, #32]
}
 8005344:	bf00      	nop
 8005346:	371c      	adds	r7, #28
 8005348:	46bd      	mov	sp, r7
 800534a:	bc80      	pop	{r7}
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	40012c00 	.word	0x40012c00

08005354 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005354:	b480      	push	{r7}
 8005356:	b087      	sub	sp, #28
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	f023 0210 	bic.w	r2, r3, #16
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800538a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	021b      	lsls	r3, r3, #8
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4313      	orrs	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f023 0320 	bic.w	r3, r3, #32
 800539e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	011b      	lsls	r3, r3, #4
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a1d      	ldr	r2, [pc, #116]	; (8005424 <TIM_OC2_SetConfig+0xd0>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d10d      	bne.n	80053d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	011b      	lsls	r3, r3, #4
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a14      	ldr	r2, [pc, #80]	; (8005424 <TIM_OC2_SetConfig+0xd0>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d113      	bne.n	8005400 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	621a      	str	r2, [r3, #32]
}
 800541a:	bf00      	nop
 800541c:	371c      	adds	r7, #28
 800541e:	46bd      	mov	sp, r7
 8005420:	bc80      	pop	{r7}
 8005422:	4770      	bx	lr
 8005424:	40012c00 	.word	0x40012c00

08005428 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f023 0303 	bic.w	r3, r3, #3
 800545e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	4313      	orrs	r3, r2
 8005468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005470:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	021b      	lsls	r3, r3, #8
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	4313      	orrs	r3, r2
 800547c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a1d      	ldr	r2, [pc, #116]	; (80054f8 <TIM_OC3_SetConfig+0xd0>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d10d      	bne.n	80054a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800548c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	021b      	lsls	r3, r3, #8
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	4313      	orrs	r3, r2
 8005498:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a14      	ldr	r2, [pc, #80]	; (80054f8 <TIM_OC3_SetConfig+0xd0>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d113      	bne.n	80054d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	011b      	lsls	r3, r3, #4
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	621a      	str	r2, [r3, #32]
}
 80054ec:	bf00      	nop
 80054ee:	371c      	adds	r7, #28
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bc80      	pop	{r7}
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	40012c00 	.word	0x40012c00

080054fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800552a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	021b      	lsls	r3, r3, #8
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	4313      	orrs	r3, r2
 800553e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005546:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	031b      	lsls	r3, r3, #12
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	4313      	orrs	r3, r2
 8005552:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a0f      	ldr	r2, [pc, #60]	; (8005594 <TIM_OC4_SetConfig+0x98>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d109      	bne.n	8005570 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005562:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	695b      	ldr	r3, [r3, #20]
 8005568:	019b      	lsls	r3, r3, #6
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	4313      	orrs	r3, r2
 800556e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	621a      	str	r2, [r3, #32]
}
 800558a:	bf00      	nop
 800558c:	371c      	adds	r7, #28
 800558e:	46bd      	mov	sp, r7
 8005590:	bc80      	pop	{r7}
 8005592:	4770      	bx	lr
 8005594:	40012c00 	.word	0x40012c00

08005598 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	f023 0201 	bic.w	r2, r3, #1
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	011b      	lsls	r3, r3, #4
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f023 030a 	bic.w	r3, r3, #10
 80055d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	4313      	orrs	r3, r2
 80055dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	621a      	str	r2, [r3, #32]
}
 80055ea:	bf00      	nop
 80055ec:	371c      	adds	r7, #28
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bc80      	pop	{r7}
 80055f2:	4770      	bx	lr

080055f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b087      	sub	sp, #28
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	f023 0210 	bic.w	r2, r3, #16
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800561e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	031b      	lsls	r3, r3, #12
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	4313      	orrs	r3, r2
 8005628:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005630:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	4313      	orrs	r3, r2
 800563a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	621a      	str	r2, [r3, #32]
}
 8005648:	bf00      	nop
 800564a:	371c      	adds	r7, #28
 800564c:	46bd      	mov	sp, r7
 800564e:	bc80      	pop	{r7}
 8005650:	4770      	bx	lr

08005652 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005652:	b480      	push	{r7}
 8005654:	b085      	sub	sp, #20
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005668:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4313      	orrs	r3, r2
 8005670:	f043 0307 	orr.w	r3, r3, #7
 8005674:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	609a      	str	r2, [r3, #8]
}
 800567c:	bf00      	nop
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	bc80      	pop	{r7}
 8005684:	4770      	bx	lr

08005686 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005686:	b480      	push	{r7}
 8005688:	b087      	sub	sp, #28
 800568a:	af00      	add	r7, sp, #0
 800568c:	60f8      	str	r0, [r7, #12]
 800568e:	60b9      	str	r1, [r7, #8]
 8005690:	607a      	str	r2, [r7, #4]
 8005692:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	021a      	lsls	r2, r3, #8
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	431a      	orrs	r2, r3
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	609a      	str	r2, [r3, #8]
}
 80056ba:	bf00      	nop
 80056bc:	371c      	adds	r7, #28
 80056be:	46bd      	mov	sp, r7
 80056c0:	bc80      	pop	{r7}
 80056c2:	4770      	bx	lr

080056c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f003 031f 	and.w	r3, r3, #31
 80056d6:	2201      	movs	r2, #1
 80056d8:	fa02 f303 	lsl.w	r3, r2, r3
 80056dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6a1a      	ldr	r2, [r3, #32]
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	43db      	mvns	r3, r3
 80056e6:	401a      	ands	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6a1a      	ldr	r2, [r3, #32]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	f003 031f 	and.w	r3, r3, #31
 80056f6:	6879      	ldr	r1, [r7, #4]
 80056f8:	fa01 f303 	lsl.w	r3, r1, r3
 80056fc:	431a      	orrs	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	621a      	str	r2, [r3, #32]
}
 8005702:	bf00      	nop
 8005704:	371c      	adds	r7, #28
 8005706:	46bd      	mov	sp, r7
 8005708:	bc80      	pop	{r7}
 800570a:	4770      	bx	lr

0800570c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800571c:	2b01      	cmp	r3, #1
 800571e:	d101      	bne.n	8005724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005720:	2302      	movs	r3, #2
 8005722:	e046      	b.n	80057b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	4313      	orrs	r3, r2
 8005754:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a16      	ldr	r2, [pc, #88]	; (80057bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d00e      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005770:	d009      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a12      	ldr	r2, [pc, #72]	; (80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d004      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a10      	ldr	r2, [pc, #64]	; (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d10c      	bne.n	80057a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800578c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	4313      	orrs	r3, r2
 8005796:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bc80      	pop	{r7}
 80057ba:	4770      	bx	lr
 80057bc:	40012c00 	.word	0x40012c00
 80057c0:	40000400 	.word	0x40000400
 80057c4:	40000800 	.word	0x40000800

080057c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e042      	b.n	8005860 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d106      	bne.n	80057f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7fd fabe 	bl	8002d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2224      	movs	r2, #36	; 0x24
 80057f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68da      	ldr	r2, [r3, #12]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800580a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 fdc5 	bl	800639c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	691a      	ldr	r2, [r3, #16]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005820:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	695a      	ldr	r2, [r3, #20]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005830:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005840:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2220      	movs	r2, #32
 800584c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b08a      	sub	sp, #40	; 0x28
 800586c:	af02      	add	r7, sp, #8
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	603b      	str	r3, [r7, #0]
 8005874:	4613      	mov	r3, r2
 8005876:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b20      	cmp	r3, #32
 8005886:	d16d      	bne.n	8005964 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d002      	beq.n	8005894 <HAL_UART_Transmit+0x2c>
 800588e:	88fb      	ldrh	r3, [r7, #6]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d101      	bne.n	8005898 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e066      	b.n	8005966 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2221      	movs	r2, #33	; 0x21
 80058a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058a6:	f7fd fb71 	bl	8002f8c <HAL_GetTick>
 80058aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	88fa      	ldrh	r2, [r7, #6]
 80058b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	88fa      	ldrh	r2, [r7, #6]
 80058b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c0:	d108      	bne.n	80058d4 <HAL_UART_Transmit+0x6c>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d104      	bne.n	80058d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80058ca:	2300      	movs	r3, #0
 80058cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	61bb      	str	r3, [r7, #24]
 80058d2:	e003      	b.n	80058dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058d8:	2300      	movs	r3, #0
 80058da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058dc:	e02a      	b.n	8005934 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2200      	movs	r2, #0
 80058e6:	2180      	movs	r1, #128	; 0x80
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 fb14 	bl	8005f16 <UART_WaitOnFlagUntilTimeout>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e036      	b.n	8005966 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10b      	bne.n	8005916 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	461a      	mov	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800590c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	3302      	adds	r3, #2
 8005912:	61bb      	str	r3, [r7, #24]
 8005914:	e007      	b.n	8005926 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	781a      	ldrb	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	3301      	adds	r3, #1
 8005924:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800592a:	b29b      	uxth	r3, r3
 800592c:	3b01      	subs	r3, #1
 800592e:	b29a      	uxth	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005938:	b29b      	uxth	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1cf      	bne.n	80058de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2200      	movs	r2, #0
 8005946:	2140      	movs	r1, #64	; 0x40
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 fae4 	bl	8005f16 <UART_WaitOnFlagUntilTimeout>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e006      	b.n	8005966 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2220      	movs	r2, #32
 800595c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005960:	2300      	movs	r3, #0
 8005962:	e000      	b.n	8005966 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005964:	2302      	movs	r3, #2
  }
}
 8005966:	4618      	mov	r0, r3
 8005968:	3720      	adds	r7, #32
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b084      	sub	sp, #16
 8005972:	af00      	add	r7, sp, #0
 8005974:	60f8      	str	r0, [r7, #12]
 8005976:	60b9      	str	r1, [r7, #8]
 8005978:	4613      	mov	r3, r2
 800597a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b20      	cmp	r3, #32
 8005986:	d112      	bne.n	80059ae <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <HAL_UART_Receive_IT+0x26>
 800598e:	88fb      	ldrh	r3, [r7, #6]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e00b      	b.n	80059b0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800599e:	88fb      	ldrh	r3, [r7, #6]
 80059a0:	461a      	mov	r2, r3
 80059a2:	68b9      	ldr	r1, [r7, #8]
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f000 fb24 	bl	8005ff2 <UART_Start_Receive_IT>
 80059aa:	4603      	mov	r3, r0
 80059ac:	e000      	b.n	80059b0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80059ae:	2302      	movs	r3, #2
  }
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b0ba      	sub	sp, #232	; 0xe8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80059de:	2300      	movs	r3, #0
 80059e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80059ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80059f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10f      	bne.n	8005a1e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d009      	beq.n	8005a1e <HAL_UART_IRQHandler+0x66>
 8005a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a0e:	f003 0320 	and.w	r3, r3, #32
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fc01 	bl	800621e <UART_Receive_IT>
      return;
 8005a1c:	e25b      	b.n	8005ed6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 80de 	beq.w	8005be4 <HAL_UART_IRQHandler+0x22c>
 8005a28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d106      	bne.n	8005a42 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a38:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 80d1 	beq.w	8005be4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00b      	beq.n	8005a66 <HAL_UART_IRQHandler+0xae>
 8005a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d005      	beq.n	8005a66 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5e:	f043 0201 	orr.w	r2, r3, #1
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a6a:	f003 0304 	and.w	r3, r3, #4
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00b      	beq.n	8005a8a <HAL_UART_IRQHandler+0xd2>
 8005a72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d005      	beq.n	8005a8a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a82:	f043 0202 	orr.w	r2, r3, #2
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00b      	beq.n	8005aae <HAL_UART_IRQHandler+0xf6>
 8005a96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d005      	beq.n	8005aae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa6:	f043 0204 	orr.w	r2, r3, #4
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab2:	f003 0308 	and.w	r3, r3, #8
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d011      	beq.n	8005ade <HAL_UART_IRQHandler+0x126>
 8005aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005abe:	f003 0320 	and.w	r3, r3, #32
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d105      	bne.n	8005ad2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d005      	beq.n	8005ade <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad6:	f043 0208 	orr.w	r2, r3, #8
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f000 81f2 	beq.w	8005ecc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aec:	f003 0320 	and.w	r3, r3, #32
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d008      	beq.n	8005b06 <HAL_UART_IRQHandler+0x14e>
 8005af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005af8:	f003 0320 	and.w	r3, r3, #32
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 fb8c 	bl	800621e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	bf14      	ite	ne
 8005b14:	2301      	movne	r3, #1
 8005b16:	2300      	moveq	r3, #0
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b22:	f003 0308 	and.w	r3, r3, #8
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d103      	bne.n	8005b32 <HAL_UART_IRQHandler+0x17a>
 8005b2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d04f      	beq.n	8005bd2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fa96 	bl	8006064 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d041      	beq.n	8005bca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3314      	adds	r3, #20
 8005b4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b54:	e853 3f00 	ldrex	r3, [r3]
 8005b58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3314      	adds	r3, #20
 8005b6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b82:	e841 2300 	strex	r3, r2, [r1]
 8005b86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1d9      	bne.n	8005b46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d013      	beq.n	8005bc2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b9e:	4a7e      	ldr	r2, [pc, #504]	; (8005d98 <HAL_UART_IRQHandler+0x3e0>)
 8005ba0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fd ff92 	bl	8003ad0 <HAL_DMA_Abort_IT>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d016      	beq.n	8005be0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005bbc:	4610      	mov	r0, r2
 8005bbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bc0:	e00e      	b.n	8005be0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f993 	bl	8005eee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bc8:	e00a      	b.n	8005be0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f98f 	bl	8005eee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd0:	e006      	b.n	8005be0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f98b 	bl	8005eee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005bde:	e175      	b.n	8005ecc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005be0:	bf00      	nop
    return;
 8005be2:	e173      	b.n	8005ecc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	f040 814f 	bne.w	8005e8c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf2:	f003 0310 	and.w	r3, r3, #16
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 8148 	beq.w	8005e8c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c00:	f003 0310 	and.w	r3, r3, #16
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 8141 	beq.w	8005e8c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60bb      	str	r3, [r7, #8]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	60bb      	str	r3, [r7, #8]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	60bb      	str	r3, [r7, #8]
 8005c1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f000 80b6 	beq.w	8005d9c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f000 8145 	beq.w	8005ed0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	f080 813e 	bcs.w	8005ed0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c5a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	2b20      	cmp	r3, #32
 8005c64:	f000 8088 	beq.w	8005d78 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	330c      	adds	r3, #12
 8005c6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c76:	e853 3f00 	ldrex	r3, [r3]
 8005c7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	330c      	adds	r3, #12
 8005c90:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005c94:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005ca0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ca4:	e841 2300 	strex	r3, r2, [r1]
 8005ca8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005cac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1d9      	bne.n	8005c68 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	3314      	adds	r3, #20
 8005cba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cbe:	e853 3f00 	ldrex	r3, [r3]
 8005cc2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005cc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cc6:	f023 0301 	bic.w	r3, r3, #1
 8005cca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	3314      	adds	r3, #20
 8005cd4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005cd8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005cdc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cde:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ce0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005ce4:	e841 2300 	strex	r3, r2, [r1]
 8005ce8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005cea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1e1      	bne.n	8005cb4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3314      	adds	r3, #20
 8005cf6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cfa:	e853 3f00 	ldrex	r3, [r3]
 8005cfe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005d00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	3314      	adds	r3, #20
 8005d10:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005d14:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d18:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d1a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d1c:	e841 2300 	strex	r3, r2, [r1]
 8005d20:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1e3      	bne.n	8005cf0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	330c      	adds	r3, #12
 8005d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d40:	e853 3f00 	ldrex	r3, [r3]
 8005d44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d48:	f023 0310 	bic.w	r3, r3, #16
 8005d4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	330c      	adds	r3, #12
 8005d56:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005d5a:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d5c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d62:	e841 2300 	strex	r3, r2, [r1]
 8005d66:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1e3      	bne.n	8005d36 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7fd fe71 	bl	8003a5a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f8b6 	bl	8005f00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d94:	e09c      	b.n	8005ed0 <HAL_UART_IRQHandler+0x518>
 8005d96:	bf00      	nop
 8005d98:	08006129 	.word	0x08006129
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f000 808e 	beq.w	8005ed4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005db8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f000 8089 	beq.w	8005ed4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	330c      	adds	r3, #12
 8005dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dcc:	e853 3f00 	ldrex	r3, [r3]
 8005dd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005dd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	330c      	adds	r3, #12
 8005de2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005de6:	647a      	str	r2, [r7, #68]	; 0x44
 8005de8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dee:	e841 2300 	strex	r3, r2, [r1]
 8005df2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1e3      	bne.n	8005dc2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3314      	adds	r3, #20
 8005e00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	e853 3f00 	ldrex	r3, [r3]
 8005e08:	623b      	str	r3, [r7, #32]
   return(result);
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	f023 0301 	bic.w	r3, r3, #1
 8005e10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	3314      	adds	r3, #20
 8005e1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e1e:	633a      	str	r2, [r7, #48]	; 0x30
 8005e20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e26:	e841 2300 	strex	r3, r2, [r1]
 8005e2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1e3      	bne.n	8005dfa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2220      	movs	r2, #32
 8005e36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	330c      	adds	r3, #12
 8005e46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	e853 3f00 	ldrex	r3, [r3]
 8005e4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f023 0310 	bic.w	r3, r3, #16
 8005e56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	330c      	adds	r3, #12
 8005e60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005e64:	61fa      	str	r2, [r7, #28]
 8005e66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e68:	69b9      	ldr	r1, [r7, #24]
 8005e6a:	69fa      	ldr	r2, [r7, #28]
 8005e6c:	e841 2300 	strex	r3, r2, [r1]
 8005e70:	617b      	str	r3, [r7, #20]
   return(result);
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1e3      	bne.n	8005e40 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e82:	4619      	mov	r1, r3
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f83b 	bl	8005f00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e8a:	e023      	b.n	8005ed4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d009      	beq.n	8005eac <HAL_UART_IRQHandler+0x4f4>
 8005e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d003      	beq.n	8005eac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f953 	bl	8006150 <UART_Transmit_IT>
    return;
 8005eaa:	e014      	b.n	8005ed6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00e      	beq.n	8005ed6 <HAL_UART_IRQHandler+0x51e>
 8005eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d008      	beq.n	8005ed6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f992 	bl	80061ee <UART_EndTransmit_IT>
    return;
 8005eca:	e004      	b.n	8005ed6 <HAL_UART_IRQHandler+0x51e>
    return;
 8005ecc:	bf00      	nop
 8005ece:	e002      	b.n	8005ed6 <HAL_UART_IRQHandler+0x51e>
      return;
 8005ed0:	bf00      	nop
 8005ed2:	e000      	b.n	8005ed6 <HAL_UART_IRQHandler+0x51e>
      return;
 8005ed4:	bf00      	nop
  }
}
 8005ed6:	37e8      	adds	r7, #232	; 0xe8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bc80      	pop	{r7}
 8005eec:	4770      	bx	lr

08005eee <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bc80      	pop	{r7}
 8005efe:	4770      	bx	lr

08005f00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	460b      	mov	r3, r1
 8005f0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bc80      	pop	{r7}
 8005f14:	4770      	bx	lr

08005f16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b090      	sub	sp, #64	; 0x40
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	60f8      	str	r0, [r7, #12]
 8005f1e:	60b9      	str	r1, [r7, #8]
 8005f20:	603b      	str	r3, [r7, #0]
 8005f22:	4613      	mov	r3, r2
 8005f24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f26:	e050      	b.n	8005fca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2e:	d04c      	beq.n	8005fca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d007      	beq.n	8005f46 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f36:	f7fd f829 	bl	8002f8c <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d241      	bcs.n	8005fca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	330c      	adds	r3, #12
 8005f4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f50:	e853 3f00 	ldrex	r3, [r3]
 8005f54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	330c      	adds	r3, #12
 8005f64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f66:	637a      	str	r2, [r7, #52]	; 0x34
 8005f68:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f6e:	e841 2300 	strex	r3, r2, [r1]
 8005f72:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1e5      	bne.n	8005f46 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	3314      	adds	r3, #20
 8005f80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	e853 3f00 	ldrex	r3, [r3]
 8005f88:	613b      	str	r3, [r7, #16]
   return(result);
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f023 0301 	bic.w	r3, r3, #1
 8005f90:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	3314      	adds	r3, #20
 8005f98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f9a:	623a      	str	r2, [r7, #32]
 8005f9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9e:	69f9      	ldr	r1, [r7, #28]
 8005fa0:	6a3a      	ldr	r2, [r7, #32]
 8005fa2:	e841 2300 	strex	r3, r2, [r1]
 8005fa6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1e5      	bne.n	8005f7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2220      	movs	r2, #32
 8005fba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e00f      	b.n	8005fea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	bf0c      	ite	eq
 8005fda:	2301      	moveq	r3, #1
 8005fdc:	2300      	movne	r3, #0
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	79fb      	ldrb	r3, [r7, #7]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d09f      	beq.n	8005f28 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3740      	adds	r7, #64	; 0x40
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b085      	sub	sp, #20
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	60f8      	str	r0, [r7, #12]
 8005ffa:	60b9      	str	r1, [r7, #8]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	88fa      	ldrh	r2, [r7, #6]
 800600a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	88fa      	ldrh	r2, [r7, #6]
 8006010:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2222      	movs	r2, #34	; 0x22
 800601c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d007      	beq.n	8006038 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006036:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	695a      	ldr	r2, [r3, #20]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f042 0201 	orr.w	r2, r2, #1
 8006046:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68da      	ldr	r2, [r3, #12]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f042 0220 	orr.w	r2, r2, #32
 8006056:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	bc80      	pop	{r7}
 8006062:	4770      	bx	lr

08006064 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006064:	b480      	push	{r7}
 8006066:	b095      	sub	sp, #84	; 0x54
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	330c      	adds	r3, #12
 8006072:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006076:	e853 3f00 	ldrex	r3, [r3]
 800607a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	330c      	adds	r3, #12
 800608a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800608c:	643a      	str	r2, [r7, #64]	; 0x40
 800608e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006090:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006092:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006094:	e841 2300 	strex	r3, r2, [r1]
 8006098:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1e5      	bne.n	800606c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3314      	adds	r3, #20
 80060a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	e853 3f00 	ldrex	r3, [r3]
 80060ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	f023 0301 	bic.w	r3, r3, #1
 80060b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	3314      	adds	r3, #20
 80060be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060c8:	e841 2300 	strex	r3, r2, [r1]
 80060cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1e5      	bne.n	80060a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d119      	bne.n	8006110 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	330c      	adds	r3, #12
 80060e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	e853 3f00 	ldrex	r3, [r3]
 80060ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f023 0310 	bic.w	r3, r3, #16
 80060f2:	647b      	str	r3, [r7, #68]	; 0x44
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	330c      	adds	r3, #12
 80060fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060fc:	61ba      	str	r2, [r7, #24]
 80060fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006100:	6979      	ldr	r1, [r7, #20]
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	e841 2300 	strex	r3, r2, [r1]
 8006108:	613b      	str	r3, [r7, #16]
   return(result);
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1e5      	bne.n	80060dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2220      	movs	r2, #32
 8006114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800611e:	bf00      	nop
 8006120:	3754      	adds	r7, #84	; 0x54
 8006122:	46bd      	mov	sp, r7
 8006124:	bc80      	pop	{r7}
 8006126:	4770      	bx	lr

08006128 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006134:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f7ff fed3 	bl	8005eee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006148:	bf00      	nop
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b21      	cmp	r3, #33	; 0x21
 8006162:	d13e      	bne.n	80061e2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800616c:	d114      	bne.n	8006198 <UART_Transmit_IT+0x48>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d110      	bne.n	8006198 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	461a      	mov	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800618a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	1c9a      	adds	r2, r3, #2
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	621a      	str	r2, [r3, #32]
 8006196:	e008      	b.n	80061aa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	1c59      	adds	r1, r3, #1
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	6211      	str	r1, [r2, #32]
 80061a2:	781a      	ldrb	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	3b01      	subs	r3, #1
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	4619      	mov	r1, r3
 80061b8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10f      	bne.n	80061de <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68da      	ldr	r2, [r3, #12]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68da      	ldr	r2, [r3, #12]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	e000      	b.n	80061e4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80061e2:	2302      	movs	r3, #2
  }
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bc80      	pop	{r7}
 80061ec:	4770      	bx	lr

080061ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b082      	sub	sp, #8
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68da      	ldr	r2, [r3, #12]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006204:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2220      	movs	r2, #32
 800620a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7ff fe64 	bl	8005edc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b08c      	sub	sp, #48	; 0x30
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b22      	cmp	r3, #34	; 0x22
 8006230:	f040 80ae 	bne.w	8006390 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800623c:	d117      	bne.n	800626e <UART_Receive_IT+0x50>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d113      	bne.n	800626e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006246:	2300      	movs	r3, #0
 8006248:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	b29b      	uxth	r3, r3
 8006258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800625c:	b29a      	uxth	r2, r3
 800625e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006260:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006266:	1c9a      	adds	r2, r3, #2
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	629a      	str	r2, [r3, #40]	; 0x28
 800626c:	e026      	b.n	80062bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006272:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006274:	2300      	movs	r3, #0
 8006276:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006280:	d007      	beq.n	8006292 <UART_Receive_IT+0x74>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10a      	bne.n	80062a0 <UART_Receive_IT+0x82>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d106      	bne.n	80062a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	b2da      	uxtb	r2, r3
 800629a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629c:	701a      	strb	r2, [r3, #0]
 800629e:	e008      	b.n	80062b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b6:	1c5a      	adds	r2, r3, #1
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	3b01      	subs	r3, #1
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	4619      	mov	r1, r3
 80062ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d15d      	bne.n	800638c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68da      	ldr	r2, [r3, #12]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f022 0220 	bic.w	r2, r2, #32
 80062de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68da      	ldr	r2, [r3, #12]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	695a      	ldr	r2, [r3, #20]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f022 0201 	bic.w	r2, r2, #1
 80062fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2220      	movs	r2, #32
 8006304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006312:	2b01      	cmp	r3, #1
 8006314:	d135      	bne.n	8006382 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	330c      	adds	r3, #12
 8006322:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	e853 3f00 	ldrex	r3, [r3]
 800632a:	613b      	str	r3, [r7, #16]
   return(result);
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	f023 0310 	bic.w	r3, r3, #16
 8006332:	627b      	str	r3, [r7, #36]	; 0x24
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	330c      	adds	r3, #12
 800633a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800633c:	623a      	str	r2, [r7, #32]
 800633e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006340:	69f9      	ldr	r1, [r7, #28]
 8006342:	6a3a      	ldr	r2, [r7, #32]
 8006344:	e841 2300 	strex	r3, r2, [r1]
 8006348:	61bb      	str	r3, [r7, #24]
   return(result);
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1e5      	bne.n	800631c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0310 	and.w	r3, r3, #16
 800635a:	2b10      	cmp	r3, #16
 800635c:	d10a      	bne.n	8006374 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800635e:	2300      	movs	r3, #0
 8006360:	60fb      	str	r3, [r7, #12]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	60fb      	str	r3, [r7, #12]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	60fb      	str	r3, [r7, #12]
 8006372:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006378:	4619      	mov	r1, r3
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f7ff fdc0 	bl	8005f00 <HAL_UARTEx_RxEventCallback>
 8006380:	e002      	b.n	8006388 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f7fb fe6a 	bl	800205c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006388:	2300      	movs	r3, #0
 800638a:	e002      	b.n	8006392 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800638c:	2300      	movs	r3, #0
 800638e:	e000      	b.n	8006392 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006390:	2302      	movs	r3, #2
  }
}
 8006392:	4618      	mov	r0, r3
 8006394:	3730      	adds	r7, #48	; 0x30
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
	...

0800639c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68da      	ldr	r2, [r3, #12]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	689a      	ldr	r2, [r3, #8]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	431a      	orrs	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80063d6:	f023 030c 	bic.w	r3, r3, #12
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	6812      	ldr	r2, [r2, #0]
 80063de:	68b9      	ldr	r1, [r7, #8]
 80063e0:	430b      	orrs	r3, r1
 80063e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	699a      	ldr	r2, [r3, #24]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a2c      	ldr	r2, [pc, #176]	; (80064b0 <UART_SetConfig+0x114>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d103      	bne.n	800640c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006404:	f7fe f96e 	bl	80046e4 <HAL_RCC_GetPCLK2Freq>
 8006408:	60f8      	str	r0, [r7, #12]
 800640a:	e002      	b.n	8006412 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800640c:	f7fe f956 	bl	80046bc <HAL_RCC_GetPCLK1Freq>
 8006410:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	4613      	mov	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	009a      	lsls	r2, r3, #2
 800641c:	441a      	add	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	fbb2 f3f3 	udiv	r3, r2, r3
 8006428:	4a22      	ldr	r2, [pc, #136]	; (80064b4 <UART_SetConfig+0x118>)
 800642a:	fba2 2303 	umull	r2, r3, r2, r3
 800642e:	095b      	lsrs	r3, r3, #5
 8006430:	0119      	lsls	r1, r3, #4
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	4613      	mov	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	009a      	lsls	r2, r3, #2
 800643c:	441a      	add	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	fbb2 f2f3 	udiv	r2, r2, r3
 8006448:	4b1a      	ldr	r3, [pc, #104]	; (80064b4 <UART_SetConfig+0x118>)
 800644a:	fba3 0302 	umull	r0, r3, r3, r2
 800644e:	095b      	lsrs	r3, r3, #5
 8006450:	2064      	movs	r0, #100	; 0x64
 8006452:	fb00 f303 	mul.w	r3, r0, r3
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	011b      	lsls	r3, r3, #4
 800645a:	3332      	adds	r3, #50	; 0x32
 800645c:	4a15      	ldr	r2, [pc, #84]	; (80064b4 <UART_SetConfig+0x118>)
 800645e:	fba2 2303 	umull	r2, r3, r2, r3
 8006462:	095b      	lsrs	r3, r3, #5
 8006464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006468:	4419      	add	r1, r3
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	4613      	mov	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	009a      	lsls	r2, r3, #2
 8006474:	441a      	add	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006480:	4b0c      	ldr	r3, [pc, #48]	; (80064b4 <UART_SetConfig+0x118>)
 8006482:	fba3 0302 	umull	r0, r3, r3, r2
 8006486:	095b      	lsrs	r3, r3, #5
 8006488:	2064      	movs	r0, #100	; 0x64
 800648a:	fb00 f303 	mul.w	r3, r0, r3
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	011b      	lsls	r3, r3, #4
 8006492:	3332      	adds	r3, #50	; 0x32
 8006494:	4a07      	ldr	r2, [pc, #28]	; (80064b4 <UART_SetConfig+0x118>)
 8006496:	fba2 2303 	umull	r2, r3, r2, r3
 800649a:	095b      	lsrs	r3, r3, #5
 800649c:	f003 020f 	and.w	r2, r3, #15
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	440a      	add	r2, r1
 80064a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80064a8:	bf00      	nop
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	40013800 	.word	0x40013800
 80064b4:	51eb851f 	.word	0x51eb851f

080064b8 <atof>:
 80064b8:	2100      	movs	r1, #0
 80064ba:	f001 bac1 	b.w	8007a40 <strtod>

080064be <atoi>:
 80064be:	220a      	movs	r2, #10
 80064c0:	2100      	movs	r1, #0
 80064c2:	f001 bb45 	b.w	8007b50 <strtol>
	...

080064c8 <__errno>:
 80064c8:	4b01      	ldr	r3, [pc, #4]	; (80064d0 <__errno+0x8>)
 80064ca:	6818      	ldr	r0, [r3, #0]
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	20000040 	.word	0x20000040

080064d4 <__libc_init_array>:
 80064d4:	b570      	push	{r4, r5, r6, lr}
 80064d6:	2600      	movs	r6, #0
 80064d8:	4d0c      	ldr	r5, [pc, #48]	; (800650c <__libc_init_array+0x38>)
 80064da:	4c0d      	ldr	r4, [pc, #52]	; (8006510 <__libc_init_array+0x3c>)
 80064dc:	1b64      	subs	r4, r4, r5
 80064de:	10a4      	asrs	r4, r4, #2
 80064e0:	42a6      	cmp	r6, r4
 80064e2:	d109      	bne.n	80064f8 <__libc_init_array+0x24>
 80064e4:	f004 fa86 	bl	800a9f4 <_init>
 80064e8:	2600      	movs	r6, #0
 80064ea:	4d0a      	ldr	r5, [pc, #40]	; (8006514 <__libc_init_array+0x40>)
 80064ec:	4c0a      	ldr	r4, [pc, #40]	; (8006518 <__libc_init_array+0x44>)
 80064ee:	1b64      	subs	r4, r4, r5
 80064f0:	10a4      	asrs	r4, r4, #2
 80064f2:	42a6      	cmp	r6, r4
 80064f4:	d105      	bne.n	8006502 <__libc_init_array+0x2e>
 80064f6:	bd70      	pop	{r4, r5, r6, pc}
 80064f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80064fc:	4798      	blx	r3
 80064fe:	3601      	adds	r6, #1
 8006500:	e7ee      	b.n	80064e0 <__libc_init_array+0xc>
 8006502:	f855 3b04 	ldr.w	r3, [r5], #4
 8006506:	4798      	blx	r3
 8006508:	3601      	adds	r6, #1
 800650a:	e7f2      	b.n	80064f2 <__libc_init_array+0x1e>
 800650c:	0800af5c 	.word	0x0800af5c
 8006510:	0800af5c 	.word	0x0800af5c
 8006514:	0800af5c 	.word	0x0800af5c
 8006518:	0800af60 	.word	0x0800af60

0800651c <memset>:
 800651c:	4603      	mov	r3, r0
 800651e:	4402      	add	r2, r0
 8006520:	4293      	cmp	r3, r2
 8006522:	d100      	bne.n	8006526 <memset+0xa>
 8006524:	4770      	bx	lr
 8006526:	f803 1b01 	strb.w	r1, [r3], #1
 800652a:	e7f9      	b.n	8006520 <memset+0x4>

0800652c <__cvt>:
 800652c:	2b00      	cmp	r3, #0
 800652e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006532:	461f      	mov	r7, r3
 8006534:	bfbb      	ittet	lt
 8006536:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800653a:	461f      	movlt	r7, r3
 800653c:	2300      	movge	r3, #0
 800653e:	232d      	movlt	r3, #45	; 0x2d
 8006540:	b088      	sub	sp, #32
 8006542:	4614      	mov	r4, r2
 8006544:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006546:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006548:	7013      	strb	r3, [r2, #0]
 800654a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800654c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006550:	f023 0820 	bic.w	r8, r3, #32
 8006554:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006558:	d005      	beq.n	8006566 <__cvt+0x3a>
 800655a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800655e:	d100      	bne.n	8006562 <__cvt+0x36>
 8006560:	3501      	adds	r5, #1
 8006562:	2302      	movs	r3, #2
 8006564:	e000      	b.n	8006568 <__cvt+0x3c>
 8006566:	2303      	movs	r3, #3
 8006568:	aa07      	add	r2, sp, #28
 800656a:	9204      	str	r2, [sp, #16]
 800656c:	aa06      	add	r2, sp, #24
 800656e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006572:	e9cd 3500 	strd	r3, r5, [sp]
 8006576:	4622      	mov	r2, r4
 8006578:	463b      	mov	r3, r7
 800657a:	f001 fbb9 	bl	8007cf0 <_dtoa_r>
 800657e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006582:	4606      	mov	r6, r0
 8006584:	d102      	bne.n	800658c <__cvt+0x60>
 8006586:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006588:	07db      	lsls	r3, r3, #31
 800658a:	d522      	bpl.n	80065d2 <__cvt+0xa6>
 800658c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006590:	eb06 0905 	add.w	r9, r6, r5
 8006594:	d110      	bne.n	80065b8 <__cvt+0x8c>
 8006596:	7833      	ldrb	r3, [r6, #0]
 8006598:	2b30      	cmp	r3, #48	; 0x30
 800659a:	d10a      	bne.n	80065b2 <__cvt+0x86>
 800659c:	2200      	movs	r2, #0
 800659e:	2300      	movs	r3, #0
 80065a0:	4620      	mov	r0, r4
 80065a2:	4639      	mov	r1, r7
 80065a4:	f7fa fa00 	bl	80009a8 <__aeabi_dcmpeq>
 80065a8:	b918      	cbnz	r0, 80065b2 <__cvt+0x86>
 80065aa:	f1c5 0501 	rsb	r5, r5, #1
 80065ae:	f8ca 5000 	str.w	r5, [sl]
 80065b2:	f8da 3000 	ldr.w	r3, [sl]
 80065b6:	4499      	add	r9, r3
 80065b8:	2200      	movs	r2, #0
 80065ba:	2300      	movs	r3, #0
 80065bc:	4620      	mov	r0, r4
 80065be:	4639      	mov	r1, r7
 80065c0:	f7fa f9f2 	bl	80009a8 <__aeabi_dcmpeq>
 80065c4:	b108      	cbz	r0, 80065ca <__cvt+0x9e>
 80065c6:	f8cd 901c 	str.w	r9, [sp, #28]
 80065ca:	2230      	movs	r2, #48	; 0x30
 80065cc:	9b07      	ldr	r3, [sp, #28]
 80065ce:	454b      	cmp	r3, r9
 80065d0:	d307      	bcc.n	80065e2 <__cvt+0xb6>
 80065d2:	4630      	mov	r0, r6
 80065d4:	9b07      	ldr	r3, [sp, #28]
 80065d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80065d8:	1b9b      	subs	r3, r3, r6
 80065da:	6013      	str	r3, [r2, #0]
 80065dc:	b008      	add	sp, #32
 80065de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e2:	1c59      	adds	r1, r3, #1
 80065e4:	9107      	str	r1, [sp, #28]
 80065e6:	701a      	strb	r2, [r3, #0]
 80065e8:	e7f0      	b.n	80065cc <__cvt+0xa0>

080065ea <__exponent>:
 80065ea:	4603      	mov	r3, r0
 80065ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065ee:	2900      	cmp	r1, #0
 80065f0:	f803 2b02 	strb.w	r2, [r3], #2
 80065f4:	bfb6      	itet	lt
 80065f6:	222d      	movlt	r2, #45	; 0x2d
 80065f8:	222b      	movge	r2, #43	; 0x2b
 80065fa:	4249      	neglt	r1, r1
 80065fc:	2909      	cmp	r1, #9
 80065fe:	7042      	strb	r2, [r0, #1]
 8006600:	dd2b      	ble.n	800665a <__exponent+0x70>
 8006602:	f10d 0407 	add.w	r4, sp, #7
 8006606:	46a4      	mov	ip, r4
 8006608:	270a      	movs	r7, #10
 800660a:	fb91 f6f7 	sdiv	r6, r1, r7
 800660e:	460a      	mov	r2, r1
 8006610:	46a6      	mov	lr, r4
 8006612:	fb07 1516 	mls	r5, r7, r6, r1
 8006616:	2a63      	cmp	r2, #99	; 0x63
 8006618:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800661c:	4631      	mov	r1, r6
 800661e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006622:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006626:	dcf0      	bgt.n	800660a <__exponent+0x20>
 8006628:	3130      	adds	r1, #48	; 0x30
 800662a:	f1ae 0502 	sub.w	r5, lr, #2
 800662e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006632:	4629      	mov	r1, r5
 8006634:	1c44      	adds	r4, r0, #1
 8006636:	4561      	cmp	r1, ip
 8006638:	d30a      	bcc.n	8006650 <__exponent+0x66>
 800663a:	f10d 0209 	add.w	r2, sp, #9
 800663e:	eba2 020e 	sub.w	r2, r2, lr
 8006642:	4565      	cmp	r5, ip
 8006644:	bf88      	it	hi
 8006646:	2200      	movhi	r2, #0
 8006648:	4413      	add	r3, r2
 800664a:	1a18      	subs	r0, r3, r0
 800664c:	b003      	add	sp, #12
 800664e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006650:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006654:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006658:	e7ed      	b.n	8006636 <__exponent+0x4c>
 800665a:	2330      	movs	r3, #48	; 0x30
 800665c:	3130      	adds	r1, #48	; 0x30
 800665e:	7083      	strb	r3, [r0, #2]
 8006660:	70c1      	strb	r1, [r0, #3]
 8006662:	1d03      	adds	r3, r0, #4
 8006664:	e7f1      	b.n	800664a <__exponent+0x60>
	...

08006668 <_printf_float>:
 8006668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800666c:	b091      	sub	sp, #68	; 0x44
 800666e:	460c      	mov	r4, r1
 8006670:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006674:	4616      	mov	r6, r2
 8006676:	461f      	mov	r7, r3
 8006678:	4605      	mov	r5, r0
 800667a:	f002 fc8d 	bl	8008f98 <_localeconv_r>
 800667e:	6803      	ldr	r3, [r0, #0]
 8006680:	4618      	mov	r0, r3
 8006682:	9309      	str	r3, [sp, #36]	; 0x24
 8006684:	f7f9 fd64 	bl	8000150 <strlen>
 8006688:	2300      	movs	r3, #0
 800668a:	930e      	str	r3, [sp, #56]	; 0x38
 800668c:	f8d8 3000 	ldr.w	r3, [r8]
 8006690:	900a      	str	r0, [sp, #40]	; 0x28
 8006692:	3307      	adds	r3, #7
 8006694:	f023 0307 	bic.w	r3, r3, #7
 8006698:	f103 0208 	add.w	r2, r3, #8
 800669c:	f894 9018 	ldrb.w	r9, [r4, #24]
 80066a0:	f8d4 b000 	ldr.w	fp, [r4]
 80066a4:	f8c8 2000 	str.w	r2, [r8]
 80066a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80066b0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80066b4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80066b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80066ba:	f04f 32ff 	mov.w	r2, #4294967295
 80066be:	4640      	mov	r0, r8
 80066c0:	4b9c      	ldr	r3, [pc, #624]	; (8006934 <_printf_float+0x2cc>)
 80066c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066c4:	f7fa f9a2 	bl	8000a0c <__aeabi_dcmpun>
 80066c8:	bb70      	cbnz	r0, 8006728 <_printf_float+0xc0>
 80066ca:	f04f 32ff 	mov.w	r2, #4294967295
 80066ce:	4640      	mov	r0, r8
 80066d0:	4b98      	ldr	r3, [pc, #608]	; (8006934 <_printf_float+0x2cc>)
 80066d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066d4:	f7fa f97c 	bl	80009d0 <__aeabi_dcmple>
 80066d8:	bb30      	cbnz	r0, 8006728 <_printf_float+0xc0>
 80066da:	2200      	movs	r2, #0
 80066dc:	2300      	movs	r3, #0
 80066de:	4640      	mov	r0, r8
 80066e0:	4651      	mov	r1, sl
 80066e2:	f7fa f96b 	bl	80009bc <__aeabi_dcmplt>
 80066e6:	b110      	cbz	r0, 80066ee <_printf_float+0x86>
 80066e8:	232d      	movs	r3, #45	; 0x2d
 80066ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066ee:	4b92      	ldr	r3, [pc, #584]	; (8006938 <_printf_float+0x2d0>)
 80066f0:	4892      	ldr	r0, [pc, #584]	; (800693c <_printf_float+0x2d4>)
 80066f2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80066f6:	bf94      	ite	ls
 80066f8:	4698      	movls	r8, r3
 80066fa:	4680      	movhi	r8, r0
 80066fc:	2303      	movs	r3, #3
 80066fe:	f04f 0a00 	mov.w	sl, #0
 8006702:	6123      	str	r3, [r4, #16]
 8006704:	f02b 0304 	bic.w	r3, fp, #4
 8006708:	6023      	str	r3, [r4, #0]
 800670a:	4633      	mov	r3, r6
 800670c:	4621      	mov	r1, r4
 800670e:	4628      	mov	r0, r5
 8006710:	9700      	str	r7, [sp, #0]
 8006712:	aa0f      	add	r2, sp, #60	; 0x3c
 8006714:	f000 f9d4 	bl	8006ac0 <_printf_common>
 8006718:	3001      	adds	r0, #1
 800671a:	f040 8090 	bne.w	800683e <_printf_float+0x1d6>
 800671e:	f04f 30ff 	mov.w	r0, #4294967295
 8006722:	b011      	add	sp, #68	; 0x44
 8006724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006728:	4642      	mov	r2, r8
 800672a:	4653      	mov	r3, sl
 800672c:	4640      	mov	r0, r8
 800672e:	4651      	mov	r1, sl
 8006730:	f7fa f96c 	bl	8000a0c <__aeabi_dcmpun>
 8006734:	b148      	cbz	r0, 800674a <_printf_float+0xe2>
 8006736:	f1ba 0f00 	cmp.w	sl, #0
 800673a:	bfb8      	it	lt
 800673c:	232d      	movlt	r3, #45	; 0x2d
 800673e:	4880      	ldr	r0, [pc, #512]	; (8006940 <_printf_float+0x2d8>)
 8006740:	bfb8      	it	lt
 8006742:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006746:	4b7f      	ldr	r3, [pc, #508]	; (8006944 <_printf_float+0x2dc>)
 8006748:	e7d3      	b.n	80066f2 <_printf_float+0x8a>
 800674a:	6863      	ldr	r3, [r4, #4]
 800674c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	d142      	bne.n	80067da <_printf_float+0x172>
 8006754:	2306      	movs	r3, #6
 8006756:	6063      	str	r3, [r4, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	9206      	str	r2, [sp, #24]
 800675c:	aa0e      	add	r2, sp, #56	; 0x38
 800675e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006762:	aa0d      	add	r2, sp, #52	; 0x34
 8006764:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006768:	9203      	str	r2, [sp, #12]
 800676a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800676e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006772:	6023      	str	r3, [r4, #0]
 8006774:	6863      	ldr	r3, [r4, #4]
 8006776:	4642      	mov	r2, r8
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	4628      	mov	r0, r5
 800677c:	4653      	mov	r3, sl
 800677e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006780:	f7ff fed4 	bl	800652c <__cvt>
 8006784:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006786:	4680      	mov	r8, r0
 8006788:	2947      	cmp	r1, #71	; 0x47
 800678a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800678c:	d108      	bne.n	80067a0 <_printf_float+0x138>
 800678e:	1cc8      	adds	r0, r1, #3
 8006790:	db02      	blt.n	8006798 <_printf_float+0x130>
 8006792:	6863      	ldr	r3, [r4, #4]
 8006794:	4299      	cmp	r1, r3
 8006796:	dd40      	ble.n	800681a <_printf_float+0x1b2>
 8006798:	f1a9 0902 	sub.w	r9, r9, #2
 800679c:	fa5f f989 	uxtb.w	r9, r9
 80067a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80067a4:	d81f      	bhi.n	80067e6 <_printf_float+0x17e>
 80067a6:	464a      	mov	r2, r9
 80067a8:	3901      	subs	r1, #1
 80067aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80067ae:	910d      	str	r1, [sp, #52]	; 0x34
 80067b0:	f7ff ff1b 	bl	80065ea <__exponent>
 80067b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067b6:	4682      	mov	sl, r0
 80067b8:	1813      	adds	r3, r2, r0
 80067ba:	2a01      	cmp	r2, #1
 80067bc:	6123      	str	r3, [r4, #16]
 80067be:	dc02      	bgt.n	80067c6 <_printf_float+0x15e>
 80067c0:	6822      	ldr	r2, [r4, #0]
 80067c2:	07d2      	lsls	r2, r2, #31
 80067c4:	d501      	bpl.n	80067ca <_printf_float+0x162>
 80067c6:	3301      	adds	r3, #1
 80067c8:	6123      	str	r3, [r4, #16]
 80067ca:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d09b      	beq.n	800670a <_printf_float+0xa2>
 80067d2:	232d      	movs	r3, #45	; 0x2d
 80067d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067d8:	e797      	b.n	800670a <_printf_float+0xa2>
 80067da:	2947      	cmp	r1, #71	; 0x47
 80067dc:	d1bc      	bne.n	8006758 <_printf_float+0xf0>
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1ba      	bne.n	8006758 <_printf_float+0xf0>
 80067e2:	2301      	movs	r3, #1
 80067e4:	e7b7      	b.n	8006756 <_printf_float+0xee>
 80067e6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80067ea:	d118      	bne.n	800681e <_printf_float+0x1b6>
 80067ec:	2900      	cmp	r1, #0
 80067ee:	6863      	ldr	r3, [r4, #4]
 80067f0:	dd0b      	ble.n	800680a <_printf_float+0x1a2>
 80067f2:	6121      	str	r1, [r4, #16]
 80067f4:	b913      	cbnz	r3, 80067fc <_printf_float+0x194>
 80067f6:	6822      	ldr	r2, [r4, #0]
 80067f8:	07d0      	lsls	r0, r2, #31
 80067fa:	d502      	bpl.n	8006802 <_printf_float+0x19a>
 80067fc:	3301      	adds	r3, #1
 80067fe:	440b      	add	r3, r1
 8006800:	6123      	str	r3, [r4, #16]
 8006802:	f04f 0a00 	mov.w	sl, #0
 8006806:	65a1      	str	r1, [r4, #88]	; 0x58
 8006808:	e7df      	b.n	80067ca <_printf_float+0x162>
 800680a:	b913      	cbnz	r3, 8006812 <_printf_float+0x1aa>
 800680c:	6822      	ldr	r2, [r4, #0]
 800680e:	07d2      	lsls	r2, r2, #31
 8006810:	d501      	bpl.n	8006816 <_printf_float+0x1ae>
 8006812:	3302      	adds	r3, #2
 8006814:	e7f4      	b.n	8006800 <_printf_float+0x198>
 8006816:	2301      	movs	r3, #1
 8006818:	e7f2      	b.n	8006800 <_printf_float+0x198>
 800681a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800681e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006820:	4299      	cmp	r1, r3
 8006822:	db05      	blt.n	8006830 <_printf_float+0x1c8>
 8006824:	6823      	ldr	r3, [r4, #0]
 8006826:	6121      	str	r1, [r4, #16]
 8006828:	07d8      	lsls	r0, r3, #31
 800682a:	d5ea      	bpl.n	8006802 <_printf_float+0x19a>
 800682c:	1c4b      	adds	r3, r1, #1
 800682e:	e7e7      	b.n	8006800 <_printf_float+0x198>
 8006830:	2900      	cmp	r1, #0
 8006832:	bfcc      	ite	gt
 8006834:	2201      	movgt	r2, #1
 8006836:	f1c1 0202 	rsble	r2, r1, #2
 800683a:	4413      	add	r3, r2
 800683c:	e7e0      	b.n	8006800 <_printf_float+0x198>
 800683e:	6823      	ldr	r3, [r4, #0]
 8006840:	055a      	lsls	r2, r3, #21
 8006842:	d407      	bmi.n	8006854 <_printf_float+0x1ec>
 8006844:	6923      	ldr	r3, [r4, #16]
 8006846:	4642      	mov	r2, r8
 8006848:	4631      	mov	r1, r6
 800684a:	4628      	mov	r0, r5
 800684c:	47b8      	blx	r7
 800684e:	3001      	adds	r0, #1
 8006850:	d12b      	bne.n	80068aa <_printf_float+0x242>
 8006852:	e764      	b.n	800671e <_printf_float+0xb6>
 8006854:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006858:	f240 80dd 	bls.w	8006a16 <_printf_float+0x3ae>
 800685c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006860:	2200      	movs	r2, #0
 8006862:	2300      	movs	r3, #0
 8006864:	f7fa f8a0 	bl	80009a8 <__aeabi_dcmpeq>
 8006868:	2800      	cmp	r0, #0
 800686a:	d033      	beq.n	80068d4 <_printf_float+0x26c>
 800686c:	2301      	movs	r3, #1
 800686e:	4631      	mov	r1, r6
 8006870:	4628      	mov	r0, r5
 8006872:	4a35      	ldr	r2, [pc, #212]	; (8006948 <_printf_float+0x2e0>)
 8006874:	47b8      	blx	r7
 8006876:	3001      	adds	r0, #1
 8006878:	f43f af51 	beq.w	800671e <_printf_float+0xb6>
 800687c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006880:	429a      	cmp	r2, r3
 8006882:	db02      	blt.n	800688a <_printf_float+0x222>
 8006884:	6823      	ldr	r3, [r4, #0]
 8006886:	07d8      	lsls	r0, r3, #31
 8006888:	d50f      	bpl.n	80068aa <_printf_float+0x242>
 800688a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800688e:	4631      	mov	r1, r6
 8006890:	4628      	mov	r0, r5
 8006892:	47b8      	blx	r7
 8006894:	3001      	adds	r0, #1
 8006896:	f43f af42 	beq.w	800671e <_printf_float+0xb6>
 800689a:	f04f 0800 	mov.w	r8, #0
 800689e:	f104 091a 	add.w	r9, r4, #26
 80068a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068a4:	3b01      	subs	r3, #1
 80068a6:	4543      	cmp	r3, r8
 80068a8:	dc09      	bgt.n	80068be <_printf_float+0x256>
 80068aa:	6823      	ldr	r3, [r4, #0]
 80068ac:	079b      	lsls	r3, r3, #30
 80068ae:	f100 8102 	bmi.w	8006ab6 <_printf_float+0x44e>
 80068b2:	68e0      	ldr	r0, [r4, #12]
 80068b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068b6:	4298      	cmp	r0, r3
 80068b8:	bfb8      	it	lt
 80068ba:	4618      	movlt	r0, r3
 80068bc:	e731      	b.n	8006722 <_printf_float+0xba>
 80068be:	2301      	movs	r3, #1
 80068c0:	464a      	mov	r2, r9
 80068c2:	4631      	mov	r1, r6
 80068c4:	4628      	mov	r0, r5
 80068c6:	47b8      	blx	r7
 80068c8:	3001      	adds	r0, #1
 80068ca:	f43f af28 	beq.w	800671e <_printf_float+0xb6>
 80068ce:	f108 0801 	add.w	r8, r8, #1
 80068d2:	e7e6      	b.n	80068a2 <_printf_float+0x23a>
 80068d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	dc38      	bgt.n	800694c <_printf_float+0x2e4>
 80068da:	2301      	movs	r3, #1
 80068dc:	4631      	mov	r1, r6
 80068de:	4628      	mov	r0, r5
 80068e0:	4a19      	ldr	r2, [pc, #100]	; (8006948 <_printf_float+0x2e0>)
 80068e2:	47b8      	blx	r7
 80068e4:	3001      	adds	r0, #1
 80068e6:	f43f af1a 	beq.w	800671e <_printf_float+0xb6>
 80068ea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80068ee:	4313      	orrs	r3, r2
 80068f0:	d102      	bne.n	80068f8 <_printf_float+0x290>
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	07d9      	lsls	r1, r3, #31
 80068f6:	d5d8      	bpl.n	80068aa <_printf_float+0x242>
 80068f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068fc:	4631      	mov	r1, r6
 80068fe:	4628      	mov	r0, r5
 8006900:	47b8      	blx	r7
 8006902:	3001      	adds	r0, #1
 8006904:	f43f af0b 	beq.w	800671e <_printf_float+0xb6>
 8006908:	f04f 0900 	mov.w	r9, #0
 800690c:	f104 0a1a 	add.w	sl, r4, #26
 8006910:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006912:	425b      	negs	r3, r3
 8006914:	454b      	cmp	r3, r9
 8006916:	dc01      	bgt.n	800691c <_printf_float+0x2b4>
 8006918:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800691a:	e794      	b.n	8006846 <_printf_float+0x1de>
 800691c:	2301      	movs	r3, #1
 800691e:	4652      	mov	r2, sl
 8006920:	4631      	mov	r1, r6
 8006922:	4628      	mov	r0, r5
 8006924:	47b8      	blx	r7
 8006926:	3001      	adds	r0, #1
 8006928:	f43f aef9 	beq.w	800671e <_printf_float+0xb6>
 800692c:	f109 0901 	add.w	r9, r9, #1
 8006930:	e7ee      	b.n	8006910 <_printf_float+0x2a8>
 8006932:	bf00      	nop
 8006934:	7fefffff 	.word	0x7fefffff
 8006938:	0800aac0 	.word	0x0800aac0
 800693c:	0800aac4 	.word	0x0800aac4
 8006940:	0800aacc 	.word	0x0800aacc
 8006944:	0800aac8 	.word	0x0800aac8
 8006948:	0800aad0 	.word	0x0800aad0
 800694c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800694e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006950:	429a      	cmp	r2, r3
 8006952:	bfa8      	it	ge
 8006954:	461a      	movge	r2, r3
 8006956:	2a00      	cmp	r2, #0
 8006958:	4691      	mov	r9, r2
 800695a:	dc37      	bgt.n	80069cc <_printf_float+0x364>
 800695c:	f04f 0b00 	mov.w	fp, #0
 8006960:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006964:	f104 021a 	add.w	r2, r4, #26
 8006968:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800696c:	ebaa 0309 	sub.w	r3, sl, r9
 8006970:	455b      	cmp	r3, fp
 8006972:	dc33      	bgt.n	80069dc <_printf_float+0x374>
 8006974:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006978:	429a      	cmp	r2, r3
 800697a:	db3b      	blt.n	80069f4 <_printf_float+0x38c>
 800697c:	6823      	ldr	r3, [r4, #0]
 800697e:	07da      	lsls	r2, r3, #31
 8006980:	d438      	bmi.n	80069f4 <_printf_float+0x38c>
 8006982:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006984:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006986:	eba3 020a 	sub.w	r2, r3, sl
 800698a:	eba3 0901 	sub.w	r9, r3, r1
 800698e:	4591      	cmp	r9, r2
 8006990:	bfa8      	it	ge
 8006992:	4691      	movge	r9, r2
 8006994:	f1b9 0f00 	cmp.w	r9, #0
 8006998:	dc34      	bgt.n	8006a04 <_printf_float+0x39c>
 800699a:	f04f 0800 	mov.w	r8, #0
 800699e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069a2:	f104 0a1a 	add.w	sl, r4, #26
 80069a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80069aa:	1a9b      	subs	r3, r3, r2
 80069ac:	eba3 0309 	sub.w	r3, r3, r9
 80069b0:	4543      	cmp	r3, r8
 80069b2:	f77f af7a 	ble.w	80068aa <_printf_float+0x242>
 80069b6:	2301      	movs	r3, #1
 80069b8:	4652      	mov	r2, sl
 80069ba:	4631      	mov	r1, r6
 80069bc:	4628      	mov	r0, r5
 80069be:	47b8      	blx	r7
 80069c0:	3001      	adds	r0, #1
 80069c2:	f43f aeac 	beq.w	800671e <_printf_float+0xb6>
 80069c6:	f108 0801 	add.w	r8, r8, #1
 80069ca:	e7ec      	b.n	80069a6 <_printf_float+0x33e>
 80069cc:	4613      	mov	r3, r2
 80069ce:	4631      	mov	r1, r6
 80069d0:	4642      	mov	r2, r8
 80069d2:	4628      	mov	r0, r5
 80069d4:	47b8      	blx	r7
 80069d6:	3001      	adds	r0, #1
 80069d8:	d1c0      	bne.n	800695c <_printf_float+0x2f4>
 80069da:	e6a0      	b.n	800671e <_printf_float+0xb6>
 80069dc:	2301      	movs	r3, #1
 80069de:	4631      	mov	r1, r6
 80069e0:	4628      	mov	r0, r5
 80069e2:	920b      	str	r2, [sp, #44]	; 0x2c
 80069e4:	47b8      	blx	r7
 80069e6:	3001      	adds	r0, #1
 80069e8:	f43f ae99 	beq.w	800671e <_printf_float+0xb6>
 80069ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069ee:	f10b 0b01 	add.w	fp, fp, #1
 80069f2:	e7b9      	b.n	8006968 <_printf_float+0x300>
 80069f4:	4631      	mov	r1, r6
 80069f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069fa:	4628      	mov	r0, r5
 80069fc:	47b8      	blx	r7
 80069fe:	3001      	adds	r0, #1
 8006a00:	d1bf      	bne.n	8006982 <_printf_float+0x31a>
 8006a02:	e68c      	b.n	800671e <_printf_float+0xb6>
 8006a04:	464b      	mov	r3, r9
 8006a06:	4631      	mov	r1, r6
 8006a08:	4628      	mov	r0, r5
 8006a0a:	eb08 020a 	add.w	r2, r8, sl
 8006a0e:	47b8      	blx	r7
 8006a10:	3001      	adds	r0, #1
 8006a12:	d1c2      	bne.n	800699a <_printf_float+0x332>
 8006a14:	e683      	b.n	800671e <_printf_float+0xb6>
 8006a16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a18:	2a01      	cmp	r2, #1
 8006a1a:	dc01      	bgt.n	8006a20 <_printf_float+0x3b8>
 8006a1c:	07db      	lsls	r3, r3, #31
 8006a1e:	d537      	bpl.n	8006a90 <_printf_float+0x428>
 8006a20:	2301      	movs	r3, #1
 8006a22:	4642      	mov	r2, r8
 8006a24:	4631      	mov	r1, r6
 8006a26:	4628      	mov	r0, r5
 8006a28:	47b8      	blx	r7
 8006a2a:	3001      	adds	r0, #1
 8006a2c:	f43f ae77 	beq.w	800671e <_printf_float+0xb6>
 8006a30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a34:	4631      	mov	r1, r6
 8006a36:	4628      	mov	r0, r5
 8006a38:	47b8      	blx	r7
 8006a3a:	3001      	adds	r0, #1
 8006a3c:	f43f ae6f 	beq.w	800671e <_printf_float+0xb6>
 8006a40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a44:	2200      	movs	r2, #0
 8006a46:	2300      	movs	r3, #0
 8006a48:	f7f9 ffae 	bl	80009a8 <__aeabi_dcmpeq>
 8006a4c:	b9d8      	cbnz	r0, 8006a86 <_printf_float+0x41e>
 8006a4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a50:	f108 0201 	add.w	r2, r8, #1
 8006a54:	3b01      	subs	r3, #1
 8006a56:	4631      	mov	r1, r6
 8006a58:	4628      	mov	r0, r5
 8006a5a:	47b8      	blx	r7
 8006a5c:	3001      	adds	r0, #1
 8006a5e:	d10e      	bne.n	8006a7e <_printf_float+0x416>
 8006a60:	e65d      	b.n	800671e <_printf_float+0xb6>
 8006a62:	2301      	movs	r3, #1
 8006a64:	464a      	mov	r2, r9
 8006a66:	4631      	mov	r1, r6
 8006a68:	4628      	mov	r0, r5
 8006a6a:	47b8      	blx	r7
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	f43f ae56 	beq.w	800671e <_printf_float+0xb6>
 8006a72:	f108 0801 	add.w	r8, r8, #1
 8006a76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	4543      	cmp	r3, r8
 8006a7c:	dcf1      	bgt.n	8006a62 <_printf_float+0x3fa>
 8006a7e:	4653      	mov	r3, sl
 8006a80:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a84:	e6e0      	b.n	8006848 <_printf_float+0x1e0>
 8006a86:	f04f 0800 	mov.w	r8, #0
 8006a8a:	f104 091a 	add.w	r9, r4, #26
 8006a8e:	e7f2      	b.n	8006a76 <_printf_float+0x40e>
 8006a90:	2301      	movs	r3, #1
 8006a92:	4642      	mov	r2, r8
 8006a94:	e7df      	b.n	8006a56 <_printf_float+0x3ee>
 8006a96:	2301      	movs	r3, #1
 8006a98:	464a      	mov	r2, r9
 8006a9a:	4631      	mov	r1, r6
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	47b8      	blx	r7
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	f43f ae3c 	beq.w	800671e <_printf_float+0xb6>
 8006aa6:	f108 0801 	add.w	r8, r8, #1
 8006aaa:	68e3      	ldr	r3, [r4, #12]
 8006aac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006aae:	1a5b      	subs	r3, r3, r1
 8006ab0:	4543      	cmp	r3, r8
 8006ab2:	dcf0      	bgt.n	8006a96 <_printf_float+0x42e>
 8006ab4:	e6fd      	b.n	80068b2 <_printf_float+0x24a>
 8006ab6:	f04f 0800 	mov.w	r8, #0
 8006aba:	f104 0919 	add.w	r9, r4, #25
 8006abe:	e7f4      	b.n	8006aaa <_printf_float+0x442>

08006ac0 <_printf_common>:
 8006ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac4:	4616      	mov	r6, r2
 8006ac6:	4699      	mov	r9, r3
 8006ac8:	688a      	ldr	r2, [r1, #8]
 8006aca:	690b      	ldr	r3, [r1, #16]
 8006acc:	4607      	mov	r7, r0
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	bfb8      	it	lt
 8006ad2:	4613      	movlt	r3, r2
 8006ad4:	6033      	str	r3, [r6, #0]
 8006ad6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ada:	460c      	mov	r4, r1
 8006adc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ae0:	b10a      	cbz	r2, 8006ae6 <_printf_common+0x26>
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	6033      	str	r3, [r6, #0]
 8006ae6:	6823      	ldr	r3, [r4, #0]
 8006ae8:	0699      	lsls	r1, r3, #26
 8006aea:	bf42      	ittt	mi
 8006aec:	6833      	ldrmi	r3, [r6, #0]
 8006aee:	3302      	addmi	r3, #2
 8006af0:	6033      	strmi	r3, [r6, #0]
 8006af2:	6825      	ldr	r5, [r4, #0]
 8006af4:	f015 0506 	ands.w	r5, r5, #6
 8006af8:	d106      	bne.n	8006b08 <_printf_common+0x48>
 8006afa:	f104 0a19 	add.w	sl, r4, #25
 8006afe:	68e3      	ldr	r3, [r4, #12]
 8006b00:	6832      	ldr	r2, [r6, #0]
 8006b02:	1a9b      	subs	r3, r3, r2
 8006b04:	42ab      	cmp	r3, r5
 8006b06:	dc28      	bgt.n	8006b5a <_printf_common+0x9a>
 8006b08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b0c:	1e13      	subs	r3, r2, #0
 8006b0e:	6822      	ldr	r2, [r4, #0]
 8006b10:	bf18      	it	ne
 8006b12:	2301      	movne	r3, #1
 8006b14:	0692      	lsls	r2, r2, #26
 8006b16:	d42d      	bmi.n	8006b74 <_printf_common+0xb4>
 8006b18:	4649      	mov	r1, r9
 8006b1a:	4638      	mov	r0, r7
 8006b1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b20:	47c0      	blx	r8
 8006b22:	3001      	adds	r0, #1
 8006b24:	d020      	beq.n	8006b68 <_printf_common+0xa8>
 8006b26:	6823      	ldr	r3, [r4, #0]
 8006b28:	68e5      	ldr	r5, [r4, #12]
 8006b2a:	f003 0306 	and.w	r3, r3, #6
 8006b2e:	2b04      	cmp	r3, #4
 8006b30:	bf18      	it	ne
 8006b32:	2500      	movne	r5, #0
 8006b34:	6832      	ldr	r2, [r6, #0]
 8006b36:	f04f 0600 	mov.w	r6, #0
 8006b3a:	68a3      	ldr	r3, [r4, #8]
 8006b3c:	bf08      	it	eq
 8006b3e:	1aad      	subeq	r5, r5, r2
 8006b40:	6922      	ldr	r2, [r4, #16]
 8006b42:	bf08      	it	eq
 8006b44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	bfc4      	itt	gt
 8006b4c:	1a9b      	subgt	r3, r3, r2
 8006b4e:	18ed      	addgt	r5, r5, r3
 8006b50:	341a      	adds	r4, #26
 8006b52:	42b5      	cmp	r5, r6
 8006b54:	d11a      	bne.n	8006b8c <_printf_common+0xcc>
 8006b56:	2000      	movs	r0, #0
 8006b58:	e008      	b.n	8006b6c <_printf_common+0xac>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	4652      	mov	r2, sl
 8006b5e:	4649      	mov	r1, r9
 8006b60:	4638      	mov	r0, r7
 8006b62:	47c0      	blx	r8
 8006b64:	3001      	adds	r0, #1
 8006b66:	d103      	bne.n	8006b70 <_printf_common+0xb0>
 8006b68:	f04f 30ff 	mov.w	r0, #4294967295
 8006b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b70:	3501      	adds	r5, #1
 8006b72:	e7c4      	b.n	8006afe <_printf_common+0x3e>
 8006b74:	2030      	movs	r0, #48	; 0x30
 8006b76:	18e1      	adds	r1, r4, r3
 8006b78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b7c:	1c5a      	adds	r2, r3, #1
 8006b7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b82:	4422      	add	r2, r4
 8006b84:	3302      	adds	r3, #2
 8006b86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b8a:	e7c5      	b.n	8006b18 <_printf_common+0x58>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	4622      	mov	r2, r4
 8006b90:	4649      	mov	r1, r9
 8006b92:	4638      	mov	r0, r7
 8006b94:	47c0      	blx	r8
 8006b96:	3001      	adds	r0, #1
 8006b98:	d0e6      	beq.n	8006b68 <_printf_common+0xa8>
 8006b9a:	3601      	adds	r6, #1
 8006b9c:	e7d9      	b.n	8006b52 <_printf_common+0x92>
	...

08006ba0 <_printf_i>:
 8006ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba4:	7e0f      	ldrb	r7, [r1, #24]
 8006ba6:	4691      	mov	r9, r2
 8006ba8:	2f78      	cmp	r7, #120	; 0x78
 8006baa:	4680      	mov	r8, r0
 8006bac:	460c      	mov	r4, r1
 8006bae:	469a      	mov	sl, r3
 8006bb0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006bb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006bb6:	d807      	bhi.n	8006bc8 <_printf_i+0x28>
 8006bb8:	2f62      	cmp	r7, #98	; 0x62
 8006bba:	d80a      	bhi.n	8006bd2 <_printf_i+0x32>
 8006bbc:	2f00      	cmp	r7, #0
 8006bbe:	f000 80d9 	beq.w	8006d74 <_printf_i+0x1d4>
 8006bc2:	2f58      	cmp	r7, #88	; 0x58
 8006bc4:	f000 80a4 	beq.w	8006d10 <_printf_i+0x170>
 8006bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bd0:	e03a      	b.n	8006c48 <_printf_i+0xa8>
 8006bd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bd6:	2b15      	cmp	r3, #21
 8006bd8:	d8f6      	bhi.n	8006bc8 <_printf_i+0x28>
 8006bda:	a101      	add	r1, pc, #4	; (adr r1, 8006be0 <_printf_i+0x40>)
 8006bdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006be0:	08006c39 	.word	0x08006c39
 8006be4:	08006c4d 	.word	0x08006c4d
 8006be8:	08006bc9 	.word	0x08006bc9
 8006bec:	08006bc9 	.word	0x08006bc9
 8006bf0:	08006bc9 	.word	0x08006bc9
 8006bf4:	08006bc9 	.word	0x08006bc9
 8006bf8:	08006c4d 	.word	0x08006c4d
 8006bfc:	08006bc9 	.word	0x08006bc9
 8006c00:	08006bc9 	.word	0x08006bc9
 8006c04:	08006bc9 	.word	0x08006bc9
 8006c08:	08006bc9 	.word	0x08006bc9
 8006c0c:	08006d5b 	.word	0x08006d5b
 8006c10:	08006c7d 	.word	0x08006c7d
 8006c14:	08006d3d 	.word	0x08006d3d
 8006c18:	08006bc9 	.word	0x08006bc9
 8006c1c:	08006bc9 	.word	0x08006bc9
 8006c20:	08006d7d 	.word	0x08006d7d
 8006c24:	08006bc9 	.word	0x08006bc9
 8006c28:	08006c7d 	.word	0x08006c7d
 8006c2c:	08006bc9 	.word	0x08006bc9
 8006c30:	08006bc9 	.word	0x08006bc9
 8006c34:	08006d45 	.word	0x08006d45
 8006c38:	682b      	ldr	r3, [r5, #0]
 8006c3a:	1d1a      	adds	r2, r3, #4
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	602a      	str	r2, [r5, #0]
 8006c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e0a4      	b.n	8006d96 <_printf_i+0x1f6>
 8006c4c:	6820      	ldr	r0, [r4, #0]
 8006c4e:	6829      	ldr	r1, [r5, #0]
 8006c50:	0606      	lsls	r6, r0, #24
 8006c52:	f101 0304 	add.w	r3, r1, #4
 8006c56:	d50a      	bpl.n	8006c6e <_printf_i+0xce>
 8006c58:	680e      	ldr	r6, [r1, #0]
 8006c5a:	602b      	str	r3, [r5, #0]
 8006c5c:	2e00      	cmp	r6, #0
 8006c5e:	da03      	bge.n	8006c68 <_printf_i+0xc8>
 8006c60:	232d      	movs	r3, #45	; 0x2d
 8006c62:	4276      	negs	r6, r6
 8006c64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c68:	230a      	movs	r3, #10
 8006c6a:	485e      	ldr	r0, [pc, #376]	; (8006de4 <_printf_i+0x244>)
 8006c6c:	e019      	b.n	8006ca2 <_printf_i+0x102>
 8006c6e:	680e      	ldr	r6, [r1, #0]
 8006c70:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c74:	602b      	str	r3, [r5, #0]
 8006c76:	bf18      	it	ne
 8006c78:	b236      	sxthne	r6, r6
 8006c7a:	e7ef      	b.n	8006c5c <_printf_i+0xbc>
 8006c7c:	682b      	ldr	r3, [r5, #0]
 8006c7e:	6820      	ldr	r0, [r4, #0]
 8006c80:	1d19      	adds	r1, r3, #4
 8006c82:	6029      	str	r1, [r5, #0]
 8006c84:	0601      	lsls	r1, r0, #24
 8006c86:	d501      	bpl.n	8006c8c <_printf_i+0xec>
 8006c88:	681e      	ldr	r6, [r3, #0]
 8006c8a:	e002      	b.n	8006c92 <_printf_i+0xf2>
 8006c8c:	0646      	lsls	r6, r0, #25
 8006c8e:	d5fb      	bpl.n	8006c88 <_printf_i+0xe8>
 8006c90:	881e      	ldrh	r6, [r3, #0]
 8006c92:	2f6f      	cmp	r7, #111	; 0x6f
 8006c94:	bf0c      	ite	eq
 8006c96:	2308      	moveq	r3, #8
 8006c98:	230a      	movne	r3, #10
 8006c9a:	4852      	ldr	r0, [pc, #328]	; (8006de4 <_printf_i+0x244>)
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ca2:	6865      	ldr	r5, [r4, #4]
 8006ca4:	2d00      	cmp	r5, #0
 8006ca6:	bfa8      	it	ge
 8006ca8:	6821      	ldrge	r1, [r4, #0]
 8006caa:	60a5      	str	r5, [r4, #8]
 8006cac:	bfa4      	itt	ge
 8006cae:	f021 0104 	bicge.w	r1, r1, #4
 8006cb2:	6021      	strge	r1, [r4, #0]
 8006cb4:	b90e      	cbnz	r6, 8006cba <_printf_i+0x11a>
 8006cb6:	2d00      	cmp	r5, #0
 8006cb8:	d04d      	beq.n	8006d56 <_printf_i+0x1b6>
 8006cba:	4615      	mov	r5, r2
 8006cbc:	fbb6 f1f3 	udiv	r1, r6, r3
 8006cc0:	fb03 6711 	mls	r7, r3, r1, r6
 8006cc4:	5dc7      	ldrb	r7, [r0, r7]
 8006cc6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006cca:	4637      	mov	r7, r6
 8006ccc:	42bb      	cmp	r3, r7
 8006cce:	460e      	mov	r6, r1
 8006cd0:	d9f4      	bls.n	8006cbc <_printf_i+0x11c>
 8006cd2:	2b08      	cmp	r3, #8
 8006cd4:	d10b      	bne.n	8006cee <_printf_i+0x14e>
 8006cd6:	6823      	ldr	r3, [r4, #0]
 8006cd8:	07de      	lsls	r6, r3, #31
 8006cda:	d508      	bpl.n	8006cee <_printf_i+0x14e>
 8006cdc:	6923      	ldr	r3, [r4, #16]
 8006cde:	6861      	ldr	r1, [r4, #4]
 8006ce0:	4299      	cmp	r1, r3
 8006ce2:	bfde      	ittt	le
 8006ce4:	2330      	movle	r3, #48	; 0x30
 8006ce6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cea:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006cee:	1b52      	subs	r2, r2, r5
 8006cf0:	6122      	str	r2, [r4, #16]
 8006cf2:	464b      	mov	r3, r9
 8006cf4:	4621      	mov	r1, r4
 8006cf6:	4640      	mov	r0, r8
 8006cf8:	f8cd a000 	str.w	sl, [sp]
 8006cfc:	aa03      	add	r2, sp, #12
 8006cfe:	f7ff fedf 	bl	8006ac0 <_printf_common>
 8006d02:	3001      	adds	r0, #1
 8006d04:	d14c      	bne.n	8006da0 <_printf_i+0x200>
 8006d06:	f04f 30ff 	mov.w	r0, #4294967295
 8006d0a:	b004      	add	sp, #16
 8006d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d10:	4834      	ldr	r0, [pc, #208]	; (8006de4 <_printf_i+0x244>)
 8006d12:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d16:	6829      	ldr	r1, [r5, #0]
 8006d18:	6823      	ldr	r3, [r4, #0]
 8006d1a:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d1e:	6029      	str	r1, [r5, #0]
 8006d20:	061d      	lsls	r5, r3, #24
 8006d22:	d514      	bpl.n	8006d4e <_printf_i+0x1ae>
 8006d24:	07df      	lsls	r7, r3, #31
 8006d26:	bf44      	itt	mi
 8006d28:	f043 0320 	orrmi.w	r3, r3, #32
 8006d2c:	6023      	strmi	r3, [r4, #0]
 8006d2e:	b91e      	cbnz	r6, 8006d38 <_printf_i+0x198>
 8006d30:	6823      	ldr	r3, [r4, #0]
 8006d32:	f023 0320 	bic.w	r3, r3, #32
 8006d36:	6023      	str	r3, [r4, #0]
 8006d38:	2310      	movs	r3, #16
 8006d3a:	e7af      	b.n	8006c9c <_printf_i+0xfc>
 8006d3c:	6823      	ldr	r3, [r4, #0]
 8006d3e:	f043 0320 	orr.w	r3, r3, #32
 8006d42:	6023      	str	r3, [r4, #0]
 8006d44:	2378      	movs	r3, #120	; 0x78
 8006d46:	4828      	ldr	r0, [pc, #160]	; (8006de8 <_printf_i+0x248>)
 8006d48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d4c:	e7e3      	b.n	8006d16 <_printf_i+0x176>
 8006d4e:	0659      	lsls	r1, r3, #25
 8006d50:	bf48      	it	mi
 8006d52:	b2b6      	uxthmi	r6, r6
 8006d54:	e7e6      	b.n	8006d24 <_printf_i+0x184>
 8006d56:	4615      	mov	r5, r2
 8006d58:	e7bb      	b.n	8006cd2 <_printf_i+0x132>
 8006d5a:	682b      	ldr	r3, [r5, #0]
 8006d5c:	6826      	ldr	r6, [r4, #0]
 8006d5e:	1d18      	adds	r0, r3, #4
 8006d60:	6961      	ldr	r1, [r4, #20]
 8006d62:	6028      	str	r0, [r5, #0]
 8006d64:	0635      	lsls	r5, r6, #24
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	d501      	bpl.n	8006d6e <_printf_i+0x1ce>
 8006d6a:	6019      	str	r1, [r3, #0]
 8006d6c:	e002      	b.n	8006d74 <_printf_i+0x1d4>
 8006d6e:	0670      	lsls	r0, r6, #25
 8006d70:	d5fb      	bpl.n	8006d6a <_printf_i+0x1ca>
 8006d72:	8019      	strh	r1, [r3, #0]
 8006d74:	2300      	movs	r3, #0
 8006d76:	4615      	mov	r5, r2
 8006d78:	6123      	str	r3, [r4, #16]
 8006d7a:	e7ba      	b.n	8006cf2 <_printf_i+0x152>
 8006d7c:	682b      	ldr	r3, [r5, #0]
 8006d7e:	2100      	movs	r1, #0
 8006d80:	1d1a      	adds	r2, r3, #4
 8006d82:	602a      	str	r2, [r5, #0]
 8006d84:	681d      	ldr	r5, [r3, #0]
 8006d86:	6862      	ldr	r2, [r4, #4]
 8006d88:	4628      	mov	r0, r5
 8006d8a:	f002 f923 	bl	8008fd4 <memchr>
 8006d8e:	b108      	cbz	r0, 8006d94 <_printf_i+0x1f4>
 8006d90:	1b40      	subs	r0, r0, r5
 8006d92:	6060      	str	r0, [r4, #4]
 8006d94:	6863      	ldr	r3, [r4, #4]
 8006d96:	6123      	str	r3, [r4, #16]
 8006d98:	2300      	movs	r3, #0
 8006d9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d9e:	e7a8      	b.n	8006cf2 <_printf_i+0x152>
 8006da0:	462a      	mov	r2, r5
 8006da2:	4649      	mov	r1, r9
 8006da4:	4640      	mov	r0, r8
 8006da6:	6923      	ldr	r3, [r4, #16]
 8006da8:	47d0      	blx	sl
 8006daa:	3001      	adds	r0, #1
 8006dac:	d0ab      	beq.n	8006d06 <_printf_i+0x166>
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	079b      	lsls	r3, r3, #30
 8006db2:	d413      	bmi.n	8006ddc <_printf_i+0x23c>
 8006db4:	68e0      	ldr	r0, [r4, #12]
 8006db6:	9b03      	ldr	r3, [sp, #12]
 8006db8:	4298      	cmp	r0, r3
 8006dba:	bfb8      	it	lt
 8006dbc:	4618      	movlt	r0, r3
 8006dbe:	e7a4      	b.n	8006d0a <_printf_i+0x16a>
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	4632      	mov	r2, r6
 8006dc4:	4649      	mov	r1, r9
 8006dc6:	4640      	mov	r0, r8
 8006dc8:	47d0      	blx	sl
 8006dca:	3001      	adds	r0, #1
 8006dcc:	d09b      	beq.n	8006d06 <_printf_i+0x166>
 8006dce:	3501      	adds	r5, #1
 8006dd0:	68e3      	ldr	r3, [r4, #12]
 8006dd2:	9903      	ldr	r1, [sp, #12]
 8006dd4:	1a5b      	subs	r3, r3, r1
 8006dd6:	42ab      	cmp	r3, r5
 8006dd8:	dcf2      	bgt.n	8006dc0 <_printf_i+0x220>
 8006dda:	e7eb      	b.n	8006db4 <_printf_i+0x214>
 8006ddc:	2500      	movs	r5, #0
 8006dde:	f104 0619 	add.w	r6, r4, #25
 8006de2:	e7f5      	b.n	8006dd0 <_printf_i+0x230>
 8006de4:	0800aad2 	.word	0x0800aad2
 8006de8:	0800aae3 	.word	0x0800aae3

08006dec <siprintf>:
 8006dec:	b40e      	push	{r1, r2, r3}
 8006dee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006df2:	b500      	push	{lr}
 8006df4:	b09c      	sub	sp, #112	; 0x70
 8006df6:	ab1d      	add	r3, sp, #116	; 0x74
 8006df8:	9002      	str	r0, [sp, #8]
 8006dfa:	9006      	str	r0, [sp, #24]
 8006dfc:	9107      	str	r1, [sp, #28]
 8006dfe:	9104      	str	r1, [sp, #16]
 8006e00:	4808      	ldr	r0, [pc, #32]	; (8006e24 <siprintf+0x38>)
 8006e02:	4909      	ldr	r1, [pc, #36]	; (8006e28 <siprintf+0x3c>)
 8006e04:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e08:	9105      	str	r1, [sp, #20]
 8006e0a:	6800      	ldr	r0, [r0, #0]
 8006e0c:	a902      	add	r1, sp, #8
 8006e0e:	9301      	str	r3, [sp, #4]
 8006e10:	f002 ff00 	bl	8009c14 <_svfiprintf_r>
 8006e14:	2200      	movs	r2, #0
 8006e16:	9b02      	ldr	r3, [sp, #8]
 8006e18:	701a      	strb	r2, [r3, #0]
 8006e1a:	b01c      	add	sp, #112	; 0x70
 8006e1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e20:	b003      	add	sp, #12
 8006e22:	4770      	bx	lr
 8006e24:	20000040 	.word	0x20000040
 8006e28:	ffff0208 	.word	0xffff0208

08006e2c <sulp>:
 8006e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e30:	460f      	mov	r7, r1
 8006e32:	4690      	mov	r8, r2
 8006e34:	f002 fc5a 	bl	80096ec <__ulp>
 8006e38:	4604      	mov	r4, r0
 8006e3a:	460d      	mov	r5, r1
 8006e3c:	f1b8 0f00 	cmp.w	r8, #0
 8006e40:	d011      	beq.n	8006e66 <sulp+0x3a>
 8006e42:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006e46:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	dd0b      	ble.n	8006e66 <sulp+0x3a>
 8006e4e:	2400      	movs	r4, #0
 8006e50:	051b      	lsls	r3, r3, #20
 8006e52:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006e56:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006e5a:	4622      	mov	r2, r4
 8006e5c:	462b      	mov	r3, r5
 8006e5e:	f7f9 fb3b 	bl	80004d8 <__aeabi_dmul>
 8006e62:	4604      	mov	r4, r0
 8006e64:	460d      	mov	r5, r1
 8006e66:	4620      	mov	r0, r4
 8006e68:	4629      	mov	r1, r5
 8006e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006e70 <_strtod_l>:
 8006e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e74:	469b      	mov	fp, r3
 8006e76:	2300      	movs	r3, #0
 8006e78:	b09f      	sub	sp, #124	; 0x7c
 8006e7a:	931a      	str	r3, [sp, #104]	; 0x68
 8006e7c:	4b9e      	ldr	r3, [pc, #632]	; (80070f8 <_strtod_l+0x288>)
 8006e7e:	4682      	mov	sl, r0
 8006e80:	681f      	ldr	r7, [r3, #0]
 8006e82:	460e      	mov	r6, r1
 8006e84:	4638      	mov	r0, r7
 8006e86:	9215      	str	r2, [sp, #84]	; 0x54
 8006e88:	f7f9 f962 	bl	8000150 <strlen>
 8006e8c:	f04f 0800 	mov.w	r8, #0
 8006e90:	4604      	mov	r4, r0
 8006e92:	f04f 0900 	mov.w	r9, #0
 8006e96:	9619      	str	r6, [sp, #100]	; 0x64
 8006e98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e9a:	781a      	ldrb	r2, [r3, #0]
 8006e9c:	2a2b      	cmp	r2, #43	; 0x2b
 8006e9e:	d04c      	beq.n	8006f3a <_strtod_l+0xca>
 8006ea0:	d83a      	bhi.n	8006f18 <_strtod_l+0xa8>
 8006ea2:	2a0d      	cmp	r2, #13
 8006ea4:	d833      	bhi.n	8006f0e <_strtod_l+0x9e>
 8006ea6:	2a08      	cmp	r2, #8
 8006ea8:	d833      	bhi.n	8006f12 <_strtod_l+0xa2>
 8006eaa:	2a00      	cmp	r2, #0
 8006eac:	d03d      	beq.n	8006f2a <_strtod_l+0xba>
 8006eae:	2300      	movs	r3, #0
 8006eb0:	930a      	str	r3, [sp, #40]	; 0x28
 8006eb2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006eb4:	782b      	ldrb	r3, [r5, #0]
 8006eb6:	2b30      	cmp	r3, #48	; 0x30
 8006eb8:	f040 80aa 	bne.w	8007010 <_strtod_l+0x1a0>
 8006ebc:	786b      	ldrb	r3, [r5, #1]
 8006ebe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006ec2:	2b58      	cmp	r3, #88	; 0x58
 8006ec4:	d166      	bne.n	8006f94 <_strtod_l+0x124>
 8006ec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ec8:	4650      	mov	r0, sl
 8006eca:	9301      	str	r3, [sp, #4]
 8006ecc:	ab1a      	add	r3, sp, #104	; 0x68
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	4a8a      	ldr	r2, [pc, #552]	; (80070fc <_strtod_l+0x28c>)
 8006ed2:	f8cd b008 	str.w	fp, [sp, #8]
 8006ed6:	ab1b      	add	r3, sp, #108	; 0x6c
 8006ed8:	a919      	add	r1, sp, #100	; 0x64
 8006eda:	f001 fd5f 	bl	800899c <__gethex>
 8006ede:	f010 0607 	ands.w	r6, r0, #7
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	d005      	beq.n	8006ef2 <_strtod_l+0x82>
 8006ee6:	2e06      	cmp	r6, #6
 8006ee8:	d129      	bne.n	8006f3e <_strtod_l+0xce>
 8006eea:	2300      	movs	r3, #0
 8006eec:	3501      	adds	r5, #1
 8006eee:	9519      	str	r5, [sp, #100]	; 0x64
 8006ef0:	930a      	str	r3, [sp, #40]	; 0x28
 8006ef2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f040 858a 	bne.w	8007a0e <_strtod_l+0xb9e>
 8006efa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006efc:	b1d3      	cbz	r3, 8006f34 <_strtod_l+0xc4>
 8006efe:	4642      	mov	r2, r8
 8006f00:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006f04:	4610      	mov	r0, r2
 8006f06:	4619      	mov	r1, r3
 8006f08:	b01f      	add	sp, #124	; 0x7c
 8006f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f0e:	2a20      	cmp	r2, #32
 8006f10:	d1cd      	bne.n	8006eae <_strtod_l+0x3e>
 8006f12:	3301      	adds	r3, #1
 8006f14:	9319      	str	r3, [sp, #100]	; 0x64
 8006f16:	e7bf      	b.n	8006e98 <_strtod_l+0x28>
 8006f18:	2a2d      	cmp	r2, #45	; 0x2d
 8006f1a:	d1c8      	bne.n	8006eae <_strtod_l+0x3e>
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	920a      	str	r2, [sp, #40]	; 0x28
 8006f20:	1c5a      	adds	r2, r3, #1
 8006f22:	9219      	str	r2, [sp, #100]	; 0x64
 8006f24:	785b      	ldrb	r3, [r3, #1]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1c3      	bne.n	8006eb2 <_strtod_l+0x42>
 8006f2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f2c:	9619      	str	r6, [sp, #100]	; 0x64
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f040 856b 	bne.w	8007a0a <_strtod_l+0xb9a>
 8006f34:	4642      	mov	r2, r8
 8006f36:	464b      	mov	r3, r9
 8006f38:	e7e4      	b.n	8006f04 <_strtod_l+0x94>
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	e7ef      	b.n	8006f1e <_strtod_l+0xae>
 8006f3e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006f40:	b13a      	cbz	r2, 8006f52 <_strtod_l+0xe2>
 8006f42:	2135      	movs	r1, #53	; 0x35
 8006f44:	a81c      	add	r0, sp, #112	; 0x70
 8006f46:	f002 fcd5 	bl	80098f4 <__copybits>
 8006f4a:	4650      	mov	r0, sl
 8006f4c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006f4e:	f002 f89d 	bl	800908c <_Bfree>
 8006f52:	3e01      	subs	r6, #1
 8006f54:	2e04      	cmp	r6, #4
 8006f56:	d806      	bhi.n	8006f66 <_strtod_l+0xf6>
 8006f58:	e8df f006 	tbb	[pc, r6]
 8006f5c:	1714030a 	.word	0x1714030a
 8006f60:	0a          	.byte	0x0a
 8006f61:	00          	.byte	0x00
 8006f62:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006f66:	0721      	lsls	r1, r4, #28
 8006f68:	d5c3      	bpl.n	8006ef2 <_strtod_l+0x82>
 8006f6a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006f6e:	e7c0      	b.n	8006ef2 <_strtod_l+0x82>
 8006f70:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006f72:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8006f76:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006f7a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006f7e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006f82:	e7f0      	b.n	8006f66 <_strtod_l+0xf6>
 8006f84:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007100 <_strtod_l+0x290>
 8006f88:	e7ed      	b.n	8006f66 <_strtod_l+0xf6>
 8006f8a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006f8e:	f04f 38ff 	mov.w	r8, #4294967295
 8006f92:	e7e8      	b.n	8006f66 <_strtod_l+0xf6>
 8006f94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f96:	1c5a      	adds	r2, r3, #1
 8006f98:	9219      	str	r2, [sp, #100]	; 0x64
 8006f9a:	785b      	ldrb	r3, [r3, #1]
 8006f9c:	2b30      	cmp	r3, #48	; 0x30
 8006f9e:	d0f9      	beq.n	8006f94 <_strtod_l+0x124>
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d0a6      	beq.n	8006ef2 <_strtod_l+0x82>
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	9307      	str	r3, [sp, #28]
 8006fa8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006faa:	220a      	movs	r2, #10
 8006fac:	9308      	str	r3, [sp, #32]
 8006fae:	2300      	movs	r3, #0
 8006fb0:	469b      	mov	fp, r3
 8006fb2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006fb6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006fb8:	7805      	ldrb	r5, [r0, #0]
 8006fba:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006fbe:	b2d9      	uxtb	r1, r3
 8006fc0:	2909      	cmp	r1, #9
 8006fc2:	d927      	bls.n	8007014 <_strtod_l+0x1a4>
 8006fc4:	4622      	mov	r2, r4
 8006fc6:	4639      	mov	r1, r7
 8006fc8:	f002 ff3a 	bl	8009e40 <strncmp>
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	d033      	beq.n	8007038 <_strtod_l+0x1c8>
 8006fd0:	2000      	movs	r0, #0
 8006fd2:	462a      	mov	r2, r5
 8006fd4:	465c      	mov	r4, fp
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	9004      	str	r0, [sp, #16]
 8006fda:	2a65      	cmp	r2, #101	; 0x65
 8006fdc:	d001      	beq.n	8006fe2 <_strtod_l+0x172>
 8006fde:	2a45      	cmp	r2, #69	; 0x45
 8006fe0:	d114      	bne.n	800700c <_strtod_l+0x19c>
 8006fe2:	b91c      	cbnz	r4, 8006fec <_strtod_l+0x17c>
 8006fe4:	9a07      	ldr	r2, [sp, #28]
 8006fe6:	4302      	orrs	r2, r0
 8006fe8:	d09f      	beq.n	8006f2a <_strtod_l+0xba>
 8006fea:	2400      	movs	r4, #0
 8006fec:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006fee:	1c72      	adds	r2, r6, #1
 8006ff0:	9219      	str	r2, [sp, #100]	; 0x64
 8006ff2:	7872      	ldrb	r2, [r6, #1]
 8006ff4:	2a2b      	cmp	r2, #43	; 0x2b
 8006ff6:	d079      	beq.n	80070ec <_strtod_l+0x27c>
 8006ff8:	2a2d      	cmp	r2, #45	; 0x2d
 8006ffa:	f000 8083 	beq.w	8007104 <_strtod_l+0x294>
 8006ffe:	2700      	movs	r7, #0
 8007000:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007004:	2909      	cmp	r1, #9
 8007006:	f240 8083 	bls.w	8007110 <_strtod_l+0x2a0>
 800700a:	9619      	str	r6, [sp, #100]	; 0x64
 800700c:	2500      	movs	r5, #0
 800700e:	e09f      	b.n	8007150 <_strtod_l+0x2e0>
 8007010:	2300      	movs	r3, #0
 8007012:	e7c8      	b.n	8006fa6 <_strtod_l+0x136>
 8007014:	f1bb 0f08 	cmp.w	fp, #8
 8007018:	bfd5      	itete	le
 800701a:	9906      	ldrle	r1, [sp, #24]
 800701c:	9905      	ldrgt	r1, [sp, #20]
 800701e:	fb02 3301 	mlale	r3, r2, r1, r3
 8007022:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007026:	f100 0001 	add.w	r0, r0, #1
 800702a:	bfd4      	ite	le
 800702c:	9306      	strle	r3, [sp, #24]
 800702e:	9305      	strgt	r3, [sp, #20]
 8007030:	f10b 0b01 	add.w	fp, fp, #1
 8007034:	9019      	str	r0, [sp, #100]	; 0x64
 8007036:	e7be      	b.n	8006fb6 <_strtod_l+0x146>
 8007038:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800703a:	191a      	adds	r2, r3, r4
 800703c:	9219      	str	r2, [sp, #100]	; 0x64
 800703e:	5d1a      	ldrb	r2, [r3, r4]
 8007040:	f1bb 0f00 	cmp.w	fp, #0
 8007044:	d036      	beq.n	80070b4 <_strtod_l+0x244>
 8007046:	465c      	mov	r4, fp
 8007048:	9004      	str	r0, [sp, #16]
 800704a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800704e:	2b09      	cmp	r3, #9
 8007050:	d912      	bls.n	8007078 <_strtod_l+0x208>
 8007052:	2301      	movs	r3, #1
 8007054:	e7c1      	b.n	8006fda <_strtod_l+0x16a>
 8007056:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007058:	3001      	adds	r0, #1
 800705a:	1c5a      	adds	r2, r3, #1
 800705c:	9219      	str	r2, [sp, #100]	; 0x64
 800705e:	785a      	ldrb	r2, [r3, #1]
 8007060:	2a30      	cmp	r2, #48	; 0x30
 8007062:	d0f8      	beq.n	8007056 <_strtod_l+0x1e6>
 8007064:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007068:	2b08      	cmp	r3, #8
 800706a:	f200 84d5 	bhi.w	8007a18 <_strtod_l+0xba8>
 800706e:	9004      	str	r0, [sp, #16]
 8007070:	2000      	movs	r0, #0
 8007072:	4604      	mov	r4, r0
 8007074:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007076:	9308      	str	r3, [sp, #32]
 8007078:	3a30      	subs	r2, #48	; 0x30
 800707a:	f100 0301 	add.w	r3, r0, #1
 800707e:	d013      	beq.n	80070a8 <_strtod_l+0x238>
 8007080:	9904      	ldr	r1, [sp, #16]
 8007082:	1905      	adds	r5, r0, r4
 8007084:	4419      	add	r1, r3
 8007086:	9104      	str	r1, [sp, #16]
 8007088:	4623      	mov	r3, r4
 800708a:	210a      	movs	r1, #10
 800708c:	42ab      	cmp	r3, r5
 800708e:	d113      	bne.n	80070b8 <_strtod_l+0x248>
 8007090:	1823      	adds	r3, r4, r0
 8007092:	2b08      	cmp	r3, #8
 8007094:	f104 0401 	add.w	r4, r4, #1
 8007098:	4404      	add	r4, r0
 800709a:	dc1b      	bgt.n	80070d4 <_strtod_l+0x264>
 800709c:	230a      	movs	r3, #10
 800709e:	9906      	ldr	r1, [sp, #24]
 80070a0:	fb03 2301 	mla	r3, r3, r1, r2
 80070a4:	9306      	str	r3, [sp, #24]
 80070a6:	2300      	movs	r3, #0
 80070a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80070aa:	4618      	mov	r0, r3
 80070ac:	1c51      	adds	r1, r2, #1
 80070ae:	9119      	str	r1, [sp, #100]	; 0x64
 80070b0:	7852      	ldrb	r2, [r2, #1]
 80070b2:	e7ca      	b.n	800704a <_strtod_l+0x1da>
 80070b4:	4658      	mov	r0, fp
 80070b6:	e7d3      	b.n	8007060 <_strtod_l+0x1f0>
 80070b8:	2b08      	cmp	r3, #8
 80070ba:	dc04      	bgt.n	80070c6 <_strtod_l+0x256>
 80070bc:	9f06      	ldr	r7, [sp, #24]
 80070be:	434f      	muls	r7, r1
 80070c0:	9706      	str	r7, [sp, #24]
 80070c2:	3301      	adds	r3, #1
 80070c4:	e7e2      	b.n	800708c <_strtod_l+0x21c>
 80070c6:	1c5f      	adds	r7, r3, #1
 80070c8:	2f10      	cmp	r7, #16
 80070ca:	bfde      	ittt	le
 80070cc:	9f05      	ldrle	r7, [sp, #20]
 80070ce:	434f      	mulle	r7, r1
 80070d0:	9705      	strle	r7, [sp, #20]
 80070d2:	e7f6      	b.n	80070c2 <_strtod_l+0x252>
 80070d4:	2c10      	cmp	r4, #16
 80070d6:	bfdf      	itttt	le
 80070d8:	230a      	movle	r3, #10
 80070da:	9905      	ldrle	r1, [sp, #20]
 80070dc:	fb03 2301 	mlale	r3, r3, r1, r2
 80070e0:	9305      	strle	r3, [sp, #20]
 80070e2:	e7e0      	b.n	80070a6 <_strtod_l+0x236>
 80070e4:	2300      	movs	r3, #0
 80070e6:	9304      	str	r3, [sp, #16]
 80070e8:	2301      	movs	r3, #1
 80070ea:	e77b      	b.n	8006fe4 <_strtod_l+0x174>
 80070ec:	2700      	movs	r7, #0
 80070ee:	1cb2      	adds	r2, r6, #2
 80070f0:	9219      	str	r2, [sp, #100]	; 0x64
 80070f2:	78b2      	ldrb	r2, [r6, #2]
 80070f4:	e784      	b.n	8007000 <_strtod_l+0x190>
 80070f6:	bf00      	nop
 80070f8:	0800ad40 	.word	0x0800ad40
 80070fc:	0800aaf4 	.word	0x0800aaf4
 8007100:	7ff00000 	.word	0x7ff00000
 8007104:	2701      	movs	r7, #1
 8007106:	e7f2      	b.n	80070ee <_strtod_l+0x27e>
 8007108:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800710a:	1c51      	adds	r1, r2, #1
 800710c:	9119      	str	r1, [sp, #100]	; 0x64
 800710e:	7852      	ldrb	r2, [r2, #1]
 8007110:	2a30      	cmp	r2, #48	; 0x30
 8007112:	d0f9      	beq.n	8007108 <_strtod_l+0x298>
 8007114:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007118:	2908      	cmp	r1, #8
 800711a:	f63f af77 	bhi.w	800700c <_strtod_l+0x19c>
 800711e:	f04f 0e0a 	mov.w	lr, #10
 8007122:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8007126:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007128:	9209      	str	r2, [sp, #36]	; 0x24
 800712a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800712c:	1c51      	adds	r1, r2, #1
 800712e:	9119      	str	r1, [sp, #100]	; 0x64
 8007130:	7852      	ldrb	r2, [r2, #1]
 8007132:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8007136:	2d09      	cmp	r5, #9
 8007138:	d935      	bls.n	80071a6 <_strtod_l+0x336>
 800713a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800713c:	1b49      	subs	r1, r1, r5
 800713e:	2908      	cmp	r1, #8
 8007140:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007144:	dc02      	bgt.n	800714c <_strtod_l+0x2dc>
 8007146:	4565      	cmp	r5, ip
 8007148:	bfa8      	it	ge
 800714a:	4665      	movge	r5, ip
 800714c:	b107      	cbz	r7, 8007150 <_strtod_l+0x2e0>
 800714e:	426d      	negs	r5, r5
 8007150:	2c00      	cmp	r4, #0
 8007152:	d14c      	bne.n	80071ee <_strtod_l+0x37e>
 8007154:	9907      	ldr	r1, [sp, #28]
 8007156:	4301      	orrs	r1, r0
 8007158:	f47f aecb 	bne.w	8006ef2 <_strtod_l+0x82>
 800715c:	2b00      	cmp	r3, #0
 800715e:	f47f aee4 	bne.w	8006f2a <_strtod_l+0xba>
 8007162:	2a69      	cmp	r2, #105	; 0x69
 8007164:	d026      	beq.n	80071b4 <_strtod_l+0x344>
 8007166:	dc23      	bgt.n	80071b0 <_strtod_l+0x340>
 8007168:	2a49      	cmp	r2, #73	; 0x49
 800716a:	d023      	beq.n	80071b4 <_strtod_l+0x344>
 800716c:	2a4e      	cmp	r2, #78	; 0x4e
 800716e:	f47f aedc 	bne.w	8006f2a <_strtod_l+0xba>
 8007172:	499d      	ldr	r1, [pc, #628]	; (80073e8 <_strtod_l+0x578>)
 8007174:	a819      	add	r0, sp, #100	; 0x64
 8007176:	f001 fe5f 	bl	8008e38 <__match>
 800717a:	2800      	cmp	r0, #0
 800717c:	f43f aed5 	beq.w	8006f2a <_strtod_l+0xba>
 8007180:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	2b28      	cmp	r3, #40	; 0x28
 8007186:	d12c      	bne.n	80071e2 <_strtod_l+0x372>
 8007188:	4998      	ldr	r1, [pc, #608]	; (80073ec <_strtod_l+0x57c>)
 800718a:	aa1c      	add	r2, sp, #112	; 0x70
 800718c:	a819      	add	r0, sp, #100	; 0x64
 800718e:	f001 fe67 	bl	8008e60 <__hexnan>
 8007192:	2805      	cmp	r0, #5
 8007194:	d125      	bne.n	80071e2 <_strtod_l+0x372>
 8007196:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007198:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800719c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80071a0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80071a4:	e6a5      	b.n	8006ef2 <_strtod_l+0x82>
 80071a6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80071aa:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80071ae:	e7bc      	b.n	800712a <_strtod_l+0x2ba>
 80071b0:	2a6e      	cmp	r2, #110	; 0x6e
 80071b2:	e7dc      	b.n	800716e <_strtod_l+0x2fe>
 80071b4:	498e      	ldr	r1, [pc, #568]	; (80073f0 <_strtod_l+0x580>)
 80071b6:	a819      	add	r0, sp, #100	; 0x64
 80071b8:	f001 fe3e 	bl	8008e38 <__match>
 80071bc:	2800      	cmp	r0, #0
 80071be:	f43f aeb4 	beq.w	8006f2a <_strtod_l+0xba>
 80071c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80071c4:	498b      	ldr	r1, [pc, #556]	; (80073f4 <_strtod_l+0x584>)
 80071c6:	3b01      	subs	r3, #1
 80071c8:	a819      	add	r0, sp, #100	; 0x64
 80071ca:	9319      	str	r3, [sp, #100]	; 0x64
 80071cc:	f001 fe34 	bl	8008e38 <__match>
 80071d0:	b910      	cbnz	r0, 80071d8 <_strtod_l+0x368>
 80071d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80071d4:	3301      	adds	r3, #1
 80071d6:	9319      	str	r3, [sp, #100]	; 0x64
 80071d8:	f04f 0800 	mov.w	r8, #0
 80071dc:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80073f8 <_strtod_l+0x588>
 80071e0:	e687      	b.n	8006ef2 <_strtod_l+0x82>
 80071e2:	4886      	ldr	r0, [pc, #536]	; (80073fc <_strtod_l+0x58c>)
 80071e4:	f002 fe16 	bl	8009e14 <nan>
 80071e8:	4680      	mov	r8, r0
 80071ea:	4689      	mov	r9, r1
 80071ec:	e681      	b.n	8006ef2 <_strtod_l+0x82>
 80071ee:	9b04      	ldr	r3, [sp, #16]
 80071f0:	f1bb 0f00 	cmp.w	fp, #0
 80071f4:	bf08      	it	eq
 80071f6:	46a3      	moveq	fp, r4
 80071f8:	1aeb      	subs	r3, r5, r3
 80071fa:	2c10      	cmp	r4, #16
 80071fc:	9806      	ldr	r0, [sp, #24]
 80071fe:	4626      	mov	r6, r4
 8007200:	9307      	str	r3, [sp, #28]
 8007202:	bfa8      	it	ge
 8007204:	2610      	movge	r6, #16
 8007206:	f7f9 f8ed 	bl	80003e4 <__aeabi_ui2d>
 800720a:	2c09      	cmp	r4, #9
 800720c:	4680      	mov	r8, r0
 800720e:	4689      	mov	r9, r1
 8007210:	dd13      	ble.n	800723a <_strtod_l+0x3ca>
 8007212:	4b7b      	ldr	r3, [pc, #492]	; (8007400 <_strtod_l+0x590>)
 8007214:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007218:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800721c:	f7f9 f95c 	bl	80004d8 <__aeabi_dmul>
 8007220:	4680      	mov	r8, r0
 8007222:	9805      	ldr	r0, [sp, #20]
 8007224:	4689      	mov	r9, r1
 8007226:	f7f9 f8dd 	bl	80003e4 <__aeabi_ui2d>
 800722a:	4602      	mov	r2, r0
 800722c:	460b      	mov	r3, r1
 800722e:	4640      	mov	r0, r8
 8007230:	4649      	mov	r1, r9
 8007232:	f7f8 ff9b 	bl	800016c <__adddf3>
 8007236:	4680      	mov	r8, r0
 8007238:	4689      	mov	r9, r1
 800723a:	2c0f      	cmp	r4, #15
 800723c:	dc36      	bgt.n	80072ac <_strtod_l+0x43c>
 800723e:	9b07      	ldr	r3, [sp, #28]
 8007240:	2b00      	cmp	r3, #0
 8007242:	f43f ae56 	beq.w	8006ef2 <_strtod_l+0x82>
 8007246:	dd22      	ble.n	800728e <_strtod_l+0x41e>
 8007248:	2b16      	cmp	r3, #22
 800724a:	dc09      	bgt.n	8007260 <_strtod_l+0x3f0>
 800724c:	496c      	ldr	r1, [pc, #432]	; (8007400 <_strtod_l+0x590>)
 800724e:	4642      	mov	r2, r8
 8007250:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007254:	464b      	mov	r3, r9
 8007256:	e9d1 0100 	ldrd	r0, r1, [r1]
 800725a:	f7f9 f93d 	bl	80004d8 <__aeabi_dmul>
 800725e:	e7c3      	b.n	80071e8 <_strtod_l+0x378>
 8007260:	9a07      	ldr	r2, [sp, #28]
 8007262:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007266:	4293      	cmp	r3, r2
 8007268:	db20      	blt.n	80072ac <_strtod_l+0x43c>
 800726a:	4d65      	ldr	r5, [pc, #404]	; (8007400 <_strtod_l+0x590>)
 800726c:	f1c4 040f 	rsb	r4, r4, #15
 8007270:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007274:	4642      	mov	r2, r8
 8007276:	e9d1 0100 	ldrd	r0, r1, [r1]
 800727a:	464b      	mov	r3, r9
 800727c:	f7f9 f92c 	bl	80004d8 <__aeabi_dmul>
 8007280:	9b07      	ldr	r3, [sp, #28]
 8007282:	1b1c      	subs	r4, r3, r4
 8007284:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007288:	e9d5 2300 	ldrd	r2, r3, [r5]
 800728c:	e7e5      	b.n	800725a <_strtod_l+0x3ea>
 800728e:	9b07      	ldr	r3, [sp, #28]
 8007290:	3316      	adds	r3, #22
 8007292:	db0b      	blt.n	80072ac <_strtod_l+0x43c>
 8007294:	9b04      	ldr	r3, [sp, #16]
 8007296:	4640      	mov	r0, r8
 8007298:	1b5d      	subs	r5, r3, r5
 800729a:	4b59      	ldr	r3, [pc, #356]	; (8007400 <_strtod_l+0x590>)
 800729c:	4649      	mov	r1, r9
 800729e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80072a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80072a6:	f7f9 fa41 	bl	800072c <__aeabi_ddiv>
 80072aa:	e79d      	b.n	80071e8 <_strtod_l+0x378>
 80072ac:	9b07      	ldr	r3, [sp, #28]
 80072ae:	1ba6      	subs	r6, r4, r6
 80072b0:	441e      	add	r6, r3
 80072b2:	2e00      	cmp	r6, #0
 80072b4:	dd74      	ble.n	80073a0 <_strtod_l+0x530>
 80072b6:	f016 030f 	ands.w	r3, r6, #15
 80072ba:	d00a      	beq.n	80072d2 <_strtod_l+0x462>
 80072bc:	4950      	ldr	r1, [pc, #320]	; (8007400 <_strtod_l+0x590>)
 80072be:	4642      	mov	r2, r8
 80072c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80072c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072c8:	464b      	mov	r3, r9
 80072ca:	f7f9 f905 	bl	80004d8 <__aeabi_dmul>
 80072ce:	4680      	mov	r8, r0
 80072d0:	4689      	mov	r9, r1
 80072d2:	f036 060f 	bics.w	r6, r6, #15
 80072d6:	d052      	beq.n	800737e <_strtod_l+0x50e>
 80072d8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80072dc:	dd27      	ble.n	800732e <_strtod_l+0x4be>
 80072de:	f04f 0b00 	mov.w	fp, #0
 80072e2:	f8cd b010 	str.w	fp, [sp, #16]
 80072e6:	f8cd b020 	str.w	fp, [sp, #32]
 80072ea:	f8cd b018 	str.w	fp, [sp, #24]
 80072ee:	2322      	movs	r3, #34	; 0x22
 80072f0:	f04f 0800 	mov.w	r8, #0
 80072f4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80073f8 <_strtod_l+0x588>
 80072f8:	f8ca 3000 	str.w	r3, [sl]
 80072fc:	9b08      	ldr	r3, [sp, #32]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	f43f adf7 	beq.w	8006ef2 <_strtod_l+0x82>
 8007304:	4650      	mov	r0, sl
 8007306:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007308:	f001 fec0 	bl	800908c <_Bfree>
 800730c:	4650      	mov	r0, sl
 800730e:	9906      	ldr	r1, [sp, #24]
 8007310:	f001 febc 	bl	800908c <_Bfree>
 8007314:	4650      	mov	r0, sl
 8007316:	9904      	ldr	r1, [sp, #16]
 8007318:	f001 feb8 	bl	800908c <_Bfree>
 800731c:	4650      	mov	r0, sl
 800731e:	9908      	ldr	r1, [sp, #32]
 8007320:	f001 feb4 	bl	800908c <_Bfree>
 8007324:	4659      	mov	r1, fp
 8007326:	4650      	mov	r0, sl
 8007328:	f001 feb0 	bl	800908c <_Bfree>
 800732c:	e5e1      	b.n	8006ef2 <_strtod_l+0x82>
 800732e:	4b35      	ldr	r3, [pc, #212]	; (8007404 <_strtod_l+0x594>)
 8007330:	4640      	mov	r0, r8
 8007332:	9305      	str	r3, [sp, #20]
 8007334:	2300      	movs	r3, #0
 8007336:	4649      	mov	r1, r9
 8007338:	461f      	mov	r7, r3
 800733a:	1136      	asrs	r6, r6, #4
 800733c:	2e01      	cmp	r6, #1
 800733e:	dc21      	bgt.n	8007384 <_strtod_l+0x514>
 8007340:	b10b      	cbz	r3, 8007346 <_strtod_l+0x4d6>
 8007342:	4680      	mov	r8, r0
 8007344:	4689      	mov	r9, r1
 8007346:	4b2f      	ldr	r3, [pc, #188]	; (8007404 <_strtod_l+0x594>)
 8007348:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800734c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007350:	4642      	mov	r2, r8
 8007352:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007356:	464b      	mov	r3, r9
 8007358:	f7f9 f8be 	bl	80004d8 <__aeabi_dmul>
 800735c:	4b26      	ldr	r3, [pc, #152]	; (80073f8 <_strtod_l+0x588>)
 800735e:	460a      	mov	r2, r1
 8007360:	400b      	ands	r3, r1
 8007362:	4929      	ldr	r1, [pc, #164]	; (8007408 <_strtod_l+0x598>)
 8007364:	4680      	mov	r8, r0
 8007366:	428b      	cmp	r3, r1
 8007368:	d8b9      	bhi.n	80072de <_strtod_l+0x46e>
 800736a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800736e:	428b      	cmp	r3, r1
 8007370:	bf86      	itte	hi
 8007372:	f04f 38ff 	movhi.w	r8, #4294967295
 8007376:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800740c <_strtod_l+0x59c>
 800737a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800737e:	2300      	movs	r3, #0
 8007380:	9305      	str	r3, [sp, #20]
 8007382:	e07f      	b.n	8007484 <_strtod_l+0x614>
 8007384:	07f2      	lsls	r2, r6, #31
 8007386:	d505      	bpl.n	8007394 <_strtod_l+0x524>
 8007388:	9b05      	ldr	r3, [sp, #20]
 800738a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738e:	f7f9 f8a3 	bl	80004d8 <__aeabi_dmul>
 8007392:	2301      	movs	r3, #1
 8007394:	9a05      	ldr	r2, [sp, #20]
 8007396:	3701      	adds	r7, #1
 8007398:	3208      	adds	r2, #8
 800739a:	1076      	asrs	r6, r6, #1
 800739c:	9205      	str	r2, [sp, #20]
 800739e:	e7cd      	b.n	800733c <_strtod_l+0x4cc>
 80073a0:	d0ed      	beq.n	800737e <_strtod_l+0x50e>
 80073a2:	4276      	negs	r6, r6
 80073a4:	f016 020f 	ands.w	r2, r6, #15
 80073a8:	d00a      	beq.n	80073c0 <_strtod_l+0x550>
 80073aa:	4b15      	ldr	r3, [pc, #84]	; (8007400 <_strtod_l+0x590>)
 80073ac:	4640      	mov	r0, r8
 80073ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073b2:	4649      	mov	r1, r9
 80073b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b8:	f7f9 f9b8 	bl	800072c <__aeabi_ddiv>
 80073bc:	4680      	mov	r8, r0
 80073be:	4689      	mov	r9, r1
 80073c0:	1136      	asrs	r6, r6, #4
 80073c2:	d0dc      	beq.n	800737e <_strtod_l+0x50e>
 80073c4:	2e1f      	cmp	r6, #31
 80073c6:	dd23      	ble.n	8007410 <_strtod_l+0x5a0>
 80073c8:	f04f 0b00 	mov.w	fp, #0
 80073cc:	f8cd b010 	str.w	fp, [sp, #16]
 80073d0:	f8cd b020 	str.w	fp, [sp, #32]
 80073d4:	f8cd b018 	str.w	fp, [sp, #24]
 80073d8:	2322      	movs	r3, #34	; 0x22
 80073da:	f04f 0800 	mov.w	r8, #0
 80073de:	f04f 0900 	mov.w	r9, #0
 80073e2:	f8ca 3000 	str.w	r3, [sl]
 80073e6:	e789      	b.n	80072fc <_strtod_l+0x48c>
 80073e8:	0800aacd 	.word	0x0800aacd
 80073ec:	0800ab08 	.word	0x0800ab08
 80073f0:	0800aac5 	.word	0x0800aac5
 80073f4:	0800ac4c 	.word	0x0800ac4c
 80073f8:	7ff00000 	.word	0x7ff00000
 80073fc:	0800aef8 	.word	0x0800aef8
 8007400:	0800add8 	.word	0x0800add8
 8007404:	0800adb0 	.word	0x0800adb0
 8007408:	7ca00000 	.word	0x7ca00000
 800740c:	7fefffff 	.word	0x7fefffff
 8007410:	f016 0310 	ands.w	r3, r6, #16
 8007414:	bf18      	it	ne
 8007416:	236a      	movne	r3, #106	; 0x6a
 8007418:	4640      	mov	r0, r8
 800741a:	9305      	str	r3, [sp, #20]
 800741c:	4649      	mov	r1, r9
 800741e:	2300      	movs	r3, #0
 8007420:	4fb0      	ldr	r7, [pc, #704]	; (80076e4 <_strtod_l+0x874>)
 8007422:	07f2      	lsls	r2, r6, #31
 8007424:	d504      	bpl.n	8007430 <_strtod_l+0x5c0>
 8007426:	e9d7 2300 	ldrd	r2, r3, [r7]
 800742a:	f7f9 f855 	bl	80004d8 <__aeabi_dmul>
 800742e:	2301      	movs	r3, #1
 8007430:	1076      	asrs	r6, r6, #1
 8007432:	f107 0708 	add.w	r7, r7, #8
 8007436:	d1f4      	bne.n	8007422 <_strtod_l+0x5b2>
 8007438:	b10b      	cbz	r3, 800743e <_strtod_l+0x5ce>
 800743a:	4680      	mov	r8, r0
 800743c:	4689      	mov	r9, r1
 800743e:	9b05      	ldr	r3, [sp, #20]
 8007440:	b1c3      	cbz	r3, 8007474 <_strtod_l+0x604>
 8007442:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007446:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800744a:	2b00      	cmp	r3, #0
 800744c:	4649      	mov	r1, r9
 800744e:	dd11      	ble.n	8007474 <_strtod_l+0x604>
 8007450:	2b1f      	cmp	r3, #31
 8007452:	f340 8127 	ble.w	80076a4 <_strtod_l+0x834>
 8007456:	2b34      	cmp	r3, #52	; 0x34
 8007458:	bfd8      	it	le
 800745a:	f04f 33ff 	movle.w	r3, #4294967295
 800745e:	f04f 0800 	mov.w	r8, #0
 8007462:	bfcf      	iteee	gt
 8007464:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007468:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800746c:	fa03 f202 	lslle.w	r2, r3, r2
 8007470:	ea02 0901 	andle.w	r9, r2, r1
 8007474:	2200      	movs	r2, #0
 8007476:	2300      	movs	r3, #0
 8007478:	4640      	mov	r0, r8
 800747a:	4649      	mov	r1, r9
 800747c:	f7f9 fa94 	bl	80009a8 <__aeabi_dcmpeq>
 8007480:	2800      	cmp	r0, #0
 8007482:	d1a1      	bne.n	80073c8 <_strtod_l+0x558>
 8007484:	9b06      	ldr	r3, [sp, #24]
 8007486:	465a      	mov	r2, fp
 8007488:	9300      	str	r3, [sp, #0]
 800748a:	4650      	mov	r0, sl
 800748c:	4623      	mov	r3, r4
 800748e:	9908      	ldr	r1, [sp, #32]
 8007490:	f001 fe64 	bl	800915c <__s2b>
 8007494:	9008      	str	r0, [sp, #32]
 8007496:	2800      	cmp	r0, #0
 8007498:	f43f af21 	beq.w	80072de <_strtod_l+0x46e>
 800749c:	9b04      	ldr	r3, [sp, #16]
 800749e:	f04f 0b00 	mov.w	fp, #0
 80074a2:	1b5d      	subs	r5, r3, r5
 80074a4:	9b07      	ldr	r3, [sp, #28]
 80074a6:	f8cd b010 	str.w	fp, [sp, #16]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	bfb4      	ite	lt
 80074ae:	462b      	movlt	r3, r5
 80074b0:	2300      	movge	r3, #0
 80074b2:	930e      	str	r3, [sp, #56]	; 0x38
 80074b4:	9b07      	ldr	r3, [sp, #28]
 80074b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80074ba:	9314      	str	r3, [sp, #80]	; 0x50
 80074bc:	9b08      	ldr	r3, [sp, #32]
 80074be:	4650      	mov	r0, sl
 80074c0:	6859      	ldr	r1, [r3, #4]
 80074c2:	f001 fda3 	bl	800900c <_Balloc>
 80074c6:	9006      	str	r0, [sp, #24]
 80074c8:	2800      	cmp	r0, #0
 80074ca:	f43f af10 	beq.w	80072ee <_strtod_l+0x47e>
 80074ce:	9b08      	ldr	r3, [sp, #32]
 80074d0:	300c      	adds	r0, #12
 80074d2:	691a      	ldr	r2, [r3, #16]
 80074d4:	f103 010c 	add.w	r1, r3, #12
 80074d8:	3202      	adds	r2, #2
 80074da:	0092      	lsls	r2, r2, #2
 80074dc:	f001 fd88 	bl	8008ff0 <memcpy>
 80074e0:	ab1c      	add	r3, sp, #112	; 0x70
 80074e2:	9301      	str	r3, [sp, #4]
 80074e4:	ab1b      	add	r3, sp, #108	; 0x6c
 80074e6:	9300      	str	r3, [sp, #0]
 80074e8:	4642      	mov	r2, r8
 80074ea:	464b      	mov	r3, r9
 80074ec:	4650      	mov	r0, sl
 80074ee:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80074f2:	f002 f975 	bl	80097e0 <__d2b>
 80074f6:	901a      	str	r0, [sp, #104]	; 0x68
 80074f8:	2800      	cmp	r0, #0
 80074fa:	f43f aef8 	beq.w	80072ee <_strtod_l+0x47e>
 80074fe:	2101      	movs	r1, #1
 8007500:	4650      	mov	r0, sl
 8007502:	f001 fec3 	bl	800928c <__i2b>
 8007506:	4603      	mov	r3, r0
 8007508:	9004      	str	r0, [sp, #16]
 800750a:	2800      	cmp	r0, #0
 800750c:	f43f aeef 	beq.w	80072ee <_strtod_l+0x47e>
 8007510:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007512:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007514:	2d00      	cmp	r5, #0
 8007516:	bfab      	itete	ge
 8007518:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800751a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800751c:	18ee      	addge	r6, r5, r3
 800751e:	1b5c      	sublt	r4, r3, r5
 8007520:	9b05      	ldr	r3, [sp, #20]
 8007522:	bfa8      	it	ge
 8007524:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8007526:	eba5 0503 	sub.w	r5, r5, r3
 800752a:	4415      	add	r5, r2
 800752c:	4b6e      	ldr	r3, [pc, #440]	; (80076e8 <_strtod_l+0x878>)
 800752e:	f105 35ff 	add.w	r5, r5, #4294967295
 8007532:	bfb8      	it	lt
 8007534:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007536:	429d      	cmp	r5, r3
 8007538:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800753c:	f280 80c4 	bge.w	80076c8 <_strtod_l+0x858>
 8007540:	1b5b      	subs	r3, r3, r5
 8007542:	2b1f      	cmp	r3, #31
 8007544:	f04f 0701 	mov.w	r7, #1
 8007548:	eba2 0203 	sub.w	r2, r2, r3
 800754c:	f300 80b1 	bgt.w	80076b2 <_strtod_l+0x842>
 8007550:	2500      	movs	r5, #0
 8007552:	fa07 f303 	lsl.w	r3, r7, r3
 8007556:	930f      	str	r3, [sp, #60]	; 0x3c
 8007558:	18b7      	adds	r7, r6, r2
 800755a:	9b05      	ldr	r3, [sp, #20]
 800755c:	42be      	cmp	r6, r7
 800755e:	4414      	add	r4, r2
 8007560:	441c      	add	r4, r3
 8007562:	4633      	mov	r3, r6
 8007564:	bfa8      	it	ge
 8007566:	463b      	movge	r3, r7
 8007568:	42a3      	cmp	r3, r4
 800756a:	bfa8      	it	ge
 800756c:	4623      	movge	r3, r4
 800756e:	2b00      	cmp	r3, #0
 8007570:	bfc2      	ittt	gt
 8007572:	1aff      	subgt	r7, r7, r3
 8007574:	1ae4      	subgt	r4, r4, r3
 8007576:	1af6      	subgt	r6, r6, r3
 8007578:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800757a:	2b00      	cmp	r3, #0
 800757c:	dd17      	ble.n	80075ae <_strtod_l+0x73e>
 800757e:	461a      	mov	r2, r3
 8007580:	4650      	mov	r0, sl
 8007582:	9904      	ldr	r1, [sp, #16]
 8007584:	f001 ff40 	bl	8009408 <__pow5mult>
 8007588:	9004      	str	r0, [sp, #16]
 800758a:	2800      	cmp	r0, #0
 800758c:	f43f aeaf 	beq.w	80072ee <_strtod_l+0x47e>
 8007590:	4601      	mov	r1, r0
 8007592:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007594:	4650      	mov	r0, sl
 8007596:	f001 fe8f 	bl	80092b8 <__multiply>
 800759a:	9009      	str	r0, [sp, #36]	; 0x24
 800759c:	2800      	cmp	r0, #0
 800759e:	f43f aea6 	beq.w	80072ee <_strtod_l+0x47e>
 80075a2:	4650      	mov	r0, sl
 80075a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80075a6:	f001 fd71 	bl	800908c <_Bfree>
 80075aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ac:	931a      	str	r3, [sp, #104]	; 0x68
 80075ae:	2f00      	cmp	r7, #0
 80075b0:	f300 808e 	bgt.w	80076d0 <_strtod_l+0x860>
 80075b4:	9b07      	ldr	r3, [sp, #28]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	dd08      	ble.n	80075cc <_strtod_l+0x75c>
 80075ba:	4650      	mov	r0, sl
 80075bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80075be:	9906      	ldr	r1, [sp, #24]
 80075c0:	f001 ff22 	bl	8009408 <__pow5mult>
 80075c4:	9006      	str	r0, [sp, #24]
 80075c6:	2800      	cmp	r0, #0
 80075c8:	f43f ae91 	beq.w	80072ee <_strtod_l+0x47e>
 80075cc:	2c00      	cmp	r4, #0
 80075ce:	dd08      	ble.n	80075e2 <_strtod_l+0x772>
 80075d0:	4622      	mov	r2, r4
 80075d2:	4650      	mov	r0, sl
 80075d4:	9906      	ldr	r1, [sp, #24]
 80075d6:	f001 ff71 	bl	80094bc <__lshift>
 80075da:	9006      	str	r0, [sp, #24]
 80075dc:	2800      	cmp	r0, #0
 80075de:	f43f ae86 	beq.w	80072ee <_strtod_l+0x47e>
 80075e2:	2e00      	cmp	r6, #0
 80075e4:	dd08      	ble.n	80075f8 <_strtod_l+0x788>
 80075e6:	4632      	mov	r2, r6
 80075e8:	4650      	mov	r0, sl
 80075ea:	9904      	ldr	r1, [sp, #16]
 80075ec:	f001 ff66 	bl	80094bc <__lshift>
 80075f0:	9004      	str	r0, [sp, #16]
 80075f2:	2800      	cmp	r0, #0
 80075f4:	f43f ae7b 	beq.w	80072ee <_strtod_l+0x47e>
 80075f8:	4650      	mov	r0, sl
 80075fa:	9a06      	ldr	r2, [sp, #24]
 80075fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80075fe:	f001 ffe9 	bl	80095d4 <__mdiff>
 8007602:	4683      	mov	fp, r0
 8007604:	2800      	cmp	r0, #0
 8007606:	f43f ae72 	beq.w	80072ee <_strtod_l+0x47e>
 800760a:	2400      	movs	r4, #0
 800760c:	68c3      	ldr	r3, [r0, #12]
 800760e:	9904      	ldr	r1, [sp, #16]
 8007610:	60c4      	str	r4, [r0, #12]
 8007612:	930b      	str	r3, [sp, #44]	; 0x2c
 8007614:	f001 ffc2 	bl	800959c <__mcmp>
 8007618:	42a0      	cmp	r0, r4
 800761a:	da6b      	bge.n	80076f4 <_strtod_l+0x884>
 800761c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800761e:	ea53 0308 	orrs.w	r3, r3, r8
 8007622:	f040 8091 	bne.w	8007748 <_strtod_l+0x8d8>
 8007626:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800762a:	2b00      	cmp	r3, #0
 800762c:	f040 808c 	bne.w	8007748 <_strtod_l+0x8d8>
 8007630:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007634:	0d1b      	lsrs	r3, r3, #20
 8007636:	051b      	lsls	r3, r3, #20
 8007638:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800763c:	f240 8084 	bls.w	8007748 <_strtod_l+0x8d8>
 8007640:	f8db 3014 	ldr.w	r3, [fp, #20]
 8007644:	b91b      	cbnz	r3, 800764e <_strtod_l+0x7de>
 8007646:	f8db 3010 	ldr.w	r3, [fp, #16]
 800764a:	2b01      	cmp	r3, #1
 800764c:	dd7c      	ble.n	8007748 <_strtod_l+0x8d8>
 800764e:	4659      	mov	r1, fp
 8007650:	2201      	movs	r2, #1
 8007652:	4650      	mov	r0, sl
 8007654:	f001 ff32 	bl	80094bc <__lshift>
 8007658:	9904      	ldr	r1, [sp, #16]
 800765a:	4683      	mov	fp, r0
 800765c:	f001 ff9e 	bl	800959c <__mcmp>
 8007660:	2800      	cmp	r0, #0
 8007662:	dd71      	ble.n	8007748 <_strtod_l+0x8d8>
 8007664:	9905      	ldr	r1, [sp, #20]
 8007666:	464b      	mov	r3, r9
 8007668:	4a20      	ldr	r2, [pc, #128]	; (80076ec <_strtod_l+0x87c>)
 800766a:	2900      	cmp	r1, #0
 800766c:	f000 808c 	beq.w	8007788 <_strtod_l+0x918>
 8007670:	ea02 0109 	and.w	r1, r2, r9
 8007674:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007678:	f300 8086 	bgt.w	8007788 <_strtod_l+0x918>
 800767c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007680:	f77f aeaa 	ble.w	80073d8 <_strtod_l+0x568>
 8007684:	4640      	mov	r0, r8
 8007686:	4649      	mov	r1, r9
 8007688:	4b19      	ldr	r3, [pc, #100]	; (80076f0 <_strtod_l+0x880>)
 800768a:	2200      	movs	r2, #0
 800768c:	f7f8 ff24 	bl	80004d8 <__aeabi_dmul>
 8007690:	460b      	mov	r3, r1
 8007692:	4303      	orrs	r3, r0
 8007694:	bf08      	it	eq
 8007696:	2322      	moveq	r3, #34	; 0x22
 8007698:	4680      	mov	r8, r0
 800769a:	4689      	mov	r9, r1
 800769c:	bf08      	it	eq
 800769e:	f8ca 3000 	streq.w	r3, [sl]
 80076a2:	e62f      	b.n	8007304 <_strtod_l+0x494>
 80076a4:	f04f 32ff 	mov.w	r2, #4294967295
 80076a8:	fa02 f303 	lsl.w	r3, r2, r3
 80076ac:	ea03 0808 	and.w	r8, r3, r8
 80076b0:	e6e0      	b.n	8007474 <_strtod_l+0x604>
 80076b2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80076b6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80076ba:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80076be:	35e2      	adds	r5, #226	; 0xe2
 80076c0:	fa07 f505 	lsl.w	r5, r7, r5
 80076c4:	970f      	str	r7, [sp, #60]	; 0x3c
 80076c6:	e747      	b.n	8007558 <_strtod_l+0x6e8>
 80076c8:	2301      	movs	r3, #1
 80076ca:	2500      	movs	r5, #0
 80076cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80076ce:	e743      	b.n	8007558 <_strtod_l+0x6e8>
 80076d0:	463a      	mov	r2, r7
 80076d2:	4650      	mov	r0, sl
 80076d4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80076d6:	f001 fef1 	bl	80094bc <__lshift>
 80076da:	901a      	str	r0, [sp, #104]	; 0x68
 80076dc:	2800      	cmp	r0, #0
 80076de:	f47f af69 	bne.w	80075b4 <_strtod_l+0x744>
 80076e2:	e604      	b.n	80072ee <_strtod_l+0x47e>
 80076e4:	0800ab20 	.word	0x0800ab20
 80076e8:	fffffc02 	.word	0xfffffc02
 80076ec:	7ff00000 	.word	0x7ff00000
 80076f0:	39500000 	.word	0x39500000
 80076f4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80076f8:	d165      	bne.n	80077c6 <_strtod_l+0x956>
 80076fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80076fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007700:	b35a      	cbz	r2, 800775a <_strtod_l+0x8ea>
 8007702:	4a99      	ldr	r2, [pc, #612]	; (8007968 <_strtod_l+0xaf8>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d12b      	bne.n	8007760 <_strtod_l+0x8f0>
 8007708:	9b05      	ldr	r3, [sp, #20]
 800770a:	4641      	mov	r1, r8
 800770c:	b303      	cbz	r3, 8007750 <_strtod_l+0x8e0>
 800770e:	464a      	mov	r2, r9
 8007710:	4b96      	ldr	r3, [pc, #600]	; (800796c <_strtod_l+0xafc>)
 8007712:	4013      	ands	r3, r2
 8007714:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007718:	f04f 32ff 	mov.w	r2, #4294967295
 800771c:	d81b      	bhi.n	8007756 <_strtod_l+0x8e6>
 800771e:	0d1b      	lsrs	r3, r3, #20
 8007720:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007724:	fa02 f303 	lsl.w	r3, r2, r3
 8007728:	4299      	cmp	r1, r3
 800772a:	d119      	bne.n	8007760 <_strtod_l+0x8f0>
 800772c:	4b90      	ldr	r3, [pc, #576]	; (8007970 <_strtod_l+0xb00>)
 800772e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007730:	429a      	cmp	r2, r3
 8007732:	d102      	bne.n	800773a <_strtod_l+0x8ca>
 8007734:	3101      	adds	r1, #1
 8007736:	f43f adda 	beq.w	80072ee <_strtod_l+0x47e>
 800773a:	f04f 0800 	mov.w	r8, #0
 800773e:	4b8b      	ldr	r3, [pc, #556]	; (800796c <_strtod_l+0xafc>)
 8007740:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007742:	401a      	ands	r2, r3
 8007744:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8007748:	9b05      	ldr	r3, [sp, #20]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d19a      	bne.n	8007684 <_strtod_l+0x814>
 800774e:	e5d9      	b.n	8007304 <_strtod_l+0x494>
 8007750:	f04f 33ff 	mov.w	r3, #4294967295
 8007754:	e7e8      	b.n	8007728 <_strtod_l+0x8b8>
 8007756:	4613      	mov	r3, r2
 8007758:	e7e6      	b.n	8007728 <_strtod_l+0x8b8>
 800775a:	ea53 0308 	orrs.w	r3, r3, r8
 800775e:	d081      	beq.n	8007664 <_strtod_l+0x7f4>
 8007760:	b1e5      	cbz	r5, 800779c <_strtod_l+0x92c>
 8007762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007764:	421d      	tst	r5, r3
 8007766:	d0ef      	beq.n	8007748 <_strtod_l+0x8d8>
 8007768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800776a:	4640      	mov	r0, r8
 800776c:	4649      	mov	r1, r9
 800776e:	9a05      	ldr	r2, [sp, #20]
 8007770:	b1c3      	cbz	r3, 80077a4 <_strtod_l+0x934>
 8007772:	f7ff fb5b 	bl	8006e2c <sulp>
 8007776:	4602      	mov	r2, r0
 8007778:	460b      	mov	r3, r1
 800777a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800777e:	f7f8 fcf5 	bl	800016c <__adddf3>
 8007782:	4680      	mov	r8, r0
 8007784:	4689      	mov	r9, r1
 8007786:	e7df      	b.n	8007748 <_strtod_l+0x8d8>
 8007788:	4013      	ands	r3, r2
 800778a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800778e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007792:	f04f 38ff 	mov.w	r8, #4294967295
 8007796:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800779a:	e7d5      	b.n	8007748 <_strtod_l+0x8d8>
 800779c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800779e:	ea13 0f08 	tst.w	r3, r8
 80077a2:	e7e0      	b.n	8007766 <_strtod_l+0x8f6>
 80077a4:	f7ff fb42 	bl	8006e2c <sulp>
 80077a8:	4602      	mov	r2, r0
 80077aa:	460b      	mov	r3, r1
 80077ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80077b0:	f7f8 fcda 	bl	8000168 <__aeabi_dsub>
 80077b4:	2200      	movs	r2, #0
 80077b6:	2300      	movs	r3, #0
 80077b8:	4680      	mov	r8, r0
 80077ba:	4689      	mov	r9, r1
 80077bc:	f7f9 f8f4 	bl	80009a8 <__aeabi_dcmpeq>
 80077c0:	2800      	cmp	r0, #0
 80077c2:	d0c1      	beq.n	8007748 <_strtod_l+0x8d8>
 80077c4:	e608      	b.n	80073d8 <_strtod_l+0x568>
 80077c6:	4658      	mov	r0, fp
 80077c8:	9904      	ldr	r1, [sp, #16]
 80077ca:	f002 f865 	bl	8009898 <__ratio>
 80077ce:	2200      	movs	r2, #0
 80077d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80077d4:	4606      	mov	r6, r0
 80077d6:	460f      	mov	r7, r1
 80077d8:	f7f9 f8fa 	bl	80009d0 <__aeabi_dcmple>
 80077dc:	2800      	cmp	r0, #0
 80077de:	d070      	beq.n	80078c2 <_strtod_l+0xa52>
 80077e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d042      	beq.n	800786c <_strtod_l+0x9fc>
 80077e6:	2600      	movs	r6, #0
 80077e8:	4f62      	ldr	r7, [pc, #392]	; (8007974 <_strtod_l+0xb04>)
 80077ea:	4d62      	ldr	r5, [pc, #392]	; (8007974 <_strtod_l+0xb04>)
 80077ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80077f2:	0d1b      	lsrs	r3, r3, #20
 80077f4:	051b      	lsls	r3, r3, #20
 80077f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80077f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077fa:	4b5f      	ldr	r3, [pc, #380]	; (8007978 <_strtod_l+0xb08>)
 80077fc:	429a      	cmp	r2, r3
 80077fe:	f040 80c3 	bne.w	8007988 <_strtod_l+0xb18>
 8007802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007804:	4640      	mov	r0, r8
 8007806:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800780a:	4649      	mov	r1, r9
 800780c:	f001 ff6e 	bl	80096ec <__ulp>
 8007810:	4602      	mov	r2, r0
 8007812:	460b      	mov	r3, r1
 8007814:	4630      	mov	r0, r6
 8007816:	4639      	mov	r1, r7
 8007818:	f7f8 fe5e 	bl	80004d8 <__aeabi_dmul>
 800781c:	4642      	mov	r2, r8
 800781e:	464b      	mov	r3, r9
 8007820:	f7f8 fca4 	bl	800016c <__adddf3>
 8007824:	460b      	mov	r3, r1
 8007826:	4951      	ldr	r1, [pc, #324]	; (800796c <_strtod_l+0xafc>)
 8007828:	4a54      	ldr	r2, [pc, #336]	; (800797c <_strtod_l+0xb0c>)
 800782a:	4019      	ands	r1, r3
 800782c:	4291      	cmp	r1, r2
 800782e:	4680      	mov	r8, r0
 8007830:	d95d      	bls.n	80078ee <_strtod_l+0xa7e>
 8007832:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007834:	4b4e      	ldr	r3, [pc, #312]	; (8007970 <_strtod_l+0xb00>)
 8007836:	429a      	cmp	r2, r3
 8007838:	d103      	bne.n	8007842 <_strtod_l+0x9d2>
 800783a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800783c:	3301      	adds	r3, #1
 800783e:	f43f ad56 	beq.w	80072ee <_strtod_l+0x47e>
 8007842:	f04f 38ff 	mov.w	r8, #4294967295
 8007846:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007970 <_strtod_l+0xb00>
 800784a:	4650      	mov	r0, sl
 800784c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800784e:	f001 fc1d 	bl	800908c <_Bfree>
 8007852:	4650      	mov	r0, sl
 8007854:	9906      	ldr	r1, [sp, #24]
 8007856:	f001 fc19 	bl	800908c <_Bfree>
 800785a:	4650      	mov	r0, sl
 800785c:	9904      	ldr	r1, [sp, #16]
 800785e:	f001 fc15 	bl	800908c <_Bfree>
 8007862:	4659      	mov	r1, fp
 8007864:	4650      	mov	r0, sl
 8007866:	f001 fc11 	bl	800908c <_Bfree>
 800786a:	e627      	b.n	80074bc <_strtod_l+0x64c>
 800786c:	f1b8 0f00 	cmp.w	r8, #0
 8007870:	d119      	bne.n	80078a6 <_strtod_l+0xa36>
 8007872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007874:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007878:	b9e3      	cbnz	r3, 80078b4 <_strtod_l+0xa44>
 800787a:	2200      	movs	r2, #0
 800787c:	4630      	mov	r0, r6
 800787e:	4639      	mov	r1, r7
 8007880:	4b3c      	ldr	r3, [pc, #240]	; (8007974 <_strtod_l+0xb04>)
 8007882:	f7f9 f89b 	bl	80009bc <__aeabi_dcmplt>
 8007886:	b9c8      	cbnz	r0, 80078bc <_strtod_l+0xa4c>
 8007888:	2200      	movs	r2, #0
 800788a:	4630      	mov	r0, r6
 800788c:	4639      	mov	r1, r7
 800788e:	4b3c      	ldr	r3, [pc, #240]	; (8007980 <_strtod_l+0xb10>)
 8007890:	f7f8 fe22 	bl	80004d8 <__aeabi_dmul>
 8007894:	4604      	mov	r4, r0
 8007896:	460d      	mov	r5, r1
 8007898:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800789c:	9416      	str	r4, [sp, #88]	; 0x58
 800789e:	9317      	str	r3, [sp, #92]	; 0x5c
 80078a0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80078a4:	e7a2      	b.n	80077ec <_strtod_l+0x97c>
 80078a6:	f1b8 0f01 	cmp.w	r8, #1
 80078aa:	d103      	bne.n	80078b4 <_strtod_l+0xa44>
 80078ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f43f ad92 	beq.w	80073d8 <_strtod_l+0x568>
 80078b4:	2600      	movs	r6, #0
 80078b6:	2400      	movs	r4, #0
 80078b8:	4f32      	ldr	r7, [pc, #200]	; (8007984 <_strtod_l+0xb14>)
 80078ba:	e796      	b.n	80077ea <_strtod_l+0x97a>
 80078bc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80078be:	4d30      	ldr	r5, [pc, #192]	; (8007980 <_strtod_l+0xb10>)
 80078c0:	e7ea      	b.n	8007898 <_strtod_l+0xa28>
 80078c2:	4b2f      	ldr	r3, [pc, #188]	; (8007980 <_strtod_l+0xb10>)
 80078c4:	2200      	movs	r2, #0
 80078c6:	4630      	mov	r0, r6
 80078c8:	4639      	mov	r1, r7
 80078ca:	f7f8 fe05 	bl	80004d8 <__aeabi_dmul>
 80078ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078d0:	4604      	mov	r4, r0
 80078d2:	460d      	mov	r5, r1
 80078d4:	b933      	cbnz	r3, 80078e4 <_strtod_l+0xa74>
 80078d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078da:	9010      	str	r0, [sp, #64]	; 0x40
 80078dc:	9311      	str	r3, [sp, #68]	; 0x44
 80078de:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80078e2:	e783      	b.n	80077ec <_strtod_l+0x97c>
 80078e4:	4602      	mov	r2, r0
 80078e6:	460b      	mov	r3, r1
 80078e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80078ec:	e7f7      	b.n	80078de <_strtod_l+0xa6e>
 80078ee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80078f2:	9b05      	ldr	r3, [sp, #20]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1a8      	bne.n	800784a <_strtod_l+0x9da>
 80078f8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80078fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078fe:	0d1b      	lsrs	r3, r3, #20
 8007900:	051b      	lsls	r3, r3, #20
 8007902:	429a      	cmp	r2, r3
 8007904:	d1a1      	bne.n	800784a <_strtod_l+0x9da>
 8007906:	4620      	mov	r0, r4
 8007908:	4629      	mov	r1, r5
 800790a:	f7f9 fc27 	bl	800115c <__aeabi_d2lz>
 800790e:	f7f8 fdb5 	bl	800047c <__aeabi_l2d>
 8007912:	4602      	mov	r2, r0
 8007914:	460b      	mov	r3, r1
 8007916:	4620      	mov	r0, r4
 8007918:	4629      	mov	r1, r5
 800791a:	f7f8 fc25 	bl	8000168 <__aeabi_dsub>
 800791e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007920:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007924:	ea43 0308 	orr.w	r3, r3, r8
 8007928:	4313      	orrs	r3, r2
 800792a:	4604      	mov	r4, r0
 800792c:	460d      	mov	r5, r1
 800792e:	d066      	beq.n	80079fe <_strtod_l+0xb8e>
 8007930:	a309      	add	r3, pc, #36	; (adr r3, 8007958 <_strtod_l+0xae8>)
 8007932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007936:	f7f9 f841 	bl	80009bc <__aeabi_dcmplt>
 800793a:	2800      	cmp	r0, #0
 800793c:	f47f ace2 	bne.w	8007304 <_strtod_l+0x494>
 8007940:	a307      	add	r3, pc, #28	; (adr r3, 8007960 <_strtod_l+0xaf0>)
 8007942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007946:	4620      	mov	r0, r4
 8007948:	4629      	mov	r1, r5
 800794a:	f7f9 f855 	bl	80009f8 <__aeabi_dcmpgt>
 800794e:	2800      	cmp	r0, #0
 8007950:	f43f af7b 	beq.w	800784a <_strtod_l+0x9da>
 8007954:	e4d6      	b.n	8007304 <_strtod_l+0x494>
 8007956:	bf00      	nop
 8007958:	94a03595 	.word	0x94a03595
 800795c:	3fdfffff 	.word	0x3fdfffff
 8007960:	35afe535 	.word	0x35afe535
 8007964:	3fe00000 	.word	0x3fe00000
 8007968:	000fffff 	.word	0x000fffff
 800796c:	7ff00000 	.word	0x7ff00000
 8007970:	7fefffff 	.word	0x7fefffff
 8007974:	3ff00000 	.word	0x3ff00000
 8007978:	7fe00000 	.word	0x7fe00000
 800797c:	7c9fffff 	.word	0x7c9fffff
 8007980:	3fe00000 	.word	0x3fe00000
 8007984:	bff00000 	.word	0xbff00000
 8007988:	9b05      	ldr	r3, [sp, #20]
 800798a:	b313      	cbz	r3, 80079d2 <_strtod_l+0xb62>
 800798c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800798e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007992:	d81e      	bhi.n	80079d2 <_strtod_l+0xb62>
 8007994:	a326      	add	r3, pc, #152	; (adr r3, 8007a30 <_strtod_l+0xbc0>)
 8007996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799a:	4620      	mov	r0, r4
 800799c:	4629      	mov	r1, r5
 800799e:	f7f9 f817 	bl	80009d0 <__aeabi_dcmple>
 80079a2:	b190      	cbz	r0, 80079ca <_strtod_l+0xb5a>
 80079a4:	4629      	mov	r1, r5
 80079a6:	4620      	mov	r0, r4
 80079a8:	f7f9 f86e 	bl	8000a88 <__aeabi_d2uiz>
 80079ac:	2801      	cmp	r0, #1
 80079ae:	bf38      	it	cc
 80079b0:	2001      	movcc	r0, #1
 80079b2:	f7f8 fd17 	bl	80003e4 <__aeabi_ui2d>
 80079b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079b8:	4604      	mov	r4, r0
 80079ba:	460d      	mov	r5, r1
 80079bc:	b9d3      	cbnz	r3, 80079f4 <_strtod_l+0xb84>
 80079be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079c2:	9012      	str	r0, [sp, #72]	; 0x48
 80079c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80079c6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80079ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80079cc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80079d0:	1a9f      	subs	r7, r3, r2
 80079d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80079d6:	f001 fe89 	bl	80096ec <__ulp>
 80079da:	4602      	mov	r2, r0
 80079dc:	460b      	mov	r3, r1
 80079de:	4630      	mov	r0, r6
 80079e0:	4639      	mov	r1, r7
 80079e2:	f7f8 fd79 	bl	80004d8 <__aeabi_dmul>
 80079e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80079ea:	f7f8 fbbf 	bl	800016c <__adddf3>
 80079ee:	4680      	mov	r8, r0
 80079f0:	4689      	mov	r9, r1
 80079f2:	e77e      	b.n	80078f2 <_strtod_l+0xa82>
 80079f4:	4602      	mov	r2, r0
 80079f6:	460b      	mov	r3, r1
 80079f8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80079fc:	e7e3      	b.n	80079c6 <_strtod_l+0xb56>
 80079fe:	a30e      	add	r3, pc, #56	; (adr r3, 8007a38 <_strtod_l+0xbc8>)
 8007a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a04:	f7f8 ffda 	bl	80009bc <__aeabi_dcmplt>
 8007a08:	e7a1      	b.n	800794e <_strtod_l+0xade>
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	930a      	str	r3, [sp, #40]	; 0x28
 8007a0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a10:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007a12:	6013      	str	r3, [r2, #0]
 8007a14:	f7ff ba71 	b.w	8006efa <_strtod_l+0x8a>
 8007a18:	2a65      	cmp	r2, #101	; 0x65
 8007a1a:	f43f ab63 	beq.w	80070e4 <_strtod_l+0x274>
 8007a1e:	2a45      	cmp	r2, #69	; 0x45
 8007a20:	f43f ab60 	beq.w	80070e4 <_strtod_l+0x274>
 8007a24:	2301      	movs	r3, #1
 8007a26:	f7ff bb95 	b.w	8007154 <_strtod_l+0x2e4>
 8007a2a:	bf00      	nop
 8007a2c:	f3af 8000 	nop.w
 8007a30:	ffc00000 	.word	0xffc00000
 8007a34:	41dfffff 	.word	0x41dfffff
 8007a38:	94a03595 	.word	0x94a03595
 8007a3c:	3fcfffff 	.word	0x3fcfffff

08007a40 <strtod>:
 8007a40:	460a      	mov	r2, r1
 8007a42:	4601      	mov	r1, r0
 8007a44:	4802      	ldr	r0, [pc, #8]	; (8007a50 <strtod+0x10>)
 8007a46:	4b03      	ldr	r3, [pc, #12]	; (8007a54 <strtod+0x14>)
 8007a48:	6800      	ldr	r0, [r0, #0]
 8007a4a:	f7ff ba11 	b.w	8006e70 <_strtod_l>
 8007a4e:	bf00      	nop
 8007a50:	20000040 	.word	0x20000040
 8007a54:	200000a8 	.word	0x200000a8

08007a58 <_strtol_l.constprop.0>:
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a5e:	4680      	mov	r8, r0
 8007a60:	d001      	beq.n	8007a66 <_strtol_l.constprop.0+0xe>
 8007a62:	2b24      	cmp	r3, #36	; 0x24
 8007a64:	d906      	bls.n	8007a74 <_strtol_l.constprop.0+0x1c>
 8007a66:	f7fe fd2f 	bl	80064c8 <__errno>
 8007a6a:	2316      	movs	r3, #22
 8007a6c:	6003      	str	r3, [r0, #0]
 8007a6e:	2000      	movs	r0, #0
 8007a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a74:	460d      	mov	r5, r1
 8007a76:	4f35      	ldr	r7, [pc, #212]	; (8007b4c <_strtol_l.constprop.0+0xf4>)
 8007a78:	4628      	mov	r0, r5
 8007a7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a7e:	5de6      	ldrb	r6, [r4, r7]
 8007a80:	f016 0608 	ands.w	r6, r6, #8
 8007a84:	d1f8      	bne.n	8007a78 <_strtol_l.constprop.0+0x20>
 8007a86:	2c2d      	cmp	r4, #45	; 0x2d
 8007a88:	d12f      	bne.n	8007aea <_strtol_l.constprop.0+0x92>
 8007a8a:	2601      	movs	r6, #1
 8007a8c:	782c      	ldrb	r4, [r5, #0]
 8007a8e:	1c85      	adds	r5, r0, #2
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d057      	beq.n	8007b44 <_strtol_l.constprop.0+0xec>
 8007a94:	2b10      	cmp	r3, #16
 8007a96:	d109      	bne.n	8007aac <_strtol_l.constprop.0+0x54>
 8007a98:	2c30      	cmp	r4, #48	; 0x30
 8007a9a:	d107      	bne.n	8007aac <_strtol_l.constprop.0+0x54>
 8007a9c:	7828      	ldrb	r0, [r5, #0]
 8007a9e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007aa2:	2858      	cmp	r0, #88	; 0x58
 8007aa4:	d149      	bne.n	8007b3a <_strtol_l.constprop.0+0xe2>
 8007aa6:	2310      	movs	r3, #16
 8007aa8:	786c      	ldrb	r4, [r5, #1]
 8007aaa:	3502      	adds	r5, #2
 8007aac:	2700      	movs	r7, #0
 8007aae:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8007ab2:	f10e 3eff 	add.w	lr, lr, #4294967295
 8007ab6:	fbbe f9f3 	udiv	r9, lr, r3
 8007aba:	4638      	mov	r0, r7
 8007abc:	fb03 ea19 	mls	sl, r3, r9, lr
 8007ac0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007ac4:	f1bc 0f09 	cmp.w	ip, #9
 8007ac8:	d814      	bhi.n	8007af4 <_strtol_l.constprop.0+0x9c>
 8007aca:	4664      	mov	r4, ip
 8007acc:	42a3      	cmp	r3, r4
 8007ace:	dd22      	ble.n	8007b16 <_strtol_l.constprop.0+0xbe>
 8007ad0:	2f00      	cmp	r7, #0
 8007ad2:	db1d      	blt.n	8007b10 <_strtol_l.constprop.0+0xb8>
 8007ad4:	4581      	cmp	r9, r0
 8007ad6:	d31b      	bcc.n	8007b10 <_strtol_l.constprop.0+0xb8>
 8007ad8:	d101      	bne.n	8007ade <_strtol_l.constprop.0+0x86>
 8007ada:	45a2      	cmp	sl, r4
 8007adc:	db18      	blt.n	8007b10 <_strtol_l.constprop.0+0xb8>
 8007ade:	2701      	movs	r7, #1
 8007ae0:	fb00 4003 	mla	r0, r0, r3, r4
 8007ae4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ae8:	e7ea      	b.n	8007ac0 <_strtol_l.constprop.0+0x68>
 8007aea:	2c2b      	cmp	r4, #43	; 0x2b
 8007aec:	bf04      	itt	eq
 8007aee:	782c      	ldrbeq	r4, [r5, #0]
 8007af0:	1c85      	addeq	r5, r0, #2
 8007af2:	e7cd      	b.n	8007a90 <_strtol_l.constprop.0+0x38>
 8007af4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007af8:	f1bc 0f19 	cmp.w	ip, #25
 8007afc:	d801      	bhi.n	8007b02 <_strtol_l.constprop.0+0xaa>
 8007afe:	3c37      	subs	r4, #55	; 0x37
 8007b00:	e7e4      	b.n	8007acc <_strtol_l.constprop.0+0x74>
 8007b02:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007b06:	f1bc 0f19 	cmp.w	ip, #25
 8007b0a:	d804      	bhi.n	8007b16 <_strtol_l.constprop.0+0xbe>
 8007b0c:	3c57      	subs	r4, #87	; 0x57
 8007b0e:	e7dd      	b.n	8007acc <_strtol_l.constprop.0+0x74>
 8007b10:	f04f 37ff 	mov.w	r7, #4294967295
 8007b14:	e7e6      	b.n	8007ae4 <_strtol_l.constprop.0+0x8c>
 8007b16:	2f00      	cmp	r7, #0
 8007b18:	da07      	bge.n	8007b2a <_strtol_l.constprop.0+0xd2>
 8007b1a:	2322      	movs	r3, #34	; 0x22
 8007b1c:	4670      	mov	r0, lr
 8007b1e:	f8c8 3000 	str.w	r3, [r8]
 8007b22:	2a00      	cmp	r2, #0
 8007b24:	d0a4      	beq.n	8007a70 <_strtol_l.constprop.0+0x18>
 8007b26:	1e69      	subs	r1, r5, #1
 8007b28:	e005      	b.n	8007b36 <_strtol_l.constprop.0+0xde>
 8007b2a:	b106      	cbz	r6, 8007b2e <_strtol_l.constprop.0+0xd6>
 8007b2c:	4240      	negs	r0, r0
 8007b2e:	2a00      	cmp	r2, #0
 8007b30:	d09e      	beq.n	8007a70 <_strtol_l.constprop.0+0x18>
 8007b32:	2f00      	cmp	r7, #0
 8007b34:	d1f7      	bne.n	8007b26 <_strtol_l.constprop.0+0xce>
 8007b36:	6011      	str	r1, [r2, #0]
 8007b38:	e79a      	b.n	8007a70 <_strtol_l.constprop.0+0x18>
 8007b3a:	2430      	movs	r4, #48	; 0x30
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1b5      	bne.n	8007aac <_strtol_l.constprop.0+0x54>
 8007b40:	2308      	movs	r3, #8
 8007b42:	e7b3      	b.n	8007aac <_strtol_l.constprop.0+0x54>
 8007b44:	2c30      	cmp	r4, #48	; 0x30
 8007b46:	d0a9      	beq.n	8007a9c <_strtol_l.constprop.0+0x44>
 8007b48:	230a      	movs	r3, #10
 8007b4a:	e7af      	b.n	8007aac <_strtol_l.constprop.0+0x54>
 8007b4c:	0800ab49 	.word	0x0800ab49

08007b50 <strtol>:
 8007b50:	4613      	mov	r3, r2
 8007b52:	460a      	mov	r2, r1
 8007b54:	4601      	mov	r1, r0
 8007b56:	4802      	ldr	r0, [pc, #8]	; (8007b60 <strtol+0x10>)
 8007b58:	6800      	ldr	r0, [r0, #0]
 8007b5a:	f7ff bf7d 	b.w	8007a58 <_strtol_l.constprop.0>
 8007b5e:	bf00      	nop
 8007b60:	20000040 	.word	0x20000040

08007b64 <_vsniprintf_r>:
 8007b64:	b530      	push	{r4, r5, lr}
 8007b66:	4614      	mov	r4, r2
 8007b68:	2c00      	cmp	r4, #0
 8007b6a:	4605      	mov	r5, r0
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	b09b      	sub	sp, #108	; 0x6c
 8007b70:	da05      	bge.n	8007b7e <_vsniprintf_r+0x1a>
 8007b72:	238b      	movs	r3, #139	; 0x8b
 8007b74:	6003      	str	r3, [r0, #0]
 8007b76:	f04f 30ff 	mov.w	r0, #4294967295
 8007b7a:	b01b      	add	sp, #108	; 0x6c
 8007b7c:	bd30      	pop	{r4, r5, pc}
 8007b7e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007b82:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007b86:	bf0c      	ite	eq
 8007b88:	4623      	moveq	r3, r4
 8007b8a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007b8e:	9302      	str	r3, [sp, #8]
 8007b90:	9305      	str	r3, [sp, #20]
 8007b92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007b96:	9100      	str	r1, [sp, #0]
 8007b98:	9104      	str	r1, [sp, #16]
 8007b9a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007b9e:	4669      	mov	r1, sp
 8007ba0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007ba2:	f002 f837 	bl	8009c14 <_svfiprintf_r>
 8007ba6:	1c43      	adds	r3, r0, #1
 8007ba8:	bfbc      	itt	lt
 8007baa:	238b      	movlt	r3, #139	; 0x8b
 8007bac:	602b      	strlt	r3, [r5, #0]
 8007bae:	2c00      	cmp	r4, #0
 8007bb0:	d0e3      	beq.n	8007b7a <_vsniprintf_r+0x16>
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	9b00      	ldr	r3, [sp, #0]
 8007bb6:	701a      	strb	r2, [r3, #0]
 8007bb8:	e7df      	b.n	8007b7a <_vsniprintf_r+0x16>
	...

08007bbc <vsniprintf>:
 8007bbc:	b507      	push	{r0, r1, r2, lr}
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	460a      	mov	r2, r1
 8007bc4:	4601      	mov	r1, r0
 8007bc6:	4803      	ldr	r0, [pc, #12]	; (8007bd4 <vsniprintf+0x18>)
 8007bc8:	6800      	ldr	r0, [r0, #0]
 8007bca:	f7ff ffcb 	bl	8007b64 <_vsniprintf_r>
 8007bce:	b003      	add	sp, #12
 8007bd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8007bd4:	20000040 	.word	0x20000040

08007bd8 <quorem>:
 8007bd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bdc:	6903      	ldr	r3, [r0, #16]
 8007bde:	690c      	ldr	r4, [r1, #16]
 8007be0:	4607      	mov	r7, r0
 8007be2:	42a3      	cmp	r3, r4
 8007be4:	f2c0 8082 	blt.w	8007cec <quorem+0x114>
 8007be8:	3c01      	subs	r4, #1
 8007bea:	f100 0514 	add.w	r5, r0, #20
 8007bee:	f101 0814 	add.w	r8, r1, #20
 8007bf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bf6:	9301      	str	r3, [sp, #4]
 8007bf8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007bfc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c00:	3301      	adds	r3, #1
 8007c02:	429a      	cmp	r2, r3
 8007c04:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c08:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007c0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c10:	d331      	bcc.n	8007c76 <quorem+0x9e>
 8007c12:	f04f 0e00 	mov.w	lr, #0
 8007c16:	4640      	mov	r0, r8
 8007c18:	46ac      	mov	ip, r5
 8007c1a:	46f2      	mov	sl, lr
 8007c1c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007c20:	b293      	uxth	r3, r2
 8007c22:	fb06 e303 	mla	r3, r6, r3, lr
 8007c26:	0c12      	lsrs	r2, r2, #16
 8007c28:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	fb06 e202 	mla	r2, r6, r2, lr
 8007c32:	ebaa 0303 	sub.w	r3, sl, r3
 8007c36:	f8dc a000 	ldr.w	sl, [ip]
 8007c3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c3e:	fa1f fa8a 	uxth.w	sl, sl
 8007c42:	4453      	add	r3, sl
 8007c44:	f8dc a000 	ldr.w	sl, [ip]
 8007c48:	b292      	uxth	r2, r2
 8007c4a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007c4e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c58:	4581      	cmp	r9, r0
 8007c5a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c5e:	f84c 3b04 	str.w	r3, [ip], #4
 8007c62:	d2db      	bcs.n	8007c1c <quorem+0x44>
 8007c64:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c68:	b92b      	cbnz	r3, 8007c76 <quorem+0x9e>
 8007c6a:	9b01      	ldr	r3, [sp, #4]
 8007c6c:	3b04      	subs	r3, #4
 8007c6e:	429d      	cmp	r5, r3
 8007c70:	461a      	mov	r2, r3
 8007c72:	d32f      	bcc.n	8007cd4 <quorem+0xfc>
 8007c74:	613c      	str	r4, [r7, #16]
 8007c76:	4638      	mov	r0, r7
 8007c78:	f001 fc90 	bl	800959c <__mcmp>
 8007c7c:	2800      	cmp	r0, #0
 8007c7e:	db25      	blt.n	8007ccc <quorem+0xf4>
 8007c80:	4628      	mov	r0, r5
 8007c82:	f04f 0c00 	mov.w	ip, #0
 8007c86:	3601      	adds	r6, #1
 8007c88:	f858 1b04 	ldr.w	r1, [r8], #4
 8007c8c:	f8d0 e000 	ldr.w	lr, [r0]
 8007c90:	b28b      	uxth	r3, r1
 8007c92:	ebac 0303 	sub.w	r3, ip, r3
 8007c96:	fa1f f28e 	uxth.w	r2, lr
 8007c9a:	4413      	add	r3, r2
 8007c9c:	0c0a      	lsrs	r2, r1, #16
 8007c9e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ca2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cac:	45c1      	cmp	r9, r8
 8007cae:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007cb2:	f840 3b04 	str.w	r3, [r0], #4
 8007cb6:	d2e7      	bcs.n	8007c88 <quorem+0xb0>
 8007cb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007cbc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cc0:	b922      	cbnz	r2, 8007ccc <quorem+0xf4>
 8007cc2:	3b04      	subs	r3, #4
 8007cc4:	429d      	cmp	r5, r3
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	d30a      	bcc.n	8007ce0 <quorem+0x108>
 8007cca:	613c      	str	r4, [r7, #16]
 8007ccc:	4630      	mov	r0, r6
 8007cce:	b003      	add	sp, #12
 8007cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd4:	6812      	ldr	r2, [r2, #0]
 8007cd6:	3b04      	subs	r3, #4
 8007cd8:	2a00      	cmp	r2, #0
 8007cda:	d1cb      	bne.n	8007c74 <quorem+0x9c>
 8007cdc:	3c01      	subs	r4, #1
 8007cde:	e7c6      	b.n	8007c6e <quorem+0x96>
 8007ce0:	6812      	ldr	r2, [r2, #0]
 8007ce2:	3b04      	subs	r3, #4
 8007ce4:	2a00      	cmp	r2, #0
 8007ce6:	d1f0      	bne.n	8007cca <quorem+0xf2>
 8007ce8:	3c01      	subs	r4, #1
 8007cea:	e7eb      	b.n	8007cc4 <quorem+0xec>
 8007cec:	2000      	movs	r0, #0
 8007cee:	e7ee      	b.n	8007cce <quorem+0xf6>

08007cf0 <_dtoa_r>:
 8007cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf4:	4616      	mov	r6, r2
 8007cf6:	461f      	mov	r7, r3
 8007cf8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007cfa:	b099      	sub	sp, #100	; 0x64
 8007cfc:	4605      	mov	r5, r0
 8007cfe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007d02:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007d06:	b974      	cbnz	r4, 8007d26 <_dtoa_r+0x36>
 8007d08:	2010      	movs	r0, #16
 8007d0a:	f001 f949 	bl	8008fa0 <malloc>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	6268      	str	r0, [r5, #36]	; 0x24
 8007d12:	b920      	cbnz	r0, 8007d1e <_dtoa_r+0x2e>
 8007d14:	21ea      	movs	r1, #234	; 0xea
 8007d16:	4ba8      	ldr	r3, [pc, #672]	; (8007fb8 <_dtoa_r+0x2c8>)
 8007d18:	48a8      	ldr	r0, [pc, #672]	; (8007fbc <_dtoa_r+0x2cc>)
 8007d1a:	f002 f8b3 	bl	8009e84 <__assert_func>
 8007d1e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d22:	6004      	str	r4, [r0, #0]
 8007d24:	60c4      	str	r4, [r0, #12]
 8007d26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007d28:	6819      	ldr	r1, [r3, #0]
 8007d2a:	b151      	cbz	r1, 8007d42 <_dtoa_r+0x52>
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	2301      	movs	r3, #1
 8007d30:	4093      	lsls	r3, r2
 8007d32:	604a      	str	r2, [r1, #4]
 8007d34:	608b      	str	r3, [r1, #8]
 8007d36:	4628      	mov	r0, r5
 8007d38:	f001 f9a8 	bl	800908c <_Bfree>
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007d40:	601a      	str	r2, [r3, #0]
 8007d42:	1e3b      	subs	r3, r7, #0
 8007d44:	bfaf      	iteee	ge
 8007d46:	2300      	movge	r3, #0
 8007d48:	2201      	movlt	r2, #1
 8007d4a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007d4e:	9305      	strlt	r3, [sp, #20]
 8007d50:	bfa8      	it	ge
 8007d52:	f8c8 3000 	strge.w	r3, [r8]
 8007d56:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007d5a:	4b99      	ldr	r3, [pc, #612]	; (8007fc0 <_dtoa_r+0x2d0>)
 8007d5c:	bfb8      	it	lt
 8007d5e:	f8c8 2000 	strlt.w	r2, [r8]
 8007d62:	ea33 0309 	bics.w	r3, r3, r9
 8007d66:	d119      	bne.n	8007d9c <_dtoa_r+0xac>
 8007d68:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d6c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007d6e:	6013      	str	r3, [r2, #0]
 8007d70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d74:	4333      	orrs	r3, r6
 8007d76:	f000 857f 	beq.w	8008878 <_dtoa_r+0xb88>
 8007d7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d7c:	b953      	cbnz	r3, 8007d94 <_dtoa_r+0xa4>
 8007d7e:	4b91      	ldr	r3, [pc, #580]	; (8007fc4 <_dtoa_r+0x2d4>)
 8007d80:	e022      	b.n	8007dc8 <_dtoa_r+0xd8>
 8007d82:	4b91      	ldr	r3, [pc, #580]	; (8007fc8 <_dtoa_r+0x2d8>)
 8007d84:	9303      	str	r3, [sp, #12]
 8007d86:	3308      	adds	r3, #8
 8007d88:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007d8a:	6013      	str	r3, [r2, #0]
 8007d8c:	9803      	ldr	r0, [sp, #12]
 8007d8e:	b019      	add	sp, #100	; 0x64
 8007d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d94:	4b8b      	ldr	r3, [pc, #556]	; (8007fc4 <_dtoa_r+0x2d4>)
 8007d96:	9303      	str	r3, [sp, #12]
 8007d98:	3303      	adds	r3, #3
 8007d9a:	e7f5      	b.n	8007d88 <_dtoa_r+0x98>
 8007d9c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007da0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007da4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007da8:	2200      	movs	r2, #0
 8007daa:	2300      	movs	r3, #0
 8007dac:	f7f8 fdfc 	bl	80009a8 <__aeabi_dcmpeq>
 8007db0:	4680      	mov	r8, r0
 8007db2:	b158      	cbz	r0, 8007dcc <_dtoa_r+0xdc>
 8007db4:	2301      	movs	r3, #1
 8007db6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007db8:	6013      	str	r3, [r2, #0]
 8007dba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f000 8558 	beq.w	8008872 <_dtoa_r+0xb82>
 8007dc2:	4882      	ldr	r0, [pc, #520]	; (8007fcc <_dtoa_r+0x2dc>)
 8007dc4:	6018      	str	r0, [r3, #0]
 8007dc6:	1e43      	subs	r3, r0, #1
 8007dc8:	9303      	str	r3, [sp, #12]
 8007dca:	e7df      	b.n	8007d8c <_dtoa_r+0x9c>
 8007dcc:	ab16      	add	r3, sp, #88	; 0x58
 8007dce:	9301      	str	r3, [sp, #4]
 8007dd0:	ab17      	add	r3, sp, #92	; 0x5c
 8007dd2:	9300      	str	r3, [sp, #0]
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007dda:	f001 fd01 	bl	80097e0 <__d2b>
 8007dde:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007de2:	4683      	mov	fp, r0
 8007de4:	2c00      	cmp	r4, #0
 8007de6:	d07f      	beq.n	8007ee8 <_dtoa_r+0x1f8>
 8007de8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007dec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dee:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007df2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007df6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007dfa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007dfe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007e02:	2200      	movs	r2, #0
 8007e04:	4b72      	ldr	r3, [pc, #456]	; (8007fd0 <_dtoa_r+0x2e0>)
 8007e06:	f7f8 f9af 	bl	8000168 <__aeabi_dsub>
 8007e0a:	a365      	add	r3, pc, #404	; (adr r3, 8007fa0 <_dtoa_r+0x2b0>)
 8007e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e10:	f7f8 fb62 	bl	80004d8 <__aeabi_dmul>
 8007e14:	a364      	add	r3, pc, #400	; (adr r3, 8007fa8 <_dtoa_r+0x2b8>)
 8007e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1a:	f7f8 f9a7 	bl	800016c <__adddf3>
 8007e1e:	4606      	mov	r6, r0
 8007e20:	4620      	mov	r0, r4
 8007e22:	460f      	mov	r7, r1
 8007e24:	f7f8 faee 	bl	8000404 <__aeabi_i2d>
 8007e28:	a361      	add	r3, pc, #388	; (adr r3, 8007fb0 <_dtoa_r+0x2c0>)
 8007e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2e:	f7f8 fb53 	bl	80004d8 <__aeabi_dmul>
 8007e32:	4602      	mov	r2, r0
 8007e34:	460b      	mov	r3, r1
 8007e36:	4630      	mov	r0, r6
 8007e38:	4639      	mov	r1, r7
 8007e3a:	f7f8 f997 	bl	800016c <__adddf3>
 8007e3e:	4606      	mov	r6, r0
 8007e40:	460f      	mov	r7, r1
 8007e42:	f7f8 fdf9 	bl	8000a38 <__aeabi_d2iz>
 8007e46:	2200      	movs	r2, #0
 8007e48:	4682      	mov	sl, r0
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	4639      	mov	r1, r7
 8007e50:	f7f8 fdb4 	bl	80009bc <__aeabi_dcmplt>
 8007e54:	b148      	cbz	r0, 8007e6a <_dtoa_r+0x17a>
 8007e56:	4650      	mov	r0, sl
 8007e58:	f7f8 fad4 	bl	8000404 <__aeabi_i2d>
 8007e5c:	4632      	mov	r2, r6
 8007e5e:	463b      	mov	r3, r7
 8007e60:	f7f8 fda2 	bl	80009a8 <__aeabi_dcmpeq>
 8007e64:	b908      	cbnz	r0, 8007e6a <_dtoa_r+0x17a>
 8007e66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e6a:	f1ba 0f16 	cmp.w	sl, #22
 8007e6e:	d858      	bhi.n	8007f22 <_dtoa_r+0x232>
 8007e70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e74:	4b57      	ldr	r3, [pc, #348]	; (8007fd4 <_dtoa_r+0x2e4>)
 8007e76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7e:	f7f8 fd9d 	bl	80009bc <__aeabi_dcmplt>
 8007e82:	2800      	cmp	r0, #0
 8007e84:	d04f      	beq.n	8007f26 <_dtoa_r+0x236>
 8007e86:	2300      	movs	r3, #0
 8007e88:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e8e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007e90:	1b1c      	subs	r4, r3, r4
 8007e92:	1e63      	subs	r3, r4, #1
 8007e94:	9309      	str	r3, [sp, #36]	; 0x24
 8007e96:	bf49      	itett	mi
 8007e98:	f1c4 0301 	rsbmi	r3, r4, #1
 8007e9c:	2300      	movpl	r3, #0
 8007e9e:	9306      	strmi	r3, [sp, #24]
 8007ea0:	2300      	movmi	r3, #0
 8007ea2:	bf54      	ite	pl
 8007ea4:	9306      	strpl	r3, [sp, #24]
 8007ea6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007ea8:	f1ba 0f00 	cmp.w	sl, #0
 8007eac:	db3d      	blt.n	8007f2a <_dtoa_r+0x23a>
 8007eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eb0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007eb4:	4453      	add	r3, sl
 8007eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8007eb8:	2300      	movs	r3, #0
 8007eba:	930a      	str	r3, [sp, #40]	; 0x28
 8007ebc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ebe:	2b09      	cmp	r3, #9
 8007ec0:	f200 808c 	bhi.w	8007fdc <_dtoa_r+0x2ec>
 8007ec4:	2b05      	cmp	r3, #5
 8007ec6:	bfc4      	itt	gt
 8007ec8:	3b04      	subgt	r3, #4
 8007eca:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007ecc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ece:	bfc8      	it	gt
 8007ed0:	2400      	movgt	r4, #0
 8007ed2:	f1a3 0302 	sub.w	r3, r3, #2
 8007ed6:	bfd8      	it	le
 8007ed8:	2401      	movle	r4, #1
 8007eda:	2b03      	cmp	r3, #3
 8007edc:	f200 808a 	bhi.w	8007ff4 <_dtoa_r+0x304>
 8007ee0:	e8df f003 	tbb	[pc, r3]
 8007ee4:	5b4d4f2d 	.word	0x5b4d4f2d
 8007ee8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007eec:	441c      	add	r4, r3
 8007eee:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007ef2:	2b20      	cmp	r3, #32
 8007ef4:	bfc3      	ittte	gt
 8007ef6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007efa:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007efe:	fa09 f303 	lslgt.w	r3, r9, r3
 8007f02:	f1c3 0320 	rsble	r3, r3, #32
 8007f06:	bfc6      	itte	gt
 8007f08:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007f0c:	4318      	orrgt	r0, r3
 8007f0e:	fa06 f003 	lslle.w	r0, r6, r3
 8007f12:	f7f8 fa67 	bl	80003e4 <__aeabi_ui2d>
 8007f16:	2301      	movs	r3, #1
 8007f18:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007f1c:	3c01      	subs	r4, #1
 8007f1e:	9313      	str	r3, [sp, #76]	; 0x4c
 8007f20:	e76f      	b.n	8007e02 <_dtoa_r+0x112>
 8007f22:	2301      	movs	r3, #1
 8007f24:	e7b2      	b.n	8007e8c <_dtoa_r+0x19c>
 8007f26:	900f      	str	r0, [sp, #60]	; 0x3c
 8007f28:	e7b1      	b.n	8007e8e <_dtoa_r+0x19e>
 8007f2a:	9b06      	ldr	r3, [sp, #24]
 8007f2c:	eba3 030a 	sub.w	r3, r3, sl
 8007f30:	9306      	str	r3, [sp, #24]
 8007f32:	f1ca 0300 	rsb	r3, sl, #0
 8007f36:	930a      	str	r3, [sp, #40]	; 0x28
 8007f38:	2300      	movs	r3, #0
 8007f3a:	930e      	str	r3, [sp, #56]	; 0x38
 8007f3c:	e7be      	b.n	8007ebc <_dtoa_r+0x1cc>
 8007f3e:	2300      	movs	r3, #0
 8007f40:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	dc58      	bgt.n	8007ffa <_dtoa_r+0x30a>
 8007f48:	f04f 0901 	mov.w	r9, #1
 8007f4c:	464b      	mov	r3, r9
 8007f4e:	f8cd 9020 	str.w	r9, [sp, #32]
 8007f52:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007f56:	2200      	movs	r2, #0
 8007f58:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007f5a:	6042      	str	r2, [r0, #4]
 8007f5c:	2204      	movs	r2, #4
 8007f5e:	f102 0614 	add.w	r6, r2, #20
 8007f62:	429e      	cmp	r6, r3
 8007f64:	6841      	ldr	r1, [r0, #4]
 8007f66:	d94e      	bls.n	8008006 <_dtoa_r+0x316>
 8007f68:	4628      	mov	r0, r5
 8007f6a:	f001 f84f 	bl	800900c <_Balloc>
 8007f6e:	9003      	str	r0, [sp, #12]
 8007f70:	2800      	cmp	r0, #0
 8007f72:	d14c      	bne.n	800800e <_dtoa_r+0x31e>
 8007f74:	4602      	mov	r2, r0
 8007f76:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007f7a:	4b17      	ldr	r3, [pc, #92]	; (8007fd8 <_dtoa_r+0x2e8>)
 8007f7c:	e6cc      	b.n	8007d18 <_dtoa_r+0x28>
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e7de      	b.n	8007f40 <_dtoa_r+0x250>
 8007f82:	2300      	movs	r3, #0
 8007f84:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f86:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f88:	eb0a 0903 	add.w	r9, sl, r3
 8007f8c:	f109 0301 	add.w	r3, r9, #1
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	9308      	str	r3, [sp, #32]
 8007f94:	bfb8      	it	lt
 8007f96:	2301      	movlt	r3, #1
 8007f98:	e7dd      	b.n	8007f56 <_dtoa_r+0x266>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e7f2      	b.n	8007f84 <_dtoa_r+0x294>
 8007f9e:	bf00      	nop
 8007fa0:	636f4361 	.word	0x636f4361
 8007fa4:	3fd287a7 	.word	0x3fd287a7
 8007fa8:	8b60c8b3 	.word	0x8b60c8b3
 8007fac:	3fc68a28 	.word	0x3fc68a28
 8007fb0:	509f79fb 	.word	0x509f79fb
 8007fb4:	3fd34413 	.word	0x3fd34413
 8007fb8:	0800ac56 	.word	0x0800ac56
 8007fbc:	0800ac6d 	.word	0x0800ac6d
 8007fc0:	7ff00000 	.word	0x7ff00000
 8007fc4:	0800ac52 	.word	0x0800ac52
 8007fc8:	0800ac49 	.word	0x0800ac49
 8007fcc:	0800aad1 	.word	0x0800aad1
 8007fd0:	3ff80000 	.word	0x3ff80000
 8007fd4:	0800add8 	.word	0x0800add8
 8007fd8:	0800acc8 	.word	0x0800acc8
 8007fdc:	2401      	movs	r4, #1
 8007fde:	2300      	movs	r3, #0
 8007fe0:	940b      	str	r4, [sp, #44]	; 0x2c
 8007fe2:	9322      	str	r3, [sp, #136]	; 0x88
 8007fe4:	f04f 39ff 	mov.w	r9, #4294967295
 8007fe8:	2200      	movs	r2, #0
 8007fea:	2312      	movs	r3, #18
 8007fec:	f8cd 9020 	str.w	r9, [sp, #32]
 8007ff0:	9223      	str	r2, [sp, #140]	; 0x8c
 8007ff2:	e7b0      	b.n	8007f56 <_dtoa_r+0x266>
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ff8:	e7f4      	b.n	8007fe4 <_dtoa_r+0x2f4>
 8007ffa:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8007ffe:	464b      	mov	r3, r9
 8008000:	f8cd 9020 	str.w	r9, [sp, #32]
 8008004:	e7a7      	b.n	8007f56 <_dtoa_r+0x266>
 8008006:	3101      	adds	r1, #1
 8008008:	6041      	str	r1, [r0, #4]
 800800a:	0052      	lsls	r2, r2, #1
 800800c:	e7a7      	b.n	8007f5e <_dtoa_r+0x26e>
 800800e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008010:	9a03      	ldr	r2, [sp, #12]
 8008012:	601a      	str	r2, [r3, #0]
 8008014:	9b08      	ldr	r3, [sp, #32]
 8008016:	2b0e      	cmp	r3, #14
 8008018:	f200 80a8 	bhi.w	800816c <_dtoa_r+0x47c>
 800801c:	2c00      	cmp	r4, #0
 800801e:	f000 80a5 	beq.w	800816c <_dtoa_r+0x47c>
 8008022:	f1ba 0f00 	cmp.w	sl, #0
 8008026:	dd34      	ble.n	8008092 <_dtoa_r+0x3a2>
 8008028:	4a9a      	ldr	r2, [pc, #616]	; (8008294 <_dtoa_r+0x5a4>)
 800802a:	f00a 030f 	and.w	r3, sl, #15
 800802e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008032:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008036:	e9d3 3400 	ldrd	r3, r4, [r3]
 800803a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800803e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008042:	d016      	beq.n	8008072 <_dtoa_r+0x382>
 8008044:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008048:	4b93      	ldr	r3, [pc, #588]	; (8008298 <_dtoa_r+0x5a8>)
 800804a:	2703      	movs	r7, #3
 800804c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008050:	f7f8 fb6c 	bl	800072c <__aeabi_ddiv>
 8008054:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008058:	f004 040f 	and.w	r4, r4, #15
 800805c:	4e8e      	ldr	r6, [pc, #568]	; (8008298 <_dtoa_r+0x5a8>)
 800805e:	b954      	cbnz	r4, 8008076 <_dtoa_r+0x386>
 8008060:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008064:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008068:	f7f8 fb60 	bl	800072c <__aeabi_ddiv>
 800806c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008070:	e029      	b.n	80080c6 <_dtoa_r+0x3d6>
 8008072:	2702      	movs	r7, #2
 8008074:	e7f2      	b.n	800805c <_dtoa_r+0x36c>
 8008076:	07e1      	lsls	r1, r4, #31
 8008078:	d508      	bpl.n	800808c <_dtoa_r+0x39c>
 800807a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800807e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008082:	f7f8 fa29 	bl	80004d8 <__aeabi_dmul>
 8008086:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800808a:	3701      	adds	r7, #1
 800808c:	1064      	asrs	r4, r4, #1
 800808e:	3608      	adds	r6, #8
 8008090:	e7e5      	b.n	800805e <_dtoa_r+0x36e>
 8008092:	f000 80a5 	beq.w	80081e0 <_dtoa_r+0x4f0>
 8008096:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800809a:	f1ca 0400 	rsb	r4, sl, #0
 800809e:	4b7d      	ldr	r3, [pc, #500]	; (8008294 <_dtoa_r+0x5a4>)
 80080a0:	f004 020f 	and.w	r2, r4, #15
 80080a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ac:	f7f8 fa14 	bl	80004d8 <__aeabi_dmul>
 80080b0:	2702      	movs	r7, #2
 80080b2:	2300      	movs	r3, #0
 80080b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080b8:	4e77      	ldr	r6, [pc, #476]	; (8008298 <_dtoa_r+0x5a8>)
 80080ba:	1124      	asrs	r4, r4, #4
 80080bc:	2c00      	cmp	r4, #0
 80080be:	f040 8084 	bne.w	80081ca <_dtoa_r+0x4da>
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1d2      	bne.n	800806c <_dtoa_r+0x37c>
 80080c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f000 808b 	beq.w	80081e4 <_dtoa_r+0x4f4>
 80080ce:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80080d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80080d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80080da:	2200      	movs	r2, #0
 80080dc:	4b6f      	ldr	r3, [pc, #444]	; (800829c <_dtoa_r+0x5ac>)
 80080de:	f7f8 fc6d 	bl	80009bc <__aeabi_dcmplt>
 80080e2:	2800      	cmp	r0, #0
 80080e4:	d07e      	beq.n	80081e4 <_dtoa_r+0x4f4>
 80080e6:	9b08      	ldr	r3, [sp, #32]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d07b      	beq.n	80081e4 <_dtoa_r+0x4f4>
 80080ec:	f1b9 0f00 	cmp.w	r9, #0
 80080f0:	dd38      	ble.n	8008164 <_dtoa_r+0x474>
 80080f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80080f6:	2200      	movs	r2, #0
 80080f8:	4b69      	ldr	r3, [pc, #420]	; (80082a0 <_dtoa_r+0x5b0>)
 80080fa:	f7f8 f9ed 	bl	80004d8 <__aeabi_dmul>
 80080fe:	464c      	mov	r4, r9
 8008100:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008104:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008108:	3701      	adds	r7, #1
 800810a:	4638      	mov	r0, r7
 800810c:	f7f8 f97a 	bl	8000404 <__aeabi_i2d>
 8008110:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008114:	f7f8 f9e0 	bl	80004d8 <__aeabi_dmul>
 8008118:	2200      	movs	r2, #0
 800811a:	4b62      	ldr	r3, [pc, #392]	; (80082a4 <_dtoa_r+0x5b4>)
 800811c:	f7f8 f826 	bl	800016c <__adddf3>
 8008120:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008124:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008128:	9611      	str	r6, [sp, #68]	; 0x44
 800812a:	2c00      	cmp	r4, #0
 800812c:	d15d      	bne.n	80081ea <_dtoa_r+0x4fa>
 800812e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008132:	2200      	movs	r2, #0
 8008134:	4b5c      	ldr	r3, [pc, #368]	; (80082a8 <_dtoa_r+0x5b8>)
 8008136:	f7f8 f817 	bl	8000168 <__aeabi_dsub>
 800813a:	4602      	mov	r2, r0
 800813c:	460b      	mov	r3, r1
 800813e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008142:	4633      	mov	r3, r6
 8008144:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008146:	f7f8 fc57 	bl	80009f8 <__aeabi_dcmpgt>
 800814a:	2800      	cmp	r0, #0
 800814c:	f040 829c 	bne.w	8008688 <_dtoa_r+0x998>
 8008150:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008154:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008156:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800815a:	f7f8 fc2f 	bl	80009bc <__aeabi_dcmplt>
 800815e:	2800      	cmp	r0, #0
 8008160:	f040 8290 	bne.w	8008684 <_dtoa_r+0x994>
 8008164:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008168:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800816c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800816e:	2b00      	cmp	r3, #0
 8008170:	f2c0 8152 	blt.w	8008418 <_dtoa_r+0x728>
 8008174:	f1ba 0f0e 	cmp.w	sl, #14
 8008178:	f300 814e 	bgt.w	8008418 <_dtoa_r+0x728>
 800817c:	4b45      	ldr	r3, [pc, #276]	; (8008294 <_dtoa_r+0x5a4>)
 800817e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008182:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008186:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800818a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800818c:	2b00      	cmp	r3, #0
 800818e:	f280 80db 	bge.w	8008348 <_dtoa_r+0x658>
 8008192:	9b08      	ldr	r3, [sp, #32]
 8008194:	2b00      	cmp	r3, #0
 8008196:	f300 80d7 	bgt.w	8008348 <_dtoa_r+0x658>
 800819a:	f040 8272 	bne.w	8008682 <_dtoa_r+0x992>
 800819e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081a2:	2200      	movs	r2, #0
 80081a4:	4b40      	ldr	r3, [pc, #256]	; (80082a8 <_dtoa_r+0x5b8>)
 80081a6:	f7f8 f997 	bl	80004d8 <__aeabi_dmul>
 80081aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081ae:	f7f8 fc19 	bl	80009e4 <__aeabi_dcmpge>
 80081b2:	9c08      	ldr	r4, [sp, #32]
 80081b4:	4626      	mov	r6, r4
 80081b6:	2800      	cmp	r0, #0
 80081b8:	f040 8248 	bne.w	800864c <_dtoa_r+0x95c>
 80081bc:	2331      	movs	r3, #49	; 0x31
 80081be:	9f03      	ldr	r7, [sp, #12]
 80081c0:	f10a 0a01 	add.w	sl, sl, #1
 80081c4:	f807 3b01 	strb.w	r3, [r7], #1
 80081c8:	e244      	b.n	8008654 <_dtoa_r+0x964>
 80081ca:	07e2      	lsls	r2, r4, #31
 80081cc:	d505      	bpl.n	80081da <_dtoa_r+0x4ea>
 80081ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 80081d2:	f7f8 f981 	bl	80004d8 <__aeabi_dmul>
 80081d6:	2301      	movs	r3, #1
 80081d8:	3701      	adds	r7, #1
 80081da:	1064      	asrs	r4, r4, #1
 80081dc:	3608      	adds	r6, #8
 80081de:	e76d      	b.n	80080bc <_dtoa_r+0x3cc>
 80081e0:	2702      	movs	r7, #2
 80081e2:	e770      	b.n	80080c6 <_dtoa_r+0x3d6>
 80081e4:	46d0      	mov	r8, sl
 80081e6:	9c08      	ldr	r4, [sp, #32]
 80081e8:	e78f      	b.n	800810a <_dtoa_r+0x41a>
 80081ea:	9903      	ldr	r1, [sp, #12]
 80081ec:	4b29      	ldr	r3, [pc, #164]	; (8008294 <_dtoa_r+0x5a4>)
 80081ee:	4421      	add	r1, r4
 80081f0:	9112      	str	r1, [sp, #72]	; 0x48
 80081f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80081f8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80081fc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008200:	2900      	cmp	r1, #0
 8008202:	d055      	beq.n	80082b0 <_dtoa_r+0x5c0>
 8008204:	2000      	movs	r0, #0
 8008206:	4929      	ldr	r1, [pc, #164]	; (80082ac <_dtoa_r+0x5bc>)
 8008208:	f7f8 fa90 	bl	800072c <__aeabi_ddiv>
 800820c:	463b      	mov	r3, r7
 800820e:	4632      	mov	r2, r6
 8008210:	f7f7 ffaa 	bl	8000168 <__aeabi_dsub>
 8008214:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008218:	9f03      	ldr	r7, [sp, #12]
 800821a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800821e:	f7f8 fc0b 	bl	8000a38 <__aeabi_d2iz>
 8008222:	4604      	mov	r4, r0
 8008224:	f7f8 f8ee 	bl	8000404 <__aeabi_i2d>
 8008228:	4602      	mov	r2, r0
 800822a:	460b      	mov	r3, r1
 800822c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008230:	f7f7 ff9a 	bl	8000168 <__aeabi_dsub>
 8008234:	4602      	mov	r2, r0
 8008236:	460b      	mov	r3, r1
 8008238:	3430      	adds	r4, #48	; 0x30
 800823a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800823e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008242:	f807 4b01 	strb.w	r4, [r7], #1
 8008246:	f7f8 fbb9 	bl	80009bc <__aeabi_dcmplt>
 800824a:	2800      	cmp	r0, #0
 800824c:	d174      	bne.n	8008338 <_dtoa_r+0x648>
 800824e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008252:	2000      	movs	r0, #0
 8008254:	4911      	ldr	r1, [pc, #68]	; (800829c <_dtoa_r+0x5ac>)
 8008256:	f7f7 ff87 	bl	8000168 <__aeabi_dsub>
 800825a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800825e:	f7f8 fbad 	bl	80009bc <__aeabi_dcmplt>
 8008262:	2800      	cmp	r0, #0
 8008264:	f040 80b7 	bne.w	80083d6 <_dtoa_r+0x6e6>
 8008268:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800826a:	429f      	cmp	r7, r3
 800826c:	f43f af7a 	beq.w	8008164 <_dtoa_r+0x474>
 8008270:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008274:	2200      	movs	r2, #0
 8008276:	4b0a      	ldr	r3, [pc, #40]	; (80082a0 <_dtoa_r+0x5b0>)
 8008278:	f7f8 f92e 	bl	80004d8 <__aeabi_dmul>
 800827c:	2200      	movs	r2, #0
 800827e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008282:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008286:	4b06      	ldr	r3, [pc, #24]	; (80082a0 <_dtoa_r+0x5b0>)
 8008288:	f7f8 f926 	bl	80004d8 <__aeabi_dmul>
 800828c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008290:	e7c3      	b.n	800821a <_dtoa_r+0x52a>
 8008292:	bf00      	nop
 8008294:	0800add8 	.word	0x0800add8
 8008298:	0800adb0 	.word	0x0800adb0
 800829c:	3ff00000 	.word	0x3ff00000
 80082a0:	40240000 	.word	0x40240000
 80082a4:	401c0000 	.word	0x401c0000
 80082a8:	40140000 	.word	0x40140000
 80082ac:	3fe00000 	.word	0x3fe00000
 80082b0:	4630      	mov	r0, r6
 80082b2:	4639      	mov	r1, r7
 80082b4:	f7f8 f910 	bl	80004d8 <__aeabi_dmul>
 80082b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80082be:	9c03      	ldr	r4, [sp, #12]
 80082c0:	9314      	str	r3, [sp, #80]	; 0x50
 80082c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082c6:	f7f8 fbb7 	bl	8000a38 <__aeabi_d2iz>
 80082ca:	9015      	str	r0, [sp, #84]	; 0x54
 80082cc:	f7f8 f89a 	bl	8000404 <__aeabi_i2d>
 80082d0:	4602      	mov	r2, r0
 80082d2:	460b      	mov	r3, r1
 80082d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082d8:	f7f7 ff46 	bl	8000168 <__aeabi_dsub>
 80082dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082de:	4606      	mov	r6, r0
 80082e0:	3330      	adds	r3, #48	; 0x30
 80082e2:	f804 3b01 	strb.w	r3, [r4], #1
 80082e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082e8:	460f      	mov	r7, r1
 80082ea:	429c      	cmp	r4, r3
 80082ec:	f04f 0200 	mov.w	r2, #0
 80082f0:	d124      	bne.n	800833c <_dtoa_r+0x64c>
 80082f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80082f6:	4bb0      	ldr	r3, [pc, #704]	; (80085b8 <_dtoa_r+0x8c8>)
 80082f8:	f7f7 ff38 	bl	800016c <__adddf3>
 80082fc:	4602      	mov	r2, r0
 80082fe:	460b      	mov	r3, r1
 8008300:	4630      	mov	r0, r6
 8008302:	4639      	mov	r1, r7
 8008304:	f7f8 fb78 	bl	80009f8 <__aeabi_dcmpgt>
 8008308:	2800      	cmp	r0, #0
 800830a:	d163      	bne.n	80083d4 <_dtoa_r+0x6e4>
 800830c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008310:	2000      	movs	r0, #0
 8008312:	49a9      	ldr	r1, [pc, #676]	; (80085b8 <_dtoa_r+0x8c8>)
 8008314:	f7f7 ff28 	bl	8000168 <__aeabi_dsub>
 8008318:	4602      	mov	r2, r0
 800831a:	460b      	mov	r3, r1
 800831c:	4630      	mov	r0, r6
 800831e:	4639      	mov	r1, r7
 8008320:	f7f8 fb4c 	bl	80009bc <__aeabi_dcmplt>
 8008324:	2800      	cmp	r0, #0
 8008326:	f43f af1d 	beq.w	8008164 <_dtoa_r+0x474>
 800832a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800832c:	1e7b      	subs	r3, r7, #1
 800832e:	9314      	str	r3, [sp, #80]	; 0x50
 8008330:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008334:	2b30      	cmp	r3, #48	; 0x30
 8008336:	d0f8      	beq.n	800832a <_dtoa_r+0x63a>
 8008338:	46c2      	mov	sl, r8
 800833a:	e03b      	b.n	80083b4 <_dtoa_r+0x6c4>
 800833c:	4b9f      	ldr	r3, [pc, #636]	; (80085bc <_dtoa_r+0x8cc>)
 800833e:	f7f8 f8cb 	bl	80004d8 <__aeabi_dmul>
 8008342:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008346:	e7bc      	b.n	80082c2 <_dtoa_r+0x5d2>
 8008348:	9f03      	ldr	r7, [sp, #12]
 800834a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800834e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008352:	4640      	mov	r0, r8
 8008354:	4649      	mov	r1, r9
 8008356:	f7f8 f9e9 	bl	800072c <__aeabi_ddiv>
 800835a:	f7f8 fb6d 	bl	8000a38 <__aeabi_d2iz>
 800835e:	4604      	mov	r4, r0
 8008360:	f7f8 f850 	bl	8000404 <__aeabi_i2d>
 8008364:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008368:	f7f8 f8b6 	bl	80004d8 <__aeabi_dmul>
 800836c:	4602      	mov	r2, r0
 800836e:	460b      	mov	r3, r1
 8008370:	4640      	mov	r0, r8
 8008372:	4649      	mov	r1, r9
 8008374:	f7f7 fef8 	bl	8000168 <__aeabi_dsub>
 8008378:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800837c:	f807 6b01 	strb.w	r6, [r7], #1
 8008380:	9e03      	ldr	r6, [sp, #12]
 8008382:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008386:	1bbe      	subs	r6, r7, r6
 8008388:	45b4      	cmp	ip, r6
 800838a:	4602      	mov	r2, r0
 800838c:	460b      	mov	r3, r1
 800838e:	d136      	bne.n	80083fe <_dtoa_r+0x70e>
 8008390:	f7f7 feec 	bl	800016c <__adddf3>
 8008394:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008398:	4680      	mov	r8, r0
 800839a:	4689      	mov	r9, r1
 800839c:	f7f8 fb2c 	bl	80009f8 <__aeabi_dcmpgt>
 80083a0:	bb58      	cbnz	r0, 80083fa <_dtoa_r+0x70a>
 80083a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80083a6:	4640      	mov	r0, r8
 80083a8:	4649      	mov	r1, r9
 80083aa:	f7f8 fafd 	bl	80009a8 <__aeabi_dcmpeq>
 80083ae:	b108      	cbz	r0, 80083b4 <_dtoa_r+0x6c4>
 80083b0:	07e1      	lsls	r1, r4, #31
 80083b2:	d422      	bmi.n	80083fa <_dtoa_r+0x70a>
 80083b4:	4628      	mov	r0, r5
 80083b6:	4659      	mov	r1, fp
 80083b8:	f000 fe68 	bl	800908c <_Bfree>
 80083bc:	2300      	movs	r3, #0
 80083be:	703b      	strb	r3, [r7, #0]
 80083c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80083c2:	f10a 0001 	add.w	r0, sl, #1
 80083c6:	6018      	str	r0, [r3, #0]
 80083c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f43f acde 	beq.w	8007d8c <_dtoa_r+0x9c>
 80083d0:	601f      	str	r7, [r3, #0]
 80083d2:	e4db      	b.n	8007d8c <_dtoa_r+0x9c>
 80083d4:	4627      	mov	r7, r4
 80083d6:	463b      	mov	r3, r7
 80083d8:	461f      	mov	r7, r3
 80083da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083de:	2a39      	cmp	r2, #57	; 0x39
 80083e0:	d107      	bne.n	80083f2 <_dtoa_r+0x702>
 80083e2:	9a03      	ldr	r2, [sp, #12]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d1f7      	bne.n	80083d8 <_dtoa_r+0x6e8>
 80083e8:	2230      	movs	r2, #48	; 0x30
 80083ea:	9903      	ldr	r1, [sp, #12]
 80083ec:	f108 0801 	add.w	r8, r8, #1
 80083f0:	700a      	strb	r2, [r1, #0]
 80083f2:	781a      	ldrb	r2, [r3, #0]
 80083f4:	3201      	adds	r2, #1
 80083f6:	701a      	strb	r2, [r3, #0]
 80083f8:	e79e      	b.n	8008338 <_dtoa_r+0x648>
 80083fa:	46d0      	mov	r8, sl
 80083fc:	e7eb      	b.n	80083d6 <_dtoa_r+0x6e6>
 80083fe:	2200      	movs	r2, #0
 8008400:	4b6e      	ldr	r3, [pc, #440]	; (80085bc <_dtoa_r+0x8cc>)
 8008402:	f7f8 f869 	bl	80004d8 <__aeabi_dmul>
 8008406:	2200      	movs	r2, #0
 8008408:	2300      	movs	r3, #0
 800840a:	4680      	mov	r8, r0
 800840c:	4689      	mov	r9, r1
 800840e:	f7f8 facb 	bl	80009a8 <__aeabi_dcmpeq>
 8008412:	2800      	cmp	r0, #0
 8008414:	d09b      	beq.n	800834e <_dtoa_r+0x65e>
 8008416:	e7cd      	b.n	80083b4 <_dtoa_r+0x6c4>
 8008418:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800841a:	2a00      	cmp	r2, #0
 800841c:	f000 80d0 	beq.w	80085c0 <_dtoa_r+0x8d0>
 8008420:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008422:	2a01      	cmp	r2, #1
 8008424:	f300 80ae 	bgt.w	8008584 <_dtoa_r+0x894>
 8008428:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800842a:	2a00      	cmp	r2, #0
 800842c:	f000 80a6 	beq.w	800857c <_dtoa_r+0x88c>
 8008430:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008434:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008436:	9f06      	ldr	r7, [sp, #24]
 8008438:	9a06      	ldr	r2, [sp, #24]
 800843a:	2101      	movs	r1, #1
 800843c:	441a      	add	r2, r3
 800843e:	9206      	str	r2, [sp, #24]
 8008440:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008442:	4628      	mov	r0, r5
 8008444:	441a      	add	r2, r3
 8008446:	9209      	str	r2, [sp, #36]	; 0x24
 8008448:	f000 ff20 	bl	800928c <__i2b>
 800844c:	4606      	mov	r6, r0
 800844e:	2f00      	cmp	r7, #0
 8008450:	dd0c      	ble.n	800846c <_dtoa_r+0x77c>
 8008452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008454:	2b00      	cmp	r3, #0
 8008456:	dd09      	ble.n	800846c <_dtoa_r+0x77c>
 8008458:	42bb      	cmp	r3, r7
 800845a:	bfa8      	it	ge
 800845c:	463b      	movge	r3, r7
 800845e:	9a06      	ldr	r2, [sp, #24]
 8008460:	1aff      	subs	r7, r7, r3
 8008462:	1ad2      	subs	r2, r2, r3
 8008464:	9206      	str	r2, [sp, #24]
 8008466:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	9309      	str	r3, [sp, #36]	; 0x24
 800846c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800846e:	b1f3      	cbz	r3, 80084ae <_dtoa_r+0x7be>
 8008470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008472:	2b00      	cmp	r3, #0
 8008474:	f000 80a8 	beq.w	80085c8 <_dtoa_r+0x8d8>
 8008478:	2c00      	cmp	r4, #0
 800847a:	dd10      	ble.n	800849e <_dtoa_r+0x7ae>
 800847c:	4631      	mov	r1, r6
 800847e:	4622      	mov	r2, r4
 8008480:	4628      	mov	r0, r5
 8008482:	f000 ffc1 	bl	8009408 <__pow5mult>
 8008486:	465a      	mov	r2, fp
 8008488:	4601      	mov	r1, r0
 800848a:	4606      	mov	r6, r0
 800848c:	4628      	mov	r0, r5
 800848e:	f000 ff13 	bl	80092b8 <__multiply>
 8008492:	4680      	mov	r8, r0
 8008494:	4659      	mov	r1, fp
 8008496:	4628      	mov	r0, r5
 8008498:	f000 fdf8 	bl	800908c <_Bfree>
 800849c:	46c3      	mov	fp, r8
 800849e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084a0:	1b1a      	subs	r2, r3, r4
 80084a2:	d004      	beq.n	80084ae <_dtoa_r+0x7be>
 80084a4:	4659      	mov	r1, fp
 80084a6:	4628      	mov	r0, r5
 80084a8:	f000 ffae 	bl	8009408 <__pow5mult>
 80084ac:	4683      	mov	fp, r0
 80084ae:	2101      	movs	r1, #1
 80084b0:	4628      	mov	r0, r5
 80084b2:	f000 feeb 	bl	800928c <__i2b>
 80084b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084b8:	4604      	mov	r4, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f340 8086 	ble.w	80085cc <_dtoa_r+0x8dc>
 80084c0:	461a      	mov	r2, r3
 80084c2:	4601      	mov	r1, r0
 80084c4:	4628      	mov	r0, r5
 80084c6:	f000 ff9f 	bl	8009408 <__pow5mult>
 80084ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084cc:	4604      	mov	r4, r0
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	dd7f      	ble.n	80085d2 <_dtoa_r+0x8e2>
 80084d2:	f04f 0800 	mov.w	r8, #0
 80084d6:	6923      	ldr	r3, [r4, #16]
 80084d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80084dc:	6918      	ldr	r0, [r3, #16]
 80084de:	f000 fe87 	bl	80091f0 <__hi0bits>
 80084e2:	f1c0 0020 	rsb	r0, r0, #32
 80084e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084e8:	4418      	add	r0, r3
 80084ea:	f010 001f 	ands.w	r0, r0, #31
 80084ee:	f000 8092 	beq.w	8008616 <_dtoa_r+0x926>
 80084f2:	f1c0 0320 	rsb	r3, r0, #32
 80084f6:	2b04      	cmp	r3, #4
 80084f8:	f340 808a 	ble.w	8008610 <_dtoa_r+0x920>
 80084fc:	f1c0 001c 	rsb	r0, r0, #28
 8008500:	9b06      	ldr	r3, [sp, #24]
 8008502:	4407      	add	r7, r0
 8008504:	4403      	add	r3, r0
 8008506:	9306      	str	r3, [sp, #24]
 8008508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800850a:	4403      	add	r3, r0
 800850c:	9309      	str	r3, [sp, #36]	; 0x24
 800850e:	9b06      	ldr	r3, [sp, #24]
 8008510:	2b00      	cmp	r3, #0
 8008512:	dd05      	ble.n	8008520 <_dtoa_r+0x830>
 8008514:	4659      	mov	r1, fp
 8008516:	461a      	mov	r2, r3
 8008518:	4628      	mov	r0, r5
 800851a:	f000 ffcf 	bl	80094bc <__lshift>
 800851e:	4683      	mov	fp, r0
 8008520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008522:	2b00      	cmp	r3, #0
 8008524:	dd05      	ble.n	8008532 <_dtoa_r+0x842>
 8008526:	4621      	mov	r1, r4
 8008528:	461a      	mov	r2, r3
 800852a:	4628      	mov	r0, r5
 800852c:	f000 ffc6 	bl	80094bc <__lshift>
 8008530:	4604      	mov	r4, r0
 8008532:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008534:	2b00      	cmp	r3, #0
 8008536:	d070      	beq.n	800861a <_dtoa_r+0x92a>
 8008538:	4621      	mov	r1, r4
 800853a:	4658      	mov	r0, fp
 800853c:	f001 f82e 	bl	800959c <__mcmp>
 8008540:	2800      	cmp	r0, #0
 8008542:	da6a      	bge.n	800861a <_dtoa_r+0x92a>
 8008544:	2300      	movs	r3, #0
 8008546:	4659      	mov	r1, fp
 8008548:	220a      	movs	r2, #10
 800854a:	4628      	mov	r0, r5
 800854c:	f000 fdc0 	bl	80090d0 <__multadd>
 8008550:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008552:	4683      	mov	fp, r0
 8008554:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008558:	2b00      	cmp	r3, #0
 800855a:	f000 8194 	beq.w	8008886 <_dtoa_r+0xb96>
 800855e:	4631      	mov	r1, r6
 8008560:	2300      	movs	r3, #0
 8008562:	220a      	movs	r2, #10
 8008564:	4628      	mov	r0, r5
 8008566:	f000 fdb3 	bl	80090d0 <__multadd>
 800856a:	f1b9 0f00 	cmp.w	r9, #0
 800856e:	4606      	mov	r6, r0
 8008570:	f300 8093 	bgt.w	800869a <_dtoa_r+0x9aa>
 8008574:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008576:	2b02      	cmp	r3, #2
 8008578:	dc57      	bgt.n	800862a <_dtoa_r+0x93a>
 800857a:	e08e      	b.n	800869a <_dtoa_r+0x9aa>
 800857c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800857e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008582:	e757      	b.n	8008434 <_dtoa_r+0x744>
 8008584:	9b08      	ldr	r3, [sp, #32]
 8008586:	1e5c      	subs	r4, r3, #1
 8008588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800858a:	42a3      	cmp	r3, r4
 800858c:	bfb7      	itett	lt
 800858e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008590:	1b1c      	subge	r4, r3, r4
 8008592:	1ae2      	sublt	r2, r4, r3
 8008594:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008596:	bfbe      	ittt	lt
 8008598:	940a      	strlt	r4, [sp, #40]	; 0x28
 800859a:	189b      	addlt	r3, r3, r2
 800859c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800859e:	9b08      	ldr	r3, [sp, #32]
 80085a0:	bfb8      	it	lt
 80085a2:	2400      	movlt	r4, #0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	bfbb      	ittet	lt
 80085a8:	9b06      	ldrlt	r3, [sp, #24]
 80085aa:	9a08      	ldrlt	r2, [sp, #32]
 80085ac:	9f06      	ldrge	r7, [sp, #24]
 80085ae:	1a9f      	sublt	r7, r3, r2
 80085b0:	bfac      	ite	ge
 80085b2:	9b08      	ldrge	r3, [sp, #32]
 80085b4:	2300      	movlt	r3, #0
 80085b6:	e73f      	b.n	8008438 <_dtoa_r+0x748>
 80085b8:	3fe00000 	.word	0x3fe00000
 80085bc:	40240000 	.word	0x40240000
 80085c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80085c2:	9f06      	ldr	r7, [sp, #24]
 80085c4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80085c6:	e742      	b.n	800844e <_dtoa_r+0x75e>
 80085c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085ca:	e76b      	b.n	80084a4 <_dtoa_r+0x7b4>
 80085cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	dc19      	bgt.n	8008606 <_dtoa_r+0x916>
 80085d2:	9b04      	ldr	r3, [sp, #16]
 80085d4:	b9bb      	cbnz	r3, 8008606 <_dtoa_r+0x916>
 80085d6:	9b05      	ldr	r3, [sp, #20]
 80085d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085dc:	b99b      	cbnz	r3, 8008606 <_dtoa_r+0x916>
 80085de:	9b05      	ldr	r3, [sp, #20]
 80085e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085e4:	0d1b      	lsrs	r3, r3, #20
 80085e6:	051b      	lsls	r3, r3, #20
 80085e8:	b183      	cbz	r3, 800860c <_dtoa_r+0x91c>
 80085ea:	f04f 0801 	mov.w	r8, #1
 80085ee:	9b06      	ldr	r3, [sp, #24]
 80085f0:	3301      	adds	r3, #1
 80085f2:	9306      	str	r3, [sp, #24]
 80085f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f6:	3301      	adds	r3, #1
 80085f8:	9309      	str	r3, [sp, #36]	; 0x24
 80085fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f47f af6a 	bne.w	80084d6 <_dtoa_r+0x7e6>
 8008602:	2001      	movs	r0, #1
 8008604:	e76f      	b.n	80084e6 <_dtoa_r+0x7f6>
 8008606:	f04f 0800 	mov.w	r8, #0
 800860a:	e7f6      	b.n	80085fa <_dtoa_r+0x90a>
 800860c:	4698      	mov	r8, r3
 800860e:	e7f4      	b.n	80085fa <_dtoa_r+0x90a>
 8008610:	f43f af7d 	beq.w	800850e <_dtoa_r+0x81e>
 8008614:	4618      	mov	r0, r3
 8008616:	301c      	adds	r0, #28
 8008618:	e772      	b.n	8008500 <_dtoa_r+0x810>
 800861a:	9b08      	ldr	r3, [sp, #32]
 800861c:	2b00      	cmp	r3, #0
 800861e:	dc36      	bgt.n	800868e <_dtoa_r+0x99e>
 8008620:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008622:	2b02      	cmp	r3, #2
 8008624:	dd33      	ble.n	800868e <_dtoa_r+0x99e>
 8008626:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800862a:	f1b9 0f00 	cmp.w	r9, #0
 800862e:	d10d      	bne.n	800864c <_dtoa_r+0x95c>
 8008630:	4621      	mov	r1, r4
 8008632:	464b      	mov	r3, r9
 8008634:	2205      	movs	r2, #5
 8008636:	4628      	mov	r0, r5
 8008638:	f000 fd4a 	bl	80090d0 <__multadd>
 800863c:	4601      	mov	r1, r0
 800863e:	4604      	mov	r4, r0
 8008640:	4658      	mov	r0, fp
 8008642:	f000 ffab 	bl	800959c <__mcmp>
 8008646:	2800      	cmp	r0, #0
 8008648:	f73f adb8 	bgt.w	80081bc <_dtoa_r+0x4cc>
 800864c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800864e:	9f03      	ldr	r7, [sp, #12]
 8008650:	ea6f 0a03 	mvn.w	sl, r3
 8008654:	f04f 0800 	mov.w	r8, #0
 8008658:	4621      	mov	r1, r4
 800865a:	4628      	mov	r0, r5
 800865c:	f000 fd16 	bl	800908c <_Bfree>
 8008660:	2e00      	cmp	r6, #0
 8008662:	f43f aea7 	beq.w	80083b4 <_dtoa_r+0x6c4>
 8008666:	f1b8 0f00 	cmp.w	r8, #0
 800866a:	d005      	beq.n	8008678 <_dtoa_r+0x988>
 800866c:	45b0      	cmp	r8, r6
 800866e:	d003      	beq.n	8008678 <_dtoa_r+0x988>
 8008670:	4641      	mov	r1, r8
 8008672:	4628      	mov	r0, r5
 8008674:	f000 fd0a 	bl	800908c <_Bfree>
 8008678:	4631      	mov	r1, r6
 800867a:	4628      	mov	r0, r5
 800867c:	f000 fd06 	bl	800908c <_Bfree>
 8008680:	e698      	b.n	80083b4 <_dtoa_r+0x6c4>
 8008682:	2400      	movs	r4, #0
 8008684:	4626      	mov	r6, r4
 8008686:	e7e1      	b.n	800864c <_dtoa_r+0x95c>
 8008688:	46c2      	mov	sl, r8
 800868a:	4626      	mov	r6, r4
 800868c:	e596      	b.n	80081bc <_dtoa_r+0x4cc>
 800868e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008690:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008694:	2b00      	cmp	r3, #0
 8008696:	f000 80fd 	beq.w	8008894 <_dtoa_r+0xba4>
 800869a:	2f00      	cmp	r7, #0
 800869c:	dd05      	ble.n	80086aa <_dtoa_r+0x9ba>
 800869e:	4631      	mov	r1, r6
 80086a0:	463a      	mov	r2, r7
 80086a2:	4628      	mov	r0, r5
 80086a4:	f000 ff0a 	bl	80094bc <__lshift>
 80086a8:	4606      	mov	r6, r0
 80086aa:	f1b8 0f00 	cmp.w	r8, #0
 80086ae:	d05c      	beq.n	800876a <_dtoa_r+0xa7a>
 80086b0:	4628      	mov	r0, r5
 80086b2:	6871      	ldr	r1, [r6, #4]
 80086b4:	f000 fcaa 	bl	800900c <_Balloc>
 80086b8:	4607      	mov	r7, r0
 80086ba:	b928      	cbnz	r0, 80086c8 <_dtoa_r+0x9d8>
 80086bc:	4602      	mov	r2, r0
 80086be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80086c2:	4b7f      	ldr	r3, [pc, #508]	; (80088c0 <_dtoa_r+0xbd0>)
 80086c4:	f7ff bb28 	b.w	8007d18 <_dtoa_r+0x28>
 80086c8:	6932      	ldr	r2, [r6, #16]
 80086ca:	f106 010c 	add.w	r1, r6, #12
 80086ce:	3202      	adds	r2, #2
 80086d0:	0092      	lsls	r2, r2, #2
 80086d2:	300c      	adds	r0, #12
 80086d4:	f000 fc8c 	bl	8008ff0 <memcpy>
 80086d8:	2201      	movs	r2, #1
 80086da:	4639      	mov	r1, r7
 80086dc:	4628      	mov	r0, r5
 80086de:	f000 feed 	bl	80094bc <__lshift>
 80086e2:	46b0      	mov	r8, r6
 80086e4:	4606      	mov	r6, r0
 80086e6:	9b03      	ldr	r3, [sp, #12]
 80086e8:	3301      	adds	r3, #1
 80086ea:	9308      	str	r3, [sp, #32]
 80086ec:	9b03      	ldr	r3, [sp, #12]
 80086ee:	444b      	add	r3, r9
 80086f0:	930a      	str	r3, [sp, #40]	; 0x28
 80086f2:	9b04      	ldr	r3, [sp, #16]
 80086f4:	f003 0301 	and.w	r3, r3, #1
 80086f8:	9309      	str	r3, [sp, #36]	; 0x24
 80086fa:	9b08      	ldr	r3, [sp, #32]
 80086fc:	4621      	mov	r1, r4
 80086fe:	3b01      	subs	r3, #1
 8008700:	4658      	mov	r0, fp
 8008702:	9304      	str	r3, [sp, #16]
 8008704:	f7ff fa68 	bl	8007bd8 <quorem>
 8008708:	4603      	mov	r3, r0
 800870a:	4641      	mov	r1, r8
 800870c:	3330      	adds	r3, #48	; 0x30
 800870e:	9006      	str	r0, [sp, #24]
 8008710:	4658      	mov	r0, fp
 8008712:	930b      	str	r3, [sp, #44]	; 0x2c
 8008714:	f000 ff42 	bl	800959c <__mcmp>
 8008718:	4632      	mov	r2, r6
 800871a:	4681      	mov	r9, r0
 800871c:	4621      	mov	r1, r4
 800871e:	4628      	mov	r0, r5
 8008720:	f000 ff58 	bl	80095d4 <__mdiff>
 8008724:	68c2      	ldr	r2, [r0, #12]
 8008726:	4607      	mov	r7, r0
 8008728:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800872a:	bb02      	cbnz	r2, 800876e <_dtoa_r+0xa7e>
 800872c:	4601      	mov	r1, r0
 800872e:	4658      	mov	r0, fp
 8008730:	f000 ff34 	bl	800959c <__mcmp>
 8008734:	4602      	mov	r2, r0
 8008736:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008738:	4639      	mov	r1, r7
 800873a:	4628      	mov	r0, r5
 800873c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008740:	f000 fca4 	bl	800908c <_Bfree>
 8008744:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008746:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008748:	9f08      	ldr	r7, [sp, #32]
 800874a:	ea43 0102 	orr.w	r1, r3, r2
 800874e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008750:	430b      	orrs	r3, r1
 8008752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008754:	d10d      	bne.n	8008772 <_dtoa_r+0xa82>
 8008756:	2b39      	cmp	r3, #57	; 0x39
 8008758:	d029      	beq.n	80087ae <_dtoa_r+0xabe>
 800875a:	f1b9 0f00 	cmp.w	r9, #0
 800875e:	dd01      	ble.n	8008764 <_dtoa_r+0xa74>
 8008760:	9b06      	ldr	r3, [sp, #24]
 8008762:	3331      	adds	r3, #49	; 0x31
 8008764:	9a04      	ldr	r2, [sp, #16]
 8008766:	7013      	strb	r3, [r2, #0]
 8008768:	e776      	b.n	8008658 <_dtoa_r+0x968>
 800876a:	4630      	mov	r0, r6
 800876c:	e7b9      	b.n	80086e2 <_dtoa_r+0x9f2>
 800876e:	2201      	movs	r2, #1
 8008770:	e7e2      	b.n	8008738 <_dtoa_r+0xa48>
 8008772:	f1b9 0f00 	cmp.w	r9, #0
 8008776:	db06      	blt.n	8008786 <_dtoa_r+0xa96>
 8008778:	9922      	ldr	r1, [sp, #136]	; 0x88
 800877a:	ea41 0909 	orr.w	r9, r1, r9
 800877e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008780:	ea59 0101 	orrs.w	r1, r9, r1
 8008784:	d120      	bne.n	80087c8 <_dtoa_r+0xad8>
 8008786:	2a00      	cmp	r2, #0
 8008788:	ddec      	ble.n	8008764 <_dtoa_r+0xa74>
 800878a:	4659      	mov	r1, fp
 800878c:	2201      	movs	r2, #1
 800878e:	4628      	mov	r0, r5
 8008790:	9308      	str	r3, [sp, #32]
 8008792:	f000 fe93 	bl	80094bc <__lshift>
 8008796:	4621      	mov	r1, r4
 8008798:	4683      	mov	fp, r0
 800879a:	f000 feff 	bl	800959c <__mcmp>
 800879e:	2800      	cmp	r0, #0
 80087a0:	9b08      	ldr	r3, [sp, #32]
 80087a2:	dc02      	bgt.n	80087aa <_dtoa_r+0xaba>
 80087a4:	d1de      	bne.n	8008764 <_dtoa_r+0xa74>
 80087a6:	07da      	lsls	r2, r3, #31
 80087a8:	d5dc      	bpl.n	8008764 <_dtoa_r+0xa74>
 80087aa:	2b39      	cmp	r3, #57	; 0x39
 80087ac:	d1d8      	bne.n	8008760 <_dtoa_r+0xa70>
 80087ae:	2339      	movs	r3, #57	; 0x39
 80087b0:	9a04      	ldr	r2, [sp, #16]
 80087b2:	7013      	strb	r3, [r2, #0]
 80087b4:	463b      	mov	r3, r7
 80087b6:	461f      	mov	r7, r3
 80087b8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80087bc:	3b01      	subs	r3, #1
 80087be:	2a39      	cmp	r2, #57	; 0x39
 80087c0:	d050      	beq.n	8008864 <_dtoa_r+0xb74>
 80087c2:	3201      	adds	r2, #1
 80087c4:	701a      	strb	r2, [r3, #0]
 80087c6:	e747      	b.n	8008658 <_dtoa_r+0x968>
 80087c8:	2a00      	cmp	r2, #0
 80087ca:	dd03      	ble.n	80087d4 <_dtoa_r+0xae4>
 80087cc:	2b39      	cmp	r3, #57	; 0x39
 80087ce:	d0ee      	beq.n	80087ae <_dtoa_r+0xabe>
 80087d0:	3301      	adds	r3, #1
 80087d2:	e7c7      	b.n	8008764 <_dtoa_r+0xa74>
 80087d4:	9a08      	ldr	r2, [sp, #32]
 80087d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80087d8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80087dc:	428a      	cmp	r2, r1
 80087de:	d02a      	beq.n	8008836 <_dtoa_r+0xb46>
 80087e0:	4659      	mov	r1, fp
 80087e2:	2300      	movs	r3, #0
 80087e4:	220a      	movs	r2, #10
 80087e6:	4628      	mov	r0, r5
 80087e8:	f000 fc72 	bl	80090d0 <__multadd>
 80087ec:	45b0      	cmp	r8, r6
 80087ee:	4683      	mov	fp, r0
 80087f0:	f04f 0300 	mov.w	r3, #0
 80087f4:	f04f 020a 	mov.w	r2, #10
 80087f8:	4641      	mov	r1, r8
 80087fa:	4628      	mov	r0, r5
 80087fc:	d107      	bne.n	800880e <_dtoa_r+0xb1e>
 80087fe:	f000 fc67 	bl	80090d0 <__multadd>
 8008802:	4680      	mov	r8, r0
 8008804:	4606      	mov	r6, r0
 8008806:	9b08      	ldr	r3, [sp, #32]
 8008808:	3301      	adds	r3, #1
 800880a:	9308      	str	r3, [sp, #32]
 800880c:	e775      	b.n	80086fa <_dtoa_r+0xa0a>
 800880e:	f000 fc5f 	bl	80090d0 <__multadd>
 8008812:	4631      	mov	r1, r6
 8008814:	4680      	mov	r8, r0
 8008816:	2300      	movs	r3, #0
 8008818:	220a      	movs	r2, #10
 800881a:	4628      	mov	r0, r5
 800881c:	f000 fc58 	bl	80090d0 <__multadd>
 8008820:	4606      	mov	r6, r0
 8008822:	e7f0      	b.n	8008806 <_dtoa_r+0xb16>
 8008824:	f1b9 0f00 	cmp.w	r9, #0
 8008828:	bfcc      	ite	gt
 800882a:	464f      	movgt	r7, r9
 800882c:	2701      	movle	r7, #1
 800882e:	f04f 0800 	mov.w	r8, #0
 8008832:	9a03      	ldr	r2, [sp, #12]
 8008834:	4417      	add	r7, r2
 8008836:	4659      	mov	r1, fp
 8008838:	2201      	movs	r2, #1
 800883a:	4628      	mov	r0, r5
 800883c:	9308      	str	r3, [sp, #32]
 800883e:	f000 fe3d 	bl	80094bc <__lshift>
 8008842:	4621      	mov	r1, r4
 8008844:	4683      	mov	fp, r0
 8008846:	f000 fea9 	bl	800959c <__mcmp>
 800884a:	2800      	cmp	r0, #0
 800884c:	dcb2      	bgt.n	80087b4 <_dtoa_r+0xac4>
 800884e:	d102      	bne.n	8008856 <_dtoa_r+0xb66>
 8008850:	9b08      	ldr	r3, [sp, #32]
 8008852:	07db      	lsls	r3, r3, #31
 8008854:	d4ae      	bmi.n	80087b4 <_dtoa_r+0xac4>
 8008856:	463b      	mov	r3, r7
 8008858:	461f      	mov	r7, r3
 800885a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800885e:	2a30      	cmp	r2, #48	; 0x30
 8008860:	d0fa      	beq.n	8008858 <_dtoa_r+0xb68>
 8008862:	e6f9      	b.n	8008658 <_dtoa_r+0x968>
 8008864:	9a03      	ldr	r2, [sp, #12]
 8008866:	429a      	cmp	r2, r3
 8008868:	d1a5      	bne.n	80087b6 <_dtoa_r+0xac6>
 800886a:	2331      	movs	r3, #49	; 0x31
 800886c:	f10a 0a01 	add.w	sl, sl, #1
 8008870:	e779      	b.n	8008766 <_dtoa_r+0xa76>
 8008872:	4b14      	ldr	r3, [pc, #80]	; (80088c4 <_dtoa_r+0xbd4>)
 8008874:	f7ff baa8 	b.w	8007dc8 <_dtoa_r+0xd8>
 8008878:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800887a:	2b00      	cmp	r3, #0
 800887c:	f47f aa81 	bne.w	8007d82 <_dtoa_r+0x92>
 8008880:	4b11      	ldr	r3, [pc, #68]	; (80088c8 <_dtoa_r+0xbd8>)
 8008882:	f7ff baa1 	b.w	8007dc8 <_dtoa_r+0xd8>
 8008886:	f1b9 0f00 	cmp.w	r9, #0
 800888a:	dc03      	bgt.n	8008894 <_dtoa_r+0xba4>
 800888c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800888e:	2b02      	cmp	r3, #2
 8008890:	f73f aecb 	bgt.w	800862a <_dtoa_r+0x93a>
 8008894:	9f03      	ldr	r7, [sp, #12]
 8008896:	4621      	mov	r1, r4
 8008898:	4658      	mov	r0, fp
 800889a:	f7ff f99d 	bl	8007bd8 <quorem>
 800889e:	9a03      	ldr	r2, [sp, #12]
 80088a0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80088a4:	f807 3b01 	strb.w	r3, [r7], #1
 80088a8:	1aba      	subs	r2, r7, r2
 80088aa:	4591      	cmp	r9, r2
 80088ac:	ddba      	ble.n	8008824 <_dtoa_r+0xb34>
 80088ae:	4659      	mov	r1, fp
 80088b0:	2300      	movs	r3, #0
 80088b2:	220a      	movs	r2, #10
 80088b4:	4628      	mov	r0, r5
 80088b6:	f000 fc0b 	bl	80090d0 <__multadd>
 80088ba:	4683      	mov	fp, r0
 80088bc:	e7eb      	b.n	8008896 <_dtoa_r+0xba6>
 80088be:	bf00      	nop
 80088c0:	0800acc8 	.word	0x0800acc8
 80088c4:	0800aad0 	.word	0x0800aad0
 80088c8:	0800ac49 	.word	0x0800ac49

080088cc <rshift>:
 80088cc:	6903      	ldr	r3, [r0, #16]
 80088ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80088d6:	f100 0414 	add.w	r4, r0, #20
 80088da:	ea4f 1261 	mov.w	r2, r1, asr #5
 80088de:	dd46      	ble.n	800896e <rshift+0xa2>
 80088e0:	f011 011f 	ands.w	r1, r1, #31
 80088e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80088e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80088ec:	d10c      	bne.n	8008908 <rshift+0x3c>
 80088ee:	4629      	mov	r1, r5
 80088f0:	f100 0710 	add.w	r7, r0, #16
 80088f4:	42b1      	cmp	r1, r6
 80088f6:	d335      	bcc.n	8008964 <rshift+0x98>
 80088f8:	1a9b      	subs	r3, r3, r2
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	1eea      	subs	r2, r5, #3
 80088fe:	4296      	cmp	r6, r2
 8008900:	bf38      	it	cc
 8008902:	2300      	movcc	r3, #0
 8008904:	4423      	add	r3, r4
 8008906:	e015      	b.n	8008934 <rshift+0x68>
 8008908:	46a1      	mov	r9, r4
 800890a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800890e:	f1c1 0820 	rsb	r8, r1, #32
 8008912:	40cf      	lsrs	r7, r1
 8008914:	f105 0e04 	add.w	lr, r5, #4
 8008918:	4576      	cmp	r6, lr
 800891a:	46f4      	mov	ip, lr
 800891c:	d816      	bhi.n	800894c <rshift+0x80>
 800891e:	1a9a      	subs	r2, r3, r2
 8008920:	0092      	lsls	r2, r2, #2
 8008922:	3a04      	subs	r2, #4
 8008924:	3501      	adds	r5, #1
 8008926:	42ae      	cmp	r6, r5
 8008928:	bf38      	it	cc
 800892a:	2200      	movcc	r2, #0
 800892c:	18a3      	adds	r3, r4, r2
 800892e:	50a7      	str	r7, [r4, r2]
 8008930:	b107      	cbz	r7, 8008934 <rshift+0x68>
 8008932:	3304      	adds	r3, #4
 8008934:	42a3      	cmp	r3, r4
 8008936:	eba3 0204 	sub.w	r2, r3, r4
 800893a:	bf08      	it	eq
 800893c:	2300      	moveq	r3, #0
 800893e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008942:	6102      	str	r2, [r0, #16]
 8008944:	bf08      	it	eq
 8008946:	6143      	streq	r3, [r0, #20]
 8008948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800894c:	f8dc c000 	ldr.w	ip, [ip]
 8008950:	fa0c fc08 	lsl.w	ip, ip, r8
 8008954:	ea4c 0707 	orr.w	r7, ip, r7
 8008958:	f849 7b04 	str.w	r7, [r9], #4
 800895c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008960:	40cf      	lsrs	r7, r1
 8008962:	e7d9      	b.n	8008918 <rshift+0x4c>
 8008964:	f851 cb04 	ldr.w	ip, [r1], #4
 8008968:	f847 cf04 	str.w	ip, [r7, #4]!
 800896c:	e7c2      	b.n	80088f4 <rshift+0x28>
 800896e:	4623      	mov	r3, r4
 8008970:	e7e0      	b.n	8008934 <rshift+0x68>

08008972 <__hexdig_fun>:
 8008972:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008976:	2b09      	cmp	r3, #9
 8008978:	d802      	bhi.n	8008980 <__hexdig_fun+0xe>
 800897a:	3820      	subs	r0, #32
 800897c:	b2c0      	uxtb	r0, r0
 800897e:	4770      	bx	lr
 8008980:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008984:	2b05      	cmp	r3, #5
 8008986:	d801      	bhi.n	800898c <__hexdig_fun+0x1a>
 8008988:	3847      	subs	r0, #71	; 0x47
 800898a:	e7f7      	b.n	800897c <__hexdig_fun+0xa>
 800898c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008990:	2b05      	cmp	r3, #5
 8008992:	d801      	bhi.n	8008998 <__hexdig_fun+0x26>
 8008994:	3827      	subs	r0, #39	; 0x27
 8008996:	e7f1      	b.n	800897c <__hexdig_fun+0xa>
 8008998:	2000      	movs	r0, #0
 800899a:	4770      	bx	lr

0800899c <__gethex>:
 800899c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a0:	b08b      	sub	sp, #44	; 0x2c
 80089a2:	9305      	str	r3, [sp, #20]
 80089a4:	4bb2      	ldr	r3, [pc, #712]	; (8008c70 <__gethex+0x2d4>)
 80089a6:	9002      	str	r0, [sp, #8]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	468b      	mov	fp, r1
 80089ac:	4618      	mov	r0, r3
 80089ae:	4690      	mov	r8, r2
 80089b0:	9303      	str	r3, [sp, #12]
 80089b2:	f7f7 fbcd 	bl	8000150 <strlen>
 80089b6:	4682      	mov	sl, r0
 80089b8:	9b03      	ldr	r3, [sp, #12]
 80089ba:	f8db 2000 	ldr.w	r2, [fp]
 80089be:	4403      	add	r3, r0
 80089c0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80089c4:	9306      	str	r3, [sp, #24]
 80089c6:	1c93      	adds	r3, r2, #2
 80089c8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80089cc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80089d0:	32fe      	adds	r2, #254	; 0xfe
 80089d2:	18d1      	adds	r1, r2, r3
 80089d4:	461f      	mov	r7, r3
 80089d6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80089da:	9101      	str	r1, [sp, #4]
 80089dc:	2830      	cmp	r0, #48	; 0x30
 80089de:	d0f8      	beq.n	80089d2 <__gethex+0x36>
 80089e0:	f7ff ffc7 	bl	8008972 <__hexdig_fun>
 80089e4:	4604      	mov	r4, r0
 80089e6:	2800      	cmp	r0, #0
 80089e8:	d13a      	bne.n	8008a60 <__gethex+0xc4>
 80089ea:	4652      	mov	r2, sl
 80089ec:	4638      	mov	r0, r7
 80089ee:	9903      	ldr	r1, [sp, #12]
 80089f0:	f001 fa26 	bl	8009e40 <strncmp>
 80089f4:	4605      	mov	r5, r0
 80089f6:	2800      	cmp	r0, #0
 80089f8:	d166      	bne.n	8008ac8 <__gethex+0x12c>
 80089fa:	f817 000a 	ldrb.w	r0, [r7, sl]
 80089fe:	eb07 060a 	add.w	r6, r7, sl
 8008a02:	f7ff ffb6 	bl	8008972 <__hexdig_fun>
 8008a06:	2800      	cmp	r0, #0
 8008a08:	d060      	beq.n	8008acc <__gethex+0x130>
 8008a0a:	4633      	mov	r3, r6
 8008a0c:	7818      	ldrb	r0, [r3, #0]
 8008a0e:	461f      	mov	r7, r3
 8008a10:	2830      	cmp	r0, #48	; 0x30
 8008a12:	f103 0301 	add.w	r3, r3, #1
 8008a16:	d0f9      	beq.n	8008a0c <__gethex+0x70>
 8008a18:	f7ff ffab 	bl	8008972 <__hexdig_fun>
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	fab0 f480 	clz	r4, r0
 8008a22:	4635      	mov	r5, r6
 8008a24:	0964      	lsrs	r4, r4, #5
 8008a26:	9301      	str	r3, [sp, #4]
 8008a28:	463a      	mov	r2, r7
 8008a2a:	4616      	mov	r6, r2
 8008a2c:	7830      	ldrb	r0, [r6, #0]
 8008a2e:	3201      	adds	r2, #1
 8008a30:	f7ff ff9f 	bl	8008972 <__hexdig_fun>
 8008a34:	2800      	cmp	r0, #0
 8008a36:	d1f8      	bne.n	8008a2a <__gethex+0x8e>
 8008a38:	4652      	mov	r2, sl
 8008a3a:	4630      	mov	r0, r6
 8008a3c:	9903      	ldr	r1, [sp, #12]
 8008a3e:	f001 f9ff 	bl	8009e40 <strncmp>
 8008a42:	b980      	cbnz	r0, 8008a66 <__gethex+0xca>
 8008a44:	b94d      	cbnz	r5, 8008a5a <__gethex+0xbe>
 8008a46:	eb06 050a 	add.w	r5, r6, sl
 8008a4a:	462a      	mov	r2, r5
 8008a4c:	4616      	mov	r6, r2
 8008a4e:	7830      	ldrb	r0, [r6, #0]
 8008a50:	3201      	adds	r2, #1
 8008a52:	f7ff ff8e 	bl	8008972 <__hexdig_fun>
 8008a56:	2800      	cmp	r0, #0
 8008a58:	d1f8      	bne.n	8008a4c <__gethex+0xb0>
 8008a5a:	1bad      	subs	r5, r5, r6
 8008a5c:	00ad      	lsls	r5, r5, #2
 8008a5e:	e004      	b.n	8008a6a <__gethex+0xce>
 8008a60:	2400      	movs	r4, #0
 8008a62:	4625      	mov	r5, r4
 8008a64:	e7e0      	b.n	8008a28 <__gethex+0x8c>
 8008a66:	2d00      	cmp	r5, #0
 8008a68:	d1f7      	bne.n	8008a5a <__gethex+0xbe>
 8008a6a:	7833      	ldrb	r3, [r6, #0]
 8008a6c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a70:	2b50      	cmp	r3, #80	; 0x50
 8008a72:	d139      	bne.n	8008ae8 <__gethex+0x14c>
 8008a74:	7873      	ldrb	r3, [r6, #1]
 8008a76:	2b2b      	cmp	r3, #43	; 0x2b
 8008a78:	d02a      	beq.n	8008ad0 <__gethex+0x134>
 8008a7a:	2b2d      	cmp	r3, #45	; 0x2d
 8008a7c:	d02c      	beq.n	8008ad8 <__gethex+0x13c>
 8008a7e:	f04f 0900 	mov.w	r9, #0
 8008a82:	1c71      	adds	r1, r6, #1
 8008a84:	7808      	ldrb	r0, [r1, #0]
 8008a86:	f7ff ff74 	bl	8008972 <__hexdig_fun>
 8008a8a:	1e43      	subs	r3, r0, #1
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	2b18      	cmp	r3, #24
 8008a90:	d82a      	bhi.n	8008ae8 <__gethex+0x14c>
 8008a92:	f1a0 0210 	sub.w	r2, r0, #16
 8008a96:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008a9a:	f7ff ff6a 	bl	8008972 <__hexdig_fun>
 8008a9e:	1e43      	subs	r3, r0, #1
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	2b18      	cmp	r3, #24
 8008aa4:	d91b      	bls.n	8008ade <__gethex+0x142>
 8008aa6:	f1b9 0f00 	cmp.w	r9, #0
 8008aaa:	d000      	beq.n	8008aae <__gethex+0x112>
 8008aac:	4252      	negs	r2, r2
 8008aae:	4415      	add	r5, r2
 8008ab0:	f8cb 1000 	str.w	r1, [fp]
 8008ab4:	b1d4      	cbz	r4, 8008aec <__gethex+0x150>
 8008ab6:	9b01      	ldr	r3, [sp, #4]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	bf14      	ite	ne
 8008abc:	2700      	movne	r7, #0
 8008abe:	2706      	moveq	r7, #6
 8008ac0:	4638      	mov	r0, r7
 8008ac2:	b00b      	add	sp, #44	; 0x2c
 8008ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac8:	463e      	mov	r6, r7
 8008aca:	4625      	mov	r5, r4
 8008acc:	2401      	movs	r4, #1
 8008ace:	e7cc      	b.n	8008a6a <__gethex+0xce>
 8008ad0:	f04f 0900 	mov.w	r9, #0
 8008ad4:	1cb1      	adds	r1, r6, #2
 8008ad6:	e7d5      	b.n	8008a84 <__gethex+0xe8>
 8008ad8:	f04f 0901 	mov.w	r9, #1
 8008adc:	e7fa      	b.n	8008ad4 <__gethex+0x138>
 8008ade:	230a      	movs	r3, #10
 8008ae0:	fb03 0202 	mla	r2, r3, r2, r0
 8008ae4:	3a10      	subs	r2, #16
 8008ae6:	e7d6      	b.n	8008a96 <__gethex+0xfa>
 8008ae8:	4631      	mov	r1, r6
 8008aea:	e7e1      	b.n	8008ab0 <__gethex+0x114>
 8008aec:	4621      	mov	r1, r4
 8008aee:	1bf3      	subs	r3, r6, r7
 8008af0:	3b01      	subs	r3, #1
 8008af2:	2b07      	cmp	r3, #7
 8008af4:	dc0a      	bgt.n	8008b0c <__gethex+0x170>
 8008af6:	9802      	ldr	r0, [sp, #8]
 8008af8:	f000 fa88 	bl	800900c <_Balloc>
 8008afc:	4604      	mov	r4, r0
 8008afe:	b940      	cbnz	r0, 8008b12 <__gethex+0x176>
 8008b00:	4602      	mov	r2, r0
 8008b02:	21de      	movs	r1, #222	; 0xde
 8008b04:	4b5b      	ldr	r3, [pc, #364]	; (8008c74 <__gethex+0x2d8>)
 8008b06:	485c      	ldr	r0, [pc, #368]	; (8008c78 <__gethex+0x2dc>)
 8008b08:	f001 f9bc 	bl	8009e84 <__assert_func>
 8008b0c:	3101      	adds	r1, #1
 8008b0e:	105b      	asrs	r3, r3, #1
 8008b10:	e7ef      	b.n	8008af2 <__gethex+0x156>
 8008b12:	f04f 0b00 	mov.w	fp, #0
 8008b16:	f100 0914 	add.w	r9, r0, #20
 8008b1a:	f1ca 0301 	rsb	r3, sl, #1
 8008b1e:	f8cd 9010 	str.w	r9, [sp, #16]
 8008b22:	f8cd b004 	str.w	fp, [sp, #4]
 8008b26:	9308      	str	r3, [sp, #32]
 8008b28:	42b7      	cmp	r7, r6
 8008b2a:	d33f      	bcc.n	8008bac <__gethex+0x210>
 8008b2c:	9f04      	ldr	r7, [sp, #16]
 8008b2e:	9b01      	ldr	r3, [sp, #4]
 8008b30:	f847 3b04 	str.w	r3, [r7], #4
 8008b34:	eba7 0709 	sub.w	r7, r7, r9
 8008b38:	10bf      	asrs	r7, r7, #2
 8008b3a:	6127      	str	r7, [r4, #16]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f000 fb57 	bl	80091f0 <__hi0bits>
 8008b42:	017f      	lsls	r7, r7, #5
 8008b44:	f8d8 6000 	ldr.w	r6, [r8]
 8008b48:	1a3f      	subs	r7, r7, r0
 8008b4a:	42b7      	cmp	r7, r6
 8008b4c:	dd62      	ble.n	8008c14 <__gethex+0x278>
 8008b4e:	1bbf      	subs	r7, r7, r6
 8008b50:	4639      	mov	r1, r7
 8008b52:	4620      	mov	r0, r4
 8008b54:	f000 fef1 	bl	800993a <__any_on>
 8008b58:	4682      	mov	sl, r0
 8008b5a:	b1a8      	cbz	r0, 8008b88 <__gethex+0x1ec>
 8008b5c:	f04f 0a01 	mov.w	sl, #1
 8008b60:	1e7b      	subs	r3, r7, #1
 8008b62:	1159      	asrs	r1, r3, #5
 8008b64:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008b68:	f003 021f 	and.w	r2, r3, #31
 8008b6c:	fa0a f202 	lsl.w	r2, sl, r2
 8008b70:	420a      	tst	r2, r1
 8008b72:	d009      	beq.n	8008b88 <__gethex+0x1ec>
 8008b74:	4553      	cmp	r3, sl
 8008b76:	dd05      	ble.n	8008b84 <__gethex+0x1e8>
 8008b78:	4620      	mov	r0, r4
 8008b7a:	1eb9      	subs	r1, r7, #2
 8008b7c:	f000 fedd 	bl	800993a <__any_on>
 8008b80:	2800      	cmp	r0, #0
 8008b82:	d144      	bne.n	8008c0e <__gethex+0x272>
 8008b84:	f04f 0a02 	mov.w	sl, #2
 8008b88:	4639      	mov	r1, r7
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	f7ff fe9e 	bl	80088cc <rshift>
 8008b90:	443d      	add	r5, r7
 8008b92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008b96:	42ab      	cmp	r3, r5
 8008b98:	da4a      	bge.n	8008c30 <__gethex+0x294>
 8008b9a:	4621      	mov	r1, r4
 8008b9c:	9802      	ldr	r0, [sp, #8]
 8008b9e:	f000 fa75 	bl	800908c <_Bfree>
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ba6:	27a3      	movs	r7, #163	; 0xa3
 8008ba8:	6013      	str	r3, [r2, #0]
 8008baa:	e789      	b.n	8008ac0 <__gethex+0x124>
 8008bac:	1e73      	subs	r3, r6, #1
 8008bae:	9a06      	ldr	r2, [sp, #24]
 8008bb0:	9307      	str	r3, [sp, #28]
 8008bb2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d019      	beq.n	8008bee <__gethex+0x252>
 8008bba:	f1bb 0f20 	cmp.w	fp, #32
 8008bbe:	d107      	bne.n	8008bd0 <__gethex+0x234>
 8008bc0:	9b04      	ldr	r3, [sp, #16]
 8008bc2:	9a01      	ldr	r2, [sp, #4]
 8008bc4:	f843 2b04 	str.w	r2, [r3], #4
 8008bc8:	9304      	str	r3, [sp, #16]
 8008bca:	2300      	movs	r3, #0
 8008bcc:	469b      	mov	fp, r3
 8008bce:	9301      	str	r3, [sp, #4]
 8008bd0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008bd4:	f7ff fecd 	bl	8008972 <__hexdig_fun>
 8008bd8:	9b01      	ldr	r3, [sp, #4]
 8008bda:	f000 000f 	and.w	r0, r0, #15
 8008bde:	fa00 f00b 	lsl.w	r0, r0, fp
 8008be2:	4303      	orrs	r3, r0
 8008be4:	9301      	str	r3, [sp, #4]
 8008be6:	f10b 0b04 	add.w	fp, fp, #4
 8008bea:	9b07      	ldr	r3, [sp, #28]
 8008bec:	e00d      	b.n	8008c0a <__gethex+0x26e>
 8008bee:	9a08      	ldr	r2, [sp, #32]
 8008bf0:	1e73      	subs	r3, r6, #1
 8008bf2:	4413      	add	r3, r2
 8008bf4:	42bb      	cmp	r3, r7
 8008bf6:	d3e0      	bcc.n	8008bba <__gethex+0x21e>
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	4652      	mov	r2, sl
 8008bfc:	9903      	ldr	r1, [sp, #12]
 8008bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8008c00:	f001 f91e 	bl	8009e40 <strncmp>
 8008c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c06:	2800      	cmp	r0, #0
 8008c08:	d1d7      	bne.n	8008bba <__gethex+0x21e>
 8008c0a:	461e      	mov	r6, r3
 8008c0c:	e78c      	b.n	8008b28 <__gethex+0x18c>
 8008c0e:	f04f 0a03 	mov.w	sl, #3
 8008c12:	e7b9      	b.n	8008b88 <__gethex+0x1ec>
 8008c14:	da09      	bge.n	8008c2a <__gethex+0x28e>
 8008c16:	1bf7      	subs	r7, r6, r7
 8008c18:	4621      	mov	r1, r4
 8008c1a:	463a      	mov	r2, r7
 8008c1c:	9802      	ldr	r0, [sp, #8]
 8008c1e:	f000 fc4d 	bl	80094bc <__lshift>
 8008c22:	4604      	mov	r4, r0
 8008c24:	1bed      	subs	r5, r5, r7
 8008c26:	f100 0914 	add.w	r9, r0, #20
 8008c2a:	f04f 0a00 	mov.w	sl, #0
 8008c2e:	e7b0      	b.n	8008b92 <__gethex+0x1f6>
 8008c30:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008c34:	42a8      	cmp	r0, r5
 8008c36:	dd72      	ble.n	8008d1e <__gethex+0x382>
 8008c38:	1b45      	subs	r5, r0, r5
 8008c3a:	42ae      	cmp	r6, r5
 8008c3c:	dc35      	bgt.n	8008caa <__gethex+0x30e>
 8008c3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c42:	2b02      	cmp	r3, #2
 8008c44:	d029      	beq.n	8008c9a <__gethex+0x2fe>
 8008c46:	2b03      	cmp	r3, #3
 8008c48:	d02b      	beq.n	8008ca2 <__gethex+0x306>
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d11c      	bne.n	8008c88 <__gethex+0x2ec>
 8008c4e:	42ae      	cmp	r6, r5
 8008c50:	d11a      	bne.n	8008c88 <__gethex+0x2ec>
 8008c52:	2e01      	cmp	r6, #1
 8008c54:	d112      	bne.n	8008c7c <__gethex+0x2e0>
 8008c56:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008c5a:	9a05      	ldr	r2, [sp, #20]
 8008c5c:	2762      	movs	r7, #98	; 0x62
 8008c5e:	6013      	str	r3, [r2, #0]
 8008c60:	2301      	movs	r3, #1
 8008c62:	6123      	str	r3, [r4, #16]
 8008c64:	f8c9 3000 	str.w	r3, [r9]
 8008c68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c6a:	601c      	str	r4, [r3, #0]
 8008c6c:	e728      	b.n	8008ac0 <__gethex+0x124>
 8008c6e:	bf00      	nop
 8008c70:	0800ad40 	.word	0x0800ad40
 8008c74:	0800acc8 	.word	0x0800acc8
 8008c78:	0800acd9 	.word	0x0800acd9
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	1e71      	subs	r1, r6, #1
 8008c80:	f000 fe5b 	bl	800993a <__any_on>
 8008c84:	2800      	cmp	r0, #0
 8008c86:	d1e6      	bne.n	8008c56 <__gethex+0x2ba>
 8008c88:	4621      	mov	r1, r4
 8008c8a:	9802      	ldr	r0, [sp, #8]
 8008c8c:	f000 f9fe 	bl	800908c <_Bfree>
 8008c90:	2300      	movs	r3, #0
 8008c92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008c94:	2750      	movs	r7, #80	; 0x50
 8008c96:	6013      	str	r3, [r2, #0]
 8008c98:	e712      	b.n	8008ac0 <__gethex+0x124>
 8008c9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d1f3      	bne.n	8008c88 <__gethex+0x2ec>
 8008ca0:	e7d9      	b.n	8008c56 <__gethex+0x2ba>
 8008ca2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d1d6      	bne.n	8008c56 <__gethex+0x2ba>
 8008ca8:	e7ee      	b.n	8008c88 <__gethex+0x2ec>
 8008caa:	1e6f      	subs	r7, r5, #1
 8008cac:	f1ba 0f00 	cmp.w	sl, #0
 8008cb0:	d132      	bne.n	8008d18 <__gethex+0x37c>
 8008cb2:	b127      	cbz	r7, 8008cbe <__gethex+0x322>
 8008cb4:	4639      	mov	r1, r7
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	f000 fe3f 	bl	800993a <__any_on>
 8008cbc:	4682      	mov	sl, r0
 8008cbe:	2101      	movs	r1, #1
 8008cc0:	117b      	asrs	r3, r7, #5
 8008cc2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008cc6:	f007 071f 	and.w	r7, r7, #31
 8008cca:	fa01 f707 	lsl.w	r7, r1, r7
 8008cce:	421f      	tst	r7, r3
 8008cd0:	f04f 0702 	mov.w	r7, #2
 8008cd4:	4629      	mov	r1, r5
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	bf18      	it	ne
 8008cda:	f04a 0a02 	orrne.w	sl, sl, #2
 8008cde:	1b76      	subs	r6, r6, r5
 8008ce0:	f7ff fdf4 	bl	80088cc <rshift>
 8008ce4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008ce8:	f1ba 0f00 	cmp.w	sl, #0
 8008cec:	d048      	beq.n	8008d80 <__gethex+0x3e4>
 8008cee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d015      	beq.n	8008d22 <__gethex+0x386>
 8008cf6:	2b03      	cmp	r3, #3
 8008cf8:	d017      	beq.n	8008d2a <__gethex+0x38e>
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d109      	bne.n	8008d12 <__gethex+0x376>
 8008cfe:	f01a 0f02 	tst.w	sl, #2
 8008d02:	d006      	beq.n	8008d12 <__gethex+0x376>
 8008d04:	f8d9 0000 	ldr.w	r0, [r9]
 8008d08:	ea4a 0a00 	orr.w	sl, sl, r0
 8008d0c:	f01a 0f01 	tst.w	sl, #1
 8008d10:	d10e      	bne.n	8008d30 <__gethex+0x394>
 8008d12:	f047 0710 	orr.w	r7, r7, #16
 8008d16:	e033      	b.n	8008d80 <__gethex+0x3e4>
 8008d18:	f04f 0a01 	mov.w	sl, #1
 8008d1c:	e7cf      	b.n	8008cbe <__gethex+0x322>
 8008d1e:	2701      	movs	r7, #1
 8008d20:	e7e2      	b.n	8008ce8 <__gethex+0x34c>
 8008d22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d24:	f1c3 0301 	rsb	r3, r3, #1
 8008d28:	9315      	str	r3, [sp, #84]	; 0x54
 8008d2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d0f0      	beq.n	8008d12 <__gethex+0x376>
 8008d30:	f04f 0c00 	mov.w	ip, #0
 8008d34:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008d38:	f104 0314 	add.w	r3, r4, #20
 8008d3c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008d40:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008d44:	4618      	mov	r0, r3
 8008d46:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d4a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008d4e:	d01c      	beq.n	8008d8a <__gethex+0x3ee>
 8008d50:	3201      	adds	r2, #1
 8008d52:	6002      	str	r2, [r0, #0]
 8008d54:	2f02      	cmp	r7, #2
 8008d56:	f104 0314 	add.w	r3, r4, #20
 8008d5a:	d13d      	bne.n	8008dd8 <__gethex+0x43c>
 8008d5c:	f8d8 2000 	ldr.w	r2, [r8]
 8008d60:	3a01      	subs	r2, #1
 8008d62:	42b2      	cmp	r2, r6
 8008d64:	d10a      	bne.n	8008d7c <__gethex+0x3e0>
 8008d66:	2201      	movs	r2, #1
 8008d68:	1171      	asrs	r1, r6, #5
 8008d6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d6e:	f006 061f 	and.w	r6, r6, #31
 8008d72:	fa02 f606 	lsl.w	r6, r2, r6
 8008d76:	421e      	tst	r6, r3
 8008d78:	bf18      	it	ne
 8008d7a:	4617      	movne	r7, r2
 8008d7c:	f047 0720 	orr.w	r7, r7, #32
 8008d80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d82:	601c      	str	r4, [r3, #0]
 8008d84:	9b05      	ldr	r3, [sp, #20]
 8008d86:	601d      	str	r5, [r3, #0]
 8008d88:	e69a      	b.n	8008ac0 <__gethex+0x124>
 8008d8a:	4299      	cmp	r1, r3
 8008d8c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008d90:	d8d8      	bhi.n	8008d44 <__gethex+0x3a8>
 8008d92:	68a3      	ldr	r3, [r4, #8]
 8008d94:	459b      	cmp	fp, r3
 8008d96:	db17      	blt.n	8008dc8 <__gethex+0x42c>
 8008d98:	6861      	ldr	r1, [r4, #4]
 8008d9a:	9802      	ldr	r0, [sp, #8]
 8008d9c:	3101      	adds	r1, #1
 8008d9e:	f000 f935 	bl	800900c <_Balloc>
 8008da2:	4681      	mov	r9, r0
 8008da4:	b918      	cbnz	r0, 8008dae <__gethex+0x412>
 8008da6:	4602      	mov	r2, r0
 8008da8:	2184      	movs	r1, #132	; 0x84
 8008daa:	4b19      	ldr	r3, [pc, #100]	; (8008e10 <__gethex+0x474>)
 8008dac:	e6ab      	b.n	8008b06 <__gethex+0x16a>
 8008dae:	6922      	ldr	r2, [r4, #16]
 8008db0:	f104 010c 	add.w	r1, r4, #12
 8008db4:	3202      	adds	r2, #2
 8008db6:	0092      	lsls	r2, r2, #2
 8008db8:	300c      	adds	r0, #12
 8008dba:	f000 f919 	bl	8008ff0 <memcpy>
 8008dbe:	4621      	mov	r1, r4
 8008dc0:	9802      	ldr	r0, [sp, #8]
 8008dc2:	f000 f963 	bl	800908c <_Bfree>
 8008dc6:	464c      	mov	r4, r9
 8008dc8:	6923      	ldr	r3, [r4, #16]
 8008dca:	1c5a      	adds	r2, r3, #1
 8008dcc:	6122      	str	r2, [r4, #16]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008dd4:	615a      	str	r2, [r3, #20]
 8008dd6:	e7bd      	b.n	8008d54 <__gethex+0x3b8>
 8008dd8:	6922      	ldr	r2, [r4, #16]
 8008dda:	455a      	cmp	r2, fp
 8008ddc:	dd0b      	ble.n	8008df6 <__gethex+0x45a>
 8008dde:	2101      	movs	r1, #1
 8008de0:	4620      	mov	r0, r4
 8008de2:	f7ff fd73 	bl	80088cc <rshift>
 8008de6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008dea:	3501      	adds	r5, #1
 8008dec:	42ab      	cmp	r3, r5
 8008dee:	f6ff aed4 	blt.w	8008b9a <__gethex+0x1fe>
 8008df2:	2701      	movs	r7, #1
 8008df4:	e7c2      	b.n	8008d7c <__gethex+0x3e0>
 8008df6:	f016 061f 	ands.w	r6, r6, #31
 8008dfa:	d0fa      	beq.n	8008df2 <__gethex+0x456>
 8008dfc:	4453      	add	r3, sl
 8008dfe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008e02:	f000 f9f5 	bl	80091f0 <__hi0bits>
 8008e06:	f1c6 0620 	rsb	r6, r6, #32
 8008e0a:	42b0      	cmp	r0, r6
 8008e0c:	dbe7      	blt.n	8008dde <__gethex+0x442>
 8008e0e:	e7f0      	b.n	8008df2 <__gethex+0x456>
 8008e10:	0800acc8 	.word	0x0800acc8

08008e14 <L_shift>:
 8008e14:	f1c2 0208 	rsb	r2, r2, #8
 8008e18:	0092      	lsls	r2, r2, #2
 8008e1a:	b570      	push	{r4, r5, r6, lr}
 8008e1c:	f1c2 0620 	rsb	r6, r2, #32
 8008e20:	6843      	ldr	r3, [r0, #4]
 8008e22:	6804      	ldr	r4, [r0, #0]
 8008e24:	fa03 f506 	lsl.w	r5, r3, r6
 8008e28:	432c      	orrs	r4, r5
 8008e2a:	40d3      	lsrs	r3, r2
 8008e2c:	6004      	str	r4, [r0, #0]
 8008e2e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008e32:	4288      	cmp	r0, r1
 8008e34:	d3f4      	bcc.n	8008e20 <L_shift+0xc>
 8008e36:	bd70      	pop	{r4, r5, r6, pc}

08008e38 <__match>:
 8008e38:	b530      	push	{r4, r5, lr}
 8008e3a:	6803      	ldr	r3, [r0, #0]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e42:	b914      	cbnz	r4, 8008e4a <__match+0x12>
 8008e44:	6003      	str	r3, [r0, #0]
 8008e46:	2001      	movs	r0, #1
 8008e48:	bd30      	pop	{r4, r5, pc}
 8008e4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e4e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008e52:	2d19      	cmp	r5, #25
 8008e54:	bf98      	it	ls
 8008e56:	3220      	addls	r2, #32
 8008e58:	42a2      	cmp	r2, r4
 8008e5a:	d0f0      	beq.n	8008e3e <__match+0x6>
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	e7f3      	b.n	8008e48 <__match+0x10>

08008e60 <__hexnan>:
 8008e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e64:	2500      	movs	r5, #0
 8008e66:	680b      	ldr	r3, [r1, #0]
 8008e68:	4682      	mov	sl, r0
 8008e6a:	115e      	asrs	r6, r3, #5
 8008e6c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008e70:	f013 031f 	ands.w	r3, r3, #31
 8008e74:	bf18      	it	ne
 8008e76:	3604      	addne	r6, #4
 8008e78:	1f37      	subs	r7, r6, #4
 8008e7a:	46b9      	mov	r9, r7
 8008e7c:	463c      	mov	r4, r7
 8008e7e:	46ab      	mov	fp, r5
 8008e80:	b087      	sub	sp, #28
 8008e82:	4690      	mov	r8, r2
 8008e84:	6802      	ldr	r2, [r0, #0]
 8008e86:	9301      	str	r3, [sp, #4]
 8008e88:	f846 5c04 	str.w	r5, [r6, #-4]
 8008e8c:	9502      	str	r5, [sp, #8]
 8008e8e:	7851      	ldrb	r1, [r2, #1]
 8008e90:	1c53      	adds	r3, r2, #1
 8008e92:	9303      	str	r3, [sp, #12]
 8008e94:	b341      	cbz	r1, 8008ee8 <__hexnan+0x88>
 8008e96:	4608      	mov	r0, r1
 8008e98:	9205      	str	r2, [sp, #20]
 8008e9a:	9104      	str	r1, [sp, #16]
 8008e9c:	f7ff fd69 	bl	8008972 <__hexdig_fun>
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	d14f      	bne.n	8008f44 <__hexnan+0xe4>
 8008ea4:	9904      	ldr	r1, [sp, #16]
 8008ea6:	9a05      	ldr	r2, [sp, #20]
 8008ea8:	2920      	cmp	r1, #32
 8008eaa:	d818      	bhi.n	8008ede <__hexnan+0x7e>
 8008eac:	9b02      	ldr	r3, [sp, #8]
 8008eae:	459b      	cmp	fp, r3
 8008eb0:	dd13      	ble.n	8008eda <__hexnan+0x7a>
 8008eb2:	454c      	cmp	r4, r9
 8008eb4:	d206      	bcs.n	8008ec4 <__hexnan+0x64>
 8008eb6:	2d07      	cmp	r5, #7
 8008eb8:	dc04      	bgt.n	8008ec4 <__hexnan+0x64>
 8008eba:	462a      	mov	r2, r5
 8008ebc:	4649      	mov	r1, r9
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	f7ff ffa8 	bl	8008e14 <L_shift>
 8008ec4:	4544      	cmp	r4, r8
 8008ec6:	d950      	bls.n	8008f6a <__hexnan+0x10a>
 8008ec8:	2300      	movs	r3, #0
 8008eca:	f1a4 0904 	sub.w	r9, r4, #4
 8008ece:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ed2:	461d      	mov	r5, r3
 8008ed4:	464c      	mov	r4, r9
 8008ed6:	f8cd b008 	str.w	fp, [sp, #8]
 8008eda:	9a03      	ldr	r2, [sp, #12]
 8008edc:	e7d7      	b.n	8008e8e <__hexnan+0x2e>
 8008ede:	2929      	cmp	r1, #41	; 0x29
 8008ee0:	d156      	bne.n	8008f90 <__hexnan+0x130>
 8008ee2:	3202      	adds	r2, #2
 8008ee4:	f8ca 2000 	str.w	r2, [sl]
 8008ee8:	f1bb 0f00 	cmp.w	fp, #0
 8008eec:	d050      	beq.n	8008f90 <__hexnan+0x130>
 8008eee:	454c      	cmp	r4, r9
 8008ef0:	d206      	bcs.n	8008f00 <__hexnan+0xa0>
 8008ef2:	2d07      	cmp	r5, #7
 8008ef4:	dc04      	bgt.n	8008f00 <__hexnan+0xa0>
 8008ef6:	462a      	mov	r2, r5
 8008ef8:	4649      	mov	r1, r9
 8008efa:	4620      	mov	r0, r4
 8008efc:	f7ff ff8a 	bl	8008e14 <L_shift>
 8008f00:	4544      	cmp	r4, r8
 8008f02:	d934      	bls.n	8008f6e <__hexnan+0x10e>
 8008f04:	4623      	mov	r3, r4
 8008f06:	f1a8 0204 	sub.w	r2, r8, #4
 8008f0a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008f0e:	429f      	cmp	r7, r3
 8008f10:	f842 1f04 	str.w	r1, [r2, #4]!
 8008f14:	d2f9      	bcs.n	8008f0a <__hexnan+0xaa>
 8008f16:	1b3b      	subs	r3, r7, r4
 8008f18:	f023 0303 	bic.w	r3, r3, #3
 8008f1c:	3304      	adds	r3, #4
 8008f1e:	3401      	adds	r4, #1
 8008f20:	3e03      	subs	r6, #3
 8008f22:	42b4      	cmp	r4, r6
 8008f24:	bf88      	it	hi
 8008f26:	2304      	movhi	r3, #4
 8008f28:	2200      	movs	r2, #0
 8008f2a:	4443      	add	r3, r8
 8008f2c:	f843 2b04 	str.w	r2, [r3], #4
 8008f30:	429f      	cmp	r7, r3
 8008f32:	d2fb      	bcs.n	8008f2c <__hexnan+0xcc>
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	b91b      	cbnz	r3, 8008f40 <__hexnan+0xe0>
 8008f38:	4547      	cmp	r7, r8
 8008f3a:	d127      	bne.n	8008f8c <__hexnan+0x12c>
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	603b      	str	r3, [r7, #0]
 8008f40:	2005      	movs	r0, #5
 8008f42:	e026      	b.n	8008f92 <__hexnan+0x132>
 8008f44:	3501      	adds	r5, #1
 8008f46:	2d08      	cmp	r5, #8
 8008f48:	f10b 0b01 	add.w	fp, fp, #1
 8008f4c:	dd06      	ble.n	8008f5c <__hexnan+0xfc>
 8008f4e:	4544      	cmp	r4, r8
 8008f50:	d9c3      	bls.n	8008eda <__hexnan+0x7a>
 8008f52:	2300      	movs	r3, #0
 8008f54:	2501      	movs	r5, #1
 8008f56:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f5a:	3c04      	subs	r4, #4
 8008f5c:	6822      	ldr	r2, [r4, #0]
 8008f5e:	f000 000f 	and.w	r0, r0, #15
 8008f62:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008f66:	6022      	str	r2, [r4, #0]
 8008f68:	e7b7      	b.n	8008eda <__hexnan+0x7a>
 8008f6a:	2508      	movs	r5, #8
 8008f6c:	e7b5      	b.n	8008eda <__hexnan+0x7a>
 8008f6e:	9b01      	ldr	r3, [sp, #4]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d0df      	beq.n	8008f34 <__hexnan+0xd4>
 8008f74:	f04f 32ff 	mov.w	r2, #4294967295
 8008f78:	f1c3 0320 	rsb	r3, r3, #32
 8008f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f80:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008f84:	401a      	ands	r2, r3
 8008f86:	f846 2c04 	str.w	r2, [r6, #-4]
 8008f8a:	e7d3      	b.n	8008f34 <__hexnan+0xd4>
 8008f8c:	3f04      	subs	r7, #4
 8008f8e:	e7d1      	b.n	8008f34 <__hexnan+0xd4>
 8008f90:	2004      	movs	r0, #4
 8008f92:	b007      	add	sp, #28
 8008f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008f98 <_localeconv_r>:
 8008f98:	4800      	ldr	r0, [pc, #0]	; (8008f9c <_localeconv_r+0x4>)
 8008f9a:	4770      	bx	lr
 8008f9c:	20000198 	.word	0x20000198

08008fa0 <malloc>:
 8008fa0:	4b02      	ldr	r3, [pc, #8]	; (8008fac <malloc+0xc>)
 8008fa2:	4601      	mov	r1, r0
 8008fa4:	6818      	ldr	r0, [r3, #0]
 8008fa6:	f000 bd65 	b.w	8009a74 <_malloc_r>
 8008faa:	bf00      	nop
 8008fac:	20000040 	.word	0x20000040

08008fb0 <__ascii_mbtowc>:
 8008fb0:	b082      	sub	sp, #8
 8008fb2:	b901      	cbnz	r1, 8008fb6 <__ascii_mbtowc+0x6>
 8008fb4:	a901      	add	r1, sp, #4
 8008fb6:	b142      	cbz	r2, 8008fca <__ascii_mbtowc+0x1a>
 8008fb8:	b14b      	cbz	r3, 8008fce <__ascii_mbtowc+0x1e>
 8008fba:	7813      	ldrb	r3, [r2, #0]
 8008fbc:	600b      	str	r3, [r1, #0]
 8008fbe:	7812      	ldrb	r2, [r2, #0]
 8008fc0:	1e10      	subs	r0, r2, #0
 8008fc2:	bf18      	it	ne
 8008fc4:	2001      	movne	r0, #1
 8008fc6:	b002      	add	sp, #8
 8008fc8:	4770      	bx	lr
 8008fca:	4610      	mov	r0, r2
 8008fcc:	e7fb      	b.n	8008fc6 <__ascii_mbtowc+0x16>
 8008fce:	f06f 0001 	mvn.w	r0, #1
 8008fd2:	e7f8      	b.n	8008fc6 <__ascii_mbtowc+0x16>

08008fd4 <memchr>:
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	b510      	push	{r4, lr}
 8008fd8:	b2c9      	uxtb	r1, r1
 8008fda:	4402      	add	r2, r0
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	4618      	mov	r0, r3
 8008fe0:	d101      	bne.n	8008fe6 <memchr+0x12>
 8008fe2:	2000      	movs	r0, #0
 8008fe4:	e003      	b.n	8008fee <memchr+0x1a>
 8008fe6:	7804      	ldrb	r4, [r0, #0]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	428c      	cmp	r4, r1
 8008fec:	d1f6      	bne.n	8008fdc <memchr+0x8>
 8008fee:	bd10      	pop	{r4, pc}

08008ff0 <memcpy>:
 8008ff0:	440a      	add	r2, r1
 8008ff2:	4291      	cmp	r1, r2
 8008ff4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ff8:	d100      	bne.n	8008ffc <memcpy+0xc>
 8008ffa:	4770      	bx	lr
 8008ffc:	b510      	push	{r4, lr}
 8008ffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009002:	4291      	cmp	r1, r2
 8009004:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009008:	d1f9      	bne.n	8008ffe <memcpy+0xe>
 800900a:	bd10      	pop	{r4, pc}

0800900c <_Balloc>:
 800900c:	b570      	push	{r4, r5, r6, lr}
 800900e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009010:	4604      	mov	r4, r0
 8009012:	460d      	mov	r5, r1
 8009014:	b976      	cbnz	r6, 8009034 <_Balloc+0x28>
 8009016:	2010      	movs	r0, #16
 8009018:	f7ff ffc2 	bl	8008fa0 <malloc>
 800901c:	4602      	mov	r2, r0
 800901e:	6260      	str	r0, [r4, #36]	; 0x24
 8009020:	b920      	cbnz	r0, 800902c <_Balloc+0x20>
 8009022:	2166      	movs	r1, #102	; 0x66
 8009024:	4b17      	ldr	r3, [pc, #92]	; (8009084 <_Balloc+0x78>)
 8009026:	4818      	ldr	r0, [pc, #96]	; (8009088 <_Balloc+0x7c>)
 8009028:	f000 ff2c 	bl	8009e84 <__assert_func>
 800902c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009030:	6006      	str	r6, [r0, #0]
 8009032:	60c6      	str	r6, [r0, #12]
 8009034:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009036:	68f3      	ldr	r3, [r6, #12]
 8009038:	b183      	cbz	r3, 800905c <_Balloc+0x50>
 800903a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009042:	b9b8      	cbnz	r0, 8009074 <_Balloc+0x68>
 8009044:	2101      	movs	r1, #1
 8009046:	fa01 f605 	lsl.w	r6, r1, r5
 800904a:	1d72      	adds	r2, r6, #5
 800904c:	4620      	mov	r0, r4
 800904e:	0092      	lsls	r2, r2, #2
 8009050:	f000 fc94 	bl	800997c <_calloc_r>
 8009054:	b160      	cbz	r0, 8009070 <_Balloc+0x64>
 8009056:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800905a:	e00e      	b.n	800907a <_Balloc+0x6e>
 800905c:	2221      	movs	r2, #33	; 0x21
 800905e:	2104      	movs	r1, #4
 8009060:	4620      	mov	r0, r4
 8009062:	f000 fc8b 	bl	800997c <_calloc_r>
 8009066:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009068:	60f0      	str	r0, [r6, #12]
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d1e4      	bne.n	800903a <_Balloc+0x2e>
 8009070:	2000      	movs	r0, #0
 8009072:	bd70      	pop	{r4, r5, r6, pc}
 8009074:	6802      	ldr	r2, [r0, #0]
 8009076:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800907a:	2300      	movs	r3, #0
 800907c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009080:	e7f7      	b.n	8009072 <_Balloc+0x66>
 8009082:	bf00      	nop
 8009084:	0800ac56 	.word	0x0800ac56
 8009088:	0800ad54 	.word	0x0800ad54

0800908c <_Bfree>:
 800908c:	b570      	push	{r4, r5, r6, lr}
 800908e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009090:	4605      	mov	r5, r0
 8009092:	460c      	mov	r4, r1
 8009094:	b976      	cbnz	r6, 80090b4 <_Bfree+0x28>
 8009096:	2010      	movs	r0, #16
 8009098:	f7ff ff82 	bl	8008fa0 <malloc>
 800909c:	4602      	mov	r2, r0
 800909e:	6268      	str	r0, [r5, #36]	; 0x24
 80090a0:	b920      	cbnz	r0, 80090ac <_Bfree+0x20>
 80090a2:	218a      	movs	r1, #138	; 0x8a
 80090a4:	4b08      	ldr	r3, [pc, #32]	; (80090c8 <_Bfree+0x3c>)
 80090a6:	4809      	ldr	r0, [pc, #36]	; (80090cc <_Bfree+0x40>)
 80090a8:	f000 feec 	bl	8009e84 <__assert_func>
 80090ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090b0:	6006      	str	r6, [r0, #0]
 80090b2:	60c6      	str	r6, [r0, #12]
 80090b4:	b13c      	cbz	r4, 80090c6 <_Bfree+0x3a>
 80090b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80090b8:	6862      	ldr	r2, [r4, #4]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80090c0:	6021      	str	r1, [r4, #0]
 80090c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80090c6:	bd70      	pop	{r4, r5, r6, pc}
 80090c8:	0800ac56 	.word	0x0800ac56
 80090cc:	0800ad54 	.word	0x0800ad54

080090d0 <__multadd>:
 80090d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090d4:	4607      	mov	r7, r0
 80090d6:	460c      	mov	r4, r1
 80090d8:	461e      	mov	r6, r3
 80090da:	2000      	movs	r0, #0
 80090dc:	690d      	ldr	r5, [r1, #16]
 80090de:	f101 0c14 	add.w	ip, r1, #20
 80090e2:	f8dc 3000 	ldr.w	r3, [ip]
 80090e6:	3001      	adds	r0, #1
 80090e8:	b299      	uxth	r1, r3
 80090ea:	fb02 6101 	mla	r1, r2, r1, r6
 80090ee:	0c1e      	lsrs	r6, r3, #16
 80090f0:	0c0b      	lsrs	r3, r1, #16
 80090f2:	fb02 3306 	mla	r3, r2, r6, r3
 80090f6:	b289      	uxth	r1, r1
 80090f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80090fc:	4285      	cmp	r5, r0
 80090fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009102:	f84c 1b04 	str.w	r1, [ip], #4
 8009106:	dcec      	bgt.n	80090e2 <__multadd+0x12>
 8009108:	b30e      	cbz	r6, 800914e <__multadd+0x7e>
 800910a:	68a3      	ldr	r3, [r4, #8]
 800910c:	42ab      	cmp	r3, r5
 800910e:	dc19      	bgt.n	8009144 <__multadd+0x74>
 8009110:	6861      	ldr	r1, [r4, #4]
 8009112:	4638      	mov	r0, r7
 8009114:	3101      	adds	r1, #1
 8009116:	f7ff ff79 	bl	800900c <_Balloc>
 800911a:	4680      	mov	r8, r0
 800911c:	b928      	cbnz	r0, 800912a <__multadd+0x5a>
 800911e:	4602      	mov	r2, r0
 8009120:	21b5      	movs	r1, #181	; 0xb5
 8009122:	4b0c      	ldr	r3, [pc, #48]	; (8009154 <__multadd+0x84>)
 8009124:	480c      	ldr	r0, [pc, #48]	; (8009158 <__multadd+0x88>)
 8009126:	f000 fead 	bl	8009e84 <__assert_func>
 800912a:	6922      	ldr	r2, [r4, #16]
 800912c:	f104 010c 	add.w	r1, r4, #12
 8009130:	3202      	adds	r2, #2
 8009132:	0092      	lsls	r2, r2, #2
 8009134:	300c      	adds	r0, #12
 8009136:	f7ff ff5b 	bl	8008ff0 <memcpy>
 800913a:	4621      	mov	r1, r4
 800913c:	4638      	mov	r0, r7
 800913e:	f7ff ffa5 	bl	800908c <_Bfree>
 8009142:	4644      	mov	r4, r8
 8009144:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009148:	3501      	adds	r5, #1
 800914a:	615e      	str	r6, [r3, #20]
 800914c:	6125      	str	r5, [r4, #16]
 800914e:	4620      	mov	r0, r4
 8009150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009154:	0800acc8 	.word	0x0800acc8
 8009158:	0800ad54 	.word	0x0800ad54

0800915c <__s2b>:
 800915c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009160:	4615      	mov	r5, r2
 8009162:	2209      	movs	r2, #9
 8009164:	461f      	mov	r7, r3
 8009166:	3308      	adds	r3, #8
 8009168:	460c      	mov	r4, r1
 800916a:	fb93 f3f2 	sdiv	r3, r3, r2
 800916e:	4606      	mov	r6, r0
 8009170:	2201      	movs	r2, #1
 8009172:	2100      	movs	r1, #0
 8009174:	429a      	cmp	r2, r3
 8009176:	db09      	blt.n	800918c <__s2b+0x30>
 8009178:	4630      	mov	r0, r6
 800917a:	f7ff ff47 	bl	800900c <_Balloc>
 800917e:	b940      	cbnz	r0, 8009192 <__s2b+0x36>
 8009180:	4602      	mov	r2, r0
 8009182:	21ce      	movs	r1, #206	; 0xce
 8009184:	4b18      	ldr	r3, [pc, #96]	; (80091e8 <__s2b+0x8c>)
 8009186:	4819      	ldr	r0, [pc, #100]	; (80091ec <__s2b+0x90>)
 8009188:	f000 fe7c 	bl	8009e84 <__assert_func>
 800918c:	0052      	lsls	r2, r2, #1
 800918e:	3101      	adds	r1, #1
 8009190:	e7f0      	b.n	8009174 <__s2b+0x18>
 8009192:	9b08      	ldr	r3, [sp, #32]
 8009194:	2d09      	cmp	r5, #9
 8009196:	6143      	str	r3, [r0, #20]
 8009198:	f04f 0301 	mov.w	r3, #1
 800919c:	6103      	str	r3, [r0, #16]
 800919e:	dd16      	ble.n	80091ce <__s2b+0x72>
 80091a0:	f104 0909 	add.w	r9, r4, #9
 80091a4:	46c8      	mov	r8, r9
 80091a6:	442c      	add	r4, r5
 80091a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80091ac:	4601      	mov	r1, r0
 80091ae:	220a      	movs	r2, #10
 80091b0:	4630      	mov	r0, r6
 80091b2:	3b30      	subs	r3, #48	; 0x30
 80091b4:	f7ff ff8c 	bl	80090d0 <__multadd>
 80091b8:	45a0      	cmp	r8, r4
 80091ba:	d1f5      	bne.n	80091a8 <__s2b+0x4c>
 80091bc:	f1a5 0408 	sub.w	r4, r5, #8
 80091c0:	444c      	add	r4, r9
 80091c2:	1b2d      	subs	r5, r5, r4
 80091c4:	1963      	adds	r3, r4, r5
 80091c6:	42bb      	cmp	r3, r7
 80091c8:	db04      	blt.n	80091d4 <__s2b+0x78>
 80091ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091ce:	2509      	movs	r5, #9
 80091d0:	340a      	adds	r4, #10
 80091d2:	e7f6      	b.n	80091c2 <__s2b+0x66>
 80091d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80091d8:	4601      	mov	r1, r0
 80091da:	220a      	movs	r2, #10
 80091dc:	4630      	mov	r0, r6
 80091de:	3b30      	subs	r3, #48	; 0x30
 80091e0:	f7ff ff76 	bl	80090d0 <__multadd>
 80091e4:	e7ee      	b.n	80091c4 <__s2b+0x68>
 80091e6:	bf00      	nop
 80091e8:	0800acc8 	.word	0x0800acc8
 80091ec:	0800ad54 	.word	0x0800ad54

080091f0 <__hi0bits>:
 80091f0:	0c02      	lsrs	r2, r0, #16
 80091f2:	0412      	lsls	r2, r2, #16
 80091f4:	4603      	mov	r3, r0
 80091f6:	b9ca      	cbnz	r2, 800922c <__hi0bits+0x3c>
 80091f8:	0403      	lsls	r3, r0, #16
 80091fa:	2010      	movs	r0, #16
 80091fc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009200:	bf04      	itt	eq
 8009202:	021b      	lsleq	r3, r3, #8
 8009204:	3008      	addeq	r0, #8
 8009206:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800920a:	bf04      	itt	eq
 800920c:	011b      	lsleq	r3, r3, #4
 800920e:	3004      	addeq	r0, #4
 8009210:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009214:	bf04      	itt	eq
 8009216:	009b      	lsleq	r3, r3, #2
 8009218:	3002      	addeq	r0, #2
 800921a:	2b00      	cmp	r3, #0
 800921c:	db05      	blt.n	800922a <__hi0bits+0x3a>
 800921e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009222:	f100 0001 	add.w	r0, r0, #1
 8009226:	bf08      	it	eq
 8009228:	2020      	moveq	r0, #32
 800922a:	4770      	bx	lr
 800922c:	2000      	movs	r0, #0
 800922e:	e7e5      	b.n	80091fc <__hi0bits+0xc>

08009230 <__lo0bits>:
 8009230:	6803      	ldr	r3, [r0, #0]
 8009232:	4602      	mov	r2, r0
 8009234:	f013 0007 	ands.w	r0, r3, #7
 8009238:	d00b      	beq.n	8009252 <__lo0bits+0x22>
 800923a:	07d9      	lsls	r1, r3, #31
 800923c:	d421      	bmi.n	8009282 <__lo0bits+0x52>
 800923e:	0798      	lsls	r0, r3, #30
 8009240:	bf49      	itett	mi
 8009242:	085b      	lsrmi	r3, r3, #1
 8009244:	089b      	lsrpl	r3, r3, #2
 8009246:	2001      	movmi	r0, #1
 8009248:	6013      	strmi	r3, [r2, #0]
 800924a:	bf5c      	itt	pl
 800924c:	2002      	movpl	r0, #2
 800924e:	6013      	strpl	r3, [r2, #0]
 8009250:	4770      	bx	lr
 8009252:	b299      	uxth	r1, r3
 8009254:	b909      	cbnz	r1, 800925a <__lo0bits+0x2a>
 8009256:	2010      	movs	r0, #16
 8009258:	0c1b      	lsrs	r3, r3, #16
 800925a:	b2d9      	uxtb	r1, r3
 800925c:	b909      	cbnz	r1, 8009262 <__lo0bits+0x32>
 800925e:	3008      	adds	r0, #8
 8009260:	0a1b      	lsrs	r3, r3, #8
 8009262:	0719      	lsls	r1, r3, #28
 8009264:	bf04      	itt	eq
 8009266:	091b      	lsreq	r3, r3, #4
 8009268:	3004      	addeq	r0, #4
 800926a:	0799      	lsls	r1, r3, #30
 800926c:	bf04      	itt	eq
 800926e:	089b      	lsreq	r3, r3, #2
 8009270:	3002      	addeq	r0, #2
 8009272:	07d9      	lsls	r1, r3, #31
 8009274:	d403      	bmi.n	800927e <__lo0bits+0x4e>
 8009276:	085b      	lsrs	r3, r3, #1
 8009278:	f100 0001 	add.w	r0, r0, #1
 800927c:	d003      	beq.n	8009286 <__lo0bits+0x56>
 800927e:	6013      	str	r3, [r2, #0]
 8009280:	4770      	bx	lr
 8009282:	2000      	movs	r0, #0
 8009284:	4770      	bx	lr
 8009286:	2020      	movs	r0, #32
 8009288:	4770      	bx	lr
	...

0800928c <__i2b>:
 800928c:	b510      	push	{r4, lr}
 800928e:	460c      	mov	r4, r1
 8009290:	2101      	movs	r1, #1
 8009292:	f7ff febb 	bl	800900c <_Balloc>
 8009296:	4602      	mov	r2, r0
 8009298:	b928      	cbnz	r0, 80092a6 <__i2b+0x1a>
 800929a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800929e:	4b04      	ldr	r3, [pc, #16]	; (80092b0 <__i2b+0x24>)
 80092a0:	4804      	ldr	r0, [pc, #16]	; (80092b4 <__i2b+0x28>)
 80092a2:	f000 fdef 	bl	8009e84 <__assert_func>
 80092a6:	2301      	movs	r3, #1
 80092a8:	6144      	str	r4, [r0, #20]
 80092aa:	6103      	str	r3, [r0, #16]
 80092ac:	bd10      	pop	{r4, pc}
 80092ae:	bf00      	nop
 80092b0:	0800acc8 	.word	0x0800acc8
 80092b4:	0800ad54 	.word	0x0800ad54

080092b8 <__multiply>:
 80092b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092bc:	4691      	mov	r9, r2
 80092be:	690a      	ldr	r2, [r1, #16]
 80092c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80092c4:	460c      	mov	r4, r1
 80092c6:	429a      	cmp	r2, r3
 80092c8:	bfbe      	ittt	lt
 80092ca:	460b      	movlt	r3, r1
 80092cc:	464c      	movlt	r4, r9
 80092ce:	4699      	movlt	r9, r3
 80092d0:	6927      	ldr	r7, [r4, #16]
 80092d2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80092d6:	68a3      	ldr	r3, [r4, #8]
 80092d8:	6861      	ldr	r1, [r4, #4]
 80092da:	eb07 060a 	add.w	r6, r7, sl
 80092de:	42b3      	cmp	r3, r6
 80092e0:	b085      	sub	sp, #20
 80092e2:	bfb8      	it	lt
 80092e4:	3101      	addlt	r1, #1
 80092e6:	f7ff fe91 	bl	800900c <_Balloc>
 80092ea:	b930      	cbnz	r0, 80092fa <__multiply+0x42>
 80092ec:	4602      	mov	r2, r0
 80092ee:	f240 115d 	movw	r1, #349	; 0x15d
 80092f2:	4b43      	ldr	r3, [pc, #268]	; (8009400 <__multiply+0x148>)
 80092f4:	4843      	ldr	r0, [pc, #268]	; (8009404 <__multiply+0x14c>)
 80092f6:	f000 fdc5 	bl	8009e84 <__assert_func>
 80092fa:	f100 0514 	add.w	r5, r0, #20
 80092fe:	462b      	mov	r3, r5
 8009300:	2200      	movs	r2, #0
 8009302:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009306:	4543      	cmp	r3, r8
 8009308:	d321      	bcc.n	800934e <__multiply+0x96>
 800930a:	f104 0314 	add.w	r3, r4, #20
 800930e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009312:	f109 0314 	add.w	r3, r9, #20
 8009316:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800931a:	9202      	str	r2, [sp, #8]
 800931c:	1b3a      	subs	r2, r7, r4
 800931e:	3a15      	subs	r2, #21
 8009320:	f022 0203 	bic.w	r2, r2, #3
 8009324:	3204      	adds	r2, #4
 8009326:	f104 0115 	add.w	r1, r4, #21
 800932a:	428f      	cmp	r7, r1
 800932c:	bf38      	it	cc
 800932e:	2204      	movcc	r2, #4
 8009330:	9201      	str	r2, [sp, #4]
 8009332:	9a02      	ldr	r2, [sp, #8]
 8009334:	9303      	str	r3, [sp, #12]
 8009336:	429a      	cmp	r2, r3
 8009338:	d80c      	bhi.n	8009354 <__multiply+0x9c>
 800933a:	2e00      	cmp	r6, #0
 800933c:	dd03      	ble.n	8009346 <__multiply+0x8e>
 800933e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009342:	2b00      	cmp	r3, #0
 8009344:	d059      	beq.n	80093fa <__multiply+0x142>
 8009346:	6106      	str	r6, [r0, #16]
 8009348:	b005      	add	sp, #20
 800934a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800934e:	f843 2b04 	str.w	r2, [r3], #4
 8009352:	e7d8      	b.n	8009306 <__multiply+0x4e>
 8009354:	f8b3 a000 	ldrh.w	sl, [r3]
 8009358:	f1ba 0f00 	cmp.w	sl, #0
 800935c:	d023      	beq.n	80093a6 <__multiply+0xee>
 800935e:	46a9      	mov	r9, r5
 8009360:	f04f 0c00 	mov.w	ip, #0
 8009364:	f104 0e14 	add.w	lr, r4, #20
 8009368:	f85e 2b04 	ldr.w	r2, [lr], #4
 800936c:	f8d9 1000 	ldr.w	r1, [r9]
 8009370:	fa1f fb82 	uxth.w	fp, r2
 8009374:	b289      	uxth	r1, r1
 8009376:	fb0a 110b 	mla	r1, sl, fp, r1
 800937a:	4461      	add	r1, ip
 800937c:	f8d9 c000 	ldr.w	ip, [r9]
 8009380:	0c12      	lsrs	r2, r2, #16
 8009382:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009386:	fb0a c202 	mla	r2, sl, r2, ip
 800938a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800938e:	b289      	uxth	r1, r1
 8009390:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009394:	4577      	cmp	r7, lr
 8009396:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800939a:	f849 1b04 	str.w	r1, [r9], #4
 800939e:	d8e3      	bhi.n	8009368 <__multiply+0xb0>
 80093a0:	9a01      	ldr	r2, [sp, #4]
 80093a2:	f845 c002 	str.w	ip, [r5, r2]
 80093a6:	9a03      	ldr	r2, [sp, #12]
 80093a8:	3304      	adds	r3, #4
 80093aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80093ae:	f1b9 0f00 	cmp.w	r9, #0
 80093b2:	d020      	beq.n	80093f6 <__multiply+0x13e>
 80093b4:	46ae      	mov	lr, r5
 80093b6:	f04f 0a00 	mov.w	sl, #0
 80093ba:	6829      	ldr	r1, [r5, #0]
 80093bc:	f104 0c14 	add.w	ip, r4, #20
 80093c0:	f8bc b000 	ldrh.w	fp, [ip]
 80093c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80093c8:	b289      	uxth	r1, r1
 80093ca:	fb09 220b 	mla	r2, r9, fp, r2
 80093ce:	4492      	add	sl, r2
 80093d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80093d4:	f84e 1b04 	str.w	r1, [lr], #4
 80093d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80093dc:	f8be 1000 	ldrh.w	r1, [lr]
 80093e0:	0c12      	lsrs	r2, r2, #16
 80093e2:	fb09 1102 	mla	r1, r9, r2, r1
 80093e6:	4567      	cmp	r7, ip
 80093e8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80093ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80093f0:	d8e6      	bhi.n	80093c0 <__multiply+0x108>
 80093f2:	9a01      	ldr	r2, [sp, #4]
 80093f4:	50a9      	str	r1, [r5, r2]
 80093f6:	3504      	adds	r5, #4
 80093f8:	e79b      	b.n	8009332 <__multiply+0x7a>
 80093fa:	3e01      	subs	r6, #1
 80093fc:	e79d      	b.n	800933a <__multiply+0x82>
 80093fe:	bf00      	nop
 8009400:	0800acc8 	.word	0x0800acc8
 8009404:	0800ad54 	.word	0x0800ad54

08009408 <__pow5mult>:
 8009408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800940c:	4615      	mov	r5, r2
 800940e:	f012 0203 	ands.w	r2, r2, #3
 8009412:	4606      	mov	r6, r0
 8009414:	460f      	mov	r7, r1
 8009416:	d007      	beq.n	8009428 <__pow5mult+0x20>
 8009418:	4c25      	ldr	r4, [pc, #148]	; (80094b0 <__pow5mult+0xa8>)
 800941a:	3a01      	subs	r2, #1
 800941c:	2300      	movs	r3, #0
 800941e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009422:	f7ff fe55 	bl	80090d0 <__multadd>
 8009426:	4607      	mov	r7, r0
 8009428:	10ad      	asrs	r5, r5, #2
 800942a:	d03d      	beq.n	80094a8 <__pow5mult+0xa0>
 800942c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800942e:	b97c      	cbnz	r4, 8009450 <__pow5mult+0x48>
 8009430:	2010      	movs	r0, #16
 8009432:	f7ff fdb5 	bl	8008fa0 <malloc>
 8009436:	4602      	mov	r2, r0
 8009438:	6270      	str	r0, [r6, #36]	; 0x24
 800943a:	b928      	cbnz	r0, 8009448 <__pow5mult+0x40>
 800943c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009440:	4b1c      	ldr	r3, [pc, #112]	; (80094b4 <__pow5mult+0xac>)
 8009442:	481d      	ldr	r0, [pc, #116]	; (80094b8 <__pow5mult+0xb0>)
 8009444:	f000 fd1e 	bl	8009e84 <__assert_func>
 8009448:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800944c:	6004      	str	r4, [r0, #0]
 800944e:	60c4      	str	r4, [r0, #12]
 8009450:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009454:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009458:	b94c      	cbnz	r4, 800946e <__pow5mult+0x66>
 800945a:	f240 2171 	movw	r1, #625	; 0x271
 800945e:	4630      	mov	r0, r6
 8009460:	f7ff ff14 	bl	800928c <__i2b>
 8009464:	2300      	movs	r3, #0
 8009466:	4604      	mov	r4, r0
 8009468:	f8c8 0008 	str.w	r0, [r8, #8]
 800946c:	6003      	str	r3, [r0, #0]
 800946e:	f04f 0900 	mov.w	r9, #0
 8009472:	07eb      	lsls	r3, r5, #31
 8009474:	d50a      	bpl.n	800948c <__pow5mult+0x84>
 8009476:	4639      	mov	r1, r7
 8009478:	4622      	mov	r2, r4
 800947a:	4630      	mov	r0, r6
 800947c:	f7ff ff1c 	bl	80092b8 <__multiply>
 8009480:	4680      	mov	r8, r0
 8009482:	4639      	mov	r1, r7
 8009484:	4630      	mov	r0, r6
 8009486:	f7ff fe01 	bl	800908c <_Bfree>
 800948a:	4647      	mov	r7, r8
 800948c:	106d      	asrs	r5, r5, #1
 800948e:	d00b      	beq.n	80094a8 <__pow5mult+0xa0>
 8009490:	6820      	ldr	r0, [r4, #0]
 8009492:	b938      	cbnz	r0, 80094a4 <__pow5mult+0x9c>
 8009494:	4622      	mov	r2, r4
 8009496:	4621      	mov	r1, r4
 8009498:	4630      	mov	r0, r6
 800949a:	f7ff ff0d 	bl	80092b8 <__multiply>
 800949e:	6020      	str	r0, [r4, #0]
 80094a0:	f8c0 9000 	str.w	r9, [r0]
 80094a4:	4604      	mov	r4, r0
 80094a6:	e7e4      	b.n	8009472 <__pow5mult+0x6a>
 80094a8:	4638      	mov	r0, r7
 80094aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094ae:	bf00      	nop
 80094b0:	0800aea0 	.word	0x0800aea0
 80094b4:	0800ac56 	.word	0x0800ac56
 80094b8:	0800ad54 	.word	0x0800ad54

080094bc <__lshift>:
 80094bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094c0:	460c      	mov	r4, r1
 80094c2:	4607      	mov	r7, r0
 80094c4:	4691      	mov	r9, r2
 80094c6:	6923      	ldr	r3, [r4, #16]
 80094c8:	6849      	ldr	r1, [r1, #4]
 80094ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80094ce:	68a3      	ldr	r3, [r4, #8]
 80094d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80094d4:	f108 0601 	add.w	r6, r8, #1
 80094d8:	42b3      	cmp	r3, r6
 80094da:	db0b      	blt.n	80094f4 <__lshift+0x38>
 80094dc:	4638      	mov	r0, r7
 80094de:	f7ff fd95 	bl	800900c <_Balloc>
 80094e2:	4605      	mov	r5, r0
 80094e4:	b948      	cbnz	r0, 80094fa <__lshift+0x3e>
 80094e6:	4602      	mov	r2, r0
 80094e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80094ec:	4b29      	ldr	r3, [pc, #164]	; (8009594 <__lshift+0xd8>)
 80094ee:	482a      	ldr	r0, [pc, #168]	; (8009598 <__lshift+0xdc>)
 80094f0:	f000 fcc8 	bl	8009e84 <__assert_func>
 80094f4:	3101      	adds	r1, #1
 80094f6:	005b      	lsls	r3, r3, #1
 80094f8:	e7ee      	b.n	80094d8 <__lshift+0x1c>
 80094fa:	2300      	movs	r3, #0
 80094fc:	f100 0114 	add.w	r1, r0, #20
 8009500:	f100 0210 	add.w	r2, r0, #16
 8009504:	4618      	mov	r0, r3
 8009506:	4553      	cmp	r3, sl
 8009508:	db37      	blt.n	800957a <__lshift+0xbe>
 800950a:	6920      	ldr	r0, [r4, #16]
 800950c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009510:	f104 0314 	add.w	r3, r4, #20
 8009514:	f019 091f 	ands.w	r9, r9, #31
 8009518:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800951c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009520:	d02f      	beq.n	8009582 <__lshift+0xc6>
 8009522:	468a      	mov	sl, r1
 8009524:	f04f 0c00 	mov.w	ip, #0
 8009528:	f1c9 0e20 	rsb	lr, r9, #32
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	fa02 f209 	lsl.w	r2, r2, r9
 8009532:	ea42 020c 	orr.w	r2, r2, ip
 8009536:	f84a 2b04 	str.w	r2, [sl], #4
 800953a:	f853 2b04 	ldr.w	r2, [r3], #4
 800953e:	4298      	cmp	r0, r3
 8009540:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009544:	d8f2      	bhi.n	800952c <__lshift+0x70>
 8009546:	1b03      	subs	r3, r0, r4
 8009548:	3b15      	subs	r3, #21
 800954a:	f023 0303 	bic.w	r3, r3, #3
 800954e:	3304      	adds	r3, #4
 8009550:	f104 0215 	add.w	r2, r4, #21
 8009554:	4290      	cmp	r0, r2
 8009556:	bf38      	it	cc
 8009558:	2304      	movcc	r3, #4
 800955a:	f841 c003 	str.w	ip, [r1, r3]
 800955e:	f1bc 0f00 	cmp.w	ip, #0
 8009562:	d001      	beq.n	8009568 <__lshift+0xac>
 8009564:	f108 0602 	add.w	r6, r8, #2
 8009568:	3e01      	subs	r6, #1
 800956a:	4638      	mov	r0, r7
 800956c:	4621      	mov	r1, r4
 800956e:	612e      	str	r6, [r5, #16]
 8009570:	f7ff fd8c 	bl	800908c <_Bfree>
 8009574:	4628      	mov	r0, r5
 8009576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800957a:	f842 0f04 	str.w	r0, [r2, #4]!
 800957e:	3301      	adds	r3, #1
 8009580:	e7c1      	b.n	8009506 <__lshift+0x4a>
 8009582:	3904      	subs	r1, #4
 8009584:	f853 2b04 	ldr.w	r2, [r3], #4
 8009588:	4298      	cmp	r0, r3
 800958a:	f841 2f04 	str.w	r2, [r1, #4]!
 800958e:	d8f9      	bhi.n	8009584 <__lshift+0xc8>
 8009590:	e7ea      	b.n	8009568 <__lshift+0xac>
 8009592:	bf00      	nop
 8009594:	0800acc8 	.word	0x0800acc8
 8009598:	0800ad54 	.word	0x0800ad54

0800959c <__mcmp>:
 800959c:	4603      	mov	r3, r0
 800959e:	690a      	ldr	r2, [r1, #16]
 80095a0:	6900      	ldr	r0, [r0, #16]
 80095a2:	b530      	push	{r4, r5, lr}
 80095a4:	1a80      	subs	r0, r0, r2
 80095a6:	d10d      	bne.n	80095c4 <__mcmp+0x28>
 80095a8:	3314      	adds	r3, #20
 80095aa:	3114      	adds	r1, #20
 80095ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80095b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80095b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80095b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80095bc:	4295      	cmp	r5, r2
 80095be:	d002      	beq.n	80095c6 <__mcmp+0x2a>
 80095c0:	d304      	bcc.n	80095cc <__mcmp+0x30>
 80095c2:	2001      	movs	r0, #1
 80095c4:	bd30      	pop	{r4, r5, pc}
 80095c6:	42a3      	cmp	r3, r4
 80095c8:	d3f4      	bcc.n	80095b4 <__mcmp+0x18>
 80095ca:	e7fb      	b.n	80095c4 <__mcmp+0x28>
 80095cc:	f04f 30ff 	mov.w	r0, #4294967295
 80095d0:	e7f8      	b.n	80095c4 <__mcmp+0x28>
	...

080095d4 <__mdiff>:
 80095d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d8:	460d      	mov	r5, r1
 80095da:	4607      	mov	r7, r0
 80095dc:	4611      	mov	r1, r2
 80095de:	4628      	mov	r0, r5
 80095e0:	4614      	mov	r4, r2
 80095e2:	f7ff ffdb 	bl	800959c <__mcmp>
 80095e6:	1e06      	subs	r6, r0, #0
 80095e8:	d111      	bne.n	800960e <__mdiff+0x3a>
 80095ea:	4631      	mov	r1, r6
 80095ec:	4638      	mov	r0, r7
 80095ee:	f7ff fd0d 	bl	800900c <_Balloc>
 80095f2:	4602      	mov	r2, r0
 80095f4:	b928      	cbnz	r0, 8009602 <__mdiff+0x2e>
 80095f6:	f240 2132 	movw	r1, #562	; 0x232
 80095fa:	4b3a      	ldr	r3, [pc, #232]	; (80096e4 <__mdiff+0x110>)
 80095fc:	483a      	ldr	r0, [pc, #232]	; (80096e8 <__mdiff+0x114>)
 80095fe:	f000 fc41 	bl	8009e84 <__assert_func>
 8009602:	2301      	movs	r3, #1
 8009604:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009608:	4610      	mov	r0, r2
 800960a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800960e:	bfa4      	itt	ge
 8009610:	4623      	movge	r3, r4
 8009612:	462c      	movge	r4, r5
 8009614:	4638      	mov	r0, r7
 8009616:	6861      	ldr	r1, [r4, #4]
 8009618:	bfa6      	itte	ge
 800961a:	461d      	movge	r5, r3
 800961c:	2600      	movge	r6, #0
 800961e:	2601      	movlt	r6, #1
 8009620:	f7ff fcf4 	bl	800900c <_Balloc>
 8009624:	4602      	mov	r2, r0
 8009626:	b918      	cbnz	r0, 8009630 <__mdiff+0x5c>
 8009628:	f44f 7110 	mov.w	r1, #576	; 0x240
 800962c:	4b2d      	ldr	r3, [pc, #180]	; (80096e4 <__mdiff+0x110>)
 800962e:	e7e5      	b.n	80095fc <__mdiff+0x28>
 8009630:	f102 0814 	add.w	r8, r2, #20
 8009634:	46c2      	mov	sl, r8
 8009636:	f04f 0c00 	mov.w	ip, #0
 800963a:	6927      	ldr	r7, [r4, #16]
 800963c:	60c6      	str	r6, [r0, #12]
 800963e:	692e      	ldr	r6, [r5, #16]
 8009640:	f104 0014 	add.w	r0, r4, #20
 8009644:	f105 0914 	add.w	r9, r5, #20
 8009648:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800964c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009650:	3410      	adds	r4, #16
 8009652:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009656:	f859 3b04 	ldr.w	r3, [r9], #4
 800965a:	fa1f f18b 	uxth.w	r1, fp
 800965e:	448c      	add	ip, r1
 8009660:	b299      	uxth	r1, r3
 8009662:	0c1b      	lsrs	r3, r3, #16
 8009664:	ebac 0101 	sub.w	r1, ip, r1
 8009668:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800966c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009670:	b289      	uxth	r1, r1
 8009672:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009676:	454e      	cmp	r6, r9
 8009678:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800967c:	f84a 3b04 	str.w	r3, [sl], #4
 8009680:	d8e7      	bhi.n	8009652 <__mdiff+0x7e>
 8009682:	1b73      	subs	r3, r6, r5
 8009684:	3b15      	subs	r3, #21
 8009686:	f023 0303 	bic.w	r3, r3, #3
 800968a:	3515      	adds	r5, #21
 800968c:	3304      	adds	r3, #4
 800968e:	42ae      	cmp	r6, r5
 8009690:	bf38      	it	cc
 8009692:	2304      	movcc	r3, #4
 8009694:	4418      	add	r0, r3
 8009696:	4443      	add	r3, r8
 8009698:	461e      	mov	r6, r3
 800969a:	4605      	mov	r5, r0
 800969c:	4575      	cmp	r5, lr
 800969e:	d30e      	bcc.n	80096be <__mdiff+0xea>
 80096a0:	f10e 0103 	add.w	r1, lr, #3
 80096a4:	1a09      	subs	r1, r1, r0
 80096a6:	f021 0103 	bic.w	r1, r1, #3
 80096aa:	3803      	subs	r0, #3
 80096ac:	4586      	cmp	lr, r0
 80096ae:	bf38      	it	cc
 80096b0:	2100      	movcc	r1, #0
 80096b2:	4419      	add	r1, r3
 80096b4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80096b8:	b18b      	cbz	r3, 80096de <__mdiff+0x10a>
 80096ba:	6117      	str	r7, [r2, #16]
 80096bc:	e7a4      	b.n	8009608 <__mdiff+0x34>
 80096be:	f855 8b04 	ldr.w	r8, [r5], #4
 80096c2:	fa1f f188 	uxth.w	r1, r8
 80096c6:	4461      	add	r1, ip
 80096c8:	140c      	asrs	r4, r1, #16
 80096ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80096ce:	b289      	uxth	r1, r1
 80096d0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80096d4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80096d8:	f846 1b04 	str.w	r1, [r6], #4
 80096dc:	e7de      	b.n	800969c <__mdiff+0xc8>
 80096de:	3f01      	subs	r7, #1
 80096e0:	e7e8      	b.n	80096b4 <__mdiff+0xe0>
 80096e2:	bf00      	nop
 80096e4:	0800acc8 	.word	0x0800acc8
 80096e8:	0800ad54 	.word	0x0800ad54

080096ec <__ulp>:
 80096ec:	4b11      	ldr	r3, [pc, #68]	; (8009734 <__ulp+0x48>)
 80096ee:	400b      	ands	r3, r1
 80096f0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	dd02      	ble.n	80096fe <__ulp+0x12>
 80096f8:	2000      	movs	r0, #0
 80096fa:	4619      	mov	r1, r3
 80096fc:	4770      	bx	lr
 80096fe:	425b      	negs	r3, r3
 8009700:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009704:	f04f 0000 	mov.w	r0, #0
 8009708:	f04f 0100 	mov.w	r1, #0
 800970c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009710:	da04      	bge.n	800971c <__ulp+0x30>
 8009712:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009716:	fa43 f102 	asr.w	r1, r3, r2
 800971a:	4770      	bx	lr
 800971c:	f1a2 0314 	sub.w	r3, r2, #20
 8009720:	2b1e      	cmp	r3, #30
 8009722:	bfd6      	itet	le
 8009724:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009728:	2301      	movgt	r3, #1
 800972a:	fa22 f303 	lsrle.w	r3, r2, r3
 800972e:	4618      	mov	r0, r3
 8009730:	4770      	bx	lr
 8009732:	bf00      	nop
 8009734:	7ff00000 	.word	0x7ff00000

08009738 <__b2d>:
 8009738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800973c:	6907      	ldr	r7, [r0, #16]
 800973e:	f100 0914 	add.w	r9, r0, #20
 8009742:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009746:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800974a:	f1a7 0804 	sub.w	r8, r7, #4
 800974e:	4630      	mov	r0, r6
 8009750:	f7ff fd4e 	bl	80091f0 <__hi0bits>
 8009754:	f1c0 0320 	rsb	r3, r0, #32
 8009758:	280a      	cmp	r0, #10
 800975a:	600b      	str	r3, [r1, #0]
 800975c:	491f      	ldr	r1, [pc, #124]	; (80097dc <__b2d+0xa4>)
 800975e:	dc17      	bgt.n	8009790 <__b2d+0x58>
 8009760:	45c1      	cmp	r9, r8
 8009762:	bf28      	it	cs
 8009764:	2200      	movcs	r2, #0
 8009766:	f1c0 0c0b 	rsb	ip, r0, #11
 800976a:	fa26 f30c 	lsr.w	r3, r6, ip
 800976e:	bf38      	it	cc
 8009770:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009774:	ea43 0501 	orr.w	r5, r3, r1
 8009778:	f100 0315 	add.w	r3, r0, #21
 800977c:	fa06 f303 	lsl.w	r3, r6, r3
 8009780:	fa22 f20c 	lsr.w	r2, r2, ip
 8009784:	ea43 0402 	orr.w	r4, r3, r2
 8009788:	4620      	mov	r0, r4
 800978a:	4629      	mov	r1, r5
 800978c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009790:	45c1      	cmp	r9, r8
 8009792:	bf2e      	itee	cs
 8009794:	2200      	movcs	r2, #0
 8009796:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800979a:	f1a7 0808 	subcc.w	r8, r7, #8
 800979e:	f1b0 030b 	subs.w	r3, r0, #11
 80097a2:	d016      	beq.n	80097d2 <__b2d+0x9a>
 80097a4:	f1c3 0720 	rsb	r7, r3, #32
 80097a8:	fa22 f107 	lsr.w	r1, r2, r7
 80097ac:	45c8      	cmp	r8, r9
 80097ae:	fa06 f603 	lsl.w	r6, r6, r3
 80097b2:	ea46 0601 	orr.w	r6, r6, r1
 80097b6:	bf94      	ite	ls
 80097b8:	2100      	movls	r1, #0
 80097ba:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80097be:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80097c2:	fa02 f003 	lsl.w	r0, r2, r3
 80097c6:	40f9      	lsrs	r1, r7
 80097c8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80097cc:	ea40 0401 	orr.w	r4, r0, r1
 80097d0:	e7da      	b.n	8009788 <__b2d+0x50>
 80097d2:	4614      	mov	r4, r2
 80097d4:	ea46 0501 	orr.w	r5, r6, r1
 80097d8:	e7d6      	b.n	8009788 <__b2d+0x50>
 80097da:	bf00      	nop
 80097dc:	3ff00000 	.word	0x3ff00000

080097e0 <__d2b>:
 80097e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80097e4:	2101      	movs	r1, #1
 80097e6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80097ea:	4690      	mov	r8, r2
 80097ec:	461d      	mov	r5, r3
 80097ee:	f7ff fc0d 	bl	800900c <_Balloc>
 80097f2:	4604      	mov	r4, r0
 80097f4:	b930      	cbnz	r0, 8009804 <__d2b+0x24>
 80097f6:	4602      	mov	r2, r0
 80097f8:	f240 310a 	movw	r1, #778	; 0x30a
 80097fc:	4b24      	ldr	r3, [pc, #144]	; (8009890 <__d2b+0xb0>)
 80097fe:	4825      	ldr	r0, [pc, #148]	; (8009894 <__d2b+0xb4>)
 8009800:	f000 fb40 	bl	8009e84 <__assert_func>
 8009804:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009808:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800980c:	bb2d      	cbnz	r5, 800985a <__d2b+0x7a>
 800980e:	9301      	str	r3, [sp, #4]
 8009810:	f1b8 0300 	subs.w	r3, r8, #0
 8009814:	d026      	beq.n	8009864 <__d2b+0x84>
 8009816:	4668      	mov	r0, sp
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	f7ff fd09 	bl	8009230 <__lo0bits>
 800981e:	9900      	ldr	r1, [sp, #0]
 8009820:	b1f0      	cbz	r0, 8009860 <__d2b+0x80>
 8009822:	9a01      	ldr	r2, [sp, #4]
 8009824:	f1c0 0320 	rsb	r3, r0, #32
 8009828:	fa02 f303 	lsl.w	r3, r2, r3
 800982c:	430b      	orrs	r3, r1
 800982e:	40c2      	lsrs	r2, r0
 8009830:	6163      	str	r3, [r4, #20]
 8009832:	9201      	str	r2, [sp, #4]
 8009834:	9b01      	ldr	r3, [sp, #4]
 8009836:	2b00      	cmp	r3, #0
 8009838:	bf14      	ite	ne
 800983a:	2102      	movne	r1, #2
 800983c:	2101      	moveq	r1, #1
 800983e:	61a3      	str	r3, [r4, #24]
 8009840:	6121      	str	r1, [r4, #16]
 8009842:	b1c5      	cbz	r5, 8009876 <__d2b+0x96>
 8009844:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009848:	4405      	add	r5, r0
 800984a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800984e:	603d      	str	r5, [r7, #0]
 8009850:	6030      	str	r0, [r6, #0]
 8009852:	4620      	mov	r0, r4
 8009854:	b002      	add	sp, #8
 8009856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800985a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800985e:	e7d6      	b.n	800980e <__d2b+0x2e>
 8009860:	6161      	str	r1, [r4, #20]
 8009862:	e7e7      	b.n	8009834 <__d2b+0x54>
 8009864:	a801      	add	r0, sp, #4
 8009866:	f7ff fce3 	bl	8009230 <__lo0bits>
 800986a:	2101      	movs	r1, #1
 800986c:	9b01      	ldr	r3, [sp, #4]
 800986e:	6121      	str	r1, [r4, #16]
 8009870:	6163      	str	r3, [r4, #20]
 8009872:	3020      	adds	r0, #32
 8009874:	e7e5      	b.n	8009842 <__d2b+0x62>
 8009876:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800987a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800987e:	6038      	str	r0, [r7, #0]
 8009880:	6918      	ldr	r0, [r3, #16]
 8009882:	f7ff fcb5 	bl	80091f0 <__hi0bits>
 8009886:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800988a:	6031      	str	r1, [r6, #0]
 800988c:	e7e1      	b.n	8009852 <__d2b+0x72>
 800988e:	bf00      	nop
 8009890:	0800acc8 	.word	0x0800acc8
 8009894:	0800ad54 	.word	0x0800ad54

08009898 <__ratio>:
 8009898:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800989c:	4688      	mov	r8, r1
 800989e:	4669      	mov	r1, sp
 80098a0:	4681      	mov	r9, r0
 80098a2:	f7ff ff49 	bl	8009738 <__b2d>
 80098a6:	460f      	mov	r7, r1
 80098a8:	4604      	mov	r4, r0
 80098aa:	460d      	mov	r5, r1
 80098ac:	4640      	mov	r0, r8
 80098ae:	a901      	add	r1, sp, #4
 80098b0:	f7ff ff42 	bl	8009738 <__b2d>
 80098b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80098b8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80098bc:	468b      	mov	fp, r1
 80098be:	eba3 0c02 	sub.w	ip, r3, r2
 80098c2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80098c6:	1a9b      	subs	r3, r3, r2
 80098c8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	bfd5      	itete	le
 80098d0:	460a      	movle	r2, r1
 80098d2:	462a      	movgt	r2, r5
 80098d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80098d8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80098dc:	bfd8      	it	le
 80098de:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80098e2:	465b      	mov	r3, fp
 80098e4:	4602      	mov	r2, r0
 80098e6:	4639      	mov	r1, r7
 80098e8:	4620      	mov	r0, r4
 80098ea:	f7f6 ff1f 	bl	800072c <__aeabi_ddiv>
 80098ee:	b003      	add	sp, #12
 80098f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080098f4 <__copybits>:
 80098f4:	3901      	subs	r1, #1
 80098f6:	b570      	push	{r4, r5, r6, lr}
 80098f8:	1149      	asrs	r1, r1, #5
 80098fa:	6914      	ldr	r4, [r2, #16]
 80098fc:	3101      	adds	r1, #1
 80098fe:	f102 0314 	add.w	r3, r2, #20
 8009902:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009906:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800990a:	1f05      	subs	r5, r0, #4
 800990c:	42a3      	cmp	r3, r4
 800990e:	d30c      	bcc.n	800992a <__copybits+0x36>
 8009910:	1aa3      	subs	r3, r4, r2
 8009912:	3b11      	subs	r3, #17
 8009914:	f023 0303 	bic.w	r3, r3, #3
 8009918:	3211      	adds	r2, #17
 800991a:	42a2      	cmp	r2, r4
 800991c:	bf88      	it	hi
 800991e:	2300      	movhi	r3, #0
 8009920:	4418      	add	r0, r3
 8009922:	2300      	movs	r3, #0
 8009924:	4288      	cmp	r0, r1
 8009926:	d305      	bcc.n	8009934 <__copybits+0x40>
 8009928:	bd70      	pop	{r4, r5, r6, pc}
 800992a:	f853 6b04 	ldr.w	r6, [r3], #4
 800992e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009932:	e7eb      	b.n	800990c <__copybits+0x18>
 8009934:	f840 3b04 	str.w	r3, [r0], #4
 8009938:	e7f4      	b.n	8009924 <__copybits+0x30>

0800993a <__any_on>:
 800993a:	f100 0214 	add.w	r2, r0, #20
 800993e:	6900      	ldr	r0, [r0, #16]
 8009940:	114b      	asrs	r3, r1, #5
 8009942:	4298      	cmp	r0, r3
 8009944:	b510      	push	{r4, lr}
 8009946:	db11      	blt.n	800996c <__any_on+0x32>
 8009948:	dd0a      	ble.n	8009960 <__any_on+0x26>
 800994a:	f011 011f 	ands.w	r1, r1, #31
 800994e:	d007      	beq.n	8009960 <__any_on+0x26>
 8009950:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009954:	fa24 f001 	lsr.w	r0, r4, r1
 8009958:	fa00 f101 	lsl.w	r1, r0, r1
 800995c:	428c      	cmp	r4, r1
 800995e:	d10b      	bne.n	8009978 <__any_on+0x3e>
 8009960:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009964:	4293      	cmp	r3, r2
 8009966:	d803      	bhi.n	8009970 <__any_on+0x36>
 8009968:	2000      	movs	r0, #0
 800996a:	bd10      	pop	{r4, pc}
 800996c:	4603      	mov	r3, r0
 800996e:	e7f7      	b.n	8009960 <__any_on+0x26>
 8009970:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009974:	2900      	cmp	r1, #0
 8009976:	d0f5      	beq.n	8009964 <__any_on+0x2a>
 8009978:	2001      	movs	r0, #1
 800997a:	e7f6      	b.n	800996a <__any_on+0x30>

0800997c <_calloc_r>:
 800997c:	b570      	push	{r4, r5, r6, lr}
 800997e:	fba1 5402 	umull	r5, r4, r1, r2
 8009982:	b934      	cbnz	r4, 8009992 <_calloc_r+0x16>
 8009984:	4629      	mov	r1, r5
 8009986:	f000 f875 	bl	8009a74 <_malloc_r>
 800998a:	4606      	mov	r6, r0
 800998c:	b928      	cbnz	r0, 800999a <_calloc_r+0x1e>
 800998e:	4630      	mov	r0, r6
 8009990:	bd70      	pop	{r4, r5, r6, pc}
 8009992:	220c      	movs	r2, #12
 8009994:	2600      	movs	r6, #0
 8009996:	6002      	str	r2, [r0, #0]
 8009998:	e7f9      	b.n	800998e <_calloc_r+0x12>
 800999a:	462a      	mov	r2, r5
 800999c:	4621      	mov	r1, r4
 800999e:	f7fc fdbd 	bl	800651c <memset>
 80099a2:	e7f4      	b.n	800998e <_calloc_r+0x12>

080099a4 <_free_r>:
 80099a4:	b538      	push	{r3, r4, r5, lr}
 80099a6:	4605      	mov	r5, r0
 80099a8:	2900      	cmp	r1, #0
 80099aa:	d040      	beq.n	8009a2e <_free_r+0x8a>
 80099ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099b0:	1f0c      	subs	r4, r1, #4
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	bfb8      	it	lt
 80099b6:	18e4      	addlt	r4, r4, r3
 80099b8:	f000 faae 	bl	8009f18 <__malloc_lock>
 80099bc:	4a1c      	ldr	r2, [pc, #112]	; (8009a30 <_free_r+0x8c>)
 80099be:	6813      	ldr	r3, [r2, #0]
 80099c0:	b933      	cbnz	r3, 80099d0 <_free_r+0x2c>
 80099c2:	6063      	str	r3, [r4, #4]
 80099c4:	6014      	str	r4, [r2, #0]
 80099c6:	4628      	mov	r0, r5
 80099c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099cc:	f000 baaa 	b.w	8009f24 <__malloc_unlock>
 80099d0:	42a3      	cmp	r3, r4
 80099d2:	d908      	bls.n	80099e6 <_free_r+0x42>
 80099d4:	6820      	ldr	r0, [r4, #0]
 80099d6:	1821      	adds	r1, r4, r0
 80099d8:	428b      	cmp	r3, r1
 80099da:	bf01      	itttt	eq
 80099dc:	6819      	ldreq	r1, [r3, #0]
 80099de:	685b      	ldreq	r3, [r3, #4]
 80099e0:	1809      	addeq	r1, r1, r0
 80099e2:	6021      	streq	r1, [r4, #0]
 80099e4:	e7ed      	b.n	80099c2 <_free_r+0x1e>
 80099e6:	461a      	mov	r2, r3
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	b10b      	cbz	r3, 80099f0 <_free_r+0x4c>
 80099ec:	42a3      	cmp	r3, r4
 80099ee:	d9fa      	bls.n	80099e6 <_free_r+0x42>
 80099f0:	6811      	ldr	r1, [r2, #0]
 80099f2:	1850      	adds	r0, r2, r1
 80099f4:	42a0      	cmp	r0, r4
 80099f6:	d10b      	bne.n	8009a10 <_free_r+0x6c>
 80099f8:	6820      	ldr	r0, [r4, #0]
 80099fa:	4401      	add	r1, r0
 80099fc:	1850      	adds	r0, r2, r1
 80099fe:	4283      	cmp	r3, r0
 8009a00:	6011      	str	r1, [r2, #0]
 8009a02:	d1e0      	bne.n	80099c6 <_free_r+0x22>
 8009a04:	6818      	ldr	r0, [r3, #0]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	4401      	add	r1, r0
 8009a0a:	6011      	str	r1, [r2, #0]
 8009a0c:	6053      	str	r3, [r2, #4]
 8009a0e:	e7da      	b.n	80099c6 <_free_r+0x22>
 8009a10:	d902      	bls.n	8009a18 <_free_r+0x74>
 8009a12:	230c      	movs	r3, #12
 8009a14:	602b      	str	r3, [r5, #0]
 8009a16:	e7d6      	b.n	80099c6 <_free_r+0x22>
 8009a18:	6820      	ldr	r0, [r4, #0]
 8009a1a:	1821      	adds	r1, r4, r0
 8009a1c:	428b      	cmp	r3, r1
 8009a1e:	bf01      	itttt	eq
 8009a20:	6819      	ldreq	r1, [r3, #0]
 8009a22:	685b      	ldreq	r3, [r3, #4]
 8009a24:	1809      	addeq	r1, r1, r0
 8009a26:	6021      	streq	r1, [r4, #0]
 8009a28:	6063      	str	r3, [r4, #4]
 8009a2a:	6054      	str	r4, [r2, #4]
 8009a2c:	e7cb      	b.n	80099c6 <_free_r+0x22>
 8009a2e:	bd38      	pop	{r3, r4, r5, pc}
 8009a30:	2000044c 	.word	0x2000044c

08009a34 <sbrk_aligned>:
 8009a34:	b570      	push	{r4, r5, r6, lr}
 8009a36:	4e0e      	ldr	r6, [pc, #56]	; (8009a70 <sbrk_aligned+0x3c>)
 8009a38:	460c      	mov	r4, r1
 8009a3a:	6831      	ldr	r1, [r6, #0]
 8009a3c:	4605      	mov	r5, r0
 8009a3e:	b911      	cbnz	r1, 8009a46 <sbrk_aligned+0x12>
 8009a40:	f000 f9ee 	bl	8009e20 <_sbrk_r>
 8009a44:	6030      	str	r0, [r6, #0]
 8009a46:	4621      	mov	r1, r4
 8009a48:	4628      	mov	r0, r5
 8009a4a:	f000 f9e9 	bl	8009e20 <_sbrk_r>
 8009a4e:	1c43      	adds	r3, r0, #1
 8009a50:	d00a      	beq.n	8009a68 <sbrk_aligned+0x34>
 8009a52:	1cc4      	adds	r4, r0, #3
 8009a54:	f024 0403 	bic.w	r4, r4, #3
 8009a58:	42a0      	cmp	r0, r4
 8009a5a:	d007      	beq.n	8009a6c <sbrk_aligned+0x38>
 8009a5c:	1a21      	subs	r1, r4, r0
 8009a5e:	4628      	mov	r0, r5
 8009a60:	f000 f9de 	bl	8009e20 <_sbrk_r>
 8009a64:	3001      	adds	r0, #1
 8009a66:	d101      	bne.n	8009a6c <sbrk_aligned+0x38>
 8009a68:	f04f 34ff 	mov.w	r4, #4294967295
 8009a6c:	4620      	mov	r0, r4
 8009a6e:	bd70      	pop	{r4, r5, r6, pc}
 8009a70:	20000450 	.word	0x20000450

08009a74 <_malloc_r>:
 8009a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a78:	1ccd      	adds	r5, r1, #3
 8009a7a:	f025 0503 	bic.w	r5, r5, #3
 8009a7e:	3508      	adds	r5, #8
 8009a80:	2d0c      	cmp	r5, #12
 8009a82:	bf38      	it	cc
 8009a84:	250c      	movcc	r5, #12
 8009a86:	2d00      	cmp	r5, #0
 8009a88:	4607      	mov	r7, r0
 8009a8a:	db01      	blt.n	8009a90 <_malloc_r+0x1c>
 8009a8c:	42a9      	cmp	r1, r5
 8009a8e:	d905      	bls.n	8009a9c <_malloc_r+0x28>
 8009a90:	230c      	movs	r3, #12
 8009a92:	2600      	movs	r6, #0
 8009a94:	603b      	str	r3, [r7, #0]
 8009a96:	4630      	mov	r0, r6
 8009a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a9c:	4e2e      	ldr	r6, [pc, #184]	; (8009b58 <_malloc_r+0xe4>)
 8009a9e:	f000 fa3b 	bl	8009f18 <__malloc_lock>
 8009aa2:	6833      	ldr	r3, [r6, #0]
 8009aa4:	461c      	mov	r4, r3
 8009aa6:	bb34      	cbnz	r4, 8009af6 <_malloc_r+0x82>
 8009aa8:	4629      	mov	r1, r5
 8009aaa:	4638      	mov	r0, r7
 8009aac:	f7ff ffc2 	bl	8009a34 <sbrk_aligned>
 8009ab0:	1c43      	adds	r3, r0, #1
 8009ab2:	4604      	mov	r4, r0
 8009ab4:	d14d      	bne.n	8009b52 <_malloc_r+0xde>
 8009ab6:	6834      	ldr	r4, [r6, #0]
 8009ab8:	4626      	mov	r6, r4
 8009aba:	2e00      	cmp	r6, #0
 8009abc:	d140      	bne.n	8009b40 <_malloc_r+0xcc>
 8009abe:	6823      	ldr	r3, [r4, #0]
 8009ac0:	4631      	mov	r1, r6
 8009ac2:	4638      	mov	r0, r7
 8009ac4:	eb04 0803 	add.w	r8, r4, r3
 8009ac8:	f000 f9aa 	bl	8009e20 <_sbrk_r>
 8009acc:	4580      	cmp	r8, r0
 8009ace:	d13a      	bne.n	8009b46 <_malloc_r+0xd2>
 8009ad0:	6821      	ldr	r1, [r4, #0]
 8009ad2:	3503      	adds	r5, #3
 8009ad4:	1a6d      	subs	r5, r5, r1
 8009ad6:	f025 0503 	bic.w	r5, r5, #3
 8009ada:	3508      	adds	r5, #8
 8009adc:	2d0c      	cmp	r5, #12
 8009ade:	bf38      	it	cc
 8009ae0:	250c      	movcc	r5, #12
 8009ae2:	4638      	mov	r0, r7
 8009ae4:	4629      	mov	r1, r5
 8009ae6:	f7ff ffa5 	bl	8009a34 <sbrk_aligned>
 8009aea:	3001      	adds	r0, #1
 8009aec:	d02b      	beq.n	8009b46 <_malloc_r+0xd2>
 8009aee:	6823      	ldr	r3, [r4, #0]
 8009af0:	442b      	add	r3, r5
 8009af2:	6023      	str	r3, [r4, #0]
 8009af4:	e00e      	b.n	8009b14 <_malloc_r+0xa0>
 8009af6:	6822      	ldr	r2, [r4, #0]
 8009af8:	1b52      	subs	r2, r2, r5
 8009afa:	d41e      	bmi.n	8009b3a <_malloc_r+0xc6>
 8009afc:	2a0b      	cmp	r2, #11
 8009afe:	d916      	bls.n	8009b2e <_malloc_r+0xba>
 8009b00:	1961      	adds	r1, r4, r5
 8009b02:	42a3      	cmp	r3, r4
 8009b04:	6025      	str	r5, [r4, #0]
 8009b06:	bf18      	it	ne
 8009b08:	6059      	strne	r1, [r3, #4]
 8009b0a:	6863      	ldr	r3, [r4, #4]
 8009b0c:	bf08      	it	eq
 8009b0e:	6031      	streq	r1, [r6, #0]
 8009b10:	5162      	str	r2, [r4, r5]
 8009b12:	604b      	str	r3, [r1, #4]
 8009b14:	4638      	mov	r0, r7
 8009b16:	f104 060b 	add.w	r6, r4, #11
 8009b1a:	f000 fa03 	bl	8009f24 <__malloc_unlock>
 8009b1e:	f026 0607 	bic.w	r6, r6, #7
 8009b22:	1d23      	adds	r3, r4, #4
 8009b24:	1af2      	subs	r2, r6, r3
 8009b26:	d0b6      	beq.n	8009a96 <_malloc_r+0x22>
 8009b28:	1b9b      	subs	r3, r3, r6
 8009b2a:	50a3      	str	r3, [r4, r2]
 8009b2c:	e7b3      	b.n	8009a96 <_malloc_r+0x22>
 8009b2e:	6862      	ldr	r2, [r4, #4]
 8009b30:	42a3      	cmp	r3, r4
 8009b32:	bf0c      	ite	eq
 8009b34:	6032      	streq	r2, [r6, #0]
 8009b36:	605a      	strne	r2, [r3, #4]
 8009b38:	e7ec      	b.n	8009b14 <_malloc_r+0xa0>
 8009b3a:	4623      	mov	r3, r4
 8009b3c:	6864      	ldr	r4, [r4, #4]
 8009b3e:	e7b2      	b.n	8009aa6 <_malloc_r+0x32>
 8009b40:	4634      	mov	r4, r6
 8009b42:	6876      	ldr	r6, [r6, #4]
 8009b44:	e7b9      	b.n	8009aba <_malloc_r+0x46>
 8009b46:	230c      	movs	r3, #12
 8009b48:	4638      	mov	r0, r7
 8009b4a:	603b      	str	r3, [r7, #0]
 8009b4c:	f000 f9ea 	bl	8009f24 <__malloc_unlock>
 8009b50:	e7a1      	b.n	8009a96 <_malloc_r+0x22>
 8009b52:	6025      	str	r5, [r4, #0]
 8009b54:	e7de      	b.n	8009b14 <_malloc_r+0xa0>
 8009b56:	bf00      	nop
 8009b58:	2000044c 	.word	0x2000044c

08009b5c <__ssputs_r>:
 8009b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b60:	688e      	ldr	r6, [r1, #8]
 8009b62:	4682      	mov	sl, r0
 8009b64:	429e      	cmp	r6, r3
 8009b66:	460c      	mov	r4, r1
 8009b68:	4690      	mov	r8, r2
 8009b6a:	461f      	mov	r7, r3
 8009b6c:	d838      	bhi.n	8009be0 <__ssputs_r+0x84>
 8009b6e:	898a      	ldrh	r2, [r1, #12]
 8009b70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b74:	d032      	beq.n	8009bdc <__ssputs_r+0x80>
 8009b76:	6825      	ldr	r5, [r4, #0]
 8009b78:	6909      	ldr	r1, [r1, #16]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	eba5 0901 	sub.w	r9, r5, r1
 8009b80:	6965      	ldr	r5, [r4, #20]
 8009b82:	444b      	add	r3, r9
 8009b84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b8c:	106d      	asrs	r5, r5, #1
 8009b8e:	429d      	cmp	r5, r3
 8009b90:	bf38      	it	cc
 8009b92:	461d      	movcc	r5, r3
 8009b94:	0553      	lsls	r3, r2, #21
 8009b96:	d531      	bpl.n	8009bfc <__ssputs_r+0xa0>
 8009b98:	4629      	mov	r1, r5
 8009b9a:	f7ff ff6b 	bl	8009a74 <_malloc_r>
 8009b9e:	4606      	mov	r6, r0
 8009ba0:	b950      	cbnz	r0, 8009bb8 <__ssputs_r+0x5c>
 8009ba2:	230c      	movs	r3, #12
 8009ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba8:	f8ca 3000 	str.w	r3, [sl]
 8009bac:	89a3      	ldrh	r3, [r4, #12]
 8009bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bb2:	81a3      	strh	r3, [r4, #12]
 8009bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bb8:	464a      	mov	r2, r9
 8009bba:	6921      	ldr	r1, [r4, #16]
 8009bbc:	f7ff fa18 	bl	8008ff0 <memcpy>
 8009bc0:	89a3      	ldrh	r3, [r4, #12]
 8009bc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bca:	81a3      	strh	r3, [r4, #12]
 8009bcc:	6126      	str	r6, [r4, #16]
 8009bce:	444e      	add	r6, r9
 8009bd0:	6026      	str	r6, [r4, #0]
 8009bd2:	463e      	mov	r6, r7
 8009bd4:	6165      	str	r5, [r4, #20]
 8009bd6:	eba5 0509 	sub.w	r5, r5, r9
 8009bda:	60a5      	str	r5, [r4, #8]
 8009bdc:	42be      	cmp	r6, r7
 8009bde:	d900      	bls.n	8009be2 <__ssputs_r+0x86>
 8009be0:	463e      	mov	r6, r7
 8009be2:	4632      	mov	r2, r6
 8009be4:	4641      	mov	r1, r8
 8009be6:	6820      	ldr	r0, [r4, #0]
 8009be8:	f000 f97c 	bl	8009ee4 <memmove>
 8009bec:	68a3      	ldr	r3, [r4, #8]
 8009bee:	2000      	movs	r0, #0
 8009bf0:	1b9b      	subs	r3, r3, r6
 8009bf2:	60a3      	str	r3, [r4, #8]
 8009bf4:	6823      	ldr	r3, [r4, #0]
 8009bf6:	4433      	add	r3, r6
 8009bf8:	6023      	str	r3, [r4, #0]
 8009bfa:	e7db      	b.n	8009bb4 <__ssputs_r+0x58>
 8009bfc:	462a      	mov	r2, r5
 8009bfe:	f000 f997 	bl	8009f30 <_realloc_r>
 8009c02:	4606      	mov	r6, r0
 8009c04:	2800      	cmp	r0, #0
 8009c06:	d1e1      	bne.n	8009bcc <__ssputs_r+0x70>
 8009c08:	4650      	mov	r0, sl
 8009c0a:	6921      	ldr	r1, [r4, #16]
 8009c0c:	f7ff feca 	bl	80099a4 <_free_r>
 8009c10:	e7c7      	b.n	8009ba2 <__ssputs_r+0x46>
	...

08009c14 <_svfiprintf_r>:
 8009c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c18:	4698      	mov	r8, r3
 8009c1a:	898b      	ldrh	r3, [r1, #12]
 8009c1c:	4607      	mov	r7, r0
 8009c1e:	061b      	lsls	r3, r3, #24
 8009c20:	460d      	mov	r5, r1
 8009c22:	4614      	mov	r4, r2
 8009c24:	b09d      	sub	sp, #116	; 0x74
 8009c26:	d50e      	bpl.n	8009c46 <_svfiprintf_r+0x32>
 8009c28:	690b      	ldr	r3, [r1, #16]
 8009c2a:	b963      	cbnz	r3, 8009c46 <_svfiprintf_r+0x32>
 8009c2c:	2140      	movs	r1, #64	; 0x40
 8009c2e:	f7ff ff21 	bl	8009a74 <_malloc_r>
 8009c32:	6028      	str	r0, [r5, #0]
 8009c34:	6128      	str	r0, [r5, #16]
 8009c36:	b920      	cbnz	r0, 8009c42 <_svfiprintf_r+0x2e>
 8009c38:	230c      	movs	r3, #12
 8009c3a:	603b      	str	r3, [r7, #0]
 8009c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c40:	e0d1      	b.n	8009de6 <_svfiprintf_r+0x1d2>
 8009c42:	2340      	movs	r3, #64	; 0x40
 8009c44:	616b      	str	r3, [r5, #20]
 8009c46:	2300      	movs	r3, #0
 8009c48:	9309      	str	r3, [sp, #36]	; 0x24
 8009c4a:	2320      	movs	r3, #32
 8009c4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c50:	2330      	movs	r3, #48	; 0x30
 8009c52:	f04f 0901 	mov.w	r9, #1
 8009c56:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009e00 <_svfiprintf_r+0x1ec>
 8009c5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c62:	4623      	mov	r3, r4
 8009c64:	469a      	mov	sl, r3
 8009c66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c6a:	b10a      	cbz	r2, 8009c70 <_svfiprintf_r+0x5c>
 8009c6c:	2a25      	cmp	r2, #37	; 0x25
 8009c6e:	d1f9      	bne.n	8009c64 <_svfiprintf_r+0x50>
 8009c70:	ebba 0b04 	subs.w	fp, sl, r4
 8009c74:	d00b      	beq.n	8009c8e <_svfiprintf_r+0x7a>
 8009c76:	465b      	mov	r3, fp
 8009c78:	4622      	mov	r2, r4
 8009c7a:	4629      	mov	r1, r5
 8009c7c:	4638      	mov	r0, r7
 8009c7e:	f7ff ff6d 	bl	8009b5c <__ssputs_r>
 8009c82:	3001      	adds	r0, #1
 8009c84:	f000 80aa 	beq.w	8009ddc <_svfiprintf_r+0x1c8>
 8009c88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c8a:	445a      	add	r2, fp
 8009c8c:	9209      	str	r2, [sp, #36]	; 0x24
 8009c8e:	f89a 3000 	ldrb.w	r3, [sl]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	f000 80a2 	beq.w	8009ddc <_svfiprintf_r+0x1c8>
 8009c98:	2300      	movs	r3, #0
 8009c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ca2:	f10a 0a01 	add.w	sl, sl, #1
 8009ca6:	9304      	str	r3, [sp, #16]
 8009ca8:	9307      	str	r3, [sp, #28]
 8009caa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cae:	931a      	str	r3, [sp, #104]	; 0x68
 8009cb0:	4654      	mov	r4, sl
 8009cb2:	2205      	movs	r2, #5
 8009cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cb8:	4851      	ldr	r0, [pc, #324]	; (8009e00 <_svfiprintf_r+0x1ec>)
 8009cba:	f7ff f98b 	bl	8008fd4 <memchr>
 8009cbe:	9a04      	ldr	r2, [sp, #16]
 8009cc0:	b9d8      	cbnz	r0, 8009cfa <_svfiprintf_r+0xe6>
 8009cc2:	06d0      	lsls	r0, r2, #27
 8009cc4:	bf44      	itt	mi
 8009cc6:	2320      	movmi	r3, #32
 8009cc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ccc:	0711      	lsls	r1, r2, #28
 8009cce:	bf44      	itt	mi
 8009cd0:	232b      	movmi	r3, #43	; 0x2b
 8009cd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cd6:	f89a 3000 	ldrb.w	r3, [sl]
 8009cda:	2b2a      	cmp	r3, #42	; 0x2a
 8009cdc:	d015      	beq.n	8009d0a <_svfiprintf_r+0xf6>
 8009cde:	4654      	mov	r4, sl
 8009ce0:	2000      	movs	r0, #0
 8009ce2:	f04f 0c0a 	mov.w	ip, #10
 8009ce6:	9a07      	ldr	r2, [sp, #28]
 8009ce8:	4621      	mov	r1, r4
 8009cea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cee:	3b30      	subs	r3, #48	; 0x30
 8009cf0:	2b09      	cmp	r3, #9
 8009cf2:	d94e      	bls.n	8009d92 <_svfiprintf_r+0x17e>
 8009cf4:	b1b0      	cbz	r0, 8009d24 <_svfiprintf_r+0x110>
 8009cf6:	9207      	str	r2, [sp, #28]
 8009cf8:	e014      	b.n	8009d24 <_svfiprintf_r+0x110>
 8009cfa:	eba0 0308 	sub.w	r3, r0, r8
 8009cfe:	fa09 f303 	lsl.w	r3, r9, r3
 8009d02:	4313      	orrs	r3, r2
 8009d04:	46a2      	mov	sl, r4
 8009d06:	9304      	str	r3, [sp, #16]
 8009d08:	e7d2      	b.n	8009cb0 <_svfiprintf_r+0x9c>
 8009d0a:	9b03      	ldr	r3, [sp, #12]
 8009d0c:	1d19      	adds	r1, r3, #4
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	9103      	str	r1, [sp, #12]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	bfbb      	ittet	lt
 8009d16:	425b      	neglt	r3, r3
 8009d18:	f042 0202 	orrlt.w	r2, r2, #2
 8009d1c:	9307      	strge	r3, [sp, #28]
 8009d1e:	9307      	strlt	r3, [sp, #28]
 8009d20:	bfb8      	it	lt
 8009d22:	9204      	strlt	r2, [sp, #16]
 8009d24:	7823      	ldrb	r3, [r4, #0]
 8009d26:	2b2e      	cmp	r3, #46	; 0x2e
 8009d28:	d10c      	bne.n	8009d44 <_svfiprintf_r+0x130>
 8009d2a:	7863      	ldrb	r3, [r4, #1]
 8009d2c:	2b2a      	cmp	r3, #42	; 0x2a
 8009d2e:	d135      	bne.n	8009d9c <_svfiprintf_r+0x188>
 8009d30:	9b03      	ldr	r3, [sp, #12]
 8009d32:	3402      	adds	r4, #2
 8009d34:	1d1a      	adds	r2, r3, #4
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	9203      	str	r2, [sp, #12]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	bfb8      	it	lt
 8009d3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d42:	9305      	str	r3, [sp, #20]
 8009d44:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009e04 <_svfiprintf_r+0x1f0>
 8009d48:	2203      	movs	r2, #3
 8009d4a:	4650      	mov	r0, sl
 8009d4c:	7821      	ldrb	r1, [r4, #0]
 8009d4e:	f7ff f941 	bl	8008fd4 <memchr>
 8009d52:	b140      	cbz	r0, 8009d66 <_svfiprintf_r+0x152>
 8009d54:	2340      	movs	r3, #64	; 0x40
 8009d56:	eba0 000a 	sub.w	r0, r0, sl
 8009d5a:	fa03 f000 	lsl.w	r0, r3, r0
 8009d5e:	9b04      	ldr	r3, [sp, #16]
 8009d60:	3401      	adds	r4, #1
 8009d62:	4303      	orrs	r3, r0
 8009d64:	9304      	str	r3, [sp, #16]
 8009d66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d6a:	2206      	movs	r2, #6
 8009d6c:	4826      	ldr	r0, [pc, #152]	; (8009e08 <_svfiprintf_r+0x1f4>)
 8009d6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d72:	f7ff f92f 	bl	8008fd4 <memchr>
 8009d76:	2800      	cmp	r0, #0
 8009d78:	d038      	beq.n	8009dec <_svfiprintf_r+0x1d8>
 8009d7a:	4b24      	ldr	r3, [pc, #144]	; (8009e0c <_svfiprintf_r+0x1f8>)
 8009d7c:	bb1b      	cbnz	r3, 8009dc6 <_svfiprintf_r+0x1b2>
 8009d7e:	9b03      	ldr	r3, [sp, #12]
 8009d80:	3307      	adds	r3, #7
 8009d82:	f023 0307 	bic.w	r3, r3, #7
 8009d86:	3308      	adds	r3, #8
 8009d88:	9303      	str	r3, [sp, #12]
 8009d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d8c:	4433      	add	r3, r6
 8009d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8009d90:	e767      	b.n	8009c62 <_svfiprintf_r+0x4e>
 8009d92:	460c      	mov	r4, r1
 8009d94:	2001      	movs	r0, #1
 8009d96:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d9a:	e7a5      	b.n	8009ce8 <_svfiprintf_r+0xd4>
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	f04f 0c0a 	mov.w	ip, #10
 8009da2:	4619      	mov	r1, r3
 8009da4:	3401      	adds	r4, #1
 8009da6:	9305      	str	r3, [sp, #20]
 8009da8:	4620      	mov	r0, r4
 8009daa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dae:	3a30      	subs	r2, #48	; 0x30
 8009db0:	2a09      	cmp	r2, #9
 8009db2:	d903      	bls.n	8009dbc <_svfiprintf_r+0x1a8>
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d0c5      	beq.n	8009d44 <_svfiprintf_r+0x130>
 8009db8:	9105      	str	r1, [sp, #20]
 8009dba:	e7c3      	b.n	8009d44 <_svfiprintf_r+0x130>
 8009dbc:	4604      	mov	r4, r0
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dc4:	e7f0      	b.n	8009da8 <_svfiprintf_r+0x194>
 8009dc6:	ab03      	add	r3, sp, #12
 8009dc8:	9300      	str	r3, [sp, #0]
 8009dca:	462a      	mov	r2, r5
 8009dcc:	4638      	mov	r0, r7
 8009dce:	4b10      	ldr	r3, [pc, #64]	; (8009e10 <_svfiprintf_r+0x1fc>)
 8009dd0:	a904      	add	r1, sp, #16
 8009dd2:	f7fc fc49 	bl	8006668 <_printf_float>
 8009dd6:	1c42      	adds	r2, r0, #1
 8009dd8:	4606      	mov	r6, r0
 8009dda:	d1d6      	bne.n	8009d8a <_svfiprintf_r+0x176>
 8009ddc:	89ab      	ldrh	r3, [r5, #12]
 8009dde:	065b      	lsls	r3, r3, #25
 8009de0:	f53f af2c 	bmi.w	8009c3c <_svfiprintf_r+0x28>
 8009de4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009de6:	b01d      	add	sp, #116	; 0x74
 8009de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dec:	ab03      	add	r3, sp, #12
 8009dee:	9300      	str	r3, [sp, #0]
 8009df0:	462a      	mov	r2, r5
 8009df2:	4638      	mov	r0, r7
 8009df4:	4b06      	ldr	r3, [pc, #24]	; (8009e10 <_svfiprintf_r+0x1fc>)
 8009df6:	a904      	add	r1, sp, #16
 8009df8:	f7fc fed2 	bl	8006ba0 <_printf_i>
 8009dfc:	e7eb      	b.n	8009dd6 <_svfiprintf_r+0x1c2>
 8009dfe:	bf00      	nop
 8009e00:	0800aeac 	.word	0x0800aeac
 8009e04:	0800aeb2 	.word	0x0800aeb2
 8009e08:	0800aeb6 	.word	0x0800aeb6
 8009e0c:	08006669 	.word	0x08006669
 8009e10:	08009b5d 	.word	0x08009b5d

08009e14 <nan>:
 8009e14:	2000      	movs	r0, #0
 8009e16:	4901      	ldr	r1, [pc, #4]	; (8009e1c <nan+0x8>)
 8009e18:	4770      	bx	lr
 8009e1a:	bf00      	nop
 8009e1c:	7ff80000 	.word	0x7ff80000

08009e20 <_sbrk_r>:
 8009e20:	b538      	push	{r3, r4, r5, lr}
 8009e22:	2300      	movs	r3, #0
 8009e24:	4d05      	ldr	r5, [pc, #20]	; (8009e3c <_sbrk_r+0x1c>)
 8009e26:	4604      	mov	r4, r0
 8009e28:	4608      	mov	r0, r1
 8009e2a:	602b      	str	r3, [r5, #0]
 8009e2c:	f7f8 fd60 	bl	80028f0 <_sbrk>
 8009e30:	1c43      	adds	r3, r0, #1
 8009e32:	d102      	bne.n	8009e3a <_sbrk_r+0x1a>
 8009e34:	682b      	ldr	r3, [r5, #0]
 8009e36:	b103      	cbz	r3, 8009e3a <_sbrk_r+0x1a>
 8009e38:	6023      	str	r3, [r4, #0]
 8009e3a:	bd38      	pop	{r3, r4, r5, pc}
 8009e3c:	20000454 	.word	0x20000454

08009e40 <strncmp>:
 8009e40:	4603      	mov	r3, r0
 8009e42:	b510      	push	{r4, lr}
 8009e44:	b172      	cbz	r2, 8009e64 <strncmp+0x24>
 8009e46:	3901      	subs	r1, #1
 8009e48:	1884      	adds	r4, r0, r2
 8009e4a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009e4e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009e52:	4290      	cmp	r0, r2
 8009e54:	d101      	bne.n	8009e5a <strncmp+0x1a>
 8009e56:	42a3      	cmp	r3, r4
 8009e58:	d101      	bne.n	8009e5e <strncmp+0x1e>
 8009e5a:	1a80      	subs	r0, r0, r2
 8009e5c:	bd10      	pop	{r4, pc}
 8009e5e:	2800      	cmp	r0, #0
 8009e60:	d1f3      	bne.n	8009e4a <strncmp+0xa>
 8009e62:	e7fa      	b.n	8009e5a <strncmp+0x1a>
 8009e64:	4610      	mov	r0, r2
 8009e66:	e7f9      	b.n	8009e5c <strncmp+0x1c>

08009e68 <__ascii_wctomb>:
 8009e68:	4603      	mov	r3, r0
 8009e6a:	4608      	mov	r0, r1
 8009e6c:	b141      	cbz	r1, 8009e80 <__ascii_wctomb+0x18>
 8009e6e:	2aff      	cmp	r2, #255	; 0xff
 8009e70:	d904      	bls.n	8009e7c <__ascii_wctomb+0x14>
 8009e72:	228a      	movs	r2, #138	; 0x8a
 8009e74:	f04f 30ff 	mov.w	r0, #4294967295
 8009e78:	601a      	str	r2, [r3, #0]
 8009e7a:	4770      	bx	lr
 8009e7c:	2001      	movs	r0, #1
 8009e7e:	700a      	strb	r2, [r1, #0]
 8009e80:	4770      	bx	lr
	...

08009e84 <__assert_func>:
 8009e84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e86:	4614      	mov	r4, r2
 8009e88:	461a      	mov	r2, r3
 8009e8a:	4b09      	ldr	r3, [pc, #36]	; (8009eb0 <__assert_func+0x2c>)
 8009e8c:	4605      	mov	r5, r0
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	68d8      	ldr	r0, [r3, #12]
 8009e92:	b14c      	cbz	r4, 8009ea8 <__assert_func+0x24>
 8009e94:	4b07      	ldr	r3, [pc, #28]	; (8009eb4 <__assert_func+0x30>)
 8009e96:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e9a:	9100      	str	r1, [sp, #0]
 8009e9c:	462b      	mov	r3, r5
 8009e9e:	4906      	ldr	r1, [pc, #24]	; (8009eb8 <__assert_func+0x34>)
 8009ea0:	f000 f80e 	bl	8009ec0 <fiprintf>
 8009ea4:	f000 fa8a 	bl	800a3bc <abort>
 8009ea8:	4b04      	ldr	r3, [pc, #16]	; (8009ebc <__assert_func+0x38>)
 8009eaa:	461c      	mov	r4, r3
 8009eac:	e7f3      	b.n	8009e96 <__assert_func+0x12>
 8009eae:	bf00      	nop
 8009eb0:	20000040 	.word	0x20000040
 8009eb4:	0800aebd 	.word	0x0800aebd
 8009eb8:	0800aeca 	.word	0x0800aeca
 8009ebc:	0800aef8 	.word	0x0800aef8

08009ec0 <fiprintf>:
 8009ec0:	b40e      	push	{r1, r2, r3}
 8009ec2:	b503      	push	{r0, r1, lr}
 8009ec4:	4601      	mov	r1, r0
 8009ec6:	ab03      	add	r3, sp, #12
 8009ec8:	4805      	ldr	r0, [pc, #20]	; (8009ee0 <fiprintf+0x20>)
 8009eca:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ece:	6800      	ldr	r0, [r0, #0]
 8009ed0:	9301      	str	r3, [sp, #4]
 8009ed2:	f000 f883 	bl	8009fdc <_vfiprintf_r>
 8009ed6:	b002      	add	sp, #8
 8009ed8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009edc:	b003      	add	sp, #12
 8009ede:	4770      	bx	lr
 8009ee0:	20000040 	.word	0x20000040

08009ee4 <memmove>:
 8009ee4:	4288      	cmp	r0, r1
 8009ee6:	b510      	push	{r4, lr}
 8009ee8:	eb01 0402 	add.w	r4, r1, r2
 8009eec:	d902      	bls.n	8009ef4 <memmove+0x10>
 8009eee:	4284      	cmp	r4, r0
 8009ef0:	4623      	mov	r3, r4
 8009ef2:	d807      	bhi.n	8009f04 <memmove+0x20>
 8009ef4:	1e43      	subs	r3, r0, #1
 8009ef6:	42a1      	cmp	r1, r4
 8009ef8:	d008      	beq.n	8009f0c <memmove+0x28>
 8009efa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009efe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f02:	e7f8      	b.n	8009ef6 <memmove+0x12>
 8009f04:	4601      	mov	r1, r0
 8009f06:	4402      	add	r2, r0
 8009f08:	428a      	cmp	r2, r1
 8009f0a:	d100      	bne.n	8009f0e <memmove+0x2a>
 8009f0c:	bd10      	pop	{r4, pc}
 8009f0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f16:	e7f7      	b.n	8009f08 <memmove+0x24>

08009f18 <__malloc_lock>:
 8009f18:	4801      	ldr	r0, [pc, #4]	; (8009f20 <__malloc_lock+0x8>)
 8009f1a:	f000 bc0b 	b.w	800a734 <__retarget_lock_acquire_recursive>
 8009f1e:	bf00      	nop
 8009f20:	20000458 	.word	0x20000458

08009f24 <__malloc_unlock>:
 8009f24:	4801      	ldr	r0, [pc, #4]	; (8009f2c <__malloc_unlock+0x8>)
 8009f26:	f000 bc06 	b.w	800a736 <__retarget_lock_release_recursive>
 8009f2a:	bf00      	nop
 8009f2c:	20000458 	.word	0x20000458

08009f30 <_realloc_r>:
 8009f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f34:	4680      	mov	r8, r0
 8009f36:	4614      	mov	r4, r2
 8009f38:	460e      	mov	r6, r1
 8009f3a:	b921      	cbnz	r1, 8009f46 <_realloc_r+0x16>
 8009f3c:	4611      	mov	r1, r2
 8009f3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f42:	f7ff bd97 	b.w	8009a74 <_malloc_r>
 8009f46:	b92a      	cbnz	r2, 8009f54 <_realloc_r+0x24>
 8009f48:	f7ff fd2c 	bl	80099a4 <_free_r>
 8009f4c:	4625      	mov	r5, r4
 8009f4e:	4628      	mov	r0, r5
 8009f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f54:	f000 fc56 	bl	800a804 <_malloc_usable_size_r>
 8009f58:	4284      	cmp	r4, r0
 8009f5a:	4607      	mov	r7, r0
 8009f5c:	d802      	bhi.n	8009f64 <_realloc_r+0x34>
 8009f5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f62:	d812      	bhi.n	8009f8a <_realloc_r+0x5a>
 8009f64:	4621      	mov	r1, r4
 8009f66:	4640      	mov	r0, r8
 8009f68:	f7ff fd84 	bl	8009a74 <_malloc_r>
 8009f6c:	4605      	mov	r5, r0
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	d0ed      	beq.n	8009f4e <_realloc_r+0x1e>
 8009f72:	42bc      	cmp	r4, r7
 8009f74:	4622      	mov	r2, r4
 8009f76:	4631      	mov	r1, r6
 8009f78:	bf28      	it	cs
 8009f7a:	463a      	movcs	r2, r7
 8009f7c:	f7ff f838 	bl	8008ff0 <memcpy>
 8009f80:	4631      	mov	r1, r6
 8009f82:	4640      	mov	r0, r8
 8009f84:	f7ff fd0e 	bl	80099a4 <_free_r>
 8009f88:	e7e1      	b.n	8009f4e <_realloc_r+0x1e>
 8009f8a:	4635      	mov	r5, r6
 8009f8c:	e7df      	b.n	8009f4e <_realloc_r+0x1e>

08009f8e <__sfputc_r>:
 8009f8e:	6893      	ldr	r3, [r2, #8]
 8009f90:	b410      	push	{r4}
 8009f92:	3b01      	subs	r3, #1
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	6093      	str	r3, [r2, #8]
 8009f98:	da07      	bge.n	8009faa <__sfputc_r+0x1c>
 8009f9a:	6994      	ldr	r4, [r2, #24]
 8009f9c:	42a3      	cmp	r3, r4
 8009f9e:	db01      	blt.n	8009fa4 <__sfputc_r+0x16>
 8009fa0:	290a      	cmp	r1, #10
 8009fa2:	d102      	bne.n	8009faa <__sfputc_r+0x1c>
 8009fa4:	bc10      	pop	{r4}
 8009fa6:	f000 b949 	b.w	800a23c <__swbuf_r>
 8009faa:	6813      	ldr	r3, [r2, #0]
 8009fac:	1c58      	adds	r0, r3, #1
 8009fae:	6010      	str	r0, [r2, #0]
 8009fb0:	7019      	strb	r1, [r3, #0]
 8009fb2:	4608      	mov	r0, r1
 8009fb4:	bc10      	pop	{r4}
 8009fb6:	4770      	bx	lr

08009fb8 <__sfputs_r>:
 8009fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fba:	4606      	mov	r6, r0
 8009fbc:	460f      	mov	r7, r1
 8009fbe:	4614      	mov	r4, r2
 8009fc0:	18d5      	adds	r5, r2, r3
 8009fc2:	42ac      	cmp	r4, r5
 8009fc4:	d101      	bne.n	8009fca <__sfputs_r+0x12>
 8009fc6:	2000      	movs	r0, #0
 8009fc8:	e007      	b.n	8009fda <__sfputs_r+0x22>
 8009fca:	463a      	mov	r2, r7
 8009fcc:	4630      	mov	r0, r6
 8009fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fd2:	f7ff ffdc 	bl	8009f8e <__sfputc_r>
 8009fd6:	1c43      	adds	r3, r0, #1
 8009fd8:	d1f3      	bne.n	8009fc2 <__sfputs_r+0xa>
 8009fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009fdc <_vfiprintf_r>:
 8009fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe0:	460d      	mov	r5, r1
 8009fe2:	4614      	mov	r4, r2
 8009fe4:	4698      	mov	r8, r3
 8009fe6:	4606      	mov	r6, r0
 8009fe8:	b09d      	sub	sp, #116	; 0x74
 8009fea:	b118      	cbz	r0, 8009ff4 <_vfiprintf_r+0x18>
 8009fec:	6983      	ldr	r3, [r0, #24]
 8009fee:	b90b      	cbnz	r3, 8009ff4 <_vfiprintf_r+0x18>
 8009ff0:	f000 fb02 	bl	800a5f8 <__sinit>
 8009ff4:	4b89      	ldr	r3, [pc, #548]	; (800a21c <_vfiprintf_r+0x240>)
 8009ff6:	429d      	cmp	r5, r3
 8009ff8:	d11b      	bne.n	800a032 <_vfiprintf_r+0x56>
 8009ffa:	6875      	ldr	r5, [r6, #4]
 8009ffc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ffe:	07d9      	lsls	r1, r3, #31
 800a000:	d405      	bmi.n	800a00e <_vfiprintf_r+0x32>
 800a002:	89ab      	ldrh	r3, [r5, #12]
 800a004:	059a      	lsls	r2, r3, #22
 800a006:	d402      	bmi.n	800a00e <_vfiprintf_r+0x32>
 800a008:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a00a:	f000 fb93 	bl	800a734 <__retarget_lock_acquire_recursive>
 800a00e:	89ab      	ldrh	r3, [r5, #12]
 800a010:	071b      	lsls	r3, r3, #28
 800a012:	d501      	bpl.n	800a018 <_vfiprintf_r+0x3c>
 800a014:	692b      	ldr	r3, [r5, #16]
 800a016:	b9eb      	cbnz	r3, 800a054 <_vfiprintf_r+0x78>
 800a018:	4629      	mov	r1, r5
 800a01a:	4630      	mov	r0, r6
 800a01c:	f000 f960 	bl	800a2e0 <__swsetup_r>
 800a020:	b1c0      	cbz	r0, 800a054 <_vfiprintf_r+0x78>
 800a022:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a024:	07dc      	lsls	r4, r3, #31
 800a026:	d50e      	bpl.n	800a046 <_vfiprintf_r+0x6a>
 800a028:	f04f 30ff 	mov.w	r0, #4294967295
 800a02c:	b01d      	add	sp, #116	; 0x74
 800a02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a032:	4b7b      	ldr	r3, [pc, #492]	; (800a220 <_vfiprintf_r+0x244>)
 800a034:	429d      	cmp	r5, r3
 800a036:	d101      	bne.n	800a03c <_vfiprintf_r+0x60>
 800a038:	68b5      	ldr	r5, [r6, #8]
 800a03a:	e7df      	b.n	8009ffc <_vfiprintf_r+0x20>
 800a03c:	4b79      	ldr	r3, [pc, #484]	; (800a224 <_vfiprintf_r+0x248>)
 800a03e:	429d      	cmp	r5, r3
 800a040:	bf08      	it	eq
 800a042:	68f5      	ldreq	r5, [r6, #12]
 800a044:	e7da      	b.n	8009ffc <_vfiprintf_r+0x20>
 800a046:	89ab      	ldrh	r3, [r5, #12]
 800a048:	0598      	lsls	r0, r3, #22
 800a04a:	d4ed      	bmi.n	800a028 <_vfiprintf_r+0x4c>
 800a04c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a04e:	f000 fb72 	bl	800a736 <__retarget_lock_release_recursive>
 800a052:	e7e9      	b.n	800a028 <_vfiprintf_r+0x4c>
 800a054:	2300      	movs	r3, #0
 800a056:	9309      	str	r3, [sp, #36]	; 0x24
 800a058:	2320      	movs	r3, #32
 800a05a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a05e:	2330      	movs	r3, #48	; 0x30
 800a060:	f04f 0901 	mov.w	r9, #1
 800a064:	f8cd 800c 	str.w	r8, [sp, #12]
 800a068:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a228 <_vfiprintf_r+0x24c>
 800a06c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a070:	4623      	mov	r3, r4
 800a072:	469a      	mov	sl, r3
 800a074:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a078:	b10a      	cbz	r2, 800a07e <_vfiprintf_r+0xa2>
 800a07a:	2a25      	cmp	r2, #37	; 0x25
 800a07c:	d1f9      	bne.n	800a072 <_vfiprintf_r+0x96>
 800a07e:	ebba 0b04 	subs.w	fp, sl, r4
 800a082:	d00b      	beq.n	800a09c <_vfiprintf_r+0xc0>
 800a084:	465b      	mov	r3, fp
 800a086:	4622      	mov	r2, r4
 800a088:	4629      	mov	r1, r5
 800a08a:	4630      	mov	r0, r6
 800a08c:	f7ff ff94 	bl	8009fb8 <__sfputs_r>
 800a090:	3001      	adds	r0, #1
 800a092:	f000 80aa 	beq.w	800a1ea <_vfiprintf_r+0x20e>
 800a096:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a098:	445a      	add	r2, fp
 800a09a:	9209      	str	r2, [sp, #36]	; 0x24
 800a09c:	f89a 3000 	ldrb.w	r3, [sl]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f000 80a2 	beq.w	800a1ea <_vfiprintf_r+0x20e>
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0b0:	f10a 0a01 	add.w	sl, sl, #1
 800a0b4:	9304      	str	r3, [sp, #16]
 800a0b6:	9307      	str	r3, [sp, #28]
 800a0b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0bc:	931a      	str	r3, [sp, #104]	; 0x68
 800a0be:	4654      	mov	r4, sl
 800a0c0:	2205      	movs	r2, #5
 800a0c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0c6:	4858      	ldr	r0, [pc, #352]	; (800a228 <_vfiprintf_r+0x24c>)
 800a0c8:	f7fe ff84 	bl	8008fd4 <memchr>
 800a0cc:	9a04      	ldr	r2, [sp, #16]
 800a0ce:	b9d8      	cbnz	r0, 800a108 <_vfiprintf_r+0x12c>
 800a0d0:	06d1      	lsls	r1, r2, #27
 800a0d2:	bf44      	itt	mi
 800a0d4:	2320      	movmi	r3, #32
 800a0d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0da:	0713      	lsls	r3, r2, #28
 800a0dc:	bf44      	itt	mi
 800a0de:	232b      	movmi	r3, #43	; 0x2b
 800a0e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a0e8:	2b2a      	cmp	r3, #42	; 0x2a
 800a0ea:	d015      	beq.n	800a118 <_vfiprintf_r+0x13c>
 800a0ec:	4654      	mov	r4, sl
 800a0ee:	2000      	movs	r0, #0
 800a0f0:	f04f 0c0a 	mov.w	ip, #10
 800a0f4:	9a07      	ldr	r2, [sp, #28]
 800a0f6:	4621      	mov	r1, r4
 800a0f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0fc:	3b30      	subs	r3, #48	; 0x30
 800a0fe:	2b09      	cmp	r3, #9
 800a100:	d94e      	bls.n	800a1a0 <_vfiprintf_r+0x1c4>
 800a102:	b1b0      	cbz	r0, 800a132 <_vfiprintf_r+0x156>
 800a104:	9207      	str	r2, [sp, #28]
 800a106:	e014      	b.n	800a132 <_vfiprintf_r+0x156>
 800a108:	eba0 0308 	sub.w	r3, r0, r8
 800a10c:	fa09 f303 	lsl.w	r3, r9, r3
 800a110:	4313      	orrs	r3, r2
 800a112:	46a2      	mov	sl, r4
 800a114:	9304      	str	r3, [sp, #16]
 800a116:	e7d2      	b.n	800a0be <_vfiprintf_r+0xe2>
 800a118:	9b03      	ldr	r3, [sp, #12]
 800a11a:	1d19      	adds	r1, r3, #4
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	9103      	str	r1, [sp, #12]
 800a120:	2b00      	cmp	r3, #0
 800a122:	bfbb      	ittet	lt
 800a124:	425b      	neglt	r3, r3
 800a126:	f042 0202 	orrlt.w	r2, r2, #2
 800a12a:	9307      	strge	r3, [sp, #28]
 800a12c:	9307      	strlt	r3, [sp, #28]
 800a12e:	bfb8      	it	lt
 800a130:	9204      	strlt	r2, [sp, #16]
 800a132:	7823      	ldrb	r3, [r4, #0]
 800a134:	2b2e      	cmp	r3, #46	; 0x2e
 800a136:	d10c      	bne.n	800a152 <_vfiprintf_r+0x176>
 800a138:	7863      	ldrb	r3, [r4, #1]
 800a13a:	2b2a      	cmp	r3, #42	; 0x2a
 800a13c:	d135      	bne.n	800a1aa <_vfiprintf_r+0x1ce>
 800a13e:	9b03      	ldr	r3, [sp, #12]
 800a140:	3402      	adds	r4, #2
 800a142:	1d1a      	adds	r2, r3, #4
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	9203      	str	r2, [sp, #12]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	bfb8      	it	lt
 800a14c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a150:	9305      	str	r3, [sp, #20]
 800a152:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a22c <_vfiprintf_r+0x250>
 800a156:	2203      	movs	r2, #3
 800a158:	4650      	mov	r0, sl
 800a15a:	7821      	ldrb	r1, [r4, #0]
 800a15c:	f7fe ff3a 	bl	8008fd4 <memchr>
 800a160:	b140      	cbz	r0, 800a174 <_vfiprintf_r+0x198>
 800a162:	2340      	movs	r3, #64	; 0x40
 800a164:	eba0 000a 	sub.w	r0, r0, sl
 800a168:	fa03 f000 	lsl.w	r0, r3, r0
 800a16c:	9b04      	ldr	r3, [sp, #16]
 800a16e:	3401      	adds	r4, #1
 800a170:	4303      	orrs	r3, r0
 800a172:	9304      	str	r3, [sp, #16]
 800a174:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a178:	2206      	movs	r2, #6
 800a17a:	482d      	ldr	r0, [pc, #180]	; (800a230 <_vfiprintf_r+0x254>)
 800a17c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a180:	f7fe ff28 	bl	8008fd4 <memchr>
 800a184:	2800      	cmp	r0, #0
 800a186:	d03f      	beq.n	800a208 <_vfiprintf_r+0x22c>
 800a188:	4b2a      	ldr	r3, [pc, #168]	; (800a234 <_vfiprintf_r+0x258>)
 800a18a:	bb1b      	cbnz	r3, 800a1d4 <_vfiprintf_r+0x1f8>
 800a18c:	9b03      	ldr	r3, [sp, #12]
 800a18e:	3307      	adds	r3, #7
 800a190:	f023 0307 	bic.w	r3, r3, #7
 800a194:	3308      	adds	r3, #8
 800a196:	9303      	str	r3, [sp, #12]
 800a198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a19a:	443b      	add	r3, r7
 800a19c:	9309      	str	r3, [sp, #36]	; 0x24
 800a19e:	e767      	b.n	800a070 <_vfiprintf_r+0x94>
 800a1a0:	460c      	mov	r4, r1
 800a1a2:	2001      	movs	r0, #1
 800a1a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1a8:	e7a5      	b.n	800a0f6 <_vfiprintf_r+0x11a>
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	f04f 0c0a 	mov.w	ip, #10
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	3401      	adds	r4, #1
 800a1b4:	9305      	str	r3, [sp, #20]
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1bc:	3a30      	subs	r2, #48	; 0x30
 800a1be:	2a09      	cmp	r2, #9
 800a1c0:	d903      	bls.n	800a1ca <_vfiprintf_r+0x1ee>
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d0c5      	beq.n	800a152 <_vfiprintf_r+0x176>
 800a1c6:	9105      	str	r1, [sp, #20]
 800a1c8:	e7c3      	b.n	800a152 <_vfiprintf_r+0x176>
 800a1ca:	4604      	mov	r4, r0
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1d2:	e7f0      	b.n	800a1b6 <_vfiprintf_r+0x1da>
 800a1d4:	ab03      	add	r3, sp, #12
 800a1d6:	9300      	str	r3, [sp, #0]
 800a1d8:	462a      	mov	r2, r5
 800a1da:	4630      	mov	r0, r6
 800a1dc:	4b16      	ldr	r3, [pc, #88]	; (800a238 <_vfiprintf_r+0x25c>)
 800a1de:	a904      	add	r1, sp, #16
 800a1e0:	f7fc fa42 	bl	8006668 <_printf_float>
 800a1e4:	4607      	mov	r7, r0
 800a1e6:	1c78      	adds	r0, r7, #1
 800a1e8:	d1d6      	bne.n	800a198 <_vfiprintf_r+0x1bc>
 800a1ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1ec:	07d9      	lsls	r1, r3, #31
 800a1ee:	d405      	bmi.n	800a1fc <_vfiprintf_r+0x220>
 800a1f0:	89ab      	ldrh	r3, [r5, #12]
 800a1f2:	059a      	lsls	r2, r3, #22
 800a1f4:	d402      	bmi.n	800a1fc <_vfiprintf_r+0x220>
 800a1f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1f8:	f000 fa9d 	bl	800a736 <__retarget_lock_release_recursive>
 800a1fc:	89ab      	ldrh	r3, [r5, #12]
 800a1fe:	065b      	lsls	r3, r3, #25
 800a200:	f53f af12 	bmi.w	800a028 <_vfiprintf_r+0x4c>
 800a204:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a206:	e711      	b.n	800a02c <_vfiprintf_r+0x50>
 800a208:	ab03      	add	r3, sp, #12
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	462a      	mov	r2, r5
 800a20e:	4630      	mov	r0, r6
 800a210:	4b09      	ldr	r3, [pc, #36]	; (800a238 <_vfiprintf_r+0x25c>)
 800a212:	a904      	add	r1, sp, #16
 800a214:	f7fc fcc4 	bl	8006ba0 <_printf_i>
 800a218:	e7e4      	b.n	800a1e4 <_vfiprintf_r+0x208>
 800a21a:	bf00      	nop
 800a21c:	0800af1c 	.word	0x0800af1c
 800a220:	0800af3c 	.word	0x0800af3c
 800a224:	0800aefc 	.word	0x0800aefc
 800a228:	0800aeac 	.word	0x0800aeac
 800a22c:	0800aeb2 	.word	0x0800aeb2
 800a230:	0800aeb6 	.word	0x0800aeb6
 800a234:	08006669 	.word	0x08006669
 800a238:	08009fb9 	.word	0x08009fb9

0800a23c <__swbuf_r>:
 800a23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a23e:	460e      	mov	r6, r1
 800a240:	4614      	mov	r4, r2
 800a242:	4605      	mov	r5, r0
 800a244:	b118      	cbz	r0, 800a24e <__swbuf_r+0x12>
 800a246:	6983      	ldr	r3, [r0, #24]
 800a248:	b90b      	cbnz	r3, 800a24e <__swbuf_r+0x12>
 800a24a:	f000 f9d5 	bl	800a5f8 <__sinit>
 800a24e:	4b21      	ldr	r3, [pc, #132]	; (800a2d4 <__swbuf_r+0x98>)
 800a250:	429c      	cmp	r4, r3
 800a252:	d12b      	bne.n	800a2ac <__swbuf_r+0x70>
 800a254:	686c      	ldr	r4, [r5, #4]
 800a256:	69a3      	ldr	r3, [r4, #24]
 800a258:	60a3      	str	r3, [r4, #8]
 800a25a:	89a3      	ldrh	r3, [r4, #12]
 800a25c:	071a      	lsls	r2, r3, #28
 800a25e:	d52f      	bpl.n	800a2c0 <__swbuf_r+0x84>
 800a260:	6923      	ldr	r3, [r4, #16]
 800a262:	b36b      	cbz	r3, 800a2c0 <__swbuf_r+0x84>
 800a264:	6923      	ldr	r3, [r4, #16]
 800a266:	6820      	ldr	r0, [r4, #0]
 800a268:	b2f6      	uxtb	r6, r6
 800a26a:	1ac0      	subs	r0, r0, r3
 800a26c:	6963      	ldr	r3, [r4, #20]
 800a26e:	4637      	mov	r7, r6
 800a270:	4283      	cmp	r3, r0
 800a272:	dc04      	bgt.n	800a27e <__swbuf_r+0x42>
 800a274:	4621      	mov	r1, r4
 800a276:	4628      	mov	r0, r5
 800a278:	f000 f92a 	bl	800a4d0 <_fflush_r>
 800a27c:	bb30      	cbnz	r0, 800a2cc <__swbuf_r+0x90>
 800a27e:	68a3      	ldr	r3, [r4, #8]
 800a280:	3001      	adds	r0, #1
 800a282:	3b01      	subs	r3, #1
 800a284:	60a3      	str	r3, [r4, #8]
 800a286:	6823      	ldr	r3, [r4, #0]
 800a288:	1c5a      	adds	r2, r3, #1
 800a28a:	6022      	str	r2, [r4, #0]
 800a28c:	701e      	strb	r6, [r3, #0]
 800a28e:	6963      	ldr	r3, [r4, #20]
 800a290:	4283      	cmp	r3, r0
 800a292:	d004      	beq.n	800a29e <__swbuf_r+0x62>
 800a294:	89a3      	ldrh	r3, [r4, #12]
 800a296:	07db      	lsls	r3, r3, #31
 800a298:	d506      	bpl.n	800a2a8 <__swbuf_r+0x6c>
 800a29a:	2e0a      	cmp	r6, #10
 800a29c:	d104      	bne.n	800a2a8 <__swbuf_r+0x6c>
 800a29e:	4621      	mov	r1, r4
 800a2a0:	4628      	mov	r0, r5
 800a2a2:	f000 f915 	bl	800a4d0 <_fflush_r>
 800a2a6:	b988      	cbnz	r0, 800a2cc <__swbuf_r+0x90>
 800a2a8:	4638      	mov	r0, r7
 800a2aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2ac:	4b0a      	ldr	r3, [pc, #40]	; (800a2d8 <__swbuf_r+0x9c>)
 800a2ae:	429c      	cmp	r4, r3
 800a2b0:	d101      	bne.n	800a2b6 <__swbuf_r+0x7a>
 800a2b2:	68ac      	ldr	r4, [r5, #8]
 800a2b4:	e7cf      	b.n	800a256 <__swbuf_r+0x1a>
 800a2b6:	4b09      	ldr	r3, [pc, #36]	; (800a2dc <__swbuf_r+0xa0>)
 800a2b8:	429c      	cmp	r4, r3
 800a2ba:	bf08      	it	eq
 800a2bc:	68ec      	ldreq	r4, [r5, #12]
 800a2be:	e7ca      	b.n	800a256 <__swbuf_r+0x1a>
 800a2c0:	4621      	mov	r1, r4
 800a2c2:	4628      	mov	r0, r5
 800a2c4:	f000 f80c 	bl	800a2e0 <__swsetup_r>
 800a2c8:	2800      	cmp	r0, #0
 800a2ca:	d0cb      	beq.n	800a264 <__swbuf_r+0x28>
 800a2cc:	f04f 37ff 	mov.w	r7, #4294967295
 800a2d0:	e7ea      	b.n	800a2a8 <__swbuf_r+0x6c>
 800a2d2:	bf00      	nop
 800a2d4:	0800af1c 	.word	0x0800af1c
 800a2d8:	0800af3c 	.word	0x0800af3c
 800a2dc:	0800aefc 	.word	0x0800aefc

0800a2e0 <__swsetup_r>:
 800a2e0:	4b32      	ldr	r3, [pc, #200]	; (800a3ac <__swsetup_r+0xcc>)
 800a2e2:	b570      	push	{r4, r5, r6, lr}
 800a2e4:	681d      	ldr	r5, [r3, #0]
 800a2e6:	4606      	mov	r6, r0
 800a2e8:	460c      	mov	r4, r1
 800a2ea:	b125      	cbz	r5, 800a2f6 <__swsetup_r+0x16>
 800a2ec:	69ab      	ldr	r3, [r5, #24]
 800a2ee:	b913      	cbnz	r3, 800a2f6 <__swsetup_r+0x16>
 800a2f0:	4628      	mov	r0, r5
 800a2f2:	f000 f981 	bl	800a5f8 <__sinit>
 800a2f6:	4b2e      	ldr	r3, [pc, #184]	; (800a3b0 <__swsetup_r+0xd0>)
 800a2f8:	429c      	cmp	r4, r3
 800a2fa:	d10f      	bne.n	800a31c <__swsetup_r+0x3c>
 800a2fc:	686c      	ldr	r4, [r5, #4]
 800a2fe:	89a3      	ldrh	r3, [r4, #12]
 800a300:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a304:	0719      	lsls	r1, r3, #28
 800a306:	d42c      	bmi.n	800a362 <__swsetup_r+0x82>
 800a308:	06dd      	lsls	r5, r3, #27
 800a30a:	d411      	bmi.n	800a330 <__swsetup_r+0x50>
 800a30c:	2309      	movs	r3, #9
 800a30e:	6033      	str	r3, [r6, #0]
 800a310:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a314:	f04f 30ff 	mov.w	r0, #4294967295
 800a318:	81a3      	strh	r3, [r4, #12]
 800a31a:	e03e      	b.n	800a39a <__swsetup_r+0xba>
 800a31c:	4b25      	ldr	r3, [pc, #148]	; (800a3b4 <__swsetup_r+0xd4>)
 800a31e:	429c      	cmp	r4, r3
 800a320:	d101      	bne.n	800a326 <__swsetup_r+0x46>
 800a322:	68ac      	ldr	r4, [r5, #8]
 800a324:	e7eb      	b.n	800a2fe <__swsetup_r+0x1e>
 800a326:	4b24      	ldr	r3, [pc, #144]	; (800a3b8 <__swsetup_r+0xd8>)
 800a328:	429c      	cmp	r4, r3
 800a32a:	bf08      	it	eq
 800a32c:	68ec      	ldreq	r4, [r5, #12]
 800a32e:	e7e6      	b.n	800a2fe <__swsetup_r+0x1e>
 800a330:	0758      	lsls	r0, r3, #29
 800a332:	d512      	bpl.n	800a35a <__swsetup_r+0x7a>
 800a334:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a336:	b141      	cbz	r1, 800a34a <__swsetup_r+0x6a>
 800a338:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a33c:	4299      	cmp	r1, r3
 800a33e:	d002      	beq.n	800a346 <__swsetup_r+0x66>
 800a340:	4630      	mov	r0, r6
 800a342:	f7ff fb2f 	bl	80099a4 <_free_r>
 800a346:	2300      	movs	r3, #0
 800a348:	6363      	str	r3, [r4, #52]	; 0x34
 800a34a:	89a3      	ldrh	r3, [r4, #12]
 800a34c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a350:	81a3      	strh	r3, [r4, #12]
 800a352:	2300      	movs	r3, #0
 800a354:	6063      	str	r3, [r4, #4]
 800a356:	6923      	ldr	r3, [r4, #16]
 800a358:	6023      	str	r3, [r4, #0]
 800a35a:	89a3      	ldrh	r3, [r4, #12]
 800a35c:	f043 0308 	orr.w	r3, r3, #8
 800a360:	81a3      	strh	r3, [r4, #12]
 800a362:	6923      	ldr	r3, [r4, #16]
 800a364:	b94b      	cbnz	r3, 800a37a <__swsetup_r+0x9a>
 800a366:	89a3      	ldrh	r3, [r4, #12]
 800a368:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a36c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a370:	d003      	beq.n	800a37a <__swsetup_r+0x9a>
 800a372:	4621      	mov	r1, r4
 800a374:	4630      	mov	r0, r6
 800a376:	f000 fa05 	bl	800a784 <__smakebuf_r>
 800a37a:	89a0      	ldrh	r0, [r4, #12]
 800a37c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a380:	f010 0301 	ands.w	r3, r0, #1
 800a384:	d00a      	beq.n	800a39c <__swsetup_r+0xbc>
 800a386:	2300      	movs	r3, #0
 800a388:	60a3      	str	r3, [r4, #8]
 800a38a:	6963      	ldr	r3, [r4, #20]
 800a38c:	425b      	negs	r3, r3
 800a38e:	61a3      	str	r3, [r4, #24]
 800a390:	6923      	ldr	r3, [r4, #16]
 800a392:	b943      	cbnz	r3, 800a3a6 <__swsetup_r+0xc6>
 800a394:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a398:	d1ba      	bne.n	800a310 <__swsetup_r+0x30>
 800a39a:	bd70      	pop	{r4, r5, r6, pc}
 800a39c:	0781      	lsls	r1, r0, #30
 800a39e:	bf58      	it	pl
 800a3a0:	6963      	ldrpl	r3, [r4, #20]
 800a3a2:	60a3      	str	r3, [r4, #8]
 800a3a4:	e7f4      	b.n	800a390 <__swsetup_r+0xb0>
 800a3a6:	2000      	movs	r0, #0
 800a3a8:	e7f7      	b.n	800a39a <__swsetup_r+0xba>
 800a3aa:	bf00      	nop
 800a3ac:	20000040 	.word	0x20000040
 800a3b0:	0800af1c 	.word	0x0800af1c
 800a3b4:	0800af3c 	.word	0x0800af3c
 800a3b8:	0800aefc 	.word	0x0800aefc

0800a3bc <abort>:
 800a3bc:	2006      	movs	r0, #6
 800a3be:	b508      	push	{r3, lr}
 800a3c0:	f000 fa50 	bl	800a864 <raise>
 800a3c4:	2001      	movs	r0, #1
 800a3c6:	f7f8 fa20 	bl	800280a <_exit>
	...

0800a3cc <__sflush_r>:
 800a3cc:	898a      	ldrh	r2, [r1, #12]
 800a3ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3d0:	4605      	mov	r5, r0
 800a3d2:	0710      	lsls	r0, r2, #28
 800a3d4:	460c      	mov	r4, r1
 800a3d6:	d457      	bmi.n	800a488 <__sflush_r+0xbc>
 800a3d8:	684b      	ldr	r3, [r1, #4]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	dc04      	bgt.n	800a3e8 <__sflush_r+0x1c>
 800a3de:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	dc01      	bgt.n	800a3e8 <__sflush_r+0x1c>
 800a3e4:	2000      	movs	r0, #0
 800a3e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3ea:	2e00      	cmp	r6, #0
 800a3ec:	d0fa      	beq.n	800a3e4 <__sflush_r+0x18>
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a3f4:	682f      	ldr	r7, [r5, #0]
 800a3f6:	602b      	str	r3, [r5, #0]
 800a3f8:	d032      	beq.n	800a460 <__sflush_r+0x94>
 800a3fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a3fc:	89a3      	ldrh	r3, [r4, #12]
 800a3fe:	075a      	lsls	r2, r3, #29
 800a400:	d505      	bpl.n	800a40e <__sflush_r+0x42>
 800a402:	6863      	ldr	r3, [r4, #4]
 800a404:	1ac0      	subs	r0, r0, r3
 800a406:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a408:	b10b      	cbz	r3, 800a40e <__sflush_r+0x42>
 800a40a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a40c:	1ac0      	subs	r0, r0, r3
 800a40e:	2300      	movs	r3, #0
 800a410:	4602      	mov	r2, r0
 800a412:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a414:	4628      	mov	r0, r5
 800a416:	6a21      	ldr	r1, [r4, #32]
 800a418:	47b0      	blx	r6
 800a41a:	1c43      	adds	r3, r0, #1
 800a41c:	89a3      	ldrh	r3, [r4, #12]
 800a41e:	d106      	bne.n	800a42e <__sflush_r+0x62>
 800a420:	6829      	ldr	r1, [r5, #0]
 800a422:	291d      	cmp	r1, #29
 800a424:	d82c      	bhi.n	800a480 <__sflush_r+0xb4>
 800a426:	4a29      	ldr	r2, [pc, #164]	; (800a4cc <__sflush_r+0x100>)
 800a428:	40ca      	lsrs	r2, r1
 800a42a:	07d6      	lsls	r6, r2, #31
 800a42c:	d528      	bpl.n	800a480 <__sflush_r+0xb4>
 800a42e:	2200      	movs	r2, #0
 800a430:	6062      	str	r2, [r4, #4]
 800a432:	6922      	ldr	r2, [r4, #16]
 800a434:	04d9      	lsls	r1, r3, #19
 800a436:	6022      	str	r2, [r4, #0]
 800a438:	d504      	bpl.n	800a444 <__sflush_r+0x78>
 800a43a:	1c42      	adds	r2, r0, #1
 800a43c:	d101      	bne.n	800a442 <__sflush_r+0x76>
 800a43e:	682b      	ldr	r3, [r5, #0]
 800a440:	b903      	cbnz	r3, 800a444 <__sflush_r+0x78>
 800a442:	6560      	str	r0, [r4, #84]	; 0x54
 800a444:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a446:	602f      	str	r7, [r5, #0]
 800a448:	2900      	cmp	r1, #0
 800a44a:	d0cb      	beq.n	800a3e4 <__sflush_r+0x18>
 800a44c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a450:	4299      	cmp	r1, r3
 800a452:	d002      	beq.n	800a45a <__sflush_r+0x8e>
 800a454:	4628      	mov	r0, r5
 800a456:	f7ff faa5 	bl	80099a4 <_free_r>
 800a45a:	2000      	movs	r0, #0
 800a45c:	6360      	str	r0, [r4, #52]	; 0x34
 800a45e:	e7c2      	b.n	800a3e6 <__sflush_r+0x1a>
 800a460:	6a21      	ldr	r1, [r4, #32]
 800a462:	2301      	movs	r3, #1
 800a464:	4628      	mov	r0, r5
 800a466:	47b0      	blx	r6
 800a468:	1c41      	adds	r1, r0, #1
 800a46a:	d1c7      	bne.n	800a3fc <__sflush_r+0x30>
 800a46c:	682b      	ldr	r3, [r5, #0]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d0c4      	beq.n	800a3fc <__sflush_r+0x30>
 800a472:	2b1d      	cmp	r3, #29
 800a474:	d001      	beq.n	800a47a <__sflush_r+0xae>
 800a476:	2b16      	cmp	r3, #22
 800a478:	d101      	bne.n	800a47e <__sflush_r+0xb2>
 800a47a:	602f      	str	r7, [r5, #0]
 800a47c:	e7b2      	b.n	800a3e4 <__sflush_r+0x18>
 800a47e:	89a3      	ldrh	r3, [r4, #12]
 800a480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a484:	81a3      	strh	r3, [r4, #12]
 800a486:	e7ae      	b.n	800a3e6 <__sflush_r+0x1a>
 800a488:	690f      	ldr	r7, [r1, #16]
 800a48a:	2f00      	cmp	r7, #0
 800a48c:	d0aa      	beq.n	800a3e4 <__sflush_r+0x18>
 800a48e:	0793      	lsls	r3, r2, #30
 800a490:	bf18      	it	ne
 800a492:	2300      	movne	r3, #0
 800a494:	680e      	ldr	r6, [r1, #0]
 800a496:	bf08      	it	eq
 800a498:	694b      	ldreq	r3, [r1, #20]
 800a49a:	1bf6      	subs	r6, r6, r7
 800a49c:	600f      	str	r7, [r1, #0]
 800a49e:	608b      	str	r3, [r1, #8]
 800a4a0:	2e00      	cmp	r6, #0
 800a4a2:	dd9f      	ble.n	800a3e4 <__sflush_r+0x18>
 800a4a4:	4633      	mov	r3, r6
 800a4a6:	463a      	mov	r2, r7
 800a4a8:	4628      	mov	r0, r5
 800a4aa:	6a21      	ldr	r1, [r4, #32]
 800a4ac:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a4b0:	47e0      	blx	ip
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	dc06      	bgt.n	800a4c4 <__sflush_r+0xf8>
 800a4b6:	89a3      	ldrh	r3, [r4, #12]
 800a4b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4c0:	81a3      	strh	r3, [r4, #12]
 800a4c2:	e790      	b.n	800a3e6 <__sflush_r+0x1a>
 800a4c4:	4407      	add	r7, r0
 800a4c6:	1a36      	subs	r6, r6, r0
 800a4c8:	e7ea      	b.n	800a4a0 <__sflush_r+0xd4>
 800a4ca:	bf00      	nop
 800a4cc:	20400001 	.word	0x20400001

0800a4d0 <_fflush_r>:
 800a4d0:	b538      	push	{r3, r4, r5, lr}
 800a4d2:	690b      	ldr	r3, [r1, #16]
 800a4d4:	4605      	mov	r5, r0
 800a4d6:	460c      	mov	r4, r1
 800a4d8:	b913      	cbnz	r3, 800a4e0 <_fflush_r+0x10>
 800a4da:	2500      	movs	r5, #0
 800a4dc:	4628      	mov	r0, r5
 800a4de:	bd38      	pop	{r3, r4, r5, pc}
 800a4e0:	b118      	cbz	r0, 800a4ea <_fflush_r+0x1a>
 800a4e2:	6983      	ldr	r3, [r0, #24]
 800a4e4:	b90b      	cbnz	r3, 800a4ea <_fflush_r+0x1a>
 800a4e6:	f000 f887 	bl	800a5f8 <__sinit>
 800a4ea:	4b14      	ldr	r3, [pc, #80]	; (800a53c <_fflush_r+0x6c>)
 800a4ec:	429c      	cmp	r4, r3
 800a4ee:	d11b      	bne.n	800a528 <_fflush_r+0x58>
 800a4f0:	686c      	ldr	r4, [r5, #4]
 800a4f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d0ef      	beq.n	800a4da <_fflush_r+0xa>
 800a4fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a4fc:	07d0      	lsls	r0, r2, #31
 800a4fe:	d404      	bmi.n	800a50a <_fflush_r+0x3a>
 800a500:	0599      	lsls	r1, r3, #22
 800a502:	d402      	bmi.n	800a50a <_fflush_r+0x3a>
 800a504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a506:	f000 f915 	bl	800a734 <__retarget_lock_acquire_recursive>
 800a50a:	4628      	mov	r0, r5
 800a50c:	4621      	mov	r1, r4
 800a50e:	f7ff ff5d 	bl	800a3cc <__sflush_r>
 800a512:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a514:	4605      	mov	r5, r0
 800a516:	07da      	lsls	r2, r3, #31
 800a518:	d4e0      	bmi.n	800a4dc <_fflush_r+0xc>
 800a51a:	89a3      	ldrh	r3, [r4, #12]
 800a51c:	059b      	lsls	r3, r3, #22
 800a51e:	d4dd      	bmi.n	800a4dc <_fflush_r+0xc>
 800a520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a522:	f000 f908 	bl	800a736 <__retarget_lock_release_recursive>
 800a526:	e7d9      	b.n	800a4dc <_fflush_r+0xc>
 800a528:	4b05      	ldr	r3, [pc, #20]	; (800a540 <_fflush_r+0x70>)
 800a52a:	429c      	cmp	r4, r3
 800a52c:	d101      	bne.n	800a532 <_fflush_r+0x62>
 800a52e:	68ac      	ldr	r4, [r5, #8]
 800a530:	e7df      	b.n	800a4f2 <_fflush_r+0x22>
 800a532:	4b04      	ldr	r3, [pc, #16]	; (800a544 <_fflush_r+0x74>)
 800a534:	429c      	cmp	r4, r3
 800a536:	bf08      	it	eq
 800a538:	68ec      	ldreq	r4, [r5, #12]
 800a53a:	e7da      	b.n	800a4f2 <_fflush_r+0x22>
 800a53c:	0800af1c 	.word	0x0800af1c
 800a540:	0800af3c 	.word	0x0800af3c
 800a544:	0800aefc 	.word	0x0800aefc

0800a548 <std>:
 800a548:	2300      	movs	r3, #0
 800a54a:	b510      	push	{r4, lr}
 800a54c:	4604      	mov	r4, r0
 800a54e:	e9c0 3300 	strd	r3, r3, [r0]
 800a552:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a556:	6083      	str	r3, [r0, #8]
 800a558:	8181      	strh	r1, [r0, #12]
 800a55a:	6643      	str	r3, [r0, #100]	; 0x64
 800a55c:	81c2      	strh	r2, [r0, #14]
 800a55e:	6183      	str	r3, [r0, #24]
 800a560:	4619      	mov	r1, r3
 800a562:	2208      	movs	r2, #8
 800a564:	305c      	adds	r0, #92	; 0x5c
 800a566:	f7fb ffd9 	bl	800651c <memset>
 800a56a:	4b05      	ldr	r3, [pc, #20]	; (800a580 <std+0x38>)
 800a56c:	6224      	str	r4, [r4, #32]
 800a56e:	6263      	str	r3, [r4, #36]	; 0x24
 800a570:	4b04      	ldr	r3, [pc, #16]	; (800a584 <std+0x3c>)
 800a572:	62a3      	str	r3, [r4, #40]	; 0x28
 800a574:	4b04      	ldr	r3, [pc, #16]	; (800a588 <std+0x40>)
 800a576:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a578:	4b04      	ldr	r3, [pc, #16]	; (800a58c <std+0x44>)
 800a57a:	6323      	str	r3, [r4, #48]	; 0x30
 800a57c:	bd10      	pop	{r4, pc}
 800a57e:	bf00      	nop
 800a580:	0800a89d 	.word	0x0800a89d
 800a584:	0800a8bf 	.word	0x0800a8bf
 800a588:	0800a8f7 	.word	0x0800a8f7
 800a58c:	0800a91b 	.word	0x0800a91b

0800a590 <_cleanup_r>:
 800a590:	4901      	ldr	r1, [pc, #4]	; (800a598 <_cleanup_r+0x8>)
 800a592:	f000 b8af 	b.w	800a6f4 <_fwalk_reent>
 800a596:	bf00      	nop
 800a598:	0800a4d1 	.word	0x0800a4d1

0800a59c <__sfmoreglue>:
 800a59c:	2268      	movs	r2, #104	; 0x68
 800a59e:	b570      	push	{r4, r5, r6, lr}
 800a5a0:	1e4d      	subs	r5, r1, #1
 800a5a2:	4355      	muls	r5, r2
 800a5a4:	460e      	mov	r6, r1
 800a5a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a5aa:	f7ff fa63 	bl	8009a74 <_malloc_r>
 800a5ae:	4604      	mov	r4, r0
 800a5b0:	b140      	cbz	r0, 800a5c4 <__sfmoreglue+0x28>
 800a5b2:	2100      	movs	r1, #0
 800a5b4:	e9c0 1600 	strd	r1, r6, [r0]
 800a5b8:	300c      	adds	r0, #12
 800a5ba:	60a0      	str	r0, [r4, #8]
 800a5bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a5c0:	f7fb ffac 	bl	800651c <memset>
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	bd70      	pop	{r4, r5, r6, pc}

0800a5c8 <__sfp_lock_acquire>:
 800a5c8:	4801      	ldr	r0, [pc, #4]	; (800a5d0 <__sfp_lock_acquire+0x8>)
 800a5ca:	f000 b8b3 	b.w	800a734 <__retarget_lock_acquire_recursive>
 800a5ce:	bf00      	nop
 800a5d0:	20000459 	.word	0x20000459

0800a5d4 <__sfp_lock_release>:
 800a5d4:	4801      	ldr	r0, [pc, #4]	; (800a5dc <__sfp_lock_release+0x8>)
 800a5d6:	f000 b8ae 	b.w	800a736 <__retarget_lock_release_recursive>
 800a5da:	bf00      	nop
 800a5dc:	20000459 	.word	0x20000459

0800a5e0 <__sinit_lock_acquire>:
 800a5e0:	4801      	ldr	r0, [pc, #4]	; (800a5e8 <__sinit_lock_acquire+0x8>)
 800a5e2:	f000 b8a7 	b.w	800a734 <__retarget_lock_acquire_recursive>
 800a5e6:	bf00      	nop
 800a5e8:	2000045a 	.word	0x2000045a

0800a5ec <__sinit_lock_release>:
 800a5ec:	4801      	ldr	r0, [pc, #4]	; (800a5f4 <__sinit_lock_release+0x8>)
 800a5ee:	f000 b8a2 	b.w	800a736 <__retarget_lock_release_recursive>
 800a5f2:	bf00      	nop
 800a5f4:	2000045a 	.word	0x2000045a

0800a5f8 <__sinit>:
 800a5f8:	b510      	push	{r4, lr}
 800a5fa:	4604      	mov	r4, r0
 800a5fc:	f7ff fff0 	bl	800a5e0 <__sinit_lock_acquire>
 800a600:	69a3      	ldr	r3, [r4, #24]
 800a602:	b11b      	cbz	r3, 800a60c <__sinit+0x14>
 800a604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a608:	f7ff bff0 	b.w	800a5ec <__sinit_lock_release>
 800a60c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a610:	6523      	str	r3, [r4, #80]	; 0x50
 800a612:	4b13      	ldr	r3, [pc, #76]	; (800a660 <__sinit+0x68>)
 800a614:	4a13      	ldr	r2, [pc, #76]	; (800a664 <__sinit+0x6c>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	62a2      	str	r2, [r4, #40]	; 0x28
 800a61a:	42a3      	cmp	r3, r4
 800a61c:	bf08      	it	eq
 800a61e:	2301      	moveq	r3, #1
 800a620:	4620      	mov	r0, r4
 800a622:	bf08      	it	eq
 800a624:	61a3      	streq	r3, [r4, #24]
 800a626:	f000 f81f 	bl	800a668 <__sfp>
 800a62a:	6060      	str	r0, [r4, #4]
 800a62c:	4620      	mov	r0, r4
 800a62e:	f000 f81b 	bl	800a668 <__sfp>
 800a632:	60a0      	str	r0, [r4, #8]
 800a634:	4620      	mov	r0, r4
 800a636:	f000 f817 	bl	800a668 <__sfp>
 800a63a:	2200      	movs	r2, #0
 800a63c:	2104      	movs	r1, #4
 800a63e:	60e0      	str	r0, [r4, #12]
 800a640:	6860      	ldr	r0, [r4, #4]
 800a642:	f7ff ff81 	bl	800a548 <std>
 800a646:	2201      	movs	r2, #1
 800a648:	2109      	movs	r1, #9
 800a64a:	68a0      	ldr	r0, [r4, #8]
 800a64c:	f7ff ff7c 	bl	800a548 <std>
 800a650:	2202      	movs	r2, #2
 800a652:	2112      	movs	r1, #18
 800a654:	68e0      	ldr	r0, [r4, #12]
 800a656:	f7ff ff77 	bl	800a548 <std>
 800a65a:	2301      	movs	r3, #1
 800a65c:	61a3      	str	r3, [r4, #24]
 800a65e:	e7d1      	b.n	800a604 <__sinit+0xc>
 800a660:	0800aabc 	.word	0x0800aabc
 800a664:	0800a591 	.word	0x0800a591

0800a668 <__sfp>:
 800a668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a66a:	4607      	mov	r7, r0
 800a66c:	f7ff ffac 	bl	800a5c8 <__sfp_lock_acquire>
 800a670:	4b1e      	ldr	r3, [pc, #120]	; (800a6ec <__sfp+0x84>)
 800a672:	681e      	ldr	r6, [r3, #0]
 800a674:	69b3      	ldr	r3, [r6, #24]
 800a676:	b913      	cbnz	r3, 800a67e <__sfp+0x16>
 800a678:	4630      	mov	r0, r6
 800a67a:	f7ff ffbd 	bl	800a5f8 <__sinit>
 800a67e:	3648      	adds	r6, #72	; 0x48
 800a680:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a684:	3b01      	subs	r3, #1
 800a686:	d503      	bpl.n	800a690 <__sfp+0x28>
 800a688:	6833      	ldr	r3, [r6, #0]
 800a68a:	b30b      	cbz	r3, 800a6d0 <__sfp+0x68>
 800a68c:	6836      	ldr	r6, [r6, #0]
 800a68e:	e7f7      	b.n	800a680 <__sfp+0x18>
 800a690:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a694:	b9d5      	cbnz	r5, 800a6cc <__sfp+0x64>
 800a696:	4b16      	ldr	r3, [pc, #88]	; (800a6f0 <__sfp+0x88>)
 800a698:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a69c:	60e3      	str	r3, [r4, #12]
 800a69e:	6665      	str	r5, [r4, #100]	; 0x64
 800a6a0:	f000 f847 	bl	800a732 <__retarget_lock_init_recursive>
 800a6a4:	f7ff ff96 	bl	800a5d4 <__sfp_lock_release>
 800a6a8:	2208      	movs	r2, #8
 800a6aa:	4629      	mov	r1, r5
 800a6ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a6b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a6b4:	6025      	str	r5, [r4, #0]
 800a6b6:	61a5      	str	r5, [r4, #24]
 800a6b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a6bc:	f7fb ff2e 	bl	800651c <memset>
 800a6c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a6c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a6c8:	4620      	mov	r0, r4
 800a6ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6cc:	3468      	adds	r4, #104	; 0x68
 800a6ce:	e7d9      	b.n	800a684 <__sfp+0x1c>
 800a6d0:	2104      	movs	r1, #4
 800a6d2:	4638      	mov	r0, r7
 800a6d4:	f7ff ff62 	bl	800a59c <__sfmoreglue>
 800a6d8:	4604      	mov	r4, r0
 800a6da:	6030      	str	r0, [r6, #0]
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	d1d5      	bne.n	800a68c <__sfp+0x24>
 800a6e0:	f7ff ff78 	bl	800a5d4 <__sfp_lock_release>
 800a6e4:	230c      	movs	r3, #12
 800a6e6:	603b      	str	r3, [r7, #0]
 800a6e8:	e7ee      	b.n	800a6c8 <__sfp+0x60>
 800a6ea:	bf00      	nop
 800a6ec:	0800aabc 	.word	0x0800aabc
 800a6f0:	ffff0001 	.word	0xffff0001

0800a6f4 <_fwalk_reent>:
 800a6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6f8:	4606      	mov	r6, r0
 800a6fa:	4688      	mov	r8, r1
 800a6fc:	2700      	movs	r7, #0
 800a6fe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a702:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a706:	f1b9 0901 	subs.w	r9, r9, #1
 800a70a:	d505      	bpl.n	800a718 <_fwalk_reent+0x24>
 800a70c:	6824      	ldr	r4, [r4, #0]
 800a70e:	2c00      	cmp	r4, #0
 800a710:	d1f7      	bne.n	800a702 <_fwalk_reent+0xe>
 800a712:	4638      	mov	r0, r7
 800a714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a718:	89ab      	ldrh	r3, [r5, #12]
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d907      	bls.n	800a72e <_fwalk_reent+0x3a>
 800a71e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a722:	3301      	adds	r3, #1
 800a724:	d003      	beq.n	800a72e <_fwalk_reent+0x3a>
 800a726:	4629      	mov	r1, r5
 800a728:	4630      	mov	r0, r6
 800a72a:	47c0      	blx	r8
 800a72c:	4307      	orrs	r7, r0
 800a72e:	3568      	adds	r5, #104	; 0x68
 800a730:	e7e9      	b.n	800a706 <_fwalk_reent+0x12>

0800a732 <__retarget_lock_init_recursive>:
 800a732:	4770      	bx	lr

0800a734 <__retarget_lock_acquire_recursive>:
 800a734:	4770      	bx	lr

0800a736 <__retarget_lock_release_recursive>:
 800a736:	4770      	bx	lr

0800a738 <__swhatbuf_r>:
 800a738:	b570      	push	{r4, r5, r6, lr}
 800a73a:	460e      	mov	r6, r1
 800a73c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a740:	4614      	mov	r4, r2
 800a742:	2900      	cmp	r1, #0
 800a744:	461d      	mov	r5, r3
 800a746:	b096      	sub	sp, #88	; 0x58
 800a748:	da08      	bge.n	800a75c <__swhatbuf_r+0x24>
 800a74a:	2200      	movs	r2, #0
 800a74c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a750:	602a      	str	r2, [r5, #0]
 800a752:	061a      	lsls	r2, r3, #24
 800a754:	d410      	bmi.n	800a778 <__swhatbuf_r+0x40>
 800a756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a75a:	e00e      	b.n	800a77a <__swhatbuf_r+0x42>
 800a75c:	466a      	mov	r2, sp
 800a75e:	f000 f903 	bl	800a968 <_fstat_r>
 800a762:	2800      	cmp	r0, #0
 800a764:	dbf1      	blt.n	800a74a <__swhatbuf_r+0x12>
 800a766:	9a01      	ldr	r2, [sp, #4]
 800a768:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a76c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a770:	425a      	negs	r2, r3
 800a772:	415a      	adcs	r2, r3
 800a774:	602a      	str	r2, [r5, #0]
 800a776:	e7ee      	b.n	800a756 <__swhatbuf_r+0x1e>
 800a778:	2340      	movs	r3, #64	; 0x40
 800a77a:	2000      	movs	r0, #0
 800a77c:	6023      	str	r3, [r4, #0]
 800a77e:	b016      	add	sp, #88	; 0x58
 800a780:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a784 <__smakebuf_r>:
 800a784:	898b      	ldrh	r3, [r1, #12]
 800a786:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a788:	079d      	lsls	r5, r3, #30
 800a78a:	4606      	mov	r6, r0
 800a78c:	460c      	mov	r4, r1
 800a78e:	d507      	bpl.n	800a7a0 <__smakebuf_r+0x1c>
 800a790:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a794:	6023      	str	r3, [r4, #0]
 800a796:	6123      	str	r3, [r4, #16]
 800a798:	2301      	movs	r3, #1
 800a79a:	6163      	str	r3, [r4, #20]
 800a79c:	b002      	add	sp, #8
 800a79e:	bd70      	pop	{r4, r5, r6, pc}
 800a7a0:	466a      	mov	r2, sp
 800a7a2:	ab01      	add	r3, sp, #4
 800a7a4:	f7ff ffc8 	bl	800a738 <__swhatbuf_r>
 800a7a8:	9900      	ldr	r1, [sp, #0]
 800a7aa:	4605      	mov	r5, r0
 800a7ac:	4630      	mov	r0, r6
 800a7ae:	f7ff f961 	bl	8009a74 <_malloc_r>
 800a7b2:	b948      	cbnz	r0, 800a7c8 <__smakebuf_r+0x44>
 800a7b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7b8:	059a      	lsls	r2, r3, #22
 800a7ba:	d4ef      	bmi.n	800a79c <__smakebuf_r+0x18>
 800a7bc:	f023 0303 	bic.w	r3, r3, #3
 800a7c0:	f043 0302 	orr.w	r3, r3, #2
 800a7c4:	81a3      	strh	r3, [r4, #12]
 800a7c6:	e7e3      	b.n	800a790 <__smakebuf_r+0xc>
 800a7c8:	4b0d      	ldr	r3, [pc, #52]	; (800a800 <__smakebuf_r+0x7c>)
 800a7ca:	62b3      	str	r3, [r6, #40]	; 0x28
 800a7cc:	89a3      	ldrh	r3, [r4, #12]
 800a7ce:	6020      	str	r0, [r4, #0]
 800a7d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7d4:	81a3      	strh	r3, [r4, #12]
 800a7d6:	9b00      	ldr	r3, [sp, #0]
 800a7d8:	6120      	str	r0, [r4, #16]
 800a7da:	6163      	str	r3, [r4, #20]
 800a7dc:	9b01      	ldr	r3, [sp, #4]
 800a7de:	b15b      	cbz	r3, 800a7f8 <__smakebuf_r+0x74>
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7e6:	f000 f8d1 	bl	800a98c <_isatty_r>
 800a7ea:	b128      	cbz	r0, 800a7f8 <__smakebuf_r+0x74>
 800a7ec:	89a3      	ldrh	r3, [r4, #12]
 800a7ee:	f023 0303 	bic.w	r3, r3, #3
 800a7f2:	f043 0301 	orr.w	r3, r3, #1
 800a7f6:	81a3      	strh	r3, [r4, #12]
 800a7f8:	89a0      	ldrh	r0, [r4, #12]
 800a7fa:	4305      	orrs	r5, r0
 800a7fc:	81a5      	strh	r5, [r4, #12]
 800a7fe:	e7cd      	b.n	800a79c <__smakebuf_r+0x18>
 800a800:	0800a591 	.word	0x0800a591

0800a804 <_malloc_usable_size_r>:
 800a804:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a808:	1f18      	subs	r0, r3, #4
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	bfbc      	itt	lt
 800a80e:	580b      	ldrlt	r3, [r1, r0]
 800a810:	18c0      	addlt	r0, r0, r3
 800a812:	4770      	bx	lr

0800a814 <_raise_r>:
 800a814:	291f      	cmp	r1, #31
 800a816:	b538      	push	{r3, r4, r5, lr}
 800a818:	4604      	mov	r4, r0
 800a81a:	460d      	mov	r5, r1
 800a81c:	d904      	bls.n	800a828 <_raise_r+0x14>
 800a81e:	2316      	movs	r3, #22
 800a820:	6003      	str	r3, [r0, #0]
 800a822:	f04f 30ff 	mov.w	r0, #4294967295
 800a826:	bd38      	pop	{r3, r4, r5, pc}
 800a828:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a82a:	b112      	cbz	r2, 800a832 <_raise_r+0x1e>
 800a82c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a830:	b94b      	cbnz	r3, 800a846 <_raise_r+0x32>
 800a832:	4620      	mov	r0, r4
 800a834:	f000 f830 	bl	800a898 <_getpid_r>
 800a838:	462a      	mov	r2, r5
 800a83a:	4601      	mov	r1, r0
 800a83c:	4620      	mov	r0, r4
 800a83e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a842:	f000 b817 	b.w	800a874 <_kill_r>
 800a846:	2b01      	cmp	r3, #1
 800a848:	d00a      	beq.n	800a860 <_raise_r+0x4c>
 800a84a:	1c59      	adds	r1, r3, #1
 800a84c:	d103      	bne.n	800a856 <_raise_r+0x42>
 800a84e:	2316      	movs	r3, #22
 800a850:	6003      	str	r3, [r0, #0]
 800a852:	2001      	movs	r0, #1
 800a854:	e7e7      	b.n	800a826 <_raise_r+0x12>
 800a856:	2400      	movs	r4, #0
 800a858:	4628      	mov	r0, r5
 800a85a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a85e:	4798      	blx	r3
 800a860:	2000      	movs	r0, #0
 800a862:	e7e0      	b.n	800a826 <_raise_r+0x12>

0800a864 <raise>:
 800a864:	4b02      	ldr	r3, [pc, #8]	; (800a870 <raise+0xc>)
 800a866:	4601      	mov	r1, r0
 800a868:	6818      	ldr	r0, [r3, #0]
 800a86a:	f7ff bfd3 	b.w	800a814 <_raise_r>
 800a86e:	bf00      	nop
 800a870:	20000040 	.word	0x20000040

0800a874 <_kill_r>:
 800a874:	b538      	push	{r3, r4, r5, lr}
 800a876:	2300      	movs	r3, #0
 800a878:	4d06      	ldr	r5, [pc, #24]	; (800a894 <_kill_r+0x20>)
 800a87a:	4604      	mov	r4, r0
 800a87c:	4608      	mov	r0, r1
 800a87e:	4611      	mov	r1, r2
 800a880:	602b      	str	r3, [r5, #0]
 800a882:	f7f7 ffb2 	bl	80027ea <_kill>
 800a886:	1c43      	adds	r3, r0, #1
 800a888:	d102      	bne.n	800a890 <_kill_r+0x1c>
 800a88a:	682b      	ldr	r3, [r5, #0]
 800a88c:	b103      	cbz	r3, 800a890 <_kill_r+0x1c>
 800a88e:	6023      	str	r3, [r4, #0]
 800a890:	bd38      	pop	{r3, r4, r5, pc}
 800a892:	bf00      	nop
 800a894:	20000454 	.word	0x20000454

0800a898 <_getpid_r>:
 800a898:	f7f7 bfa0 	b.w	80027dc <_getpid>

0800a89c <__sread>:
 800a89c:	b510      	push	{r4, lr}
 800a89e:	460c      	mov	r4, r1
 800a8a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8a4:	f000 f894 	bl	800a9d0 <_read_r>
 800a8a8:	2800      	cmp	r0, #0
 800a8aa:	bfab      	itete	ge
 800a8ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a8ae:	89a3      	ldrhlt	r3, [r4, #12]
 800a8b0:	181b      	addge	r3, r3, r0
 800a8b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a8b6:	bfac      	ite	ge
 800a8b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a8ba:	81a3      	strhlt	r3, [r4, #12]
 800a8bc:	bd10      	pop	{r4, pc}

0800a8be <__swrite>:
 800a8be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8c2:	461f      	mov	r7, r3
 800a8c4:	898b      	ldrh	r3, [r1, #12]
 800a8c6:	4605      	mov	r5, r0
 800a8c8:	05db      	lsls	r3, r3, #23
 800a8ca:	460c      	mov	r4, r1
 800a8cc:	4616      	mov	r6, r2
 800a8ce:	d505      	bpl.n	800a8dc <__swrite+0x1e>
 800a8d0:	2302      	movs	r3, #2
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8d8:	f000 f868 	bl	800a9ac <_lseek_r>
 800a8dc:	89a3      	ldrh	r3, [r4, #12]
 800a8de:	4632      	mov	r2, r6
 800a8e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8e4:	81a3      	strh	r3, [r4, #12]
 800a8e6:	4628      	mov	r0, r5
 800a8e8:	463b      	mov	r3, r7
 800a8ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8f2:	f000 b817 	b.w	800a924 <_write_r>

0800a8f6 <__sseek>:
 800a8f6:	b510      	push	{r4, lr}
 800a8f8:	460c      	mov	r4, r1
 800a8fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8fe:	f000 f855 	bl	800a9ac <_lseek_r>
 800a902:	1c43      	adds	r3, r0, #1
 800a904:	89a3      	ldrh	r3, [r4, #12]
 800a906:	bf15      	itete	ne
 800a908:	6560      	strne	r0, [r4, #84]	; 0x54
 800a90a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a90e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a912:	81a3      	strheq	r3, [r4, #12]
 800a914:	bf18      	it	ne
 800a916:	81a3      	strhne	r3, [r4, #12]
 800a918:	bd10      	pop	{r4, pc}

0800a91a <__sclose>:
 800a91a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a91e:	f000 b813 	b.w	800a948 <_close_r>
	...

0800a924 <_write_r>:
 800a924:	b538      	push	{r3, r4, r5, lr}
 800a926:	4604      	mov	r4, r0
 800a928:	4608      	mov	r0, r1
 800a92a:	4611      	mov	r1, r2
 800a92c:	2200      	movs	r2, #0
 800a92e:	4d05      	ldr	r5, [pc, #20]	; (800a944 <_write_r+0x20>)
 800a930:	602a      	str	r2, [r5, #0]
 800a932:	461a      	mov	r2, r3
 800a934:	f7f7 ff90 	bl	8002858 <_write>
 800a938:	1c43      	adds	r3, r0, #1
 800a93a:	d102      	bne.n	800a942 <_write_r+0x1e>
 800a93c:	682b      	ldr	r3, [r5, #0]
 800a93e:	b103      	cbz	r3, 800a942 <_write_r+0x1e>
 800a940:	6023      	str	r3, [r4, #0]
 800a942:	bd38      	pop	{r3, r4, r5, pc}
 800a944:	20000454 	.word	0x20000454

0800a948 <_close_r>:
 800a948:	b538      	push	{r3, r4, r5, lr}
 800a94a:	2300      	movs	r3, #0
 800a94c:	4d05      	ldr	r5, [pc, #20]	; (800a964 <_close_r+0x1c>)
 800a94e:	4604      	mov	r4, r0
 800a950:	4608      	mov	r0, r1
 800a952:	602b      	str	r3, [r5, #0]
 800a954:	f7f7 ff9c 	bl	8002890 <_close>
 800a958:	1c43      	adds	r3, r0, #1
 800a95a:	d102      	bne.n	800a962 <_close_r+0x1a>
 800a95c:	682b      	ldr	r3, [r5, #0]
 800a95e:	b103      	cbz	r3, 800a962 <_close_r+0x1a>
 800a960:	6023      	str	r3, [r4, #0]
 800a962:	bd38      	pop	{r3, r4, r5, pc}
 800a964:	20000454 	.word	0x20000454

0800a968 <_fstat_r>:
 800a968:	b538      	push	{r3, r4, r5, lr}
 800a96a:	2300      	movs	r3, #0
 800a96c:	4d06      	ldr	r5, [pc, #24]	; (800a988 <_fstat_r+0x20>)
 800a96e:	4604      	mov	r4, r0
 800a970:	4608      	mov	r0, r1
 800a972:	4611      	mov	r1, r2
 800a974:	602b      	str	r3, [r5, #0]
 800a976:	f7f7 ff96 	bl	80028a6 <_fstat>
 800a97a:	1c43      	adds	r3, r0, #1
 800a97c:	d102      	bne.n	800a984 <_fstat_r+0x1c>
 800a97e:	682b      	ldr	r3, [r5, #0]
 800a980:	b103      	cbz	r3, 800a984 <_fstat_r+0x1c>
 800a982:	6023      	str	r3, [r4, #0]
 800a984:	bd38      	pop	{r3, r4, r5, pc}
 800a986:	bf00      	nop
 800a988:	20000454 	.word	0x20000454

0800a98c <_isatty_r>:
 800a98c:	b538      	push	{r3, r4, r5, lr}
 800a98e:	2300      	movs	r3, #0
 800a990:	4d05      	ldr	r5, [pc, #20]	; (800a9a8 <_isatty_r+0x1c>)
 800a992:	4604      	mov	r4, r0
 800a994:	4608      	mov	r0, r1
 800a996:	602b      	str	r3, [r5, #0]
 800a998:	f7f7 ff94 	bl	80028c4 <_isatty>
 800a99c:	1c43      	adds	r3, r0, #1
 800a99e:	d102      	bne.n	800a9a6 <_isatty_r+0x1a>
 800a9a0:	682b      	ldr	r3, [r5, #0]
 800a9a2:	b103      	cbz	r3, 800a9a6 <_isatty_r+0x1a>
 800a9a4:	6023      	str	r3, [r4, #0]
 800a9a6:	bd38      	pop	{r3, r4, r5, pc}
 800a9a8:	20000454 	.word	0x20000454

0800a9ac <_lseek_r>:
 800a9ac:	b538      	push	{r3, r4, r5, lr}
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	4608      	mov	r0, r1
 800a9b2:	4611      	mov	r1, r2
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	4d05      	ldr	r5, [pc, #20]	; (800a9cc <_lseek_r+0x20>)
 800a9b8:	602a      	str	r2, [r5, #0]
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	f7f7 ff8c 	bl	80028d8 <_lseek>
 800a9c0:	1c43      	adds	r3, r0, #1
 800a9c2:	d102      	bne.n	800a9ca <_lseek_r+0x1e>
 800a9c4:	682b      	ldr	r3, [r5, #0]
 800a9c6:	b103      	cbz	r3, 800a9ca <_lseek_r+0x1e>
 800a9c8:	6023      	str	r3, [r4, #0]
 800a9ca:	bd38      	pop	{r3, r4, r5, pc}
 800a9cc:	20000454 	.word	0x20000454

0800a9d0 <_read_r>:
 800a9d0:	b538      	push	{r3, r4, r5, lr}
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	4608      	mov	r0, r1
 800a9d6:	4611      	mov	r1, r2
 800a9d8:	2200      	movs	r2, #0
 800a9da:	4d05      	ldr	r5, [pc, #20]	; (800a9f0 <_read_r+0x20>)
 800a9dc:	602a      	str	r2, [r5, #0]
 800a9de:	461a      	mov	r2, r3
 800a9e0:	f7f7 ff1d 	bl	800281e <_read>
 800a9e4:	1c43      	adds	r3, r0, #1
 800a9e6:	d102      	bne.n	800a9ee <_read_r+0x1e>
 800a9e8:	682b      	ldr	r3, [r5, #0]
 800a9ea:	b103      	cbz	r3, 800a9ee <_read_r+0x1e>
 800a9ec:	6023      	str	r3, [r4, #0]
 800a9ee:	bd38      	pop	{r3, r4, r5, pc}
 800a9f0:	20000454 	.word	0x20000454

0800a9f4 <_init>:
 800a9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9f6:	bf00      	nop
 800a9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9fa:	bc08      	pop	{r3}
 800a9fc:	469e      	mov	lr, r3
 800a9fe:	4770      	bx	lr

0800aa00 <_fini>:
 800aa00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa02:	bf00      	nop
 800aa04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa06:	bc08      	pop	{r3}
 800aa08:	469e      	mov	lr, r3
 800aa0a:	4770      	bx	lr
