
GRUZIK2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a724  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  0800a838  0800a838  0001a838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad84  0800ad84  00020214  2**0
                  CONTENTS
  4 .ARM          00000000  0800ad84  0800ad84  00020214  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ad84  0800ad84  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad84  0800ad84  0001ad84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad88  0800ad88  0001ad88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800ad8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000214  0800afa0  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  0800afa0  0002045c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010125  00000000  00000000  0002023d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002979  00000000  00000000  00030362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  00032ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e00  00000000  00000000  00033bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019da0  00000000  00000000  000349d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120f8  00000000  00000000  0004e778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091334  00000000  00000000  00060870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1ba4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005448  00000000  00000000  000f1bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000214 	.word	0x20000214
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a81c 	.word	0x0800a81c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000218 	.word	0x20000218
 800014c:	0800a81c 	.word	0x0800a81c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_d2lz>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	4605      	mov	r5, r0
 8001160:	460c      	mov	r4, r1
 8001162:	2200      	movs	r2, #0
 8001164:	2300      	movs	r3, #0
 8001166:	4628      	mov	r0, r5
 8001168:	4621      	mov	r1, r4
 800116a:	f7ff fc27 	bl	80009bc <__aeabi_dcmplt>
 800116e:	b928      	cbnz	r0, 800117c <__aeabi_d2lz+0x20>
 8001170:	4628      	mov	r0, r5
 8001172:	4621      	mov	r1, r4
 8001174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001178:	f000 b80a 	b.w	8001190 <__aeabi_d2ulz>
 800117c:	4628      	mov	r0, r5
 800117e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001182:	f000 f805 	bl	8001190 <__aeabi_d2ulz>
 8001186:	4240      	negs	r0, r0
 8001188:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800118c:	bd38      	pop	{r3, r4, r5, pc}
 800118e:	bf00      	nop

08001190 <__aeabi_d2ulz>:
 8001190:	b5d0      	push	{r4, r6, r7, lr}
 8001192:	2200      	movs	r2, #0
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <__aeabi_d2ulz+0x34>)
 8001196:	4606      	mov	r6, r0
 8001198:	460f      	mov	r7, r1
 800119a:	f7ff f99d 	bl	80004d8 <__aeabi_dmul>
 800119e:	f7ff fc73 	bl	8000a88 <__aeabi_d2uiz>
 80011a2:	4604      	mov	r4, r0
 80011a4:	f7ff f91e 	bl	80003e4 <__aeabi_ui2d>
 80011a8:	2200      	movs	r2, #0
 80011aa:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <__aeabi_d2ulz+0x38>)
 80011ac:	f7ff f994 	bl	80004d8 <__aeabi_dmul>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4630      	mov	r0, r6
 80011b6:	4639      	mov	r1, r7
 80011b8:	f7fe ffd6 	bl	8000168 <__aeabi_dsub>
 80011bc:	f7ff fc64 	bl	8000a88 <__aeabi_d2uiz>
 80011c0:	4621      	mov	r1, r4
 80011c2:	bdd0      	pop	{r4, r6, r7, pc}
 80011c4:	3df00000 	.word	0x3df00000
 80011c8:	41f00000 	.word	0x41f00000

080011cc <SN_UART_Send>:
}

/*Example usage of this function looks like that*/
// Uart_send(&huart2, "data:%d %s %d\r\n",cokolwiek, cos, itd);
void SN_UART_Send(UART_HandleTypeDef *huart, const char *print, ...)
{
 80011cc:	b40e      	push	{r1, r2, r3}
 80011ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	466b      	mov	r3, sp
 80011da:	461e      	mov	r6, r3
    int timeout = 100;
 80011dc:	2364      	movs	r3, #100	; 0x64
 80011de:	61fb      	str	r3, [r7, #28]

    // Determine the length of the formatted string
    va_list args;
    va_start(args, print);
 80011e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011e4:	60fb      	str	r3, [r7, #12]
    int len = vsnprintf(NULL, 0, print, args);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80011ea:	2100      	movs	r1, #0
 80011ec:	2000      	movs	r0, #0
 80011ee:	f006 fbf9 	bl	80079e4 <vsniprintf>
 80011f2:	61b8      	str	r0, [r7, #24]
    va_end(args);

    // Allocate the buffer with the correct length
    char Buffer[len];
 80011f4:	69b9      	ldr	r1, [r7, #24]
 80011f6:	1e4b      	subs	r3, r1, #1
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	460a      	mov	r2, r1
 80011fc:	2300      	movs	r3, #0
 80011fe:	4690      	mov	r8, r2
 8001200:	4699      	mov	r9, r3
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	f04f 0300 	mov.w	r3, #0
 800120a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800120e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001212:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001216:	460a      	mov	r2, r1
 8001218:	2300      	movs	r3, #0
 800121a:	4614      	mov	r4, r2
 800121c:	461d      	mov	r5, r3
 800121e:	f04f 0200 	mov.w	r2, #0
 8001222:	f04f 0300 	mov.w	r3, #0
 8001226:	00eb      	lsls	r3, r5, #3
 8001228:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800122c:	00e2      	lsls	r2, r4, #3
 800122e:	460b      	mov	r3, r1
 8001230:	3307      	adds	r3, #7
 8001232:	08db      	lsrs	r3, r3, #3
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	ebad 0d03 	sub.w	sp, sp, r3
 800123a:	466b      	mov	r3, sp
 800123c:	3300      	adds	r3, #0
 800123e:	613b      	str	r3, [r7, #16]

    // Format the string into the buffer
    va_start(args, print);
 8001240:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001244:	60fb      	str	r3, [r7, #12]
    vsnprintf(Buffer, len, print, args);
 8001246:	69b9      	ldr	r1, [r7, #24]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800124c:	6938      	ldr	r0, [r7, #16]
 800124e:	f006 fbc9 	bl	80079e4 <vsniprintf>
    va_end(args);

    // Transmit the formatted string through UART
    HAL_UART_Transmit(huart, (uint8_t *)Buffer, len, timeout);
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	b29a      	uxth	r2, r3
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	6939      	ldr	r1, [r7, #16]
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f004 fa18 	bl	8005690 <HAL_UART_Transmit>
 8001260:	46b5      	mov	sp, r6
}
 8001262:	bf00      	nop
 8001264:	3720      	adds	r7, #32
 8001266:	46bd      	mov	sp, r7
 8001268:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800126c:	b003      	add	sp, #12
 800126e:	4770      	bx	lr

08001270 <SN_Find_first>:
/*decode received message*/
int SN_Find_first(const char*message, const char*token)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b0a8      	sub	sp, #160	; 0xa0
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
	char buff[128];
	int token_len = sprintf(buff,token);
 800127a:	f107 0308 	add.w	r3, r7, #8
 800127e:	6839      	ldr	r1, [r7, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f005 fcc7 	bl	8006c14 <siprintf>
 8001286:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	int msg_size = sprintf(buff,message);
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	4618      	mov	r0, r3
 8001292:	f005 fcbf 	bl	8006c14 <siprintf>
 8001296:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	int token_place;
	int true_tokens = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


	for(int i = 0; i <= (msg_size - 1); i++)
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80012a6:	e042      	b.n	800132e <SN_Find_first+0xbe>
	{
		if(message[i] == token[0])
 80012a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	4413      	add	r3, r2
 80012b0:	781a      	ldrb	r2, [r3, #0]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d134      	bne.n	8001324 <SN_Find_first+0xb4>
		{
			true_tokens = 1;
 80012ba:	2301      	movs	r3, #1
 80012bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			for(int j = 1; j <= (token_len - 1); j++)
 80012c0:	2301      	movs	r3, #1
 80012c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80012c6:	e019      	b.n	80012fc <SN_Find_first+0x8c>
			{
				if(message[i + j] == token[j])
 80012c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80012cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012d0:	4413      	add	r3, r2
 80012d2:	461a      	mov	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	781a      	ldrb	r2, [r3, #0]
 80012da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012de:	6839      	ldr	r1, [r7, #0]
 80012e0:	440b      	add	r3, r1
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d104      	bne.n	80012f2 <SN_Find_first+0x82>
				{
					true_tokens++;
 80012e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80012ec:	3301      	adds	r3, #1
 80012ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			for(int j = 1; j <= (token_len - 1); j++)
 80012f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012f6:	3301      	adds	r3, #1
 80012f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80012fc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001300:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001304:	429a      	cmp	r2, r3
 8001306:	dcdf      	bgt.n	80012c8 <SN_Find_first+0x58>
				}
			}

			if(true_tokens == token_len)
 8001308:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800130c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001310:	429a      	cmp	r2, r3
 8001312:	d104      	bne.n	800131e <SN_Find_first+0xae>
			{
				token_place = i;
 8001314:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001318:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
				break;
 800131c:	e00d      	b.n	800133a <SN_Find_first+0xca>
			}
			else
			{
				true_tokens = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	for(int i = 0; i <= (msg_size - 1); i++)
 8001324:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001328:	3301      	adds	r3, #1
 800132a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800132e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001332:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001336:	429a      	cmp	r2, r3
 8001338:	dcb6      	bgt.n	80012a8 <SN_Find_first+0x38>
			}
		}
 }
 return token_place;
 800133a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
}
 800133e:	4618      	mov	r0, r3
 8001340:	37a0      	adds	r7, #160	; 0xa0
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <SN_Value_In_Message>:
		}
 }
 return token_place;
}
void SN_Value_In_Message(const char*message, int from, int to, char*Value)
{
 8001346:	b480      	push	{r7}
 8001348:	b087      	sub	sp, #28
 800134a:	af00      	add	r7, sp, #0
 800134c:	60f8      	str	r0, [r7, #12]
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	603b      	str	r3, [r7, #0]
	int j = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
	for(int i = from; i <= (to - 1); i++)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	e00d      	b.n	800137a <SN_Value_In_Message+0x34>
	{
		Value[j] = message[i];
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	441a      	add	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	6839      	ldr	r1, [r7, #0]
 8001368:	440b      	add	r3, r1
 800136a:	7812      	ldrb	r2, [r2, #0]
 800136c:	701a      	strb	r2, [r3, #0]
		j++;
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	3301      	adds	r3, #1
 8001372:	617b      	str	r3, [r7, #20]
	for(int i = from; i <= (to - 1); i++)
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	3301      	adds	r3, #1
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	429a      	cmp	r2, r3
 8001380:	dced      	bgt.n	800135e <SN_Value_In_Message+0x18>
	}
}
 8001382:	bf00      	nop
 8001384:	bf00      	nop
 8001386:	371c      	adds	r7, #28
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
	...

08001390 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013a0:	4b18      	ldr	r3, [pc, #96]	; (8001404 <MX_ADC1_Init+0x74>)
 80013a2:	4a19      	ldr	r2, [pc, #100]	; (8001408 <MX_ADC1_Init+0x78>)
 80013a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013a6:	4b17      	ldr	r3, [pc, #92]	; (8001404 <MX_ADC1_Init+0x74>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013ac:	4b15      	ldr	r3, [pc, #84]	; (8001404 <MX_ADC1_Init+0x74>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013b2:	4b14      	ldr	r3, [pc, #80]	; (8001404 <MX_ADC1_Init+0x74>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <MX_ADC1_Init+0x74>)
 80013ba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80013be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013c0:	4b10      	ldr	r3, [pc, #64]	; (8001404 <MX_ADC1_Init+0x74>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <MX_ADC1_Init+0x74>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013cc:	480d      	ldr	r0, [pc, #52]	; (8001404 <MX_ADC1_Init+0x74>)
 80013ce:	f001 fd1f 	bl	8002e10 <HAL_ADC_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80013d8:	f001 f8aa 	bl	8002530 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80013dc:	2309      	movs	r3, #9
 80013de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013e0:	2301      	movs	r3, #1
 80013e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	4619      	mov	r1, r3
 80013ec:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_ADC1_Init+0x74>)
 80013ee:	f001 ffa7 	bl	8003340 <HAL_ADC_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80013f8:	f001 f89a 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013fc:	bf00      	nop
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000230 	.word	0x20000230
 8001408:	40012400 	.word	0x40012400

0800140c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0310 	add.w	r3, r7, #16
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a14      	ldr	r2, [pc, #80]	; (8001478 <HAL_ADC_MspInit+0x6c>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d121      	bne.n	8001470 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800142c:	4b13      	ldr	r3, [pc, #76]	; (800147c <HAL_ADC_MspInit+0x70>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	4a12      	ldr	r2, [pc, #72]	; (800147c <HAL_ADC_MspInit+0x70>)
 8001432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001436:	6193      	str	r3, [r2, #24]
 8001438:	4b10      	ldr	r3, [pc, #64]	; (800147c <HAL_ADC_MspInit+0x70>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001444:	4b0d      	ldr	r3, [pc, #52]	; (800147c <HAL_ADC_MspInit+0x70>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	4a0c      	ldr	r2, [pc, #48]	; (800147c <HAL_ADC_MspInit+0x70>)
 800144a:	f043 0308 	orr.w	r3, r3, #8
 800144e:	6193      	str	r3, [r2, #24]
 8001450:	4b0a      	ldr	r3, [pc, #40]	; (800147c <HAL_ADC_MspInit+0x70>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	f003 0308 	and.w	r3, r3, #8
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800145c:	2302      	movs	r3, #2
 800145e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001460:	2303      	movs	r3, #3
 8001462:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	4619      	mov	r1, r3
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <HAL_ADC_MspInit+0x74>)
 800146c:	f002 fabc 	bl	80039e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001470:	bf00      	nop
 8001472:	3720      	adds	r7, #32
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40012400 	.word	0x40012400
 800147c:	40021000 	.word	0x40021000
 8001480:	40010c00 	.word	0x40010c00

08001484 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148a:	f107 0310 	add.w	r3, r7, #16
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001498:	4b3f      	ldr	r3, [pc, #252]	; (8001598 <MX_GPIO_Init+0x114>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4a3e      	ldr	r2, [pc, #248]	; (8001598 <MX_GPIO_Init+0x114>)
 800149e:	f043 0310 	orr.w	r3, r3, #16
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	4b3c      	ldr	r3, [pc, #240]	; (8001598 <MX_GPIO_Init+0x114>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f003 0310 	and.w	r3, r3, #16
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b0:	4b39      	ldr	r3, [pc, #228]	; (8001598 <MX_GPIO_Init+0x114>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	4a38      	ldr	r2, [pc, #224]	; (8001598 <MX_GPIO_Init+0x114>)
 80014b6:	f043 0320 	orr.w	r3, r3, #32
 80014ba:	6193      	str	r3, [r2, #24]
 80014bc:	4b36      	ldr	r3, [pc, #216]	; (8001598 <MX_GPIO_Init+0x114>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	f003 0320 	and.w	r3, r3, #32
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c8:	4b33      	ldr	r3, [pc, #204]	; (8001598 <MX_GPIO_Init+0x114>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	4a32      	ldr	r2, [pc, #200]	; (8001598 <MX_GPIO_Init+0x114>)
 80014ce:	f043 0304 	orr.w	r3, r3, #4
 80014d2:	6193      	str	r3, [r2, #24]
 80014d4:	4b30      	ldr	r3, [pc, #192]	; (8001598 <MX_GPIO_Init+0x114>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e0:	4b2d      	ldr	r3, [pc, #180]	; (8001598 <MX_GPIO_Init+0x114>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a2c      	ldr	r2, [pc, #176]	; (8001598 <MX_GPIO_Init+0x114>)
 80014e6:	f043 0308 	orr.w	r3, r3, #8
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <MX_GPIO_Init+0x114>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_GPIO_Port, LD_Pin, GPIO_PIN_SET);
 80014f8:	2201      	movs	r2, #1
 80014fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014fe:	4827      	ldr	r0, [pc, #156]	; (800159c <MX_GPIO_Init+0x118>)
 8001500:	f002 fc0d 	bl	8003d1e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSOR1_Pin|SENSOR2_Pin|SENSOR3_Pin|SENSOR4_Pin
 8001504:	2200      	movs	r2, #0
 8001506:	21ff      	movs	r1, #255	; 0xff
 8001508:	4825      	ldr	r0, [pc, #148]	; (80015a0 <MX_GPIO_Init+0x11c>)
 800150a:	f002 fc08 	bl	8003d1e <HAL_GPIO_WritePin>
                          |SENSOR5_Pin|SENSOR6_Pin|SENSOR7_Pin|SENSOR8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDON_Pin|BIN1L_Pin|BIN1R_Pin|AIN2L_Pin
 800150e:	2200      	movs	r2, #0
 8001510:	f24c 0171 	movw	r1, #49265	; 0xc071
 8001514:	4823      	ldr	r0, [pc, #140]	; (80015a4 <MX_GPIO_Init+0x120>)
 8001516:	f002 fc02 	bl	8003d1e <HAL_GPIO_WritePin>
                          |AIN1R_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_Pin;
 800151a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800151e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001520:	2301      	movs	r3, #1
 8001522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2302      	movs	r3, #2
 800152a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD_GPIO_Port, &GPIO_InitStruct);
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	4619      	mov	r1, r3
 8001532:	481a      	ldr	r0, [pc, #104]	; (800159c <MX_GPIO_Init+0x118>)
 8001534:	f002 fa58 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR1_Pin|SENSOR2_Pin|SENSOR3_Pin|SENSOR4_Pin
 8001538:	23ff      	movs	r3, #255	; 0xff
 800153a:	613b      	str	r3, [r7, #16]
                          |SENSOR5_Pin|SENSOR6_Pin|SENSOR7_Pin|SENSOR8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153c:	2301      	movs	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001544:	2303      	movs	r3, #3
 8001546:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	4619      	mov	r1, r3
 800154e:	4814      	ldr	r0, [pc, #80]	; (80015a0 <MX_GPIO_Init+0x11c>)
 8001550:	f002 fa4a 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LEDON_Pin|BIN1L_Pin|BIN1R_Pin|AIN2L_Pin
 8001554:	f24c 0331 	movw	r3, #49201	; 0xc031
 8001558:	613b      	str	r3, [r7, #16]
                          |AIN1R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001562:	2303      	movs	r3, #3
 8001564:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001566:	f107 0310 	add.w	r3, r7, #16
 800156a:	4619      	mov	r1, r3
 800156c:	480d      	ldr	r0, [pc, #52]	; (80015a4 <MX_GPIO_Init+0x120>)
 800156e:	f002 fa3b 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001572:	2340      	movs	r3, #64	; 0x40
 8001574:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001576:	2301      	movs	r3, #1
 8001578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800157e:	2301      	movs	r3, #1
 8001580:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001582:	f107 0310 	add.w	r3, r7, #16
 8001586:	4619      	mov	r1, r3
 8001588:	4806      	ldr	r0, [pc, #24]	; (80015a4 <MX_GPIO_Init+0x120>)
 800158a:	f002 fa2d 	bl	80039e8 <HAL_GPIO_Init>

}
 800158e:	bf00      	nop
 8001590:	3720      	adds	r7, #32
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40021000 	.word	0x40021000
 800159c:	40011000 	.word	0x40011000
 80015a0:	40010800 	.word	0x40010800
 80015a4:	40010c00 	.word	0x40010c00

080015a8 <Battery_ADC_measurement>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Battery_ADC_measurement(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	/*Start ADC*/
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80015ac:	2201      	movs	r2, #1
 80015ae:	2102      	movs	r1, #2
 80015b0:	4827      	ldr	r0, [pc, #156]	; (8001650 <Battery_ADC_measurement+0xa8>)
 80015b2:	f002 fbb4 	bl	8003d1e <HAL_GPIO_WritePin>
	/*Get ADC value*/
	HAL_ADC_Start(&hadc1);
 80015b6:	4827      	ldr	r0, [pc, #156]	; (8001654 <Battery_ADC_measurement+0xac>)
 80015b8:	f001 fd02 	bl	8002fc0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295
 80015c0:	4824      	ldr	r0, [pc, #144]	; (8001654 <Battery_ADC_measurement+0xac>)
 80015c2:	f001 fdab 	bl	800311c <HAL_ADC_PollForConversion>
	raw_battery = HAL_ADC_GetValue(&hadc1);
 80015c6:	4823      	ldr	r0, [pc, #140]	; (8001654 <Battery_ADC_measurement+0xac>)
 80015c8:	f001 feae 	bl	8003328 <HAL_ADC_GetValue>
 80015cc:	4603      	mov	r3, r0
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	4b21      	ldr	r3, [pc, #132]	; (8001658 <Battery_ADC_measurement+0xb0>)
 80015d2:	801a      	strh	r2, [r3, #0]
	/*Stop ADC*/
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2102      	movs	r1, #2
 80015d8:	481d      	ldr	r0, [pc, #116]	; (8001650 <Battery_ADC_measurement+0xa8>)
 80015da:	f002 fba0 	bl	8003d1e <HAL_GPIO_WritePin>
	//SN_UART_Send(&huart3,"Battery_raw = %hu \r\n ",raw_battery);

	/*Percentages from raw 12bit measurement*/
	if(raw_battery != 0)
 80015de:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <Battery_ADC_measurement+0xb0>)
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d01a      	beq.n	800161c <Battery_ADC_measurement+0x74>
	{
		if(raw_battery > max_battery)
 80015e6:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <Battery_ADC_measurement+0xb0>)
 80015e8:	881a      	ldrh	r2, [r3, #0]
 80015ea:	4b1c      	ldr	r3, [pc, #112]	; (800165c <Battery_ADC_measurement+0xb4>)
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d903      	bls.n	80015fa <Battery_ADC_measurement+0x52>
		{
			raw_battery = max_battery;
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <Battery_ADC_measurement+0xb4>)
 80015f4:	881a      	ldrh	r2, [r3, #0]
 80015f6:	4b18      	ldr	r3, [pc, #96]	; (8001658 <Battery_ADC_measurement+0xb0>)
 80015f8:	801a      	strh	r2, [r3, #0]
		}
		battery_procentage_raw = (raw_battery * 100) / max_battery;
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <Battery_ADC_measurement+0xb0>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	2364      	movs	r3, #100	; 0x64
 8001602:	fb02 f303 	mul.w	r3, r2, r3
 8001606:	4a15      	ldr	r2, [pc, #84]	; (800165c <Battery_ADC_measurement+0xb4>)
 8001608:	8812      	ldrh	r2, [r2, #0]
 800160a:	fb93 f3f2 	sdiv	r3, r3, r2
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fb64 	bl	8000cdc <__aeabi_i2f>
 8001614:	4603      	mov	r3, r0
 8001616:	4a12      	ldr	r2, [pc, #72]	; (8001660 <Battery_ADC_measurement+0xb8>)
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e003      	b.n	8001624 <Battery_ADC_measurement+0x7c>
	}
	else
	{
		battery_procentage_raw = 0;
 800161c:	4b10      	ldr	r3, [pc, #64]	; (8001660 <Battery_ADC_measurement+0xb8>)
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
	}
	/*Motor speed*/
	speedlevel = ((100 - battery_procentage_raw) + 100) / 100;
 8001624:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <Battery_ADC_measurement+0xb8>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	480e      	ldr	r0, [pc, #56]	; (8001664 <Battery_ADC_measurement+0xbc>)
 800162c:	f7ff faa0 	bl	8000b70 <__aeabi_fsub>
 8001630:	4603      	mov	r3, r0
 8001632:	490c      	ldr	r1, [pc, #48]	; (8001664 <Battery_ADC_measurement+0xbc>)
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fa9d 	bl	8000b74 <__addsf3>
 800163a:	4603      	mov	r3, r0
 800163c:	4909      	ldr	r1, [pc, #36]	; (8001664 <Battery_ADC_measurement+0xbc>)
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fc54 	bl	8000eec <__aeabi_fdiv>
 8001644:	4603      	mov	r3, r0
 8001646:	461a      	mov	r2, r3
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <Battery_ADC_measurement+0xc0>)
 800164a:	601a      	str	r2, [r3, #0]
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40010c00 	.word	0x40010c00
 8001654:	20000230 	.word	0x20000230
 8001658:	200002d4 	.word	0x200002d4
 800165c:	20000030 	.word	0x20000030
 8001660:	200002d8 	.word	0x200002d8
 8001664:	42c80000 	.word	0x42c80000
 8001668:	20000008 	.word	0x20000008

0800166c <delay_us>:
void delay_us (uint16_t us)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <delay_us+0x2c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2200      	movs	r2, #0
 800167c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 800167e:	bf00      	nop
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <delay_us+0x2c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	429a      	cmp	r2, r3
 800168a:	d3f9      	bcc.n	8001680 <delay_us+0x14>
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	200002e0 	.word	0x200002e0

0800169c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0308 	add.w	r3, r7, #8
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80016b6:	887b      	ldrh	r3, [r7, #2]
 80016b8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ba:	2301      	movs	r3, #1
 80016bc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2302      	movs	r3, #2
 80016c0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	4619      	mov	r1, r3
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f002 f98d 	bl	80039e8 <HAL_GPIO_Init>
}
 80016ce:	bf00      	nop
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b086      	sub	sp, #24
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	460b      	mov	r3, r1
 80016e0:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e2:	f107 0308 	add.w	r3, r7, #8
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80016f0:	887b      	ldrh	r3, [r7, #2]
 80016f2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016f8:	2301      	movs	r3, #1
 80016fa:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80016fc:	f107 0308 	add.w	r3, r7, #8
 8001700:	4619      	mov	r1, r3
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f002 f970 	bl	80039e8 <HAL_GPIO_Init>
}
 8001708:	bf00      	nop
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <motor_control>:


void motor_control (double pos_right, double pos_left)
{
 8001710:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001714:	b084      	sub	sp, #16
 8001716:	af00      	add	r7, sp, #0
 8001718:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800171c:	e9c7 2300 	strd	r2, r3, [r7]
	if (pos_left < 0 )
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	e9d7 0100 	ldrd	r0, r1, [r7]
 800172c:	f7ff f946 	bl	80009bc <__aeabi_dcmplt>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d02f      	beq.n	8001796 <motor_control+0x86>
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_2, (int)((ARR*pos_left*-1)*speedlevel));
 8001736:	4b64      	ldr	r3, [pc, #400]	; (80018c8 <motor_control+0x1b8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe fe62 	bl	8000404 <__aeabi_i2d>
 8001740:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001744:	f7fe fec8 	bl	80004d8 <__aeabi_dmul>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4690      	mov	r8, r2
 800174e:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001752:	4b5e      	ldr	r3, [pc, #376]	; (80018cc <motor_control+0x1bc>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe fe66 	bl	8000428 <__aeabi_f2d>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4640      	mov	r0, r8
 8001762:	4649      	mov	r1, r9
 8001764:	f7fe feb8 	bl	80004d8 <__aeabi_dmul>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4610      	mov	r0, r2
 800176e:	4619      	mov	r1, r3
 8001770:	f7ff f962 	bl	8000a38 <__aeabi_d2iz>
 8001774:	4602      	mov	r2, r0
 8001776:	4b56      	ldr	r3, [pc, #344]	; (80018d0 <motor_control+0x1c0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800177c:	2201      	movs	r2, #1
 800177e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001782:	4854      	ldr	r0, [pc, #336]	; (80018d4 <motor_control+0x1c4>)
 8001784:	f002 facb 	bl	8003d1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001788:	2200      	movs	r2, #0
 800178a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800178e:	4851      	ldr	r0, [pc, #324]	; (80018d4 <motor_control+0x1c4>)
 8001790:	f002 fac5 	bl	8003d1e <HAL_GPIO_WritePin>
 8001794:	e02d      	b.n	80017f2 <motor_control+0xe2>
	}
	else
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_2, (int)((ARR*pos_left)*speedlevel));
 8001796:	4b4c      	ldr	r3, [pc, #304]	; (80018c8 <motor_control+0x1b8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe fe32 	bl	8000404 <__aeabi_i2d>
 80017a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017a4:	f7fe fe98 	bl	80004d8 <__aeabi_dmul>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4690      	mov	r8, r2
 80017ae:	4699      	mov	r9, r3
 80017b0:	4b46      	ldr	r3, [pc, #280]	; (80018cc <motor_control+0x1bc>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe fe37 	bl	8000428 <__aeabi_f2d>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4640      	mov	r0, r8
 80017c0:	4649      	mov	r1, r9
 80017c2:	f7fe fe89 	bl	80004d8 <__aeabi_dmul>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4610      	mov	r0, r2
 80017cc:	4619      	mov	r1, r3
 80017ce:	f7ff f933 	bl	8000a38 <__aeabi_d2iz>
 80017d2:	4602      	mov	r2, r0
 80017d4:	4b3e      	ldr	r3, [pc, #248]	; (80018d0 <motor_control+0x1c0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80017da:	2200      	movs	r2, #0
 80017dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017e0:	483c      	ldr	r0, [pc, #240]	; (80018d4 <motor_control+0x1c4>)
 80017e2:	f002 fa9c 	bl	8003d1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80017e6:	2201      	movs	r2, #1
 80017e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017ec:	4839      	ldr	r0, [pc, #228]	; (80018d4 <motor_control+0x1c4>)
 80017ee:	f002 fa96 	bl	8003d1e <HAL_GPIO_WritePin>
	}
	if (pos_right < 0 )
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	f04f 0300 	mov.w	r3, #0
 80017fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017fe:	f7ff f8dd 	bl	80009bc <__aeabi_dcmplt>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d02d      	beq.n	8001864 <motor_control+0x154>
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_4, (int)((ARR*pos_right*-1)*speedlevel));
 8001808:	4b2f      	ldr	r3, [pc, #188]	; (80018c8 <motor_control+0x1b8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe fdf9 	bl	8000404 <__aeabi_i2d>
 8001812:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001816:	f7fe fe5f 	bl	80004d8 <__aeabi_dmul>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4614      	mov	r4, r2
 8001820:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001824:	4b29      	ldr	r3, [pc, #164]	; (80018cc <motor_control+0x1bc>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fdfd 	bl	8000428 <__aeabi_f2d>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4620      	mov	r0, r4
 8001834:	4629      	mov	r1, r5
 8001836:	f7fe fe4f 	bl	80004d8 <__aeabi_dmul>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	f7ff f8f9 	bl	8000a38 <__aeabi_d2iz>
 8001846:	4602      	mov	r2, r0
 8001848:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <motor_control+0x1c0>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800184e:	2201      	movs	r2, #1
 8001850:	2120      	movs	r1, #32
 8001852:	4820      	ldr	r0, [pc, #128]	; (80018d4 <motor_control+0x1c4>)
 8001854:	f002 fa63 	bl	8003d1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001858:	2200      	movs	r2, #0
 800185a:	2110      	movs	r1, #16
 800185c:	481d      	ldr	r0, [pc, #116]	; (80018d4 <motor_control+0x1c4>)
 800185e:	f002 fa5e 	bl	8003d1e <HAL_GPIO_WritePin>
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_4, (int)((ARR*pos_right)*speedlevel));
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
	}
}
 8001862:	e02b      	b.n	80018bc <motor_control+0x1ac>
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_4, (int)((ARR*pos_right)*speedlevel));
 8001864:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <motor_control+0x1b8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fdcb 	bl	8000404 <__aeabi_i2d>
 800186e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001872:	f7fe fe31 	bl	80004d8 <__aeabi_dmul>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4614      	mov	r4, r2
 800187c:	461d      	mov	r5, r3
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <motor_control+0x1bc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fdd0 	bl	8000428 <__aeabi_f2d>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4620      	mov	r0, r4
 800188e:	4629      	mov	r1, r5
 8001890:	f7fe fe22 	bl	80004d8 <__aeabi_dmul>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	f7ff f8cc 	bl	8000a38 <__aeabi_d2iz>
 80018a0:	4602      	mov	r2, r0
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <motor_control+0x1c0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80018a8:	2200      	movs	r2, #0
 80018aa:	2120      	movs	r1, #32
 80018ac:	4809      	ldr	r0, [pc, #36]	; (80018d4 <motor_control+0x1c4>)
 80018ae:	f002 fa36 	bl	8003d1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80018b2:	2201      	movs	r2, #1
 80018b4:	2110      	movs	r1, #16
 80018b6:	4807      	ldr	r0, [pc, #28]	; (80018d4 <motor_control+0x1c4>)
 80018b8:	f002 fa31 	bl	8003d1e <HAL_GPIO_WritePin>
}
 80018bc:	bf00      	nop
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018c6:	bf00      	nop
 80018c8:	2000001c 	.word	0x2000001c
 80018cc:	20000008 	.word	0x20000008
 80018d0:	20000370 	.word	0x20000370
 80018d4:	40010c00 	.word	0x40010c00

080018d8 <sharp_turn>:


void sharp_turn () {
 80018d8:	b5b0      	push	{r4, r5, r7, lr}
 80018da:	af00      	add	r7, sp, #0

	if (last_idle < 25)
 80018dc:	4b2c      	ldr	r3, [pc, #176]	; (8001990 <sharp_turn+0xb8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b18      	cmp	r3, #24
 80018e2:	dc29      	bgt.n	8001938 <sharp_turn+0x60>
	{
		if (last_end == 1)
 80018e4:	4b2b      	ldr	r3, [pc, #172]	; (8001994 <sharp_turn+0xbc>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d112      	bne.n	8001912 <sharp_turn+0x3a>
			motor_control(Sharp_bend_speed_right, Sharp_bend_speed_left);
 80018ec:	4b2a      	ldr	r3, [pc, #168]	; (8001998 <sharp_turn+0xc0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fd87 	bl	8000404 <__aeabi_i2d>
 80018f6:	4604      	mov	r4, r0
 80018f8:	460d      	mov	r5, r1
 80018fa:	4b28      	ldr	r3, [pc, #160]	; (800199c <sharp_turn+0xc4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fd80 	bl	8000404 <__aeabi_i2d>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4620      	mov	r0, r4
 800190a:	4629      	mov	r1, r5
 800190c:	f7ff ff00 	bl	8001710 <motor_control>
		if (last_end == 1)
			motor_control(Bend_speed_right, Bend_speed_left);
		else
			motor_control(Bend_speed_left, Bend_speed_right);
	}
}
 8001910:	e03b      	b.n	800198a <sharp_turn+0xb2>
			motor_control(Sharp_bend_speed_left, Sharp_bend_speed_right);
 8001912:	4b22      	ldr	r3, [pc, #136]	; (800199c <sharp_turn+0xc4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fd74 	bl	8000404 <__aeabi_i2d>
 800191c:	4604      	mov	r4, r0
 800191e:	460d      	mov	r5, r1
 8001920:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <sharp_turn+0xc0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fd6d 	bl	8000404 <__aeabi_i2d>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4620      	mov	r0, r4
 8001930:	4629      	mov	r1, r5
 8001932:	f7ff feed 	bl	8001710 <motor_control>
}
 8001936:	e028      	b.n	800198a <sharp_turn+0xb2>
		if (last_end == 1)
 8001938:	4b16      	ldr	r3, [pc, #88]	; (8001994 <sharp_turn+0xbc>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d112      	bne.n	8001966 <sharp_turn+0x8e>
			motor_control(Bend_speed_right, Bend_speed_left);
 8001940:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <sharp_turn+0xc8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fd5d 	bl	8000404 <__aeabi_i2d>
 800194a:	4604      	mov	r4, r0
 800194c:	460d      	mov	r5, r1
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <sharp_turn+0xcc>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fd56 	bl	8000404 <__aeabi_i2d>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4620      	mov	r0, r4
 800195e:	4629      	mov	r1, r5
 8001960:	f7ff fed6 	bl	8001710 <motor_control>
}
 8001964:	e011      	b.n	800198a <sharp_turn+0xb2>
			motor_control(Bend_speed_left, Bend_speed_right);
 8001966:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <sharp_turn+0xcc>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fd4a 	bl	8000404 <__aeabi_i2d>
 8001970:	4604      	mov	r4, r0
 8001972:	460d      	mov	r5, r1
 8001974:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <sharp_turn+0xc8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f7fe fd43 	bl	8000404 <__aeabi_i2d>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4620      	mov	r0, r4
 8001984:	4629      	mov	r1, r5
 8001986:	f7ff fec3 	bl	8001710 <motor_control>
}
 800198a:	bf00      	nop
 800198c:	bdb0      	pop	{r4, r5, r7, pc}
 800198e:	bf00      	nop
 8001990:	200002b0 	.word	0x200002b0
 8001994:	200002ac 	.word	0x200002ac
 8001998:	20000020 	.word	0x20000020
 800199c:	20000024 	.word	0x20000024
 80019a0:	20000028 	.word	0x20000028
 80019a4:	2000002c 	.word	0x2000002c

080019a8 <QTR8_read>:
int QTR8_read ()
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDON_GPIO_Port, LEDON_Pin, 1);
 80019ae:	2201      	movs	r2, #1
 80019b0:	2101      	movs	r1, #1
 80019b2:	48a2      	ldr	r0, [pc, #648]	; (8001c3c <QTR8_read+0x294>)
 80019b4:	f002 f9b3 	bl	8003d1e <HAL_GPIO_WritePin>

	Set_Pin_Output(SENSOR1_GPIO_Port, SENSOR1_Pin);
 80019b8:	2101      	movs	r1, #1
 80019ba:	48a1      	ldr	r0, [pc, #644]	; (8001c40 <QTR8_read+0x298>)
 80019bc:	f7ff fe6e 	bl	800169c <Set_Pin_Output>
	Set_Pin_Output(SENSOR2_GPIO_Port, SENSOR2_Pin);
 80019c0:	2102      	movs	r1, #2
 80019c2:	489f      	ldr	r0, [pc, #636]	; (8001c40 <QTR8_read+0x298>)
 80019c4:	f7ff fe6a 	bl	800169c <Set_Pin_Output>
	Set_Pin_Output(SENSOR3_GPIO_Port, SENSOR3_Pin);
 80019c8:	2104      	movs	r1, #4
 80019ca:	489d      	ldr	r0, [pc, #628]	; (8001c40 <QTR8_read+0x298>)
 80019cc:	f7ff fe66 	bl	800169c <Set_Pin_Output>
	Set_Pin_Output(SENSOR4_GPIO_Port, SENSOR4_Pin);
 80019d0:	2108      	movs	r1, #8
 80019d2:	489b      	ldr	r0, [pc, #620]	; (8001c40 <QTR8_read+0x298>)
 80019d4:	f7ff fe62 	bl	800169c <Set_Pin_Output>
	Set_Pin_Output(SENSOR5_GPIO_Port, SENSOR5_Pin);
 80019d8:	2110      	movs	r1, #16
 80019da:	4899      	ldr	r0, [pc, #612]	; (8001c40 <QTR8_read+0x298>)
 80019dc:	f7ff fe5e 	bl	800169c <Set_Pin_Output>
	Set_Pin_Output(SENSOR6_GPIO_Port, SENSOR6_Pin);
 80019e0:	2120      	movs	r1, #32
 80019e2:	4897      	ldr	r0, [pc, #604]	; (8001c40 <QTR8_read+0x298>)
 80019e4:	f7ff fe5a 	bl	800169c <Set_Pin_Output>
	Set_Pin_Output(SENSOR7_GPIO_Port, SENSOR7_Pin);
 80019e8:	2140      	movs	r1, #64	; 0x40
 80019ea:	4895      	ldr	r0, [pc, #596]	; (8001c40 <QTR8_read+0x298>)
 80019ec:	f7ff fe56 	bl	800169c <Set_Pin_Output>
	Set_Pin_Output(SENSOR8_GPIO_Port, SENSOR8_Pin);
 80019f0:	2180      	movs	r1, #128	; 0x80
 80019f2:	4893      	ldr	r0, [pc, #588]	; (8001c40 <QTR8_read+0x298>)
 80019f4:	f7ff fe52 	bl	800169c <Set_Pin_Output>

	HAL_GPIO_WritePin (SENSOR1_GPIO_Port, SENSOR1_Pin, 1);
 80019f8:	2201      	movs	r2, #1
 80019fa:	2101      	movs	r1, #1
 80019fc:	4890      	ldr	r0, [pc, #576]	; (8001c40 <QTR8_read+0x298>)
 80019fe:	f002 f98e 	bl	8003d1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR2_GPIO_Port, SENSOR2_Pin, 1);
 8001a02:	2201      	movs	r2, #1
 8001a04:	2102      	movs	r1, #2
 8001a06:	488e      	ldr	r0, [pc, #568]	; (8001c40 <QTR8_read+0x298>)
 8001a08:	f002 f989 	bl	8003d1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR3_GPIO_Port, SENSOR3_Pin, 1);
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	2104      	movs	r1, #4
 8001a10:	488b      	ldr	r0, [pc, #556]	; (8001c40 <QTR8_read+0x298>)
 8001a12:	f002 f984 	bl	8003d1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR4_GPIO_Port, SENSOR4_Pin, 1);
 8001a16:	2201      	movs	r2, #1
 8001a18:	2108      	movs	r1, #8
 8001a1a:	4889      	ldr	r0, [pc, #548]	; (8001c40 <QTR8_read+0x298>)
 8001a1c:	f002 f97f 	bl	8003d1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR5_GPIO_Port, SENSOR5_Pin, 1);
 8001a20:	2201      	movs	r2, #1
 8001a22:	2110      	movs	r1, #16
 8001a24:	4886      	ldr	r0, [pc, #536]	; (8001c40 <QTR8_read+0x298>)
 8001a26:	f002 f97a 	bl	8003d1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR6_GPIO_Port, SENSOR6_Pin, 1);
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	2120      	movs	r1, #32
 8001a2e:	4884      	ldr	r0, [pc, #528]	; (8001c40 <QTR8_read+0x298>)
 8001a30:	f002 f975 	bl	8003d1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR7_GPIO_Port, SENSOR7_Pin, 1);
 8001a34:	2201      	movs	r2, #1
 8001a36:	2140      	movs	r1, #64	; 0x40
 8001a38:	4881      	ldr	r0, [pc, #516]	; (8001c40 <QTR8_read+0x298>)
 8001a3a:	f002 f970 	bl	8003d1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR8_GPIO_Port, SENSOR8_Pin, 1);
 8001a3e:	2201      	movs	r2, #1
 8001a40:	2180      	movs	r1, #128	; 0x80
 8001a42:	487f      	ldr	r0, [pc, #508]	; (8001c40 <QTR8_read+0x298>)
 8001a44:	f002 f96b 	bl	8003d1e <HAL_GPIO_WritePin>

	delay_us(10);
 8001a48:	200a      	movs	r0, #10
 8001a4a:	f7ff fe0f 	bl	800166c <delay_us>

	Set_Pin_Input(SENSOR1_GPIO_Port, SENSOR1_Pin);
 8001a4e:	2101      	movs	r1, #1
 8001a50:	487b      	ldr	r0, [pc, #492]	; (8001c40 <QTR8_read+0x298>)
 8001a52:	f7ff fe40 	bl	80016d6 <Set_Pin_Input>
	Set_Pin_Input(SENSOR2_GPIO_Port, SENSOR2_Pin);
 8001a56:	2102      	movs	r1, #2
 8001a58:	4879      	ldr	r0, [pc, #484]	; (8001c40 <QTR8_read+0x298>)
 8001a5a:	f7ff fe3c 	bl	80016d6 <Set_Pin_Input>
	Set_Pin_Input(SENSOR3_GPIO_Port, SENSOR3_Pin);
 8001a5e:	2104      	movs	r1, #4
 8001a60:	4877      	ldr	r0, [pc, #476]	; (8001c40 <QTR8_read+0x298>)
 8001a62:	f7ff fe38 	bl	80016d6 <Set_Pin_Input>
	Set_Pin_Input(SENSOR4_GPIO_Port, SENSOR4_Pin);
 8001a66:	2108      	movs	r1, #8
 8001a68:	4875      	ldr	r0, [pc, #468]	; (8001c40 <QTR8_read+0x298>)
 8001a6a:	f7ff fe34 	bl	80016d6 <Set_Pin_Input>
	Set_Pin_Input(SENSOR5_GPIO_Port, SENSOR5_Pin);
 8001a6e:	2110      	movs	r1, #16
 8001a70:	4873      	ldr	r0, [pc, #460]	; (8001c40 <QTR8_read+0x298>)
 8001a72:	f7ff fe30 	bl	80016d6 <Set_Pin_Input>
	Set_Pin_Input(SENSOR6_GPIO_Port, SENSOR6_Pin);
 8001a76:	2120      	movs	r1, #32
 8001a78:	4871      	ldr	r0, [pc, #452]	; (8001c40 <QTR8_read+0x298>)
 8001a7a:	f7ff fe2c 	bl	80016d6 <Set_Pin_Input>
	Set_Pin_Input(SENSOR7_GPIO_Port, SENSOR7_Pin);
 8001a7e:	2140      	movs	r1, #64	; 0x40
 8001a80:	486f      	ldr	r0, [pc, #444]	; (8001c40 <QTR8_read+0x298>)
 8001a82:	f7ff fe28 	bl	80016d6 <Set_Pin_Input>
	Set_Pin_Input(SENSOR8_GPIO_Port, SENSOR8_Pin);
 8001a86:	2180      	movs	r1, #128	; 0x80
 8001a88:	486d      	ldr	r0, [pc, #436]	; (8001c40 <QTR8_read+0x298>)
 8001a8a:	f7ff fe24 	bl	80016d6 <Set_Pin_Input>

	// Threshold
	 delay_us(4500);
 8001a8e:	f241 1094 	movw	r0, #4500	; 0x1194
 8001a92:	f7ff fdeb 	bl	800166c <delay_us>

	sensor_read = 0x00000000;
 8001a96:	4b6b      	ldr	r3, [pc, #428]	; (8001c44 <QTR8_read+0x29c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
	int pos = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	607b      	str	r3, [r7, #4]
  int active = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	603b      	str	r3, [r7, #0]

	if (HAL_GPIO_ReadPin(SENSOR1_GPIO_Port, SENSOR1_Pin)) {
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	4866      	ldr	r0, [pc, #408]	; (8001c40 <QTR8_read+0x298>)
 8001aa8:	f002 f922 	bl	8003cf0 <HAL_GPIO_ReadPin>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00f      	beq.n	8001ad2 <QTR8_read+0x12a>
		sensor_read |= 0x00000001;
 8001ab2:	4b64      	ldr	r3, [pc, #400]	; (8001c44 <QTR8_read+0x29c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	4a62      	ldr	r2, [pc, #392]	; (8001c44 <QTR8_read+0x29c>)
 8001abc:	6013      	str	r3, [r2, #0]
		pos += 1000;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001ac4:	607b      	str	r3, [r7, #4]
    active++;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	603b      	str	r3, [r7, #0]
		last_end = 1;
 8001acc:	4b5e      	ldr	r3, [pc, #376]	; (8001c48 <QTR8_read+0x2a0>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(SENSOR2_GPIO_Port, SENSOR2_Pin)) {
 8001ad2:	2102      	movs	r1, #2
 8001ad4:	485a      	ldr	r0, [pc, #360]	; (8001c40 <QTR8_read+0x298>)
 8001ad6:	f002 f90b 	bl	8003cf0 <HAL_GPIO_ReadPin>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00c      	beq.n	8001afa <QTR8_read+0x152>
		sensor_read |= 0x00000010;
 8001ae0:	4b58      	ldr	r3, [pc, #352]	; (8001c44 <QTR8_read+0x29c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f043 0310 	orr.w	r3, r3, #16
 8001ae8:	4a56      	ldr	r2, [pc, #344]	; (8001c44 <QTR8_read+0x29c>)
 8001aea:	6013      	str	r3, [r2, #0]
		pos += 2000;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001af2:	607b      	str	r3, [r7, #4]
    active++;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	3301      	adds	r3, #1
 8001af8:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR3_GPIO_Port, SENSOR3_Pin)) {
 8001afa:	2104      	movs	r1, #4
 8001afc:	4850      	ldr	r0, [pc, #320]	; (8001c40 <QTR8_read+0x298>)
 8001afe:	f002 f8f7 	bl	8003cf0 <HAL_GPIO_ReadPin>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00c      	beq.n	8001b22 <QTR8_read+0x17a>
		sensor_read |= 0x00000100;
 8001b08:	4b4e      	ldr	r3, [pc, #312]	; (8001c44 <QTR8_read+0x29c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b10:	4a4c      	ldr	r2, [pc, #304]	; (8001c44 <QTR8_read+0x29c>)
 8001b12:	6013      	str	r3, [r2, #0]
		pos += 3000;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8001b1a:	607b      	str	r3, [r7, #4]
    active++;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR4_GPIO_Port, SENSOR4_Pin)) {
 8001b22:	2108      	movs	r1, #8
 8001b24:	4846      	ldr	r0, [pc, #280]	; (8001c40 <QTR8_read+0x298>)
 8001b26:	f002 f8e3 	bl	8003cf0 <HAL_GPIO_ReadPin>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00c      	beq.n	8001b4a <QTR8_read+0x1a2>
		sensor_read |= 0x00001000;
 8001b30:	4b44      	ldr	r3, [pc, #272]	; (8001c44 <QTR8_read+0x29c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b38:	4a42      	ldr	r2, [pc, #264]	; (8001c44 <QTR8_read+0x29c>)
 8001b3a:	6013      	str	r3, [r2, #0]
		pos += 4000;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8001b42:	607b      	str	r3, [r7, #4]
    active++;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	3301      	adds	r3, #1
 8001b48:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR5_GPIO_Port, SENSOR5_Pin)) {
 8001b4a:	2110      	movs	r1, #16
 8001b4c:	483c      	ldr	r0, [pc, #240]	; (8001c40 <QTR8_read+0x298>)
 8001b4e:	f002 f8cf 	bl	8003cf0 <HAL_GPIO_ReadPin>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00d      	beq.n	8001b74 <QTR8_read+0x1cc>
		sensor_read |= 0x00010000;
 8001b58:	4b3a      	ldr	r3, [pc, #232]	; (8001c44 <QTR8_read+0x29c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b60:	4a38      	ldr	r2, [pc, #224]	; (8001c44 <QTR8_read+0x29c>)
 8001b62:	6013      	str	r3, [r2, #0]
		pos += 5000;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8001b6a:	3308      	adds	r3, #8
 8001b6c:	607b      	str	r3, [r7, #4]
    active++;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	3301      	adds	r3, #1
 8001b72:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR6_GPIO_Port, SENSOR6_Pin)) {
 8001b74:	2120      	movs	r1, #32
 8001b76:	4832      	ldr	r0, [pc, #200]	; (8001c40 <QTR8_read+0x298>)
 8001b78:	f002 f8ba 	bl	8003cf0 <HAL_GPIO_ReadPin>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00d      	beq.n	8001b9e <QTR8_read+0x1f6>
		sensor_read |= 0x00100000;
 8001b82:	4b30      	ldr	r3, [pc, #192]	; (8001c44 <QTR8_read+0x29c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b8a:	4a2e      	ldr	r2, [pc, #184]	; (8001c44 <QTR8_read+0x29c>)
 8001b8c:	6013      	str	r3, [r2, #0]
		pos += 6000;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8001b94:	3310      	adds	r3, #16
 8001b96:	607b      	str	r3, [r7, #4]
    active++;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR7_GPIO_Port, SENSOR7_Pin)) {
 8001b9e:	2140      	movs	r1, #64	; 0x40
 8001ba0:	4827      	ldr	r0, [pc, #156]	; (8001c40 <QTR8_read+0x298>)
 8001ba2:	f002 f8a5 	bl	8003cf0 <HAL_GPIO_ReadPin>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00d      	beq.n	8001bc8 <QTR8_read+0x220>
		sensor_read |= 0x01000000;
 8001bac:	4b25      	ldr	r3, [pc, #148]	; (8001c44 <QTR8_read+0x29c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bb4:	4a23      	ldr	r2, [pc, #140]	; (8001c44 <QTR8_read+0x29c>)
 8001bb6:	6013      	str	r3, [r2, #0]
		pos += 7000;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f503 53da 	add.w	r3, r3, #6976	; 0x1b40
 8001bbe:	3318      	adds	r3, #24
 8001bc0:	607b      	str	r3, [r7, #4]
    active++;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR8_GPIO_Port, SENSOR8_Pin)) {
 8001bc8:	2180      	movs	r1, #128	; 0x80
 8001bca:	481d      	ldr	r0, [pc, #116]	; (8001c40 <QTR8_read+0x298>)
 8001bcc:	f002 f890 	bl	8003cf0 <HAL_GPIO_ReadPin>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00f      	beq.n	8001bf6 <QTR8_read+0x24e>
		sensor_read |= 0x10000000;
 8001bd6:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <QTR8_read+0x29c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bde:	4a19      	ldr	r2, [pc, #100]	; (8001c44 <QTR8_read+0x29c>)
 8001be0:	6013      	str	r3, [r2, #0]
		pos += 8000;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8001be8:	607b      	str	r3, [r7, #4]
    active++;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	3301      	adds	r3, #1
 8001bee:	603b      	str	r3, [r7, #0]
		last_end = 0;
 8001bf0:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <QTR8_read+0x2a0>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
  }

  HAL_GPIO_WritePin(LEDON_GPIO_Port, LEDON_Pin, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	4810      	ldr	r0, [pc, #64]	; (8001c3c <QTR8_read+0x294>)
 8001bfc:	f002 f88f 	bl	8003d1e <HAL_GPIO_WritePin>

  actives = active;
 8001c00:	4a12      	ldr	r2, [pc, #72]	; (8001c4c <QTR8_read+0x2a4>)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	6013      	str	r3, [r2, #0]
	position = pos/active;
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c0e:	4a10      	ldr	r2, [pc, #64]	; (8001c50 <QTR8_read+0x2a8>)
 8001c10:	6013      	str	r3, [r2, #0]

	if (actives == 0)
 8001c12:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <QTR8_read+0x2a4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d105      	bne.n	8001c26 <QTR8_read+0x27e>
		last_idle++;
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <QTR8_read+0x2ac>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	4a0c      	ldr	r2, [pc, #48]	; (8001c54 <QTR8_read+0x2ac>)
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	e002      	b.n	8001c2c <QTR8_read+0x284>
	else
		last_idle = 0;
 8001c26:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <QTR8_read+0x2ac>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]

	return pos/active;
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40010c00 	.word	0x40010c00
 8001c40:	40010800 	.word	0x40010800
 8001c44:	20000260 	.word	0x20000260
 8001c48:	200002ac 	.word	0x200002ac
 8001c4c:	200002b4 	.word	0x200002b4
 8001c50:	20000264 	.word	0x20000264
 8001c54:	200002b0 	.word	0x200002b0

08001c58 <forward_brake>:


void forward_brake(int pos_right, int pos_left)
{
 8001c58:	b5b0      	push	{r4, r5, r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
	if (actives == 0)
 8001c62:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <forward_brake+0x3c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d102      	bne.n	8001c70 <forward_brake+0x18>
		sharp_turn();
 8001c6a:	f7ff fe35 	bl	80018d8 <sharp_turn>
	else
	  motor_control(pos_right, pos_left);
}
 8001c6e:	e00d      	b.n	8001c8c <forward_brake+0x34>
	  motor_control(pos_right, pos_left);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7fe fbc7 	bl	8000404 <__aeabi_i2d>
 8001c76:	4604      	mov	r4, r0
 8001c78:	460d      	mov	r5, r1
 8001c7a:	6838      	ldr	r0, [r7, #0]
 8001c7c:	f7fe fbc2 	bl	8000404 <__aeabi_i2d>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4620      	mov	r0, r4
 8001c86:	4629      	mov	r1, r5
 8001c88:	f7ff fd42 	bl	8001710 <motor_control>
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bdb0      	pop	{r4, r5, r7, pc}
 8001c94:	200002b4 	.word	0x200002b4

08001c98 <past_errors>:

void past_errors (int error)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  for (int i = 9; i > 0; i--)
 8001ca0:	2309      	movs	r3, #9
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	e00b      	b.n	8001cbe <past_errors+0x26>
      errors[i] = errors[i-1];
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <past_errors+0x3c>)
 8001cac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cb0:	4908      	ldr	r1, [pc, #32]	; (8001cd4 <past_errors+0x3c>)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int i = 9; i > 0; i--)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	dcf0      	bgt.n	8001ca6 <past_errors+0xe>
  errors[0] = error;
 8001cc4:	4a03      	ldr	r2, [pc, #12]	; (8001cd4 <past_errors+0x3c>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6013      	str	r3, [r2, #0]
}
 8001cca:	bf00      	nop
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr
 8001cd4:	20000284 	.word	0x20000284

08001cd8 <errors_sum>:

int errors_sum (int index, int abs)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  int sum = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < index; i++)
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	e01a      	b.n	8001d22 <errors_sum+0x4a>
  {
    if (abs == 1 && errors[i] < 0)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d10d      	bne.n	8001d0e <errors_sum+0x36>
 8001cf2:	4a11      	ldr	r2, [pc, #68]	; (8001d38 <errors_sum+0x60>)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	da07      	bge.n	8001d0e <errors_sum+0x36>
      sum += -errors[i];
 8001cfe:	4a0e      	ldr	r2, [pc, #56]	; (8001d38 <errors_sum+0x60>)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	e006      	b.n	8001d1c <errors_sum+0x44>
    else
      sum += errors[i];
 8001d0e:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <errors_sum+0x60>)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	4413      	add	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < index; i++)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	dbe0      	blt.n	8001cec <errors_sum+0x14>
  }
  return sum;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000284 	.word	0x20000284

08001d3c <PID_control>:

void PID_control() {
 8001d3c:	b590      	push	{r4, r7, lr}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af00      	add	r7, sp, #0
  uint16_t position = QTR8_read();
 8001d42:	f7ff fe31 	bl	80019a8 <QTR8_read>
 8001d46:	4603      	mov	r3, r0
 8001d48:	81fb      	strh	r3, [r7, #14]
  int error = 4500 - position;
 8001d4a:	89fb      	ldrh	r3, [r7, #14]
 8001d4c:	f5c3 538c 	rsb	r3, r3, #4480	; 0x1180
 8001d50:	3314      	adds	r3, #20
 8001d52:	60bb      	str	r3, [r7, #8]
  past_errors(error);
 8001d54:	68b8      	ldr	r0, [r7, #8]
 8001d56:	f7ff ff9f 	bl	8001c98 <past_errors>

  P = error;
 8001d5a:	4a55      	ldr	r2, [pc, #340]	; (8001eb0 <PID_control+0x174>)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	6013      	str	r3, [r2, #0]
  I = errors_sum(5, 0);
 8001d60:	2100      	movs	r1, #0
 8001d62:	2005      	movs	r0, #5
 8001d64:	f7ff ffb8 	bl	8001cd8 <errors_sum>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4a52      	ldr	r2, [pc, #328]	; (8001eb4 <PID_control+0x178>)
 8001d6c:	6013      	str	r3, [r2, #0]
  D = error - lastError;
 8001d6e:	4b52      	ldr	r3, [pc, #328]	; (8001eb8 <PID_control+0x17c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	4a51      	ldr	r2, [pc, #324]	; (8001ebc <PID_control+0x180>)
 8001d78:	6013      	str	r3, [r2, #0]
  R = errors_sum(5, 1);
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	2005      	movs	r0, #5
 8001d7e:	f7ff ffab 	bl	8001cd8 <errors_sum>
 8001d82:	4603      	mov	r3, r0
 8001d84:	4a4e      	ldr	r2, [pc, #312]	; (8001ec0 <PID_control+0x184>)
 8001d86:	6013      	str	r3, [r2, #0]
  lastError = error;
 8001d88:	4a4b      	ldr	r2, [pc, #300]	; (8001eb8 <PID_control+0x17c>)
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	6013      	str	r3, [r2, #0]

  int motorspeed = P*Kp + I*Ki + D*Kd;
 8001d8e:	4b48      	ldr	r3, [pc, #288]	; (8001eb0 <PID_control+0x174>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe ffa2 	bl	8000cdc <__aeabi_i2f>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	4b4a      	ldr	r3, [pc, #296]	; (8001ec4 <PID_control+0x188>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4610      	mov	r0, r2
 8001da2:	f7fe ffef 	bl	8000d84 <__aeabi_fmul>
 8001da6:	4603      	mov	r3, r0
 8001da8:	461c      	mov	r4, r3
 8001daa:	4b42      	ldr	r3, [pc, #264]	; (8001eb4 <PID_control+0x178>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe ff94 	bl	8000cdc <__aeabi_i2f>
 8001db4:	4602      	mov	r2, r0
 8001db6:	4b44      	ldr	r3, [pc, #272]	; (8001ec8 <PID_control+0x18c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	f7fe ffe1 	bl	8000d84 <__aeabi_fmul>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4620      	mov	r0, r4
 8001dc8:	f7fe fed4 	bl	8000b74 <__addsf3>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	461c      	mov	r4, r3
 8001dd0:	4b3a      	ldr	r3, [pc, #232]	; (8001ebc <PID_control+0x180>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe ff81 	bl	8000cdc <__aeabi_i2f>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	4b3b      	ldr	r3, [pc, #236]	; (8001ecc <PID_control+0x190>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4619      	mov	r1, r3
 8001de2:	4610      	mov	r0, r2
 8001de4:	f7fe ffce 	bl	8000d84 <__aeabi_fmul>
 8001de8:	4603      	mov	r3, r0
 8001dea:	4619      	mov	r1, r3
 8001dec:	4620      	mov	r0, r4
 8001dee:	f7fe fec1 	bl	8000b74 <__addsf3>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff f98b 	bl	8001110 <__aeabi_f2iz>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	607b      	str	r3, [r7, #4]

  int motorspeedl = basespeedl + motorspeed - R*Kr;
 8001dfe:	4b34      	ldr	r3, [pc, #208]	; (8001ed0 <PID_control+0x194>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4413      	add	r3, r2
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe ff68 	bl	8000cdc <__aeabi_i2f>
 8001e0c:	4604      	mov	r4, r0
 8001e0e:	4b2c      	ldr	r3, [pc, #176]	; (8001ec0 <PID_control+0x184>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe ff62 	bl	8000cdc <__aeabi_i2f>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	4b2e      	ldr	r3, [pc, #184]	; (8001ed4 <PID_control+0x198>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4610      	mov	r0, r2
 8001e22:	f7fe ffaf 	bl	8000d84 <__aeabi_fmul>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	f7fe fea0 	bl	8000b70 <__aeabi_fsub>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff f96c 	bl	8001110 <__aeabi_f2iz>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	617b      	str	r3, [r7, #20]
  int motorspeedr = basespeedr - motorspeed - R*Kr;
 8001e3c:	4b26      	ldr	r3, [pc, #152]	; (8001ed8 <PID_control+0x19c>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe ff49 	bl	8000cdc <__aeabi_i2f>
 8001e4a:	4604      	mov	r4, r0
 8001e4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <PID_control+0x184>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe ff43 	bl	8000cdc <__aeabi_i2f>
 8001e56:	4602      	mov	r2, r0
 8001e58:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <PID_control+0x198>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4610      	mov	r0, r2
 8001e60:	f7fe ff90 	bl	8000d84 <__aeabi_fmul>
 8001e64:	4603      	mov	r3, r0
 8001e66:	4619      	mov	r1, r3
 8001e68:	4620      	mov	r0, r4
 8001e6a:	f7fe fe81 	bl	8000b70 <__aeabi_fsub>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff f94d 	bl	8001110 <__aeabi_f2iz>
 8001e76:	4603      	mov	r3, r0
 8001e78:	613b      	str	r3, [r7, #16]

  if (motorspeedl > maxspeedl)
 8001e7a:	4b18      	ldr	r3, [pc, #96]	; (8001edc <PID_control+0x1a0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	dd02      	ble.n	8001e8a <PID_control+0x14e>
    motorspeedl = maxspeedl;
 8001e84:	4b15      	ldr	r3, [pc, #84]	; (8001edc <PID_control+0x1a0>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	617b      	str	r3, [r7, #20]
  if (motorspeedr > maxspeedr)
 8001e8a:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <PID_control+0x1a4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	dd02      	ble.n	8001e9a <PID_control+0x15e>
    motorspeedr = maxspeedr;
 8001e94:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <PID_control+0x1a4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	613b      	str	r3, [r7, #16]

  	Battery_ADC_measurement();
 8001e9a:	f7ff fb85 	bl	80015a8 <Battery_ADC_measurement>
	forward_brake(motorspeedr, motorspeedl);
 8001e9e:	6979      	ldr	r1, [r7, #20]
 8001ea0:	6938      	ldr	r0, [r7, #16]
 8001ea2:	f7ff fed9 	bl	8001c58 <forward_brake>
}
 8001ea6:	bf00      	nop
 8001ea8:	371c      	adds	r7, #28
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd90      	pop	{r4, r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000270 	.word	0x20000270
 8001eb4:	20000274 	.word	0x20000274
 8001eb8:	20000280 	.word	0x20000280
 8001ebc:	20000278 	.word	0x20000278
 8001ec0:	2000027c 	.word	0x2000027c
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	20000268 	.word	0x20000268
 8001ecc:	20000004 	.word	0x20000004
 8001ed0:	20000018 	.word	0x20000018
 8001ed4:	2000026c 	.word	0x2000026c
 8001ed8:	20000014 	.word	0x20000014
 8001edc:	20000010 	.word	0x20000010
 8001ee0:	2000000c 	.word	0x2000000c

08001ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ee8:	f000 ff0c 	bl	8002d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eec:	f000 f85a 	bl	8001fa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ef0:	f7ff fac8 	bl	8001484 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001ef4:	f000 fc4c 	bl	8002790 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001ef8:	f000 fc9a 	bl	8002830 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001efc:	f000 fce6 	bl	80028cc <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001f00:	f000 fdf6 	bl	8002af0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001f04:	f000 fe1e 	bl	8002b44 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001f08:	f7ff fa42 	bl	8001390 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
   HAL_UART_Receive_IT(&huart1,(uint8_t*)RxData,28); //Oczekiwanie na dane z HC-05 i włączenie timerów
 8001f0c:	221c      	movs	r2, #28
 8001f0e:	491e      	ldr	r1, [pc, #120]	; (8001f88 <main+0xa4>)
 8001f10:	481e      	ldr	r0, [pc, #120]	; (8001f8c <main+0xa8>)
 8001f12:	f003 fc40 	bl	8005796 <HAL_UART_Receive_IT>
   HAL_TIM_Base_Start(&htim1);
 8001f16:	481e      	ldr	r0, [pc, #120]	; (8001f90 <main+0xac>)
 8001f18:	f002 fce6 	bl	80048e8 <HAL_TIM_Base_Start>
   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	481d      	ldr	r0, [pc, #116]	; (8001f94 <main+0xb0>)
 8001f20:	f002 fddc 	bl	8004adc <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001f24:	2108      	movs	r1, #8
 8001f26:	481b      	ldr	r0, [pc, #108]	; (8001f94 <main+0xb0>)
 8001f28:	f002 fdd8 	bl	8004adc <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001f2c:	210c      	movs	r1, #12
 8001f2e:	4819      	ldr	r0, [pc, #100]	; (8001f94 <main+0xb0>)
 8001f30:	f002 fdd4 	bl	8004adc <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001f34:	2104      	movs	r1, #4
 8001f36:	4817      	ldr	r0, [pc, #92]	; (8001f94 <main+0xb0>)
 8001f38:	f002 fdd0 	bl	8004adc <HAL_TIM_PWM_Start>
   //__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_1, 100);
   __HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_2, 100);
 8001f3c:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <main+0xb0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2264      	movs	r2, #100	; 0x64
 8001f42:	639a      	str	r2, [r3, #56]	; 0x38
   __HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_1, 0);
 8001f44:	4b13      	ldr	r3, [pc, #76]	; (8001f94 <main+0xb0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	635a      	str	r2, [r3, #52]	; 0x34
   __HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_3, 100);
 8001f4c:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <main+0xb0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2264      	movs	r2, #100	; 0x64
 8001f52:	63da      	str	r2, [r3, #60]	; 0x3c
   __HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_4, 100);
 8001f54:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <main+0xb0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2264      	movs	r2, #100	; 0x64
 8001f5a:	641a      	str	r2, [r3, #64]	; 0x40
   HAL_Delay(2000);
 8001f5c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001f60:	f000 ff32 	bl	8002dc8 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  PID_control();
 8001f64:	f7ff feea 	bl	8001d3c <PID_control>
	  if(battery_procentage_raw < 75)
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <main+0xb4>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	490b      	ldr	r1, [pc, #44]	; (8001f9c <main+0xb8>)
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff f8a6 	bl	80010c0 <__aeabi_fcmplt>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d004      	beq.n	8001f84 <main+0xa0>
	  {
		  /*If battery is low stop robot*/
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2140      	movs	r1, #64	; 0x40
 8001f7e:	4808      	ldr	r0, [pc, #32]	; (8001fa0 <main+0xbc>)
 8001f80:	f001 fecd 	bl	8003d1e <HAL_GPIO_WritePin>
	  PID_control();
 8001f84:	e7ee      	b.n	8001f64 <main+0x80>
 8001f86:	bf00      	nop
 8001f88:	200002b8 	.word	0x200002b8
 8001f8c:	200003b8 	.word	0x200003b8
 8001f90:	200002e0 	.word	0x200002e0
 8001f94:	20000370 	.word	0x20000370
 8001f98:	200002d8 	.word	0x200002d8
 8001f9c:	42960000 	.word	0x42960000
 8001fa0:	40010c00 	.word	0x40010c00

08001fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b094      	sub	sp, #80	; 0x50
 8001fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001faa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fae:	2228      	movs	r2, #40	; 0x28
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f004 f9c6 	bl	8006344 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fc8:	1d3b      	adds	r3, r7, #4
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ff0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ff6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f001 fea8 	bl	8003d50 <HAL_RCC_OscConfig>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002006:	f000 fa93 	bl	8002530 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800200a:	230f      	movs	r3, #15
 800200c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800200e:	2302      	movs	r3, #2
 8002010:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800201a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800201c:	2300      	movs	r3, #0
 800201e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	2102      	movs	r1, #2
 8002026:	4618      	mov	r0, r3
 8002028:	f002 f914 	bl	8004254 <HAL_RCC_ClockConfig>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002032:	f000 fa7d 	bl	8002530 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002036:	2302      	movs	r3, #2
 8002038:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800203a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800203e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	4618      	mov	r0, r3
 8002044:	f002 fa94 	bl	8004570 <HAL_RCCEx_PeriphCLKConfig>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800204e:	f000 fa6f 	bl	8002530 <Error_Handler>
  }
}
 8002052:	bf00      	nop
 8002054:	3750      	adds	r7, #80	; 0x50
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800205c:	b5b0      	push	{r4, r5, r7, lr}
 800205e:	b090      	sub	sp, #64	; 0x40
 8002060:	af04      	add	r7, sp, #16
 8002062:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4aab      	ldr	r2, [pc, #684]	; (8002318 <HAL_UART_RxCpltCallback+0x2bc>)
 800206a:	4293      	cmp	r3, r2
 800206c:	f040 8235 	bne.w	80024da <HAL_UART_RxCpltCallback+0x47e>
	{
		if(RxData[0]==78) // Ascii value of 'N' is 78 (N for NO)              START I STOP
 8002070:	4baa      	ldr	r3, [pc, #680]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b4e      	cmp	r3, #78	; 0x4e
 8002076:	d115      	bne.n	80020a4 <HAL_UART_RxCpltCallback+0x48>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002078:	2200      	movs	r2, #0
 800207a:	2140      	movs	r1, #64	; 0x40
 800207c:	48a8      	ldr	r0, [pc, #672]	; (8002320 <HAL_UART_RxCpltCallback+0x2c4>)
 800207e:	f001 fe4e 	bl	8003d1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002082:	2200      	movs	r2, #0
 8002084:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002088:	48a6      	ldr	r0, [pc, #664]	; (8002324 <HAL_UART_RxCpltCallback+0x2c8>)
 800208a:	f001 fe48 	bl	8003d1e <HAL_GPIO_WritePin>
			SN_UART_Send(&huart1, "%.1f" ,battery_procentage_raw);
 800208e:	4ba6      	ldr	r3, [pc, #664]	; (8002328 <HAL_UART_RxCpltCallback+0x2cc>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe f9c8 	bl	8000428 <__aeabi_f2d>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	49a3      	ldr	r1, [pc, #652]	; (800232c <HAL_UART_RxCpltCallback+0x2d0>)
 800209e:	48a4      	ldr	r0, [pc, #656]	; (8002330 <HAL_UART_RxCpltCallback+0x2d4>)
 80020a0:	f7ff f894 	bl	80011cc <SN_UART_Send>
		}
		if (RxData[0]==89) // Ascii value of 'Y' is 89 (Y for YES)
 80020a4:	4b9d      	ldr	r3, [pc, #628]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b59      	cmp	r3, #89	; 0x59
 80020aa:	d10c      	bne.n	80020c6 <HAL_UART_RxCpltCallback+0x6a>
		{
			Battery_ADC_measurement();
 80020ac:	f7ff fa7c 	bl	80015a8 <Battery_ADC_measurement>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80020b0:	2201      	movs	r2, #1
 80020b2:	2140      	movs	r1, #64	; 0x40
 80020b4:	489a      	ldr	r0, [pc, #616]	; (8002320 <HAL_UART_RxCpltCallback+0x2c4>)
 80020b6:	f001 fe32 	bl	8003d1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80020ba:	2201      	movs	r2, #1
 80020bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020c0:	4898      	ldr	r0, [pc, #608]	; (8002324 <HAL_UART_RxCpltCallback+0x2c8>)
 80020c2:	f001 fe2c 	bl	8003d1e <HAL_GPIO_WritePin>
		}
		/*Terminal communication*/
		if(RxData[0] == 'T')
 80020c6:	4b95      	ldr	r3, [pc, #596]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b54      	cmp	r3, #84	; 0x54
 80020cc:	d143      	bne.n	8002156 <HAL_UART_RxCpltCallback+0xfa>
		{
			char char_value[10];
			if(RxData[2] == 'p')
 80020ce:	4b93      	ldr	r3, [pc, #588]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80020d0:	789b      	ldrb	r3, [r3, #2]
 80020d2:	2b70      	cmp	r3, #112	; 0x70
 80020d4:	d11d      	bne.n	8002112 <HAL_UART_RxCpltCallback+0xb6>
			{
				SN_Value_In_Message(RxData, SN_Find_first(RxData, "p:"), SN_Find_first(RxData, "end") , char_value);
 80020d6:	4997      	ldr	r1, [pc, #604]	; (8002334 <HAL_UART_RxCpltCallback+0x2d8>)
 80020d8:	4890      	ldr	r0, [pc, #576]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80020da:	f7ff f8c9 	bl	8001270 <SN_Find_first>
 80020de:	4604      	mov	r4, r0
 80020e0:	4995      	ldr	r1, [pc, #596]	; (8002338 <HAL_UART_RxCpltCallback+0x2dc>)
 80020e2:	488e      	ldr	r0, [pc, #568]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80020e4:	f7ff f8c4 	bl	8001270 <SN_Find_first>
 80020e8:	4602      	mov	r2, r0
 80020ea:	f107 0314 	add.w	r3, r7, #20
 80020ee:	4621      	mov	r1, r4
 80020f0:	488a      	ldr	r0, [pc, #552]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80020f2:	f7ff f928 	bl	8001346 <SN_Value_In_Message>
				Kp = atof(char_value);
 80020f6:	f107 0314 	add.w	r3, r7, #20
 80020fa:	4618      	mov	r0, r3
 80020fc:	f004 f8f0 	bl	80062e0 <atof>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4610      	mov	r0, r2
 8002106:	4619      	mov	r1, r3
 8002108:	f7fe fcde 	bl	8000ac8 <__aeabi_d2f>
 800210c:	4603      	mov	r3, r0
 800210e:	4a8b      	ldr	r2, [pc, #556]	; (800233c <HAL_UART_RxCpltCallback+0x2e0>)
 8002110:	6013      	str	r3, [r2, #0]
			}
			if(RxData[2] == 'p')
 8002112:	4b82      	ldr	r3, [pc, #520]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 8002114:	789b      	ldrb	r3, [r3, #2]
 8002116:	2b70      	cmp	r3, #112	; 0x70
 8002118:	d11d      	bne.n	8002156 <HAL_UART_RxCpltCallback+0xfa>
			{
				SN_Value_In_Message(RxData, SN_Find_first(RxData, "d:"), SN_Find_first(RxData, "end") , char_value);
 800211a:	4989      	ldr	r1, [pc, #548]	; (8002340 <HAL_UART_RxCpltCallback+0x2e4>)
 800211c:	487f      	ldr	r0, [pc, #508]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 800211e:	f7ff f8a7 	bl	8001270 <SN_Find_first>
 8002122:	4604      	mov	r4, r0
 8002124:	4984      	ldr	r1, [pc, #528]	; (8002338 <HAL_UART_RxCpltCallback+0x2dc>)
 8002126:	487d      	ldr	r0, [pc, #500]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 8002128:	f7ff f8a2 	bl	8001270 <SN_Find_first>
 800212c:	4602      	mov	r2, r0
 800212e:	f107 0314 	add.w	r3, r7, #20
 8002132:	4621      	mov	r1, r4
 8002134:	4879      	ldr	r0, [pc, #484]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 8002136:	f7ff f906 	bl	8001346 <SN_Value_In_Message>
				Kd= atof(char_value);
 800213a:	f107 0314 	add.w	r3, r7, #20
 800213e:	4618      	mov	r0, r3
 8002140:	f004 f8ce 	bl	80062e0 <atof>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4610      	mov	r0, r2
 800214a:	4619      	mov	r1, r3
 800214c:	f7fe fcbc 	bl	8000ac8 <__aeabi_d2f>
 8002150:	4603      	mov	r3, r0
 8002152:	4a7c      	ldr	r2, [pc, #496]	; (8002344 <HAL_UART_RxCpltCallback+0x2e8>)
 8002154:	6013      	str	r3, [r2, #0]
			}
		}
		/*Time mode*/
		if(RxData[0] == 'g')
 8002156:	4b71      	ldr	r3, [pc, #452]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b67      	cmp	r3, #103	; 0x67
 800215c:	d165      	bne.n	800222a <HAL_UART_RxCpltCallback+0x1ce>
		{
			char char_value[10];
			/*RxData = "m1: ? m2: ? st: ? ct: ?*/
			int m1, m2, st, ct;
			/*mode 1*/
			SN_Value_In_Message(RxData, SN_Find_first(RxData, "m1:") + 3, SN_Find_first(RxData, "m2:") , char_value);
 800215e:	497a      	ldr	r1, [pc, #488]	; (8002348 <HAL_UART_RxCpltCallback+0x2ec>)
 8002160:	486e      	ldr	r0, [pc, #440]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 8002162:	f7ff f885 	bl	8001270 <SN_Find_first>
 8002166:	4603      	mov	r3, r0
 8002168:	1cdc      	adds	r4, r3, #3
 800216a:	4978      	ldr	r1, [pc, #480]	; (800234c <HAL_UART_RxCpltCallback+0x2f0>)
 800216c:	486b      	ldr	r0, [pc, #428]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 800216e:	f7ff f87f 	bl	8001270 <SN_Find_first>
 8002172:	4602      	mov	r2, r0
 8002174:	f107 0308 	add.w	r3, r7, #8
 8002178:	4621      	mov	r1, r4
 800217a:	4868      	ldr	r0, [pc, #416]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 800217c:	f7ff f8e3 	bl	8001346 <SN_Value_In_Message>
			m1 = atoi(char_value);
 8002180:	f107 0308 	add.w	r3, r7, #8
 8002184:	4618      	mov	r0, r3
 8002186:	f004 f8ae 	bl	80062e6 <atoi>
 800218a:	62f8      	str	r0, [r7, #44]	; 0x2c
			/*mode 2*/
			SN_Value_In_Message(RxData, SN_Find_first(RxData, "m2:") + 3, SN_Find_first(RxData, "st:") , char_value);
 800218c:	496f      	ldr	r1, [pc, #444]	; (800234c <HAL_UART_RxCpltCallback+0x2f0>)
 800218e:	4863      	ldr	r0, [pc, #396]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 8002190:	f7ff f86e 	bl	8001270 <SN_Find_first>
 8002194:	4603      	mov	r3, r0
 8002196:	1cdc      	adds	r4, r3, #3
 8002198:	496d      	ldr	r1, [pc, #436]	; (8002350 <HAL_UART_RxCpltCallback+0x2f4>)
 800219a:	4860      	ldr	r0, [pc, #384]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 800219c:	f7ff f868 	bl	8001270 <SN_Find_first>
 80021a0:	4602      	mov	r2, r0
 80021a2:	f107 0308 	add.w	r3, r7, #8
 80021a6:	4621      	mov	r1, r4
 80021a8:	485c      	ldr	r0, [pc, #368]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80021aa:	f7ff f8cc 	bl	8001346 <SN_Value_In_Message>
			m2 = atoi(char_value);
 80021ae:	f107 0308 	add.w	r3, r7, #8
 80021b2:	4618      	mov	r0, r3
 80021b4:	f004 f897 	bl	80062e6 <atoi>
 80021b8:	62b8      	str	r0, [r7, #40]	; 0x28
			/*Start time*/
			SN_Value_In_Message(RxData, SN_Find_first(RxData, "st:") + 3, SN_Find_first(RxData, "ct:") , char_value);
 80021ba:	4965      	ldr	r1, [pc, #404]	; (8002350 <HAL_UART_RxCpltCallback+0x2f4>)
 80021bc:	4857      	ldr	r0, [pc, #348]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80021be:	f7ff f857 	bl	8001270 <SN_Find_first>
 80021c2:	4603      	mov	r3, r0
 80021c4:	1cdc      	adds	r4, r3, #3
 80021c6:	4963      	ldr	r1, [pc, #396]	; (8002354 <HAL_UART_RxCpltCallback+0x2f8>)
 80021c8:	4854      	ldr	r0, [pc, #336]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80021ca:	f7ff f851 	bl	8001270 <SN_Find_first>
 80021ce:	4602      	mov	r2, r0
 80021d0:	f107 0308 	add.w	r3, r7, #8
 80021d4:	4621      	mov	r1, r4
 80021d6:	4851      	ldr	r0, [pc, #324]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80021d8:	f7ff f8b5 	bl	8001346 <SN_Value_In_Message>
			st = atoi(char_value);
 80021dc:	f107 0308 	add.w	r3, r7, #8
 80021e0:	4618      	mov	r0, r3
 80021e2:	f004 f880 	bl	80062e6 <atoi>
 80021e6:	6278      	str	r0, [r7, #36]	; 0x24
			/*mode 1*/
			SN_Value_In_Message(RxData, SN_Find_first(RxData, "ct:") + 3, SN_Find_first(RxData, "end") , char_value);
 80021e8:	495a      	ldr	r1, [pc, #360]	; (8002354 <HAL_UART_RxCpltCallback+0x2f8>)
 80021ea:	484c      	ldr	r0, [pc, #304]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80021ec:	f7ff f840 	bl	8001270 <SN_Find_first>
 80021f0:	4603      	mov	r3, r0
 80021f2:	1cdc      	adds	r4, r3, #3
 80021f4:	4950      	ldr	r1, [pc, #320]	; (8002338 <HAL_UART_RxCpltCallback+0x2dc>)
 80021f6:	4849      	ldr	r0, [pc, #292]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80021f8:	f7ff f83a 	bl	8001270 <SN_Find_first>
 80021fc:	4602      	mov	r2, r0
 80021fe:	f107 0308 	add.w	r3, r7, #8
 8002202:	4621      	mov	r1, r4
 8002204:	4845      	ldr	r0, [pc, #276]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 8002206:	f7ff f89e 	bl	8001346 <SN_Value_In_Message>
			ct = atoi(char_value);
 800220a:	f107 0308 	add.w	r3, r7, #8
 800220e:	4618      	mov	r0, r3
 8002210:	f004 f869 	bl	80062e6 <atoi>
 8002214:	6238      	str	r0, [r7, #32]
			/*rest in future*/
			ct = (m1 * m2 * st) + ct; //<-- to don't get any warning
 8002216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002218:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800221a:	fb02 f303 	mul.w	r3, r2, r3
 800221e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002220:	fb02 f303 	mul.w	r3, r2, r3
 8002224:	6a3a      	ldr	r2, [r7, #32]
 8002226:	4413      	add	r3, r2
 8002228:	623b      	str	r3, [r7, #32]
		}
     	/*LOW mode*/
     	if(RxData[0] == 'a')
 800222a:	4b3c      	ldr	r3, [pc, #240]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b61      	cmp	r3, #97	; 0x61
 8002230:	d11f      	bne.n	8002272 <HAL_UART_RxCpltCallback+0x216>
     	{
    	 	 ARR=3;
 8002232:	4b49      	ldr	r3, [pc, #292]	; (8002358 <HAL_UART_RxCpltCallback+0x2fc>)
 8002234:	2203      	movs	r2, #3
 8002236:	601a      	str	r2, [r3, #0]
     	 	 basespeedr = 139;
 8002238:	4b48      	ldr	r3, [pc, #288]	; (800235c <HAL_UART_RxCpltCallback+0x300>)
 800223a:	228b      	movs	r2, #139	; 0x8b
 800223c:	601a      	str	r2, [r3, #0]
     	 	 basespeedl = 139;
 800223e:	4b48      	ldr	r3, [pc, #288]	; (8002360 <HAL_UART_RxCpltCallback+0x304>)
 8002240:	228b      	movs	r2, #139	; 0x8b
 8002242:	601a      	str	r2, [r3, #0]
     	 	 maxspeedl=139;
 8002244:	4b47      	ldr	r3, [pc, #284]	; (8002364 <HAL_UART_RxCpltCallback+0x308>)
 8002246:	228b      	movs	r2, #139	; 0x8b
 8002248:	601a      	str	r2, [r3, #0]
     	 	 maxspeedr=139;
 800224a:	4b47      	ldr	r3, [pc, #284]	; (8002368 <HAL_UART_RxCpltCallback+0x30c>)
 800224c:	228b      	movs	r2, #139	; 0x8b
 800224e:	601a      	str	r2, [r3, #0]
     	 	 Sharp_bend_speed_right=-169;
 8002250:	4b46      	ldr	r3, [pc, #280]	; (800236c <HAL_UART_RxCpltCallback+0x310>)
 8002252:	f06f 02a8 	mvn.w	r2, #168	; 0xa8
 8002256:	601a      	str	r2, [r3, #0]
     	 	 Sharp_bend_speed_left=169;
 8002258:	4b45      	ldr	r3, [pc, #276]	; (8002370 <HAL_UART_RxCpltCallback+0x314>)
 800225a:	22a9      	movs	r2, #169	; 0xa9
 800225c:	601a      	str	r2, [r3, #0]
     	 	 Bend_speed_right=-76;
 800225e:	4b45      	ldr	r3, [pc, #276]	; (8002374 <HAL_UART_RxCpltCallback+0x318>)
 8002260:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8002264:	601a      	str	r2, [r3, #0]
     	 	 Bend_speed_left=125;
 8002266:	4b44      	ldr	r3, [pc, #272]	; (8002378 <HAL_UART_RxCpltCallback+0x31c>)
 8002268:	227d      	movs	r2, #125	; 0x7d
 800226a:	601a      	str	r2, [r3, #0]
     	 	 Kd=190;
 800226c:	4b35      	ldr	r3, [pc, #212]	; (8002344 <HAL_UART_RxCpltCallback+0x2e8>)
 800226e:	4a43      	ldr	r2, [pc, #268]	; (800237c <HAL_UART_RxCpltCallback+0x320>)
 8002270:	601a      	str	r2, [r3, #0]
     	}
     	/*LOW+ mode*/
     	if(RxData[0] == 'd')
 8002272:	4b2a      	ldr	r3, [pc, #168]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b64      	cmp	r3, #100	; 0x64
 8002278:	d11f      	bne.n	80022ba <HAL_UART_RxCpltCallback+0x25e>
     	{
    	 	 ARR=3;
 800227a:	4b37      	ldr	r3, [pc, #220]	; (8002358 <HAL_UART_RxCpltCallback+0x2fc>)
 800227c:	2203      	movs	r2, #3
 800227e:	601a      	str	r2, [r3, #0]
     	 	 basespeedr = 149;
 8002280:	4b36      	ldr	r3, [pc, #216]	; (800235c <HAL_UART_RxCpltCallback+0x300>)
 8002282:	2295      	movs	r2, #149	; 0x95
 8002284:	601a      	str	r2, [r3, #0]
     	 	 basespeedl = 149;
 8002286:	4b36      	ldr	r3, [pc, #216]	; (8002360 <HAL_UART_RxCpltCallback+0x304>)
 8002288:	2295      	movs	r2, #149	; 0x95
 800228a:	601a      	str	r2, [r3, #0]
     	 	 maxspeedl=149;
 800228c:	4b35      	ldr	r3, [pc, #212]	; (8002364 <HAL_UART_RxCpltCallback+0x308>)
 800228e:	2295      	movs	r2, #149	; 0x95
 8002290:	601a      	str	r2, [r3, #0]
     	 	 maxspeedr=149;
 8002292:	4b35      	ldr	r3, [pc, #212]	; (8002368 <HAL_UART_RxCpltCallback+0x30c>)
 8002294:	2295      	movs	r2, #149	; 0x95
 8002296:	601a      	str	r2, [r3, #0]
     	 	 Sharp_bend_speed_right=-169;
 8002298:	4b34      	ldr	r3, [pc, #208]	; (800236c <HAL_UART_RxCpltCallback+0x310>)
 800229a:	f06f 02a8 	mvn.w	r2, #168	; 0xa8
 800229e:	601a      	str	r2, [r3, #0]
     	 	 Sharp_bend_speed_left=169;
 80022a0:	4b33      	ldr	r3, [pc, #204]	; (8002370 <HAL_UART_RxCpltCallback+0x314>)
 80022a2:	22a9      	movs	r2, #169	; 0xa9
 80022a4:	601a      	str	r2, [r3, #0]
     	 	 Bend_speed_right=-76;
 80022a6:	4b33      	ldr	r3, [pc, #204]	; (8002374 <HAL_UART_RxCpltCallback+0x318>)
 80022a8:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 80022ac:	601a      	str	r2, [r3, #0]
     	 	 Bend_speed_left=125;
 80022ae:	4b32      	ldr	r3, [pc, #200]	; (8002378 <HAL_UART_RxCpltCallback+0x31c>)
 80022b0:	227d      	movs	r2, #125	; 0x7d
 80022b2:	601a      	str	r2, [r3, #0]
     	 	 Kd=220;
 80022b4:	4b23      	ldr	r3, [pc, #140]	; (8002344 <HAL_UART_RxCpltCallback+0x2e8>)
 80022b6:	4a32      	ldr	r2, [pc, #200]	; (8002380 <HAL_UART_RxCpltCallback+0x324>)
 80022b8:	601a      	str	r2, [r3, #0]
     	}
     	/*Medium mode*/
     	if(RxData[0] == 'b')
 80022ba:	4b18      	ldr	r3, [pc, #96]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b62      	cmp	r3, #98	; 0x62
 80022c0:	d11f      	bne.n	8002302 <HAL_UART_RxCpltCallback+0x2a6>
     	{
    	 	 ARR=3;
 80022c2:	4b25      	ldr	r3, [pc, #148]	; (8002358 <HAL_UART_RxCpltCallback+0x2fc>)
 80022c4:	2203      	movs	r2, #3
 80022c6:	601a      	str	r2, [r3, #0]
     	 	 basespeedr = 159;
 80022c8:	4b24      	ldr	r3, [pc, #144]	; (800235c <HAL_UART_RxCpltCallback+0x300>)
 80022ca:	229f      	movs	r2, #159	; 0x9f
 80022cc:	601a      	str	r2, [r3, #0]
     	 	 basespeedl = 159;
 80022ce:	4b24      	ldr	r3, [pc, #144]	; (8002360 <HAL_UART_RxCpltCallback+0x304>)
 80022d0:	229f      	movs	r2, #159	; 0x9f
 80022d2:	601a      	str	r2, [r3, #0]
     	 	 maxspeedl=159;
 80022d4:	4b23      	ldr	r3, [pc, #140]	; (8002364 <HAL_UART_RxCpltCallback+0x308>)
 80022d6:	229f      	movs	r2, #159	; 0x9f
 80022d8:	601a      	str	r2, [r3, #0]
     	 	 maxspeedr=159;
 80022da:	4b23      	ldr	r3, [pc, #140]	; (8002368 <HAL_UART_RxCpltCallback+0x30c>)
 80022dc:	229f      	movs	r2, #159	; 0x9f
 80022de:	601a      	str	r2, [r3, #0]
     	 	 Sharp_bend_speed_right=-169;
 80022e0:	4b22      	ldr	r3, [pc, #136]	; (800236c <HAL_UART_RxCpltCallback+0x310>)
 80022e2:	f06f 02a8 	mvn.w	r2, #168	; 0xa8
 80022e6:	601a      	str	r2, [r3, #0]
     	 	 Sharp_bend_speed_left=169;
 80022e8:	4b21      	ldr	r3, [pc, #132]	; (8002370 <HAL_UART_RxCpltCallback+0x314>)
 80022ea:	22a9      	movs	r2, #169	; 0xa9
 80022ec:	601a      	str	r2, [r3, #0]
     	 	 Bend_speed_right=-76;
 80022ee:	4b21      	ldr	r3, [pc, #132]	; (8002374 <HAL_UART_RxCpltCallback+0x318>)
 80022f0:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 80022f4:	601a      	str	r2, [r3, #0]
     	 	 Bend_speed_left=125;
 80022f6:	4b20      	ldr	r3, [pc, #128]	; (8002378 <HAL_UART_RxCpltCallback+0x31c>)
 80022f8:	227d      	movs	r2, #125	; 0x7d
 80022fa:	601a      	str	r2, [r3, #0]
     	 	 Kd=220;
 80022fc:	4b11      	ldr	r3, [pc, #68]	; (8002344 <HAL_UART_RxCpltCallback+0x2e8>)
 80022fe:	4a20      	ldr	r2, [pc, #128]	; (8002380 <HAL_UART_RxCpltCallback+0x324>)
 8002300:	601a      	str	r2, [r3, #0]
     	}
     	/*Medium+ mode*/
     	if(RxData[0] == 'e')
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_UART_RxCpltCallback+0x2c0>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b65      	cmp	r3, #101	; 0x65
 8002308:	d156      	bne.n	80023b8 <HAL_UART_RxCpltCallback+0x35c>
     	{
    	 	 ARR=3;
 800230a:	4b13      	ldr	r3, [pc, #76]	; (8002358 <HAL_UART_RxCpltCallback+0x2fc>)
 800230c:	2203      	movs	r2, #3
 800230e:	601a      	str	r2, [r3, #0]
     	 	 basespeedr = 169;
 8002310:	4b12      	ldr	r3, [pc, #72]	; (800235c <HAL_UART_RxCpltCallback+0x300>)
 8002312:	22a9      	movs	r2, #169	; 0xa9
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	e035      	b.n	8002384 <HAL_UART_RxCpltCallback+0x328>
 8002318:	40013800 	.word	0x40013800
 800231c:	200002b8 	.word	0x200002b8
 8002320:	40010c00 	.word	0x40010c00
 8002324:	40011000 	.word	0x40011000
 8002328:	200002d8 	.word	0x200002d8
 800232c:	0800a838 	.word	0x0800a838
 8002330:	200003b8 	.word	0x200003b8
 8002334:	0800a840 	.word	0x0800a840
 8002338:	0800a844 	.word	0x0800a844
 800233c:	20000000 	.word	0x20000000
 8002340:	0800a848 	.word	0x0800a848
 8002344:	20000004 	.word	0x20000004
 8002348:	0800a84c 	.word	0x0800a84c
 800234c:	0800a850 	.word	0x0800a850
 8002350:	0800a854 	.word	0x0800a854
 8002354:	0800a858 	.word	0x0800a858
 8002358:	2000001c 	.word	0x2000001c
 800235c:	20000014 	.word	0x20000014
 8002360:	20000018 	.word	0x20000018
 8002364:	20000010 	.word	0x20000010
 8002368:	2000000c 	.word	0x2000000c
 800236c:	20000020 	.word	0x20000020
 8002370:	20000024 	.word	0x20000024
 8002374:	20000028 	.word	0x20000028
 8002378:	2000002c 	.word	0x2000002c
 800237c:	433e0000 	.word	0x433e0000
 8002380:	435c0000 	.word	0x435c0000
     	 	 basespeedl = 169;
 8002384:	4b57      	ldr	r3, [pc, #348]	; (80024e4 <HAL_UART_RxCpltCallback+0x488>)
 8002386:	22a9      	movs	r2, #169	; 0xa9
 8002388:	601a      	str	r2, [r3, #0]
     	 	 maxspeedl=169;
 800238a:	4b57      	ldr	r3, [pc, #348]	; (80024e8 <HAL_UART_RxCpltCallback+0x48c>)
 800238c:	22a9      	movs	r2, #169	; 0xa9
 800238e:	601a      	str	r2, [r3, #0]
     	 	 maxspeedr=169;
 8002390:	4b56      	ldr	r3, [pc, #344]	; (80024ec <HAL_UART_RxCpltCallback+0x490>)
 8002392:	22a9      	movs	r2, #169	; 0xa9
 8002394:	601a      	str	r2, [r3, #0]
     	 	 Sharp_bend_speed_right=-169;
 8002396:	4b56      	ldr	r3, [pc, #344]	; (80024f0 <HAL_UART_RxCpltCallback+0x494>)
 8002398:	f06f 02a8 	mvn.w	r2, #168	; 0xa8
 800239c:	601a      	str	r2, [r3, #0]
     	 	 Sharp_bend_speed_left=169;
 800239e:	4b55      	ldr	r3, [pc, #340]	; (80024f4 <HAL_UART_RxCpltCallback+0x498>)
 80023a0:	22a9      	movs	r2, #169	; 0xa9
 80023a2:	601a      	str	r2, [r3, #0]
     	 	 Bend_speed_right=-76;
 80023a4:	4b54      	ldr	r3, [pc, #336]	; (80024f8 <HAL_UART_RxCpltCallback+0x49c>)
 80023a6:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 80023aa:	601a      	str	r2, [r3, #0]
     	 	 Bend_speed_left=125;
 80023ac:	4b53      	ldr	r3, [pc, #332]	; (80024fc <HAL_UART_RxCpltCallback+0x4a0>)
 80023ae:	227d      	movs	r2, #125	; 0x7d
 80023b0:	601a      	str	r2, [r3, #0]
     	 	 Kd=250;
 80023b2:	4b53      	ldr	r3, [pc, #332]	; (8002500 <HAL_UART_RxCpltCallback+0x4a4>)
 80023b4:	4a53      	ldr	r2, [pc, #332]	; (8002504 <HAL_UART_RxCpltCallback+0x4a8>)
 80023b6:	601a      	str	r2, [r3, #0]
     	}
     	/*HIGH mode*/
     	if(RxData[0] == 'c')
 80023b8:	4b53      	ldr	r3, [pc, #332]	; (8002508 <HAL_UART_RxCpltCallback+0x4ac>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b63      	cmp	r3, #99	; 0x63
 80023be:	d11f      	bne.n	8002400 <HAL_UART_RxCpltCallback+0x3a4>
     	{
    	 	ARR=3;
 80023c0:	4b52      	ldr	r3, [pc, #328]	; (800250c <HAL_UART_RxCpltCallback+0x4b0>)
 80023c2:	2203      	movs	r2, #3
 80023c4:	601a      	str	r2, [r3, #0]
     	 	basespeedr = 174;
 80023c6:	4b52      	ldr	r3, [pc, #328]	; (8002510 <HAL_UART_RxCpltCallback+0x4b4>)
 80023c8:	22ae      	movs	r2, #174	; 0xae
 80023ca:	601a      	str	r2, [r3, #0]
     	 	basespeedl = 174;
 80023cc:	4b45      	ldr	r3, [pc, #276]	; (80024e4 <HAL_UART_RxCpltCallback+0x488>)
 80023ce:	22ae      	movs	r2, #174	; 0xae
 80023d0:	601a      	str	r2, [r3, #0]
     	 	maxspeedl=174;
 80023d2:	4b45      	ldr	r3, [pc, #276]	; (80024e8 <HAL_UART_RxCpltCallback+0x48c>)
 80023d4:	22ae      	movs	r2, #174	; 0xae
 80023d6:	601a      	str	r2, [r3, #0]
     	 	maxspeedr=174;
 80023d8:	4b44      	ldr	r3, [pc, #272]	; (80024ec <HAL_UART_RxCpltCallback+0x490>)
 80023da:	22ae      	movs	r2, #174	; 0xae
 80023dc:	601a      	str	r2, [r3, #0]
     	 	Sharp_bend_speed_right=-169;
 80023de:	4b44      	ldr	r3, [pc, #272]	; (80024f0 <HAL_UART_RxCpltCallback+0x494>)
 80023e0:	f06f 02a8 	mvn.w	r2, #168	; 0xa8
 80023e4:	601a      	str	r2, [r3, #0]
     	 	Sharp_bend_speed_left=169;
 80023e6:	4b43      	ldr	r3, [pc, #268]	; (80024f4 <HAL_UART_RxCpltCallback+0x498>)
 80023e8:	22a9      	movs	r2, #169	; 0xa9
 80023ea:	601a      	str	r2, [r3, #0]
     	 	Bend_speed_right=-76;
 80023ec:	4b42      	ldr	r3, [pc, #264]	; (80024f8 <HAL_UART_RxCpltCallback+0x49c>)
 80023ee:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 80023f2:	601a      	str	r2, [r3, #0]
     	 	Bend_speed_left=125;
 80023f4:	4b41      	ldr	r3, [pc, #260]	; (80024fc <HAL_UART_RxCpltCallback+0x4a0>)
 80023f6:	227d      	movs	r2, #125	; 0x7d
 80023f8:	601a      	str	r2, [r3, #0]
     	 	Kd=250;
 80023fa:	4b41      	ldr	r3, [pc, #260]	; (8002500 <HAL_UART_RxCpltCallback+0x4a4>)
 80023fc:	4a41      	ldr	r2, [pc, #260]	; (8002504 <HAL_UART_RxCpltCallback+0x4a8>)
 80023fe:	601a      	str	r2, [r3, #0]
     	}
     	/*HIGH+ mode*/
     	if(RxData[0] == 'f')
 8002400:	4b41      	ldr	r3, [pc, #260]	; (8002508 <HAL_UART_RxCpltCallback+0x4ac>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b66      	cmp	r3, #102	; 0x66
 8002406:	d11f      	bne.n	8002448 <HAL_UART_RxCpltCallback+0x3ec>
     	{
    	 	ARR=3;
 8002408:	4b40      	ldr	r3, [pc, #256]	; (800250c <HAL_UART_RxCpltCallback+0x4b0>)
 800240a:	2203      	movs	r2, #3
 800240c:	601a      	str	r2, [r3, #0]
    	 	basespeedr = 180;
 800240e:	4b40      	ldr	r3, [pc, #256]	; (8002510 <HAL_UART_RxCpltCallback+0x4b4>)
 8002410:	22b4      	movs	r2, #180	; 0xb4
 8002412:	601a      	str	r2, [r3, #0]
    	 	basespeedl = 180;
 8002414:	4b33      	ldr	r3, [pc, #204]	; (80024e4 <HAL_UART_RxCpltCallback+0x488>)
 8002416:	22b4      	movs	r2, #180	; 0xb4
 8002418:	601a      	str	r2, [r3, #0]
    	 	maxspeedl=180;
 800241a:	4b33      	ldr	r3, [pc, #204]	; (80024e8 <HAL_UART_RxCpltCallback+0x48c>)
 800241c:	22b4      	movs	r2, #180	; 0xb4
 800241e:	601a      	str	r2, [r3, #0]
    	 	maxspeedr=180;
 8002420:	4b32      	ldr	r3, [pc, #200]	; (80024ec <HAL_UART_RxCpltCallback+0x490>)
 8002422:	22b4      	movs	r2, #180	; 0xb4
 8002424:	601a      	str	r2, [r3, #0]
    	 	Sharp_bend_speed_right=-169;
 8002426:	4b32      	ldr	r3, [pc, #200]	; (80024f0 <HAL_UART_RxCpltCallback+0x494>)
 8002428:	f06f 02a8 	mvn.w	r2, #168	; 0xa8
 800242c:	601a      	str	r2, [r3, #0]
     		Sharp_bend_speed_left=169;
 800242e:	4b31      	ldr	r3, [pc, #196]	; (80024f4 <HAL_UART_RxCpltCallback+0x498>)
 8002430:	22a9      	movs	r2, #169	; 0xa9
 8002432:	601a      	str	r2, [r3, #0]
     		Bend_speed_right=-76;
 8002434:	4b30      	ldr	r3, [pc, #192]	; (80024f8 <HAL_UART_RxCpltCallback+0x49c>)
 8002436:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 800243a:	601a      	str	r2, [r3, #0]
     		Bend_speed_left=125;
 800243c:	4b2f      	ldr	r3, [pc, #188]	; (80024fc <HAL_UART_RxCpltCallback+0x4a0>)
 800243e:	227d      	movs	r2, #125	; 0x7d
 8002440:	601a      	str	r2, [r3, #0]
     	 	Kd=250;
 8002442:	4b2f      	ldr	r3, [pc, #188]	; (8002500 <HAL_UART_RxCpltCallback+0x4a4>)
 8002444:	4a2f      	ldr	r2, [pc, #188]	; (8002504 <HAL_UART_RxCpltCallback+0x4a8>)
 8002446:	601a      	str	r2, [r3, #0]
     	}
     	/*Special mode*/
     	if(RxData[0] == 'h')
 8002448:	4b2f      	ldr	r3, [pc, #188]	; (8002508 <HAL_UART_RxCpltCallback+0x4ac>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b68      	cmp	r3, #104	; 0x68
 800244e:	d11f      	bne.n	8002490 <HAL_UART_RxCpltCallback+0x434>
     	{
    	 	ARR=3;
 8002450:	4b2e      	ldr	r3, [pc, #184]	; (800250c <HAL_UART_RxCpltCallback+0x4b0>)
 8002452:	2203      	movs	r2, #3
 8002454:	601a      	str	r2, [r3, #0]
    	 	basespeedr = 190;
 8002456:	4b2e      	ldr	r3, [pc, #184]	; (8002510 <HAL_UART_RxCpltCallback+0x4b4>)
 8002458:	22be      	movs	r2, #190	; 0xbe
 800245a:	601a      	str	r2, [r3, #0]
    	 	basespeedl = 190;
 800245c:	4b21      	ldr	r3, [pc, #132]	; (80024e4 <HAL_UART_RxCpltCallback+0x488>)
 800245e:	22be      	movs	r2, #190	; 0xbe
 8002460:	601a      	str	r2, [r3, #0]
    	 	maxspeedl = 190;
 8002462:	4b21      	ldr	r3, [pc, #132]	; (80024e8 <HAL_UART_RxCpltCallback+0x48c>)
 8002464:	22be      	movs	r2, #190	; 0xbe
 8002466:	601a      	str	r2, [r3, #0]
    	 	maxspeedr = 190;
 8002468:	4b20      	ldr	r3, [pc, #128]	; (80024ec <HAL_UART_RxCpltCallback+0x490>)
 800246a:	22be      	movs	r2, #190	; 0xbe
 800246c:	601a      	str	r2, [r3, #0]
    	 	Sharp_bend_speed_right = -169;
 800246e:	4b20      	ldr	r3, [pc, #128]	; (80024f0 <HAL_UART_RxCpltCallback+0x494>)
 8002470:	f06f 02a8 	mvn.w	r2, #168	; 0xa8
 8002474:	601a      	str	r2, [r3, #0]
    	 	Sharp_bend_speed_left = 169;
 8002476:	4b1f      	ldr	r3, [pc, #124]	; (80024f4 <HAL_UART_RxCpltCallback+0x498>)
 8002478:	22a9      	movs	r2, #169	; 0xa9
 800247a:	601a      	str	r2, [r3, #0]
    	 	Bend_speed_right = -76;
 800247c:	4b1e      	ldr	r3, [pc, #120]	; (80024f8 <HAL_UART_RxCpltCallback+0x49c>)
 800247e:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8002482:	601a      	str	r2, [r3, #0]
    	 	Bend_speed_left = 125;
 8002484:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <HAL_UART_RxCpltCallback+0x4a0>)
 8002486:	227d      	movs	r2, #125	; 0x7d
 8002488:	601a      	str	r2, [r3, #0]
    	 	Kd = 250;
 800248a:	4b1d      	ldr	r3, [pc, #116]	; (8002500 <HAL_UART_RxCpltCallback+0x4a4>)
 800248c:	4a1d      	ldr	r2, [pc, #116]	; (8002504 <HAL_UART_RxCpltCallback+0x4a8>)
 800248e:	601a      	str	r2, [r3, #0]
     	}

     	Battery_ADC_measurement();
 8002490:	f7ff f88a 	bl	80015a8 <Battery_ADC_measurement>
    	SN_UART_Send(&huart3,"rxData: %d \r \n ",RxData);
 8002494:	4a1c      	ldr	r2, [pc, #112]	; (8002508 <HAL_UART_RxCpltCallback+0x4ac>)
 8002496:	491f      	ldr	r1, [pc, #124]	; (8002514 <HAL_UART_RxCpltCallback+0x4b8>)
 8002498:	481f      	ldr	r0, [pc, #124]	; (8002518 <HAL_UART_RxCpltCallback+0x4bc>)
 800249a:	f7fe fe97 	bl	80011cc <SN_UART_Send>
    	SN_UART_Send(&huart3,"speedlevel = %.1f \r \n battery: %.1f \r \n raw= %d \r \n ",speedlevel,battery_procentage_raw,raw_battery);
 800249e:	4b1f      	ldr	r3, [pc, #124]	; (800251c <HAL_UART_RxCpltCallback+0x4c0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fd ffc0 	bl	8000428 <__aeabi_f2d>
 80024a8:	4604      	mov	r4, r0
 80024aa:	460d      	mov	r5, r1
 80024ac:	4b1c      	ldr	r3, [pc, #112]	; (8002520 <HAL_UART_RxCpltCallback+0x4c4>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fd ffb9 	bl	8000428 <__aeabi_f2d>
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	491a      	ldr	r1, [pc, #104]	; (8002524 <HAL_UART_RxCpltCallback+0x4c8>)
 80024bc:	8809      	ldrh	r1, [r1, #0]
 80024be:	9102      	str	r1, [sp, #8]
 80024c0:	e9cd 2300 	strd	r2, r3, [sp]
 80024c4:	4622      	mov	r2, r4
 80024c6:	462b      	mov	r3, r5
 80024c8:	4917      	ldr	r1, [pc, #92]	; (8002528 <HAL_UART_RxCpltCallback+0x4cc>)
 80024ca:	4813      	ldr	r0, [pc, #76]	; (8002518 <HAL_UART_RxCpltCallback+0x4bc>)
 80024cc:	f7fe fe7e 	bl	80011cc <SN_UART_Send>
    	HAL_UART_Receive_IT(&huart1,(uint8_t*)RxData,28);
 80024d0:	221c      	movs	r2, #28
 80024d2:	490d      	ldr	r1, [pc, #52]	; (8002508 <HAL_UART_RxCpltCallback+0x4ac>)
 80024d4:	4815      	ldr	r0, [pc, #84]	; (800252c <HAL_UART_RxCpltCallback+0x4d0>)
 80024d6:	f003 f95e 	bl	8005796 <HAL_UART_Receive_IT>
	}
}
 80024da:	bf00      	nop
 80024dc:	3730      	adds	r7, #48	; 0x30
 80024de:	46bd      	mov	sp, r7
 80024e0:	bdb0      	pop	{r4, r5, r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000018 	.word	0x20000018
 80024e8:	20000010 	.word	0x20000010
 80024ec:	2000000c 	.word	0x2000000c
 80024f0:	20000020 	.word	0x20000020
 80024f4:	20000024 	.word	0x20000024
 80024f8:	20000028 	.word	0x20000028
 80024fc:	2000002c 	.word	0x2000002c
 8002500:	20000004 	.word	0x20000004
 8002504:	437a0000 	.word	0x437a0000
 8002508:	200002b8 	.word	0x200002b8
 800250c:	2000001c 	.word	0x2000001c
 8002510:	20000014 	.word	0x20000014
 8002514:	0800a85c 	.word	0x0800a85c
 8002518:	20000400 	.word	0x20000400
 800251c:	20000008 	.word	0x20000008
 8002520:	200002d8 	.word	0x200002d8
 8002524:	200002d4 	.word	0x200002d4
 8002528:	0800a86c 	.word	0x0800a86c
 800252c:	200003b8 	.word	0x200003b8

08002530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002534:	b672      	cpsid	i
}
 8002536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002538:	e7fe      	b.n	8002538 <Error_Handler+0x8>
	...

0800253c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002542:	4b15      	ldr	r3, [pc, #84]	; (8002598 <HAL_MspInit+0x5c>)
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	4a14      	ldr	r2, [pc, #80]	; (8002598 <HAL_MspInit+0x5c>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	6193      	str	r3, [r2, #24]
 800254e:	4b12      	ldr	r3, [pc, #72]	; (8002598 <HAL_MspInit+0x5c>)
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800255a:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <HAL_MspInit+0x5c>)
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	4a0e      	ldr	r2, [pc, #56]	; (8002598 <HAL_MspInit+0x5c>)
 8002560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002564:	61d3      	str	r3, [r2, #28]
 8002566:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <HAL_MspInit+0x5c>)
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256e:	607b      	str	r3, [r7, #4]
 8002570:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002572:	4b0a      	ldr	r3, [pc, #40]	; (800259c <HAL_MspInit+0x60>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	4a04      	ldr	r2, [pc, #16]	; (800259c <HAL_MspInit+0x60>)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800258e:	bf00      	nop
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr
 8002598:	40021000 	.word	0x40021000
 800259c:	40010000 	.word	0x40010000

080025a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025a4:	e7fe      	b.n	80025a4 <NMI_Handler+0x4>

080025a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025a6:	b480      	push	{r7}
 80025a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025aa:	e7fe      	b.n	80025aa <HardFault_Handler+0x4>

080025ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025b0:	e7fe      	b.n	80025b0 <MemManage_Handler+0x4>

080025b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025b2:	b480      	push	{r7}
 80025b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025b6:	e7fe      	b.n	80025b6 <BusFault_Handler+0x4>

080025b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025bc:	e7fe      	b.n	80025bc <UsageFault_Handler+0x4>

080025be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025be:	b480      	push	{r7}
 80025c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr

080025ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025ca:	b480      	push	{r7}
 80025cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr

080025d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025d6:	b480      	push	{r7}
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr

080025e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025e6:	f000 fbd3 	bl	8002d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025f4:	4802      	ldr	r0, [pc, #8]	; (8002600 <USART1_IRQHandler+0x10>)
 80025f6:	f003 f8f3 	bl	80057e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	200003b8 	.word	0x200003b8

08002604 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return 1;
 8002608:	2301      	movs	r3, #1
}
 800260a:	4618      	mov	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr

08002612 <_kill>:

int _kill(int pid, int sig)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b082      	sub	sp, #8
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800261c:	f003 fe68 	bl	80062f0 <__errno>
 8002620:	4603      	mov	r3, r0
 8002622:	2216      	movs	r2, #22
 8002624:	601a      	str	r2, [r3, #0]
  return -1;
 8002626:	f04f 33ff 	mov.w	r3, #4294967295
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <_exit>:

void _exit (int status)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800263a:	f04f 31ff 	mov.w	r1, #4294967295
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff ffe7 	bl	8002612 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002644:	e7fe      	b.n	8002644 <_exit+0x12>

08002646 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b086      	sub	sp, #24
 800264a:	af00      	add	r7, sp, #0
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	e00a      	b.n	800266e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002658:	f3af 8000 	nop.w
 800265c:	4601      	mov	r1, r0
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	60ba      	str	r2, [r7, #8]
 8002664:	b2ca      	uxtb	r2, r1
 8002666:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	3301      	adds	r3, #1
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	429a      	cmp	r2, r3
 8002674:	dbf0      	blt.n	8002658 <_read+0x12>
  }

  return len;
 8002676:	687b      	ldr	r3, [r7, #4]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	e009      	b.n	80026a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	60ba      	str	r2, [r7, #8]
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	3301      	adds	r3, #1
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	dbf1      	blt.n	8002692 <_write+0x12>
  }
  return len;
 80026ae:	687b      	ldr	r3, [r7, #4]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <_close>:

int _close(int file)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr

080026ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
 80026d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026de:	605a      	str	r2, [r3, #4]
  return 0;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr

080026ec <_isatty>:

int _isatty(int file)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026f4:	2301      	movs	r3, #1
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr

08002700 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002720:	4a14      	ldr	r2, [pc, #80]	; (8002774 <_sbrk+0x5c>)
 8002722:	4b15      	ldr	r3, [pc, #84]	; (8002778 <_sbrk+0x60>)
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800272c:	4b13      	ldr	r3, [pc, #76]	; (800277c <_sbrk+0x64>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d102      	bne.n	800273a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002734:	4b11      	ldr	r3, [pc, #68]	; (800277c <_sbrk+0x64>)
 8002736:	4a12      	ldr	r2, [pc, #72]	; (8002780 <_sbrk+0x68>)
 8002738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800273a:	4b10      	ldr	r3, [pc, #64]	; (800277c <_sbrk+0x64>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4413      	add	r3, r2
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	429a      	cmp	r2, r3
 8002746:	d207      	bcs.n	8002758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002748:	f003 fdd2 	bl	80062f0 <__errno>
 800274c:	4603      	mov	r3, r0
 800274e:	220c      	movs	r2, #12
 8002750:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002752:	f04f 33ff 	mov.w	r3, #4294967295
 8002756:	e009      	b.n	800276c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002758:	4b08      	ldr	r3, [pc, #32]	; (800277c <_sbrk+0x64>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800275e:	4b07      	ldr	r3, [pc, #28]	; (800277c <_sbrk+0x64>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4413      	add	r3, r2
 8002766:	4a05      	ldr	r2, [pc, #20]	; (800277c <_sbrk+0x64>)
 8002768:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800276a:	68fb      	ldr	r3, [r7, #12]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	20005000 	.word	0x20005000
 8002778:	00000400 	.word	0x00000400
 800277c:	200002dc 	.word	0x200002dc
 8002780:	20000460 	.word	0x20000460

08002784 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr

08002790 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002796:	f107 0308 	add.w	r3, r7, #8
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	605a      	str	r2, [r3, #4]
 80027a0:	609a      	str	r2, [r3, #8]
 80027a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027a4:	463b      	mov	r3, r7
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027ac:	4b1e      	ldr	r3, [pc, #120]	; (8002828 <MX_TIM1_Init+0x98>)
 80027ae:	4a1f      	ldr	r2, [pc, #124]	; (800282c <MX_TIM1_Init+0x9c>)
 80027b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80027b2:	4b1d      	ldr	r3, [pc, #116]	; (8002828 <MX_TIM1_Init+0x98>)
 80027b4:	2247      	movs	r2, #71	; 0x47
 80027b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b8:	4b1b      	ldr	r3, [pc, #108]	; (8002828 <MX_TIM1_Init+0x98>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80027be:	4b1a      	ldr	r3, [pc, #104]	; (8002828 <MX_TIM1_Init+0x98>)
 80027c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c6:	4b18      	ldr	r3, [pc, #96]	; (8002828 <MX_TIM1_Init+0x98>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027cc:	4b16      	ldr	r3, [pc, #88]	; (8002828 <MX_TIM1_Init+0x98>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027d2:	4b15      	ldr	r3, [pc, #84]	; (8002828 <MX_TIM1_Init+0x98>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80027d8:	4813      	ldr	r0, [pc, #76]	; (8002828 <MX_TIM1_Init+0x98>)
 80027da:	f002 f835 	bl	8004848 <HAL_TIM_Base_Init>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80027e4:	f7ff fea4 	bl	8002530 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80027ee:	f107 0308 	add.w	r3, r7, #8
 80027f2:	4619      	mov	r1, r3
 80027f4:	480c      	ldr	r0, [pc, #48]	; (8002828 <MX_TIM1_Init+0x98>)
 80027f6:	f002 fb31 	bl	8004e5c <HAL_TIM_ConfigClockSource>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002800:	f7ff fe96 	bl	8002530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002804:	2300      	movs	r3, #0
 8002806:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002808:	2300      	movs	r3, #0
 800280a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800280c:	463b      	mov	r3, r7
 800280e:	4619      	mov	r1, r3
 8002810:	4805      	ldr	r0, [pc, #20]	; (8002828 <MX_TIM1_Init+0x98>)
 8002812:	f002 fe8f 	bl	8005534 <HAL_TIMEx_MasterConfigSynchronization>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800281c:	f7ff fe88 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002820:	bf00      	nop
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	200002e0 	.word	0x200002e0
 800282c:	40012c00 	.word	0x40012c00

08002830 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002836:	f107 0308 	add.w	r3, r7, #8
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	605a      	str	r2, [r3, #4]
 8002840:	609a      	str	r2, [r3, #8]
 8002842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002844:	463b      	mov	r3, r7
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800284c:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <MX_TIM3_Init+0x94>)
 800284e:	4a1e      	ldr	r2, [pc, #120]	; (80028c8 <MX_TIM3_Init+0x98>)
 8002850:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002852:	4b1c      	ldr	r3, [pc, #112]	; (80028c4 <MX_TIM3_Init+0x94>)
 8002854:	2247      	movs	r2, #71	; 0x47
 8002856:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002858:	4b1a      	ldr	r3, [pc, #104]	; (80028c4 <MX_TIM3_Init+0x94>)
 800285a:	2200      	movs	r2, #0
 800285c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800285e:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <MX_TIM3_Init+0x94>)
 8002860:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002864:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002866:	4b17      	ldr	r3, [pc, #92]	; (80028c4 <MX_TIM3_Init+0x94>)
 8002868:	2200      	movs	r2, #0
 800286a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800286c:	4b15      	ldr	r3, [pc, #84]	; (80028c4 <MX_TIM3_Init+0x94>)
 800286e:	2200      	movs	r2, #0
 8002870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002872:	4814      	ldr	r0, [pc, #80]	; (80028c4 <MX_TIM3_Init+0x94>)
 8002874:	f001 ffe8 	bl	8004848 <HAL_TIM_Base_Init>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800287e:	f7ff fe57 	bl	8002530 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002882:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002886:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002888:	f107 0308 	add.w	r3, r7, #8
 800288c:	4619      	mov	r1, r3
 800288e:	480d      	ldr	r0, [pc, #52]	; (80028c4 <MX_TIM3_Init+0x94>)
 8002890:	f002 fae4 	bl	8004e5c <HAL_TIM_ConfigClockSource>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800289a:	f7ff fe49 	bl	8002530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800289e:	2300      	movs	r3, #0
 80028a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028a2:	2300      	movs	r3, #0
 80028a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028a6:	463b      	mov	r3, r7
 80028a8:	4619      	mov	r1, r3
 80028aa:	4806      	ldr	r0, [pc, #24]	; (80028c4 <MX_TIM3_Init+0x94>)
 80028ac:	f002 fe42 	bl	8005534 <HAL_TIMEx_MasterConfigSynchronization>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80028b6:	f7ff fe3b 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80028ba:	bf00      	nop
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000328 	.word	0x20000328
 80028c8:	40000400 	.word	0x40000400

080028cc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08e      	sub	sp, #56	; 0x38
 80028d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	605a      	str	r2, [r3, #4]
 80028dc:	609a      	str	r2, [r3, #8]
 80028de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028e0:	f107 0320 	add.w	r3, r7, #32
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028ea:	1d3b      	adds	r3, r7, #4
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	60da      	str	r2, [r3, #12]
 80028f6:	611a      	str	r2, [r3, #16]
 80028f8:	615a      	str	r2, [r3, #20]
 80028fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80028fc:	4b3d      	ldr	r3, [pc, #244]	; (80029f4 <MX_TIM4_Init+0x128>)
 80028fe:	4a3e      	ldr	r2, [pc, #248]	; (80029f8 <MX_TIM4_Init+0x12c>)
 8002900:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8002902:	4b3c      	ldr	r3, [pc, #240]	; (80029f4 <MX_TIM4_Init+0x128>)
 8002904:	224f      	movs	r2, #79	; 0x4f
 8002906:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002908:	4b3a      	ldr	r3, [pc, #232]	; (80029f4 <MX_TIM4_Init+0x128>)
 800290a:	2200      	movs	r2, #0
 800290c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800290e:	4b39      	ldr	r3, [pc, #228]	; (80029f4 <MX_TIM4_Init+0x128>)
 8002910:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002914:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002916:	4b37      	ldr	r3, [pc, #220]	; (80029f4 <MX_TIM4_Init+0x128>)
 8002918:	2200      	movs	r2, #0
 800291a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800291c:	4b35      	ldr	r3, [pc, #212]	; (80029f4 <MX_TIM4_Init+0x128>)
 800291e:	2200      	movs	r2, #0
 8002920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002922:	4834      	ldr	r0, [pc, #208]	; (80029f4 <MX_TIM4_Init+0x128>)
 8002924:	f001 ff90 	bl	8004848 <HAL_TIM_Base_Init>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800292e:	f7ff fdff 	bl	8002530 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002936:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002938:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800293c:	4619      	mov	r1, r3
 800293e:	482d      	ldr	r0, [pc, #180]	; (80029f4 <MX_TIM4_Init+0x128>)
 8002940:	f002 fa8c 	bl	8004e5c <HAL_TIM_ConfigClockSource>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800294a:	f7ff fdf1 	bl	8002530 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800294e:	4829      	ldr	r0, [pc, #164]	; (80029f4 <MX_TIM4_Init+0x128>)
 8002950:	f002 f86c 	bl	8004a2c <HAL_TIM_PWM_Init>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800295a:	f7ff fde9 	bl	8002530 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800295e:	4825      	ldr	r0, [pc, #148]	; (80029f4 <MX_TIM4_Init+0x128>)
 8002960:	f002 f80c 	bl	800497c <HAL_TIM_OC_Init>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 800296a:	f7ff fde1 	bl	8002530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800296e:	2300      	movs	r3, #0
 8002970:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002972:	2300      	movs	r3, #0
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002976:	f107 0320 	add.w	r3, r7, #32
 800297a:	4619      	mov	r1, r3
 800297c:	481d      	ldr	r0, [pc, #116]	; (80029f4 <MX_TIM4_Init+0x128>)
 800297e:	f002 fdd9 	bl	8005534 <HAL_TIMEx_MasterConfigSynchronization>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8002988:	f7ff fdd2 	bl	8002530 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800298c:	2360      	movs	r3, #96	; 0x60
 800298e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002994:	2300      	movs	r3, #0
 8002996:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800299c:	1d3b      	adds	r3, r7, #4
 800299e:	2204      	movs	r2, #4
 80029a0:	4619      	mov	r1, r3
 80029a2:	4814      	ldr	r0, [pc, #80]	; (80029f4 <MX_TIM4_Init+0x128>)
 80029a4:	f002 f998 	bl	8004cd8 <HAL_TIM_PWM_ConfigChannel>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 80029ae:	f7ff fdbf 	bl	8002530 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80029b2:	2300      	movs	r3, #0
 80029b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029b6:	1d3b      	adds	r3, r7, #4
 80029b8:	2208      	movs	r2, #8
 80029ba:	4619      	mov	r1, r3
 80029bc:	480d      	ldr	r0, [pc, #52]	; (80029f4 <MX_TIM4_Init+0x128>)
 80029be:	f002 f92f 	bl	8004c20 <HAL_TIM_OC_ConfigChannel>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 80029c8:	f7ff fdb2 	bl	8002530 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029cc:	2360      	movs	r3, #96	; 0x60
 80029ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80029d0:	1d3b      	adds	r3, r7, #4
 80029d2:	220c      	movs	r2, #12
 80029d4:	4619      	mov	r1, r3
 80029d6:	4807      	ldr	r0, [pc, #28]	; (80029f4 <MX_TIM4_Init+0x128>)
 80029d8:	f002 f97e 	bl	8004cd8 <HAL_TIM_PWM_ConfigChannel>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 80029e2:	f7ff fda5 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80029e6:	4803      	ldr	r0, [pc, #12]	; (80029f4 <MX_TIM4_Init+0x128>)
 80029e8:	f000 f84e 	bl	8002a88 <HAL_TIM_MspPostInit>

}
 80029ec:	bf00      	nop
 80029ee:	3738      	adds	r7, #56	; 0x38
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20000370 	.word	0x20000370
 80029f8:	40000800 	.word	0x40000800

080029fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b087      	sub	sp, #28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a1b      	ldr	r2, [pc, #108]	; (8002a78 <HAL_TIM_Base_MspInit+0x7c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d10c      	bne.n	8002a28 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a0e:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <HAL_TIM_Base_MspInit+0x80>)
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	4a1a      	ldr	r2, [pc, #104]	; (8002a7c <HAL_TIM_Base_MspInit+0x80>)
 8002a14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a18:	6193      	str	r3, [r2, #24]
 8002a1a:	4b18      	ldr	r3, [pc, #96]	; (8002a7c <HAL_TIM_Base_MspInit+0x80>)
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002a26:	e022      	b.n	8002a6e <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a14      	ldr	r2, [pc, #80]	; (8002a80 <HAL_TIM_Base_MspInit+0x84>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d10c      	bne.n	8002a4c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a32:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <HAL_TIM_Base_MspInit+0x80>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	4a11      	ldr	r2, [pc, #68]	; (8002a7c <HAL_TIM_Base_MspInit+0x80>)
 8002a38:	f043 0302 	orr.w	r3, r3, #2
 8002a3c:	61d3      	str	r3, [r2, #28]
 8002a3e:	4b0f      	ldr	r3, [pc, #60]	; (8002a7c <HAL_TIM_Base_MspInit+0x80>)
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	693b      	ldr	r3, [r7, #16]
}
 8002a4a:	e010      	b.n	8002a6e <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM4)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a0c      	ldr	r2, [pc, #48]	; (8002a84 <HAL_TIM_Base_MspInit+0x88>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d10b      	bne.n	8002a6e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a56:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <HAL_TIM_Base_MspInit+0x80>)
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	4a08      	ldr	r2, [pc, #32]	; (8002a7c <HAL_TIM_Base_MspInit+0x80>)
 8002a5c:	f043 0304 	orr.w	r3, r3, #4
 8002a60:	61d3      	str	r3, [r2, #28]
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_TIM_Base_MspInit+0x80>)
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
}
 8002a6e:	bf00      	nop
 8002a70:	371c      	adds	r7, #28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr
 8002a78:	40012c00 	.word	0x40012c00
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40000400 	.word	0x40000400
 8002a84:	40000800 	.word	0x40000800

08002a88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a90:	f107 0310 	add.w	r3, r7, #16
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a10      	ldr	r2, [pc, #64]	; (8002ae4 <HAL_TIM_MspPostInit+0x5c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d118      	bne.n	8002ada <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa8:	4b0f      	ldr	r3, [pc, #60]	; (8002ae8 <HAL_TIM_MspPostInit+0x60>)
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	4a0e      	ldr	r2, [pc, #56]	; (8002ae8 <HAL_TIM_MspPostInit+0x60>)
 8002aae:	f043 0308 	orr.w	r3, r3, #8
 8002ab2:	6193      	str	r3, [r2, #24]
 8002ab4:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <HAL_TIM_MspPostInit+0x60>)
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002ac0:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002ac4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aca:	2302      	movs	r3, #2
 8002acc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ace:	f107 0310 	add.w	r3, r7, #16
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4805      	ldr	r0, [pc, #20]	; (8002aec <HAL_TIM_MspPostInit+0x64>)
 8002ad6:	f000 ff87 	bl	80039e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002ada:	bf00      	nop
 8002adc:	3720      	adds	r7, #32
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40000800 	.word	0x40000800
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	40010c00 	.word	0x40010c00

08002af0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002af4:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002af6:	4a12      	ldr	r2, [pc, #72]	; (8002b40 <MX_USART1_UART_Init+0x50>)
 8002af8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002afa:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002afc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b02:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b08:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b0e:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b14:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002b16:	220c      	movs	r2, #12
 8002b18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b1a:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b20:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b26:	4805      	ldr	r0, [pc, #20]	; (8002b3c <MX_USART1_UART_Init+0x4c>)
 8002b28:	f002 fd62 	bl	80055f0 <HAL_UART_Init>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b32:	f7ff fcfd 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	200003b8 	.word	0x200003b8
 8002b40:	40013800 	.word	0x40013800

08002b44 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b48:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <MX_USART3_UART_Init+0x4c>)
 8002b4a:	4a12      	ldr	r2, [pc, #72]	; (8002b94 <MX_USART3_UART_Init+0x50>)
 8002b4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002b4e:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <MX_USART3_UART_Init+0x4c>)
 8002b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b56:	4b0e      	ldr	r3, [pc, #56]	; (8002b90 <MX_USART3_UART_Init+0x4c>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <MX_USART3_UART_Init+0x4c>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b62:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <MX_USART3_UART_Init+0x4c>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b68:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <MX_USART3_UART_Init+0x4c>)
 8002b6a:	220c      	movs	r2, #12
 8002b6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b6e:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <MX_USART3_UART_Init+0x4c>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <MX_USART3_UART_Init+0x4c>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b7a:	4805      	ldr	r0, [pc, #20]	; (8002b90 <MX_USART3_UART_Init+0x4c>)
 8002b7c:	f002 fd38 	bl	80055f0 <HAL_UART_Init>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002b86:	f7ff fcd3 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	20000400 	.word	0x20000400
 8002b94:	40004800 	.word	0x40004800

08002b98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b08a      	sub	sp, #40	; 0x28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba0:	f107 0318 	add.w	r3, r7, #24
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a3c      	ldr	r2, [pc, #240]	; (8002ca4 <HAL_UART_MspInit+0x10c>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d13a      	bne.n	8002c2e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bb8:	4b3b      	ldr	r3, [pc, #236]	; (8002ca8 <HAL_UART_MspInit+0x110>)
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	4a3a      	ldr	r2, [pc, #232]	; (8002ca8 <HAL_UART_MspInit+0x110>)
 8002bbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bc2:	6193      	str	r3, [r2, #24]
 8002bc4:	4b38      	ldr	r3, [pc, #224]	; (8002ca8 <HAL_UART_MspInit+0x110>)
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd0:	4b35      	ldr	r3, [pc, #212]	; (8002ca8 <HAL_UART_MspInit+0x110>)
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	4a34      	ldr	r2, [pc, #208]	; (8002ca8 <HAL_UART_MspInit+0x110>)
 8002bd6:	f043 0304 	orr.w	r3, r3, #4
 8002bda:	6193      	str	r3, [r2, #24]
 8002bdc:	4b32      	ldr	r3, [pc, #200]	; (8002ca8 <HAL_UART_MspInit+0x110>)
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf6:	f107 0318 	add.w	r3, r7, #24
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	482b      	ldr	r0, [pc, #172]	; (8002cac <HAL_UART_MspInit+0x114>)
 8002bfe:	f000 fef3 	bl	80039e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c10:	f107 0318 	add.w	r3, r7, #24
 8002c14:	4619      	mov	r1, r3
 8002c16:	4825      	ldr	r0, [pc, #148]	; (8002cac <HAL_UART_MspInit+0x114>)
 8002c18:	f000 fee6 	bl	80039e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	2100      	movs	r1, #0
 8002c20:	2025      	movs	r0, #37	; 0x25
 8002c22:	f000 fdf8 	bl	8003816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c26:	2025      	movs	r0, #37	; 0x25
 8002c28:	f000 fe11 	bl	800384e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002c2c:	e036      	b.n	8002c9c <HAL_UART_MspInit+0x104>
  else if(uartHandle->Instance==USART3)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a1f      	ldr	r2, [pc, #124]	; (8002cb0 <HAL_UART_MspInit+0x118>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d131      	bne.n	8002c9c <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c38:	4b1b      	ldr	r3, [pc, #108]	; (8002ca8 <HAL_UART_MspInit+0x110>)
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	4a1a      	ldr	r2, [pc, #104]	; (8002ca8 <HAL_UART_MspInit+0x110>)
 8002c3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c42:	61d3      	str	r3, [r2, #28]
 8002c44:	4b18      	ldr	r3, [pc, #96]	; (8002ca8 <HAL_UART_MspInit+0x110>)
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c50:	4b15      	ldr	r3, [pc, #84]	; (8002ca8 <HAL_UART_MspInit+0x110>)
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	4a14      	ldr	r2, [pc, #80]	; (8002ca8 <HAL_UART_MspInit+0x110>)
 8002c56:	f043 0308 	orr.w	r3, r3, #8
 8002c5a:	6193      	str	r3, [r2, #24]
 8002c5c:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <HAL_UART_MspInit+0x110>)
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	f003 0308 	and.w	r3, r3, #8
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c72:	2303      	movs	r3, #3
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c76:	f107 0318 	add.w	r3, r7, #24
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	480d      	ldr	r0, [pc, #52]	; (8002cb4 <HAL_UART_MspInit+0x11c>)
 8002c7e:	f000 feb3 	bl	80039e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002c82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c90:	f107 0318 	add.w	r3, r7, #24
 8002c94:	4619      	mov	r1, r3
 8002c96:	4807      	ldr	r0, [pc, #28]	; (8002cb4 <HAL_UART_MspInit+0x11c>)
 8002c98:	f000 fea6 	bl	80039e8 <HAL_GPIO_Init>
}
 8002c9c:	bf00      	nop
 8002c9e:	3728      	adds	r7, #40	; 0x28
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40013800 	.word	0x40013800
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40010800 	.word	0x40010800
 8002cb0:	40004800 	.word	0x40004800
 8002cb4:	40010c00 	.word	0x40010c00

08002cb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002cb8:	f7ff fd64 	bl	8002784 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cbc:	480b      	ldr	r0, [pc, #44]	; (8002cec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002cbe:	490c      	ldr	r1, [pc, #48]	; (8002cf0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002cc0:	4a0c      	ldr	r2, [pc, #48]	; (8002cf4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cc4:	e002      	b.n	8002ccc <LoopCopyDataInit>

08002cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cca:	3304      	adds	r3, #4

08002ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cd0:	d3f9      	bcc.n	8002cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cd2:	4a09      	ldr	r2, [pc, #36]	; (8002cf8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002cd4:	4c09      	ldr	r4, [pc, #36]	; (8002cfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cd8:	e001      	b.n	8002cde <LoopFillZerobss>

08002cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cdc:	3204      	adds	r2, #4

08002cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ce0:	d3fb      	bcc.n	8002cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ce2:	f003 fb0b 	bl	80062fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ce6:	f7ff f8fd 	bl	8001ee4 <main>
  bx lr
 8002cea:	4770      	bx	lr
  ldr r0, =_sdata
 8002cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cf0:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8002cf4:	0800ad8c 	.word	0x0800ad8c
  ldr r2, =_sbss
 8002cf8:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8002cfc:	2000045c 	.word	0x2000045c

08002d00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d00:	e7fe      	b.n	8002d00 <ADC1_2_IRQHandler>
	...

08002d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d08:	4b08      	ldr	r3, [pc, #32]	; (8002d2c <HAL_Init+0x28>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a07      	ldr	r2, [pc, #28]	; (8002d2c <HAL_Init+0x28>)
 8002d0e:	f043 0310 	orr.w	r3, r3, #16
 8002d12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d14:	2003      	movs	r0, #3
 8002d16:	f000 fd73 	bl	8003800 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d1a:	200f      	movs	r0, #15
 8002d1c:	f000 f808 	bl	8002d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d20:	f7ff fc0c 	bl	800253c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40022000 	.word	0x40022000

08002d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d38:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <HAL_InitTick+0x54>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	4b12      	ldr	r3, [pc, #72]	; (8002d88 <HAL_InitTick+0x58>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	4619      	mov	r1, r3
 8002d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 fd8b 	bl	800386a <HAL_SYSTICK_Config>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e00e      	b.n	8002d7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b0f      	cmp	r3, #15
 8002d62:	d80a      	bhi.n	8002d7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d64:	2200      	movs	r2, #0
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	f04f 30ff 	mov.w	r0, #4294967295
 8002d6c:	f000 fd53 	bl	8003816 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d70:	4a06      	ldr	r2, [pc, #24]	; (8002d8c <HAL_InitTick+0x5c>)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
 8002d78:	e000      	b.n	8002d7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	20000034 	.word	0x20000034
 8002d88:	2000003c 	.word	0x2000003c
 8002d8c:	20000038 	.word	0x20000038

08002d90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d94:	4b05      	ldr	r3, [pc, #20]	; (8002dac <HAL_IncTick+0x1c>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <HAL_IncTick+0x20>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4413      	add	r3, r2
 8002da0:	4a03      	ldr	r2, [pc, #12]	; (8002db0 <HAL_IncTick+0x20>)
 8002da2:	6013      	str	r3, [r2, #0]
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr
 8002dac:	2000003c 	.word	0x2000003c
 8002db0:	20000448 	.word	0x20000448

08002db4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  return uwTick;
 8002db8:	4b02      	ldr	r3, [pc, #8]	; (8002dc4 <HAL_GetTick+0x10>)
 8002dba:	681b      	ldr	r3, [r3, #0]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr
 8002dc4:	20000448 	.word	0x20000448

08002dc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dd0:	f7ff fff0 	bl	8002db4 <HAL_GetTick>
 8002dd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de0:	d005      	beq.n	8002dee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002de2:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <HAL_Delay+0x44>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	461a      	mov	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4413      	add	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dee:	bf00      	nop
 8002df0:	f7ff ffe0 	bl	8002db4 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d8f7      	bhi.n	8002df0 <HAL_Delay+0x28>
  {
  }
}
 8002e00:	bf00      	nop
 8002e02:	bf00      	nop
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	2000003c 	.word	0x2000003c

08002e10 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e0be      	b.n	8002fb0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d109      	bne.n	8002e54 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7fe fadc 	bl	800140c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 fbc5 	bl	80035e4 <ADC_ConversionStop_Disable>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e62:	f003 0310 	and.w	r3, r3, #16
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f040 8099 	bne.w	8002f9e <HAL_ADC_Init+0x18e>
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f040 8095 	bne.w	8002f9e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e78:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e7c:	f023 0302 	bic.w	r3, r3, #2
 8002e80:	f043 0202 	orr.w	r2, r3, #2
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e90:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	7b1b      	ldrb	r3, [r3, #12]
 8002e96:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e98:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ea8:	d003      	beq.n	8002eb2 <HAL_ADC_Init+0xa2>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d102      	bne.n	8002eb8 <HAL_ADC_Init+0xa8>
 8002eb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eb6:	e000      	b.n	8002eba <HAL_ADC_Init+0xaa>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	7d1b      	ldrb	r3, [r3, #20]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d119      	bne.n	8002efc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	7b1b      	ldrb	r3, [r3, #12]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d109      	bne.n	8002ee4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	035a      	lsls	r2, r3, #13
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	e00b      	b.n	8002efc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee8:	f043 0220 	orr.w	r2, r3, #32
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef4:	f043 0201 	orr.w	r2, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	4b28      	ldr	r3, [pc, #160]	; (8002fb8 <HAL_ADC_Init+0x1a8>)
 8002f18:	4013      	ands	r3, r2
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	68b9      	ldr	r1, [r7, #8]
 8002f20:	430b      	orrs	r3, r1
 8002f22:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f2c:	d003      	beq.n	8002f36 <HAL_ADC_Init+0x126>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d104      	bne.n	8002f40 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	051b      	lsls	r3, r3, #20
 8002f3e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f46:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	4b18      	ldr	r3, [pc, #96]	; (8002fbc <HAL_ADC_Init+0x1ac>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d10b      	bne.n	8002f7c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6e:	f023 0303 	bic.w	r3, r3, #3
 8002f72:	f043 0201 	orr.w	r2, r3, #1
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f7a:	e018      	b.n	8002fae <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f80:	f023 0312 	bic.w	r3, r3, #18
 8002f84:	f043 0210 	orr.w	r2, r3, #16
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f90:	f043 0201 	orr.w	r2, r3, #1
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f9c:	e007      	b.n	8002fae <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa2:	f043 0210 	orr.w	r2, r3, #16
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	ffe1f7fd 	.word	0xffe1f7fd
 8002fbc:	ff1f0efe 	.word	0xff1f0efe

08002fc0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d101      	bne.n	8002fda <HAL_ADC_Start+0x1a>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	e098      	b.n	800310c <HAL_ADC_Start+0x14c>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 faa4 	bl	8003530 <ADC_Enable>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f040 8087 	bne.w	8003102 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ffc:	f023 0301 	bic.w	r3, r3, #1
 8003000:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a41      	ldr	r2, [pc, #260]	; (8003114 <HAL_ADC_Start+0x154>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d105      	bne.n	800301e <HAL_ADC_Start+0x5e>
 8003012:	4b41      	ldr	r3, [pc, #260]	; (8003118 <HAL_ADC_Start+0x158>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d115      	bne.n	800304a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003022:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003034:	2b00      	cmp	r3, #0
 8003036:	d026      	beq.n	8003086 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003040:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003048:	e01d      	b.n	8003086 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a2f      	ldr	r2, [pc, #188]	; (8003118 <HAL_ADC_Start+0x158>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d004      	beq.n	800306a <HAL_ADC_Start+0xaa>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a2b      	ldr	r2, [pc, #172]	; (8003114 <HAL_ADC_Start+0x154>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d10d      	bne.n	8003086 <HAL_ADC_Start+0xc6>
 800306a:	4b2b      	ldr	r3, [pc, #172]	; (8003118 <HAL_ADC_Start+0x158>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003072:	2b00      	cmp	r3, #0
 8003074:	d007      	beq.n	8003086 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800307e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d006      	beq.n	80030a0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003096:	f023 0206 	bic.w	r2, r3, #6
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	62da      	str	r2, [r3, #44]	; 0x2c
 800309e:	e002      	b.n	80030a6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f06f 0202 	mvn.w	r2, #2
 80030b6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80030c2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80030c6:	d113      	bne.n	80030f0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80030cc:	4a11      	ldr	r2, [pc, #68]	; (8003114 <HAL_ADC_Start+0x154>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d105      	bne.n	80030de <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80030d2:	4b11      	ldr	r3, [pc, #68]	; (8003118 <HAL_ADC_Start+0x158>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d108      	bne.n	80030f0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80030ec:	609a      	str	r2, [r3, #8]
 80030ee:	e00c      	b.n	800310a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80030fe:	609a      	str	r2, [r3, #8]
 8003100:	e003      	b.n	800310a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800310a:	7bfb      	ldrb	r3, [r7, #15]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40012800 	.word	0x40012800
 8003118:	40012400 	.word	0x40012400

0800311c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800311c:	b590      	push	{r4, r7, lr}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003126:	2300      	movs	r3, #0
 8003128:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800312e:	2300      	movs	r3, #0
 8003130:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003132:	f7ff fe3f 	bl	8002db4 <HAL_GetTick>
 8003136:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00b      	beq.n	800315e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314a:	f043 0220 	orr.w	r2, r3, #32
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e0d3      	b.n	8003306 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d131      	bne.n	80031d0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003172:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003176:	2b00      	cmp	r3, #0
 8003178:	d12a      	bne.n	80031d0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800317a:	e021      	b.n	80031c0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003182:	d01d      	beq.n	80031c0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d007      	beq.n	800319a <HAL_ADC_PollForConversion+0x7e>
 800318a:	f7ff fe13 	bl	8002db4 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d212      	bcs.n	80031c0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10b      	bne.n	80031c0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ac:	f043 0204 	orr.w	r2, r3, #4
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e0a2      	b.n	8003306 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0d6      	beq.n	800317c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80031ce:	e070      	b.n	80032b2 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80031d0:	4b4f      	ldr	r3, [pc, #316]	; (8003310 <HAL_ADC_PollForConversion+0x1f4>)
 80031d2:	681c      	ldr	r4, [r3, #0]
 80031d4:	2002      	movs	r0, #2
 80031d6:	f001 fa81 	bl	80046dc <HAL_RCCEx_GetPeriphCLKFreq>
 80031da:	4603      	mov	r3, r0
 80031dc:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6919      	ldr	r1, [r3, #16]
 80031e6:	4b4b      	ldr	r3, [pc, #300]	; (8003314 <HAL_ADC_PollForConversion+0x1f8>)
 80031e8:	400b      	ands	r3, r1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d118      	bne.n	8003220 <HAL_ADC_PollForConversion+0x104>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68d9      	ldr	r1, [r3, #12]
 80031f4:	4b48      	ldr	r3, [pc, #288]	; (8003318 <HAL_ADC_PollForConversion+0x1fc>)
 80031f6:	400b      	ands	r3, r1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d111      	bne.n	8003220 <HAL_ADC_PollForConversion+0x104>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6919      	ldr	r1, [r3, #16]
 8003202:	4b46      	ldr	r3, [pc, #280]	; (800331c <HAL_ADC_PollForConversion+0x200>)
 8003204:	400b      	ands	r3, r1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d108      	bne.n	800321c <HAL_ADC_PollForConversion+0x100>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68d9      	ldr	r1, [r3, #12]
 8003210:	4b43      	ldr	r3, [pc, #268]	; (8003320 <HAL_ADC_PollForConversion+0x204>)
 8003212:	400b      	ands	r3, r1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_ADC_PollForConversion+0x100>
 8003218:	2314      	movs	r3, #20
 800321a:	e020      	b.n	800325e <HAL_ADC_PollForConversion+0x142>
 800321c:	2329      	movs	r3, #41	; 0x29
 800321e:	e01e      	b.n	800325e <HAL_ADC_PollForConversion+0x142>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6919      	ldr	r1, [r3, #16]
 8003226:	4b3d      	ldr	r3, [pc, #244]	; (800331c <HAL_ADC_PollForConversion+0x200>)
 8003228:	400b      	ands	r3, r1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <HAL_ADC_PollForConversion+0x120>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68d9      	ldr	r1, [r3, #12]
 8003234:	4b3a      	ldr	r3, [pc, #232]	; (8003320 <HAL_ADC_PollForConversion+0x204>)
 8003236:	400b      	ands	r3, r1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00d      	beq.n	8003258 <HAL_ADC_PollForConversion+0x13c>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6919      	ldr	r1, [r3, #16]
 8003242:	4b38      	ldr	r3, [pc, #224]	; (8003324 <HAL_ADC_PollForConversion+0x208>)
 8003244:	400b      	ands	r3, r1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d108      	bne.n	800325c <HAL_ADC_PollForConversion+0x140>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68d9      	ldr	r1, [r3, #12]
 8003250:	4b34      	ldr	r3, [pc, #208]	; (8003324 <HAL_ADC_PollForConversion+0x208>)
 8003252:	400b      	ands	r3, r1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_ADC_PollForConversion+0x140>
 8003258:	2354      	movs	r3, #84	; 0x54
 800325a:	e000      	b.n	800325e <HAL_ADC_PollForConversion+0x142>
 800325c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800325e:	fb02 f303 	mul.w	r3, r2, r3
 8003262:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003264:	e021      	b.n	80032aa <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326c:	d01a      	beq.n	80032a4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d007      	beq.n	8003284 <HAL_ADC_PollForConversion+0x168>
 8003274:	f7ff fd9e 	bl	8002db4 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d20f      	bcs.n	80032a4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	429a      	cmp	r2, r3
 800328a:	d90b      	bls.n	80032a4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	f043 0204 	orr.w	r2, r3, #4
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e030      	b.n	8003306 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	3301      	adds	r3, #1
 80032a8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d8d9      	bhi.n	8003266 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f06f 0212 	mvn.w	r2, #18
 80032ba:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80032d2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80032d6:	d115      	bne.n	8003304 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d111      	bne.n	8003304 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d105      	bne.n	8003304 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fc:	f043 0201 	orr.w	r2, r3, #1
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	371c      	adds	r7, #28
 800330a:	46bd      	mov	sp, r7
 800330c:	bd90      	pop	{r4, r7, pc}
 800330e:	bf00      	nop
 8003310:	20000034 	.word	0x20000034
 8003314:	24924924 	.word	0x24924924
 8003318:	00924924 	.word	0x00924924
 800331c:	12492492 	.word	0x12492492
 8003320:	00492492 	.word	0x00492492
 8003324:	00249249 	.word	0x00249249

08003328 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003336:	4618      	mov	r0, r3
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr

08003340 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800334e:	2300      	movs	r3, #0
 8003350:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x20>
 800335c:	2302      	movs	r3, #2
 800335e:	e0dc      	b.n	800351a <HAL_ADC_ConfigChannel+0x1da>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b06      	cmp	r3, #6
 800336e:	d81c      	bhi.n	80033aa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	3b05      	subs	r3, #5
 8003382:	221f      	movs	r2, #31
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	4019      	ands	r1, r3
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	6818      	ldr	r0, [r3, #0]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	3b05      	subs	r3, #5
 800339c:	fa00 f203 	lsl.w	r2, r0, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	635a      	str	r2, [r3, #52]	; 0x34
 80033a8:	e03c      	b.n	8003424 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b0c      	cmp	r3, #12
 80033b0:	d81c      	bhi.n	80033ec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	3b23      	subs	r3, #35	; 0x23
 80033c4:	221f      	movs	r2, #31
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43db      	mvns	r3, r3
 80033cc:	4019      	ands	r1, r3
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	3b23      	subs	r3, #35	; 0x23
 80033de:	fa00 f203 	lsl.w	r2, r0, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	631a      	str	r2, [r3, #48]	; 0x30
 80033ea:	e01b      	b.n	8003424 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	3b41      	subs	r3, #65	; 0x41
 80033fe:	221f      	movs	r2, #31
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	4019      	ands	r1, r3
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	3b41      	subs	r3, #65	; 0x41
 8003418:	fa00 f203 	lsl.w	r2, r0, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b09      	cmp	r3, #9
 800342a:	d91c      	bls.n	8003466 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68d9      	ldr	r1, [r3, #12]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	4613      	mov	r3, r2
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	4413      	add	r3, r2
 800343c:	3b1e      	subs	r3, #30
 800343e:	2207      	movs	r2, #7
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	43db      	mvns	r3, r3
 8003446:	4019      	ands	r1, r3
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	6898      	ldr	r0, [r3, #8]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	4613      	mov	r3, r2
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	4413      	add	r3, r2
 8003456:	3b1e      	subs	r3, #30
 8003458:	fa00 f203 	lsl.w	r2, r0, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	60da      	str	r2, [r3, #12]
 8003464:	e019      	b.n	800349a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6919      	ldr	r1, [r3, #16]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	4613      	mov	r3, r2
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	4413      	add	r3, r2
 8003476:	2207      	movs	r2, #7
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	43db      	mvns	r3, r3
 800347e:	4019      	ands	r1, r3
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	6898      	ldr	r0, [r3, #8]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	4613      	mov	r3, r2
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	4413      	add	r3, r2
 800348e:	fa00 f203 	lsl.w	r2, r0, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b10      	cmp	r3, #16
 80034a0:	d003      	beq.n	80034aa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80034a6:	2b11      	cmp	r3, #17
 80034a8:	d132      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a1d      	ldr	r2, [pc, #116]	; (8003524 <HAL_ADC_ConfigChannel+0x1e4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d125      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d126      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80034d0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b10      	cmp	r3, #16
 80034d8:	d11a      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034da:	4b13      	ldr	r3, [pc, #76]	; (8003528 <HAL_ADC_ConfigChannel+0x1e8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a13      	ldr	r2, [pc, #76]	; (800352c <HAL_ADC_ConfigChannel+0x1ec>)
 80034e0:	fba2 2303 	umull	r2, r3, r2, r3
 80034e4:	0c9a      	lsrs	r2, r3, #18
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034f0:	e002      	b.n	80034f8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	3b01      	subs	r3, #1
 80034f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f9      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x1b2>
 80034fe:	e007      	b.n	8003510 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003504:	f043 0220 	orr.w	r2, r3, #32
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003518:	7bfb      	ldrb	r3, [r7, #15]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr
 8003524:	40012400 	.word	0x40012400
 8003528:	20000034 	.word	0x20000034
 800352c:	431bde83 	.word	0x431bde83

08003530 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b01      	cmp	r3, #1
 800354c:	d040      	beq.n	80035d0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f042 0201 	orr.w	r2, r2, #1
 800355c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800355e:	4b1f      	ldr	r3, [pc, #124]	; (80035dc <ADC_Enable+0xac>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a1f      	ldr	r2, [pc, #124]	; (80035e0 <ADC_Enable+0xb0>)
 8003564:	fba2 2303 	umull	r2, r3, r2, r3
 8003568:	0c9b      	lsrs	r3, r3, #18
 800356a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800356c:	e002      	b.n	8003574 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	3b01      	subs	r3, #1
 8003572:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f9      	bne.n	800356e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800357a:	f7ff fc1b 	bl	8002db4 <HAL_GetTick>
 800357e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003580:	e01f      	b.n	80035c2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003582:	f7ff fc17 	bl	8002db4 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d918      	bls.n	80035c2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b01      	cmp	r3, #1
 800359c:	d011      	beq.n	80035c2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	f043 0210 	orr.w	r2, r3, #16
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ae:	f043 0201 	orr.w	r2, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e007      	b.n	80035d2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d1d8      	bne.n	8003582 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	20000034 	.word	0x20000034
 80035e0:	431bde83 	.word	0x431bde83

080035e4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d12e      	bne.n	800365c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0201 	bic.w	r2, r2, #1
 800360c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800360e:	f7ff fbd1 	bl	8002db4 <HAL_GetTick>
 8003612:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003614:	e01b      	b.n	800364e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003616:	f7ff fbcd 	bl	8002db4 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d914      	bls.n	800364e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b01      	cmp	r3, #1
 8003630:	d10d      	bne.n	800364e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003636:	f043 0210 	orr.w	r2, r3, #16
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003642:	f043 0201 	orr.w	r2, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e007      	b.n	800365e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b01      	cmp	r3, #1
 800365a:	d0dc      	beq.n	8003616 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003678:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <__NVIC_SetPriorityGrouping+0x44>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003684:	4013      	ands	r3, r2
 8003686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800369a:	4a04      	ldr	r2, [pc, #16]	; (80036ac <__NVIC_SetPriorityGrouping+0x44>)
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	60d3      	str	r3, [r2, #12]
}
 80036a0:	bf00      	nop
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bc80      	pop	{r7}
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	e000ed00 	.word	0xe000ed00

080036b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036b4:	4b04      	ldr	r3, [pc, #16]	; (80036c8 <__NVIC_GetPriorityGrouping+0x18>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	0a1b      	lsrs	r3, r3, #8
 80036ba:	f003 0307 	and.w	r3, r3, #7
}
 80036be:	4618      	mov	r0, r3
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bc80      	pop	{r7}
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	e000ed00 	.word	0xe000ed00

080036cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	db0b      	blt.n	80036f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036de:	79fb      	ldrb	r3, [r7, #7]
 80036e0:	f003 021f 	and.w	r2, r3, #31
 80036e4:	4906      	ldr	r1, [pc, #24]	; (8003700 <__NVIC_EnableIRQ+0x34>)
 80036e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ea:	095b      	lsrs	r3, r3, #5
 80036ec:	2001      	movs	r0, #1
 80036ee:	fa00 f202 	lsl.w	r2, r0, r2
 80036f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr
 8003700:	e000e100 	.word	0xe000e100

08003704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	6039      	str	r1, [r7, #0]
 800370e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003714:	2b00      	cmp	r3, #0
 8003716:	db0a      	blt.n	800372e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	b2da      	uxtb	r2, r3
 800371c:	490c      	ldr	r1, [pc, #48]	; (8003750 <__NVIC_SetPriority+0x4c>)
 800371e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003722:	0112      	lsls	r2, r2, #4
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	440b      	add	r3, r1
 8003728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800372c:	e00a      	b.n	8003744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	b2da      	uxtb	r2, r3
 8003732:	4908      	ldr	r1, [pc, #32]	; (8003754 <__NVIC_SetPriority+0x50>)
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	3b04      	subs	r3, #4
 800373c:	0112      	lsls	r2, r2, #4
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	440b      	add	r3, r1
 8003742:	761a      	strb	r2, [r3, #24]
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	bc80      	pop	{r7}
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	e000e100 	.word	0xe000e100
 8003754:	e000ed00 	.word	0xe000ed00

08003758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003758:	b480      	push	{r7}
 800375a:	b089      	sub	sp, #36	; 0x24
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f1c3 0307 	rsb	r3, r3, #7
 8003772:	2b04      	cmp	r3, #4
 8003774:	bf28      	it	cs
 8003776:	2304      	movcs	r3, #4
 8003778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	3304      	adds	r3, #4
 800377e:	2b06      	cmp	r3, #6
 8003780:	d902      	bls.n	8003788 <NVIC_EncodePriority+0x30>
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	3b03      	subs	r3, #3
 8003786:	e000      	b.n	800378a <NVIC_EncodePriority+0x32>
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800378c:	f04f 32ff 	mov.w	r2, #4294967295
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43da      	mvns	r2, r3
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	401a      	ands	r2, r3
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037a0:	f04f 31ff 	mov.w	r1, #4294967295
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	fa01 f303 	lsl.w	r3, r1, r3
 80037aa:	43d9      	mvns	r1, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b0:	4313      	orrs	r3, r2
         );
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3724      	adds	r7, #36	; 0x24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr

080037bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037cc:	d301      	bcc.n	80037d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037ce:	2301      	movs	r3, #1
 80037d0:	e00f      	b.n	80037f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037d2:	4a0a      	ldr	r2, [pc, #40]	; (80037fc <SysTick_Config+0x40>)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037da:	210f      	movs	r1, #15
 80037dc:	f04f 30ff 	mov.w	r0, #4294967295
 80037e0:	f7ff ff90 	bl	8003704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037e4:	4b05      	ldr	r3, [pc, #20]	; (80037fc <SysTick_Config+0x40>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ea:	4b04      	ldr	r3, [pc, #16]	; (80037fc <SysTick_Config+0x40>)
 80037ec:	2207      	movs	r2, #7
 80037ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	e000e010 	.word	0xe000e010

08003800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff ff2d 	bl	8003668 <__NVIC_SetPriorityGrouping>
}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003816:	b580      	push	{r7, lr}
 8003818:	b086      	sub	sp, #24
 800381a:	af00      	add	r7, sp, #0
 800381c:	4603      	mov	r3, r0
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	607a      	str	r2, [r7, #4]
 8003822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003824:	2300      	movs	r3, #0
 8003826:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003828:	f7ff ff42 	bl	80036b0 <__NVIC_GetPriorityGrouping>
 800382c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	68b9      	ldr	r1, [r7, #8]
 8003832:	6978      	ldr	r0, [r7, #20]
 8003834:	f7ff ff90 	bl	8003758 <NVIC_EncodePriority>
 8003838:	4602      	mov	r2, r0
 800383a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800383e:	4611      	mov	r1, r2
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff ff5f 	bl	8003704 <__NVIC_SetPriority>
}
 8003846:	bf00      	nop
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b082      	sub	sp, #8
 8003852:	af00      	add	r7, sp, #0
 8003854:	4603      	mov	r3, r0
 8003856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff ff35 	bl	80036cc <__NVIC_EnableIRQ>
}
 8003862:	bf00      	nop
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff ffa2 	bl	80037bc <SysTick_Config>
 8003878:	4603      	mov	r3, r0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003882:	b480      	push	{r7}
 8003884:	b085      	sub	sp, #20
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d008      	beq.n	80038ac <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2204      	movs	r2, #4
 800389e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e020      	b.n	80038ee <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 020e 	bic.w	r2, r2, #14
 80038ba:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0201 	bic.w	r2, r2, #1
 80038ca:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d4:	2101      	movs	r1, #1
 80038d6:	fa01 f202 	lsl.w	r2, r1, r2
 80038da:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr

080038f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d005      	beq.n	800391c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2204      	movs	r2, #4
 8003914:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	73fb      	strb	r3, [r7, #15]
 800391a:	e051      	b.n	80039c0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 020e 	bic.w	r2, r2, #14
 800392a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0201 	bic.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a22      	ldr	r2, [pc, #136]	; (80039cc <HAL_DMA_Abort_IT+0xd4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d029      	beq.n	800399a <HAL_DMA_Abort_IT+0xa2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a21      	ldr	r2, [pc, #132]	; (80039d0 <HAL_DMA_Abort_IT+0xd8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d022      	beq.n	8003996 <HAL_DMA_Abort_IT+0x9e>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a1f      	ldr	r2, [pc, #124]	; (80039d4 <HAL_DMA_Abort_IT+0xdc>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d01a      	beq.n	8003990 <HAL_DMA_Abort_IT+0x98>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a1e      	ldr	r2, [pc, #120]	; (80039d8 <HAL_DMA_Abort_IT+0xe0>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d012      	beq.n	800398a <HAL_DMA_Abort_IT+0x92>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a1c      	ldr	r2, [pc, #112]	; (80039dc <HAL_DMA_Abort_IT+0xe4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00a      	beq.n	8003984 <HAL_DMA_Abort_IT+0x8c>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a1b      	ldr	r2, [pc, #108]	; (80039e0 <HAL_DMA_Abort_IT+0xe8>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d102      	bne.n	800397e <HAL_DMA_Abort_IT+0x86>
 8003978:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800397c:	e00e      	b.n	800399c <HAL_DMA_Abort_IT+0xa4>
 800397e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003982:	e00b      	b.n	800399c <HAL_DMA_Abort_IT+0xa4>
 8003984:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003988:	e008      	b.n	800399c <HAL_DMA_Abort_IT+0xa4>
 800398a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800398e:	e005      	b.n	800399c <HAL_DMA_Abort_IT+0xa4>
 8003990:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003994:	e002      	b.n	800399c <HAL_DMA_Abort_IT+0xa4>
 8003996:	2310      	movs	r3, #16
 8003998:	e000      	b.n	800399c <HAL_DMA_Abort_IT+0xa4>
 800399a:	2301      	movs	r3, #1
 800399c:	4a11      	ldr	r2, [pc, #68]	; (80039e4 <HAL_DMA_Abort_IT+0xec>)
 800399e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	4798      	blx	r3
    } 
  }
  return status;
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40020008 	.word	0x40020008
 80039d0:	4002001c 	.word	0x4002001c
 80039d4:	40020030 	.word	0x40020030
 80039d8:	40020044 	.word	0x40020044
 80039dc:	40020058 	.word	0x40020058
 80039e0:	4002006c 	.word	0x4002006c
 80039e4:	40020000 	.word	0x40020000

080039e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b08b      	sub	sp, #44	; 0x2c
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039f2:	2300      	movs	r3, #0
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80039f6:	2300      	movs	r3, #0
 80039f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039fa:	e169      	b.n	8003cd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80039fc:	2201      	movs	r2, #1
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	69fa      	ldr	r2, [r7, #28]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	f040 8158 	bne.w	8003cca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	4a9a      	ldr	r2, [pc, #616]	; (8003c88 <HAL_GPIO_Init+0x2a0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d05e      	beq.n	8003ae2 <HAL_GPIO_Init+0xfa>
 8003a24:	4a98      	ldr	r2, [pc, #608]	; (8003c88 <HAL_GPIO_Init+0x2a0>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d875      	bhi.n	8003b16 <HAL_GPIO_Init+0x12e>
 8003a2a:	4a98      	ldr	r2, [pc, #608]	; (8003c8c <HAL_GPIO_Init+0x2a4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d058      	beq.n	8003ae2 <HAL_GPIO_Init+0xfa>
 8003a30:	4a96      	ldr	r2, [pc, #600]	; (8003c8c <HAL_GPIO_Init+0x2a4>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d86f      	bhi.n	8003b16 <HAL_GPIO_Init+0x12e>
 8003a36:	4a96      	ldr	r2, [pc, #600]	; (8003c90 <HAL_GPIO_Init+0x2a8>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d052      	beq.n	8003ae2 <HAL_GPIO_Init+0xfa>
 8003a3c:	4a94      	ldr	r2, [pc, #592]	; (8003c90 <HAL_GPIO_Init+0x2a8>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d869      	bhi.n	8003b16 <HAL_GPIO_Init+0x12e>
 8003a42:	4a94      	ldr	r2, [pc, #592]	; (8003c94 <HAL_GPIO_Init+0x2ac>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d04c      	beq.n	8003ae2 <HAL_GPIO_Init+0xfa>
 8003a48:	4a92      	ldr	r2, [pc, #584]	; (8003c94 <HAL_GPIO_Init+0x2ac>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d863      	bhi.n	8003b16 <HAL_GPIO_Init+0x12e>
 8003a4e:	4a92      	ldr	r2, [pc, #584]	; (8003c98 <HAL_GPIO_Init+0x2b0>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d046      	beq.n	8003ae2 <HAL_GPIO_Init+0xfa>
 8003a54:	4a90      	ldr	r2, [pc, #576]	; (8003c98 <HAL_GPIO_Init+0x2b0>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d85d      	bhi.n	8003b16 <HAL_GPIO_Init+0x12e>
 8003a5a:	2b12      	cmp	r3, #18
 8003a5c:	d82a      	bhi.n	8003ab4 <HAL_GPIO_Init+0xcc>
 8003a5e:	2b12      	cmp	r3, #18
 8003a60:	d859      	bhi.n	8003b16 <HAL_GPIO_Init+0x12e>
 8003a62:	a201      	add	r2, pc, #4	; (adr r2, 8003a68 <HAL_GPIO_Init+0x80>)
 8003a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a68:	08003ae3 	.word	0x08003ae3
 8003a6c:	08003abd 	.word	0x08003abd
 8003a70:	08003acf 	.word	0x08003acf
 8003a74:	08003b11 	.word	0x08003b11
 8003a78:	08003b17 	.word	0x08003b17
 8003a7c:	08003b17 	.word	0x08003b17
 8003a80:	08003b17 	.word	0x08003b17
 8003a84:	08003b17 	.word	0x08003b17
 8003a88:	08003b17 	.word	0x08003b17
 8003a8c:	08003b17 	.word	0x08003b17
 8003a90:	08003b17 	.word	0x08003b17
 8003a94:	08003b17 	.word	0x08003b17
 8003a98:	08003b17 	.word	0x08003b17
 8003a9c:	08003b17 	.word	0x08003b17
 8003aa0:	08003b17 	.word	0x08003b17
 8003aa4:	08003b17 	.word	0x08003b17
 8003aa8:	08003b17 	.word	0x08003b17
 8003aac:	08003ac5 	.word	0x08003ac5
 8003ab0:	08003ad9 	.word	0x08003ad9
 8003ab4:	4a79      	ldr	r2, [pc, #484]	; (8003c9c <HAL_GPIO_Init+0x2b4>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d013      	beq.n	8003ae2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003aba:	e02c      	b.n	8003b16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	623b      	str	r3, [r7, #32]
          break;
 8003ac2:	e029      	b.n	8003b18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	623b      	str	r3, [r7, #32]
          break;
 8003acc:	e024      	b.n	8003b18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	3308      	adds	r3, #8
 8003ad4:	623b      	str	r3, [r7, #32]
          break;
 8003ad6:	e01f      	b.n	8003b18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	330c      	adds	r3, #12
 8003ade:	623b      	str	r3, [r7, #32]
          break;
 8003ae0:	e01a      	b.n	8003b18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d102      	bne.n	8003af0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003aea:	2304      	movs	r3, #4
 8003aec:	623b      	str	r3, [r7, #32]
          break;
 8003aee:	e013      	b.n	8003b18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d105      	bne.n	8003b04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003af8:	2308      	movs	r3, #8
 8003afa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	69fa      	ldr	r2, [r7, #28]
 8003b00:	611a      	str	r2, [r3, #16]
          break;
 8003b02:	e009      	b.n	8003b18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b04:	2308      	movs	r3, #8
 8003b06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	69fa      	ldr	r2, [r7, #28]
 8003b0c:	615a      	str	r2, [r3, #20]
          break;
 8003b0e:	e003      	b.n	8003b18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b10:	2300      	movs	r3, #0
 8003b12:	623b      	str	r3, [r7, #32]
          break;
 8003b14:	e000      	b.n	8003b18 <HAL_GPIO_Init+0x130>
          break;
 8003b16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	2bff      	cmp	r3, #255	; 0xff
 8003b1c:	d801      	bhi.n	8003b22 <HAL_GPIO_Init+0x13a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	e001      	b.n	8003b26 <HAL_GPIO_Init+0x13e>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	3304      	adds	r3, #4
 8003b26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	2bff      	cmp	r3, #255	; 0xff
 8003b2c:	d802      	bhi.n	8003b34 <HAL_GPIO_Init+0x14c>
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	e002      	b.n	8003b3a <HAL_GPIO_Init+0x152>
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	3b08      	subs	r3, #8
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	210f      	movs	r1, #15
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	fa01 f303 	lsl.w	r3, r1, r3
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	401a      	ands	r2, r3
 8003b4c:	6a39      	ldr	r1, [r7, #32]
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	fa01 f303 	lsl.w	r3, r1, r3
 8003b54:	431a      	orrs	r2, r3
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 80b1 	beq.w	8003cca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b68:	4b4d      	ldr	r3, [pc, #308]	; (8003ca0 <HAL_GPIO_Init+0x2b8>)
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	4a4c      	ldr	r2, [pc, #304]	; (8003ca0 <HAL_GPIO_Init+0x2b8>)
 8003b6e:	f043 0301 	orr.w	r3, r3, #1
 8003b72:	6193      	str	r3, [r2, #24]
 8003b74:	4b4a      	ldr	r3, [pc, #296]	; (8003ca0 <HAL_GPIO_Init+0x2b8>)
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	60bb      	str	r3, [r7, #8]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b80:	4a48      	ldr	r2, [pc, #288]	; (8003ca4 <HAL_GPIO_Init+0x2bc>)
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	089b      	lsrs	r3, r3, #2
 8003b86:	3302      	adds	r3, #2
 8003b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	f003 0303 	and.w	r3, r3, #3
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	220f      	movs	r2, #15
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a40      	ldr	r2, [pc, #256]	; (8003ca8 <HAL_GPIO_Init+0x2c0>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d013      	beq.n	8003bd4 <HAL_GPIO_Init+0x1ec>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a3f      	ldr	r2, [pc, #252]	; (8003cac <HAL_GPIO_Init+0x2c4>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d00d      	beq.n	8003bd0 <HAL_GPIO_Init+0x1e8>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a3e      	ldr	r2, [pc, #248]	; (8003cb0 <HAL_GPIO_Init+0x2c8>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d007      	beq.n	8003bcc <HAL_GPIO_Init+0x1e4>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a3d      	ldr	r2, [pc, #244]	; (8003cb4 <HAL_GPIO_Init+0x2cc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d101      	bne.n	8003bc8 <HAL_GPIO_Init+0x1e0>
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e006      	b.n	8003bd6 <HAL_GPIO_Init+0x1ee>
 8003bc8:	2304      	movs	r3, #4
 8003bca:	e004      	b.n	8003bd6 <HAL_GPIO_Init+0x1ee>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e002      	b.n	8003bd6 <HAL_GPIO_Init+0x1ee>
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e000      	b.n	8003bd6 <HAL_GPIO_Init+0x1ee>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd8:	f002 0203 	and.w	r2, r2, #3
 8003bdc:	0092      	lsls	r2, r2, #2
 8003bde:	4093      	lsls	r3, r2
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003be6:	492f      	ldr	r1, [pc, #188]	; (8003ca4 <HAL_GPIO_Init+0x2bc>)
 8003be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bea:	089b      	lsrs	r3, r3, #2
 8003bec:	3302      	adds	r3, #2
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d006      	beq.n	8003c0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003c00:	4b2d      	ldr	r3, [pc, #180]	; (8003cb8 <HAL_GPIO_Init+0x2d0>)
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	492c      	ldr	r1, [pc, #176]	; (8003cb8 <HAL_GPIO_Init+0x2d0>)
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	608b      	str	r3, [r1, #8]
 8003c0c:	e006      	b.n	8003c1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003c0e:	4b2a      	ldr	r3, [pc, #168]	; (8003cb8 <HAL_GPIO_Init+0x2d0>)
 8003c10:	689a      	ldr	r2, [r3, #8]
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	43db      	mvns	r3, r3
 8003c16:	4928      	ldr	r1, [pc, #160]	; (8003cb8 <HAL_GPIO_Init+0x2d0>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d006      	beq.n	8003c36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c28:	4b23      	ldr	r3, [pc, #140]	; (8003cb8 <HAL_GPIO_Init+0x2d0>)
 8003c2a:	68da      	ldr	r2, [r3, #12]
 8003c2c:	4922      	ldr	r1, [pc, #136]	; (8003cb8 <HAL_GPIO_Init+0x2d0>)
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	60cb      	str	r3, [r1, #12]
 8003c34:	e006      	b.n	8003c44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003c36:	4b20      	ldr	r3, [pc, #128]	; (8003cb8 <HAL_GPIO_Init+0x2d0>)
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	491e      	ldr	r1, [pc, #120]	; (8003cb8 <HAL_GPIO_Init+0x2d0>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d006      	beq.n	8003c5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c50:	4b19      	ldr	r3, [pc, #100]	; (8003cb8 <HAL_GPIO_Init+0x2d0>)
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	4918      	ldr	r1, [pc, #96]	; (8003cb8 <HAL_GPIO_Init+0x2d0>)
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	604b      	str	r3, [r1, #4]
 8003c5c:	e006      	b.n	8003c6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c5e:	4b16      	ldr	r3, [pc, #88]	; (8003cb8 <HAL_GPIO_Init+0x2d0>)
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	43db      	mvns	r3, r3
 8003c66:	4914      	ldr	r1, [pc, #80]	; (8003cb8 <HAL_GPIO_Init+0x2d0>)
 8003c68:	4013      	ands	r3, r2
 8003c6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d021      	beq.n	8003cbc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c78:	4b0f      	ldr	r3, [pc, #60]	; (8003cb8 <HAL_GPIO_Init+0x2d0>)
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	490e      	ldr	r1, [pc, #56]	; (8003cb8 <HAL_GPIO_Init+0x2d0>)
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	600b      	str	r3, [r1, #0]
 8003c84:	e021      	b.n	8003cca <HAL_GPIO_Init+0x2e2>
 8003c86:	bf00      	nop
 8003c88:	10320000 	.word	0x10320000
 8003c8c:	10310000 	.word	0x10310000
 8003c90:	10220000 	.word	0x10220000
 8003c94:	10210000 	.word	0x10210000
 8003c98:	10120000 	.word	0x10120000
 8003c9c:	10110000 	.word	0x10110000
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	40010000 	.word	0x40010000
 8003ca8:	40010800 	.word	0x40010800
 8003cac:	40010c00 	.word	0x40010c00
 8003cb0:	40011000 	.word	0x40011000
 8003cb4:	40011400 	.word	0x40011400
 8003cb8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <HAL_GPIO_Init+0x304>)
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	4909      	ldr	r1, [pc, #36]	; (8003cec <HAL_GPIO_Init+0x304>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	3301      	adds	r3, #1
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f47f ae8e 	bne.w	80039fc <HAL_GPIO_Init+0x14>
  }
}
 8003ce0:	bf00      	nop
 8003ce2:	bf00      	nop
 8003ce4:	372c      	adds	r7, #44	; 0x2c
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr
 8003cec:	40010400 	.word	0x40010400

08003cf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	887b      	ldrh	r3, [r7, #2]
 8003d02:	4013      	ands	r3, r2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	73fb      	strb	r3, [r7, #15]
 8003d0c:	e001      	b.n	8003d12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	4770      	bx	lr

08003d1e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
 8003d26:	460b      	mov	r3, r1
 8003d28:	807b      	strh	r3, [r7, #2]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d2e:	787b      	ldrb	r3, [r7, #1]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d003      	beq.n	8003d3c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d34:	887a      	ldrh	r2, [r7, #2]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003d3a:	e003      	b.n	8003d44 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d3c:	887b      	ldrh	r3, [r7, #2]
 8003d3e:	041a      	lsls	r2, r3, #16
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	611a      	str	r2, [r3, #16]
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bc80      	pop	{r7}
 8003d4c:	4770      	bx	lr
	...

08003d50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e272      	b.n	8004248 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 8087 	beq.w	8003e7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d70:	4b92      	ldr	r3, [pc, #584]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f003 030c 	and.w	r3, r3, #12
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d00c      	beq.n	8003d96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d7c:	4b8f      	ldr	r3, [pc, #572]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f003 030c 	and.w	r3, r3, #12
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d112      	bne.n	8003dae <HAL_RCC_OscConfig+0x5e>
 8003d88:	4b8c      	ldr	r3, [pc, #560]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d94:	d10b      	bne.n	8003dae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d96:	4b89      	ldr	r3, [pc, #548]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d06c      	beq.n	8003e7c <HAL_RCC_OscConfig+0x12c>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d168      	bne.n	8003e7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e24c      	b.n	8004248 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db6:	d106      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x76>
 8003db8:	4b80      	ldr	r3, [pc, #512]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a7f      	ldr	r2, [pc, #508]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc2:	6013      	str	r3, [r2, #0]
 8003dc4:	e02e      	b.n	8003e24 <HAL_RCC_OscConfig+0xd4>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10c      	bne.n	8003de8 <HAL_RCC_OscConfig+0x98>
 8003dce:	4b7b      	ldr	r3, [pc, #492]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a7a      	ldr	r2, [pc, #488]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	4b78      	ldr	r3, [pc, #480]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a77      	ldr	r2, [pc, #476]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003de0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	e01d      	b.n	8003e24 <HAL_RCC_OscConfig+0xd4>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003df0:	d10c      	bne.n	8003e0c <HAL_RCC_OscConfig+0xbc>
 8003df2:	4b72      	ldr	r3, [pc, #456]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a71      	ldr	r2, [pc, #452]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	4b6f      	ldr	r3, [pc, #444]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a6e      	ldr	r2, [pc, #440]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	e00b      	b.n	8003e24 <HAL_RCC_OscConfig+0xd4>
 8003e0c:	4b6b      	ldr	r3, [pc, #428]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a6a      	ldr	r2, [pc, #424]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e16:	6013      	str	r3, [r2, #0]
 8003e18:	4b68      	ldr	r3, [pc, #416]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a67      	ldr	r2, [pc, #412]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d013      	beq.n	8003e54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2c:	f7fe ffc2 	bl	8002db4 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e34:	f7fe ffbe 	bl	8002db4 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b64      	cmp	r3, #100	; 0x64
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e200      	b.n	8004248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e46:	4b5d      	ldr	r3, [pc, #372]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0f0      	beq.n	8003e34 <HAL_RCC_OscConfig+0xe4>
 8003e52:	e014      	b.n	8003e7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e54:	f7fe ffae 	bl	8002db4 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e5c:	f7fe ffaa 	bl	8002db4 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b64      	cmp	r3, #100	; 0x64
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e1ec      	b.n	8004248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e6e:	4b53      	ldr	r3, [pc, #332]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1f0      	bne.n	8003e5c <HAL_RCC_OscConfig+0x10c>
 8003e7a:	e000      	b.n	8003e7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d063      	beq.n	8003f52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e8a:	4b4c      	ldr	r3, [pc, #304]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f003 030c 	and.w	r3, r3, #12
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00b      	beq.n	8003eae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e96:	4b49      	ldr	r3, [pc, #292]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f003 030c 	and.w	r3, r3, #12
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d11c      	bne.n	8003edc <HAL_RCC_OscConfig+0x18c>
 8003ea2:	4b46      	ldr	r3, [pc, #280]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d116      	bne.n	8003edc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eae:	4b43      	ldr	r3, [pc, #268]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d005      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x176>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d001      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e1c0      	b.n	8004248 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec6:	4b3d      	ldr	r3, [pc, #244]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	4939      	ldr	r1, [pc, #228]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eda:	e03a      	b.n	8003f52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d020      	beq.n	8003f26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ee4:	4b36      	ldr	r3, [pc, #216]	; (8003fc0 <HAL_RCC_OscConfig+0x270>)
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eea:	f7fe ff63 	bl	8002db4 <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef0:	e008      	b.n	8003f04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ef2:	f7fe ff5f 	bl	8002db4 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d901      	bls.n	8003f04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e1a1      	b.n	8004248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f04:	4b2d      	ldr	r3, [pc, #180]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0f0      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f10:	4b2a      	ldr	r3, [pc, #168]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	4927      	ldr	r1, [pc, #156]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	600b      	str	r3, [r1, #0]
 8003f24:	e015      	b.n	8003f52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f26:	4b26      	ldr	r3, [pc, #152]	; (8003fc0 <HAL_RCC_OscConfig+0x270>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2c:	f7fe ff42 	bl	8002db4 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f34:	f7fe ff3e 	bl	8002db4 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e180      	b.n	8004248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f46:	4b1d      	ldr	r3, [pc, #116]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f0      	bne.n	8003f34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d03a      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d019      	beq.n	8003f9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f66:	4b17      	ldr	r3, [pc, #92]	; (8003fc4 <HAL_RCC_OscConfig+0x274>)
 8003f68:	2201      	movs	r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f6c:	f7fe ff22 	bl	8002db4 <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f74:	f7fe ff1e 	bl	8002db4 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e160      	b.n	8004248 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f86:	4b0d      	ldr	r3, [pc, #52]	; (8003fbc <HAL_RCC_OscConfig+0x26c>)
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0f0      	beq.n	8003f74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f92:	2001      	movs	r0, #1
 8003f94:	f000 face 	bl	8004534 <RCC_Delay>
 8003f98:	e01c      	b.n	8003fd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f9a:	4b0a      	ldr	r3, [pc, #40]	; (8003fc4 <HAL_RCC_OscConfig+0x274>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa0:	f7fe ff08 	bl	8002db4 <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa6:	e00f      	b.n	8003fc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fa8:	f7fe ff04 	bl	8002db4 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d908      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e146      	b.n	8004248 <HAL_RCC_OscConfig+0x4f8>
 8003fba:	bf00      	nop
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	42420000 	.word	0x42420000
 8003fc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc8:	4b92      	ldr	r3, [pc, #584]	; (8004214 <HAL_RCC_OscConfig+0x4c4>)
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1e9      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 80a6 	beq.w	800412e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fe6:	4b8b      	ldr	r3, [pc, #556]	; (8004214 <HAL_RCC_OscConfig+0x4c4>)
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10d      	bne.n	800400e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ff2:	4b88      	ldr	r3, [pc, #544]	; (8004214 <HAL_RCC_OscConfig+0x4c4>)
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	4a87      	ldr	r2, [pc, #540]	; (8004214 <HAL_RCC_OscConfig+0x4c4>)
 8003ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ffc:	61d3      	str	r3, [r2, #28]
 8003ffe:	4b85      	ldr	r3, [pc, #532]	; (8004214 <HAL_RCC_OscConfig+0x4c4>)
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004006:	60bb      	str	r3, [r7, #8]
 8004008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800400a:	2301      	movs	r3, #1
 800400c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800400e:	4b82      	ldr	r3, [pc, #520]	; (8004218 <HAL_RCC_OscConfig+0x4c8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004016:	2b00      	cmp	r3, #0
 8004018:	d118      	bne.n	800404c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800401a:	4b7f      	ldr	r3, [pc, #508]	; (8004218 <HAL_RCC_OscConfig+0x4c8>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a7e      	ldr	r2, [pc, #504]	; (8004218 <HAL_RCC_OscConfig+0x4c8>)
 8004020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004026:	f7fe fec5 	bl	8002db4 <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800402e:	f7fe fec1 	bl	8002db4 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b64      	cmp	r3, #100	; 0x64
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e103      	b.n	8004248 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004040:	4b75      	ldr	r3, [pc, #468]	; (8004218 <HAL_RCC_OscConfig+0x4c8>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004048:	2b00      	cmp	r3, #0
 800404a:	d0f0      	beq.n	800402e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d106      	bne.n	8004062 <HAL_RCC_OscConfig+0x312>
 8004054:	4b6f      	ldr	r3, [pc, #444]	; (8004214 <HAL_RCC_OscConfig+0x4c4>)
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	4a6e      	ldr	r2, [pc, #440]	; (8004214 <HAL_RCC_OscConfig+0x4c4>)
 800405a:	f043 0301 	orr.w	r3, r3, #1
 800405e:	6213      	str	r3, [r2, #32]
 8004060:	e02d      	b.n	80040be <HAL_RCC_OscConfig+0x36e>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10c      	bne.n	8004084 <HAL_RCC_OscConfig+0x334>
 800406a:	4b6a      	ldr	r3, [pc, #424]	; (8004214 <HAL_RCC_OscConfig+0x4c4>)
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	4a69      	ldr	r2, [pc, #420]	; (8004214 <HAL_RCC_OscConfig+0x4c4>)
 8004070:	f023 0301 	bic.w	r3, r3, #1
 8004074:	6213      	str	r3, [r2, #32]
 8004076:	4b67      	ldr	r3, [pc, #412]	; (8004214 <HAL_RCC_OscConfig+0x4c4>)
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	4a66      	ldr	r2, [pc, #408]	; (8004214 <HAL_RCC_OscConfig+0x4c4>)
 800407c:	f023 0304 	bic.w	r3, r3, #4
 8004080:	6213      	str	r3, [r2, #32]
 8004082:	e01c      	b.n	80040be <HAL_RCC_OscConfig+0x36e>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	2b05      	cmp	r3, #5
 800408a:	d10c      	bne.n	80040a6 <HAL_RCC_OscConfig+0x356>
 800408c:	4b61      	ldr	r3, [pc, #388]	; (8004214 <HAL_RCC_OscConfig+0x4c4>)
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	4a60      	ldr	r2, [pc, #384]	; (8004214 <HAL_RCC_OscConfig+0x4c4>)
 8004092:	f043 0304 	orr.w	r3, r3, #4
 8004096:	6213      	str	r3, [r2, #32]
 8004098:	4b5e      	ldr	r3, [pc, #376]	; (8004214 <HAL_RCC_OscConfig+0x4c4>)
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	4a5d      	ldr	r2, [pc, #372]	; (8004214 <HAL_RCC_OscConfig+0x4c4>)
 800409e:	f043 0301 	orr.w	r3, r3, #1
 80040a2:	6213      	str	r3, [r2, #32]
 80040a4:	e00b      	b.n	80040be <HAL_RCC_OscConfig+0x36e>
 80040a6:	4b5b      	ldr	r3, [pc, #364]	; (8004214 <HAL_RCC_OscConfig+0x4c4>)
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	4a5a      	ldr	r2, [pc, #360]	; (8004214 <HAL_RCC_OscConfig+0x4c4>)
 80040ac:	f023 0301 	bic.w	r3, r3, #1
 80040b0:	6213      	str	r3, [r2, #32]
 80040b2:	4b58      	ldr	r3, [pc, #352]	; (8004214 <HAL_RCC_OscConfig+0x4c4>)
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	4a57      	ldr	r2, [pc, #348]	; (8004214 <HAL_RCC_OscConfig+0x4c4>)
 80040b8:	f023 0304 	bic.w	r3, r3, #4
 80040bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d015      	beq.n	80040f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040c6:	f7fe fe75 	bl	8002db4 <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040cc:	e00a      	b.n	80040e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ce:	f7fe fe71 	bl	8002db4 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040dc:	4293      	cmp	r3, r2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e0b1      	b.n	8004248 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e4:	4b4b      	ldr	r3, [pc, #300]	; (8004214 <HAL_RCC_OscConfig+0x4c4>)
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0ee      	beq.n	80040ce <HAL_RCC_OscConfig+0x37e>
 80040f0:	e014      	b.n	800411c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040f2:	f7fe fe5f 	bl	8002db4 <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040f8:	e00a      	b.n	8004110 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040fa:	f7fe fe5b 	bl	8002db4 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	f241 3288 	movw	r2, #5000	; 0x1388
 8004108:	4293      	cmp	r3, r2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e09b      	b.n	8004248 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004110:	4b40      	ldr	r3, [pc, #256]	; (8004214 <HAL_RCC_OscConfig+0x4c4>)
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1ee      	bne.n	80040fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800411c:	7dfb      	ldrb	r3, [r7, #23]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d105      	bne.n	800412e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004122:	4b3c      	ldr	r3, [pc, #240]	; (8004214 <HAL_RCC_OscConfig+0x4c4>)
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	4a3b      	ldr	r2, [pc, #236]	; (8004214 <HAL_RCC_OscConfig+0x4c4>)
 8004128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800412c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 8087 	beq.w	8004246 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004138:	4b36      	ldr	r3, [pc, #216]	; (8004214 <HAL_RCC_OscConfig+0x4c4>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f003 030c 	and.w	r3, r3, #12
 8004140:	2b08      	cmp	r3, #8
 8004142:	d061      	beq.n	8004208 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	2b02      	cmp	r3, #2
 800414a:	d146      	bne.n	80041da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800414c:	4b33      	ldr	r3, [pc, #204]	; (800421c <HAL_RCC_OscConfig+0x4cc>)
 800414e:	2200      	movs	r2, #0
 8004150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004152:	f7fe fe2f 	bl	8002db4 <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800415a:	f7fe fe2b 	bl	8002db4 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e06d      	b.n	8004248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800416c:	4b29      	ldr	r3, [pc, #164]	; (8004214 <HAL_RCC_OscConfig+0x4c4>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1f0      	bne.n	800415a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004180:	d108      	bne.n	8004194 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004182:	4b24      	ldr	r3, [pc, #144]	; (8004214 <HAL_RCC_OscConfig+0x4c4>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	4921      	ldr	r1, [pc, #132]	; (8004214 <HAL_RCC_OscConfig+0x4c4>)
 8004190:	4313      	orrs	r3, r2
 8004192:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004194:	4b1f      	ldr	r3, [pc, #124]	; (8004214 <HAL_RCC_OscConfig+0x4c4>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a19      	ldr	r1, [r3, #32]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	430b      	orrs	r3, r1
 80041a6:	491b      	ldr	r1, [pc, #108]	; (8004214 <HAL_RCC_OscConfig+0x4c4>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041ac:	4b1b      	ldr	r3, [pc, #108]	; (800421c <HAL_RCC_OscConfig+0x4cc>)
 80041ae:	2201      	movs	r2, #1
 80041b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b2:	f7fe fdff 	bl	8002db4 <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ba:	f7fe fdfb 	bl	8002db4 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e03d      	b.n	8004248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041cc:	4b11      	ldr	r3, [pc, #68]	; (8004214 <HAL_RCC_OscConfig+0x4c4>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0f0      	beq.n	80041ba <HAL_RCC_OscConfig+0x46a>
 80041d8:	e035      	b.n	8004246 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041da:	4b10      	ldr	r3, [pc, #64]	; (800421c <HAL_RCC_OscConfig+0x4cc>)
 80041dc:	2200      	movs	r2, #0
 80041de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e0:	f7fe fde8 	bl	8002db4 <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e8:	f7fe fde4 	bl	8002db4 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e026      	b.n	8004248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041fa:	4b06      	ldr	r3, [pc, #24]	; (8004214 <HAL_RCC_OscConfig+0x4c4>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1f0      	bne.n	80041e8 <HAL_RCC_OscConfig+0x498>
 8004206:	e01e      	b.n	8004246 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	69db      	ldr	r3, [r3, #28]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d107      	bne.n	8004220 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e019      	b.n	8004248 <HAL_RCC_OscConfig+0x4f8>
 8004214:	40021000 	.word	0x40021000
 8004218:	40007000 	.word	0x40007000
 800421c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004220:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <HAL_RCC_OscConfig+0x500>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	429a      	cmp	r2, r3
 8004232:	d106      	bne.n	8004242 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800423e:	429a      	cmp	r2, r3
 8004240:	d001      	beq.n	8004246 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e000      	b.n	8004248 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40021000 	.word	0x40021000

08004254 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e0d0      	b.n	800440a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004268:	4b6a      	ldr	r3, [pc, #424]	; (8004414 <HAL_RCC_ClockConfig+0x1c0>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	429a      	cmp	r2, r3
 8004274:	d910      	bls.n	8004298 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004276:	4b67      	ldr	r3, [pc, #412]	; (8004414 <HAL_RCC_ClockConfig+0x1c0>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f023 0207 	bic.w	r2, r3, #7
 800427e:	4965      	ldr	r1, [pc, #404]	; (8004414 <HAL_RCC_ClockConfig+0x1c0>)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	4313      	orrs	r3, r2
 8004284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004286:	4b63      	ldr	r3, [pc, #396]	; (8004414 <HAL_RCC_ClockConfig+0x1c0>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0307 	and.w	r3, r3, #7
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	429a      	cmp	r2, r3
 8004292:	d001      	beq.n	8004298 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e0b8      	b.n	800440a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d020      	beq.n	80042e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d005      	beq.n	80042bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042b0:	4b59      	ldr	r3, [pc, #356]	; (8004418 <HAL_RCC_ClockConfig+0x1c4>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	4a58      	ldr	r2, [pc, #352]	; (8004418 <HAL_RCC_ClockConfig+0x1c4>)
 80042b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d005      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042c8:	4b53      	ldr	r3, [pc, #332]	; (8004418 <HAL_RCC_ClockConfig+0x1c4>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	4a52      	ldr	r2, [pc, #328]	; (8004418 <HAL_RCC_ClockConfig+0x1c4>)
 80042ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80042d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042d4:	4b50      	ldr	r3, [pc, #320]	; (8004418 <HAL_RCC_ClockConfig+0x1c4>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	494d      	ldr	r1, [pc, #308]	; (8004418 <HAL_RCC_ClockConfig+0x1c4>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d040      	beq.n	8004374 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d107      	bne.n	800430a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042fa:	4b47      	ldr	r3, [pc, #284]	; (8004418 <HAL_RCC_ClockConfig+0x1c4>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d115      	bne.n	8004332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e07f      	b.n	800440a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2b02      	cmp	r3, #2
 8004310:	d107      	bne.n	8004322 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004312:	4b41      	ldr	r3, [pc, #260]	; (8004418 <HAL_RCC_ClockConfig+0x1c4>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d109      	bne.n	8004332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e073      	b.n	800440a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004322:	4b3d      	ldr	r3, [pc, #244]	; (8004418 <HAL_RCC_ClockConfig+0x1c4>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e06b      	b.n	800440a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004332:	4b39      	ldr	r3, [pc, #228]	; (8004418 <HAL_RCC_ClockConfig+0x1c4>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f023 0203 	bic.w	r2, r3, #3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	4936      	ldr	r1, [pc, #216]	; (8004418 <HAL_RCC_ClockConfig+0x1c4>)
 8004340:	4313      	orrs	r3, r2
 8004342:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004344:	f7fe fd36 	bl	8002db4 <HAL_GetTick>
 8004348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800434a:	e00a      	b.n	8004362 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800434c:	f7fe fd32 	bl	8002db4 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	f241 3288 	movw	r2, #5000	; 0x1388
 800435a:	4293      	cmp	r3, r2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e053      	b.n	800440a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004362:	4b2d      	ldr	r3, [pc, #180]	; (8004418 <HAL_RCC_ClockConfig+0x1c4>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f003 020c 	and.w	r2, r3, #12
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	429a      	cmp	r2, r3
 8004372:	d1eb      	bne.n	800434c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004374:	4b27      	ldr	r3, [pc, #156]	; (8004414 <HAL_RCC_ClockConfig+0x1c0>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d210      	bcs.n	80043a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004382:	4b24      	ldr	r3, [pc, #144]	; (8004414 <HAL_RCC_ClockConfig+0x1c0>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f023 0207 	bic.w	r2, r3, #7
 800438a:	4922      	ldr	r1, [pc, #136]	; (8004414 <HAL_RCC_ClockConfig+0x1c0>)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	4313      	orrs	r3, r2
 8004390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004392:	4b20      	ldr	r3, [pc, #128]	; (8004414 <HAL_RCC_ClockConfig+0x1c0>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	429a      	cmp	r2, r3
 800439e:	d001      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e032      	b.n	800440a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d008      	beq.n	80043c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043b0:	4b19      	ldr	r3, [pc, #100]	; (8004418 <HAL_RCC_ClockConfig+0x1c4>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	4916      	ldr	r1, [pc, #88]	; (8004418 <HAL_RCC_ClockConfig+0x1c4>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d009      	beq.n	80043e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043ce:	4b12      	ldr	r3, [pc, #72]	; (8004418 <HAL_RCC_ClockConfig+0x1c4>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	490e      	ldr	r1, [pc, #56]	; (8004418 <HAL_RCC_ClockConfig+0x1c4>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043e2:	f000 f821 	bl	8004428 <HAL_RCC_GetSysClockFreq>
 80043e6:	4602      	mov	r2, r0
 80043e8:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <HAL_RCC_ClockConfig+0x1c4>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	091b      	lsrs	r3, r3, #4
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	490a      	ldr	r1, [pc, #40]	; (800441c <HAL_RCC_ClockConfig+0x1c8>)
 80043f4:	5ccb      	ldrb	r3, [r1, r3]
 80043f6:	fa22 f303 	lsr.w	r3, r2, r3
 80043fa:	4a09      	ldr	r2, [pc, #36]	; (8004420 <HAL_RCC_ClockConfig+0x1cc>)
 80043fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043fe:	4b09      	ldr	r3, [pc, #36]	; (8004424 <HAL_RCC_ClockConfig+0x1d0>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4618      	mov	r0, r3
 8004404:	f7fe fc94 	bl	8002d30 <HAL_InitTick>

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	40022000 	.word	0x40022000
 8004418:	40021000 	.word	0x40021000
 800441c:	0800a8a4 	.word	0x0800a8a4
 8004420:	20000034 	.word	0x20000034
 8004424:	20000038 	.word	0x20000038

08004428 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004428:	b480      	push	{r7}
 800442a:	b087      	sub	sp, #28
 800442c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	60fb      	str	r3, [r7, #12]
 8004432:	2300      	movs	r3, #0
 8004434:	60bb      	str	r3, [r7, #8]
 8004436:	2300      	movs	r3, #0
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	2300      	movs	r3, #0
 800443c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800443e:	2300      	movs	r3, #0
 8004440:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004442:	4b1e      	ldr	r3, [pc, #120]	; (80044bc <HAL_RCC_GetSysClockFreq+0x94>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f003 030c 	and.w	r3, r3, #12
 800444e:	2b04      	cmp	r3, #4
 8004450:	d002      	beq.n	8004458 <HAL_RCC_GetSysClockFreq+0x30>
 8004452:	2b08      	cmp	r3, #8
 8004454:	d003      	beq.n	800445e <HAL_RCC_GetSysClockFreq+0x36>
 8004456:	e027      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004458:	4b19      	ldr	r3, [pc, #100]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800445a:	613b      	str	r3, [r7, #16]
      break;
 800445c:	e027      	b.n	80044ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	0c9b      	lsrs	r3, r3, #18
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	4a17      	ldr	r2, [pc, #92]	; (80044c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004468:	5cd3      	ldrb	r3, [r2, r3]
 800446a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d010      	beq.n	8004498 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004476:	4b11      	ldr	r3, [pc, #68]	; (80044bc <HAL_RCC_GetSysClockFreq+0x94>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	0c5b      	lsrs	r3, r3, #17
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	4a11      	ldr	r2, [pc, #68]	; (80044c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004482:	5cd3      	ldrb	r3, [r2, r3]
 8004484:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a0d      	ldr	r2, [pc, #52]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800448a:	fb03 f202 	mul.w	r2, r3, r2
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	fbb2 f3f3 	udiv	r3, r2, r3
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	e004      	b.n	80044a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a0c      	ldr	r2, [pc, #48]	; (80044cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800449c:	fb02 f303 	mul.w	r3, r2, r3
 80044a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	613b      	str	r3, [r7, #16]
      break;
 80044a6:	e002      	b.n	80044ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044a8:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80044aa:	613b      	str	r3, [r7, #16]
      break;
 80044ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044ae:	693b      	ldr	r3, [r7, #16]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	371c      	adds	r7, #28
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bc80      	pop	{r7}
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	40021000 	.word	0x40021000
 80044c0:	007a1200 	.word	0x007a1200
 80044c4:	0800a8bc 	.word	0x0800a8bc
 80044c8:	0800a8cc 	.word	0x0800a8cc
 80044cc:	003d0900 	.word	0x003d0900

080044d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044d4:	4b02      	ldr	r3, [pc, #8]	; (80044e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80044d6:	681b      	ldr	r3, [r3, #0]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr
 80044e0:	20000034 	.word	0x20000034

080044e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044e8:	f7ff fff2 	bl	80044d0 <HAL_RCC_GetHCLKFreq>
 80044ec:	4602      	mov	r2, r0
 80044ee:	4b05      	ldr	r3, [pc, #20]	; (8004504 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	0a1b      	lsrs	r3, r3, #8
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	4903      	ldr	r1, [pc, #12]	; (8004508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044fa:	5ccb      	ldrb	r3, [r1, r3]
 80044fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004500:	4618      	mov	r0, r3
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40021000 	.word	0x40021000
 8004508:	0800a8b4 	.word	0x0800a8b4

0800450c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004510:	f7ff ffde 	bl	80044d0 <HAL_RCC_GetHCLKFreq>
 8004514:	4602      	mov	r2, r0
 8004516:	4b05      	ldr	r3, [pc, #20]	; (800452c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	0adb      	lsrs	r3, r3, #11
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	4903      	ldr	r1, [pc, #12]	; (8004530 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004522:	5ccb      	ldrb	r3, [r1, r3]
 8004524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004528:	4618      	mov	r0, r3
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40021000 	.word	0x40021000
 8004530:	0800a8b4 	.word	0x0800a8b4

08004534 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800453c:	4b0a      	ldr	r3, [pc, #40]	; (8004568 <RCC_Delay+0x34>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a0a      	ldr	r2, [pc, #40]	; (800456c <RCC_Delay+0x38>)
 8004542:	fba2 2303 	umull	r2, r3, r2, r3
 8004546:	0a5b      	lsrs	r3, r3, #9
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	fb02 f303 	mul.w	r3, r2, r3
 800454e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004550:	bf00      	nop
  }
  while (Delay --);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	1e5a      	subs	r2, r3, #1
 8004556:	60fa      	str	r2, [r7, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1f9      	bne.n	8004550 <RCC_Delay+0x1c>
}
 800455c:	bf00      	nop
 800455e:	bf00      	nop
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	bc80      	pop	{r7}
 8004566:	4770      	bx	lr
 8004568:	20000034 	.word	0x20000034
 800456c:	10624dd3 	.word	0x10624dd3

08004570 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004578:	2300      	movs	r3, #0
 800457a:	613b      	str	r3, [r7, #16]
 800457c:	2300      	movs	r3, #0
 800457e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d07d      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800458c:	2300      	movs	r3, #0
 800458e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004590:	4b4f      	ldr	r3, [pc, #316]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10d      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800459c:	4b4c      	ldr	r3, [pc, #304]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	4a4b      	ldr	r2, [pc, #300]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045a6:	61d3      	str	r3, [r2, #28]
 80045a8:	4b49      	ldr	r3, [pc, #292]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b0:	60bb      	str	r3, [r7, #8]
 80045b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045b4:	2301      	movs	r3, #1
 80045b6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b8:	4b46      	ldr	r3, [pc, #280]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d118      	bne.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045c4:	4b43      	ldr	r3, [pc, #268]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a42      	ldr	r2, [pc, #264]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045d0:	f7fe fbf0 	bl	8002db4 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d6:	e008      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d8:	f7fe fbec 	bl	8002db4 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b64      	cmp	r3, #100	; 0x64
 80045e4:	d901      	bls.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e06d      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ea:	4b3a      	ldr	r3, [pc, #232]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0f0      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045f6:	4b36      	ldr	r3, [pc, #216]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d02e      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	429a      	cmp	r2, r3
 8004612:	d027      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004614:	4b2e      	ldr	r3, [pc, #184]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800461c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800461e:	4b2e      	ldr	r3, [pc, #184]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004620:	2201      	movs	r2, #1
 8004622:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004624:	4b2c      	ldr	r3, [pc, #176]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004626:	2200      	movs	r2, #0
 8004628:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800462a:	4a29      	ldr	r2, [pc, #164]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d014      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463a:	f7fe fbbb 	bl	8002db4 <HAL_GetTick>
 800463e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004640:	e00a      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004642:	f7fe fbb7 	bl	8002db4 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004650:	4293      	cmp	r3, r2
 8004652:	d901      	bls.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e036      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004658:	4b1d      	ldr	r3, [pc, #116]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0ee      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004664:	4b1a      	ldr	r3, [pc, #104]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	4917      	ldr	r1, [pc, #92]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004672:	4313      	orrs	r3, r2
 8004674:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004676:	7dfb      	ldrb	r3, [r7, #23]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d105      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800467c:	4b14      	ldr	r3, [pc, #80]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800467e:	69db      	ldr	r3, [r3, #28]
 8004680:	4a13      	ldr	r2, [pc, #76]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004686:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d008      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004694:	4b0e      	ldr	r3, [pc, #56]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	490b      	ldr	r1, [pc, #44]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0310 	and.w	r3, r3, #16
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d008      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046b2:	4b07      	ldr	r3, [pc, #28]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	4904      	ldr	r1, [pc, #16]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	40021000 	.word	0x40021000
 80046d4:	40007000 	.word	0x40007000
 80046d8:	42420440 	.word	0x42420440

080046dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b088      	sub	sp, #32
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	617b      	str	r3, [r7, #20]
 80046e8:	2300      	movs	r3, #0
 80046ea:	61fb      	str	r3, [r7, #28]
 80046ec:	2300      	movs	r3, #0
 80046ee:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	60fb      	str	r3, [r7, #12]
 80046f4:	2300      	movs	r3, #0
 80046f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b10      	cmp	r3, #16
 80046fc:	d00a      	beq.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b10      	cmp	r3, #16
 8004702:	f200 808a 	bhi.w	800481a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d045      	beq.n	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b02      	cmp	r3, #2
 8004710:	d075      	beq.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004712:	e082      	b.n	800481a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004714:	4b46      	ldr	r3, [pc, #280]	; (8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800471a:	4b45      	ldr	r3, [pc, #276]	; (8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d07b      	beq.n	800481e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	0c9b      	lsrs	r3, r3, #18
 800472a:	f003 030f 	and.w	r3, r3, #15
 800472e:	4a41      	ldr	r2, [pc, #260]	; (8004834 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004730:	5cd3      	ldrb	r3, [r2, r3]
 8004732:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d015      	beq.n	800476a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800473e:	4b3c      	ldr	r3, [pc, #240]	; (8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	0c5b      	lsrs	r3, r3, #17
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	4a3b      	ldr	r2, [pc, #236]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800474a:	5cd3      	ldrb	r3, [r2, r3]
 800474c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00d      	beq.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004758:	4a38      	ldr	r2, [pc, #224]	; (800483c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	fb02 f303 	mul.w	r3, r2, r3
 8004766:	61fb      	str	r3, [r7, #28]
 8004768:	e004      	b.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	4a34      	ldr	r2, [pc, #208]	; (8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800476e:	fb02 f303 	mul.w	r3, r2, r3
 8004772:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004774:	4b2e      	ldr	r3, [pc, #184]	; (8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800477c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004780:	d102      	bne.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	61bb      	str	r3, [r7, #24]
      break;
 8004786:	e04a      	b.n	800481e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	4a2d      	ldr	r2, [pc, #180]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800478e:	fba2 2303 	umull	r2, r3, r2, r3
 8004792:	085b      	lsrs	r3, r3, #1
 8004794:	61bb      	str	r3, [r7, #24]
      break;
 8004796:	e042      	b.n	800481e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004798:	4b25      	ldr	r3, [pc, #148]	; (8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047a8:	d108      	bne.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80047b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047b8:	61bb      	str	r3, [r7, #24]
 80047ba:	e01f      	b.n	80047fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047c6:	d109      	bne.n	80047dc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80047c8:	4b19      	ldr	r3, [pc, #100]	; (8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d003      	beq.n	80047dc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80047d4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80047d8:	61bb      	str	r3, [r7, #24]
 80047da:	e00f      	b.n	80047fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047e6:	d11c      	bne.n	8004822 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80047e8:	4b11      	ldr	r3, [pc, #68]	; (8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d016      	beq.n	8004822 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80047f4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80047f8:	61bb      	str	r3, [r7, #24]
      break;
 80047fa:	e012      	b.n	8004822 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80047fc:	e011      	b.n	8004822 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80047fe:	f7ff fe85 	bl	800450c <HAL_RCC_GetPCLK2Freq>
 8004802:	4602      	mov	r2, r0
 8004804:	4b0a      	ldr	r3, [pc, #40]	; (8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	0b9b      	lsrs	r3, r3, #14
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	3301      	adds	r3, #1
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	fbb2 f3f3 	udiv	r3, r2, r3
 8004816:	61bb      	str	r3, [r7, #24]
      break;
 8004818:	e004      	b.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800481a:	bf00      	nop
 800481c:	e002      	b.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800481e:	bf00      	nop
 8004820:	e000      	b.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004822:	bf00      	nop
    }
  }
  return (frequency);
 8004824:	69bb      	ldr	r3, [r7, #24]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3720      	adds	r7, #32
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	40021000 	.word	0x40021000
 8004834:	0800a8d0 	.word	0x0800a8d0
 8004838:	0800a8e0 	.word	0x0800a8e0
 800483c:	007a1200 	.word	0x007a1200
 8004840:	003d0900 	.word	0x003d0900
 8004844:	aaaaaaab 	.word	0xaaaaaaab

08004848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e041      	b.n	80048de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d106      	bne.n	8004874 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7fe f8c4 	bl	80029fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3304      	adds	r3, #4
 8004884:	4619      	mov	r1, r3
 8004886:	4610      	mov	r0, r2
 8004888:	f000 fbb0 	bl	8004fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d001      	beq.n	8004900 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e032      	b.n	8004966 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a18      	ldr	r2, [pc, #96]	; (8004970 <HAL_TIM_Base_Start+0x88>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00e      	beq.n	8004930 <HAL_TIM_Base_Start+0x48>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800491a:	d009      	beq.n	8004930 <HAL_TIM_Base_Start+0x48>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a14      	ldr	r2, [pc, #80]	; (8004974 <HAL_TIM_Base_Start+0x8c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d004      	beq.n	8004930 <HAL_TIM_Base_Start+0x48>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a13      	ldr	r2, [pc, #76]	; (8004978 <HAL_TIM_Base_Start+0x90>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d111      	bne.n	8004954 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 0307 	and.w	r3, r3, #7
 800493a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2b06      	cmp	r3, #6
 8004940:	d010      	beq.n	8004964 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f042 0201 	orr.w	r2, r2, #1
 8004950:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004952:	e007      	b.n	8004964 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0201 	orr.w	r2, r2, #1
 8004962:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	bc80      	pop	{r7}
 800496e:	4770      	bx	lr
 8004970:	40012c00 	.word	0x40012c00
 8004974:	40000400 	.word	0x40000400
 8004978:	40000800 	.word	0x40000800

0800497c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e041      	b.n	8004a12 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d106      	bne.n	80049a8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f839 	bl	8004a1a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2202      	movs	r2, #2
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3304      	adds	r3, #4
 80049b8:	4619      	mov	r1, r3
 80049ba:	4610      	mov	r0, r2
 80049bc:	f000 fb16 	bl	8004fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bc80      	pop	{r7}
 8004a2a:	4770      	bx	lr

08004a2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e041      	b.n	8004ac2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d106      	bne.n	8004a58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f839 	bl	8004aca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	3304      	adds	r3, #4
 8004a68:	4619      	mov	r1, r3
 8004a6a:	4610      	mov	r0, r2
 8004a6c:	f000 fabe 	bl	8004fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr

08004adc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d109      	bne.n	8004b00 <HAL_TIM_PWM_Start+0x24>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	bf14      	ite	ne
 8004af8:	2301      	movne	r3, #1
 8004afa:	2300      	moveq	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	e022      	b.n	8004b46 <HAL_TIM_PWM_Start+0x6a>
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	d109      	bne.n	8004b1a <HAL_TIM_PWM_Start+0x3e>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	bf14      	ite	ne
 8004b12:	2301      	movne	r3, #1
 8004b14:	2300      	moveq	r3, #0
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	e015      	b.n	8004b46 <HAL_TIM_PWM_Start+0x6a>
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d109      	bne.n	8004b34 <HAL_TIM_PWM_Start+0x58>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	bf14      	ite	ne
 8004b2c:	2301      	movne	r3, #1
 8004b2e:	2300      	moveq	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	e008      	b.n	8004b46 <HAL_TIM_PWM_Start+0x6a>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	bf14      	ite	ne
 8004b40:	2301      	movne	r3, #1
 8004b42:	2300      	moveq	r3, #0
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e05e      	b.n	8004c0c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d104      	bne.n	8004b5e <HAL_TIM_PWM_Start+0x82>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2202      	movs	r2, #2
 8004b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b5c:	e013      	b.n	8004b86 <HAL_TIM_PWM_Start+0xaa>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d104      	bne.n	8004b6e <HAL_TIM_PWM_Start+0x92>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b6c:	e00b      	b.n	8004b86 <HAL_TIM_PWM_Start+0xaa>
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	d104      	bne.n	8004b7e <HAL_TIM_PWM_Start+0xa2>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b7c:	e003      	b.n	8004b86 <HAL_TIM_PWM_Start+0xaa>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2202      	movs	r2, #2
 8004b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	6839      	ldr	r1, [r7, #0]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 fcac 	bl	80054ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a1e      	ldr	r2, [pc, #120]	; (8004c14 <HAL_TIM_PWM_Start+0x138>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d107      	bne.n	8004bae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a18      	ldr	r2, [pc, #96]	; (8004c14 <HAL_TIM_PWM_Start+0x138>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d00e      	beq.n	8004bd6 <HAL_TIM_PWM_Start+0xfa>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc0:	d009      	beq.n	8004bd6 <HAL_TIM_PWM_Start+0xfa>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a14      	ldr	r2, [pc, #80]	; (8004c18 <HAL_TIM_PWM_Start+0x13c>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d004      	beq.n	8004bd6 <HAL_TIM_PWM_Start+0xfa>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a12      	ldr	r2, [pc, #72]	; (8004c1c <HAL_TIM_PWM_Start+0x140>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d111      	bne.n	8004bfa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b06      	cmp	r3, #6
 8004be6:	d010      	beq.n	8004c0a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0201 	orr.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf8:	e007      	b.n	8004c0a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f042 0201 	orr.w	r2, r2, #1
 8004c08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40012c00 	.word	0x40012c00
 8004c18:	40000400 	.word	0x40000400
 8004c1c:	40000800 	.word	0x40000800

08004c20 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d101      	bne.n	8004c3e <HAL_TIM_OC_ConfigChannel+0x1e>
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	e048      	b.n	8004cd0 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b0c      	cmp	r3, #12
 8004c4a:	d839      	bhi.n	8004cc0 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004c4c:	a201      	add	r2, pc, #4	; (adr r2, 8004c54 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c52:	bf00      	nop
 8004c54:	08004c89 	.word	0x08004c89
 8004c58:	08004cc1 	.word	0x08004cc1
 8004c5c:	08004cc1 	.word	0x08004cc1
 8004c60:	08004cc1 	.word	0x08004cc1
 8004c64:	08004c97 	.word	0x08004c97
 8004c68:	08004cc1 	.word	0x08004cc1
 8004c6c:	08004cc1 	.word	0x08004cc1
 8004c70:	08004cc1 	.word	0x08004cc1
 8004c74:	08004ca5 	.word	0x08004ca5
 8004c78:	08004cc1 	.word	0x08004cc1
 8004c7c:	08004cc1 	.word	0x08004cc1
 8004c80:	08004cc1 	.word	0x08004cc1
 8004c84:	08004cb3 	.word	0x08004cb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68b9      	ldr	r1, [r7, #8]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 fa0e 	bl	80050b0 <TIM_OC1_SetConfig>
      break;
 8004c94:	e017      	b.n	8004cc6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68b9      	ldr	r1, [r7, #8]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 fa6d 	bl	800517c <TIM_OC2_SetConfig>
      break;
 8004ca2:	e010      	b.n	8004cc6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68b9      	ldr	r1, [r7, #8]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fad0 	bl	8005250 <TIM_OC3_SetConfig>
      break;
 8004cb0:	e009      	b.n	8004cc6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68b9      	ldr	r1, [r7, #8]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 fb33 	bl	8005324 <TIM_OC4_SetConfig>
      break;
 8004cbe:	e002      	b.n	8004cc6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	75fb      	strb	r3, [r7, #23]
      break;
 8004cc4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d101      	bne.n	8004cf6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	e0ae      	b.n	8004e54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b0c      	cmp	r3, #12
 8004d02:	f200 809f 	bhi.w	8004e44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d06:	a201      	add	r2, pc, #4	; (adr r2, 8004d0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0c:	08004d41 	.word	0x08004d41
 8004d10:	08004e45 	.word	0x08004e45
 8004d14:	08004e45 	.word	0x08004e45
 8004d18:	08004e45 	.word	0x08004e45
 8004d1c:	08004d81 	.word	0x08004d81
 8004d20:	08004e45 	.word	0x08004e45
 8004d24:	08004e45 	.word	0x08004e45
 8004d28:	08004e45 	.word	0x08004e45
 8004d2c:	08004dc3 	.word	0x08004dc3
 8004d30:	08004e45 	.word	0x08004e45
 8004d34:	08004e45 	.word	0x08004e45
 8004d38:	08004e45 	.word	0x08004e45
 8004d3c:	08004e03 	.word	0x08004e03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68b9      	ldr	r1, [r7, #8]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 f9b2 	bl	80050b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699a      	ldr	r2, [r3, #24]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0208 	orr.w	r2, r2, #8
 8004d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	699a      	ldr	r2, [r3, #24]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 0204 	bic.w	r2, r2, #4
 8004d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6999      	ldr	r1, [r3, #24]
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	691a      	ldr	r2, [r3, #16]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	619a      	str	r2, [r3, #24]
      break;
 8004d7e:	e064      	b.n	8004e4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68b9      	ldr	r1, [r7, #8]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 f9f8 	bl	800517c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	699a      	ldr	r2, [r3, #24]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	699a      	ldr	r2, [r3, #24]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6999      	ldr	r1, [r3, #24]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	021a      	lsls	r2, r3, #8
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	619a      	str	r2, [r3, #24]
      break;
 8004dc0:	e043      	b.n	8004e4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68b9      	ldr	r1, [r7, #8]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 fa41 	bl	8005250 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	69da      	ldr	r2, [r3, #28]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f042 0208 	orr.w	r2, r2, #8
 8004ddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	69da      	ldr	r2, [r3, #28]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 0204 	bic.w	r2, r2, #4
 8004dec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69d9      	ldr	r1, [r3, #28]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	61da      	str	r2, [r3, #28]
      break;
 8004e00:	e023      	b.n	8004e4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68b9      	ldr	r1, [r7, #8]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 fa8b 	bl	8005324 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	69da      	ldr	r2, [r3, #28]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	69da      	ldr	r2, [r3, #28]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	69d9      	ldr	r1, [r3, #28]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	021a      	lsls	r2, r3, #8
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	61da      	str	r2, [r3, #28]
      break;
 8004e42:	e002      	b.n	8004e4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	75fb      	strb	r3, [r7, #23]
      break;
 8004e48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3718      	adds	r7, #24
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d101      	bne.n	8004e78 <HAL_TIM_ConfigClockSource+0x1c>
 8004e74:	2302      	movs	r3, #2
 8004e76:	e0b4      	b.n	8004fe2 <HAL_TIM_ConfigClockSource+0x186>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eb0:	d03e      	beq.n	8004f30 <HAL_TIM_ConfigClockSource+0xd4>
 8004eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eb6:	f200 8087 	bhi.w	8004fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ebe:	f000 8086 	beq.w	8004fce <HAL_TIM_ConfigClockSource+0x172>
 8004ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ec6:	d87f      	bhi.n	8004fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ec8:	2b70      	cmp	r3, #112	; 0x70
 8004eca:	d01a      	beq.n	8004f02 <HAL_TIM_ConfigClockSource+0xa6>
 8004ecc:	2b70      	cmp	r3, #112	; 0x70
 8004ece:	d87b      	bhi.n	8004fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ed0:	2b60      	cmp	r3, #96	; 0x60
 8004ed2:	d050      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0x11a>
 8004ed4:	2b60      	cmp	r3, #96	; 0x60
 8004ed6:	d877      	bhi.n	8004fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ed8:	2b50      	cmp	r3, #80	; 0x50
 8004eda:	d03c      	beq.n	8004f56 <HAL_TIM_ConfigClockSource+0xfa>
 8004edc:	2b50      	cmp	r3, #80	; 0x50
 8004ede:	d873      	bhi.n	8004fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee0:	2b40      	cmp	r3, #64	; 0x40
 8004ee2:	d058      	beq.n	8004f96 <HAL_TIM_ConfigClockSource+0x13a>
 8004ee4:	2b40      	cmp	r3, #64	; 0x40
 8004ee6:	d86f      	bhi.n	8004fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee8:	2b30      	cmp	r3, #48	; 0x30
 8004eea:	d064      	beq.n	8004fb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004eec:	2b30      	cmp	r3, #48	; 0x30
 8004eee:	d86b      	bhi.n	8004fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef0:	2b20      	cmp	r3, #32
 8004ef2:	d060      	beq.n	8004fb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004ef4:	2b20      	cmp	r3, #32
 8004ef6:	d867      	bhi.n	8004fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d05c      	beq.n	8004fb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004efc:	2b10      	cmp	r3, #16
 8004efe:	d05a      	beq.n	8004fb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f00:	e062      	b.n	8004fc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6818      	ldr	r0, [r3, #0]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	6899      	ldr	r1, [r3, #8]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f000 facc 	bl	80054ae <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	609a      	str	r2, [r3, #8]
      break;
 8004f2e:	e04f      	b.n	8004fd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6818      	ldr	r0, [r3, #0]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	6899      	ldr	r1, [r3, #8]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f000 fab5 	bl	80054ae <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689a      	ldr	r2, [r3, #8]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f52:	609a      	str	r2, [r3, #8]
      break;
 8004f54:	e03c      	b.n	8004fd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6818      	ldr	r0, [r3, #0]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	6859      	ldr	r1, [r3, #4]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	461a      	mov	r2, r3
 8004f64:	f000 fa2c 	bl	80053c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2150      	movs	r1, #80	; 0x50
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 fa83 	bl	800547a <TIM_ITRx_SetConfig>
      break;
 8004f74:	e02c      	b.n	8004fd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6818      	ldr	r0, [r3, #0]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	6859      	ldr	r1, [r3, #4]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	461a      	mov	r2, r3
 8004f84:	f000 fa4a 	bl	800541c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2160      	movs	r1, #96	; 0x60
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 fa73 	bl	800547a <TIM_ITRx_SetConfig>
      break;
 8004f94:	e01c      	b.n	8004fd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6818      	ldr	r0, [r3, #0]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	6859      	ldr	r1, [r3, #4]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	f000 fa0c 	bl	80053c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2140      	movs	r1, #64	; 0x40
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 fa63 	bl	800547a <TIM_ITRx_SetConfig>
      break;
 8004fb4:	e00c      	b.n	8004fd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	4610      	mov	r0, r2
 8004fc2:	f000 fa5a 	bl	800547a <TIM_ITRx_SetConfig>
      break;
 8004fc6:	e003      	b.n	8004fd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	73fb      	strb	r3, [r7, #15]
      break;
 8004fcc:	e000      	b.n	8004fd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004fce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
	...

08004fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a29      	ldr	r2, [pc, #164]	; (80050a4 <TIM_Base_SetConfig+0xb8>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d00b      	beq.n	800501c <TIM_Base_SetConfig+0x30>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500a:	d007      	beq.n	800501c <TIM_Base_SetConfig+0x30>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a26      	ldr	r2, [pc, #152]	; (80050a8 <TIM_Base_SetConfig+0xbc>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d003      	beq.n	800501c <TIM_Base_SetConfig+0x30>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a25      	ldr	r2, [pc, #148]	; (80050ac <TIM_Base_SetConfig+0xc0>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d108      	bne.n	800502e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005022:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	4313      	orrs	r3, r2
 800502c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a1c      	ldr	r2, [pc, #112]	; (80050a4 <TIM_Base_SetConfig+0xb8>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d00b      	beq.n	800504e <TIM_Base_SetConfig+0x62>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800503c:	d007      	beq.n	800504e <TIM_Base_SetConfig+0x62>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a19      	ldr	r2, [pc, #100]	; (80050a8 <TIM_Base_SetConfig+0xbc>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d003      	beq.n	800504e <TIM_Base_SetConfig+0x62>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a18      	ldr	r2, [pc, #96]	; (80050ac <TIM_Base_SetConfig+0xc0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d108      	bne.n	8005060 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	4313      	orrs	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a07      	ldr	r2, [pc, #28]	; (80050a4 <TIM_Base_SetConfig+0xb8>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d103      	bne.n	8005094 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	691a      	ldr	r2, [r3, #16]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	615a      	str	r2, [r3, #20]
}
 800509a:	bf00      	nop
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	bc80      	pop	{r7}
 80050a2:	4770      	bx	lr
 80050a4:	40012c00 	.word	0x40012c00
 80050a8:	40000400 	.word	0x40000400
 80050ac:	40000800 	.word	0x40000800

080050b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	f023 0201 	bic.w	r2, r3, #1
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f023 0303 	bic.w	r3, r3, #3
 80050e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f023 0302 	bic.w	r3, r3, #2
 80050f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	4313      	orrs	r3, r2
 8005102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a1c      	ldr	r2, [pc, #112]	; (8005178 <TIM_OC1_SetConfig+0xc8>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d10c      	bne.n	8005126 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f023 0308 	bic.w	r3, r3, #8
 8005112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f023 0304 	bic.w	r3, r3, #4
 8005124:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a13      	ldr	r2, [pc, #76]	; (8005178 <TIM_OC1_SetConfig+0xc8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d111      	bne.n	8005152 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800513c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	4313      	orrs	r3, r2
 8005150:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	621a      	str	r2, [r3, #32]
}
 800516c:	bf00      	nop
 800516e:	371c      	adds	r7, #28
 8005170:	46bd      	mov	sp, r7
 8005172:	bc80      	pop	{r7}
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	40012c00 	.word	0x40012c00

0800517c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	f023 0210 	bic.w	r2, r3, #16
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	021b      	lsls	r3, r3, #8
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4313      	orrs	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f023 0320 	bic.w	r3, r3, #32
 80051c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	011b      	lsls	r3, r3, #4
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a1d      	ldr	r2, [pc, #116]	; (800524c <TIM_OC2_SetConfig+0xd0>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d10d      	bne.n	80051f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a14      	ldr	r2, [pc, #80]	; (800524c <TIM_OC2_SetConfig+0xd0>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d113      	bne.n	8005228 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005206:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800520e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	4313      	orrs	r3, r2
 8005226:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	621a      	str	r2, [r3, #32]
}
 8005242:	bf00      	nop
 8005244:	371c      	adds	r7, #28
 8005246:	46bd      	mov	sp, r7
 8005248:	bc80      	pop	{r7}
 800524a:	4770      	bx	lr
 800524c:	40012c00 	.word	0x40012c00

08005250 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800527e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0303 	bic.w	r3, r3, #3
 8005286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	021b      	lsls	r3, r3, #8
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a1d      	ldr	r2, [pc, #116]	; (8005320 <TIM_OC3_SetConfig+0xd0>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d10d      	bne.n	80052ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	021b      	lsls	r3, r3, #8
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	4313      	orrs	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a14      	ldr	r2, [pc, #80]	; (8005320 <TIM_OC3_SetConfig+0xd0>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d113      	bne.n	80052fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	011b      	lsls	r3, r3, #4
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	011b      	lsls	r3, r3, #4
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	621a      	str	r2, [r3, #32]
}
 8005314:	bf00      	nop
 8005316:	371c      	adds	r7, #28
 8005318:	46bd      	mov	sp, r7
 800531a:	bc80      	pop	{r7}
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	40012c00 	.word	0x40012c00

08005324 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800535a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	021b      	lsls	r3, r3, #8
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	4313      	orrs	r3, r2
 8005366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800536e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	031b      	lsls	r3, r3, #12
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	4313      	orrs	r3, r2
 800537a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a0f      	ldr	r2, [pc, #60]	; (80053bc <TIM_OC4_SetConfig+0x98>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d109      	bne.n	8005398 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800538a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	019b      	lsls	r3, r3, #6
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	4313      	orrs	r3, r2
 8005396:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	621a      	str	r2, [r3, #32]
}
 80053b2:	bf00      	nop
 80053b4:	371c      	adds	r7, #28
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bc80      	pop	{r7}
 80053ba:	4770      	bx	lr
 80053bc:	40012c00 	.word	0x40012c00

080053c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b087      	sub	sp, #28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	f023 0201 	bic.w	r2, r3, #1
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f023 030a 	bic.w	r3, r3, #10
 80053fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	4313      	orrs	r3, r2
 8005404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	621a      	str	r2, [r3, #32]
}
 8005412:	bf00      	nop
 8005414:	371c      	adds	r7, #28
 8005416:	46bd      	mov	sp, r7
 8005418:	bc80      	pop	{r7}
 800541a:	4770      	bx	lr

0800541c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800541c:	b480      	push	{r7}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	f023 0210 	bic.w	r2, r3, #16
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005446:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	031b      	lsls	r3, r3, #12
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	4313      	orrs	r3, r2
 8005450:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005458:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	011b      	lsls	r3, r3, #4
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	4313      	orrs	r3, r2
 8005462:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	621a      	str	r2, [r3, #32]
}
 8005470:	bf00      	nop
 8005472:	371c      	adds	r7, #28
 8005474:	46bd      	mov	sp, r7
 8005476:	bc80      	pop	{r7}
 8005478:	4770      	bx	lr

0800547a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800547a:	b480      	push	{r7}
 800547c:	b085      	sub	sp, #20
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005490:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4313      	orrs	r3, r2
 8005498:	f043 0307 	orr.w	r3, r3, #7
 800549c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	609a      	str	r2, [r3, #8]
}
 80054a4:	bf00      	nop
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bc80      	pop	{r7}
 80054ac:	4770      	bx	lr

080054ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b087      	sub	sp, #28
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	60f8      	str	r0, [r7, #12]
 80054b6:	60b9      	str	r1, [r7, #8]
 80054b8:	607a      	str	r2, [r7, #4]
 80054ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	021a      	lsls	r2, r3, #8
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	431a      	orrs	r2, r3
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	4313      	orrs	r3, r2
 80054da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	609a      	str	r2, [r3, #8]
}
 80054e2:	bf00      	nop
 80054e4:	371c      	adds	r7, #28
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bc80      	pop	{r7}
 80054ea:	4770      	bx	lr

080054ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	f003 031f 	and.w	r3, r3, #31
 80054fe:	2201      	movs	r2, #1
 8005500:	fa02 f303 	lsl.w	r3, r2, r3
 8005504:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6a1a      	ldr	r2, [r3, #32]
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	43db      	mvns	r3, r3
 800550e:	401a      	ands	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6a1a      	ldr	r2, [r3, #32]
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	f003 031f 	and.w	r3, r3, #31
 800551e:	6879      	ldr	r1, [r7, #4]
 8005520:	fa01 f303 	lsl.w	r3, r1, r3
 8005524:	431a      	orrs	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	621a      	str	r2, [r3, #32]
}
 800552a:	bf00      	nop
 800552c:	371c      	adds	r7, #28
 800552e:	46bd      	mov	sp, r7
 8005530:	bc80      	pop	{r7}
 8005532:	4770      	bx	lr

08005534 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005544:	2b01      	cmp	r3, #1
 8005546:	d101      	bne.n	800554c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005548:	2302      	movs	r3, #2
 800554a:	e046      	b.n	80055da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005572:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a16      	ldr	r2, [pc, #88]	; (80055e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d00e      	beq.n	80055ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005598:	d009      	beq.n	80055ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a12      	ldr	r2, [pc, #72]	; (80055e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d004      	beq.n	80055ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a10      	ldr	r2, [pc, #64]	; (80055ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d10c      	bne.n	80055c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	4313      	orrs	r3, r2
 80055be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	bc80      	pop	{r7}
 80055e2:	4770      	bx	lr
 80055e4:	40012c00 	.word	0x40012c00
 80055e8:	40000400 	.word	0x40000400
 80055ec:	40000800 	.word	0x40000800

080055f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e042      	b.n	8005688 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d106      	bne.n	800561c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7fd fabe 	bl	8002b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2224      	movs	r2, #36	; 0x24
 8005620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68da      	ldr	r2, [r3, #12]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005632:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 fdc5 	bl	80061c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	691a      	ldr	r2, [r3, #16]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005648:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	695a      	ldr	r2, [r3, #20]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005658:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68da      	ldr	r2, [r3, #12]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005668:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2220      	movs	r2, #32
 8005674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2220      	movs	r2, #32
 800567c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b08a      	sub	sp, #40	; 0x28
 8005694:	af02      	add	r7, sp, #8
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	603b      	str	r3, [r7, #0]
 800569c:	4613      	mov	r3, r2
 800569e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b20      	cmp	r3, #32
 80056ae:	d16d      	bne.n	800578c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d002      	beq.n	80056bc <HAL_UART_Transmit+0x2c>
 80056b6:	88fb      	ldrh	r3, [r7, #6]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e066      	b.n	800578e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2221      	movs	r2, #33	; 0x21
 80056ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056ce:	f7fd fb71 	bl	8002db4 <HAL_GetTick>
 80056d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	88fa      	ldrh	r2, [r7, #6]
 80056d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	88fa      	ldrh	r2, [r7, #6]
 80056de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e8:	d108      	bne.n	80056fc <HAL_UART_Transmit+0x6c>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d104      	bne.n	80056fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80056f2:	2300      	movs	r3, #0
 80056f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	61bb      	str	r3, [r7, #24]
 80056fa:	e003      	b.n	8005704 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005700:	2300      	movs	r3, #0
 8005702:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005704:	e02a      	b.n	800575c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	2200      	movs	r2, #0
 800570e:	2180      	movs	r1, #128	; 0x80
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f000 fb14 	bl	8005d3e <UART_WaitOnFlagUntilTimeout>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e036      	b.n	800578e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10b      	bne.n	800573e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	881b      	ldrh	r3, [r3, #0]
 800572a:	461a      	mov	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005734:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	3302      	adds	r3, #2
 800573a:	61bb      	str	r3, [r7, #24]
 800573c:	e007      	b.n	800574e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	781a      	ldrb	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	3301      	adds	r3, #1
 800574c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005752:	b29b      	uxth	r3, r3
 8005754:	3b01      	subs	r3, #1
 8005756:	b29a      	uxth	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005760:	b29b      	uxth	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1cf      	bne.n	8005706 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2200      	movs	r2, #0
 800576e:	2140      	movs	r1, #64	; 0x40
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f000 fae4 	bl	8005d3e <UART_WaitOnFlagUntilTimeout>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e006      	b.n	800578e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2220      	movs	r2, #32
 8005784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005788:	2300      	movs	r3, #0
 800578a:	e000      	b.n	800578e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800578c:	2302      	movs	r3, #2
  }
}
 800578e:	4618      	mov	r0, r3
 8005790:	3720      	adds	r7, #32
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b084      	sub	sp, #16
 800579a:	af00      	add	r7, sp, #0
 800579c:	60f8      	str	r0, [r7, #12]
 800579e:	60b9      	str	r1, [r7, #8]
 80057a0:	4613      	mov	r3, r2
 80057a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b20      	cmp	r3, #32
 80057ae:	d112      	bne.n	80057d6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <HAL_UART_Receive_IT+0x26>
 80057b6:	88fb      	ldrh	r3, [r7, #6]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e00b      	b.n	80057d8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80057c6:	88fb      	ldrh	r3, [r7, #6]
 80057c8:	461a      	mov	r2, r3
 80057ca:	68b9      	ldr	r1, [r7, #8]
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f000 fb24 	bl	8005e1a <UART_Start_Receive_IT>
 80057d2:	4603      	mov	r3, r0
 80057d4:	e000      	b.n	80057d8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80057d6:	2302      	movs	r3, #2
  }
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b0ba      	sub	sp, #232	; 0xe8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005806:	2300      	movs	r3, #0
 8005808:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800580c:	2300      	movs	r3, #0
 800580e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005816:	f003 030f 	and.w	r3, r3, #15
 800581a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800581e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10f      	bne.n	8005846 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800582a:	f003 0320 	and.w	r3, r3, #32
 800582e:	2b00      	cmp	r3, #0
 8005830:	d009      	beq.n	8005846 <HAL_UART_IRQHandler+0x66>
 8005832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005836:	f003 0320 	and.w	r3, r3, #32
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 fc01 	bl	8006046 <UART_Receive_IT>
      return;
 8005844:	e25b      	b.n	8005cfe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005846:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800584a:	2b00      	cmp	r3, #0
 800584c:	f000 80de 	beq.w	8005a0c <HAL_UART_IRQHandler+0x22c>
 8005850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b00      	cmp	r3, #0
 800585a:	d106      	bne.n	800586a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800585c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005860:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 80d1 	beq.w	8005a0c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800586a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00b      	beq.n	800588e <HAL_UART_IRQHandler+0xae>
 8005876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800587a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800587e:	2b00      	cmp	r3, #0
 8005880:	d005      	beq.n	800588e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005886:	f043 0201 	orr.w	r2, r3, #1
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800588e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005892:	f003 0304 	and.w	r3, r3, #4
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00b      	beq.n	80058b2 <HAL_UART_IRQHandler+0xd2>
 800589a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d005      	beq.n	80058b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058aa:	f043 0202 	orr.w	r2, r3, #2
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00b      	beq.n	80058d6 <HAL_UART_IRQHandler+0xf6>
 80058be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d005      	beq.n	80058d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ce:	f043 0204 	orr.w	r2, r3, #4
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80058d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058da:	f003 0308 	and.w	r3, r3, #8
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d011      	beq.n	8005906 <HAL_UART_IRQHandler+0x126>
 80058e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058e6:	f003 0320 	and.w	r3, r3, #32
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d105      	bne.n	80058fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80058ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d005      	beq.n	8005906 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058fe:	f043 0208 	orr.w	r2, r3, #8
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800590a:	2b00      	cmp	r3, #0
 800590c:	f000 81f2 	beq.w	8005cf4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005914:	f003 0320 	and.w	r3, r3, #32
 8005918:	2b00      	cmp	r3, #0
 800591a:	d008      	beq.n	800592e <HAL_UART_IRQHandler+0x14e>
 800591c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005920:	f003 0320 	and.w	r3, r3, #32
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 fb8c 	bl	8006046 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005938:	2b00      	cmp	r3, #0
 800593a:	bf14      	ite	ne
 800593c:	2301      	movne	r3, #1
 800593e:	2300      	moveq	r3, #0
 8005940:	b2db      	uxtb	r3, r3
 8005942:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594a:	f003 0308 	and.w	r3, r3, #8
 800594e:	2b00      	cmp	r3, #0
 8005950:	d103      	bne.n	800595a <HAL_UART_IRQHandler+0x17a>
 8005952:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005956:	2b00      	cmp	r3, #0
 8005958:	d04f      	beq.n	80059fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 fa96 	bl	8005e8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596a:	2b00      	cmp	r3, #0
 800596c:	d041      	beq.n	80059f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	3314      	adds	r3, #20
 8005974:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005978:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800597c:	e853 3f00 	ldrex	r3, [r3]
 8005980:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005984:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800598c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3314      	adds	r3, #20
 8005996:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800599a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800599e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80059a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80059aa:	e841 2300 	strex	r3, r2, [r1]
 80059ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80059b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1d9      	bne.n	800596e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d013      	beq.n	80059ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c6:	4a7e      	ldr	r2, [pc, #504]	; (8005bc0 <HAL_UART_IRQHandler+0x3e0>)
 80059c8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fd ff92 	bl	80038f8 <HAL_DMA_Abort_IT>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d016      	beq.n	8005a08 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80059e4:	4610      	mov	r0, r2
 80059e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e8:	e00e      	b.n	8005a08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f993 	bl	8005d16 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f0:	e00a      	b.n	8005a08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f98f 	bl	8005d16 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f8:	e006      	b.n	8005a08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f98b 	bl	8005d16 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005a06:	e175      	b.n	8005cf4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a08:	bf00      	nop
    return;
 8005a0a:	e173      	b.n	8005cf4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	f040 814f 	bne.w	8005cb4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a1a:	f003 0310 	and.w	r3, r3, #16
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 8148 	beq.w	8005cb4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a28:	f003 0310 	and.w	r3, r3, #16
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 8141 	beq.w	8005cb4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a32:	2300      	movs	r3, #0
 8005a34:	60bb      	str	r3, [r7, #8]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	60bb      	str	r3, [r7, #8]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	60bb      	str	r3, [r7, #8]
 8005a46:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 80b6 	beq.w	8005bc4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 8145 	beq.w	8005cf8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a76:	429a      	cmp	r2, r3
 8005a78:	f080 813e 	bcs.w	8005cf8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a82:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	2b20      	cmp	r3, #32
 8005a8c:	f000 8088 	beq.w	8005ba0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	330c      	adds	r3, #12
 8005a96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a9e:	e853 3f00 	ldrex	r3, [r3]
 8005aa2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005aa6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005aaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	330c      	adds	r3, #12
 8005ab8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005abc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ac0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005ac8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005acc:	e841 2300 	strex	r3, r2, [r1]
 8005ad0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005ad4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1d9      	bne.n	8005a90 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	3314      	adds	r3, #20
 8005ae2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ae6:	e853 3f00 	ldrex	r3, [r3]
 8005aea:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005aec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005aee:	f023 0301 	bic.w	r3, r3, #1
 8005af2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3314      	adds	r3, #20
 8005afc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b00:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b04:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b06:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b08:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b0c:	e841 2300 	strex	r3, r2, [r1]
 8005b10:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1e1      	bne.n	8005adc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	3314      	adds	r3, #20
 8005b1e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b22:	e853 3f00 	ldrex	r3, [r3]
 8005b26:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3314      	adds	r3, #20
 8005b38:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005b3c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b3e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b40:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005b42:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b44:	e841 2300 	strex	r3, r2, [r1]
 8005b48:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005b4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e3      	bne.n	8005b18 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2220      	movs	r2, #32
 8005b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	330c      	adds	r3, #12
 8005b64:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b68:	e853 3f00 	ldrex	r3, [r3]
 8005b6c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b70:	f023 0310 	bic.w	r3, r3, #16
 8005b74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	330c      	adds	r3, #12
 8005b7e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005b82:	65ba      	str	r2, [r7, #88]	; 0x58
 8005b84:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b8a:	e841 2300 	strex	r3, r2, [r1]
 8005b8e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1e3      	bne.n	8005b5e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fd fe71 	bl	8003882 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f8b6 	bl	8005d28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005bbc:	e09c      	b.n	8005cf8 <HAL_UART_IRQHandler+0x518>
 8005bbe:	bf00      	nop
 8005bc0:	08005f51 	.word	0x08005f51
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f000 808e 	beq.w	8005cfc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005be0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 8089 	beq.w	8005cfc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	330c      	adds	r3, #12
 8005bf0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf4:	e853 3f00 	ldrex	r3, [r3]
 8005bf8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	330c      	adds	r3, #12
 8005c0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005c0e:	647a      	str	r2, [r7, #68]	; 0x44
 8005c10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c16:	e841 2300 	strex	r3, r2, [r1]
 8005c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1e3      	bne.n	8005bea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	3314      	adds	r3, #20
 8005c28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	e853 3f00 	ldrex	r3, [r3]
 8005c30:	623b      	str	r3, [r7, #32]
   return(result);
 8005c32:	6a3b      	ldr	r3, [r7, #32]
 8005c34:	f023 0301 	bic.w	r3, r3, #1
 8005c38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	3314      	adds	r3, #20
 8005c42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005c46:	633a      	str	r2, [r7, #48]	; 0x30
 8005c48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c4e:	e841 2300 	strex	r3, r2, [r1]
 8005c52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1e3      	bne.n	8005c22 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2220      	movs	r2, #32
 8005c5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	330c      	adds	r3, #12
 8005c6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	e853 3f00 	ldrex	r3, [r3]
 8005c76:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f023 0310 	bic.w	r3, r3, #16
 8005c7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	330c      	adds	r3, #12
 8005c88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005c8c:	61fa      	str	r2, [r7, #28]
 8005c8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c90:	69b9      	ldr	r1, [r7, #24]
 8005c92:	69fa      	ldr	r2, [r7, #28]
 8005c94:	e841 2300 	strex	r3, r2, [r1]
 8005c98:	617b      	str	r3, [r7, #20]
   return(result);
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1e3      	bne.n	8005c68 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ca6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005caa:	4619      	mov	r1, r3
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 f83b 	bl	8005d28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cb2:	e023      	b.n	8005cfc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d009      	beq.n	8005cd4 <HAL_UART_IRQHandler+0x4f4>
 8005cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d003      	beq.n	8005cd4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f953 	bl	8005f78 <UART_Transmit_IT>
    return;
 8005cd2:	e014      	b.n	8005cfe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00e      	beq.n	8005cfe <HAL_UART_IRQHandler+0x51e>
 8005ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d008      	beq.n	8005cfe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f992 	bl	8006016 <UART_EndTransmit_IT>
    return;
 8005cf2:	e004      	b.n	8005cfe <HAL_UART_IRQHandler+0x51e>
    return;
 8005cf4:	bf00      	nop
 8005cf6:	e002      	b.n	8005cfe <HAL_UART_IRQHandler+0x51e>
      return;
 8005cf8:	bf00      	nop
 8005cfa:	e000      	b.n	8005cfe <HAL_UART_IRQHandler+0x51e>
      return;
 8005cfc:	bf00      	nop
  }
}
 8005cfe:	37e8      	adds	r7, #232	; 0xe8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bc80      	pop	{r7}
 8005d14:	4770      	bx	lr

08005d16 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b083      	sub	sp, #12
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bc80      	pop	{r7}
 8005d26:	4770      	bx	lr

08005d28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	460b      	mov	r3, r1
 8005d32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bc80      	pop	{r7}
 8005d3c:	4770      	bx	lr

08005d3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b090      	sub	sp, #64	; 0x40
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	60f8      	str	r0, [r7, #12]
 8005d46:	60b9      	str	r1, [r7, #8]
 8005d48:	603b      	str	r3, [r7, #0]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d4e:	e050      	b.n	8005df2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d56:	d04c      	beq.n	8005df2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d007      	beq.n	8005d6e <UART_WaitOnFlagUntilTimeout+0x30>
 8005d5e:	f7fd f829 	bl	8002db4 <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d241      	bcs.n	8005df2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	330c      	adds	r3, #12
 8005d74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d78:	e853 3f00 	ldrex	r3, [r3]
 8005d7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	330c      	adds	r3, #12
 8005d8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d8e:	637a      	str	r2, [r7, #52]	; 0x34
 8005d90:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d96:	e841 2300 	strex	r3, r2, [r1]
 8005d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1e5      	bne.n	8005d6e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	3314      	adds	r3, #20
 8005da8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	e853 3f00 	ldrex	r3, [r3]
 8005db0:	613b      	str	r3, [r7, #16]
   return(result);
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f023 0301 	bic.w	r3, r3, #1
 8005db8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3314      	adds	r3, #20
 8005dc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dc2:	623a      	str	r2, [r7, #32]
 8005dc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc6:	69f9      	ldr	r1, [r7, #28]
 8005dc8:	6a3a      	ldr	r2, [r7, #32]
 8005dca:	e841 2300 	strex	r3, r2, [r1]
 8005dce:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1e5      	bne.n	8005da2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2220      	movs	r2, #32
 8005de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e00f      	b.n	8005e12 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	bf0c      	ite	eq
 8005e02:	2301      	moveq	r3, #1
 8005e04:	2300      	movne	r3, #0
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	461a      	mov	r2, r3
 8005e0a:	79fb      	ldrb	r3, [r7, #7]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d09f      	beq.n	8005d50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3740      	adds	r7, #64	; 0x40
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b085      	sub	sp, #20
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	60f8      	str	r0, [r7, #12]
 8005e22:	60b9      	str	r1, [r7, #8]
 8005e24:	4613      	mov	r3, r2
 8005e26:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	88fa      	ldrh	r2, [r7, #6]
 8005e32:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	88fa      	ldrh	r2, [r7, #6]
 8005e38:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2222      	movs	r2, #34	; 0x22
 8005e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d007      	beq.n	8005e60 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68da      	ldr	r2, [r3, #12]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e5e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	695a      	ldr	r2, [r3, #20]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f042 0201 	orr.w	r2, r2, #1
 8005e6e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68da      	ldr	r2, [r3, #12]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f042 0220 	orr.w	r2, r2, #32
 8005e7e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bc80      	pop	{r7}
 8005e8a:	4770      	bx	lr

08005e8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b095      	sub	sp, #84	; 0x54
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	330c      	adds	r3, #12
 8005e9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e9e:	e853 3f00 	ldrex	r3, [r3]
 8005ea2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	330c      	adds	r3, #12
 8005eb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005eb4:	643a      	str	r2, [r7, #64]	; 0x40
 8005eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005eba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ebc:	e841 2300 	strex	r3, r2, [r1]
 8005ec0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1e5      	bne.n	8005e94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	3314      	adds	r3, #20
 8005ece:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed0:	6a3b      	ldr	r3, [r7, #32]
 8005ed2:	e853 3f00 	ldrex	r3, [r3]
 8005ed6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	f023 0301 	bic.w	r3, r3, #1
 8005ede:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	3314      	adds	r3, #20
 8005ee6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ee8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005eea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005eee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ef0:	e841 2300 	strex	r3, r2, [r1]
 8005ef4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1e5      	bne.n	8005ec8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d119      	bne.n	8005f38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	330c      	adds	r3, #12
 8005f0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	e853 3f00 	ldrex	r3, [r3]
 8005f12:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	f023 0310 	bic.w	r3, r3, #16
 8005f1a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	330c      	adds	r3, #12
 8005f22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f24:	61ba      	str	r2, [r7, #24]
 8005f26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f28:	6979      	ldr	r1, [r7, #20]
 8005f2a:	69ba      	ldr	r2, [r7, #24]
 8005f2c:	e841 2300 	strex	r3, r2, [r1]
 8005f30:	613b      	str	r3, [r7, #16]
   return(result);
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1e5      	bne.n	8005f04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f46:	bf00      	nop
 8005f48:	3754      	adds	r7, #84	; 0x54
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bc80      	pop	{r7}
 8005f4e:	4770      	bx	lr

08005f50 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f7ff fed3 	bl	8005d16 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f70:	bf00      	nop
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b21      	cmp	r3, #33	; 0x21
 8005f8a:	d13e      	bne.n	800600a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f94:	d114      	bne.n	8005fc0 <UART_Transmit_IT+0x48>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d110      	bne.n	8005fc0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	881b      	ldrh	r3, [r3, #0]
 8005fa8:	461a      	mov	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fb2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a1b      	ldr	r3, [r3, #32]
 8005fb8:	1c9a      	adds	r2, r3, #2
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	621a      	str	r2, [r3, #32]
 8005fbe:	e008      	b.n	8005fd2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	1c59      	adds	r1, r3, #1
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	6211      	str	r1, [r2, #32]
 8005fca:	781a      	ldrb	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	4619      	mov	r1, r3
 8005fe0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10f      	bne.n	8006006 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68da      	ldr	r2, [r3, #12]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ff4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68da      	ldr	r2, [r3, #12]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006004:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006006:	2300      	movs	r3, #0
 8006008:	e000      	b.n	800600c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800600a:	2302      	movs	r3, #2
  }
}
 800600c:	4618      	mov	r0, r3
 800600e:	3714      	adds	r7, #20
 8006010:	46bd      	mov	sp, r7
 8006012:	bc80      	pop	{r7}
 8006014:	4770      	bx	lr

08006016 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b082      	sub	sp, #8
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68da      	ldr	r2, [r3, #12]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800602c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2220      	movs	r2, #32
 8006032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7ff fe64 	bl	8005d04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b08c      	sub	sp, #48	; 0x30
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b22      	cmp	r3, #34	; 0x22
 8006058:	f040 80ae 	bne.w	80061b8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006064:	d117      	bne.n	8006096 <UART_Receive_IT+0x50>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d113      	bne.n	8006096 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800606e:	2300      	movs	r3, #0
 8006070:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006076:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	b29b      	uxth	r3, r3
 8006080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006084:	b29a      	uxth	r2, r3
 8006086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006088:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608e:	1c9a      	adds	r2, r3, #2
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	629a      	str	r2, [r3, #40]	; 0x28
 8006094:	e026      	b.n	80060e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800609c:	2300      	movs	r3, #0
 800609e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a8:	d007      	beq.n	80060ba <UART_Receive_IT+0x74>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10a      	bne.n	80060c8 <UART_Receive_IT+0x82>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d106      	bne.n	80060c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c4:	701a      	strb	r2, [r3, #0]
 80060c6:	e008      	b.n	80060da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060d4:	b2da      	uxtb	r2, r3
 80060d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060de:	1c5a      	adds	r2, r3, #1
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	3b01      	subs	r3, #1
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	4619      	mov	r1, r3
 80060f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d15d      	bne.n	80061b4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68da      	ldr	r2, [r3, #12]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0220 	bic.w	r2, r2, #32
 8006106:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68da      	ldr	r2, [r3, #12]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006116:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	695a      	ldr	r2, [r3, #20]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 0201 	bic.w	r2, r2, #1
 8006126:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2220      	movs	r2, #32
 800612c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613a:	2b01      	cmp	r3, #1
 800613c:	d135      	bne.n	80061aa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	330c      	adds	r3, #12
 800614a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	e853 3f00 	ldrex	r3, [r3]
 8006152:	613b      	str	r3, [r7, #16]
   return(result);
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	f023 0310 	bic.w	r3, r3, #16
 800615a:	627b      	str	r3, [r7, #36]	; 0x24
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	330c      	adds	r3, #12
 8006162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006164:	623a      	str	r2, [r7, #32]
 8006166:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006168:	69f9      	ldr	r1, [r7, #28]
 800616a:	6a3a      	ldr	r2, [r7, #32]
 800616c:	e841 2300 	strex	r3, r2, [r1]
 8006170:	61bb      	str	r3, [r7, #24]
   return(result);
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1e5      	bne.n	8006144 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0310 	and.w	r3, r3, #16
 8006182:	2b10      	cmp	r3, #16
 8006184:	d10a      	bne.n	800619c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006186:	2300      	movs	r3, #0
 8006188:	60fb      	str	r3, [r7, #12]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	60fb      	str	r3, [r7, #12]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	60fb      	str	r3, [r7, #12]
 800619a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061a0:	4619      	mov	r1, r3
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7ff fdc0 	bl	8005d28 <HAL_UARTEx_RxEventCallback>
 80061a8:	e002      	b.n	80061b0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7fb ff56 	bl	800205c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80061b0:	2300      	movs	r3, #0
 80061b2:	e002      	b.n	80061ba <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80061b4:	2300      	movs	r3, #0
 80061b6:	e000      	b.n	80061ba <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80061b8:	2302      	movs	r3, #2
  }
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3730      	adds	r7, #48	; 0x30
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
	...

080061c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	430a      	orrs	r2, r1
 80061e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	689a      	ldr	r2, [r3, #8]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	431a      	orrs	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80061fe:	f023 030c 	bic.w	r3, r3, #12
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	6812      	ldr	r2, [r2, #0]
 8006206:	68b9      	ldr	r1, [r7, #8]
 8006208:	430b      	orrs	r3, r1
 800620a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	699a      	ldr	r2, [r3, #24]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	430a      	orrs	r2, r1
 8006220:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a2c      	ldr	r2, [pc, #176]	; (80062d8 <UART_SetConfig+0x114>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d103      	bne.n	8006234 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800622c:	f7fe f96e 	bl	800450c <HAL_RCC_GetPCLK2Freq>
 8006230:	60f8      	str	r0, [r7, #12]
 8006232:	e002      	b.n	800623a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006234:	f7fe f956 	bl	80044e4 <HAL_RCC_GetPCLK1Freq>
 8006238:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	4613      	mov	r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	009a      	lsls	r2, r3, #2
 8006244:	441a      	add	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006250:	4a22      	ldr	r2, [pc, #136]	; (80062dc <UART_SetConfig+0x118>)
 8006252:	fba2 2303 	umull	r2, r3, r2, r3
 8006256:	095b      	lsrs	r3, r3, #5
 8006258:	0119      	lsls	r1, r3, #4
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	4613      	mov	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	009a      	lsls	r2, r3, #2
 8006264:	441a      	add	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006270:	4b1a      	ldr	r3, [pc, #104]	; (80062dc <UART_SetConfig+0x118>)
 8006272:	fba3 0302 	umull	r0, r3, r3, r2
 8006276:	095b      	lsrs	r3, r3, #5
 8006278:	2064      	movs	r0, #100	; 0x64
 800627a:	fb00 f303 	mul.w	r3, r0, r3
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	011b      	lsls	r3, r3, #4
 8006282:	3332      	adds	r3, #50	; 0x32
 8006284:	4a15      	ldr	r2, [pc, #84]	; (80062dc <UART_SetConfig+0x118>)
 8006286:	fba2 2303 	umull	r2, r3, r2, r3
 800628a:	095b      	lsrs	r3, r3, #5
 800628c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006290:	4419      	add	r1, r3
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	4613      	mov	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	009a      	lsls	r2, r3, #2
 800629c:	441a      	add	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80062a8:	4b0c      	ldr	r3, [pc, #48]	; (80062dc <UART_SetConfig+0x118>)
 80062aa:	fba3 0302 	umull	r0, r3, r3, r2
 80062ae:	095b      	lsrs	r3, r3, #5
 80062b0:	2064      	movs	r0, #100	; 0x64
 80062b2:	fb00 f303 	mul.w	r3, r0, r3
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	011b      	lsls	r3, r3, #4
 80062ba:	3332      	adds	r3, #50	; 0x32
 80062bc:	4a07      	ldr	r2, [pc, #28]	; (80062dc <UART_SetConfig+0x118>)
 80062be:	fba2 2303 	umull	r2, r3, r2, r3
 80062c2:	095b      	lsrs	r3, r3, #5
 80062c4:	f003 020f 	and.w	r2, r3, #15
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	440a      	add	r2, r1
 80062ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80062d0:	bf00      	nop
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	40013800 	.word	0x40013800
 80062dc:	51eb851f 	.word	0x51eb851f

080062e0 <atof>:
 80062e0:	2100      	movs	r1, #0
 80062e2:	f001 bac1 	b.w	8007868 <strtod>

080062e6 <atoi>:
 80062e6:	220a      	movs	r2, #10
 80062e8:	2100      	movs	r1, #0
 80062ea:	f001 bb45 	b.w	8007978 <strtol>
	...

080062f0 <__errno>:
 80062f0:	4b01      	ldr	r3, [pc, #4]	; (80062f8 <__errno+0x8>)
 80062f2:	6818      	ldr	r0, [r3, #0]
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	20000040 	.word	0x20000040

080062fc <__libc_init_array>:
 80062fc:	b570      	push	{r4, r5, r6, lr}
 80062fe:	2600      	movs	r6, #0
 8006300:	4d0c      	ldr	r5, [pc, #48]	; (8006334 <__libc_init_array+0x38>)
 8006302:	4c0d      	ldr	r4, [pc, #52]	; (8006338 <__libc_init_array+0x3c>)
 8006304:	1b64      	subs	r4, r4, r5
 8006306:	10a4      	asrs	r4, r4, #2
 8006308:	42a6      	cmp	r6, r4
 800630a:	d109      	bne.n	8006320 <__libc_init_array+0x24>
 800630c:	f004 fa86 	bl	800a81c <_init>
 8006310:	2600      	movs	r6, #0
 8006312:	4d0a      	ldr	r5, [pc, #40]	; (800633c <__libc_init_array+0x40>)
 8006314:	4c0a      	ldr	r4, [pc, #40]	; (8006340 <__libc_init_array+0x44>)
 8006316:	1b64      	subs	r4, r4, r5
 8006318:	10a4      	asrs	r4, r4, #2
 800631a:	42a6      	cmp	r6, r4
 800631c:	d105      	bne.n	800632a <__libc_init_array+0x2e>
 800631e:	bd70      	pop	{r4, r5, r6, pc}
 8006320:	f855 3b04 	ldr.w	r3, [r5], #4
 8006324:	4798      	blx	r3
 8006326:	3601      	adds	r6, #1
 8006328:	e7ee      	b.n	8006308 <__libc_init_array+0xc>
 800632a:	f855 3b04 	ldr.w	r3, [r5], #4
 800632e:	4798      	blx	r3
 8006330:	3601      	adds	r6, #1
 8006332:	e7f2      	b.n	800631a <__libc_init_array+0x1e>
 8006334:	0800ad84 	.word	0x0800ad84
 8006338:	0800ad84 	.word	0x0800ad84
 800633c:	0800ad84 	.word	0x0800ad84
 8006340:	0800ad88 	.word	0x0800ad88

08006344 <memset>:
 8006344:	4603      	mov	r3, r0
 8006346:	4402      	add	r2, r0
 8006348:	4293      	cmp	r3, r2
 800634a:	d100      	bne.n	800634e <memset+0xa>
 800634c:	4770      	bx	lr
 800634e:	f803 1b01 	strb.w	r1, [r3], #1
 8006352:	e7f9      	b.n	8006348 <memset+0x4>

08006354 <__cvt>:
 8006354:	2b00      	cmp	r3, #0
 8006356:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800635a:	461f      	mov	r7, r3
 800635c:	bfbb      	ittet	lt
 800635e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006362:	461f      	movlt	r7, r3
 8006364:	2300      	movge	r3, #0
 8006366:	232d      	movlt	r3, #45	; 0x2d
 8006368:	b088      	sub	sp, #32
 800636a:	4614      	mov	r4, r2
 800636c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800636e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006370:	7013      	strb	r3, [r2, #0]
 8006372:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006374:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006378:	f023 0820 	bic.w	r8, r3, #32
 800637c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006380:	d005      	beq.n	800638e <__cvt+0x3a>
 8006382:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006386:	d100      	bne.n	800638a <__cvt+0x36>
 8006388:	3501      	adds	r5, #1
 800638a:	2302      	movs	r3, #2
 800638c:	e000      	b.n	8006390 <__cvt+0x3c>
 800638e:	2303      	movs	r3, #3
 8006390:	aa07      	add	r2, sp, #28
 8006392:	9204      	str	r2, [sp, #16]
 8006394:	aa06      	add	r2, sp, #24
 8006396:	e9cd a202 	strd	sl, r2, [sp, #8]
 800639a:	e9cd 3500 	strd	r3, r5, [sp]
 800639e:	4622      	mov	r2, r4
 80063a0:	463b      	mov	r3, r7
 80063a2:	f001 fbb9 	bl	8007b18 <_dtoa_r>
 80063a6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80063aa:	4606      	mov	r6, r0
 80063ac:	d102      	bne.n	80063b4 <__cvt+0x60>
 80063ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063b0:	07db      	lsls	r3, r3, #31
 80063b2:	d522      	bpl.n	80063fa <__cvt+0xa6>
 80063b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063b8:	eb06 0905 	add.w	r9, r6, r5
 80063bc:	d110      	bne.n	80063e0 <__cvt+0x8c>
 80063be:	7833      	ldrb	r3, [r6, #0]
 80063c0:	2b30      	cmp	r3, #48	; 0x30
 80063c2:	d10a      	bne.n	80063da <__cvt+0x86>
 80063c4:	2200      	movs	r2, #0
 80063c6:	2300      	movs	r3, #0
 80063c8:	4620      	mov	r0, r4
 80063ca:	4639      	mov	r1, r7
 80063cc:	f7fa faec 	bl	80009a8 <__aeabi_dcmpeq>
 80063d0:	b918      	cbnz	r0, 80063da <__cvt+0x86>
 80063d2:	f1c5 0501 	rsb	r5, r5, #1
 80063d6:	f8ca 5000 	str.w	r5, [sl]
 80063da:	f8da 3000 	ldr.w	r3, [sl]
 80063de:	4499      	add	r9, r3
 80063e0:	2200      	movs	r2, #0
 80063e2:	2300      	movs	r3, #0
 80063e4:	4620      	mov	r0, r4
 80063e6:	4639      	mov	r1, r7
 80063e8:	f7fa fade 	bl	80009a8 <__aeabi_dcmpeq>
 80063ec:	b108      	cbz	r0, 80063f2 <__cvt+0x9e>
 80063ee:	f8cd 901c 	str.w	r9, [sp, #28]
 80063f2:	2230      	movs	r2, #48	; 0x30
 80063f4:	9b07      	ldr	r3, [sp, #28]
 80063f6:	454b      	cmp	r3, r9
 80063f8:	d307      	bcc.n	800640a <__cvt+0xb6>
 80063fa:	4630      	mov	r0, r6
 80063fc:	9b07      	ldr	r3, [sp, #28]
 80063fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006400:	1b9b      	subs	r3, r3, r6
 8006402:	6013      	str	r3, [r2, #0]
 8006404:	b008      	add	sp, #32
 8006406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800640a:	1c59      	adds	r1, r3, #1
 800640c:	9107      	str	r1, [sp, #28]
 800640e:	701a      	strb	r2, [r3, #0]
 8006410:	e7f0      	b.n	80063f4 <__cvt+0xa0>

08006412 <__exponent>:
 8006412:	4603      	mov	r3, r0
 8006414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006416:	2900      	cmp	r1, #0
 8006418:	f803 2b02 	strb.w	r2, [r3], #2
 800641c:	bfb6      	itet	lt
 800641e:	222d      	movlt	r2, #45	; 0x2d
 8006420:	222b      	movge	r2, #43	; 0x2b
 8006422:	4249      	neglt	r1, r1
 8006424:	2909      	cmp	r1, #9
 8006426:	7042      	strb	r2, [r0, #1]
 8006428:	dd2b      	ble.n	8006482 <__exponent+0x70>
 800642a:	f10d 0407 	add.w	r4, sp, #7
 800642e:	46a4      	mov	ip, r4
 8006430:	270a      	movs	r7, #10
 8006432:	fb91 f6f7 	sdiv	r6, r1, r7
 8006436:	460a      	mov	r2, r1
 8006438:	46a6      	mov	lr, r4
 800643a:	fb07 1516 	mls	r5, r7, r6, r1
 800643e:	2a63      	cmp	r2, #99	; 0x63
 8006440:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006444:	4631      	mov	r1, r6
 8006446:	f104 34ff 	add.w	r4, r4, #4294967295
 800644a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800644e:	dcf0      	bgt.n	8006432 <__exponent+0x20>
 8006450:	3130      	adds	r1, #48	; 0x30
 8006452:	f1ae 0502 	sub.w	r5, lr, #2
 8006456:	f804 1c01 	strb.w	r1, [r4, #-1]
 800645a:	4629      	mov	r1, r5
 800645c:	1c44      	adds	r4, r0, #1
 800645e:	4561      	cmp	r1, ip
 8006460:	d30a      	bcc.n	8006478 <__exponent+0x66>
 8006462:	f10d 0209 	add.w	r2, sp, #9
 8006466:	eba2 020e 	sub.w	r2, r2, lr
 800646a:	4565      	cmp	r5, ip
 800646c:	bf88      	it	hi
 800646e:	2200      	movhi	r2, #0
 8006470:	4413      	add	r3, r2
 8006472:	1a18      	subs	r0, r3, r0
 8006474:	b003      	add	sp, #12
 8006476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006478:	f811 2b01 	ldrb.w	r2, [r1], #1
 800647c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006480:	e7ed      	b.n	800645e <__exponent+0x4c>
 8006482:	2330      	movs	r3, #48	; 0x30
 8006484:	3130      	adds	r1, #48	; 0x30
 8006486:	7083      	strb	r3, [r0, #2]
 8006488:	70c1      	strb	r1, [r0, #3]
 800648a:	1d03      	adds	r3, r0, #4
 800648c:	e7f1      	b.n	8006472 <__exponent+0x60>
	...

08006490 <_printf_float>:
 8006490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006494:	b091      	sub	sp, #68	; 0x44
 8006496:	460c      	mov	r4, r1
 8006498:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800649c:	4616      	mov	r6, r2
 800649e:	461f      	mov	r7, r3
 80064a0:	4605      	mov	r5, r0
 80064a2:	f002 fc8d 	bl	8008dc0 <_localeconv_r>
 80064a6:	6803      	ldr	r3, [r0, #0]
 80064a8:	4618      	mov	r0, r3
 80064aa:	9309      	str	r3, [sp, #36]	; 0x24
 80064ac:	f7f9 fe50 	bl	8000150 <strlen>
 80064b0:	2300      	movs	r3, #0
 80064b2:	930e      	str	r3, [sp, #56]	; 0x38
 80064b4:	f8d8 3000 	ldr.w	r3, [r8]
 80064b8:	900a      	str	r0, [sp, #40]	; 0x28
 80064ba:	3307      	adds	r3, #7
 80064bc:	f023 0307 	bic.w	r3, r3, #7
 80064c0:	f103 0208 	add.w	r2, r3, #8
 80064c4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80064c8:	f8d4 b000 	ldr.w	fp, [r4]
 80064cc:	f8c8 2000 	str.w	r2, [r8]
 80064d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80064d8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80064dc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80064e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80064e2:	f04f 32ff 	mov.w	r2, #4294967295
 80064e6:	4640      	mov	r0, r8
 80064e8:	4b9c      	ldr	r3, [pc, #624]	; (800675c <_printf_float+0x2cc>)
 80064ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064ec:	f7fa fa8e 	bl	8000a0c <__aeabi_dcmpun>
 80064f0:	bb70      	cbnz	r0, 8006550 <_printf_float+0xc0>
 80064f2:	f04f 32ff 	mov.w	r2, #4294967295
 80064f6:	4640      	mov	r0, r8
 80064f8:	4b98      	ldr	r3, [pc, #608]	; (800675c <_printf_float+0x2cc>)
 80064fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064fc:	f7fa fa68 	bl	80009d0 <__aeabi_dcmple>
 8006500:	bb30      	cbnz	r0, 8006550 <_printf_float+0xc0>
 8006502:	2200      	movs	r2, #0
 8006504:	2300      	movs	r3, #0
 8006506:	4640      	mov	r0, r8
 8006508:	4651      	mov	r1, sl
 800650a:	f7fa fa57 	bl	80009bc <__aeabi_dcmplt>
 800650e:	b110      	cbz	r0, 8006516 <_printf_float+0x86>
 8006510:	232d      	movs	r3, #45	; 0x2d
 8006512:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006516:	4b92      	ldr	r3, [pc, #584]	; (8006760 <_printf_float+0x2d0>)
 8006518:	4892      	ldr	r0, [pc, #584]	; (8006764 <_printf_float+0x2d4>)
 800651a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800651e:	bf94      	ite	ls
 8006520:	4698      	movls	r8, r3
 8006522:	4680      	movhi	r8, r0
 8006524:	2303      	movs	r3, #3
 8006526:	f04f 0a00 	mov.w	sl, #0
 800652a:	6123      	str	r3, [r4, #16]
 800652c:	f02b 0304 	bic.w	r3, fp, #4
 8006530:	6023      	str	r3, [r4, #0]
 8006532:	4633      	mov	r3, r6
 8006534:	4621      	mov	r1, r4
 8006536:	4628      	mov	r0, r5
 8006538:	9700      	str	r7, [sp, #0]
 800653a:	aa0f      	add	r2, sp, #60	; 0x3c
 800653c:	f000 f9d4 	bl	80068e8 <_printf_common>
 8006540:	3001      	adds	r0, #1
 8006542:	f040 8090 	bne.w	8006666 <_printf_float+0x1d6>
 8006546:	f04f 30ff 	mov.w	r0, #4294967295
 800654a:	b011      	add	sp, #68	; 0x44
 800654c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006550:	4642      	mov	r2, r8
 8006552:	4653      	mov	r3, sl
 8006554:	4640      	mov	r0, r8
 8006556:	4651      	mov	r1, sl
 8006558:	f7fa fa58 	bl	8000a0c <__aeabi_dcmpun>
 800655c:	b148      	cbz	r0, 8006572 <_printf_float+0xe2>
 800655e:	f1ba 0f00 	cmp.w	sl, #0
 8006562:	bfb8      	it	lt
 8006564:	232d      	movlt	r3, #45	; 0x2d
 8006566:	4880      	ldr	r0, [pc, #512]	; (8006768 <_printf_float+0x2d8>)
 8006568:	bfb8      	it	lt
 800656a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800656e:	4b7f      	ldr	r3, [pc, #508]	; (800676c <_printf_float+0x2dc>)
 8006570:	e7d3      	b.n	800651a <_printf_float+0x8a>
 8006572:	6863      	ldr	r3, [r4, #4]
 8006574:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006578:	1c5a      	adds	r2, r3, #1
 800657a:	d142      	bne.n	8006602 <_printf_float+0x172>
 800657c:	2306      	movs	r3, #6
 800657e:	6063      	str	r3, [r4, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	9206      	str	r2, [sp, #24]
 8006584:	aa0e      	add	r2, sp, #56	; 0x38
 8006586:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800658a:	aa0d      	add	r2, sp, #52	; 0x34
 800658c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006590:	9203      	str	r2, [sp, #12]
 8006592:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006596:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800659a:	6023      	str	r3, [r4, #0]
 800659c:	6863      	ldr	r3, [r4, #4]
 800659e:	4642      	mov	r2, r8
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	4628      	mov	r0, r5
 80065a4:	4653      	mov	r3, sl
 80065a6:	910b      	str	r1, [sp, #44]	; 0x2c
 80065a8:	f7ff fed4 	bl	8006354 <__cvt>
 80065ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065ae:	4680      	mov	r8, r0
 80065b0:	2947      	cmp	r1, #71	; 0x47
 80065b2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80065b4:	d108      	bne.n	80065c8 <_printf_float+0x138>
 80065b6:	1cc8      	adds	r0, r1, #3
 80065b8:	db02      	blt.n	80065c0 <_printf_float+0x130>
 80065ba:	6863      	ldr	r3, [r4, #4]
 80065bc:	4299      	cmp	r1, r3
 80065be:	dd40      	ble.n	8006642 <_printf_float+0x1b2>
 80065c0:	f1a9 0902 	sub.w	r9, r9, #2
 80065c4:	fa5f f989 	uxtb.w	r9, r9
 80065c8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80065cc:	d81f      	bhi.n	800660e <_printf_float+0x17e>
 80065ce:	464a      	mov	r2, r9
 80065d0:	3901      	subs	r1, #1
 80065d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80065d6:	910d      	str	r1, [sp, #52]	; 0x34
 80065d8:	f7ff ff1b 	bl	8006412 <__exponent>
 80065dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065de:	4682      	mov	sl, r0
 80065e0:	1813      	adds	r3, r2, r0
 80065e2:	2a01      	cmp	r2, #1
 80065e4:	6123      	str	r3, [r4, #16]
 80065e6:	dc02      	bgt.n	80065ee <_printf_float+0x15e>
 80065e8:	6822      	ldr	r2, [r4, #0]
 80065ea:	07d2      	lsls	r2, r2, #31
 80065ec:	d501      	bpl.n	80065f2 <_printf_float+0x162>
 80065ee:	3301      	adds	r3, #1
 80065f0:	6123      	str	r3, [r4, #16]
 80065f2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d09b      	beq.n	8006532 <_printf_float+0xa2>
 80065fa:	232d      	movs	r3, #45	; 0x2d
 80065fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006600:	e797      	b.n	8006532 <_printf_float+0xa2>
 8006602:	2947      	cmp	r1, #71	; 0x47
 8006604:	d1bc      	bne.n	8006580 <_printf_float+0xf0>
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1ba      	bne.n	8006580 <_printf_float+0xf0>
 800660a:	2301      	movs	r3, #1
 800660c:	e7b7      	b.n	800657e <_printf_float+0xee>
 800660e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006612:	d118      	bne.n	8006646 <_printf_float+0x1b6>
 8006614:	2900      	cmp	r1, #0
 8006616:	6863      	ldr	r3, [r4, #4]
 8006618:	dd0b      	ble.n	8006632 <_printf_float+0x1a2>
 800661a:	6121      	str	r1, [r4, #16]
 800661c:	b913      	cbnz	r3, 8006624 <_printf_float+0x194>
 800661e:	6822      	ldr	r2, [r4, #0]
 8006620:	07d0      	lsls	r0, r2, #31
 8006622:	d502      	bpl.n	800662a <_printf_float+0x19a>
 8006624:	3301      	adds	r3, #1
 8006626:	440b      	add	r3, r1
 8006628:	6123      	str	r3, [r4, #16]
 800662a:	f04f 0a00 	mov.w	sl, #0
 800662e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006630:	e7df      	b.n	80065f2 <_printf_float+0x162>
 8006632:	b913      	cbnz	r3, 800663a <_printf_float+0x1aa>
 8006634:	6822      	ldr	r2, [r4, #0]
 8006636:	07d2      	lsls	r2, r2, #31
 8006638:	d501      	bpl.n	800663e <_printf_float+0x1ae>
 800663a:	3302      	adds	r3, #2
 800663c:	e7f4      	b.n	8006628 <_printf_float+0x198>
 800663e:	2301      	movs	r3, #1
 8006640:	e7f2      	b.n	8006628 <_printf_float+0x198>
 8006642:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006646:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006648:	4299      	cmp	r1, r3
 800664a:	db05      	blt.n	8006658 <_printf_float+0x1c8>
 800664c:	6823      	ldr	r3, [r4, #0]
 800664e:	6121      	str	r1, [r4, #16]
 8006650:	07d8      	lsls	r0, r3, #31
 8006652:	d5ea      	bpl.n	800662a <_printf_float+0x19a>
 8006654:	1c4b      	adds	r3, r1, #1
 8006656:	e7e7      	b.n	8006628 <_printf_float+0x198>
 8006658:	2900      	cmp	r1, #0
 800665a:	bfcc      	ite	gt
 800665c:	2201      	movgt	r2, #1
 800665e:	f1c1 0202 	rsble	r2, r1, #2
 8006662:	4413      	add	r3, r2
 8006664:	e7e0      	b.n	8006628 <_printf_float+0x198>
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	055a      	lsls	r2, r3, #21
 800666a:	d407      	bmi.n	800667c <_printf_float+0x1ec>
 800666c:	6923      	ldr	r3, [r4, #16]
 800666e:	4642      	mov	r2, r8
 8006670:	4631      	mov	r1, r6
 8006672:	4628      	mov	r0, r5
 8006674:	47b8      	blx	r7
 8006676:	3001      	adds	r0, #1
 8006678:	d12b      	bne.n	80066d2 <_printf_float+0x242>
 800667a:	e764      	b.n	8006546 <_printf_float+0xb6>
 800667c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006680:	f240 80dd 	bls.w	800683e <_printf_float+0x3ae>
 8006684:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006688:	2200      	movs	r2, #0
 800668a:	2300      	movs	r3, #0
 800668c:	f7fa f98c 	bl	80009a8 <__aeabi_dcmpeq>
 8006690:	2800      	cmp	r0, #0
 8006692:	d033      	beq.n	80066fc <_printf_float+0x26c>
 8006694:	2301      	movs	r3, #1
 8006696:	4631      	mov	r1, r6
 8006698:	4628      	mov	r0, r5
 800669a:	4a35      	ldr	r2, [pc, #212]	; (8006770 <_printf_float+0x2e0>)
 800669c:	47b8      	blx	r7
 800669e:	3001      	adds	r0, #1
 80066a0:	f43f af51 	beq.w	8006546 <_printf_float+0xb6>
 80066a4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80066a8:	429a      	cmp	r2, r3
 80066aa:	db02      	blt.n	80066b2 <_printf_float+0x222>
 80066ac:	6823      	ldr	r3, [r4, #0]
 80066ae:	07d8      	lsls	r0, r3, #31
 80066b0:	d50f      	bpl.n	80066d2 <_printf_float+0x242>
 80066b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066b6:	4631      	mov	r1, r6
 80066b8:	4628      	mov	r0, r5
 80066ba:	47b8      	blx	r7
 80066bc:	3001      	adds	r0, #1
 80066be:	f43f af42 	beq.w	8006546 <_printf_float+0xb6>
 80066c2:	f04f 0800 	mov.w	r8, #0
 80066c6:	f104 091a 	add.w	r9, r4, #26
 80066ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066cc:	3b01      	subs	r3, #1
 80066ce:	4543      	cmp	r3, r8
 80066d0:	dc09      	bgt.n	80066e6 <_printf_float+0x256>
 80066d2:	6823      	ldr	r3, [r4, #0]
 80066d4:	079b      	lsls	r3, r3, #30
 80066d6:	f100 8102 	bmi.w	80068de <_printf_float+0x44e>
 80066da:	68e0      	ldr	r0, [r4, #12]
 80066dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066de:	4298      	cmp	r0, r3
 80066e0:	bfb8      	it	lt
 80066e2:	4618      	movlt	r0, r3
 80066e4:	e731      	b.n	800654a <_printf_float+0xba>
 80066e6:	2301      	movs	r3, #1
 80066e8:	464a      	mov	r2, r9
 80066ea:	4631      	mov	r1, r6
 80066ec:	4628      	mov	r0, r5
 80066ee:	47b8      	blx	r7
 80066f0:	3001      	adds	r0, #1
 80066f2:	f43f af28 	beq.w	8006546 <_printf_float+0xb6>
 80066f6:	f108 0801 	add.w	r8, r8, #1
 80066fa:	e7e6      	b.n	80066ca <_printf_float+0x23a>
 80066fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066fe:	2b00      	cmp	r3, #0
 8006700:	dc38      	bgt.n	8006774 <_printf_float+0x2e4>
 8006702:	2301      	movs	r3, #1
 8006704:	4631      	mov	r1, r6
 8006706:	4628      	mov	r0, r5
 8006708:	4a19      	ldr	r2, [pc, #100]	; (8006770 <_printf_float+0x2e0>)
 800670a:	47b8      	blx	r7
 800670c:	3001      	adds	r0, #1
 800670e:	f43f af1a 	beq.w	8006546 <_printf_float+0xb6>
 8006712:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006716:	4313      	orrs	r3, r2
 8006718:	d102      	bne.n	8006720 <_printf_float+0x290>
 800671a:	6823      	ldr	r3, [r4, #0]
 800671c:	07d9      	lsls	r1, r3, #31
 800671e:	d5d8      	bpl.n	80066d2 <_printf_float+0x242>
 8006720:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006724:	4631      	mov	r1, r6
 8006726:	4628      	mov	r0, r5
 8006728:	47b8      	blx	r7
 800672a:	3001      	adds	r0, #1
 800672c:	f43f af0b 	beq.w	8006546 <_printf_float+0xb6>
 8006730:	f04f 0900 	mov.w	r9, #0
 8006734:	f104 0a1a 	add.w	sl, r4, #26
 8006738:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800673a:	425b      	negs	r3, r3
 800673c:	454b      	cmp	r3, r9
 800673e:	dc01      	bgt.n	8006744 <_printf_float+0x2b4>
 8006740:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006742:	e794      	b.n	800666e <_printf_float+0x1de>
 8006744:	2301      	movs	r3, #1
 8006746:	4652      	mov	r2, sl
 8006748:	4631      	mov	r1, r6
 800674a:	4628      	mov	r0, r5
 800674c:	47b8      	blx	r7
 800674e:	3001      	adds	r0, #1
 8006750:	f43f aef9 	beq.w	8006546 <_printf_float+0xb6>
 8006754:	f109 0901 	add.w	r9, r9, #1
 8006758:	e7ee      	b.n	8006738 <_printf_float+0x2a8>
 800675a:	bf00      	nop
 800675c:	7fefffff 	.word	0x7fefffff
 8006760:	0800a8e8 	.word	0x0800a8e8
 8006764:	0800a8ec 	.word	0x0800a8ec
 8006768:	0800a8f4 	.word	0x0800a8f4
 800676c:	0800a8f0 	.word	0x0800a8f0
 8006770:	0800a8f8 	.word	0x0800a8f8
 8006774:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006776:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006778:	429a      	cmp	r2, r3
 800677a:	bfa8      	it	ge
 800677c:	461a      	movge	r2, r3
 800677e:	2a00      	cmp	r2, #0
 8006780:	4691      	mov	r9, r2
 8006782:	dc37      	bgt.n	80067f4 <_printf_float+0x364>
 8006784:	f04f 0b00 	mov.w	fp, #0
 8006788:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800678c:	f104 021a 	add.w	r2, r4, #26
 8006790:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006794:	ebaa 0309 	sub.w	r3, sl, r9
 8006798:	455b      	cmp	r3, fp
 800679a:	dc33      	bgt.n	8006804 <_printf_float+0x374>
 800679c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80067a0:	429a      	cmp	r2, r3
 80067a2:	db3b      	blt.n	800681c <_printf_float+0x38c>
 80067a4:	6823      	ldr	r3, [r4, #0]
 80067a6:	07da      	lsls	r2, r3, #31
 80067a8:	d438      	bmi.n	800681c <_printf_float+0x38c>
 80067aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 80067ae:	eba3 020a 	sub.w	r2, r3, sl
 80067b2:	eba3 0901 	sub.w	r9, r3, r1
 80067b6:	4591      	cmp	r9, r2
 80067b8:	bfa8      	it	ge
 80067ba:	4691      	movge	r9, r2
 80067bc:	f1b9 0f00 	cmp.w	r9, #0
 80067c0:	dc34      	bgt.n	800682c <_printf_float+0x39c>
 80067c2:	f04f 0800 	mov.w	r8, #0
 80067c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067ca:	f104 0a1a 	add.w	sl, r4, #26
 80067ce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80067d2:	1a9b      	subs	r3, r3, r2
 80067d4:	eba3 0309 	sub.w	r3, r3, r9
 80067d8:	4543      	cmp	r3, r8
 80067da:	f77f af7a 	ble.w	80066d2 <_printf_float+0x242>
 80067de:	2301      	movs	r3, #1
 80067e0:	4652      	mov	r2, sl
 80067e2:	4631      	mov	r1, r6
 80067e4:	4628      	mov	r0, r5
 80067e6:	47b8      	blx	r7
 80067e8:	3001      	adds	r0, #1
 80067ea:	f43f aeac 	beq.w	8006546 <_printf_float+0xb6>
 80067ee:	f108 0801 	add.w	r8, r8, #1
 80067f2:	e7ec      	b.n	80067ce <_printf_float+0x33e>
 80067f4:	4613      	mov	r3, r2
 80067f6:	4631      	mov	r1, r6
 80067f8:	4642      	mov	r2, r8
 80067fa:	4628      	mov	r0, r5
 80067fc:	47b8      	blx	r7
 80067fe:	3001      	adds	r0, #1
 8006800:	d1c0      	bne.n	8006784 <_printf_float+0x2f4>
 8006802:	e6a0      	b.n	8006546 <_printf_float+0xb6>
 8006804:	2301      	movs	r3, #1
 8006806:	4631      	mov	r1, r6
 8006808:	4628      	mov	r0, r5
 800680a:	920b      	str	r2, [sp, #44]	; 0x2c
 800680c:	47b8      	blx	r7
 800680e:	3001      	adds	r0, #1
 8006810:	f43f ae99 	beq.w	8006546 <_printf_float+0xb6>
 8006814:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006816:	f10b 0b01 	add.w	fp, fp, #1
 800681a:	e7b9      	b.n	8006790 <_printf_float+0x300>
 800681c:	4631      	mov	r1, r6
 800681e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006822:	4628      	mov	r0, r5
 8006824:	47b8      	blx	r7
 8006826:	3001      	adds	r0, #1
 8006828:	d1bf      	bne.n	80067aa <_printf_float+0x31a>
 800682a:	e68c      	b.n	8006546 <_printf_float+0xb6>
 800682c:	464b      	mov	r3, r9
 800682e:	4631      	mov	r1, r6
 8006830:	4628      	mov	r0, r5
 8006832:	eb08 020a 	add.w	r2, r8, sl
 8006836:	47b8      	blx	r7
 8006838:	3001      	adds	r0, #1
 800683a:	d1c2      	bne.n	80067c2 <_printf_float+0x332>
 800683c:	e683      	b.n	8006546 <_printf_float+0xb6>
 800683e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006840:	2a01      	cmp	r2, #1
 8006842:	dc01      	bgt.n	8006848 <_printf_float+0x3b8>
 8006844:	07db      	lsls	r3, r3, #31
 8006846:	d537      	bpl.n	80068b8 <_printf_float+0x428>
 8006848:	2301      	movs	r3, #1
 800684a:	4642      	mov	r2, r8
 800684c:	4631      	mov	r1, r6
 800684e:	4628      	mov	r0, r5
 8006850:	47b8      	blx	r7
 8006852:	3001      	adds	r0, #1
 8006854:	f43f ae77 	beq.w	8006546 <_printf_float+0xb6>
 8006858:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800685c:	4631      	mov	r1, r6
 800685e:	4628      	mov	r0, r5
 8006860:	47b8      	blx	r7
 8006862:	3001      	adds	r0, #1
 8006864:	f43f ae6f 	beq.w	8006546 <_printf_float+0xb6>
 8006868:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800686c:	2200      	movs	r2, #0
 800686e:	2300      	movs	r3, #0
 8006870:	f7fa f89a 	bl	80009a8 <__aeabi_dcmpeq>
 8006874:	b9d8      	cbnz	r0, 80068ae <_printf_float+0x41e>
 8006876:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006878:	f108 0201 	add.w	r2, r8, #1
 800687c:	3b01      	subs	r3, #1
 800687e:	4631      	mov	r1, r6
 8006880:	4628      	mov	r0, r5
 8006882:	47b8      	blx	r7
 8006884:	3001      	adds	r0, #1
 8006886:	d10e      	bne.n	80068a6 <_printf_float+0x416>
 8006888:	e65d      	b.n	8006546 <_printf_float+0xb6>
 800688a:	2301      	movs	r3, #1
 800688c:	464a      	mov	r2, r9
 800688e:	4631      	mov	r1, r6
 8006890:	4628      	mov	r0, r5
 8006892:	47b8      	blx	r7
 8006894:	3001      	adds	r0, #1
 8006896:	f43f ae56 	beq.w	8006546 <_printf_float+0xb6>
 800689a:	f108 0801 	add.w	r8, r8, #1
 800689e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068a0:	3b01      	subs	r3, #1
 80068a2:	4543      	cmp	r3, r8
 80068a4:	dcf1      	bgt.n	800688a <_printf_float+0x3fa>
 80068a6:	4653      	mov	r3, sl
 80068a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80068ac:	e6e0      	b.n	8006670 <_printf_float+0x1e0>
 80068ae:	f04f 0800 	mov.w	r8, #0
 80068b2:	f104 091a 	add.w	r9, r4, #26
 80068b6:	e7f2      	b.n	800689e <_printf_float+0x40e>
 80068b8:	2301      	movs	r3, #1
 80068ba:	4642      	mov	r2, r8
 80068bc:	e7df      	b.n	800687e <_printf_float+0x3ee>
 80068be:	2301      	movs	r3, #1
 80068c0:	464a      	mov	r2, r9
 80068c2:	4631      	mov	r1, r6
 80068c4:	4628      	mov	r0, r5
 80068c6:	47b8      	blx	r7
 80068c8:	3001      	adds	r0, #1
 80068ca:	f43f ae3c 	beq.w	8006546 <_printf_float+0xb6>
 80068ce:	f108 0801 	add.w	r8, r8, #1
 80068d2:	68e3      	ldr	r3, [r4, #12]
 80068d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80068d6:	1a5b      	subs	r3, r3, r1
 80068d8:	4543      	cmp	r3, r8
 80068da:	dcf0      	bgt.n	80068be <_printf_float+0x42e>
 80068dc:	e6fd      	b.n	80066da <_printf_float+0x24a>
 80068de:	f04f 0800 	mov.w	r8, #0
 80068e2:	f104 0919 	add.w	r9, r4, #25
 80068e6:	e7f4      	b.n	80068d2 <_printf_float+0x442>

080068e8 <_printf_common>:
 80068e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068ec:	4616      	mov	r6, r2
 80068ee:	4699      	mov	r9, r3
 80068f0:	688a      	ldr	r2, [r1, #8]
 80068f2:	690b      	ldr	r3, [r1, #16]
 80068f4:	4607      	mov	r7, r0
 80068f6:	4293      	cmp	r3, r2
 80068f8:	bfb8      	it	lt
 80068fa:	4613      	movlt	r3, r2
 80068fc:	6033      	str	r3, [r6, #0]
 80068fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006902:	460c      	mov	r4, r1
 8006904:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006908:	b10a      	cbz	r2, 800690e <_printf_common+0x26>
 800690a:	3301      	adds	r3, #1
 800690c:	6033      	str	r3, [r6, #0]
 800690e:	6823      	ldr	r3, [r4, #0]
 8006910:	0699      	lsls	r1, r3, #26
 8006912:	bf42      	ittt	mi
 8006914:	6833      	ldrmi	r3, [r6, #0]
 8006916:	3302      	addmi	r3, #2
 8006918:	6033      	strmi	r3, [r6, #0]
 800691a:	6825      	ldr	r5, [r4, #0]
 800691c:	f015 0506 	ands.w	r5, r5, #6
 8006920:	d106      	bne.n	8006930 <_printf_common+0x48>
 8006922:	f104 0a19 	add.w	sl, r4, #25
 8006926:	68e3      	ldr	r3, [r4, #12]
 8006928:	6832      	ldr	r2, [r6, #0]
 800692a:	1a9b      	subs	r3, r3, r2
 800692c:	42ab      	cmp	r3, r5
 800692e:	dc28      	bgt.n	8006982 <_printf_common+0x9a>
 8006930:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006934:	1e13      	subs	r3, r2, #0
 8006936:	6822      	ldr	r2, [r4, #0]
 8006938:	bf18      	it	ne
 800693a:	2301      	movne	r3, #1
 800693c:	0692      	lsls	r2, r2, #26
 800693e:	d42d      	bmi.n	800699c <_printf_common+0xb4>
 8006940:	4649      	mov	r1, r9
 8006942:	4638      	mov	r0, r7
 8006944:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006948:	47c0      	blx	r8
 800694a:	3001      	adds	r0, #1
 800694c:	d020      	beq.n	8006990 <_printf_common+0xa8>
 800694e:	6823      	ldr	r3, [r4, #0]
 8006950:	68e5      	ldr	r5, [r4, #12]
 8006952:	f003 0306 	and.w	r3, r3, #6
 8006956:	2b04      	cmp	r3, #4
 8006958:	bf18      	it	ne
 800695a:	2500      	movne	r5, #0
 800695c:	6832      	ldr	r2, [r6, #0]
 800695e:	f04f 0600 	mov.w	r6, #0
 8006962:	68a3      	ldr	r3, [r4, #8]
 8006964:	bf08      	it	eq
 8006966:	1aad      	subeq	r5, r5, r2
 8006968:	6922      	ldr	r2, [r4, #16]
 800696a:	bf08      	it	eq
 800696c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006970:	4293      	cmp	r3, r2
 8006972:	bfc4      	itt	gt
 8006974:	1a9b      	subgt	r3, r3, r2
 8006976:	18ed      	addgt	r5, r5, r3
 8006978:	341a      	adds	r4, #26
 800697a:	42b5      	cmp	r5, r6
 800697c:	d11a      	bne.n	80069b4 <_printf_common+0xcc>
 800697e:	2000      	movs	r0, #0
 8006980:	e008      	b.n	8006994 <_printf_common+0xac>
 8006982:	2301      	movs	r3, #1
 8006984:	4652      	mov	r2, sl
 8006986:	4649      	mov	r1, r9
 8006988:	4638      	mov	r0, r7
 800698a:	47c0      	blx	r8
 800698c:	3001      	adds	r0, #1
 800698e:	d103      	bne.n	8006998 <_printf_common+0xb0>
 8006990:	f04f 30ff 	mov.w	r0, #4294967295
 8006994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006998:	3501      	adds	r5, #1
 800699a:	e7c4      	b.n	8006926 <_printf_common+0x3e>
 800699c:	2030      	movs	r0, #48	; 0x30
 800699e:	18e1      	adds	r1, r4, r3
 80069a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069a4:	1c5a      	adds	r2, r3, #1
 80069a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069aa:	4422      	add	r2, r4
 80069ac:	3302      	adds	r3, #2
 80069ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069b2:	e7c5      	b.n	8006940 <_printf_common+0x58>
 80069b4:	2301      	movs	r3, #1
 80069b6:	4622      	mov	r2, r4
 80069b8:	4649      	mov	r1, r9
 80069ba:	4638      	mov	r0, r7
 80069bc:	47c0      	blx	r8
 80069be:	3001      	adds	r0, #1
 80069c0:	d0e6      	beq.n	8006990 <_printf_common+0xa8>
 80069c2:	3601      	adds	r6, #1
 80069c4:	e7d9      	b.n	800697a <_printf_common+0x92>
	...

080069c8 <_printf_i>:
 80069c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069cc:	7e0f      	ldrb	r7, [r1, #24]
 80069ce:	4691      	mov	r9, r2
 80069d0:	2f78      	cmp	r7, #120	; 0x78
 80069d2:	4680      	mov	r8, r0
 80069d4:	460c      	mov	r4, r1
 80069d6:	469a      	mov	sl, r3
 80069d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80069de:	d807      	bhi.n	80069f0 <_printf_i+0x28>
 80069e0:	2f62      	cmp	r7, #98	; 0x62
 80069e2:	d80a      	bhi.n	80069fa <_printf_i+0x32>
 80069e4:	2f00      	cmp	r7, #0
 80069e6:	f000 80d9 	beq.w	8006b9c <_printf_i+0x1d4>
 80069ea:	2f58      	cmp	r7, #88	; 0x58
 80069ec:	f000 80a4 	beq.w	8006b38 <_printf_i+0x170>
 80069f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069f8:	e03a      	b.n	8006a70 <_printf_i+0xa8>
 80069fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069fe:	2b15      	cmp	r3, #21
 8006a00:	d8f6      	bhi.n	80069f0 <_printf_i+0x28>
 8006a02:	a101      	add	r1, pc, #4	; (adr r1, 8006a08 <_printf_i+0x40>)
 8006a04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a08:	08006a61 	.word	0x08006a61
 8006a0c:	08006a75 	.word	0x08006a75
 8006a10:	080069f1 	.word	0x080069f1
 8006a14:	080069f1 	.word	0x080069f1
 8006a18:	080069f1 	.word	0x080069f1
 8006a1c:	080069f1 	.word	0x080069f1
 8006a20:	08006a75 	.word	0x08006a75
 8006a24:	080069f1 	.word	0x080069f1
 8006a28:	080069f1 	.word	0x080069f1
 8006a2c:	080069f1 	.word	0x080069f1
 8006a30:	080069f1 	.word	0x080069f1
 8006a34:	08006b83 	.word	0x08006b83
 8006a38:	08006aa5 	.word	0x08006aa5
 8006a3c:	08006b65 	.word	0x08006b65
 8006a40:	080069f1 	.word	0x080069f1
 8006a44:	080069f1 	.word	0x080069f1
 8006a48:	08006ba5 	.word	0x08006ba5
 8006a4c:	080069f1 	.word	0x080069f1
 8006a50:	08006aa5 	.word	0x08006aa5
 8006a54:	080069f1 	.word	0x080069f1
 8006a58:	080069f1 	.word	0x080069f1
 8006a5c:	08006b6d 	.word	0x08006b6d
 8006a60:	682b      	ldr	r3, [r5, #0]
 8006a62:	1d1a      	adds	r2, r3, #4
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	602a      	str	r2, [r5, #0]
 8006a68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a70:	2301      	movs	r3, #1
 8006a72:	e0a4      	b.n	8006bbe <_printf_i+0x1f6>
 8006a74:	6820      	ldr	r0, [r4, #0]
 8006a76:	6829      	ldr	r1, [r5, #0]
 8006a78:	0606      	lsls	r6, r0, #24
 8006a7a:	f101 0304 	add.w	r3, r1, #4
 8006a7e:	d50a      	bpl.n	8006a96 <_printf_i+0xce>
 8006a80:	680e      	ldr	r6, [r1, #0]
 8006a82:	602b      	str	r3, [r5, #0]
 8006a84:	2e00      	cmp	r6, #0
 8006a86:	da03      	bge.n	8006a90 <_printf_i+0xc8>
 8006a88:	232d      	movs	r3, #45	; 0x2d
 8006a8a:	4276      	negs	r6, r6
 8006a8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a90:	230a      	movs	r3, #10
 8006a92:	485e      	ldr	r0, [pc, #376]	; (8006c0c <_printf_i+0x244>)
 8006a94:	e019      	b.n	8006aca <_printf_i+0x102>
 8006a96:	680e      	ldr	r6, [r1, #0]
 8006a98:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a9c:	602b      	str	r3, [r5, #0]
 8006a9e:	bf18      	it	ne
 8006aa0:	b236      	sxthne	r6, r6
 8006aa2:	e7ef      	b.n	8006a84 <_printf_i+0xbc>
 8006aa4:	682b      	ldr	r3, [r5, #0]
 8006aa6:	6820      	ldr	r0, [r4, #0]
 8006aa8:	1d19      	adds	r1, r3, #4
 8006aaa:	6029      	str	r1, [r5, #0]
 8006aac:	0601      	lsls	r1, r0, #24
 8006aae:	d501      	bpl.n	8006ab4 <_printf_i+0xec>
 8006ab0:	681e      	ldr	r6, [r3, #0]
 8006ab2:	e002      	b.n	8006aba <_printf_i+0xf2>
 8006ab4:	0646      	lsls	r6, r0, #25
 8006ab6:	d5fb      	bpl.n	8006ab0 <_printf_i+0xe8>
 8006ab8:	881e      	ldrh	r6, [r3, #0]
 8006aba:	2f6f      	cmp	r7, #111	; 0x6f
 8006abc:	bf0c      	ite	eq
 8006abe:	2308      	moveq	r3, #8
 8006ac0:	230a      	movne	r3, #10
 8006ac2:	4852      	ldr	r0, [pc, #328]	; (8006c0c <_printf_i+0x244>)
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006aca:	6865      	ldr	r5, [r4, #4]
 8006acc:	2d00      	cmp	r5, #0
 8006ace:	bfa8      	it	ge
 8006ad0:	6821      	ldrge	r1, [r4, #0]
 8006ad2:	60a5      	str	r5, [r4, #8]
 8006ad4:	bfa4      	itt	ge
 8006ad6:	f021 0104 	bicge.w	r1, r1, #4
 8006ada:	6021      	strge	r1, [r4, #0]
 8006adc:	b90e      	cbnz	r6, 8006ae2 <_printf_i+0x11a>
 8006ade:	2d00      	cmp	r5, #0
 8006ae0:	d04d      	beq.n	8006b7e <_printf_i+0x1b6>
 8006ae2:	4615      	mov	r5, r2
 8006ae4:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ae8:	fb03 6711 	mls	r7, r3, r1, r6
 8006aec:	5dc7      	ldrb	r7, [r0, r7]
 8006aee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006af2:	4637      	mov	r7, r6
 8006af4:	42bb      	cmp	r3, r7
 8006af6:	460e      	mov	r6, r1
 8006af8:	d9f4      	bls.n	8006ae4 <_printf_i+0x11c>
 8006afa:	2b08      	cmp	r3, #8
 8006afc:	d10b      	bne.n	8006b16 <_printf_i+0x14e>
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	07de      	lsls	r6, r3, #31
 8006b02:	d508      	bpl.n	8006b16 <_printf_i+0x14e>
 8006b04:	6923      	ldr	r3, [r4, #16]
 8006b06:	6861      	ldr	r1, [r4, #4]
 8006b08:	4299      	cmp	r1, r3
 8006b0a:	bfde      	ittt	le
 8006b0c:	2330      	movle	r3, #48	; 0x30
 8006b0e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b12:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b16:	1b52      	subs	r2, r2, r5
 8006b18:	6122      	str	r2, [r4, #16]
 8006b1a:	464b      	mov	r3, r9
 8006b1c:	4621      	mov	r1, r4
 8006b1e:	4640      	mov	r0, r8
 8006b20:	f8cd a000 	str.w	sl, [sp]
 8006b24:	aa03      	add	r2, sp, #12
 8006b26:	f7ff fedf 	bl	80068e8 <_printf_common>
 8006b2a:	3001      	adds	r0, #1
 8006b2c:	d14c      	bne.n	8006bc8 <_printf_i+0x200>
 8006b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b32:	b004      	add	sp, #16
 8006b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b38:	4834      	ldr	r0, [pc, #208]	; (8006c0c <_printf_i+0x244>)
 8006b3a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006b3e:	6829      	ldr	r1, [r5, #0]
 8006b40:	6823      	ldr	r3, [r4, #0]
 8006b42:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b46:	6029      	str	r1, [r5, #0]
 8006b48:	061d      	lsls	r5, r3, #24
 8006b4a:	d514      	bpl.n	8006b76 <_printf_i+0x1ae>
 8006b4c:	07df      	lsls	r7, r3, #31
 8006b4e:	bf44      	itt	mi
 8006b50:	f043 0320 	orrmi.w	r3, r3, #32
 8006b54:	6023      	strmi	r3, [r4, #0]
 8006b56:	b91e      	cbnz	r6, 8006b60 <_printf_i+0x198>
 8006b58:	6823      	ldr	r3, [r4, #0]
 8006b5a:	f023 0320 	bic.w	r3, r3, #32
 8006b5e:	6023      	str	r3, [r4, #0]
 8006b60:	2310      	movs	r3, #16
 8006b62:	e7af      	b.n	8006ac4 <_printf_i+0xfc>
 8006b64:	6823      	ldr	r3, [r4, #0]
 8006b66:	f043 0320 	orr.w	r3, r3, #32
 8006b6a:	6023      	str	r3, [r4, #0]
 8006b6c:	2378      	movs	r3, #120	; 0x78
 8006b6e:	4828      	ldr	r0, [pc, #160]	; (8006c10 <_printf_i+0x248>)
 8006b70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b74:	e7e3      	b.n	8006b3e <_printf_i+0x176>
 8006b76:	0659      	lsls	r1, r3, #25
 8006b78:	bf48      	it	mi
 8006b7a:	b2b6      	uxthmi	r6, r6
 8006b7c:	e7e6      	b.n	8006b4c <_printf_i+0x184>
 8006b7e:	4615      	mov	r5, r2
 8006b80:	e7bb      	b.n	8006afa <_printf_i+0x132>
 8006b82:	682b      	ldr	r3, [r5, #0]
 8006b84:	6826      	ldr	r6, [r4, #0]
 8006b86:	1d18      	adds	r0, r3, #4
 8006b88:	6961      	ldr	r1, [r4, #20]
 8006b8a:	6028      	str	r0, [r5, #0]
 8006b8c:	0635      	lsls	r5, r6, #24
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	d501      	bpl.n	8006b96 <_printf_i+0x1ce>
 8006b92:	6019      	str	r1, [r3, #0]
 8006b94:	e002      	b.n	8006b9c <_printf_i+0x1d4>
 8006b96:	0670      	lsls	r0, r6, #25
 8006b98:	d5fb      	bpl.n	8006b92 <_printf_i+0x1ca>
 8006b9a:	8019      	strh	r1, [r3, #0]
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	4615      	mov	r5, r2
 8006ba0:	6123      	str	r3, [r4, #16]
 8006ba2:	e7ba      	b.n	8006b1a <_printf_i+0x152>
 8006ba4:	682b      	ldr	r3, [r5, #0]
 8006ba6:	2100      	movs	r1, #0
 8006ba8:	1d1a      	adds	r2, r3, #4
 8006baa:	602a      	str	r2, [r5, #0]
 8006bac:	681d      	ldr	r5, [r3, #0]
 8006bae:	6862      	ldr	r2, [r4, #4]
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	f002 f923 	bl	8008dfc <memchr>
 8006bb6:	b108      	cbz	r0, 8006bbc <_printf_i+0x1f4>
 8006bb8:	1b40      	subs	r0, r0, r5
 8006bba:	6060      	str	r0, [r4, #4]
 8006bbc:	6863      	ldr	r3, [r4, #4]
 8006bbe:	6123      	str	r3, [r4, #16]
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bc6:	e7a8      	b.n	8006b1a <_printf_i+0x152>
 8006bc8:	462a      	mov	r2, r5
 8006bca:	4649      	mov	r1, r9
 8006bcc:	4640      	mov	r0, r8
 8006bce:	6923      	ldr	r3, [r4, #16]
 8006bd0:	47d0      	blx	sl
 8006bd2:	3001      	adds	r0, #1
 8006bd4:	d0ab      	beq.n	8006b2e <_printf_i+0x166>
 8006bd6:	6823      	ldr	r3, [r4, #0]
 8006bd8:	079b      	lsls	r3, r3, #30
 8006bda:	d413      	bmi.n	8006c04 <_printf_i+0x23c>
 8006bdc:	68e0      	ldr	r0, [r4, #12]
 8006bde:	9b03      	ldr	r3, [sp, #12]
 8006be0:	4298      	cmp	r0, r3
 8006be2:	bfb8      	it	lt
 8006be4:	4618      	movlt	r0, r3
 8006be6:	e7a4      	b.n	8006b32 <_printf_i+0x16a>
 8006be8:	2301      	movs	r3, #1
 8006bea:	4632      	mov	r2, r6
 8006bec:	4649      	mov	r1, r9
 8006bee:	4640      	mov	r0, r8
 8006bf0:	47d0      	blx	sl
 8006bf2:	3001      	adds	r0, #1
 8006bf4:	d09b      	beq.n	8006b2e <_printf_i+0x166>
 8006bf6:	3501      	adds	r5, #1
 8006bf8:	68e3      	ldr	r3, [r4, #12]
 8006bfa:	9903      	ldr	r1, [sp, #12]
 8006bfc:	1a5b      	subs	r3, r3, r1
 8006bfe:	42ab      	cmp	r3, r5
 8006c00:	dcf2      	bgt.n	8006be8 <_printf_i+0x220>
 8006c02:	e7eb      	b.n	8006bdc <_printf_i+0x214>
 8006c04:	2500      	movs	r5, #0
 8006c06:	f104 0619 	add.w	r6, r4, #25
 8006c0a:	e7f5      	b.n	8006bf8 <_printf_i+0x230>
 8006c0c:	0800a8fa 	.word	0x0800a8fa
 8006c10:	0800a90b 	.word	0x0800a90b

08006c14 <siprintf>:
 8006c14:	b40e      	push	{r1, r2, r3}
 8006c16:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c1a:	b500      	push	{lr}
 8006c1c:	b09c      	sub	sp, #112	; 0x70
 8006c1e:	ab1d      	add	r3, sp, #116	; 0x74
 8006c20:	9002      	str	r0, [sp, #8]
 8006c22:	9006      	str	r0, [sp, #24]
 8006c24:	9107      	str	r1, [sp, #28]
 8006c26:	9104      	str	r1, [sp, #16]
 8006c28:	4808      	ldr	r0, [pc, #32]	; (8006c4c <siprintf+0x38>)
 8006c2a:	4909      	ldr	r1, [pc, #36]	; (8006c50 <siprintf+0x3c>)
 8006c2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c30:	9105      	str	r1, [sp, #20]
 8006c32:	6800      	ldr	r0, [r0, #0]
 8006c34:	a902      	add	r1, sp, #8
 8006c36:	9301      	str	r3, [sp, #4]
 8006c38:	f002 ff00 	bl	8009a3c <_svfiprintf_r>
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	9b02      	ldr	r3, [sp, #8]
 8006c40:	701a      	strb	r2, [r3, #0]
 8006c42:	b01c      	add	sp, #112	; 0x70
 8006c44:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c48:	b003      	add	sp, #12
 8006c4a:	4770      	bx	lr
 8006c4c:	20000040 	.word	0x20000040
 8006c50:	ffff0208 	.word	0xffff0208

08006c54 <sulp>:
 8006c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c58:	460f      	mov	r7, r1
 8006c5a:	4690      	mov	r8, r2
 8006c5c:	f002 fc5a 	bl	8009514 <__ulp>
 8006c60:	4604      	mov	r4, r0
 8006c62:	460d      	mov	r5, r1
 8006c64:	f1b8 0f00 	cmp.w	r8, #0
 8006c68:	d011      	beq.n	8006c8e <sulp+0x3a>
 8006c6a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006c6e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	dd0b      	ble.n	8006c8e <sulp+0x3a>
 8006c76:	2400      	movs	r4, #0
 8006c78:	051b      	lsls	r3, r3, #20
 8006c7a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006c7e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006c82:	4622      	mov	r2, r4
 8006c84:	462b      	mov	r3, r5
 8006c86:	f7f9 fc27 	bl	80004d8 <__aeabi_dmul>
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	460d      	mov	r5, r1
 8006c8e:	4620      	mov	r0, r4
 8006c90:	4629      	mov	r1, r5
 8006c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006c98 <_strtod_l>:
 8006c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c9c:	469b      	mov	fp, r3
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	b09f      	sub	sp, #124	; 0x7c
 8006ca2:	931a      	str	r3, [sp, #104]	; 0x68
 8006ca4:	4b9e      	ldr	r3, [pc, #632]	; (8006f20 <_strtod_l+0x288>)
 8006ca6:	4682      	mov	sl, r0
 8006ca8:	681f      	ldr	r7, [r3, #0]
 8006caa:	460e      	mov	r6, r1
 8006cac:	4638      	mov	r0, r7
 8006cae:	9215      	str	r2, [sp, #84]	; 0x54
 8006cb0:	f7f9 fa4e 	bl	8000150 <strlen>
 8006cb4:	f04f 0800 	mov.w	r8, #0
 8006cb8:	4604      	mov	r4, r0
 8006cba:	f04f 0900 	mov.w	r9, #0
 8006cbe:	9619      	str	r6, [sp, #100]	; 0x64
 8006cc0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006cc2:	781a      	ldrb	r2, [r3, #0]
 8006cc4:	2a2b      	cmp	r2, #43	; 0x2b
 8006cc6:	d04c      	beq.n	8006d62 <_strtod_l+0xca>
 8006cc8:	d83a      	bhi.n	8006d40 <_strtod_l+0xa8>
 8006cca:	2a0d      	cmp	r2, #13
 8006ccc:	d833      	bhi.n	8006d36 <_strtod_l+0x9e>
 8006cce:	2a08      	cmp	r2, #8
 8006cd0:	d833      	bhi.n	8006d3a <_strtod_l+0xa2>
 8006cd2:	2a00      	cmp	r2, #0
 8006cd4:	d03d      	beq.n	8006d52 <_strtod_l+0xba>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	930a      	str	r3, [sp, #40]	; 0x28
 8006cda:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006cdc:	782b      	ldrb	r3, [r5, #0]
 8006cde:	2b30      	cmp	r3, #48	; 0x30
 8006ce0:	f040 80aa 	bne.w	8006e38 <_strtod_l+0x1a0>
 8006ce4:	786b      	ldrb	r3, [r5, #1]
 8006ce6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006cea:	2b58      	cmp	r3, #88	; 0x58
 8006cec:	d166      	bne.n	8006dbc <_strtod_l+0x124>
 8006cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cf0:	4650      	mov	r0, sl
 8006cf2:	9301      	str	r3, [sp, #4]
 8006cf4:	ab1a      	add	r3, sp, #104	; 0x68
 8006cf6:	9300      	str	r3, [sp, #0]
 8006cf8:	4a8a      	ldr	r2, [pc, #552]	; (8006f24 <_strtod_l+0x28c>)
 8006cfa:	f8cd b008 	str.w	fp, [sp, #8]
 8006cfe:	ab1b      	add	r3, sp, #108	; 0x6c
 8006d00:	a919      	add	r1, sp, #100	; 0x64
 8006d02:	f001 fd5f 	bl	80087c4 <__gethex>
 8006d06:	f010 0607 	ands.w	r6, r0, #7
 8006d0a:	4604      	mov	r4, r0
 8006d0c:	d005      	beq.n	8006d1a <_strtod_l+0x82>
 8006d0e:	2e06      	cmp	r6, #6
 8006d10:	d129      	bne.n	8006d66 <_strtod_l+0xce>
 8006d12:	2300      	movs	r3, #0
 8006d14:	3501      	adds	r5, #1
 8006d16:	9519      	str	r5, [sp, #100]	; 0x64
 8006d18:	930a      	str	r3, [sp, #40]	; 0x28
 8006d1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f040 858a 	bne.w	8007836 <_strtod_l+0xb9e>
 8006d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d24:	b1d3      	cbz	r3, 8006d5c <_strtod_l+0xc4>
 8006d26:	4642      	mov	r2, r8
 8006d28:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006d2c:	4610      	mov	r0, r2
 8006d2e:	4619      	mov	r1, r3
 8006d30:	b01f      	add	sp, #124	; 0x7c
 8006d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d36:	2a20      	cmp	r2, #32
 8006d38:	d1cd      	bne.n	8006cd6 <_strtod_l+0x3e>
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	9319      	str	r3, [sp, #100]	; 0x64
 8006d3e:	e7bf      	b.n	8006cc0 <_strtod_l+0x28>
 8006d40:	2a2d      	cmp	r2, #45	; 0x2d
 8006d42:	d1c8      	bne.n	8006cd6 <_strtod_l+0x3e>
 8006d44:	2201      	movs	r2, #1
 8006d46:	920a      	str	r2, [sp, #40]	; 0x28
 8006d48:	1c5a      	adds	r2, r3, #1
 8006d4a:	9219      	str	r2, [sp, #100]	; 0x64
 8006d4c:	785b      	ldrb	r3, [r3, #1]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1c3      	bne.n	8006cda <_strtod_l+0x42>
 8006d52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d54:	9619      	str	r6, [sp, #100]	; 0x64
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	f040 856b 	bne.w	8007832 <_strtod_l+0xb9a>
 8006d5c:	4642      	mov	r2, r8
 8006d5e:	464b      	mov	r3, r9
 8006d60:	e7e4      	b.n	8006d2c <_strtod_l+0x94>
 8006d62:	2200      	movs	r2, #0
 8006d64:	e7ef      	b.n	8006d46 <_strtod_l+0xae>
 8006d66:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006d68:	b13a      	cbz	r2, 8006d7a <_strtod_l+0xe2>
 8006d6a:	2135      	movs	r1, #53	; 0x35
 8006d6c:	a81c      	add	r0, sp, #112	; 0x70
 8006d6e:	f002 fcd5 	bl	800971c <__copybits>
 8006d72:	4650      	mov	r0, sl
 8006d74:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006d76:	f002 f89d 	bl	8008eb4 <_Bfree>
 8006d7a:	3e01      	subs	r6, #1
 8006d7c:	2e04      	cmp	r6, #4
 8006d7e:	d806      	bhi.n	8006d8e <_strtod_l+0xf6>
 8006d80:	e8df f006 	tbb	[pc, r6]
 8006d84:	1714030a 	.word	0x1714030a
 8006d88:	0a          	.byte	0x0a
 8006d89:	00          	.byte	0x00
 8006d8a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006d8e:	0721      	lsls	r1, r4, #28
 8006d90:	d5c3      	bpl.n	8006d1a <_strtod_l+0x82>
 8006d92:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006d96:	e7c0      	b.n	8006d1a <_strtod_l+0x82>
 8006d98:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006d9a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8006d9e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006da2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006da6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006daa:	e7f0      	b.n	8006d8e <_strtod_l+0xf6>
 8006dac:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006f28 <_strtod_l+0x290>
 8006db0:	e7ed      	b.n	8006d8e <_strtod_l+0xf6>
 8006db2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006db6:	f04f 38ff 	mov.w	r8, #4294967295
 8006dba:	e7e8      	b.n	8006d8e <_strtod_l+0xf6>
 8006dbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006dbe:	1c5a      	adds	r2, r3, #1
 8006dc0:	9219      	str	r2, [sp, #100]	; 0x64
 8006dc2:	785b      	ldrb	r3, [r3, #1]
 8006dc4:	2b30      	cmp	r3, #48	; 0x30
 8006dc6:	d0f9      	beq.n	8006dbc <_strtod_l+0x124>
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d0a6      	beq.n	8006d1a <_strtod_l+0x82>
 8006dcc:	2301      	movs	r3, #1
 8006dce:	9307      	str	r3, [sp, #28]
 8006dd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006dd2:	220a      	movs	r2, #10
 8006dd4:	9308      	str	r3, [sp, #32]
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	469b      	mov	fp, r3
 8006dda:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006dde:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006de0:	7805      	ldrb	r5, [r0, #0]
 8006de2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006de6:	b2d9      	uxtb	r1, r3
 8006de8:	2909      	cmp	r1, #9
 8006dea:	d927      	bls.n	8006e3c <_strtod_l+0x1a4>
 8006dec:	4622      	mov	r2, r4
 8006dee:	4639      	mov	r1, r7
 8006df0:	f002 ff3a 	bl	8009c68 <strncmp>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	d033      	beq.n	8006e60 <_strtod_l+0x1c8>
 8006df8:	2000      	movs	r0, #0
 8006dfa:	462a      	mov	r2, r5
 8006dfc:	465c      	mov	r4, fp
 8006dfe:	4603      	mov	r3, r0
 8006e00:	9004      	str	r0, [sp, #16]
 8006e02:	2a65      	cmp	r2, #101	; 0x65
 8006e04:	d001      	beq.n	8006e0a <_strtod_l+0x172>
 8006e06:	2a45      	cmp	r2, #69	; 0x45
 8006e08:	d114      	bne.n	8006e34 <_strtod_l+0x19c>
 8006e0a:	b91c      	cbnz	r4, 8006e14 <_strtod_l+0x17c>
 8006e0c:	9a07      	ldr	r2, [sp, #28]
 8006e0e:	4302      	orrs	r2, r0
 8006e10:	d09f      	beq.n	8006d52 <_strtod_l+0xba>
 8006e12:	2400      	movs	r4, #0
 8006e14:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006e16:	1c72      	adds	r2, r6, #1
 8006e18:	9219      	str	r2, [sp, #100]	; 0x64
 8006e1a:	7872      	ldrb	r2, [r6, #1]
 8006e1c:	2a2b      	cmp	r2, #43	; 0x2b
 8006e1e:	d079      	beq.n	8006f14 <_strtod_l+0x27c>
 8006e20:	2a2d      	cmp	r2, #45	; 0x2d
 8006e22:	f000 8083 	beq.w	8006f2c <_strtod_l+0x294>
 8006e26:	2700      	movs	r7, #0
 8006e28:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006e2c:	2909      	cmp	r1, #9
 8006e2e:	f240 8083 	bls.w	8006f38 <_strtod_l+0x2a0>
 8006e32:	9619      	str	r6, [sp, #100]	; 0x64
 8006e34:	2500      	movs	r5, #0
 8006e36:	e09f      	b.n	8006f78 <_strtod_l+0x2e0>
 8006e38:	2300      	movs	r3, #0
 8006e3a:	e7c8      	b.n	8006dce <_strtod_l+0x136>
 8006e3c:	f1bb 0f08 	cmp.w	fp, #8
 8006e40:	bfd5      	itete	le
 8006e42:	9906      	ldrle	r1, [sp, #24]
 8006e44:	9905      	ldrgt	r1, [sp, #20]
 8006e46:	fb02 3301 	mlale	r3, r2, r1, r3
 8006e4a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006e4e:	f100 0001 	add.w	r0, r0, #1
 8006e52:	bfd4      	ite	le
 8006e54:	9306      	strle	r3, [sp, #24]
 8006e56:	9305      	strgt	r3, [sp, #20]
 8006e58:	f10b 0b01 	add.w	fp, fp, #1
 8006e5c:	9019      	str	r0, [sp, #100]	; 0x64
 8006e5e:	e7be      	b.n	8006dde <_strtod_l+0x146>
 8006e60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e62:	191a      	adds	r2, r3, r4
 8006e64:	9219      	str	r2, [sp, #100]	; 0x64
 8006e66:	5d1a      	ldrb	r2, [r3, r4]
 8006e68:	f1bb 0f00 	cmp.w	fp, #0
 8006e6c:	d036      	beq.n	8006edc <_strtod_l+0x244>
 8006e6e:	465c      	mov	r4, fp
 8006e70:	9004      	str	r0, [sp, #16]
 8006e72:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006e76:	2b09      	cmp	r3, #9
 8006e78:	d912      	bls.n	8006ea0 <_strtod_l+0x208>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e7c1      	b.n	8006e02 <_strtod_l+0x16a>
 8006e7e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e80:	3001      	adds	r0, #1
 8006e82:	1c5a      	adds	r2, r3, #1
 8006e84:	9219      	str	r2, [sp, #100]	; 0x64
 8006e86:	785a      	ldrb	r2, [r3, #1]
 8006e88:	2a30      	cmp	r2, #48	; 0x30
 8006e8a:	d0f8      	beq.n	8006e7e <_strtod_l+0x1e6>
 8006e8c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006e90:	2b08      	cmp	r3, #8
 8006e92:	f200 84d5 	bhi.w	8007840 <_strtod_l+0xba8>
 8006e96:	9004      	str	r0, [sp, #16]
 8006e98:	2000      	movs	r0, #0
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e9e:	9308      	str	r3, [sp, #32]
 8006ea0:	3a30      	subs	r2, #48	; 0x30
 8006ea2:	f100 0301 	add.w	r3, r0, #1
 8006ea6:	d013      	beq.n	8006ed0 <_strtod_l+0x238>
 8006ea8:	9904      	ldr	r1, [sp, #16]
 8006eaa:	1905      	adds	r5, r0, r4
 8006eac:	4419      	add	r1, r3
 8006eae:	9104      	str	r1, [sp, #16]
 8006eb0:	4623      	mov	r3, r4
 8006eb2:	210a      	movs	r1, #10
 8006eb4:	42ab      	cmp	r3, r5
 8006eb6:	d113      	bne.n	8006ee0 <_strtod_l+0x248>
 8006eb8:	1823      	adds	r3, r4, r0
 8006eba:	2b08      	cmp	r3, #8
 8006ebc:	f104 0401 	add.w	r4, r4, #1
 8006ec0:	4404      	add	r4, r0
 8006ec2:	dc1b      	bgt.n	8006efc <_strtod_l+0x264>
 8006ec4:	230a      	movs	r3, #10
 8006ec6:	9906      	ldr	r1, [sp, #24]
 8006ec8:	fb03 2301 	mla	r3, r3, r1, r2
 8006ecc:	9306      	str	r3, [sp, #24]
 8006ece:	2300      	movs	r3, #0
 8006ed0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	1c51      	adds	r1, r2, #1
 8006ed6:	9119      	str	r1, [sp, #100]	; 0x64
 8006ed8:	7852      	ldrb	r2, [r2, #1]
 8006eda:	e7ca      	b.n	8006e72 <_strtod_l+0x1da>
 8006edc:	4658      	mov	r0, fp
 8006ede:	e7d3      	b.n	8006e88 <_strtod_l+0x1f0>
 8006ee0:	2b08      	cmp	r3, #8
 8006ee2:	dc04      	bgt.n	8006eee <_strtod_l+0x256>
 8006ee4:	9f06      	ldr	r7, [sp, #24]
 8006ee6:	434f      	muls	r7, r1
 8006ee8:	9706      	str	r7, [sp, #24]
 8006eea:	3301      	adds	r3, #1
 8006eec:	e7e2      	b.n	8006eb4 <_strtod_l+0x21c>
 8006eee:	1c5f      	adds	r7, r3, #1
 8006ef0:	2f10      	cmp	r7, #16
 8006ef2:	bfde      	ittt	le
 8006ef4:	9f05      	ldrle	r7, [sp, #20]
 8006ef6:	434f      	mulle	r7, r1
 8006ef8:	9705      	strle	r7, [sp, #20]
 8006efa:	e7f6      	b.n	8006eea <_strtod_l+0x252>
 8006efc:	2c10      	cmp	r4, #16
 8006efe:	bfdf      	itttt	le
 8006f00:	230a      	movle	r3, #10
 8006f02:	9905      	ldrle	r1, [sp, #20]
 8006f04:	fb03 2301 	mlale	r3, r3, r1, r2
 8006f08:	9305      	strle	r3, [sp, #20]
 8006f0a:	e7e0      	b.n	8006ece <_strtod_l+0x236>
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	9304      	str	r3, [sp, #16]
 8006f10:	2301      	movs	r3, #1
 8006f12:	e77b      	b.n	8006e0c <_strtod_l+0x174>
 8006f14:	2700      	movs	r7, #0
 8006f16:	1cb2      	adds	r2, r6, #2
 8006f18:	9219      	str	r2, [sp, #100]	; 0x64
 8006f1a:	78b2      	ldrb	r2, [r6, #2]
 8006f1c:	e784      	b.n	8006e28 <_strtod_l+0x190>
 8006f1e:	bf00      	nop
 8006f20:	0800ab68 	.word	0x0800ab68
 8006f24:	0800a91c 	.word	0x0800a91c
 8006f28:	7ff00000 	.word	0x7ff00000
 8006f2c:	2701      	movs	r7, #1
 8006f2e:	e7f2      	b.n	8006f16 <_strtod_l+0x27e>
 8006f30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006f32:	1c51      	adds	r1, r2, #1
 8006f34:	9119      	str	r1, [sp, #100]	; 0x64
 8006f36:	7852      	ldrb	r2, [r2, #1]
 8006f38:	2a30      	cmp	r2, #48	; 0x30
 8006f3a:	d0f9      	beq.n	8006f30 <_strtod_l+0x298>
 8006f3c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006f40:	2908      	cmp	r1, #8
 8006f42:	f63f af77 	bhi.w	8006e34 <_strtod_l+0x19c>
 8006f46:	f04f 0e0a 	mov.w	lr, #10
 8006f4a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8006f4e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006f50:	9209      	str	r2, [sp, #36]	; 0x24
 8006f52:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006f54:	1c51      	adds	r1, r2, #1
 8006f56:	9119      	str	r1, [sp, #100]	; 0x64
 8006f58:	7852      	ldrb	r2, [r2, #1]
 8006f5a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8006f5e:	2d09      	cmp	r5, #9
 8006f60:	d935      	bls.n	8006fce <_strtod_l+0x336>
 8006f62:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006f64:	1b49      	subs	r1, r1, r5
 8006f66:	2908      	cmp	r1, #8
 8006f68:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006f6c:	dc02      	bgt.n	8006f74 <_strtod_l+0x2dc>
 8006f6e:	4565      	cmp	r5, ip
 8006f70:	bfa8      	it	ge
 8006f72:	4665      	movge	r5, ip
 8006f74:	b107      	cbz	r7, 8006f78 <_strtod_l+0x2e0>
 8006f76:	426d      	negs	r5, r5
 8006f78:	2c00      	cmp	r4, #0
 8006f7a:	d14c      	bne.n	8007016 <_strtod_l+0x37e>
 8006f7c:	9907      	ldr	r1, [sp, #28]
 8006f7e:	4301      	orrs	r1, r0
 8006f80:	f47f aecb 	bne.w	8006d1a <_strtod_l+0x82>
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f47f aee4 	bne.w	8006d52 <_strtod_l+0xba>
 8006f8a:	2a69      	cmp	r2, #105	; 0x69
 8006f8c:	d026      	beq.n	8006fdc <_strtod_l+0x344>
 8006f8e:	dc23      	bgt.n	8006fd8 <_strtod_l+0x340>
 8006f90:	2a49      	cmp	r2, #73	; 0x49
 8006f92:	d023      	beq.n	8006fdc <_strtod_l+0x344>
 8006f94:	2a4e      	cmp	r2, #78	; 0x4e
 8006f96:	f47f aedc 	bne.w	8006d52 <_strtod_l+0xba>
 8006f9a:	499d      	ldr	r1, [pc, #628]	; (8007210 <_strtod_l+0x578>)
 8006f9c:	a819      	add	r0, sp, #100	; 0x64
 8006f9e:	f001 fe5f 	bl	8008c60 <__match>
 8006fa2:	2800      	cmp	r0, #0
 8006fa4:	f43f aed5 	beq.w	8006d52 <_strtod_l+0xba>
 8006fa8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	2b28      	cmp	r3, #40	; 0x28
 8006fae:	d12c      	bne.n	800700a <_strtod_l+0x372>
 8006fb0:	4998      	ldr	r1, [pc, #608]	; (8007214 <_strtod_l+0x57c>)
 8006fb2:	aa1c      	add	r2, sp, #112	; 0x70
 8006fb4:	a819      	add	r0, sp, #100	; 0x64
 8006fb6:	f001 fe67 	bl	8008c88 <__hexnan>
 8006fba:	2805      	cmp	r0, #5
 8006fbc:	d125      	bne.n	800700a <_strtod_l+0x372>
 8006fbe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006fc0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006fc4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006fc8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006fcc:	e6a5      	b.n	8006d1a <_strtod_l+0x82>
 8006fce:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8006fd2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8006fd6:	e7bc      	b.n	8006f52 <_strtod_l+0x2ba>
 8006fd8:	2a6e      	cmp	r2, #110	; 0x6e
 8006fda:	e7dc      	b.n	8006f96 <_strtod_l+0x2fe>
 8006fdc:	498e      	ldr	r1, [pc, #568]	; (8007218 <_strtod_l+0x580>)
 8006fde:	a819      	add	r0, sp, #100	; 0x64
 8006fe0:	f001 fe3e 	bl	8008c60 <__match>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	f43f aeb4 	beq.w	8006d52 <_strtod_l+0xba>
 8006fea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006fec:	498b      	ldr	r1, [pc, #556]	; (800721c <_strtod_l+0x584>)
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	a819      	add	r0, sp, #100	; 0x64
 8006ff2:	9319      	str	r3, [sp, #100]	; 0x64
 8006ff4:	f001 fe34 	bl	8008c60 <__match>
 8006ff8:	b910      	cbnz	r0, 8007000 <_strtod_l+0x368>
 8006ffa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	9319      	str	r3, [sp, #100]	; 0x64
 8007000:	f04f 0800 	mov.w	r8, #0
 8007004:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8007220 <_strtod_l+0x588>
 8007008:	e687      	b.n	8006d1a <_strtod_l+0x82>
 800700a:	4886      	ldr	r0, [pc, #536]	; (8007224 <_strtod_l+0x58c>)
 800700c:	f002 fe16 	bl	8009c3c <nan>
 8007010:	4680      	mov	r8, r0
 8007012:	4689      	mov	r9, r1
 8007014:	e681      	b.n	8006d1a <_strtod_l+0x82>
 8007016:	9b04      	ldr	r3, [sp, #16]
 8007018:	f1bb 0f00 	cmp.w	fp, #0
 800701c:	bf08      	it	eq
 800701e:	46a3      	moveq	fp, r4
 8007020:	1aeb      	subs	r3, r5, r3
 8007022:	2c10      	cmp	r4, #16
 8007024:	9806      	ldr	r0, [sp, #24]
 8007026:	4626      	mov	r6, r4
 8007028:	9307      	str	r3, [sp, #28]
 800702a:	bfa8      	it	ge
 800702c:	2610      	movge	r6, #16
 800702e:	f7f9 f9d9 	bl	80003e4 <__aeabi_ui2d>
 8007032:	2c09      	cmp	r4, #9
 8007034:	4680      	mov	r8, r0
 8007036:	4689      	mov	r9, r1
 8007038:	dd13      	ble.n	8007062 <_strtod_l+0x3ca>
 800703a:	4b7b      	ldr	r3, [pc, #492]	; (8007228 <_strtod_l+0x590>)
 800703c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007040:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007044:	f7f9 fa48 	bl	80004d8 <__aeabi_dmul>
 8007048:	4680      	mov	r8, r0
 800704a:	9805      	ldr	r0, [sp, #20]
 800704c:	4689      	mov	r9, r1
 800704e:	f7f9 f9c9 	bl	80003e4 <__aeabi_ui2d>
 8007052:	4602      	mov	r2, r0
 8007054:	460b      	mov	r3, r1
 8007056:	4640      	mov	r0, r8
 8007058:	4649      	mov	r1, r9
 800705a:	f7f9 f887 	bl	800016c <__adddf3>
 800705e:	4680      	mov	r8, r0
 8007060:	4689      	mov	r9, r1
 8007062:	2c0f      	cmp	r4, #15
 8007064:	dc36      	bgt.n	80070d4 <_strtod_l+0x43c>
 8007066:	9b07      	ldr	r3, [sp, #28]
 8007068:	2b00      	cmp	r3, #0
 800706a:	f43f ae56 	beq.w	8006d1a <_strtod_l+0x82>
 800706e:	dd22      	ble.n	80070b6 <_strtod_l+0x41e>
 8007070:	2b16      	cmp	r3, #22
 8007072:	dc09      	bgt.n	8007088 <_strtod_l+0x3f0>
 8007074:	496c      	ldr	r1, [pc, #432]	; (8007228 <_strtod_l+0x590>)
 8007076:	4642      	mov	r2, r8
 8007078:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800707c:	464b      	mov	r3, r9
 800707e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007082:	f7f9 fa29 	bl	80004d8 <__aeabi_dmul>
 8007086:	e7c3      	b.n	8007010 <_strtod_l+0x378>
 8007088:	9a07      	ldr	r2, [sp, #28]
 800708a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800708e:	4293      	cmp	r3, r2
 8007090:	db20      	blt.n	80070d4 <_strtod_l+0x43c>
 8007092:	4d65      	ldr	r5, [pc, #404]	; (8007228 <_strtod_l+0x590>)
 8007094:	f1c4 040f 	rsb	r4, r4, #15
 8007098:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800709c:	4642      	mov	r2, r8
 800709e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070a2:	464b      	mov	r3, r9
 80070a4:	f7f9 fa18 	bl	80004d8 <__aeabi_dmul>
 80070a8:	9b07      	ldr	r3, [sp, #28]
 80070aa:	1b1c      	subs	r4, r3, r4
 80070ac:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80070b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80070b4:	e7e5      	b.n	8007082 <_strtod_l+0x3ea>
 80070b6:	9b07      	ldr	r3, [sp, #28]
 80070b8:	3316      	adds	r3, #22
 80070ba:	db0b      	blt.n	80070d4 <_strtod_l+0x43c>
 80070bc:	9b04      	ldr	r3, [sp, #16]
 80070be:	4640      	mov	r0, r8
 80070c0:	1b5d      	subs	r5, r3, r5
 80070c2:	4b59      	ldr	r3, [pc, #356]	; (8007228 <_strtod_l+0x590>)
 80070c4:	4649      	mov	r1, r9
 80070c6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80070ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80070ce:	f7f9 fb2d 	bl	800072c <__aeabi_ddiv>
 80070d2:	e79d      	b.n	8007010 <_strtod_l+0x378>
 80070d4:	9b07      	ldr	r3, [sp, #28]
 80070d6:	1ba6      	subs	r6, r4, r6
 80070d8:	441e      	add	r6, r3
 80070da:	2e00      	cmp	r6, #0
 80070dc:	dd74      	ble.n	80071c8 <_strtod_l+0x530>
 80070de:	f016 030f 	ands.w	r3, r6, #15
 80070e2:	d00a      	beq.n	80070fa <_strtod_l+0x462>
 80070e4:	4950      	ldr	r1, [pc, #320]	; (8007228 <_strtod_l+0x590>)
 80070e6:	4642      	mov	r2, r8
 80070e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80070ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070f0:	464b      	mov	r3, r9
 80070f2:	f7f9 f9f1 	bl	80004d8 <__aeabi_dmul>
 80070f6:	4680      	mov	r8, r0
 80070f8:	4689      	mov	r9, r1
 80070fa:	f036 060f 	bics.w	r6, r6, #15
 80070fe:	d052      	beq.n	80071a6 <_strtod_l+0x50e>
 8007100:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8007104:	dd27      	ble.n	8007156 <_strtod_l+0x4be>
 8007106:	f04f 0b00 	mov.w	fp, #0
 800710a:	f8cd b010 	str.w	fp, [sp, #16]
 800710e:	f8cd b020 	str.w	fp, [sp, #32]
 8007112:	f8cd b018 	str.w	fp, [sp, #24]
 8007116:	2322      	movs	r3, #34	; 0x22
 8007118:	f04f 0800 	mov.w	r8, #0
 800711c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007220 <_strtod_l+0x588>
 8007120:	f8ca 3000 	str.w	r3, [sl]
 8007124:	9b08      	ldr	r3, [sp, #32]
 8007126:	2b00      	cmp	r3, #0
 8007128:	f43f adf7 	beq.w	8006d1a <_strtod_l+0x82>
 800712c:	4650      	mov	r0, sl
 800712e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007130:	f001 fec0 	bl	8008eb4 <_Bfree>
 8007134:	4650      	mov	r0, sl
 8007136:	9906      	ldr	r1, [sp, #24]
 8007138:	f001 febc 	bl	8008eb4 <_Bfree>
 800713c:	4650      	mov	r0, sl
 800713e:	9904      	ldr	r1, [sp, #16]
 8007140:	f001 feb8 	bl	8008eb4 <_Bfree>
 8007144:	4650      	mov	r0, sl
 8007146:	9908      	ldr	r1, [sp, #32]
 8007148:	f001 feb4 	bl	8008eb4 <_Bfree>
 800714c:	4659      	mov	r1, fp
 800714e:	4650      	mov	r0, sl
 8007150:	f001 feb0 	bl	8008eb4 <_Bfree>
 8007154:	e5e1      	b.n	8006d1a <_strtod_l+0x82>
 8007156:	4b35      	ldr	r3, [pc, #212]	; (800722c <_strtod_l+0x594>)
 8007158:	4640      	mov	r0, r8
 800715a:	9305      	str	r3, [sp, #20]
 800715c:	2300      	movs	r3, #0
 800715e:	4649      	mov	r1, r9
 8007160:	461f      	mov	r7, r3
 8007162:	1136      	asrs	r6, r6, #4
 8007164:	2e01      	cmp	r6, #1
 8007166:	dc21      	bgt.n	80071ac <_strtod_l+0x514>
 8007168:	b10b      	cbz	r3, 800716e <_strtod_l+0x4d6>
 800716a:	4680      	mov	r8, r0
 800716c:	4689      	mov	r9, r1
 800716e:	4b2f      	ldr	r3, [pc, #188]	; (800722c <_strtod_l+0x594>)
 8007170:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007174:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007178:	4642      	mov	r2, r8
 800717a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800717e:	464b      	mov	r3, r9
 8007180:	f7f9 f9aa 	bl	80004d8 <__aeabi_dmul>
 8007184:	4b26      	ldr	r3, [pc, #152]	; (8007220 <_strtod_l+0x588>)
 8007186:	460a      	mov	r2, r1
 8007188:	400b      	ands	r3, r1
 800718a:	4929      	ldr	r1, [pc, #164]	; (8007230 <_strtod_l+0x598>)
 800718c:	4680      	mov	r8, r0
 800718e:	428b      	cmp	r3, r1
 8007190:	d8b9      	bhi.n	8007106 <_strtod_l+0x46e>
 8007192:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007196:	428b      	cmp	r3, r1
 8007198:	bf86      	itte	hi
 800719a:	f04f 38ff 	movhi.w	r8, #4294967295
 800719e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007234 <_strtod_l+0x59c>
 80071a2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80071a6:	2300      	movs	r3, #0
 80071a8:	9305      	str	r3, [sp, #20]
 80071aa:	e07f      	b.n	80072ac <_strtod_l+0x614>
 80071ac:	07f2      	lsls	r2, r6, #31
 80071ae:	d505      	bpl.n	80071bc <_strtod_l+0x524>
 80071b0:	9b05      	ldr	r3, [sp, #20]
 80071b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b6:	f7f9 f98f 	bl	80004d8 <__aeabi_dmul>
 80071ba:	2301      	movs	r3, #1
 80071bc:	9a05      	ldr	r2, [sp, #20]
 80071be:	3701      	adds	r7, #1
 80071c0:	3208      	adds	r2, #8
 80071c2:	1076      	asrs	r6, r6, #1
 80071c4:	9205      	str	r2, [sp, #20]
 80071c6:	e7cd      	b.n	8007164 <_strtod_l+0x4cc>
 80071c8:	d0ed      	beq.n	80071a6 <_strtod_l+0x50e>
 80071ca:	4276      	negs	r6, r6
 80071cc:	f016 020f 	ands.w	r2, r6, #15
 80071d0:	d00a      	beq.n	80071e8 <_strtod_l+0x550>
 80071d2:	4b15      	ldr	r3, [pc, #84]	; (8007228 <_strtod_l+0x590>)
 80071d4:	4640      	mov	r0, r8
 80071d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071da:	4649      	mov	r1, r9
 80071dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e0:	f7f9 faa4 	bl	800072c <__aeabi_ddiv>
 80071e4:	4680      	mov	r8, r0
 80071e6:	4689      	mov	r9, r1
 80071e8:	1136      	asrs	r6, r6, #4
 80071ea:	d0dc      	beq.n	80071a6 <_strtod_l+0x50e>
 80071ec:	2e1f      	cmp	r6, #31
 80071ee:	dd23      	ble.n	8007238 <_strtod_l+0x5a0>
 80071f0:	f04f 0b00 	mov.w	fp, #0
 80071f4:	f8cd b010 	str.w	fp, [sp, #16]
 80071f8:	f8cd b020 	str.w	fp, [sp, #32]
 80071fc:	f8cd b018 	str.w	fp, [sp, #24]
 8007200:	2322      	movs	r3, #34	; 0x22
 8007202:	f04f 0800 	mov.w	r8, #0
 8007206:	f04f 0900 	mov.w	r9, #0
 800720a:	f8ca 3000 	str.w	r3, [sl]
 800720e:	e789      	b.n	8007124 <_strtod_l+0x48c>
 8007210:	0800a8f5 	.word	0x0800a8f5
 8007214:	0800a930 	.word	0x0800a930
 8007218:	0800a8ed 	.word	0x0800a8ed
 800721c:	0800aa74 	.word	0x0800aa74
 8007220:	7ff00000 	.word	0x7ff00000
 8007224:	0800ad20 	.word	0x0800ad20
 8007228:	0800ac00 	.word	0x0800ac00
 800722c:	0800abd8 	.word	0x0800abd8
 8007230:	7ca00000 	.word	0x7ca00000
 8007234:	7fefffff 	.word	0x7fefffff
 8007238:	f016 0310 	ands.w	r3, r6, #16
 800723c:	bf18      	it	ne
 800723e:	236a      	movne	r3, #106	; 0x6a
 8007240:	4640      	mov	r0, r8
 8007242:	9305      	str	r3, [sp, #20]
 8007244:	4649      	mov	r1, r9
 8007246:	2300      	movs	r3, #0
 8007248:	4fb0      	ldr	r7, [pc, #704]	; (800750c <_strtod_l+0x874>)
 800724a:	07f2      	lsls	r2, r6, #31
 800724c:	d504      	bpl.n	8007258 <_strtod_l+0x5c0>
 800724e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007252:	f7f9 f941 	bl	80004d8 <__aeabi_dmul>
 8007256:	2301      	movs	r3, #1
 8007258:	1076      	asrs	r6, r6, #1
 800725a:	f107 0708 	add.w	r7, r7, #8
 800725e:	d1f4      	bne.n	800724a <_strtod_l+0x5b2>
 8007260:	b10b      	cbz	r3, 8007266 <_strtod_l+0x5ce>
 8007262:	4680      	mov	r8, r0
 8007264:	4689      	mov	r9, r1
 8007266:	9b05      	ldr	r3, [sp, #20]
 8007268:	b1c3      	cbz	r3, 800729c <_strtod_l+0x604>
 800726a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800726e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007272:	2b00      	cmp	r3, #0
 8007274:	4649      	mov	r1, r9
 8007276:	dd11      	ble.n	800729c <_strtod_l+0x604>
 8007278:	2b1f      	cmp	r3, #31
 800727a:	f340 8127 	ble.w	80074cc <_strtod_l+0x834>
 800727e:	2b34      	cmp	r3, #52	; 0x34
 8007280:	bfd8      	it	le
 8007282:	f04f 33ff 	movle.w	r3, #4294967295
 8007286:	f04f 0800 	mov.w	r8, #0
 800728a:	bfcf      	iteee	gt
 800728c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007290:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007294:	fa03 f202 	lslle.w	r2, r3, r2
 8007298:	ea02 0901 	andle.w	r9, r2, r1
 800729c:	2200      	movs	r2, #0
 800729e:	2300      	movs	r3, #0
 80072a0:	4640      	mov	r0, r8
 80072a2:	4649      	mov	r1, r9
 80072a4:	f7f9 fb80 	bl	80009a8 <__aeabi_dcmpeq>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d1a1      	bne.n	80071f0 <_strtod_l+0x558>
 80072ac:	9b06      	ldr	r3, [sp, #24]
 80072ae:	465a      	mov	r2, fp
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	4650      	mov	r0, sl
 80072b4:	4623      	mov	r3, r4
 80072b6:	9908      	ldr	r1, [sp, #32]
 80072b8:	f001 fe64 	bl	8008f84 <__s2b>
 80072bc:	9008      	str	r0, [sp, #32]
 80072be:	2800      	cmp	r0, #0
 80072c0:	f43f af21 	beq.w	8007106 <_strtod_l+0x46e>
 80072c4:	9b04      	ldr	r3, [sp, #16]
 80072c6:	f04f 0b00 	mov.w	fp, #0
 80072ca:	1b5d      	subs	r5, r3, r5
 80072cc:	9b07      	ldr	r3, [sp, #28]
 80072ce:	f8cd b010 	str.w	fp, [sp, #16]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	bfb4      	ite	lt
 80072d6:	462b      	movlt	r3, r5
 80072d8:	2300      	movge	r3, #0
 80072da:	930e      	str	r3, [sp, #56]	; 0x38
 80072dc:	9b07      	ldr	r3, [sp, #28]
 80072de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80072e2:	9314      	str	r3, [sp, #80]	; 0x50
 80072e4:	9b08      	ldr	r3, [sp, #32]
 80072e6:	4650      	mov	r0, sl
 80072e8:	6859      	ldr	r1, [r3, #4]
 80072ea:	f001 fda3 	bl	8008e34 <_Balloc>
 80072ee:	9006      	str	r0, [sp, #24]
 80072f0:	2800      	cmp	r0, #0
 80072f2:	f43f af10 	beq.w	8007116 <_strtod_l+0x47e>
 80072f6:	9b08      	ldr	r3, [sp, #32]
 80072f8:	300c      	adds	r0, #12
 80072fa:	691a      	ldr	r2, [r3, #16]
 80072fc:	f103 010c 	add.w	r1, r3, #12
 8007300:	3202      	adds	r2, #2
 8007302:	0092      	lsls	r2, r2, #2
 8007304:	f001 fd88 	bl	8008e18 <memcpy>
 8007308:	ab1c      	add	r3, sp, #112	; 0x70
 800730a:	9301      	str	r3, [sp, #4]
 800730c:	ab1b      	add	r3, sp, #108	; 0x6c
 800730e:	9300      	str	r3, [sp, #0]
 8007310:	4642      	mov	r2, r8
 8007312:	464b      	mov	r3, r9
 8007314:	4650      	mov	r0, sl
 8007316:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800731a:	f002 f975 	bl	8009608 <__d2b>
 800731e:	901a      	str	r0, [sp, #104]	; 0x68
 8007320:	2800      	cmp	r0, #0
 8007322:	f43f aef8 	beq.w	8007116 <_strtod_l+0x47e>
 8007326:	2101      	movs	r1, #1
 8007328:	4650      	mov	r0, sl
 800732a:	f001 fec3 	bl	80090b4 <__i2b>
 800732e:	4603      	mov	r3, r0
 8007330:	9004      	str	r0, [sp, #16]
 8007332:	2800      	cmp	r0, #0
 8007334:	f43f aeef 	beq.w	8007116 <_strtod_l+0x47e>
 8007338:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800733a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800733c:	2d00      	cmp	r5, #0
 800733e:	bfab      	itete	ge
 8007340:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007342:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8007344:	18ee      	addge	r6, r5, r3
 8007346:	1b5c      	sublt	r4, r3, r5
 8007348:	9b05      	ldr	r3, [sp, #20]
 800734a:	bfa8      	it	ge
 800734c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800734e:	eba5 0503 	sub.w	r5, r5, r3
 8007352:	4415      	add	r5, r2
 8007354:	4b6e      	ldr	r3, [pc, #440]	; (8007510 <_strtod_l+0x878>)
 8007356:	f105 35ff 	add.w	r5, r5, #4294967295
 800735a:	bfb8      	it	lt
 800735c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800735e:	429d      	cmp	r5, r3
 8007360:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007364:	f280 80c4 	bge.w	80074f0 <_strtod_l+0x858>
 8007368:	1b5b      	subs	r3, r3, r5
 800736a:	2b1f      	cmp	r3, #31
 800736c:	f04f 0701 	mov.w	r7, #1
 8007370:	eba2 0203 	sub.w	r2, r2, r3
 8007374:	f300 80b1 	bgt.w	80074da <_strtod_l+0x842>
 8007378:	2500      	movs	r5, #0
 800737a:	fa07 f303 	lsl.w	r3, r7, r3
 800737e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007380:	18b7      	adds	r7, r6, r2
 8007382:	9b05      	ldr	r3, [sp, #20]
 8007384:	42be      	cmp	r6, r7
 8007386:	4414      	add	r4, r2
 8007388:	441c      	add	r4, r3
 800738a:	4633      	mov	r3, r6
 800738c:	bfa8      	it	ge
 800738e:	463b      	movge	r3, r7
 8007390:	42a3      	cmp	r3, r4
 8007392:	bfa8      	it	ge
 8007394:	4623      	movge	r3, r4
 8007396:	2b00      	cmp	r3, #0
 8007398:	bfc2      	ittt	gt
 800739a:	1aff      	subgt	r7, r7, r3
 800739c:	1ae4      	subgt	r4, r4, r3
 800739e:	1af6      	subgt	r6, r6, r3
 80073a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	dd17      	ble.n	80073d6 <_strtod_l+0x73e>
 80073a6:	461a      	mov	r2, r3
 80073a8:	4650      	mov	r0, sl
 80073aa:	9904      	ldr	r1, [sp, #16]
 80073ac:	f001 ff40 	bl	8009230 <__pow5mult>
 80073b0:	9004      	str	r0, [sp, #16]
 80073b2:	2800      	cmp	r0, #0
 80073b4:	f43f aeaf 	beq.w	8007116 <_strtod_l+0x47e>
 80073b8:	4601      	mov	r1, r0
 80073ba:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80073bc:	4650      	mov	r0, sl
 80073be:	f001 fe8f 	bl	80090e0 <__multiply>
 80073c2:	9009      	str	r0, [sp, #36]	; 0x24
 80073c4:	2800      	cmp	r0, #0
 80073c6:	f43f aea6 	beq.w	8007116 <_strtod_l+0x47e>
 80073ca:	4650      	mov	r0, sl
 80073cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80073ce:	f001 fd71 	bl	8008eb4 <_Bfree>
 80073d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073d4:	931a      	str	r3, [sp, #104]	; 0x68
 80073d6:	2f00      	cmp	r7, #0
 80073d8:	f300 808e 	bgt.w	80074f8 <_strtod_l+0x860>
 80073dc:	9b07      	ldr	r3, [sp, #28]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	dd08      	ble.n	80073f4 <_strtod_l+0x75c>
 80073e2:	4650      	mov	r0, sl
 80073e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80073e6:	9906      	ldr	r1, [sp, #24]
 80073e8:	f001 ff22 	bl	8009230 <__pow5mult>
 80073ec:	9006      	str	r0, [sp, #24]
 80073ee:	2800      	cmp	r0, #0
 80073f0:	f43f ae91 	beq.w	8007116 <_strtod_l+0x47e>
 80073f4:	2c00      	cmp	r4, #0
 80073f6:	dd08      	ble.n	800740a <_strtod_l+0x772>
 80073f8:	4622      	mov	r2, r4
 80073fa:	4650      	mov	r0, sl
 80073fc:	9906      	ldr	r1, [sp, #24]
 80073fe:	f001 ff71 	bl	80092e4 <__lshift>
 8007402:	9006      	str	r0, [sp, #24]
 8007404:	2800      	cmp	r0, #0
 8007406:	f43f ae86 	beq.w	8007116 <_strtod_l+0x47e>
 800740a:	2e00      	cmp	r6, #0
 800740c:	dd08      	ble.n	8007420 <_strtod_l+0x788>
 800740e:	4632      	mov	r2, r6
 8007410:	4650      	mov	r0, sl
 8007412:	9904      	ldr	r1, [sp, #16]
 8007414:	f001 ff66 	bl	80092e4 <__lshift>
 8007418:	9004      	str	r0, [sp, #16]
 800741a:	2800      	cmp	r0, #0
 800741c:	f43f ae7b 	beq.w	8007116 <_strtod_l+0x47e>
 8007420:	4650      	mov	r0, sl
 8007422:	9a06      	ldr	r2, [sp, #24]
 8007424:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007426:	f001 ffe9 	bl	80093fc <__mdiff>
 800742a:	4683      	mov	fp, r0
 800742c:	2800      	cmp	r0, #0
 800742e:	f43f ae72 	beq.w	8007116 <_strtod_l+0x47e>
 8007432:	2400      	movs	r4, #0
 8007434:	68c3      	ldr	r3, [r0, #12]
 8007436:	9904      	ldr	r1, [sp, #16]
 8007438:	60c4      	str	r4, [r0, #12]
 800743a:	930b      	str	r3, [sp, #44]	; 0x2c
 800743c:	f001 ffc2 	bl	80093c4 <__mcmp>
 8007440:	42a0      	cmp	r0, r4
 8007442:	da6b      	bge.n	800751c <_strtod_l+0x884>
 8007444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007446:	ea53 0308 	orrs.w	r3, r3, r8
 800744a:	f040 8091 	bne.w	8007570 <_strtod_l+0x8d8>
 800744e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007452:	2b00      	cmp	r3, #0
 8007454:	f040 808c 	bne.w	8007570 <_strtod_l+0x8d8>
 8007458:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800745c:	0d1b      	lsrs	r3, r3, #20
 800745e:	051b      	lsls	r3, r3, #20
 8007460:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007464:	f240 8084 	bls.w	8007570 <_strtod_l+0x8d8>
 8007468:	f8db 3014 	ldr.w	r3, [fp, #20]
 800746c:	b91b      	cbnz	r3, 8007476 <_strtod_l+0x7de>
 800746e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007472:	2b01      	cmp	r3, #1
 8007474:	dd7c      	ble.n	8007570 <_strtod_l+0x8d8>
 8007476:	4659      	mov	r1, fp
 8007478:	2201      	movs	r2, #1
 800747a:	4650      	mov	r0, sl
 800747c:	f001 ff32 	bl	80092e4 <__lshift>
 8007480:	9904      	ldr	r1, [sp, #16]
 8007482:	4683      	mov	fp, r0
 8007484:	f001 ff9e 	bl	80093c4 <__mcmp>
 8007488:	2800      	cmp	r0, #0
 800748a:	dd71      	ble.n	8007570 <_strtod_l+0x8d8>
 800748c:	9905      	ldr	r1, [sp, #20]
 800748e:	464b      	mov	r3, r9
 8007490:	4a20      	ldr	r2, [pc, #128]	; (8007514 <_strtod_l+0x87c>)
 8007492:	2900      	cmp	r1, #0
 8007494:	f000 808c 	beq.w	80075b0 <_strtod_l+0x918>
 8007498:	ea02 0109 	and.w	r1, r2, r9
 800749c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80074a0:	f300 8086 	bgt.w	80075b0 <_strtod_l+0x918>
 80074a4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80074a8:	f77f aeaa 	ble.w	8007200 <_strtod_l+0x568>
 80074ac:	4640      	mov	r0, r8
 80074ae:	4649      	mov	r1, r9
 80074b0:	4b19      	ldr	r3, [pc, #100]	; (8007518 <_strtod_l+0x880>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	f7f9 f810 	bl	80004d8 <__aeabi_dmul>
 80074b8:	460b      	mov	r3, r1
 80074ba:	4303      	orrs	r3, r0
 80074bc:	bf08      	it	eq
 80074be:	2322      	moveq	r3, #34	; 0x22
 80074c0:	4680      	mov	r8, r0
 80074c2:	4689      	mov	r9, r1
 80074c4:	bf08      	it	eq
 80074c6:	f8ca 3000 	streq.w	r3, [sl]
 80074ca:	e62f      	b.n	800712c <_strtod_l+0x494>
 80074cc:	f04f 32ff 	mov.w	r2, #4294967295
 80074d0:	fa02 f303 	lsl.w	r3, r2, r3
 80074d4:	ea03 0808 	and.w	r8, r3, r8
 80074d8:	e6e0      	b.n	800729c <_strtod_l+0x604>
 80074da:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80074de:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80074e2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80074e6:	35e2      	adds	r5, #226	; 0xe2
 80074e8:	fa07 f505 	lsl.w	r5, r7, r5
 80074ec:	970f      	str	r7, [sp, #60]	; 0x3c
 80074ee:	e747      	b.n	8007380 <_strtod_l+0x6e8>
 80074f0:	2301      	movs	r3, #1
 80074f2:	2500      	movs	r5, #0
 80074f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80074f6:	e743      	b.n	8007380 <_strtod_l+0x6e8>
 80074f8:	463a      	mov	r2, r7
 80074fa:	4650      	mov	r0, sl
 80074fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80074fe:	f001 fef1 	bl	80092e4 <__lshift>
 8007502:	901a      	str	r0, [sp, #104]	; 0x68
 8007504:	2800      	cmp	r0, #0
 8007506:	f47f af69 	bne.w	80073dc <_strtod_l+0x744>
 800750a:	e604      	b.n	8007116 <_strtod_l+0x47e>
 800750c:	0800a948 	.word	0x0800a948
 8007510:	fffffc02 	.word	0xfffffc02
 8007514:	7ff00000 	.word	0x7ff00000
 8007518:	39500000 	.word	0x39500000
 800751c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007520:	d165      	bne.n	80075ee <_strtod_l+0x956>
 8007522:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007524:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007528:	b35a      	cbz	r2, 8007582 <_strtod_l+0x8ea>
 800752a:	4a99      	ldr	r2, [pc, #612]	; (8007790 <_strtod_l+0xaf8>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d12b      	bne.n	8007588 <_strtod_l+0x8f0>
 8007530:	9b05      	ldr	r3, [sp, #20]
 8007532:	4641      	mov	r1, r8
 8007534:	b303      	cbz	r3, 8007578 <_strtod_l+0x8e0>
 8007536:	464a      	mov	r2, r9
 8007538:	4b96      	ldr	r3, [pc, #600]	; (8007794 <_strtod_l+0xafc>)
 800753a:	4013      	ands	r3, r2
 800753c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007540:	f04f 32ff 	mov.w	r2, #4294967295
 8007544:	d81b      	bhi.n	800757e <_strtod_l+0x8e6>
 8007546:	0d1b      	lsrs	r3, r3, #20
 8007548:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800754c:	fa02 f303 	lsl.w	r3, r2, r3
 8007550:	4299      	cmp	r1, r3
 8007552:	d119      	bne.n	8007588 <_strtod_l+0x8f0>
 8007554:	4b90      	ldr	r3, [pc, #576]	; (8007798 <_strtod_l+0xb00>)
 8007556:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007558:	429a      	cmp	r2, r3
 800755a:	d102      	bne.n	8007562 <_strtod_l+0x8ca>
 800755c:	3101      	adds	r1, #1
 800755e:	f43f adda 	beq.w	8007116 <_strtod_l+0x47e>
 8007562:	f04f 0800 	mov.w	r8, #0
 8007566:	4b8b      	ldr	r3, [pc, #556]	; (8007794 <_strtod_l+0xafc>)
 8007568:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800756a:	401a      	ands	r2, r3
 800756c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8007570:	9b05      	ldr	r3, [sp, #20]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d19a      	bne.n	80074ac <_strtod_l+0x814>
 8007576:	e5d9      	b.n	800712c <_strtod_l+0x494>
 8007578:	f04f 33ff 	mov.w	r3, #4294967295
 800757c:	e7e8      	b.n	8007550 <_strtod_l+0x8b8>
 800757e:	4613      	mov	r3, r2
 8007580:	e7e6      	b.n	8007550 <_strtod_l+0x8b8>
 8007582:	ea53 0308 	orrs.w	r3, r3, r8
 8007586:	d081      	beq.n	800748c <_strtod_l+0x7f4>
 8007588:	b1e5      	cbz	r5, 80075c4 <_strtod_l+0x92c>
 800758a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800758c:	421d      	tst	r5, r3
 800758e:	d0ef      	beq.n	8007570 <_strtod_l+0x8d8>
 8007590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007592:	4640      	mov	r0, r8
 8007594:	4649      	mov	r1, r9
 8007596:	9a05      	ldr	r2, [sp, #20]
 8007598:	b1c3      	cbz	r3, 80075cc <_strtod_l+0x934>
 800759a:	f7ff fb5b 	bl	8006c54 <sulp>
 800759e:	4602      	mov	r2, r0
 80075a0:	460b      	mov	r3, r1
 80075a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80075a6:	f7f8 fde1 	bl	800016c <__adddf3>
 80075aa:	4680      	mov	r8, r0
 80075ac:	4689      	mov	r9, r1
 80075ae:	e7df      	b.n	8007570 <_strtod_l+0x8d8>
 80075b0:	4013      	ands	r3, r2
 80075b2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80075b6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80075ba:	f04f 38ff 	mov.w	r8, #4294967295
 80075be:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80075c2:	e7d5      	b.n	8007570 <_strtod_l+0x8d8>
 80075c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075c6:	ea13 0f08 	tst.w	r3, r8
 80075ca:	e7e0      	b.n	800758e <_strtod_l+0x8f6>
 80075cc:	f7ff fb42 	bl	8006c54 <sulp>
 80075d0:	4602      	mov	r2, r0
 80075d2:	460b      	mov	r3, r1
 80075d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80075d8:	f7f8 fdc6 	bl	8000168 <__aeabi_dsub>
 80075dc:	2200      	movs	r2, #0
 80075de:	2300      	movs	r3, #0
 80075e0:	4680      	mov	r8, r0
 80075e2:	4689      	mov	r9, r1
 80075e4:	f7f9 f9e0 	bl	80009a8 <__aeabi_dcmpeq>
 80075e8:	2800      	cmp	r0, #0
 80075ea:	d0c1      	beq.n	8007570 <_strtod_l+0x8d8>
 80075ec:	e608      	b.n	8007200 <_strtod_l+0x568>
 80075ee:	4658      	mov	r0, fp
 80075f0:	9904      	ldr	r1, [sp, #16]
 80075f2:	f002 f865 	bl	80096c0 <__ratio>
 80075f6:	2200      	movs	r2, #0
 80075f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80075fc:	4606      	mov	r6, r0
 80075fe:	460f      	mov	r7, r1
 8007600:	f7f9 f9e6 	bl	80009d0 <__aeabi_dcmple>
 8007604:	2800      	cmp	r0, #0
 8007606:	d070      	beq.n	80076ea <_strtod_l+0xa52>
 8007608:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800760a:	2b00      	cmp	r3, #0
 800760c:	d042      	beq.n	8007694 <_strtod_l+0x9fc>
 800760e:	2600      	movs	r6, #0
 8007610:	4f62      	ldr	r7, [pc, #392]	; (800779c <_strtod_l+0xb04>)
 8007612:	4d62      	ldr	r5, [pc, #392]	; (800779c <_strtod_l+0xb04>)
 8007614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007616:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800761a:	0d1b      	lsrs	r3, r3, #20
 800761c:	051b      	lsls	r3, r3, #20
 800761e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007620:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007622:	4b5f      	ldr	r3, [pc, #380]	; (80077a0 <_strtod_l+0xb08>)
 8007624:	429a      	cmp	r2, r3
 8007626:	f040 80c3 	bne.w	80077b0 <_strtod_l+0xb18>
 800762a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800762c:	4640      	mov	r0, r8
 800762e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8007632:	4649      	mov	r1, r9
 8007634:	f001 ff6e 	bl	8009514 <__ulp>
 8007638:	4602      	mov	r2, r0
 800763a:	460b      	mov	r3, r1
 800763c:	4630      	mov	r0, r6
 800763e:	4639      	mov	r1, r7
 8007640:	f7f8 ff4a 	bl	80004d8 <__aeabi_dmul>
 8007644:	4642      	mov	r2, r8
 8007646:	464b      	mov	r3, r9
 8007648:	f7f8 fd90 	bl	800016c <__adddf3>
 800764c:	460b      	mov	r3, r1
 800764e:	4951      	ldr	r1, [pc, #324]	; (8007794 <_strtod_l+0xafc>)
 8007650:	4a54      	ldr	r2, [pc, #336]	; (80077a4 <_strtod_l+0xb0c>)
 8007652:	4019      	ands	r1, r3
 8007654:	4291      	cmp	r1, r2
 8007656:	4680      	mov	r8, r0
 8007658:	d95d      	bls.n	8007716 <_strtod_l+0xa7e>
 800765a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800765c:	4b4e      	ldr	r3, [pc, #312]	; (8007798 <_strtod_l+0xb00>)
 800765e:	429a      	cmp	r2, r3
 8007660:	d103      	bne.n	800766a <_strtod_l+0x9d2>
 8007662:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007664:	3301      	adds	r3, #1
 8007666:	f43f ad56 	beq.w	8007116 <_strtod_l+0x47e>
 800766a:	f04f 38ff 	mov.w	r8, #4294967295
 800766e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007798 <_strtod_l+0xb00>
 8007672:	4650      	mov	r0, sl
 8007674:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007676:	f001 fc1d 	bl	8008eb4 <_Bfree>
 800767a:	4650      	mov	r0, sl
 800767c:	9906      	ldr	r1, [sp, #24]
 800767e:	f001 fc19 	bl	8008eb4 <_Bfree>
 8007682:	4650      	mov	r0, sl
 8007684:	9904      	ldr	r1, [sp, #16]
 8007686:	f001 fc15 	bl	8008eb4 <_Bfree>
 800768a:	4659      	mov	r1, fp
 800768c:	4650      	mov	r0, sl
 800768e:	f001 fc11 	bl	8008eb4 <_Bfree>
 8007692:	e627      	b.n	80072e4 <_strtod_l+0x64c>
 8007694:	f1b8 0f00 	cmp.w	r8, #0
 8007698:	d119      	bne.n	80076ce <_strtod_l+0xa36>
 800769a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800769c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076a0:	b9e3      	cbnz	r3, 80076dc <_strtod_l+0xa44>
 80076a2:	2200      	movs	r2, #0
 80076a4:	4630      	mov	r0, r6
 80076a6:	4639      	mov	r1, r7
 80076a8:	4b3c      	ldr	r3, [pc, #240]	; (800779c <_strtod_l+0xb04>)
 80076aa:	f7f9 f987 	bl	80009bc <__aeabi_dcmplt>
 80076ae:	b9c8      	cbnz	r0, 80076e4 <_strtod_l+0xa4c>
 80076b0:	2200      	movs	r2, #0
 80076b2:	4630      	mov	r0, r6
 80076b4:	4639      	mov	r1, r7
 80076b6:	4b3c      	ldr	r3, [pc, #240]	; (80077a8 <_strtod_l+0xb10>)
 80076b8:	f7f8 ff0e 	bl	80004d8 <__aeabi_dmul>
 80076bc:	4604      	mov	r4, r0
 80076be:	460d      	mov	r5, r1
 80076c0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80076c4:	9416      	str	r4, [sp, #88]	; 0x58
 80076c6:	9317      	str	r3, [sp, #92]	; 0x5c
 80076c8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80076cc:	e7a2      	b.n	8007614 <_strtod_l+0x97c>
 80076ce:	f1b8 0f01 	cmp.w	r8, #1
 80076d2:	d103      	bne.n	80076dc <_strtod_l+0xa44>
 80076d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	f43f ad92 	beq.w	8007200 <_strtod_l+0x568>
 80076dc:	2600      	movs	r6, #0
 80076de:	2400      	movs	r4, #0
 80076e0:	4f32      	ldr	r7, [pc, #200]	; (80077ac <_strtod_l+0xb14>)
 80076e2:	e796      	b.n	8007612 <_strtod_l+0x97a>
 80076e4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80076e6:	4d30      	ldr	r5, [pc, #192]	; (80077a8 <_strtod_l+0xb10>)
 80076e8:	e7ea      	b.n	80076c0 <_strtod_l+0xa28>
 80076ea:	4b2f      	ldr	r3, [pc, #188]	; (80077a8 <_strtod_l+0xb10>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	4630      	mov	r0, r6
 80076f0:	4639      	mov	r1, r7
 80076f2:	f7f8 fef1 	bl	80004d8 <__aeabi_dmul>
 80076f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076f8:	4604      	mov	r4, r0
 80076fa:	460d      	mov	r5, r1
 80076fc:	b933      	cbnz	r3, 800770c <_strtod_l+0xa74>
 80076fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007702:	9010      	str	r0, [sp, #64]	; 0x40
 8007704:	9311      	str	r3, [sp, #68]	; 0x44
 8007706:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800770a:	e783      	b.n	8007614 <_strtod_l+0x97c>
 800770c:	4602      	mov	r2, r0
 800770e:	460b      	mov	r3, r1
 8007710:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007714:	e7f7      	b.n	8007706 <_strtod_l+0xa6e>
 8007716:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800771a:	9b05      	ldr	r3, [sp, #20]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1a8      	bne.n	8007672 <_strtod_l+0x9da>
 8007720:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007724:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007726:	0d1b      	lsrs	r3, r3, #20
 8007728:	051b      	lsls	r3, r3, #20
 800772a:	429a      	cmp	r2, r3
 800772c:	d1a1      	bne.n	8007672 <_strtod_l+0x9da>
 800772e:	4620      	mov	r0, r4
 8007730:	4629      	mov	r1, r5
 8007732:	f7f9 fd13 	bl	800115c <__aeabi_d2lz>
 8007736:	f7f8 fea1 	bl	800047c <__aeabi_l2d>
 800773a:	4602      	mov	r2, r0
 800773c:	460b      	mov	r3, r1
 800773e:	4620      	mov	r0, r4
 8007740:	4629      	mov	r1, r5
 8007742:	f7f8 fd11 	bl	8000168 <__aeabi_dsub>
 8007746:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007748:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800774c:	ea43 0308 	orr.w	r3, r3, r8
 8007750:	4313      	orrs	r3, r2
 8007752:	4604      	mov	r4, r0
 8007754:	460d      	mov	r5, r1
 8007756:	d066      	beq.n	8007826 <_strtod_l+0xb8e>
 8007758:	a309      	add	r3, pc, #36	; (adr r3, 8007780 <_strtod_l+0xae8>)
 800775a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775e:	f7f9 f92d 	bl	80009bc <__aeabi_dcmplt>
 8007762:	2800      	cmp	r0, #0
 8007764:	f47f ace2 	bne.w	800712c <_strtod_l+0x494>
 8007768:	a307      	add	r3, pc, #28	; (adr r3, 8007788 <_strtod_l+0xaf0>)
 800776a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776e:	4620      	mov	r0, r4
 8007770:	4629      	mov	r1, r5
 8007772:	f7f9 f941 	bl	80009f8 <__aeabi_dcmpgt>
 8007776:	2800      	cmp	r0, #0
 8007778:	f43f af7b 	beq.w	8007672 <_strtod_l+0x9da>
 800777c:	e4d6      	b.n	800712c <_strtod_l+0x494>
 800777e:	bf00      	nop
 8007780:	94a03595 	.word	0x94a03595
 8007784:	3fdfffff 	.word	0x3fdfffff
 8007788:	35afe535 	.word	0x35afe535
 800778c:	3fe00000 	.word	0x3fe00000
 8007790:	000fffff 	.word	0x000fffff
 8007794:	7ff00000 	.word	0x7ff00000
 8007798:	7fefffff 	.word	0x7fefffff
 800779c:	3ff00000 	.word	0x3ff00000
 80077a0:	7fe00000 	.word	0x7fe00000
 80077a4:	7c9fffff 	.word	0x7c9fffff
 80077a8:	3fe00000 	.word	0x3fe00000
 80077ac:	bff00000 	.word	0xbff00000
 80077b0:	9b05      	ldr	r3, [sp, #20]
 80077b2:	b313      	cbz	r3, 80077fa <_strtod_l+0xb62>
 80077b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80077ba:	d81e      	bhi.n	80077fa <_strtod_l+0xb62>
 80077bc:	a326      	add	r3, pc, #152	; (adr r3, 8007858 <_strtod_l+0xbc0>)
 80077be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c2:	4620      	mov	r0, r4
 80077c4:	4629      	mov	r1, r5
 80077c6:	f7f9 f903 	bl	80009d0 <__aeabi_dcmple>
 80077ca:	b190      	cbz	r0, 80077f2 <_strtod_l+0xb5a>
 80077cc:	4629      	mov	r1, r5
 80077ce:	4620      	mov	r0, r4
 80077d0:	f7f9 f95a 	bl	8000a88 <__aeabi_d2uiz>
 80077d4:	2801      	cmp	r0, #1
 80077d6:	bf38      	it	cc
 80077d8:	2001      	movcc	r0, #1
 80077da:	f7f8 fe03 	bl	80003e4 <__aeabi_ui2d>
 80077de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077e0:	4604      	mov	r4, r0
 80077e2:	460d      	mov	r5, r1
 80077e4:	b9d3      	cbnz	r3, 800781c <_strtod_l+0xb84>
 80077e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077ea:	9012      	str	r0, [sp, #72]	; 0x48
 80077ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80077ee:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80077f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077f4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80077f8:	1a9f      	subs	r7, r3, r2
 80077fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80077fe:	f001 fe89 	bl	8009514 <__ulp>
 8007802:	4602      	mov	r2, r0
 8007804:	460b      	mov	r3, r1
 8007806:	4630      	mov	r0, r6
 8007808:	4639      	mov	r1, r7
 800780a:	f7f8 fe65 	bl	80004d8 <__aeabi_dmul>
 800780e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007812:	f7f8 fcab 	bl	800016c <__adddf3>
 8007816:	4680      	mov	r8, r0
 8007818:	4689      	mov	r9, r1
 800781a:	e77e      	b.n	800771a <_strtod_l+0xa82>
 800781c:	4602      	mov	r2, r0
 800781e:	460b      	mov	r3, r1
 8007820:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007824:	e7e3      	b.n	80077ee <_strtod_l+0xb56>
 8007826:	a30e      	add	r3, pc, #56	; (adr r3, 8007860 <_strtod_l+0xbc8>)
 8007828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782c:	f7f9 f8c6 	bl	80009bc <__aeabi_dcmplt>
 8007830:	e7a1      	b.n	8007776 <_strtod_l+0xade>
 8007832:	2300      	movs	r3, #0
 8007834:	930a      	str	r3, [sp, #40]	; 0x28
 8007836:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007838:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800783a:	6013      	str	r3, [r2, #0]
 800783c:	f7ff ba71 	b.w	8006d22 <_strtod_l+0x8a>
 8007840:	2a65      	cmp	r2, #101	; 0x65
 8007842:	f43f ab63 	beq.w	8006f0c <_strtod_l+0x274>
 8007846:	2a45      	cmp	r2, #69	; 0x45
 8007848:	f43f ab60 	beq.w	8006f0c <_strtod_l+0x274>
 800784c:	2301      	movs	r3, #1
 800784e:	f7ff bb95 	b.w	8006f7c <_strtod_l+0x2e4>
 8007852:	bf00      	nop
 8007854:	f3af 8000 	nop.w
 8007858:	ffc00000 	.word	0xffc00000
 800785c:	41dfffff 	.word	0x41dfffff
 8007860:	94a03595 	.word	0x94a03595
 8007864:	3fcfffff 	.word	0x3fcfffff

08007868 <strtod>:
 8007868:	460a      	mov	r2, r1
 800786a:	4601      	mov	r1, r0
 800786c:	4802      	ldr	r0, [pc, #8]	; (8007878 <strtod+0x10>)
 800786e:	4b03      	ldr	r3, [pc, #12]	; (800787c <strtod+0x14>)
 8007870:	6800      	ldr	r0, [r0, #0]
 8007872:	f7ff ba11 	b.w	8006c98 <_strtod_l>
 8007876:	bf00      	nop
 8007878:	20000040 	.word	0x20000040
 800787c:	200000a8 	.word	0x200000a8

08007880 <_strtol_l.constprop.0>:
 8007880:	2b01      	cmp	r3, #1
 8007882:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007886:	4680      	mov	r8, r0
 8007888:	d001      	beq.n	800788e <_strtol_l.constprop.0+0xe>
 800788a:	2b24      	cmp	r3, #36	; 0x24
 800788c:	d906      	bls.n	800789c <_strtol_l.constprop.0+0x1c>
 800788e:	f7fe fd2f 	bl	80062f0 <__errno>
 8007892:	2316      	movs	r3, #22
 8007894:	6003      	str	r3, [r0, #0]
 8007896:	2000      	movs	r0, #0
 8007898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800789c:	460d      	mov	r5, r1
 800789e:	4f35      	ldr	r7, [pc, #212]	; (8007974 <_strtol_l.constprop.0+0xf4>)
 80078a0:	4628      	mov	r0, r5
 80078a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80078a6:	5de6      	ldrb	r6, [r4, r7]
 80078a8:	f016 0608 	ands.w	r6, r6, #8
 80078ac:	d1f8      	bne.n	80078a0 <_strtol_l.constprop.0+0x20>
 80078ae:	2c2d      	cmp	r4, #45	; 0x2d
 80078b0:	d12f      	bne.n	8007912 <_strtol_l.constprop.0+0x92>
 80078b2:	2601      	movs	r6, #1
 80078b4:	782c      	ldrb	r4, [r5, #0]
 80078b6:	1c85      	adds	r5, r0, #2
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d057      	beq.n	800796c <_strtol_l.constprop.0+0xec>
 80078bc:	2b10      	cmp	r3, #16
 80078be:	d109      	bne.n	80078d4 <_strtol_l.constprop.0+0x54>
 80078c0:	2c30      	cmp	r4, #48	; 0x30
 80078c2:	d107      	bne.n	80078d4 <_strtol_l.constprop.0+0x54>
 80078c4:	7828      	ldrb	r0, [r5, #0]
 80078c6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80078ca:	2858      	cmp	r0, #88	; 0x58
 80078cc:	d149      	bne.n	8007962 <_strtol_l.constprop.0+0xe2>
 80078ce:	2310      	movs	r3, #16
 80078d0:	786c      	ldrb	r4, [r5, #1]
 80078d2:	3502      	adds	r5, #2
 80078d4:	2700      	movs	r7, #0
 80078d6:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80078da:	f10e 3eff 	add.w	lr, lr, #4294967295
 80078de:	fbbe f9f3 	udiv	r9, lr, r3
 80078e2:	4638      	mov	r0, r7
 80078e4:	fb03 ea19 	mls	sl, r3, r9, lr
 80078e8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80078ec:	f1bc 0f09 	cmp.w	ip, #9
 80078f0:	d814      	bhi.n	800791c <_strtol_l.constprop.0+0x9c>
 80078f2:	4664      	mov	r4, ip
 80078f4:	42a3      	cmp	r3, r4
 80078f6:	dd22      	ble.n	800793e <_strtol_l.constprop.0+0xbe>
 80078f8:	2f00      	cmp	r7, #0
 80078fa:	db1d      	blt.n	8007938 <_strtol_l.constprop.0+0xb8>
 80078fc:	4581      	cmp	r9, r0
 80078fe:	d31b      	bcc.n	8007938 <_strtol_l.constprop.0+0xb8>
 8007900:	d101      	bne.n	8007906 <_strtol_l.constprop.0+0x86>
 8007902:	45a2      	cmp	sl, r4
 8007904:	db18      	blt.n	8007938 <_strtol_l.constprop.0+0xb8>
 8007906:	2701      	movs	r7, #1
 8007908:	fb00 4003 	mla	r0, r0, r3, r4
 800790c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007910:	e7ea      	b.n	80078e8 <_strtol_l.constprop.0+0x68>
 8007912:	2c2b      	cmp	r4, #43	; 0x2b
 8007914:	bf04      	itt	eq
 8007916:	782c      	ldrbeq	r4, [r5, #0]
 8007918:	1c85      	addeq	r5, r0, #2
 800791a:	e7cd      	b.n	80078b8 <_strtol_l.constprop.0+0x38>
 800791c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007920:	f1bc 0f19 	cmp.w	ip, #25
 8007924:	d801      	bhi.n	800792a <_strtol_l.constprop.0+0xaa>
 8007926:	3c37      	subs	r4, #55	; 0x37
 8007928:	e7e4      	b.n	80078f4 <_strtol_l.constprop.0+0x74>
 800792a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800792e:	f1bc 0f19 	cmp.w	ip, #25
 8007932:	d804      	bhi.n	800793e <_strtol_l.constprop.0+0xbe>
 8007934:	3c57      	subs	r4, #87	; 0x57
 8007936:	e7dd      	b.n	80078f4 <_strtol_l.constprop.0+0x74>
 8007938:	f04f 37ff 	mov.w	r7, #4294967295
 800793c:	e7e6      	b.n	800790c <_strtol_l.constprop.0+0x8c>
 800793e:	2f00      	cmp	r7, #0
 8007940:	da07      	bge.n	8007952 <_strtol_l.constprop.0+0xd2>
 8007942:	2322      	movs	r3, #34	; 0x22
 8007944:	4670      	mov	r0, lr
 8007946:	f8c8 3000 	str.w	r3, [r8]
 800794a:	2a00      	cmp	r2, #0
 800794c:	d0a4      	beq.n	8007898 <_strtol_l.constprop.0+0x18>
 800794e:	1e69      	subs	r1, r5, #1
 8007950:	e005      	b.n	800795e <_strtol_l.constprop.0+0xde>
 8007952:	b106      	cbz	r6, 8007956 <_strtol_l.constprop.0+0xd6>
 8007954:	4240      	negs	r0, r0
 8007956:	2a00      	cmp	r2, #0
 8007958:	d09e      	beq.n	8007898 <_strtol_l.constprop.0+0x18>
 800795a:	2f00      	cmp	r7, #0
 800795c:	d1f7      	bne.n	800794e <_strtol_l.constprop.0+0xce>
 800795e:	6011      	str	r1, [r2, #0]
 8007960:	e79a      	b.n	8007898 <_strtol_l.constprop.0+0x18>
 8007962:	2430      	movs	r4, #48	; 0x30
 8007964:	2b00      	cmp	r3, #0
 8007966:	d1b5      	bne.n	80078d4 <_strtol_l.constprop.0+0x54>
 8007968:	2308      	movs	r3, #8
 800796a:	e7b3      	b.n	80078d4 <_strtol_l.constprop.0+0x54>
 800796c:	2c30      	cmp	r4, #48	; 0x30
 800796e:	d0a9      	beq.n	80078c4 <_strtol_l.constprop.0+0x44>
 8007970:	230a      	movs	r3, #10
 8007972:	e7af      	b.n	80078d4 <_strtol_l.constprop.0+0x54>
 8007974:	0800a971 	.word	0x0800a971

08007978 <strtol>:
 8007978:	4613      	mov	r3, r2
 800797a:	460a      	mov	r2, r1
 800797c:	4601      	mov	r1, r0
 800797e:	4802      	ldr	r0, [pc, #8]	; (8007988 <strtol+0x10>)
 8007980:	6800      	ldr	r0, [r0, #0]
 8007982:	f7ff bf7d 	b.w	8007880 <_strtol_l.constprop.0>
 8007986:	bf00      	nop
 8007988:	20000040 	.word	0x20000040

0800798c <_vsniprintf_r>:
 800798c:	b530      	push	{r4, r5, lr}
 800798e:	4614      	mov	r4, r2
 8007990:	2c00      	cmp	r4, #0
 8007992:	4605      	mov	r5, r0
 8007994:	461a      	mov	r2, r3
 8007996:	b09b      	sub	sp, #108	; 0x6c
 8007998:	da05      	bge.n	80079a6 <_vsniprintf_r+0x1a>
 800799a:	238b      	movs	r3, #139	; 0x8b
 800799c:	6003      	str	r3, [r0, #0]
 800799e:	f04f 30ff 	mov.w	r0, #4294967295
 80079a2:	b01b      	add	sp, #108	; 0x6c
 80079a4:	bd30      	pop	{r4, r5, pc}
 80079a6:	f44f 7302 	mov.w	r3, #520	; 0x208
 80079aa:	f8ad 300c 	strh.w	r3, [sp, #12]
 80079ae:	bf0c      	ite	eq
 80079b0:	4623      	moveq	r3, r4
 80079b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80079b6:	9302      	str	r3, [sp, #8]
 80079b8:	9305      	str	r3, [sp, #20]
 80079ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80079be:	9100      	str	r1, [sp, #0]
 80079c0:	9104      	str	r1, [sp, #16]
 80079c2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80079c6:	4669      	mov	r1, sp
 80079c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80079ca:	f002 f837 	bl	8009a3c <_svfiprintf_r>
 80079ce:	1c43      	adds	r3, r0, #1
 80079d0:	bfbc      	itt	lt
 80079d2:	238b      	movlt	r3, #139	; 0x8b
 80079d4:	602b      	strlt	r3, [r5, #0]
 80079d6:	2c00      	cmp	r4, #0
 80079d8:	d0e3      	beq.n	80079a2 <_vsniprintf_r+0x16>
 80079da:	2200      	movs	r2, #0
 80079dc:	9b00      	ldr	r3, [sp, #0]
 80079de:	701a      	strb	r2, [r3, #0]
 80079e0:	e7df      	b.n	80079a2 <_vsniprintf_r+0x16>
	...

080079e4 <vsniprintf>:
 80079e4:	b507      	push	{r0, r1, r2, lr}
 80079e6:	9300      	str	r3, [sp, #0]
 80079e8:	4613      	mov	r3, r2
 80079ea:	460a      	mov	r2, r1
 80079ec:	4601      	mov	r1, r0
 80079ee:	4803      	ldr	r0, [pc, #12]	; (80079fc <vsniprintf+0x18>)
 80079f0:	6800      	ldr	r0, [r0, #0]
 80079f2:	f7ff ffcb 	bl	800798c <_vsniprintf_r>
 80079f6:	b003      	add	sp, #12
 80079f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80079fc:	20000040 	.word	0x20000040

08007a00 <quorem>:
 8007a00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a04:	6903      	ldr	r3, [r0, #16]
 8007a06:	690c      	ldr	r4, [r1, #16]
 8007a08:	4607      	mov	r7, r0
 8007a0a:	42a3      	cmp	r3, r4
 8007a0c:	f2c0 8082 	blt.w	8007b14 <quorem+0x114>
 8007a10:	3c01      	subs	r4, #1
 8007a12:	f100 0514 	add.w	r5, r0, #20
 8007a16:	f101 0814 	add.w	r8, r1, #20
 8007a1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a1e:	9301      	str	r3, [sp, #4]
 8007a20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a38:	d331      	bcc.n	8007a9e <quorem+0x9e>
 8007a3a:	f04f 0e00 	mov.w	lr, #0
 8007a3e:	4640      	mov	r0, r8
 8007a40:	46ac      	mov	ip, r5
 8007a42:	46f2      	mov	sl, lr
 8007a44:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a48:	b293      	uxth	r3, r2
 8007a4a:	fb06 e303 	mla	r3, r6, r3, lr
 8007a4e:	0c12      	lsrs	r2, r2, #16
 8007a50:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	fb06 e202 	mla	r2, r6, r2, lr
 8007a5a:	ebaa 0303 	sub.w	r3, sl, r3
 8007a5e:	f8dc a000 	ldr.w	sl, [ip]
 8007a62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a66:	fa1f fa8a 	uxth.w	sl, sl
 8007a6a:	4453      	add	r3, sl
 8007a6c:	f8dc a000 	ldr.w	sl, [ip]
 8007a70:	b292      	uxth	r2, r2
 8007a72:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007a76:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a80:	4581      	cmp	r9, r0
 8007a82:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007a86:	f84c 3b04 	str.w	r3, [ip], #4
 8007a8a:	d2db      	bcs.n	8007a44 <quorem+0x44>
 8007a8c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007a90:	b92b      	cbnz	r3, 8007a9e <quorem+0x9e>
 8007a92:	9b01      	ldr	r3, [sp, #4]
 8007a94:	3b04      	subs	r3, #4
 8007a96:	429d      	cmp	r5, r3
 8007a98:	461a      	mov	r2, r3
 8007a9a:	d32f      	bcc.n	8007afc <quorem+0xfc>
 8007a9c:	613c      	str	r4, [r7, #16]
 8007a9e:	4638      	mov	r0, r7
 8007aa0:	f001 fc90 	bl	80093c4 <__mcmp>
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	db25      	blt.n	8007af4 <quorem+0xf4>
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	f04f 0c00 	mov.w	ip, #0
 8007aae:	3601      	adds	r6, #1
 8007ab0:	f858 1b04 	ldr.w	r1, [r8], #4
 8007ab4:	f8d0 e000 	ldr.w	lr, [r0]
 8007ab8:	b28b      	uxth	r3, r1
 8007aba:	ebac 0303 	sub.w	r3, ip, r3
 8007abe:	fa1f f28e 	uxth.w	r2, lr
 8007ac2:	4413      	add	r3, r2
 8007ac4:	0c0a      	lsrs	r2, r1, #16
 8007ac6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007aca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ad4:	45c1      	cmp	r9, r8
 8007ad6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007ada:	f840 3b04 	str.w	r3, [r0], #4
 8007ade:	d2e7      	bcs.n	8007ab0 <quorem+0xb0>
 8007ae0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ae4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ae8:	b922      	cbnz	r2, 8007af4 <quorem+0xf4>
 8007aea:	3b04      	subs	r3, #4
 8007aec:	429d      	cmp	r5, r3
 8007aee:	461a      	mov	r2, r3
 8007af0:	d30a      	bcc.n	8007b08 <quorem+0x108>
 8007af2:	613c      	str	r4, [r7, #16]
 8007af4:	4630      	mov	r0, r6
 8007af6:	b003      	add	sp, #12
 8007af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007afc:	6812      	ldr	r2, [r2, #0]
 8007afe:	3b04      	subs	r3, #4
 8007b00:	2a00      	cmp	r2, #0
 8007b02:	d1cb      	bne.n	8007a9c <quorem+0x9c>
 8007b04:	3c01      	subs	r4, #1
 8007b06:	e7c6      	b.n	8007a96 <quorem+0x96>
 8007b08:	6812      	ldr	r2, [r2, #0]
 8007b0a:	3b04      	subs	r3, #4
 8007b0c:	2a00      	cmp	r2, #0
 8007b0e:	d1f0      	bne.n	8007af2 <quorem+0xf2>
 8007b10:	3c01      	subs	r4, #1
 8007b12:	e7eb      	b.n	8007aec <quorem+0xec>
 8007b14:	2000      	movs	r0, #0
 8007b16:	e7ee      	b.n	8007af6 <quorem+0xf6>

08007b18 <_dtoa_r>:
 8007b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b1c:	4616      	mov	r6, r2
 8007b1e:	461f      	mov	r7, r3
 8007b20:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007b22:	b099      	sub	sp, #100	; 0x64
 8007b24:	4605      	mov	r5, r0
 8007b26:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007b2a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007b2e:	b974      	cbnz	r4, 8007b4e <_dtoa_r+0x36>
 8007b30:	2010      	movs	r0, #16
 8007b32:	f001 f949 	bl	8008dc8 <malloc>
 8007b36:	4602      	mov	r2, r0
 8007b38:	6268      	str	r0, [r5, #36]	; 0x24
 8007b3a:	b920      	cbnz	r0, 8007b46 <_dtoa_r+0x2e>
 8007b3c:	21ea      	movs	r1, #234	; 0xea
 8007b3e:	4ba8      	ldr	r3, [pc, #672]	; (8007de0 <_dtoa_r+0x2c8>)
 8007b40:	48a8      	ldr	r0, [pc, #672]	; (8007de4 <_dtoa_r+0x2cc>)
 8007b42:	f002 f8b3 	bl	8009cac <__assert_func>
 8007b46:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b4a:	6004      	str	r4, [r0, #0]
 8007b4c:	60c4      	str	r4, [r0, #12]
 8007b4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b50:	6819      	ldr	r1, [r3, #0]
 8007b52:	b151      	cbz	r1, 8007b6a <_dtoa_r+0x52>
 8007b54:	685a      	ldr	r2, [r3, #4]
 8007b56:	2301      	movs	r3, #1
 8007b58:	4093      	lsls	r3, r2
 8007b5a:	604a      	str	r2, [r1, #4]
 8007b5c:	608b      	str	r3, [r1, #8]
 8007b5e:	4628      	mov	r0, r5
 8007b60:	f001 f9a8 	bl	8008eb4 <_Bfree>
 8007b64:	2200      	movs	r2, #0
 8007b66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b68:	601a      	str	r2, [r3, #0]
 8007b6a:	1e3b      	subs	r3, r7, #0
 8007b6c:	bfaf      	iteee	ge
 8007b6e:	2300      	movge	r3, #0
 8007b70:	2201      	movlt	r2, #1
 8007b72:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007b76:	9305      	strlt	r3, [sp, #20]
 8007b78:	bfa8      	it	ge
 8007b7a:	f8c8 3000 	strge.w	r3, [r8]
 8007b7e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007b82:	4b99      	ldr	r3, [pc, #612]	; (8007de8 <_dtoa_r+0x2d0>)
 8007b84:	bfb8      	it	lt
 8007b86:	f8c8 2000 	strlt.w	r2, [r8]
 8007b8a:	ea33 0309 	bics.w	r3, r3, r9
 8007b8e:	d119      	bne.n	8007bc4 <_dtoa_r+0xac>
 8007b90:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b94:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007b96:	6013      	str	r3, [r2, #0]
 8007b98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b9c:	4333      	orrs	r3, r6
 8007b9e:	f000 857f 	beq.w	80086a0 <_dtoa_r+0xb88>
 8007ba2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ba4:	b953      	cbnz	r3, 8007bbc <_dtoa_r+0xa4>
 8007ba6:	4b91      	ldr	r3, [pc, #580]	; (8007dec <_dtoa_r+0x2d4>)
 8007ba8:	e022      	b.n	8007bf0 <_dtoa_r+0xd8>
 8007baa:	4b91      	ldr	r3, [pc, #580]	; (8007df0 <_dtoa_r+0x2d8>)
 8007bac:	9303      	str	r3, [sp, #12]
 8007bae:	3308      	adds	r3, #8
 8007bb0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007bb2:	6013      	str	r3, [r2, #0]
 8007bb4:	9803      	ldr	r0, [sp, #12]
 8007bb6:	b019      	add	sp, #100	; 0x64
 8007bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bbc:	4b8b      	ldr	r3, [pc, #556]	; (8007dec <_dtoa_r+0x2d4>)
 8007bbe:	9303      	str	r3, [sp, #12]
 8007bc0:	3303      	adds	r3, #3
 8007bc2:	e7f5      	b.n	8007bb0 <_dtoa_r+0x98>
 8007bc4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007bc8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007bcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	f7f8 fee8 	bl	80009a8 <__aeabi_dcmpeq>
 8007bd8:	4680      	mov	r8, r0
 8007bda:	b158      	cbz	r0, 8007bf4 <_dtoa_r+0xdc>
 8007bdc:	2301      	movs	r3, #1
 8007bde:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007be0:	6013      	str	r3, [r2, #0]
 8007be2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f000 8558 	beq.w	800869a <_dtoa_r+0xb82>
 8007bea:	4882      	ldr	r0, [pc, #520]	; (8007df4 <_dtoa_r+0x2dc>)
 8007bec:	6018      	str	r0, [r3, #0]
 8007bee:	1e43      	subs	r3, r0, #1
 8007bf0:	9303      	str	r3, [sp, #12]
 8007bf2:	e7df      	b.n	8007bb4 <_dtoa_r+0x9c>
 8007bf4:	ab16      	add	r3, sp, #88	; 0x58
 8007bf6:	9301      	str	r3, [sp, #4]
 8007bf8:	ab17      	add	r3, sp, #92	; 0x5c
 8007bfa:	9300      	str	r3, [sp, #0]
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007c02:	f001 fd01 	bl	8009608 <__d2b>
 8007c06:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007c0a:	4683      	mov	fp, r0
 8007c0c:	2c00      	cmp	r4, #0
 8007c0e:	d07f      	beq.n	8007d10 <_dtoa_r+0x1f8>
 8007c10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c16:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007c1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c1e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007c22:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007c26:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	4b72      	ldr	r3, [pc, #456]	; (8007df8 <_dtoa_r+0x2e0>)
 8007c2e:	f7f8 fa9b 	bl	8000168 <__aeabi_dsub>
 8007c32:	a365      	add	r3, pc, #404	; (adr r3, 8007dc8 <_dtoa_r+0x2b0>)
 8007c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c38:	f7f8 fc4e 	bl	80004d8 <__aeabi_dmul>
 8007c3c:	a364      	add	r3, pc, #400	; (adr r3, 8007dd0 <_dtoa_r+0x2b8>)
 8007c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c42:	f7f8 fa93 	bl	800016c <__adddf3>
 8007c46:	4606      	mov	r6, r0
 8007c48:	4620      	mov	r0, r4
 8007c4a:	460f      	mov	r7, r1
 8007c4c:	f7f8 fbda 	bl	8000404 <__aeabi_i2d>
 8007c50:	a361      	add	r3, pc, #388	; (adr r3, 8007dd8 <_dtoa_r+0x2c0>)
 8007c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c56:	f7f8 fc3f 	bl	80004d8 <__aeabi_dmul>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	4630      	mov	r0, r6
 8007c60:	4639      	mov	r1, r7
 8007c62:	f7f8 fa83 	bl	800016c <__adddf3>
 8007c66:	4606      	mov	r6, r0
 8007c68:	460f      	mov	r7, r1
 8007c6a:	f7f8 fee5 	bl	8000a38 <__aeabi_d2iz>
 8007c6e:	2200      	movs	r2, #0
 8007c70:	4682      	mov	sl, r0
 8007c72:	2300      	movs	r3, #0
 8007c74:	4630      	mov	r0, r6
 8007c76:	4639      	mov	r1, r7
 8007c78:	f7f8 fea0 	bl	80009bc <__aeabi_dcmplt>
 8007c7c:	b148      	cbz	r0, 8007c92 <_dtoa_r+0x17a>
 8007c7e:	4650      	mov	r0, sl
 8007c80:	f7f8 fbc0 	bl	8000404 <__aeabi_i2d>
 8007c84:	4632      	mov	r2, r6
 8007c86:	463b      	mov	r3, r7
 8007c88:	f7f8 fe8e 	bl	80009a8 <__aeabi_dcmpeq>
 8007c8c:	b908      	cbnz	r0, 8007c92 <_dtoa_r+0x17a>
 8007c8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c92:	f1ba 0f16 	cmp.w	sl, #22
 8007c96:	d858      	bhi.n	8007d4a <_dtoa_r+0x232>
 8007c98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c9c:	4b57      	ldr	r3, [pc, #348]	; (8007dfc <_dtoa_r+0x2e4>)
 8007c9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca6:	f7f8 fe89 	bl	80009bc <__aeabi_dcmplt>
 8007caa:	2800      	cmp	r0, #0
 8007cac:	d04f      	beq.n	8007d4e <_dtoa_r+0x236>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cb6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007cb8:	1b1c      	subs	r4, r3, r4
 8007cba:	1e63      	subs	r3, r4, #1
 8007cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8007cbe:	bf49      	itett	mi
 8007cc0:	f1c4 0301 	rsbmi	r3, r4, #1
 8007cc4:	2300      	movpl	r3, #0
 8007cc6:	9306      	strmi	r3, [sp, #24]
 8007cc8:	2300      	movmi	r3, #0
 8007cca:	bf54      	ite	pl
 8007ccc:	9306      	strpl	r3, [sp, #24]
 8007cce:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007cd0:	f1ba 0f00 	cmp.w	sl, #0
 8007cd4:	db3d      	blt.n	8007d52 <_dtoa_r+0x23a>
 8007cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cd8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007cdc:	4453      	add	r3, sl
 8007cde:	9309      	str	r3, [sp, #36]	; 0x24
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	930a      	str	r3, [sp, #40]	; 0x28
 8007ce4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ce6:	2b09      	cmp	r3, #9
 8007ce8:	f200 808c 	bhi.w	8007e04 <_dtoa_r+0x2ec>
 8007cec:	2b05      	cmp	r3, #5
 8007cee:	bfc4      	itt	gt
 8007cf0:	3b04      	subgt	r3, #4
 8007cf2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007cf4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007cf6:	bfc8      	it	gt
 8007cf8:	2400      	movgt	r4, #0
 8007cfa:	f1a3 0302 	sub.w	r3, r3, #2
 8007cfe:	bfd8      	it	le
 8007d00:	2401      	movle	r4, #1
 8007d02:	2b03      	cmp	r3, #3
 8007d04:	f200 808a 	bhi.w	8007e1c <_dtoa_r+0x304>
 8007d08:	e8df f003 	tbb	[pc, r3]
 8007d0c:	5b4d4f2d 	.word	0x5b4d4f2d
 8007d10:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007d14:	441c      	add	r4, r3
 8007d16:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007d1a:	2b20      	cmp	r3, #32
 8007d1c:	bfc3      	ittte	gt
 8007d1e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007d22:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007d26:	fa09 f303 	lslgt.w	r3, r9, r3
 8007d2a:	f1c3 0320 	rsble	r3, r3, #32
 8007d2e:	bfc6      	itte	gt
 8007d30:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007d34:	4318      	orrgt	r0, r3
 8007d36:	fa06 f003 	lslle.w	r0, r6, r3
 8007d3a:	f7f8 fb53 	bl	80003e4 <__aeabi_ui2d>
 8007d3e:	2301      	movs	r3, #1
 8007d40:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007d44:	3c01      	subs	r4, #1
 8007d46:	9313      	str	r3, [sp, #76]	; 0x4c
 8007d48:	e76f      	b.n	8007c2a <_dtoa_r+0x112>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e7b2      	b.n	8007cb4 <_dtoa_r+0x19c>
 8007d4e:	900f      	str	r0, [sp, #60]	; 0x3c
 8007d50:	e7b1      	b.n	8007cb6 <_dtoa_r+0x19e>
 8007d52:	9b06      	ldr	r3, [sp, #24]
 8007d54:	eba3 030a 	sub.w	r3, r3, sl
 8007d58:	9306      	str	r3, [sp, #24]
 8007d5a:	f1ca 0300 	rsb	r3, sl, #0
 8007d5e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d60:	2300      	movs	r3, #0
 8007d62:	930e      	str	r3, [sp, #56]	; 0x38
 8007d64:	e7be      	b.n	8007ce4 <_dtoa_r+0x1cc>
 8007d66:	2300      	movs	r3, #0
 8007d68:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	dc58      	bgt.n	8007e22 <_dtoa_r+0x30a>
 8007d70:	f04f 0901 	mov.w	r9, #1
 8007d74:	464b      	mov	r3, r9
 8007d76:	f8cd 9020 	str.w	r9, [sp, #32]
 8007d7a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007d7e:	2200      	movs	r2, #0
 8007d80:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007d82:	6042      	str	r2, [r0, #4]
 8007d84:	2204      	movs	r2, #4
 8007d86:	f102 0614 	add.w	r6, r2, #20
 8007d8a:	429e      	cmp	r6, r3
 8007d8c:	6841      	ldr	r1, [r0, #4]
 8007d8e:	d94e      	bls.n	8007e2e <_dtoa_r+0x316>
 8007d90:	4628      	mov	r0, r5
 8007d92:	f001 f84f 	bl	8008e34 <_Balloc>
 8007d96:	9003      	str	r0, [sp, #12]
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	d14c      	bne.n	8007e36 <_dtoa_r+0x31e>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007da2:	4b17      	ldr	r3, [pc, #92]	; (8007e00 <_dtoa_r+0x2e8>)
 8007da4:	e6cc      	b.n	8007b40 <_dtoa_r+0x28>
 8007da6:	2301      	movs	r3, #1
 8007da8:	e7de      	b.n	8007d68 <_dtoa_r+0x250>
 8007daa:	2300      	movs	r3, #0
 8007dac:	930b      	str	r3, [sp, #44]	; 0x2c
 8007dae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007db0:	eb0a 0903 	add.w	r9, sl, r3
 8007db4:	f109 0301 	add.w	r3, r9, #1
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	9308      	str	r3, [sp, #32]
 8007dbc:	bfb8      	it	lt
 8007dbe:	2301      	movlt	r3, #1
 8007dc0:	e7dd      	b.n	8007d7e <_dtoa_r+0x266>
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e7f2      	b.n	8007dac <_dtoa_r+0x294>
 8007dc6:	bf00      	nop
 8007dc8:	636f4361 	.word	0x636f4361
 8007dcc:	3fd287a7 	.word	0x3fd287a7
 8007dd0:	8b60c8b3 	.word	0x8b60c8b3
 8007dd4:	3fc68a28 	.word	0x3fc68a28
 8007dd8:	509f79fb 	.word	0x509f79fb
 8007ddc:	3fd34413 	.word	0x3fd34413
 8007de0:	0800aa7e 	.word	0x0800aa7e
 8007de4:	0800aa95 	.word	0x0800aa95
 8007de8:	7ff00000 	.word	0x7ff00000
 8007dec:	0800aa7a 	.word	0x0800aa7a
 8007df0:	0800aa71 	.word	0x0800aa71
 8007df4:	0800a8f9 	.word	0x0800a8f9
 8007df8:	3ff80000 	.word	0x3ff80000
 8007dfc:	0800ac00 	.word	0x0800ac00
 8007e00:	0800aaf0 	.word	0x0800aaf0
 8007e04:	2401      	movs	r4, #1
 8007e06:	2300      	movs	r3, #0
 8007e08:	940b      	str	r4, [sp, #44]	; 0x2c
 8007e0a:	9322      	str	r3, [sp, #136]	; 0x88
 8007e0c:	f04f 39ff 	mov.w	r9, #4294967295
 8007e10:	2200      	movs	r2, #0
 8007e12:	2312      	movs	r3, #18
 8007e14:	f8cd 9020 	str.w	r9, [sp, #32]
 8007e18:	9223      	str	r2, [sp, #140]	; 0x8c
 8007e1a:	e7b0      	b.n	8007d7e <_dtoa_r+0x266>
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e20:	e7f4      	b.n	8007e0c <_dtoa_r+0x2f4>
 8007e22:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8007e26:	464b      	mov	r3, r9
 8007e28:	f8cd 9020 	str.w	r9, [sp, #32]
 8007e2c:	e7a7      	b.n	8007d7e <_dtoa_r+0x266>
 8007e2e:	3101      	adds	r1, #1
 8007e30:	6041      	str	r1, [r0, #4]
 8007e32:	0052      	lsls	r2, r2, #1
 8007e34:	e7a7      	b.n	8007d86 <_dtoa_r+0x26e>
 8007e36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007e38:	9a03      	ldr	r2, [sp, #12]
 8007e3a:	601a      	str	r2, [r3, #0]
 8007e3c:	9b08      	ldr	r3, [sp, #32]
 8007e3e:	2b0e      	cmp	r3, #14
 8007e40:	f200 80a8 	bhi.w	8007f94 <_dtoa_r+0x47c>
 8007e44:	2c00      	cmp	r4, #0
 8007e46:	f000 80a5 	beq.w	8007f94 <_dtoa_r+0x47c>
 8007e4a:	f1ba 0f00 	cmp.w	sl, #0
 8007e4e:	dd34      	ble.n	8007eba <_dtoa_r+0x3a2>
 8007e50:	4a9a      	ldr	r2, [pc, #616]	; (80080bc <_dtoa_r+0x5a4>)
 8007e52:	f00a 030f 	and.w	r3, sl, #15
 8007e56:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007e5a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007e5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007e62:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007e66:	ea4f 142a 	mov.w	r4, sl, asr #4
 8007e6a:	d016      	beq.n	8007e9a <_dtoa_r+0x382>
 8007e6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e70:	4b93      	ldr	r3, [pc, #588]	; (80080c0 <_dtoa_r+0x5a8>)
 8007e72:	2703      	movs	r7, #3
 8007e74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e78:	f7f8 fc58 	bl	800072c <__aeabi_ddiv>
 8007e7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e80:	f004 040f 	and.w	r4, r4, #15
 8007e84:	4e8e      	ldr	r6, [pc, #568]	; (80080c0 <_dtoa_r+0x5a8>)
 8007e86:	b954      	cbnz	r4, 8007e9e <_dtoa_r+0x386>
 8007e88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007e8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e90:	f7f8 fc4c 	bl	800072c <__aeabi_ddiv>
 8007e94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e98:	e029      	b.n	8007eee <_dtoa_r+0x3d6>
 8007e9a:	2702      	movs	r7, #2
 8007e9c:	e7f2      	b.n	8007e84 <_dtoa_r+0x36c>
 8007e9e:	07e1      	lsls	r1, r4, #31
 8007ea0:	d508      	bpl.n	8007eb4 <_dtoa_r+0x39c>
 8007ea2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ea6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007eaa:	f7f8 fb15 	bl	80004d8 <__aeabi_dmul>
 8007eae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007eb2:	3701      	adds	r7, #1
 8007eb4:	1064      	asrs	r4, r4, #1
 8007eb6:	3608      	adds	r6, #8
 8007eb8:	e7e5      	b.n	8007e86 <_dtoa_r+0x36e>
 8007eba:	f000 80a5 	beq.w	8008008 <_dtoa_r+0x4f0>
 8007ebe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ec2:	f1ca 0400 	rsb	r4, sl, #0
 8007ec6:	4b7d      	ldr	r3, [pc, #500]	; (80080bc <_dtoa_r+0x5a4>)
 8007ec8:	f004 020f 	and.w	r2, r4, #15
 8007ecc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed4:	f7f8 fb00 	bl	80004d8 <__aeabi_dmul>
 8007ed8:	2702      	movs	r7, #2
 8007eda:	2300      	movs	r3, #0
 8007edc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ee0:	4e77      	ldr	r6, [pc, #476]	; (80080c0 <_dtoa_r+0x5a8>)
 8007ee2:	1124      	asrs	r4, r4, #4
 8007ee4:	2c00      	cmp	r4, #0
 8007ee6:	f040 8084 	bne.w	8007ff2 <_dtoa_r+0x4da>
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1d2      	bne.n	8007e94 <_dtoa_r+0x37c>
 8007eee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f000 808b 	beq.w	800800c <_dtoa_r+0x4f4>
 8007ef6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007efa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007efe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007f02:	2200      	movs	r2, #0
 8007f04:	4b6f      	ldr	r3, [pc, #444]	; (80080c4 <_dtoa_r+0x5ac>)
 8007f06:	f7f8 fd59 	bl	80009bc <__aeabi_dcmplt>
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	d07e      	beq.n	800800c <_dtoa_r+0x4f4>
 8007f0e:	9b08      	ldr	r3, [sp, #32]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d07b      	beq.n	800800c <_dtoa_r+0x4f4>
 8007f14:	f1b9 0f00 	cmp.w	r9, #0
 8007f18:	dd38      	ble.n	8007f8c <_dtoa_r+0x474>
 8007f1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007f1e:	2200      	movs	r2, #0
 8007f20:	4b69      	ldr	r3, [pc, #420]	; (80080c8 <_dtoa_r+0x5b0>)
 8007f22:	f7f8 fad9 	bl	80004d8 <__aeabi_dmul>
 8007f26:	464c      	mov	r4, r9
 8007f28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f2c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007f30:	3701      	adds	r7, #1
 8007f32:	4638      	mov	r0, r7
 8007f34:	f7f8 fa66 	bl	8000404 <__aeabi_i2d>
 8007f38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f3c:	f7f8 facc 	bl	80004d8 <__aeabi_dmul>
 8007f40:	2200      	movs	r2, #0
 8007f42:	4b62      	ldr	r3, [pc, #392]	; (80080cc <_dtoa_r+0x5b4>)
 8007f44:	f7f8 f912 	bl	800016c <__adddf3>
 8007f48:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007f4c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007f50:	9611      	str	r6, [sp, #68]	; 0x44
 8007f52:	2c00      	cmp	r4, #0
 8007f54:	d15d      	bne.n	8008012 <_dtoa_r+0x4fa>
 8007f56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	4b5c      	ldr	r3, [pc, #368]	; (80080d0 <_dtoa_r+0x5b8>)
 8007f5e:	f7f8 f903 	bl	8000168 <__aeabi_dsub>
 8007f62:	4602      	mov	r2, r0
 8007f64:	460b      	mov	r3, r1
 8007f66:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f6a:	4633      	mov	r3, r6
 8007f6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f6e:	f7f8 fd43 	bl	80009f8 <__aeabi_dcmpgt>
 8007f72:	2800      	cmp	r0, #0
 8007f74:	f040 829c 	bne.w	80084b0 <_dtoa_r+0x998>
 8007f78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f7e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007f82:	f7f8 fd1b 	bl	80009bc <__aeabi_dcmplt>
 8007f86:	2800      	cmp	r0, #0
 8007f88:	f040 8290 	bne.w	80084ac <_dtoa_r+0x994>
 8007f8c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007f90:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007f94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	f2c0 8152 	blt.w	8008240 <_dtoa_r+0x728>
 8007f9c:	f1ba 0f0e 	cmp.w	sl, #14
 8007fa0:	f300 814e 	bgt.w	8008240 <_dtoa_r+0x728>
 8007fa4:	4b45      	ldr	r3, [pc, #276]	; (80080bc <_dtoa_r+0x5a4>)
 8007fa6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007faa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007fae:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007fb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f280 80db 	bge.w	8008170 <_dtoa_r+0x658>
 8007fba:	9b08      	ldr	r3, [sp, #32]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f300 80d7 	bgt.w	8008170 <_dtoa_r+0x658>
 8007fc2:	f040 8272 	bne.w	80084aa <_dtoa_r+0x992>
 8007fc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	4b40      	ldr	r3, [pc, #256]	; (80080d0 <_dtoa_r+0x5b8>)
 8007fce:	f7f8 fa83 	bl	80004d8 <__aeabi_dmul>
 8007fd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fd6:	f7f8 fd05 	bl	80009e4 <__aeabi_dcmpge>
 8007fda:	9c08      	ldr	r4, [sp, #32]
 8007fdc:	4626      	mov	r6, r4
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	f040 8248 	bne.w	8008474 <_dtoa_r+0x95c>
 8007fe4:	2331      	movs	r3, #49	; 0x31
 8007fe6:	9f03      	ldr	r7, [sp, #12]
 8007fe8:	f10a 0a01 	add.w	sl, sl, #1
 8007fec:	f807 3b01 	strb.w	r3, [r7], #1
 8007ff0:	e244      	b.n	800847c <_dtoa_r+0x964>
 8007ff2:	07e2      	lsls	r2, r4, #31
 8007ff4:	d505      	bpl.n	8008002 <_dtoa_r+0x4ea>
 8007ff6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ffa:	f7f8 fa6d 	bl	80004d8 <__aeabi_dmul>
 8007ffe:	2301      	movs	r3, #1
 8008000:	3701      	adds	r7, #1
 8008002:	1064      	asrs	r4, r4, #1
 8008004:	3608      	adds	r6, #8
 8008006:	e76d      	b.n	8007ee4 <_dtoa_r+0x3cc>
 8008008:	2702      	movs	r7, #2
 800800a:	e770      	b.n	8007eee <_dtoa_r+0x3d6>
 800800c:	46d0      	mov	r8, sl
 800800e:	9c08      	ldr	r4, [sp, #32]
 8008010:	e78f      	b.n	8007f32 <_dtoa_r+0x41a>
 8008012:	9903      	ldr	r1, [sp, #12]
 8008014:	4b29      	ldr	r3, [pc, #164]	; (80080bc <_dtoa_r+0x5a4>)
 8008016:	4421      	add	r1, r4
 8008018:	9112      	str	r1, [sp, #72]	; 0x48
 800801a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800801c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008020:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008024:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008028:	2900      	cmp	r1, #0
 800802a:	d055      	beq.n	80080d8 <_dtoa_r+0x5c0>
 800802c:	2000      	movs	r0, #0
 800802e:	4929      	ldr	r1, [pc, #164]	; (80080d4 <_dtoa_r+0x5bc>)
 8008030:	f7f8 fb7c 	bl	800072c <__aeabi_ddiv>
 8008034:	463b      	mov	r3, r7
 8008036:	4632      	mov	r2, r6
 8008038:	f7f8 f896 	bl	8000168 <__aeabi_dsub>
 800803c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008040:	9f03      	ldr	r7, [sp, #12]
 8008042:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008046:	f7f8 fcf7 	bl	8000a38 <__aeabi_d2iz>
 800804a:	4604      	mov	r4, r0
 800804c:	f7f8 f9da 	bl	8000404 <__aeabi_i2d>
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008058:	f7f8 f886 	bl	8000168 <__aeabi_dsub>
 800805c:	4602      	mov	r2, r0
 800805e:	460b      	mov	r3, r1
 8008060:	3430      	adds	r4, #48	; 0x30
 8008062:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008066:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800806a:	f807 4b01 	strb.w	r4, [r7], #1
 800806e:	f7f8 fca5 	bl	80009bc <__aeabi_dcmplt>
 8008072:	2800      	cmp	r0, #0
 8008074:	d174      	bne.n	8008160 <_dtoa_r+0x648>
 8008076:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800807a:	2000      	movs	r0, #0
 800807c:	4911      	ldr	r1, [pc, #68]	; (80080c4 <_dtoa_r+0x5ac>)
 800807e:	f7f8 f873 	bl	8000168 <__aeabi_dsub>
 8008082:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008086:	f7f8 fc99 	bl	80009bc <__aeabi_dcmplt>
 800808a:	2800      	cmp	r0, #0
 800808c:	f040 80b7 	bne.w	80081fe <_dtoa_r+0x6e6>
 8008090:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008092:	429f      	cmp	r7, r3
 8008094:	f43f af7a 	beq.w	8007f8c <_dtoa_r+0x474>
 8008098:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800809c:	2200      	movs	r2, #0
 800809e:	4b0a      	ldr	r3, [pc, #40]	; (80080c8 <_dtoa_r+0x5b0>)
 80080a0:	f7f8 fa1a 	bl	80004d8 <__aeabi_dmul>
 80080a4:	2200      	movs	r2, #0
 80080a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80080aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080ae:	4b06      	ldr	r3, [pc, #24]	; (80080c8 <_dtoa_r+0x5b0>)
 80080b0:	f7f8 fa12 	bl	80004d8 <__aeabi_dmul>
 80080b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080b8:	e7c3      	b.n	8008042 <_dtoa_r+0x52a>
 80080ba:	bf00      	nop
 80080bc:	0800ac00 	.word	0x0800ac00
 80080c0:	0800abd8 	.word	0x0800abd8
 80080c4:	3ff00000 	.word	0x3ff00000
 80080c8:	40240000 	.word	0x40240000
 80080cc:	401c0000 	.word	0x401c0000
 80080d0:	40140000 	.word	0x40140000
 80080d4:	3fe00000 	.word	0x3fe00000
 80080d8:	4630      	mov	r0, r6
 80080da:	4639      	mov	r1, r7
 80080dc:	f7f8 f9fc 	bl	80004d8 <__aeabi_dmul>
 80080e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80080e6:	9c03      	ldr	r4, [sp, #12]
 80080e8:	9314      	str	r3, [sp, #80]	; 0x50
 80080ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080ee:	f7f8 fca3 	bl	8000a38 <__aeabi_d2iz>
 80080f2:	9015      	str	r0, [sp, #84]	; 0x54
 80080f4:	f7f8 f986 	bl	8000404 <__aeabi_i2d>
 80080f8:	4602      	mov	r2, r0
 80080fa:	460b      	mov	r3, r1
 80080fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008100:	f7f8 f832 	bl	8000168 <__aeabi_dsub>
 8008104:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008106:	4606      	mov	r6, r0
 8008108:	3330      	adds	r3, #48	; 0x30
 800810a:	f804 3b01 	strb.w	r3, [r4], #1
 800810e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008110:	460f      	mov	r7, r1
 8008112:	429c      	cmp	r4, r3
 8008114:	f04f 0200 	mov.w	r2, #0
 8008118:	d124      	bne.n	8008164 <_dtoa_r+0x64c>
 800811a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800811e:	4bb0      	ldr	r3, [pc, #704]	; (80083e0 <_dtoa_r+0x8c8>)
 8008120:	f7f8 f824 	bl	800016c <__adddf3>
 8008124:	4602      	mov	r2, r0
 8008126:	460b      	mov	r3, r1
 8008128:	4630      	mov	r0, r6
 800812a:	4639      	mov	r1, r7
 800812c:	f7f8 fc64 	bl	80009f8 <__aeabi_dcmpgt>
 8008130:	2800      	cmp	r0, #0
 8008132:	d163      	bne.n	80081fc <_dtoa_r+0x6e4>
 8008134:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008138:	2000      	movs	r0, #0
 800813a:	49a9      	ldr	r1, [pc, #676]	; (80083e0 <_dtoa_r+0x8c8>)
 800813c:	f7f8 f814 	bl	8000168 <__aeabi_dsub>
 8008140:	4602      	mov	r2, r0
 8008142:	460b      	mov	r3, r1
 8008144:	4630      	mov	r0, r6
 8008146:	4639      	mov	r1, r7
 8008148:	f7f8 fc38 	bl	80009bc <__aeabi_dcmplt>
 800814c:	2800      	cmp	r0, #0
 800814e:	f43f af1d 	beq.w	8007f8c <_dtoa_r+0x474>
 8008152:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008154:	1e7b      	subs	r3, r7, #1
 8008156:	9314      	str	r3, [sp, #80]	; 0x50
 8008158:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800815c:	2b30      	cmp	r3, #48	; 0x30
 800815e:	d0f8      	beq.n	8008152 <_dtoa_r+0x63a>
 8008160:	46c2      	mov	sl, r8
 8008162:	e03b      	b.n	80081dc <_dtoa_r+0x6c4>
 8008164:	4b9f      	ldr	r3, [pc, #636]	; (80083e4 <_dtoa_r+0x8cc>)
 8008166:	f7f8 f9b7 	bl	80004d8 <__aeabi_dmul>
 800816a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800816e:	e7bc      	b.n	80080ea <_dtoa_r+0x5d2>
 8008170:	9f03      	ldr	r7, [sp, #12]
 8008172:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008176:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800817a:	4640      	mov	r0, r8
 800817c:	4649      	mov	r1, r9
 800817e:	f7f8 fad5 	bl	800072c <__aeabi_ddiv>
 8008182:	f7f8 fc59 	bl	8000a38 <__aeabi_d2iz>
 8008186:	4604      	mov	r4, r0
 8008188:	f7f8 f93c 	bl	8000404 <__aeabi_i2d>
 800818c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008190:	f7f8 f9a2 	bl	80004d8 <__aeabi_dmul>
 8008194:	4602      	mov	r2, r0
 8008196:	460b      	mov	r3, r1
 8008198:	4640      	mov	r0, r8
 800819a:	4649      	mov	r1, r9
 800819c:	f7f7 ffe4 	bl	8000168 <__aeabi_dsub>
 80081a0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80081a4:	f807 6b01 	strb.w	r6, [r7], #1
 80081a8:	9e03      	ldr	r6, [sp, #12]
 80081aa:	f8dd c020 	ldr.w	ip, [sp, #32]
 80081ae:	1bbe      	subs	r6, r7, r6
 80081b0:	45b4      	cmp	ip, r6
 80081b2:	4602      	mov	r2, r0
 80081b4:	460b      	mov	r3, r1
 80081b6:	d136      	bne.n	8008226 <_dtoa_r+0x70e>
 80081b8:	f7f7 ffd8 	bl	800016c <__adddf3>
 80081bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081c0:	4680      	mov	r8, r0
 80081c2:	4689      	mov	r9, r1
 80081c4:	f7f8 fc18 	bl	80009f8 <__aeabi_dcmpgt>
 80081c8:	bb58      	cbnz	r0, 8008222 <_dtoa_r+0x70a>
 80081ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081ce:	4640      	mov	r0, r8
 80081d0:	4649      	mov	r1, r9
 80081d2:	f7f8 fbe9 	bl	80009a8 <__aeabi_dcmpeq>
 80081d6:	b108      	cbz	r0, 80081dc <_dtoa_r+0x6c4>
 80081d8:	07e1      	lsls	r1, r4, #31
 80081da:	d422      	bmi.n	8008222 <_dtoa_r+0x70a>
 80081dc:	4628      	mov	r0, r5
 80081de:	4659      	mov	r1, fp
 80081e0:	f000 fe68 	bl	8008eb4 <_Bfree>
 80081e4:	2300      	movs	r3, #0
 80081e6:	703b      	strb	r3, [r7, #0]
 80081e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80081ea:	f10a 0001 	add.w	r0, sl, #1
 80081ee:	6018      	str	r0, [r3, #0]
 80081f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f43f acde 	beq.w	8007bb4 <_dtoa_r+0x9c>
 80081f8:	601f      	str	r7, [r3, #0]
 80081fa:	e4db      	b.n	8007bb4 <_dtoa_r+0x9c>
 80081fc:	4627      	mov	r7, r4
 80081fe:	463b      	mov	r3, r7
 8008200:	461f      	mov	r7, r3
 8008202:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008206:	2a39      	cmp	r2, #57	; 0x39
 8008208:	d107      	bne.n	800821a <_dtoa_r+0x702>
 800820a:	9a03      	ldr	r2, [sp, #12]
 800820c:	429a      	cmp	r2, r3
 800820e:	d1f7      	bne.n	8008200 <_dtoa_r+0x6e8>
 8008210:	2230      	movs	r2, #48	; 0x30
 8008212:	9903      	ldr	r1, [sp, #12]
 8008214:	f108 0801 	add.w	r8, r8, #1
 8008218:	700a      	strb	r2, [r1, #0]
 800821a:	781a      	ldrb	r2, [r3, #0]
 800821c:	3201      	adds	r2, #1
 800821e:	701a      	strb	r2, [r3, #0]
 8008220:	e79e      	b.n	8008160 <_dtoa_r+0x648>
 8008222:	46d0      	mov	r8, sl
 8008224:	e7eb      	b.n	80081fe <_dtoa_r+0x6e6>
 8008226:	2200      	movs	r2, #0
 8008228:	4b6e      	ldr	r3, [pc, #440]	; (80083e4 <_dtoa_r+0x8cc>)
 800822a:	f7f8 f955 	bl	80004d8 <__aeabi_dmul>
 800822e:	2200      	movs	r2, #0
 8008230:	2300      	movs	r3, #0
 8008232:	4680      	mov	r8, r0
 8008234:	4689      	mov	r9, r1
 8008236:	f7f8 fbb7 	bl	80009a8 <__aeabi_dcmpeq>
 800823a:	2800      	cmp	r0, #0
 800823c:	d09b      	beq.n	8008176 <_dtoa_r+0x65e>
 800823e:	e7cd      	b.n	80081dc <_dtoa_r+0x6c4>
 8008240:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008242:	2a00      	cmp	r2, #0
 8008244:	f000 80d0 	beq.w	80083e8 <_dtoa_r+0x8d0>
 8008248:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800824a:	2a01      	cmp	r2, #1
 800824c:	f300 80ae 	bgt.w	80083ac <_dtoa_r+0x894>
 8008250:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008252:	2a00      	cmp	r2, #0
 8008254:	f000 80a6 	beq.w	80083a4 <_dtoa_r+0x88c>
 8008258:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800825c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800825e:	9f06      	ldr	r7, [sp, #24]
 8008260:	9a06      	ldr	r2, [sp, #24]
 8008262:	2101      	movs	r1, #1
 8008264:	441a      	add	r2, r3
 8008266:	9206      	str	r2, [sp, #24]
 8008268:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800826a:	4628      	mov	r0, r5
 800826c:	441a      	add	r2, r3
 800826e:	9209      	str	r2, [sp, #36]	; 0x24
 8008270:	f000 ff20 	bl	80090b4 <__i2b>
 8008274:	4606      	mov	r6, r0
 8008276:	2f00      	cmp	r7, #0
 8008278:	dd0c      	ble.n	8008294 <_dtoa_r+0x77c>
 800827a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800827c:	2b00      	cmp	r3, #0
 800827e:	dd09      	ble.n	8008294 <_dtoa_r+0x77c>
 8008280:	42bb      	cmp	r3, r7
 8008282:	bfa8      	it	ge
 8008284:	463b      	movge	r3, r7
 8008286:	9a06      	ldr	r2, [sp, #24]
 8008288:	1aff      	subs	r7, r7, r3
 800828a:	1ad2      	subs	r2, r2, r3
 800828c:	9206      	str	r2, [sp, #24]
 800828e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	9309      	str	r3, [sp, #36]	; 0x24
 8008294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008296:	b1f3      	cbz	r3, 80082d6 <_dtoa_r+0x7be>
 8008298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800829a:	2b00      	cmp	r3, #0
 800829c:	f000 80a8 	beq.w	80083f0 <_dtoa_r+0x8d8>
 80082a0:	2c00      	cmp	r4, #0
 80082a2:	dd10      	ble.n	80082c6 <_dtoa_r+0x7ae>
 80082a4:	4631      	mov	r1, r6
 80082a6:	4622      	mov	r2, r4
 80082a8:	4628      	mov	r0, r5
 80082aa:	f000 ffc1 	bl	8009230 <__pow5mult>
 80082ae:	465a      	mov	r2, fp
 80082b0:	4601      	mov	r1, r0
 80082b2:	4606      	mov	r6, r0
 80082b4:	4628      	mov	r0, r5
 80082b6:	f000 ff13 	bl	80090e0 <__multiply>
 80082ba:	4680      	mov	r8, r0
 80082bc:	4659      	mov	r1, fp
 80082be:	4628      	mov	r0, r5
 80082c0:	f000 fdf8 	bl	8008eb4 <_Bfree>
 80082c4:	46c3      	mov	fp, r8
 80082c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082c8:	1b1a      	subs	r2, r3, r4
 80082ca:	d004      	beq.n	80082d6 <_dtoa_r+0x7be>
 80082cc:	4659      	mov	r1, fp
 80082ce:	4628      	mov	r0, r5
 80082d0:	f000 ffae 	bl	8009230 <__pow5mult>
 80082d4:	4683      	mov	fp, r0
 80082d6:	2101      	movs	r1, #1
 80082d8:	4628      	mov	r0, r5
 80082da:	f000 feeb 	bl	80090b4 <__i2b>
 80082de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082e0:	4604      	mov	r4, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f340 8086 	ble.w	80083f4 <_dtoa_r+0x8dc>
 80082e8:	461a      	mov	r2, r3
 80082ea:	4601      	mov	r1, r0
 80082ec:	4628      	mov	r0, r5
 80082ee:	f000 ff9f 	bl	8009230 <__pow5mult>
 80082f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082f4:	4604      	mov	r4, r0
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	dd7f      	ble.n	80083fa <_dtoa_r+0x8e2>
 80082fa:	f04f 0800 	mov.w	r8, #0
 80082fe:	6923      	ldr	r3, [r4, #16]
 8008300:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008304:	6918      	ldr	r0, [r3, #16]
 8008306:	f000 fe87 	bl	8009018 <__hi0bits>
 800830a:	f1c0 0020 	rsb	r0, r0, #32
 800830e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008310:	4418      	add	r0, r3
 8008312:	f010 001f 	ands.w	r0, r0, #31
 8008316:	f000 8092 	beq.w	800843e <_dtoa_r+0x926>
 800831a:	f1c0 0320 	rsb	r3, r0, #32
 800831e:	2b04      	cmp	r3, #4
 8008320:	f340 808a 	ble.w	8008438 <_dtoa_r+0x920>
 8008324:	f1c0 001c 	rsb	r0, r0, #28
 8008328:	9b06      	ldr	r3, [sp, #24]
 800832a:	4407      	add	r7, r0
 800832c:	4403      	add	r3, r0
 800832e:	9306      	str	r3, [sp, #24]
 8008330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008332:	4403      	add	r3, r0
 8008334:	9309      	str	r3, [sp, #36]	; 0x24
 8008336:	9b06      	ldr	r3, [sp, #24]
 8008338:	2b00      	cmp	r3, #0
 800833a:	dd05      	ble.n	8008348 <_dtoa_r+0x830>
 800833c:	4659      	mov	r1, fp
 800833e:	461a      	mov	r2, r3
 8008340:	4628      	mov	r0, r5
 8008342:	f000 ffcf 	bl	80092e4 <__lshift>
 8008346:	4683      	mov	fp, r0
 8008348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800834a:	2b00      	cmp	r3, #0
 800834c:	dd05      	ble.n	800835a <_dtoa_r+0x842>
 800834e:	4621      	mov	r1, r4
 8008350:	461a      	mov	r2, r3
 8008352:	4628      	mov	r0, r5
 8008354:	f000 ffc6 	bl	80092e4 <__lshift>
 8008358:	4604      	mov	r4, r0
 800835a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800835c:	2b00      	cmp	r3, #0
 800835e:	d070      	beq.n	8008442 <_dtoa_r+0x92a>
 8008360:	4621      	mov	r1, r4
 8008362:	4658      	mov	r0, fp
 8008364:	f001 f82e 	bl	80093c4 <__mcmp>
 8008368:	2800      	cmp	r0, #0
 800836a:	da6a      	bge.n	8008442 <_dtoa_r+0x92a>
 800836c:	2300      	movs	r3, #0
 800836e:	4659      	mov	r1, fp
 8008370:	220a      	movs	r2, #10
 8008372:	4628      	mov	r0, r5
 8008374:	f000 fdc0 	bl	8008ef8 <__multadd>
 8008378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800837a:	4683      	mov	fp, r0
 800837c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008380:	2b00      	cmp	r3, #0
 8008382:	f000 8194 	beq.w	80086ae <_dtoa_r+0xb96>
 8008386:	4631      	mov	r1, r6
 8008388:	2300      	movs	r3, #0
 800838a:	220a      	movs	r2, #10
 800838c:	4628      	mov	r0, r5
 800838e:	f000 fdb3 	bl	8008ef8 <__multadd>
 8008392:	f1b9 0f00 	cmp.w	r9, #0
 8008396:	4606      	mov	r6, r0
 8008398:	f300 8093 	bgt.w	80084c2 <_dtoa_r+0x9aa>
 800839c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800839e:	2b02      	cmp	r3, #2
 80083a0:	dc57      	bgt.n	8008452 <_dtoa_r+0x93a>
 80083a2:	e08e      	b.n	80084c2 <_dtoa_r+0x9aa>
 80083a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80083a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80083aa:	e757      	b.n	800825c <_dtoa_r+0x744>
 80083ac:	9b08      	ldr	r3, [sp, #32]
 80083ae:	1e5c      	subs	r4, r3, #1
 80083b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083b2:	42a3      	cmp	r3, r4
 80083b4:	bfb7      	itett	lt
 80083b6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80083b8:	1b1c      	subge	r4, r3, r4
 80083ba:	1ae2      	sublt	r2, r4, r3
 80083bc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80083be:	bfbe      	ittt	lt
 80083c0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80083c2:	189b      	addlt	r3, r3, r2
 80083c4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80083c6:	9b08      	ldr	r3, [sp, #32]
 80083c8:	bfb8      	it	lt
 80083ca:	2400      	movlt	r4, #0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	bfbb      	ittet	lt
 80083d0:	9b06      	ldrlt	r3, [sp, #24]
 80083d2:	9a08      	ldrlt	r2, [sp, #32]
 80083d4:	9f06      	ldrge	r7, [sp, #24]
 80083d6:	1a9f      	sublt	r7, r3, r2
 80083d8:	bfac      	ite	ge
 80083da:	9b08      	ldrge	r3, [sp, #32]
 80083dc:	2300      	movlt	r3, #0
 80083de:	e73f      	b.n	8008260 <_dtoa_r+0x748>
 80083e0:	3fe00000 	.word	0x3fe00000
 80083e4:	40240000 	.word	0x40240000
 80083e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80083ea:	9f06      	ldr	r7, [sp, #24]
 80083ec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80083ee:	e742      	b.n	8008276 <_dtoa_r+0x75e>
 80083f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083f2:	e76b      	b.n	80082cc <_dtoa_r+0x7b4>
 80083f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	dc19      	bgt.n	800842e <_dtoa_r+0x916>
 80083fa:	9b04      	ldr	r3, [sp, #16]
 80083fc:	b9bb      	cbnz	r3, 800842e <_dtoa_r+0x916>
 80083fe:	9b05      	ldr	r3, [sp, #20]
 8008400:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008404:	b99b      	cbnz	r3, 800842e <_dtoa_r+0x916>
 8008406:	9b05      	ldr	r3, [sp, #20]
 8008408:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800840c:	0d1b      	lsrs	r3, r3, #20
 800840e:	051b      	lsls	r3, r3, #20
 8008410:	b183      	cbz	r3, 8008434 <_dtoa_r+0x91c>
 8008412:	f04f 0801 	mov.w	r8, #1
 8008416:	9b06      	ldr	r3, [sp, #24]
 8008418:	3301      	adds	r3, #1
 800841a:	9306      	str	r3, [sp, #24]
 800841c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800841e:	3301      	adds	r3, #1
 8008420:	9309      	str	r3, [sp, #36]	; 0x24
 8008422:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008424:	2b00      	cmp	r3, #0
 8008426:	f47f af6a 	bne.w	80082fe <_dtoa_r+0x7e6>
 800842a:	2001      	movs	r0, #1
 800842c:	e76f      	b.n	800830e <_dtoa_r+0x7f6>
 800842e:	f04f 0800 	mov.w	r8, #0
 8008432:	e7f6      	b.n	8008422 <_dtoa_r+0x90a>
 8008434:	4698      	mov	r8, r3
 8008436:	e7f4      	b.n	8008422 <_dtoa_r+0x90a>
 8008438:	f43f af7d 	beq.w	8008336 <_dtoa_r+0x81e>
 800843c:	4618      	mov	r0, r3
 800843e:	301c      	adds	r0, #28
 8008440:	e772      	b.n	8008328 <_dtoa_r+0x810>
 8008442:	9b08      	ldr	r3, [sp, #32]
 8008444:	2b00      	cmp	r3, #0
 8008446:	dc36      	bgt.n	80084b6 <_dtoa_r+0x99e>
 8008448:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800844a:	2b02      	cmp	r3, #2
 800844c:	dd33      	ble.n	80084b6 <_dtoa_r+0x99e>
 800844e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008452:	f1b9 0f00 	cmp.w	r9, #0
 8008456:	d10d      	bne.n	8008474 <_dtoa_r+0x95c>
 8008458:	4621      	mov	r1, r4
 800845a:	464b      	mov	r3, r9
 800845c:	2205      	movs	r2, #5
 800845e:	4628      	mov	r0, r5
 8008460:	f000 fd4a 	bl	8008ef8 <__multadd>
 8008464:	4601      	mov	r1, r0
 8008466:	4604      	mov	r4, r0
 8008468:	4658      	mov	r0, fp
 800846a:	f000 ffab 	bl	80093c4 <__mcmp>
 800846e:	2800      	cmp	r0, #0
 8008470:	f73f adb8 	bgt.w	8007fe4 <_dtoa_r+0x4cc>
 8008474:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008476:	9f03      	ldr	r7, [sp, #12]
 8008478:	ea6f 0a03 	mvn.w	sl, r3
 800847c:	f04f 0800 	mov.w	r8, #0
 8008480:	4621      	mov	r1, r4
 8008482:	4628      	mov	r0, r5
 8008484:	f000 fd16 	bl	8008eb4 <_Bfree>
 8008488:	2e00      	cmp	r6, #0
 800848a:	f43f aea7 	beq.w	80081dc <_dtoa_r+0x6c4>
 800848e:	f1b8 0f00 	cmp.w	r8, #0
 8008492:	d005      	beq.n	80084a0 <_dtoa_r+0x988>
 8008494:	45b0      	cmp	r8, r6
 8008496:	d003      	beq.n	80084a0 <_dtoa_r+0x988>
 8008498:	4641      	mov	r1, r8
 800849a:	4628      	mov	r0, r5
 800849c:	f000 fd0a 	bl	8008eb4 <_Bfree>
 80084a0:	4631      	mov	r1, r6
 80084a2:	4628      	mov	r0, r5
 80084a4:	f000 fd06 	bl	8008eb4 <_Bfree>
 80084a8:	e698      	b.n	80081dc <_dtoa_r+0x6c4>
 80084aa:	2400      	movs	r4, #0
 80084ac:	4626      	mov	r6, r4
 80084ae:	e7e1      	b.n	8008474 <_dtoa_r+0x95c>
 80084b0:	46c2      	mov	sl, r8
 80084b2:	4626      	mov	r6, r4
 80084b4:	e596      	b.n	8007fe4 <_dtoa_r+0x4cc>
 80084b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f000 80fd 	beq.w	80086bc <_dtoa_r+0xba4>
 80084c2:	2f00      	cmp	r7, #0
 80084c4:	dd05      	ble.n	80084d2 <_dtoa_r+0x9ba>
 80084c6:	4631      	mov	r1, r6
 80084c8:	463a      	mov	r2, r7
 80084ca:	4628      	mov	r0, r5
 80084cc:	f000 ff0a 	bl	80092e4 <__lshift>
 80084d0:	4606      	mov	r6, r0
 80084d2:	f1b8 0f00 	cmp.w	r8, #0
 80084d6:	d05c      	beq.n	8008592 <_dtoa_r+0xa7a>
 80084d8:	4628      	mov	r0, r5
 80084da:	6871      	ldr	r1, [r6, #4]
 80084dc:	f000 fcaa 	bl	8008e34 <_Balloc>
 80084e0:	4607      	mov	r7, r0
 80084e2:	b928      	cbnz	r0, 80084f0 <_dtoa_r+0x9d8>
 80084e4:	4602      	mov	r2, r0
 80084e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80084ea:	4b7f      	ldr	r3, [pc, #508]	; (80086e8 <_dtoa_r+0xbd0>)
 80084ec:	f7ff bb28 	b.w	8007b40 <_dtoa_r+0x28>
 80084f0:	6932      	ldr	r2, [r6, #16]
 80084f2:	f106 010c 	add.w	r1, r6, #12
 80084f6:	3202      	adds	r2, #2
 80084f8:	0092      	lsls	r2, r2, #2
 80084fa:	300c      	adds	r0, #12
 80084fc:	f000 fc8c 	bl	8008e18 <memcpy>
 8008500:	2201      	movs	r2, #1
 8008502:	4639      	mov	r1, r7
 8008504:	4628      	mov	r0, r5
 8008506:	f000 feed 	bl	80092e4 <__lshift>
 800850a:	46b0      	mov	r8, r6
 800850c:	4606      	mov	r6, r0
 800850e:	9b03      	ldr	r3, [sp, #12]
 8008510:	3301      	adds	r3, #1
 8008512:	9308      	str	r3, [sp, #32]
 8008514:	9b03      	ldr	r3, [sp, #12]
 8008516:	444b      	add	r3, r9
 8008518:	930a      	str	r3, [sp, #40]	; 0x28
 800851a:	9b04      	ldr	r3, [sp, #16]
 800851c:	f003 0301 	and.w	r3, r3, #1
 8008520:	9309      	str	r3, [sp, #36]	; 0x24
 8008522:	9b08      	ldr	r3, [sp, #32]
 8008524:	4621      	mov	r1, r4
 8008526:	3b01      	subs	r3, #1
 8008528:	4658      	mov	r0, fp
 800852a:	9304      	str	r3, [sp, #16]
 800852c:	f7ff fa68 	bl	8007a00 <quorem>
 8008530:	4603      	mov	r3, r0
 8008532:	4641      	mov	r1, r8
 8008534:	3330      	adds	r3, #48	; 0x30
 8008536:	9006      	str	r0, [sp, #24]
 8008538:	4658      	mov	r0, fp
 800853a:	930b      	str	r3, [sp, #44]	; 0x2c
 800853c:	f000 ff42 	bl	80093c4 <__mcmp>
 8008540:	4632      	mov	r2, r6
 8008542:	4681      	mov	r9, r0
 8008544:	4621      	mov	r1, r4
 8008546:	4628      	mov	r0, r5
 8008548:	f000 ff58 	bl	80093fc <__mdiff>
 800854c:	68c2      	ldr	r2, [r0, #12]
 800854e:	4607      	mov	r7, r0
 8008550:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008552:	bb02      	cbnz	r2, 8008596 <_dtoa_r+0xa7e>
 8008554:	4601      	mov	r1, r0
 8008556:	4658      	mov	r0, fp
 8008558:	f000 ff34 	bl	80093c4 <__mcmp>
 800855c:	4602      	mov	r2, r0
 800855e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008560:	4639      	mov	r1, r7
 8008562:	4628      	mov	r0, r5
 8008564:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008568:	f000 fca4 	bl	8008eb4 <_Bfree>
 800856c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800856e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008570:	9f08      	ldr	r7, [sp, #32]
 8008572:	ea43 0102 	orr.w	r1, r3, r2
 8008576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008578:	430b      	orrs	r3, r1
 800857a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800857c:	d10d      	bne.n	800859a <_dtoa_r+0xa82>
 800857e:	2b39      	cmp	r3, #57	; 0x39
 8008580:	d029      	beq.n	80085d6 <_dtoa_r+0xabe>
 8008582:	f1b9 0f00 	cmp.w	r9, #0
 8008586:	dd01      	ble.n	800858c <_dtoa_r+0xa74>
 8008588:	9b06      	ldr	r3, [sp, #24]
 800858a:	3331      	adds	r3, #49	; 0x31
 800858c:	9a04      	ldr	r2, [sp, #16]
 800858e:	7013      	strb	r3, [r2, #0]
 8008590:	e776      	b.n	8008480 <_dtoa_r+0x968>
 8008592:	4630      	mov	r0, r6
 8008594:	e7b9      	b.n	800850a <_dtoa_r+0x9f2>
 8008596:	2201      	movs	r2, #1
 8008598:	e7e2      	b.n	8008560 <_dtoa_r+0xa48>
 800859a:	f1b9 0f00 	cmp.w	r9, #0
 800859e:	db06      	blt.n	80085ae <_dtoa_r+0xa96>
 80085a0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80085a2:	ea41 0909 	orr.w	r9, r1, r9
 80085a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085a8:	ea59 0101 	orrs.w	r1, r9, r1
 80085ac:	d120      	bne.n	80085f0 <_dtoa_r+0xad8>
 80085ae:	2a00      	cmp	r2, #0
 80085b0:	ddec      	ble.n	800858c <_dtoa_r+0xa74>
 80085b2:	4659      	mov	r1, fp
 80085b4:	2201      	movs	r2, #1
 80085b6:	4628      	mov	r0, r5
 80085b8:	9308      	str	r3, [sp, #32]
 80085ba:	f000 fe93 	bl	80092e4 <__lshift>
 80085be:	4621      	mov	r1, r4
 80085c0:	4683      	mov	fp, r0
 80085c2:	f000 feff 	bl	80093c4 <__mcmp>
 80085c6:	2800      	cmp	r0, #0
 80085c8:	9b08      	ldr	r3, [sp, #32]
 80085ca:	dc02      	bgt.n	80085d2 <_dtoa_r+0xaba>
 80085cc:	d1de      	bne.n	800858c <_dtoa_r+0xa74>
 80085ce:	07da      	lsls	r2, r3, #31
 80085d0:	d5dc      	bpl.n	800858c <_dtoa_r+0xa74>
 80085d2:	2b39      	cmp	r3, #57	; 0x39
 80085d4:	d1d8      	bne.n	8008588 <_dtoa_r+0xa70>
 80085d6:	2339      	movs	r3, #57	; 0x39
 80085d8:	9a04      	ldr	r2, [sp, #16]
 80085da:	7013      	strb	r3, [r2, #0]
 80085dc:	463b      	mov	r3, r7
 80085de:	461f      	mov	r7, r3
 80085e0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80085e4:	3b01      	subs	r3, #1
 80085e6:	2a39      	cmp	r2, #57	; 0x39
 80085e8:	d050      	beq.n	800868c <_dtoa_r+0xb74>
 80085ea:	3201      	adds	r2, #1
 80085ec:	701a      	strb	r2, [r3, #0]
 80085ee:	e747      	b.n	8008480 <_dtoa_r+0x968>
 80085f0:	2a00      	cmp	r2, #0
 80085f2:	dd03      	ble.n	80085fc <_dtoa_r+0xae4>
 80085f4:	2b39      	cmp	r3, #57	; 0x39
 80085f6:	d0ee      	beq.n	80085d6 <_dtoa_r+0xabe>
 80085f8:	3301      	adds	r3, #1
 80085fa:	e7c7      	b.n	800858c <_dtoa_r+0xa74>
 80085fc:	9a08      	ldr	r2, [sp, #32]
 80085fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008600:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008604:	428a      	cmp	r2, r1
 8008606:	d02a      	beq.n	800865e <_dtoa_r+0xb46>
 8008608:	4659      	mov	r1, fp
 800860a:	2300      	movs	r3, #0
 800860c:	220a      	movs	r2, #10
 800860e:	4628      	mov	r0, r5
 8008610:	f000 fc72 	bl	8008ef8 <__multadd>
 8008614:	45b0      	cmp	r8, r6
 8008616:	4683      	mov	fp, r0
 8008618:	f04f 0300 	mov.w	r3, #0
 800861c:	f04f 020a 	mov.w	r2, #10
 8008620:	4641      	mov	r1, r8
 8008622:	4628      	mov	r0, r5
 8008624:	d107      	bne.n	8008636 <_dtoa_r+0xb1e>
 8008626:	f000 fc67 	bl	8008ef8 <__multadd>
 800862a:	4680      	mov	r8, r0
 800862c:	4606      	mov	r6, r0
 800862e:	9b08      	ldr	r3, [sp, #32]
 8008630:	3301      	adds	r3, #1
 8008632:	9308      	str	r3, [sp, #32]
 8008634:	e775      	b.n	8008522 <_dtoa_r+0xa0a>
 8008636:	f000 fc5f 	bl	8008ef8 <__multadd>
 800863a:	4631      	mov	r1, r6
 800863c:	4680      	mov	r8, r0
 800863e:	2300      	movs	r3, #0
 8008640:	220a      	movs	r2, #10
 8008642:	4628      	mov	r0, r5
 8008644:	f000 fc58 	bl	8008ef8 <__multadd>
 8008648:	4606      	mov	r6, r0
 800864a:	e7f0      	b.n	800862e <_dtoa_r+0xb16>
 800864c:	f1b9 0f00 	cmp.w	r9, #0
 8008650:	bfcc      	ite	gt
 8008652:	464f      	movgt	r7, r9
 8008654:	2701      	movle	r7, #1
 8008656:	f04f 0800 	mov.w	r8, #0
 800865a:	9a03      	ldr	r2, [sp, #12]
 800865c:	4417      	add	r7, r2
 800865e:	4659      	mov	r1, fp
 8008660:	2201      	movs	r2, #1
 8008662:	4628      	mov	r0, r5
 8008664:	9308      	str	r3, [sp, #32]
 8008666:	f000 fe3d 	bl	80092e4 <__lshift>
 800866a:	4621      	mov	r1, r4
 800866c:	4683      	mov	fp, r0
 800866e:	f000 fea9 	bl	80093c4 <__mcmp>
 8008672:	2800      	cmp	r0, #0
 8008674:	dcb2      	bgt.n	80085dc <_dtoa_r+0xac4>
 8008676:	d102      	bne.n	800867e <_dtoa_r+0xb66>
 8008678:	9b08      	ldr	r3, [sp, #32]
 800867a:	07db      	lsls	r3, r3, #31
 800867c:	d4ae      	bmi.n	80085dc <_dtoa_r+0xac4>
 800867e:	463b      	mov	r3, r7
 8008680:	461f      	mov	r7, r3
 8008682:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008686:	2a30      	cmp	r2, #48	; 0x30
 8008688:	d0fa      	beq.n	8008680 <_dtoa_r+0xb68>
 800868a:	e6f9      	b.n	8008480 <_dtoa_r+0x968>
 800868c:	9a03      	ldr	r2, [sp, #12]
 800868e:	429a      	cmp	r2, r3
 8008690:	d1a5      	bne.n	80085de <_dtoa_r+0xac6>
 8008692:	2331      	movs	r3, #49	; 0x31
 8008694:	f10a 0a01 	add.w	sl, sl, #1
 8008698:	e779      	b.n	800858e <_dtoa_r+0xa76>
 800869a:	4b14      	ldr	r3, [pc, #80]	; (80086ec <_dtoa_r+0xbd4>)
 800869c:	f7ff baa8 	b.w	8007bf0 <_dtoa_r+0xd8>
 80086a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f47f aa81 	bne.w	8007baa <_dtoa_r+0x92>
 80086a8:	4b11      	ldr	r3, [pc, #68]	; (80086f0 <_dtoa_r+0xbd8>)
 80086aa:	f7ff baa1 	b.w	8007bf0 <_dtoa_r+0xd8>
 80086ae:	f1b9 0f00 	cmp.w	r9, #0
 80086b2:	dc03      	bgt.n	80086bc <_dtoa_r+0xba4>
 80086b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	f73f aecb 	bgt.w	8008452 <_dtoa_r+0x93a>
 80086bc:	9f03      	ldr	r7, [sp, #12]
 80086be:	4621      	mov	r1, r4
 80086c0:	4658      	mov	r0, fp
 80086c2:	f7ff f99d 	bl	8007a00 <quorem>
 80086c6:	9a03      	ldr	r2, [sp, #12]
 80086c8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80086cc:	f807 3b01 	strb.w	r3, [r7], #1
 80086d0:	1aba      	subs	r2, r7, r2
 80086d2:	4591      	cmp	r9, r2
 80086d4:	ddba      	ble.n	800864c <_dtoa_r+0xb34>
 80086d6:	4659      	mov	r1, fp
 80086d8:	2300      	movs	r3, #0
 80086da:	220a      	movs	r2, #10
 80086dc:	4628      	mov	r0, r5
 80086de:	f000 fc0b 	bl	8008ef8 <__multadd>
 80086e2:	4683      	mov	fp, r0
 80086e4:	e7eb      	b.n	80086be <_dtoa_r+0xba6>
 80086e6:	bf00      	nop
 80086e8:	0800aaf0 	.word	0x0800aaf0
 80086ec:	0800a8f8 	.word	0x0800a8f8
 80086f0:	0800aa71 	.word	0x0800aa71

080086f4 <rshift>:
 80086f4:	6903      	ldr	r3, [r0, #16]
 80086f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80086fa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80086fe:	f100 0414 	add.w	r4, r0, #20
 8008702:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008706:	dd46      	ble.n	8008796 <rshift+0xa2>
 8008708:	f011 011f 	ands.w	r1, r1, #31
 800870c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008710:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008714:	d10c      	bne.n	8008730 <rshift+0x3c>
 8008716:	4629      	mov	r1, r5
 8008718:	f100 0710 	add.w	r7, r0, #16
 800871c:	42b1      	cmp	r1, r6
 800871e:	d335      	bcc.n	800878c <rshift+0x98>
 8008720:	1a9b      	subs	r3, r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	1eea      	subs	r2, r5, #3
 8008726:	4296      	cmp	r6, r2
 8008728:	bf38      	it	cc
 800872a:	2300      	movcc	r3, #0
 800872c:	4423      	add	r3, r4
 800872e:	e015      	b.n	800875c <rshift+0x68>
 8008730:	46a1      	mov	r9, r4
 8008732:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008736:	f1c1 0820 	rsb	r8, r1, #32
 800873a:	40cf      	lsrs	r7, r1
 800873c:	f105 0e04 	add.w	lr, r5, #4
 8008740:	4576      	cmp	r6, lr
 8008742:	46f4      	mov	ip, lr
 8008744:	d816      	bhi.n	8008774 <rshift+0x80>
 8008746:	1a9a      	subs	r2, r3, r2
 8008748:	0092      	lsls	r2, r2, #2
 800874a:	3a04      	subs	r2, #4
 800874c:	3501      	adds	r5, #1
 800874e:	42ae      	cmp	r6, r5
 8008750:	bf38      	it	cc
 8008752:	2200      	movcc	r2, #0
 8008754:	18a3      	adds	r3, r4, r2
 8008756:	50a7      	str	r7, [r4, r2]
 8008758:	b107      	cbz	r7, 800875c <rshift+0x68>
 800875a:	3304      	adds	r3, #4
 800875c:	42a3      	cmp	r3, r4
 800875e:	eba3 0204 	sub.w	r2, r3, r4
 8008762:	bf08      	it	eq
 8008764:	2300      	moveq	r3, #0
 8008766:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800876a:	6102      	str	r2, [r0, #16]
 800876c:	bf08      	it	eq
 800876e:	6143      	streq	r3, [r0, #20]
 8008770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008774:	f8dc c000 	ldr.w	ip, [ip]
 8008778:	fa0c fc08 	lsl.w	ip, ip, r8
 800877c:	ea4c 0707 	orr.w	r7, ip, r7
 8008780:	f849 7b04 	str.w	r7, [r9], #4
 8008784:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008788:	40cf      	lsrs	r7, r1
 800878a:	e7d9      	b.n	8008740 <rshift+0x4c>
 800878c:	f851 cb04 	ldr.w	ip, [r1], #4
 8008790:	f847 cf04 	str.w	ip, [r7, #4]!
 8008794:	e7c2      	b.n	800871c <rshift+0x28>
 8008796:	4623      	mov	r3, r4
 8008798:	e7e0      	b.n	800875c <rshift+0x68>

0800879a <__hexdig_fun>:
 800879a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800879e:	2b09      	cmp	r3, #9
 80087a0:	d802      	bhi.n	80087a8 <__hexdig_fun+0xe>
 80087a2:	3820      	subs	r0, #32
 80087a4:	b2c0      	uxtb	r0, r0
 80087a6:	4770      	bx	lr
 80087a8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80087ac:	2b05      	cmp	r3, #5
 80087ae:	d801      	bhi.n	80087b4 <__hexdig_fun+0x1a>
 80087b0:	3847      	subs	r0, #71	; 0x47
 80087b2:	e7f7      	b.n	80087a4 <__hexdig_fun+0xa>
 80087b4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80087b8:	2b05      	cmp	r3, #5
 80087ba:	d801      	bhi.n	80087c0 <__hexdig_fun+0x26>
 80087bc:	3827      	subs	r0, #39	; 0x27
 80087be:	e7f1      	b.n	80087a4 <__hexdig_fun+0xa>
 80087c0:	2000      	movs	r0, #0
 80087c2:	4770      	bx	lr

080087c4 <__gethex>:
 80087c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c8:	b08b      	sub	sp, #44	; 0x2c
 80087ca:	9305      	str	r3, [sp, #20]
 80087cc:	4bb2      	ldr	r3, [pc, #712]	; (8008a98 <__gethex+0x2d4>)
 80087ce:	9002      	str	r0, [sp, #8]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	468b      	mov	fp, r1
 80087d4:	4618      	mov	r0, r3
 80087d6:	4690      	mov	r8, r2
 80087d8:	9303      	str	r3, [sp, #12]
 80087da:	f7f7 fcb9 	bl	8000150 <strlen>
 80087de:	4682      	mov	sl, r0
 80087e0:	9b03      	ldr	r3, [sp, #12]
 80087e2:	f8db 2000 	ldr.w	r2, [fp]
 80087e6:	4403      	add	r3, r0
 80087e8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80087ec:	9306      	str	r3, [sp, #24]
 80087ee:	1c93      	adds	r3, r2, #2
 80087f0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80087f4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80087f8:	32fe      	adds	r2, #254	; 0xfe
 80087fa:	18d1      	adds	r1, r2, r3
 80087fc:	461f      	mov	r7, r3
 80087fe:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008802:	9101      	str	r1, [sp, #4]
 8008804:	2830      	cmp	r0, #48	; 0x30
 8008806:	d0f8      	beq.n	80087fa <__gethex+0x36>
 8008808:	f7ff ffc7 	bl	800879a <__hexdig_fun>
 800880c:	4604      	mov	r4, r0
 800880e:	2800      	cmp	r0, #0
 8008810:	d13a      	bne.n	8008888 <__gethex+0xc4>
 8008812:	4652      	mov	r2, sl
 8008814:	4638      	mov	r0, r7
 8008816:	9903      	ldr	r1, [sp, #12]
 8008818:	f001 fa26 	bl	8009c68 <strncmp>
 800881c:	4605      	mov	r5, r0
 800881e:	2800      	cmp	r0, #0
 8008820:	d166      	bne.n	80088f0 <__gethex+0x12c>
 8008822:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008826:	eb07 060a 	add.w	r6, r7, sl
 800882a:	f7ff ffb6 	bl	800879a <__hexdig_fun>
 800882e:	2800      	cmp	r0, #0
 8008830:	d060      	beq.n	80088f4 <__gethex+0x130>
 8008832:	4633      	mov	r3, r6
 8008834:	7818      	ldrb	r0, [r3, #0]
 8008836:	461f      	mov	r7, r3
 8008838:	2830      	cmp	r0, #48	; 0x30
 800883a:	f103 0301 	add.w	r3, r3, #1
 800883e:	d0f9      	beq.n	8008834 <__gethex+0x70>
 8008840:	f7ff ffab 	bl	800879a <__hexdig_fun>
 8008844:	2301      	movs	r3, #1
 8008846:	fab0 f480 	clz	r4, r0
 800884a:	4635      	mov	r5, r6
 800884c:	0964      	lsrs	r4, r4, #5
 800884e:	9301      	str	r3, [sp, #4]
 8008850:	463a      	mov	r2, r7
 8008852:	4616      	mov	r6, r2
 8008854:	7830      	ldrb	r0, [r6, #0]
 8008856:	3201      	adds	r2, #1
 8008858:	f7ff ff9f 	bl	800879a <__hexdig_fun>
 800885c:	2800      	cmp	r0, #0
 800885e:	d1f8      	bne.n	8008852 <__gethex+0x8e>
 8008860:	4652      	mov	r2, sl
 8008862:	4630      	mov	r0, r6
 8008864:	9903      	ldr	r1, [sp, #12]
 8008866:	f001 f9ff 	bl	8009c68 <strncmp>
 800886a:	b980      	cbnz	r0, 800888e <__gethex+0xca>
 800886c:	b94d      	cbnz	r5, 8008882 <__gethex+0xbe>
 800886e:	eb06 050a 	add.w	r5, r6, sl
 8008872:	462a      	mov	r2, r5
 8008874:	4616      	mov	r6, r2
 8008876:	7830      	ldrb	r0, [r6, #0]
 8008878:	3201      	adds	r2, #1
 800887a:	f7ff ff8e 	bl	800879a <__hexdig_fun>
 800887e:	2800      	cmp	r0, #0
 8008880:	d1f8      	bne.n	8008874 <__gethex+0xb0>
 8008882:	1bad      	subs	r5, r5, r6
 8008884:	00ad      	lsls	r5, r5, #2
 8008886:	e004      	b.n	8008892 <__gethex+0xce>
 8008888:	2400      	movs	r4, #0
 800888a:	4625      	mov	r5, r4
 800888c:	e7e0      	b.n	8008850 <__gethex+0x8c>
 800888e:	2d00      	cmp	r5, #0
 8008890:	d1f7      	bne.n	8008882 <__gethex+0xbe>
 8008892:	7833      	ldrb	r3, [r6, #0]
 8008894:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008898:	2b50      	cmp	r3, #80	; 0x50
 800889a:	d139      	bne.n	8008910 <__gethex+0x14c>
 800889c:	7873      	ldrb	r3, [r6, #1]
 800889e:	2b2b      	cmp	r3, #43	; 0x2b
 80088a0:	d02a      	beq.n	80088f8 <__gethex+0x134>
 80088a2:	2b2d      	cmp	r3, #45	; 0x2d
 80088a4:	d02c      	beq.n	8008900 <__gethex+0x13c>
 80088a6:	f04f 0900 	mov.w	r9, #0
 80088aa:	1c71      	adds	r1, r6, #1
 80088ac:	7808      	ldrb	r0, [r1, #0]
 80088ae:	f7ff ff74 	bl	800879a <__hexdig_fun>
 80088b2:	1e43      	subs	r3, r0, #1
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b18      	cmp	r3, #24
 80088b8:	d82a      	bhi.n	8008910 <__gethex+0x14c>
 80088ba:	f1a0 0210 	sub.w	r2, r0, #16
 80088be:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80088c2:	f7ff ff6a 	bl	800879a <__hexdig_fun>
 80088c6:	1e43      	subs	r3, r0, #1
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b18      	cmp	r3, #24
 80088cc:	d91b      	bls.n	8008906 <__gethex+0x142>
 80088ce:	f1b9 0f00 	cmp.w	r9, #0
 80088d2:	d000      	beq.n	80088d6 <__gethex+0x112>
 80088d4:	4252      	negs	r2, r2
 80088d6:	4415      	add	r5, r2
 80088d8:	f8cb 1000 	str.w	r1, [fp]
 80088dc:	b1d4      	cbz	r4, 8008914 <__gethex+0x150>
 80088de:	9b01      	ldr	r3, [sp, #4]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	bf14      	ite	ne
 80088e4:	2700      	movne	r7, #0
 80088e6:	2706      	moveq	r7, #6
 80088e8:	4638      	mov	r0, r7
 80088ea:	b00b      	add	sp, #44	; 0x2c
 80088ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088f0:	463e      	mov	r6, r7
 80088f2:	4625      	mov	r5, r4
 80088f4:	2401      	movs	r4, #1
 80088f6:	e7cc      	b.n	8008892 <__gethex+0xce>
 80088f8:	f04f 0900 	mov.w	r9, #0
 80088fc:	1cb1      	adds	r1, r6, #2
 80088fe:	e7d5      	b.n	80088ac <__gethex+0xe8>
 8008900:	f04f 0901 	mov.w	r9, #1
 8008904:	e7fa      	b.n	80088fc <__gethex+0x138>
 8008906:	230a      	movs	r3, #10
 8008908:	fb03 0202 	mla	r2, r3, r2, r0
 800890c:	3a10      	subs	r2, #16
 800890e:	e7d6      	b.n	80088be <__gethex+0xfa>
 8008910:	4631      	mov	r1, r6
 8008912:	e7e1      	b.n	80088d8 <__gethex+0x114>
 8008914:	4621      	mov	r1, r4
 8008916:	1bf3      	subs	r3, r6, r7
 8008918:	3b01      	subs	r3, #1
 800891a:	2b07      	cmp	r3, #7
 800891c:	dc0a      	bgt.n	8008934 <__gethex+0x170>
 800891e:	9802      	ldr	r0, [sp, #8]
 8008920:	f000 fa88 	bl	8008e34 <_Balloc>
 8008924:	4604      	mov	r4, r0
 8008926:	b940      	cbnz	r0, 800893a <__gethex+0x176>
 8008928:	4602      	mov	r2, r0
 800892a:	21de      	movs	r1, #222	; 0xde
 800892c:	4b5b      	ldr	r3, [pc, #364]	; (8008a9c <__gethex+0x2d8>)
 800892e:	485c      	ldr	r0, [pc, #368]	; (8008aa0 <__gethex+0x2dc>)
 8008930:	f001 f9bc 	bl	8009cac <__assert_func>
 8008934:	3101      	adds	r1, #1
 8008936:	105b      	asrs	r3, r3, #1
 8008938:	e7ef      	b.n	800891a <__gethex+0x156>
 800893a:	f04f 0b00 	mov.w	fp, #0
 800893e:	f100 0914 	add.w	r9, r0, #20
 8008942:	f1ca 0301 	rsb	r3, sl, #1
 8008946:	f8cd 9010 	str.w	r9, [sp, #16]
 800894a:	f8cd b004 	str.w	fp, [sp, #4]
 800894e:	9308      	str	r3, [sp, #32]
 8008950:	42b7      	cmp	r7, r6
 8008952:	d33f      	bcc.n	80089d4 <__gethex+0x210>
 8008954:	9f04      	ldr	r7, [sp, #16]
 8008956:	9b01      	ldr	r3, [sp, #4]
 8008958:	f847 3b04 	str.w	r3, [r7], #4
 800895c:	eba7 0709 	sub.w	r7, r7, r9
 8008960:	10bf      	asrs	r7, r7, #2
 8008962:	6127      	str	r7, [r4, #16]
 8008964:	4618      	mov	r0, r3
 8008966:	f000 fb57 	bl	8009018 <__hi0bits>
 800896a:	017f      	lsls	r7, r7, #5
 800896c:	f8d8 6000 	ldr.w	r6, [r8]
 8008970:	1a3f      	subs	r7, r7, r0
 8008972:	42b7      	cmp	r7, r6
 8008974:	dd62      	ble.n	8008a3c <__gethex+0x278>
 8008976:	1bbf      	subs	r7, r7, r6
 8008978:	4639      	mov	r1, r7
 800897a:	4620      	mov	r0, r4
 800897c:	f000 fef1 	bl	8009762 <__any_on>
 8008980:	4682      	mov	sl, r0
 8008982:	b1a8      	cbz	r0, 80089b0 <__gethex+0x1ec>
 8008984:	f04f 0a01 	mov.w	sl, #1
 8008988:	1e7b      	subs	r3, r7, #1
 800898a:	1159      	asrs	r1, r3, #5
 800898c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008990:	f003 021f 	and.w	r2, r3, #31
 8008994:	fa0a f202 	lsl.w	r2, sl, r2
 8008998:	420a      	tst	r2, r1
 800899a:	d009      	beq.n	80089b0 <__gethex+0x1ec>
 800899c:	4553      	cmp	r3, sl
 800899e:	dd05      	ble.n	80089ac <__gethex+0x1e8>
 80089a0:	4620      	mov	r0, r4
 80089a2:	1eb9      	subs	r1, r7, #2
 80089a4:	f000 fedd 	bl	8009762 <__any_on>
 80089a8:	2800      	cmp	r0, #0
 80089aa:	d144      	bne.n	8008a36 <__gethex+0x272>
 80089ac:	f04f 0a02 	mov.w	sl, #2
 80089b0:	4639      	mov	r1, r7
 80089b2:	4620      	mov	r0, r4
 80089b4:	f7ff fe9e 	bl	80086f4 <rshift>
 80089b8:	443d      	add	r5, r7
 80089ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80089be:	42ab      	cmp	r3, r5
 80089c0:	da4a      	bge.n	8008a58 <__gethex+0x294>
 80089c2:	4621      	mov	r1, r4
 80089c4:	9802      	ldr	r0, [sp, #8]
 80089c6:	f000 fa75 	bl	8008eb4 <_Bfree>
 80089ca:	2300      	movs	r3, #0
 80089cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80089ce:	27a3      	movs	r7, #163	; 0xa3
 80089d0:	6013      	str	r3, [r2, #0]
 80089d2:	e789      	b.n	80088e8 <__gethex+0x124>
 80089d4:	1e73      	subs	r3, r6, #1
 80089d6:	9a06      	ldr	r2, [sp, #24]
 80089d8:	9307      	str	r3, [sp, #28]
 80089da:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80089de:	4293      	cmp	r3, r2
 80089e0:	d019      	beq.n	8008a16 <__gethex+0x252>
 80089e2:	f1bb 0f20 	cmp.w	fp, #32
 80089e6:	d107      	bne.n	80089f8 <__gethex+0x234>
 80089e8:	9b04      	ldr	r3, [sp, #16]
 80089ea:	9a01      	ldr	r2, [sp, #4]
 80089ec:	f843 2b04 	str.w	r2, [r3], #4
 80089f0:	9304      	str	r3, [sp, #16]
 80089f2:	2300      	movs	r3, #0
 80089f4:	469b      	mov	fp, r3
 80089f6:	9301      	str	r3, [sp, #4]
 80089f8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80089fc:	f7ff fecd 	bl	800879a <__hexdig_fun>
 8008a00:	9b01      	ldr	r3, [sp, #4]
 8008a02:	f000 000f 	and.w	r0, r0, #15
 8008a06:	fa00 f00b 	lsl.w	r0, r0, fp
 8008a0a:	4303      	orrs	r3, r0
 8008a0c:	9301      	str	r3, [sp, #4]
 8008a0e:	f10b 0b04 	add.w	fp, fp, #4
 8008a12:	9b07      	ldr	r3, [sp, #28]
 8008a14:	e00d      	b.n	8008a32 <__gethex+0x26e>
 8008a16:	9a08      	ldr	r2, [sp, #32]
 8008a18:	1e73      	subs	r3, r6, #1
 8008a1a:	4413      	add	r3, r2
 8008a1c:	42bb      	cmp	r3, r7
 8008a1e:	d3e0      	bcc.n	80089e2 <__gethex+0x21e>
 8008a20:	4618      	mov	r0, r3
 8008a22:	4652      	mov	r2, sl
 8008a24:	9903      	ldr	r1, [sp, #12]
 8008a26:	9309      	str	r3, [sp, #36]	; 0x24
 8008a28:	f001 f91e 	bl	8009c68 <strncmp>
 8008a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	d1d7      	bne.n	80089e2 <__gethex+0x21e>
 8008a32:	461e      	mov	r6, r3
 8008a34:	e78c      	b.n	8008950 <__gethex+0x18c>
 8008a36:	f04f 0a03 	mov.w	sl, #3
 8008a3a:	e7b9      	b.n	80089b0 <__gethex+0x1ec>
 8008a3c:	da09      	bge.n	8008a52 <__gethex+0x28e>
 8008a3e:	1bf7      	subs	r7, r6, r7
 8008a40:	4621      	mov	r1, r4
 8008a42:	463a      	mov	r2, r7
 8008a44:	9802      	ldr	r0, [sp, #8]
 8008a46:	f000 fc4d 	bl	80092e4 <__lshift>
 8008a4a:	4604      	mov	r4, r0
 8008a4c:	1bed      	subs	r5, r5, r7
 8008a4e:	f100 0914 	add.w	r9, r0, #20
 8008a52:	f04f 0a00 	mov.w	sl, #0
 8008a56:	e7b0      	b.n	80089ba <__gethex+0x1f6>
 8008a58:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008a5c:	42a8      	cmp	r0, r5
 8008a5e:	dd72      	ble.n	8008b46 <__gethex+0x382>
 8008a60:	1b45      	subs	r5, r0, r5
 8008a62:	42ae      	cmp	r6, r5
 8008a64:	dc35      	bgt.n	8008ad2 <__gethex+0x30e>
 8008a66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	d029      	beq.n	8008ac2 <__gethex+0x2fe>
 8008a6e:	2b03      	cmp	r3, #3
 8008a70:	d02b      	beq.n	8008aca <__gethex+0x306>
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d11c      	bne.n	8008ab0 <__gethex+0x2ec>
 8008a76:	42ae      	cmp	r6, r5
 8008a78:	d11a      	bne.n	8008ab0 <__gethex+0x2ec>
 8008a7a:	2e01      	cmp	r6, #1
 8008a7c:	d112      	bne.n	8008aa4 <__gethex+0x2e0>
 8008a7e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008a82:	9a05      	ldr	r2, [sp, #20]
 8008a84:	2762      	movs	r7, #98	; 0x62
 8008a86:	6013      	str	r3, [r2, #0]
 8008a88:	2301      	movs	r3, #1
 8008a8a:	6123      	str	r3, [r4, #16]
 8008a8c:	f8c9 3000 	str.w	r3, [r9]
 8008a90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a92:	601c      	str	r4, [r3, #0]
 8008a94:	e728      	b.n	80088e8 <__gethex+0x124>
 8008a96:	bf00      	nop
 8008a98:	0800ab68 	.word	0x0800ab68
 8008a9c:	0800aaf0 	.word	0x0800aaf0
 8008aa0:	0800ab01 	.word	0x0800ab01
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	1e71      	subs	r1, r6, #1
 8008aa8:	f000 fe5b 	bl	8009762 <__any_on>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	d1e6      	bne.n	8008a7e <__gethex+0x2ba>
 8008ab0:	4621      	mov	r1, r4
 8008ab2:	9802      	ldr	r0, [sp, #8]
 8008ab4:	f000 f9fe 	bl	8008eb4 <_Bfree>
 8008ab8:	2300      	movs	r3, #0
 8008aba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008abc:	2750      	movs	r7, #80	; 0x50
 8008abe:	6013      	str	r3, [r2, #0]
 8008ac0:	e712      	b.n	80088e8 <__gethex+0x124>
 8008ac2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d1f3      	bne.n	8008ab0 <__gethex+0x2ec>
 8008ac8:	e7d9      	b.n	8008a7e <__gethex+0x2ba>
 8008aca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d1d6      	bne.n	8008a7e <__gethex+0x2ba>
 8008ad0:	e7ee      	b.n	8008ab0 <__gethex+0x2ec>
 8008ad2:	1e6f      	subs	r7, r5, #1
 8008ad4:	f1ba 0f00 	cmp.w	sl, #0
 8008ad8:	d132      	bne.n	8008b40 <__gethex+0x37c>
 8008ada:	b127      	cbz	r7, 8008ae6 <__gethex+0x322>
 8008adc:	4639      	mov	r1, r7
 8008ade:	4620      	mov	r0, r4
 8008ae0:	f000 fe3f 	bl	8009762 <__any_on>
 8008ae4:	4682      	mov	sl, r0
 8008ae6:	2101      	movs	r1, #1
 8008ae8:	117b      	asrs	r3, r7, #5
 8008aea:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008aee:	f007 071f 	and.w	r7, r7, #31
 8008af2:	fa01 f707 	lsl.w	r7, r1, r7
 8008af6:	421f      	tst	r7, r3
 8008af8:	f04f 0702 	mov.w	r7, #2
 8008afc:	4629      	mov	r1, r5
 8008afe:	4620      	mov	r0, r4
 8008b00:	bf18      	it	ne
 8008b02:	f04a 0a02 	orrne.w	sl, sl, #2
 8008b06:	1b76      	subs	r6, r6, r5
 8008b08:	f7ff fdf4 	bl	80086f4 <rshift>
 8008b0c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008b10:	f1ba 0f00 	cmp.w	sl, #0
 8008b14:	d048      	beq.n	8008ba8 <__gethex+0x3e4>
 8008b16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	d015      	beq.n	8008b4a <__gethex+0x386>
 8008b1e:	2b03      	cmp	r3, #3
 8008b20:	d017      	beq.n	8008b52 <__gethex+0x38e>
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d109      	bne.n	8008b3a <__gethex+0x376>
 8008b26:	f01a 0f02 	tst.w	sl, #2
 8008b2a:	d006      	beq.n	8008b3a <__gethex+0x376>
 8008b2c:	f8d9 0000 	ldr.w	r0, [r9]
 8008b30:	ea4a 0a00 	orr.w	sl, sl, r0
 8008b34:	f01a 0f01 	tst.w	sl, #1
 8008b38:	d10e      	bne.n	8008b58 <__gethex+0x394>
 8008b3a:	f047 0710 	orr.w	r7, r7, #16
 8008b3e:	e033      	b.n	8008ba8 <__gethex+0x3e4>
 8008b40:	f04f 0a01 	mov.w	sl, #1
 8008b44:	e7cf      	b.n	8008ae6 <__gethex+0x322>
 8008b46:	2701      	movs	r7, #1
 8008b48:	e7e2      	b.n	8008b10 <__gethex+0x34c>
 8008b4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b4c:	f1c3 0301 	rsb	r3, r3, #1
 8008b50:	9315      	str	r3, [sp, #84]	; 0x54
 8008b52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d0f0      	beq.n	8008b3a <__gethex+0x376>
 8008b58:	f04f 0c00 	mov.w	ip, #0
 8008b5c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008b60:	f104 0314 	add.w	r3, r4, #20
 8008b64:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008b68:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b72:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008b76:	d01c      	beq.n	8008bb2 <__gethex+0x3ee>
 8008b78:	3201      	adds	r2, #1
 8008b7a:	6002      	str	r2, [r0, #0]
 8008b7c:	2f02      	cmp	r7, #2
 8008b7e:	f104 0314 	add.w	r3, r4, #20
 8008b82:	d13d      	bne.n	8008c00 <__gethex+0x43c>
 8008b84:	f8d8 2000 	ldr.w	r2, [r8]
 8008b88:	3a01      	subs	r2, #1
 8008b8a:	42b2      	cmp	r2, r6
 8008b8c:	d10a      	bne.n	8008ba4 <__gethex+0x3e0>
 8008b8e:	2201      	movs	r2, #1
 8008b90:	1171      	asrs	r1, r6, #5
 8008b92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008b96:	f006 061f 	and.w	r6, r6, #31
 8008b9a:	fa02 f606 	lsl.w	r6, r2, r6
 8008b9e:	421e      	tst	r6, r3
 8008ba0:	bf18      	it	ne
 8008ba2:	4617      	movne	r7, r2
 8008ba4:	f047 0720 	orr.w	r7, r7, #32
 8008ba8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008baa:	601c      	str	r4, [r3, #0]
 8008bac:	9b05      	ldr	r3, [sp, #20]
 8008bae:	601d      	str	r5, [r3, #0]
 8008bb0:	e69a      	b.n	80088e8 <__gethex+0x124>
 8008bb2:	4299      	cmp	r1, r3
 8008bb4:	f843 cc04 	str.w	ip, [r3, #-4]
 8008bb8:	d8d8      	bhi.n	8008b6c <__gethex+0x3a8>
 8008bba:	68a3      	ldr	r3, [r4, #8]
 8008bbc:	459b      	cmp	fp, r3
 8008bbe:	db17      	blt.n	8008bf0 <__gethex+0x42c>
 8008bc0:	6861      	ldr	r1, [r4, #4]
 8008bc2:	9802      	ldr	r0, [sp, #8]
 8008bc4:	3101      	adds	r1, #1
 8008bc6:	f000 f935 	bl	8008e34 <_Balloc>
 8008bca:	4681      	mov	r9, r0
 8008bcc:	b918      	cbnz	r0, 8008bd6 <__gethex+0x412>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	2184      	movs	r1, #132	; 0x84
 8008bd2:	4b19      	ldr	r3, [pc, #100]	; (8008c38 <__gethex+0x474>)
 8008bd4:	e6ab      	b.n	800892e <__gethex+0x16a>
 8008bd6:	6922      	ldr	r2, [r4, #16]
 8008bd8:	f104 010c 	add.w	r1, r4, #12
 8008bdc:	3202      	adds	r2, #2
 8008bde:	0092      	lsls	r2, r2, #2
 8008be0:	300c      	adds	r0, #12
 8008be2:	f000 f919 	bl	8008e18 <memcpy>
 8008be6:	4621      	mov	r1, r4
 8008be8:	9802      	ldr	r0, [sp, #8]
 8008bea:	f000 f963 	bl	8008eb4 <_Bfree>
 8008bee:	464c      	mov	r4, r9
 8008bf0:	6923      	ldr	r3, [r4, #16]
 8008bf2:	1c5a      	adds	r2, r3, #1
 8008bf4:	6122      	str	r2, [r4, #16]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008bfc:	615a      	str	r2, [r3, #20]
 8008bfe:	e7bd      	b.n	8008b7c <__gethex+0x3b8>
 8008c00:	6922      	ldr	r2, [r4, #16]
 8008c02:	455a      	cmp	r2, fp
 8008c04:	dd0b      	ble.n	8008c1e <__gethex+0x45a>
 8008c06:	2101      	movs	r1, #1
 8008c08:	4620      	mov	r0, r4
 8008c0a:	f7ff fd73 	bl	80086f4 <rshift>
 8008c0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c12:	3501      	adds	r5, #1
 8008c14:	42ab      	cmp	r3, r5
 8008c16:	f6ff aed4 	blt.w	80089c2 <__gethex+0x1fe>
 8008c1a:	2701      	movs	r7, #1
 8008c1c:	e7c2      	b.n	8008ba4 <__gethex+0x3e0>
 8008c1e:	f016 061f 	ands.w	r6, r6, #31
 8008c22:	d0fa      	beq.n	8008c1a <__gethex+0x456>
 8008c24:	4453      	add	r3, sl
 8008c26:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008c2a:	f000 f9f5 	bl	8009018 <__hi0bits>
 8008c2e:	f1c6 0620 	rsb	r6, r6, #32
 8008c32:	42b0      	cmp	r0, r6
 8008c34:	dbe7      	blt.n	8008c06 <__gethex+0x442>
 8008c36:	e7f0      	b.n	8008c1a <__gethex+0x456>
 8008c38:	0800aaf0 	.word	0x0800aaf0

08008c3c <L_shift>:
 8008c3c:	f1c2 0208 	rsb	r2, r2, #8
 8008c40:	0092      	lsls	r2, r2, #2
 8008c42:	b570      	push	{r4, r5, r6, lr}
 8008c44:	f1c2 0620 	rsb	r6, r2, #32
 8008c48:	6843      	ldr	r3, [r0, #4]
 8008c4a:	6804      	ldr	r4, [r0, #0]
 8008c4c:	fa03 f506 	lsl.w	r5, r3, r6
 8008c50:	432c      	orrs	r4, r5
 8008c52:	40d3      	lsrs	r3, r2
 8008c54:	6004      	str	r4, [r0, #0]
 8008c56:	f840 3f04 	str.w	r3, [r0, #4]!
 8008c5a:	4288      	cmp	r0, r1
 8008c5c:	d3f4      	bcc.n	8008c48 <L_shift+0xc>
 8008c5e:	bd70      	pop	{r4, r5, r6, pc}

08008c60 <__match>:
 8008c60:	b530      	push	{r4, r5, lr}
 8008c62:	6803      	ldr	r3, [r0, #0]
 8008c64:	3301      	adds	r3, #1
 8008c66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c6a:	b914      	cbnz	r4, 8008c72 <__match+0x12>
 8008c6c:	6003      	str	r3, [r0, #0]
 8008c6e:	2001      	movs	r0, #1
 8008c70:	bd30      	pop	{r4, r5, pc}
 8008c72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c76:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008c7a:	2d19      	cmp	r5, #25
 8008c7c:	bf98      	it	ls
 8008c7e:	3220      	addls	r2, #32
 8008c80:	42a2      	cmp	r2, r4
 8008c82:	d0f0      	beq.n	8008c66 <__match+0x6>
 8008c84:	2000      	movs	r0, #0
 8008c86:	e7f3      	b.n	8008c70 <__match+0x10>

08008c88 <__hexnan>:
 8008c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c8c:	2500      	movs	r5, #0
 8008c8e:	680b      	ldr	r3, [r1, #0]
 8008c90:	4682      	mov	sl, r0
 8008c92:	115e      	asrs	r6, r3, #5
 8008c94:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008c98:	f013 031f 	ands.w	r3, r3, #31
 8008c9c:	bf18      	it	ne
 8008c9e:	3604      	addne	r6, #4
 8008ca0:	1f37      	subs	r7, r6, #4
 8008ca2:	46b9      	mov	r9, r7
 8008ca4:	463c      	mov	r4, r7
 8008ca6:	46ab      	mov	fp, r5
 8008ca8:	b087      	sub	sp, #28
 8008caa:	4690      	mov	r8, r2
 8008cac:	6802      	ldr	r2, [r0, #0]
 8008cae:	9301      	str	r3, [sp, #4]
 8008cb0:	f846 5c04 	str.w	r5, [r6, #-4]
 8008cb4:	9502      	str	r5, [sp, #8]
 8008cb6:	7851      	ldrb	r1, [r2, #1]
 8008cb8:	1c53      	adds	r3, r2, #1
 8008cba:	9303      	str	r3, [sp, #12]
 8008cbc:	b341      	cbz	r1, 8008d10 <__hexnan+0x88>
 8008cbe:	4608      	mov	r0, r1
 8008cc0:	9205      	str	r2, [sp, #20]
 8008cc2:	9104      	str	r1, [sp, #16]
 8008cc4:	f7ff fd69 	bl	800879a <__hexdig_fun>
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	d14f      	bne.n	8008d6c <__hexnan+0xe4>
 8008ccc:	9904      	ldr	r1, [sp, #16]
 8008cce:	9a05      	ldr	r2, [sp, #20]
 8008cd0:	2920      	cmp	r1, #32
 8008cd2:	d818      	bhi.n	8008d06 <__hexnan+0x7e>
 8008cd4:	9b02      	ldr	r3, [sp, #8]
 8008cd6:	459b      	cmp	fp, r3
 8008cd8:	dd13      	ble.n	8008d02 <__hexnan+0x7a>
 8008cda:	454c      	cmp	r4, r9
 8008cdc:	d206      	bcs.n	8008cec <__hexnan+0x64>
 8008cde:	2d07      	cmp	r5, #7
 8008ce0:	dc04      	bgt.n	8008cec <__hexnan+0x64>
 8008ce2:	462a      	mov	r2, r5
 8008ce4:	4649      	mov	r1, r9
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	f7ff ffa8 	bl	8008c3c <L_shift>
 8008cec:	4544      	cmp	r4, r8
 8008cee:	d950      	bls.n	8008d92 <__hexnan+0x10a>
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	f1a4 0904 	sub.w	r9, r4, #4
 8008cf6:	f844 3c04 	str.w	r3, [r4, #-4]
 8008cfa:	461d      	mov	r5, r3
 8008cfc:	464c      	mov	r4, r9
 8008cfe:	f8cd b008 	str.w	fp, [sp, #8]
 8008d02:	9a03      	ldr	r2, [sp, #12]
 8008d04:	e7d7      	b.n	8008cb6 <__hexnan+0x2e>
 8008d06:	2929      	cmp	r1, #41	; 0x29
 8008d08:	d156      	bne.n	8008db8 <__hexnan+0x130>
 8008d0a:	3202      	adds	r2, #2
 8008d0c:	f8ca 2000 	str.w	r2, [sl]
 8008d10:	f1bb 0f00 	cmp.w	fp, #0
 8008d14:	d050      	beq.n	8008db8 <__hexnan+0x130>
 8008d16:	454c      	cmp	r4, r9
 8008d18:	d206      	bcs.n	8008d28 <__hexnan+0xa0>
 8008d1a:	2d07      	cmp	r5, #7
 8008d1c:	dc04      	bgt.n	8008d28 <__hexnan+0xa0>
 8008d1e:	462a      	mov	r2, r5
 8008d20:	4649      	mov	r1, r9
 8008d22:	4620      	mov	r0, r4
 8008d24:	f7ff ff8a 	bl	8008c3c <L_shift>
 8008d28:	4544      	cmp	r4, r8
 8008d2a:	d934      	bls.n	8008d96 <__hexnan+0x10e>
 8008d2c:	4623      	mov	r3, r4
 8008d2e:	f1a8 0204 	sub.w	r2, r8, #4
 8008d32:	f853 1b04 	ldr.w	r1, [r3], #4
 8008d36:	429f      	cmp	r7, r3
 8008d38:	f842 1f04 	str.w	r1, [r2, #4]!
 8008d3c:	d2f9      	bcs.n	8008d32 <__hexnan+0xaa>
 8008d3e:	1b3b      	subs	r3, r7, r4
 8008d40:	f023 0303 	bic.w	r3, r3, #3
 8008d44:	3304      	adds	r3, #4
 8008d46:	3401      	adds	r4, #1
 8008d48:	3e03      	subs	r6, #3
 8008d4a:	42b4      	cmp	r4, r6
 8008d4c:	bf88      	it	hi
 8008d4e:	2304      	movhi	r3, #4
 8008d50:	2200      	movs	r2, #0
 8008d52:	4443      	add	r3, r8
 8008d54:	f843 2b04 	str.w	r2, [r3], #4
 8008d58:	429f      	cmp	r7, r3
 8008d5a:	d2fb      	bcs.n	8008d54 <__hexnan+0xcc>
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	b91b      	cbnz	r3, 8008d68 <__hexnan+0xe0>
 8008d60:	4547      	cmp	r7, r8
 8008d62:	d127      	bne.n	8008db4 <__hexnan+0x12c>
 8008d64:	2301      	movs	r3, #1
 8008d66:	603b      	str	r3, [r7, #0]
 8008d68:	2005      	movs	r0, #5
 8008d6a:	e026      	b.n	8008dba <__hexnan+0x132>
 8008d6c:	3501      	adds	r5, #1
 8008d6e:	2d08      	cmp	r5, #8
 8008d70:	f10b 0b01 	add.w	fp, fp, #1
 8008d74:	dd06      	ble.n	8008d84 <__hexnan+0xfc>
 8008d76:	4544      	cmp	r4, r8
 8008d78:	d9c3      	bls.n	8008d02 <__hexnan+0x7a>
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	2501      	movs	r5, #1
 8008d7e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d82:	3c04      	subs	r4, #4
 8008d84:	6822      	ldr	r2, [r4, #0]
 8008d86:	f000 000f 	and.w	r0, r0, #15
 8008d8a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008d8e:	6022      	str	r2, [r4, #0]
 8008d90:	e7b7      	b.n	8008d02 <__hexnan+0x7a>
 8008d92:	2508      	movs	r5, #8
 8008d94:	e7b5      	b.n	8008d02 <__hexnan+0x7a>
 8008d96:	9b01      	ldr	r3, [sp, #4]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d0df      	beq.n	8008d5c <__hexnan+0xd4>
 8008d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008da0:	f1c3 0320 	rsb	r3, r3, #32
 8008da4:	fa22 f303 	lsr.w	r3, r2, r3
 8008da8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008dac:	401a      	ands	r2, r3
 8008dae:	f846 2c04 	str.w	r2, [r6, #-4]
 8008db2:	e7d3      	b.n	8008d5c <__hexnan+0xd4>
 8008db4:	3f04      	subs	r7, #4
 8008db6:	e7d1      	b.n	8008d5c <__hexnan+0xd4>
 8008db8:	2004      	movs	r0, #4
 8008dba:	b007      	add	sp, #28
 8008dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008dc0 <_localeconv_r>:
 8008dc0:	4800      	ldr	r0, [pc, #0]	; (8008dc4 <_localeconv_r+0x4>)
 8008dc2:	4770      	bx	lr
 8008dc4:	20000198 	.word	0x20000198

08008dc8 <malloc>:
 8008dc8:	4b02      	ldr	r3, [pc, #8]	; (8008dd4 <malloc+0xc>)
 8008dca:	4601      	mov	r1, r0
 8008dcc:	6818      	ldr	r0, [r3, #0]
 8008dce:	f000 bd65 	b.w	800989c <_malloc_r>
 8008dd2:	bf00      	nop
 8008dd4:	20000040 	.word	0x20000040

08008dd8 <__ascii_mbtowc>:
 8008dd8:	b082      	sub	sp, #8
 8008dda:	b901      	cbnz	r1, 8008dde <__ascii_mbtowc+0x6>
 8008ddc:	a901      	add	r1, sp, #4
 8008dde:	b142      	cbz	r2, 8008df2 <__ascii_mbtowc+0x1a>
 8008de0:	b14b      	cbz	r3, 8008df6 <__ascii_mbtowc+0x1e>
 8008de2:	7813      	ldrb	r3, [r2, #0]
 8008de4:	600b      	str	r3, [r1, #0]
 8008de6:	7812      	ldrb	r2, [r2, #0]
 8008de8:	1e10      	subs	r0, r2, #0
 8008dea:	bf18      	it	ne
 8008dec:	2001      	movne	r0, #1
 8008dee:	b002      	add	sp, #8
 8008df0:	4770      	bx	lr
 8008df2:	4610      	mov	r0, r2
 8008df4:	e7fb      	b.n	8008dee <__ascii_mbtowc+0x16>
 8008df6:	f06f 0001 	mvn.w	r0, #1
 8008dfa:	e7f8      	b.n	8008dee <__ascii_mbtowc+0x16>

08008dfc <memchr>:
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	b510      	push	{r4, lr}
 8008e00:	b2c9      	uxtb	r1, r1
 8008e02:	4402      	add	r2, r0
 8008e04:	4293      	cmp	r3, r2
 8008e06:	4618      	mov	r0, r3
 8008e08:	d101      	bne.n	8008e0e <memchr+0x12>
 8008e0a:	2000      	movs	r0, #0
 8008e0c:	e003      	b.n	8008e16 <memchr+0x1a>
 8008e0e:	7804      	ldrb	r4, [r0, #0]
 8008e10:	3301      	adds	r3, #1
 8008e12:	428c      	cmp	r4, r1
 8008e14:	d1f6      	bne.n	8008e04 <memchr+0x8>
 8008e16:	bd10      	pop	{r4, pc}

08008e18 <memcpy>:
 8008e18:	440a      	add	r2, r1
 8008e1a:	4291      	cmp	r1, r2
 8008e1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e20:	d100      	bne.n	8008e24 <memcpy+0xc>
 8008e22:	4770      	bx	lr
 8008e24:	b510      	push	{r4, lr}
 8008e26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e2a:	4291      	cmp	r1, r2
 8008e2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e30:	d1f9      	bne.n	8008e26 <memcpy+0xe>
 8008e32:	bd10      	pop	{r4, pc}

08008e34 <_Balloc>:
 8008e34:	b570      	push	{r4, r5, r6, lr}
 8008e36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e38:	4604      	mov	r4, r0
 8008e3a:	460d      	mov	r5, r1
 8008e3c:	b976      	cbnz	r6, 8008e5c <_Balloc+0x28>
 8008e3e:	2010      	movs	r0, #16
 8008e40:	f7ff ffc2 	bl	8008dc8 <malloc>
 8008e44:	4602      	mov	r2, r0
 8008e46:	6260      	str	r0, [r4, #36]	; 0x24
 8008e48:	b920      	cbnz	r0, 8008e54 <_Balloc+0x20>
 8008e4a:	2166      	movs	r1, #102	; 0x66
 8008e4c:	4b17      	ldr	r3, [pc, #92]	; (8008eac <_Balloc+0x78>)
 8008e4e:	4818      	ldr	r0, [pc, #96]	; (8008eb0 <_Balloc+0x7c>)
 8008e50:	f000 ff2c 	bl	8009cac <__assert_func>
 8008e54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e58:	6006      	str	r6, [r0, #0]
 8008e5a:	60c6      	str	r6, [r0, #12]
 8008e5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008e5e:	68f3      	ldr	r3, [r6, #12]
 8008e60:	b183      	cbz	r3, 8008e84 <_Balloc+0x50>
 8008e62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e6a:	b9b8      	cbnz	r0, 8008e9c <_Balloc+0x68>
 8008e6c:	2101      	movs	r1, #1
 8008e6e:	fa01 f605 	lsl.w	r6, r1, r5
 8008e72:	1d72      	adds	r2, r6, #5
 8008e74:	4620      	mov	r0, r4
 8008e76:	0092      	lsls	r2, r2, #2
 8008e78:	f000 fc94 	bl	80097a4 <_calloc_r>
 8008e7c:	b160      	cbz	r0, 8008e98 <_Balloc+0x64>
 8008e7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e82:	e00e      	b.n	8008ea2 <_Balloc+0x6e>
 8008e84:	2221      	movs	r2, #33	; 0x21
 8008e86:	2104      	movs	r1, #4
 8008e88:	4620      	mov	r0, r4
 8008e8a:	f000 fc8b 	bl	80097a4 <_calloc_r>
 8008e8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e90:	60f0      	str	r0, [r6, #12]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d1e4      	bne.n	8008e62 <_Balloc+0x2e>
 8008e98:	2000      	movs	r0, #0
 8008e9a:	bd70      	pop	{r4, r5, r6, pc}
 8008e9c:	6802      	ldr	r2, [r0, #0]
 8008e9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ea8:	e7f7      	b.n	8008e9a <_Balloc+0x66>
 8008eaa:	bf00      	nop
 8008eac:	0800aa7e 	.word	0x0800aa7e
 8008eb0:	0800ab7c 	.word	0x0800ab7c

08008eb4 <_Bfree>:
 8008eb4:	b570      	push	{r4, r5, r6, lr}
 8008eb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008eb8:	4605      	mov	r5, r0
 8008eba:	460c      	mov	r4, r1
 8008ebc:	b976      	cbnz	r6, 8008edc <_Bfree+0x28>
 8008ebe:	2010      	movs	r0, #16
 8008ec0:	f7ff ff82 	bl	8008dc8 <malloc>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	6268      	str	r0, [r5, #36]	; 0x24
 8008ec8:	b920      	cbnz	r0, 8008ed4 <_Bfree+0x20>
 8008eca:	218a      	movs	r1, #138	; 0x8a
 8008ecc:	4b08      	ldr	r3, [pc, #32]	; (8008ef0 <_Bfree+0x3c>)
 8008ece:	4809      	ldr	r0, [pc, #36]	; (8008ef4 <_Bfree+0x40>)
 8008ed0:	f000 feec 	bl	8009cac <__assert_func>
 8008ed4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ed8:	6006      	str	r6, [r0, #0]
 8008eda:	60c6      	str	r6, [r0, #12]
 8008edc:	b13c      	cbz	r4, 8008eee <_Bfree+0x3a>
 8008ede:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ee0:	6862      	ldr	r2, [r4, #4]
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ee8:	6021      	str	r1, [r4, #0]
 8008eea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008eee:	bd70      	pop	{r4, r5, r6, pc}
 8008ef0:	0800aa7e 	.word	0x0800aa7e
 8008ef4:	0800ab7c 	.word	0x0800ab7c

08008ef8 <__multadd>:
 8008ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008efc:	4607      	mov	r7, r0
 8008efe:	460c      	mov	r4, r1
 8008f00:	461e      	mov	r6, r3
 8008f02:	2000      	movs	r0, #0
 8008f04:	690d      	ldr	r5, [r1, #16]
 8008f06:	f101 0c14 	add.w	ip, r1, #20
 8008f0a:	f8dc 3000 	ldr.w	r3, [ip]
 8008f0e:	3001      	adds	r0, #1
 8008f10:	b299      	uxth	r1, r3
 8008f12:	fb02 6101 	mla	r1, r2, r1, r6
 8008f16:	0c1e      	lsrs	r6, r3, #16
 8008f18:	0c0b      	lsrs	r3, r1, #16
 8008f1a:	fb02 3306 	mla	r3, r2, r6, r3
 8008f1e:	b289      	uxth	r1, r1
 8008f20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f24:	4285      	cmp	r5, r0
 8008f26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f2a:	f84c 1b04 	str.w	r1, [ip], #4
 8008f2e:	dcec      	bgt.n	8008f0a <__multadd+0x12>
 8008f30:	b30e      	cbz	r6, 8008f76 <__multadd+0x7e>
 8008f32:	68a3      	ldr	r3, [r4, #8]
 8008f34:	42ab      	cmp	r3, r5
 8008f36:	dc19      	bgt.n	8008f6c <__multadd+0x74>
 8008f38:	6861      	ldr	r1, [r4, #4]
 8008f3a:	4638      	mov	r0, r7
 8008f3c:	3101      	adds	r1, #1
 8008f3e:	f7ff ff79 	bl	8008e34 <_Balloc>
 8008f42:	4680      	mov	r8, r0
 8008f44:	b928      	cbnz	r0, 8008f52 <__multadd+0x5a>
 8008f46:	4602      	mov	r2, r0
 8008f48:	21b5      	movs	r1, #181	; 0xb5
 8008f4a:	4b0c      	ldr	r3, [pc, #48]	; (8008f7c <__multadd+0x84>)
 8008f4c:	480c      	ldr	r0, [pc, #48]	; (8008f80 <__multadd+0x88>)
 8008f4e:	f000 fead 	bl	8009cac <__assert_func>
 8008f52:	6922      	ldr	r2, [r4, #16]
 8008f54:	f104 010c 	add.w	r1, r4, #12
 8008f58:	3202      	adds	r2, #2
 8008f5a:	0092      	lsls	r2, r2, #2
 8008f5c:	300c      	adds	r0, #12
 8008f5e:	f7ff ff5b 	bl	8008e18 <memcpy>
 8008f62:	4621      	mov	r1, r4
 8008f64:	4638      	mov	r0, r7
 8008f66:	f7ff ffa5 	bl	8008eb4 <_Bfree>
 8008f6a:	4644      	mov	r4, r8
 8008f6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f70:	3501      	adds	r5, #1
 8008f72:	615e      	str	r6, [r3, #20]
 8008f74:	6125      	str	r5, [r4, #16]
 8008f76:	4620      	mov	r0, r4
 8008f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f7c:	0800aaf0 	.word	0x0800aaf0
 8008f80:	0800ab7c 	.word	0x0800ab7c

08008f84 <__s2b>:
 8008f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f88:	4615      	mov	r5, r2
 8008f8a:	2209      	movs	r2, #9
 8008f8c:	461f      	mov	r7, r3
 8008f8e:	3308      	adds	r3, #8
 8008f90:	460c      	mov	r4, r1
 8008f92:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f96:	4606      	mov	r6, r0
 8008f98:	2201      	movs	r2, #1
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	db09      	blt.n	8008fb4 <__s2b+0x30>
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	f7ff ff47 	bl	8008e34 <_Balloc>
 8008fa6:	b940      	cbnz	r0, 8008fba <__s2b+0x36>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	21ce      	movs	r1, #206	; 0xce
 8008fac:	4b18      	ldr	r3, [pc, #96]	; (8009010 <__s2b+0x8c>)
 8008fae:	4819      	ldr	r0, [pc, #100]	; (8009014 <__s2b+0x90>)
 8008fb0:	f000 fe7c 	bl	8009cac <__assert_func>
 8008fb4:	0052      	lsls	r2, r2, #1
 8008fb6:	3101      	adds	r1, #1
 8008fb8:	e7f0      	b.n	8008f9c <__s2b+0x18>
 8008fba:	9b08      	ldr	r3, [sp, #32]
 8008fbc:	2d09      	cmp	r5, #9
 8008fbe:	6143      	str	r3, [r0, #20]
 8008fc0:	f04f 0301 	mov.w	r3, #1
 8008fc4:	6103      	str	r3, [r0, #16]
 8008fc6:	dd16      	ble.n	8008ff6 <__s2b+0x72>
 8008fc8:	f104 0909 	add.w	r9, r4, #9
 8008fcc:	46c8      	mov	r8, r9
 8008fce:	442c      	add	r4, r5
 8008fd0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008fd4:	4601      	mov	r1, r0
 8008fd6:	220a      	movs	r2, #10
 8008fd8:	4630      	mov	r0, r6
 8008fda:	3b30      	subs	r3, #48	; 0x30
 8008fdc:	f7ff ff8c 	bl	8008ef8 <__multadd>
 8008fe0:	45a0      	cmp	r8, r4
 8008fe2:	d1f5      	bne.n	8008fd0 <__s2b+0x4c>
 8008fe4:	f1a5 0408 	sub.w	r4, r5, #8
 8008fe8:	444c      	add	r4, r9
 8008fea:	1b2d      	subs	r5, r5, r4
 8008fec:	1963      	adds	r3, r4, r5
 8008fee:	42bb      	cmp	r3, r7
 8008ff0:	db04      	blt.n	8008ffc <__s2b+0x78>
 8008ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ff6:	2509      	movs	r5, #9
 8008ff8:	340a      	adds	r4, #10
 8008ffa:	e7f6      	b.n	8008fea <__s2b+0x66>
 8008ffc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009000:	4601      	mov	r1, r0
 8009002:	220a      	movs	r2, #10
 8009004:	4630      	mov	r0, r6
 8009006:	3b30      	subs	r3, #48	; 0x30
 8009008:	f7ff ff76 	bl	8008ef8 <__multadd>
 800900c:	e7ee      	b.n	8008fec <__s2b+0x68>
 800900e:	bf00      	nop
 8009010:	0800aaf0 	.word	0x0800aaf0
 8009014:	0800ab7c 	.word	0x0800ab7c

08009018 <__hi0bits>:
 8009018:	0c02      	lsrs	r2, r0, #16
 800901a:	0412      	lsls	r2, r2, #16
 800901c:	4603      	mov	r3, r0
 800901e:	b9ca      	cbnz	r2, 8009054 <__hi0bits+0x3c>
 8009020:	0403      	lsls	r3, r0, #16
 8009022:	2010      	movs	r0, #16
 8009024:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009028:	bf04      	itt	eq
 800902a:	021b      	lsleq	r3, r3, #8
 800902c:	3008      	addeq	r0, #8
 800902e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009032:	bf04      	itt	eq
 8009034:	011b      	lsleq	r3, r3, #4
 8009036:	3004      	addeq	r0, #4
 8009038:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800903c:	bf04      	itt	eq
 800903e:	009b      	lsleq	r3, r3, #2
 8009040:	3002      	addeq	r0, #2
 8009042:	2b00      	cmp	r3, #0
 8009044:	db05      	blt.n	8009052 <__hi0bits+0x3a>
 8009046:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800904a:	f100 0001 	add.w	r0, r0, #1
 800904e:	bf08      	it	eq
 8009050:	2020      	moveq	r0, #32
 8009052:	4770      	bx	lr
 8009054:	2000      	movs	r0, #0
 8009056:	e7e5      	b.n	8009024 <__hi0bits+0xc>

08009058 <__lo0bits>:
 8009058:	6803      	ldr	r3, [r0, #0]
 800905a:	4602      	mov	r2, r0
 800905c:	f013 0007 	ands.w	r0, r3, #7
 8009060:	d00b      	beq.n	800907a <__lo0bits+0x22>
 8009062:	07d9      	lsls	r1, r3, #31
 8009064:	d421      	bmi.n	80090aa <__lo0bits+0x52>
 8009066:	0798      	lsls	r0, r3, #30
 8009068:	bf49      	itett	mi
 800906a:	085b      	lsrmi	r3, r3, #1
 800906c:	089b      	lsrpl	r3, r3, #2
 800906e:	2001      	movmi	r0, #1
 8009070:	6013      	strmi	r3, [r2, #0]
 8009072:	bf5c      	itt	pl
 8009074:	2002      	movpl	r0, #2
 8009076:	6013      	strpl	r3, [r2, #0]
 8009078:	4770      	bx	lr
 800907a:	b299      	uxth	r1, r3
 800907c:	b909      	cbnz	r1, 8009082 <__lo0bits+0x2a>
 800907e:	2010      	movs	r0, #16
 8009080:	0c1b      	lsrs	r3, r3, #16
 8009082:	b2d9      	uxtb	r1, r3
 8009084:	b909      	cbnz	r1, 800908a <__lo0bits+0x32>
 8009086:	3008      	adds	r0, #8
 8009088:	0a1b      	lsrs	r3, r3, #8
 800908a:	0719      	lsls	r1, r3, #28
 800908c:	bf04      	itt	eq
 800908e:	091b      	lsreq	r3, r3, #4
 8009090:	3004      	addeq	r0, #4
 8009092:	0799      	lsls	r1, r3, #30
 8009094:	bf04      	itt	eq
 8009096:	089b      	lsreq	r3, r3, #2
 8009098:	3002      	addeq	r0, #2
 800909a:	07d9      	lsls	r1, r3, #31
 800909c:	d403      	bmi.n	80090a6 <__lo0bits+0x4e>
 800909e:	085b      	lsrs	r3, r3, #1
 80090a0:	f100 0001 	add.w	r0, r0, #1
 80090a4:	d003      	beq.n	80090ae <__lo0bits+0x56>
 80090a6:	6013      	str	r3, [r2, #0]
 80090a8:	4770      	bx	lr
 80090aa:	2000      	movs	r0, #0
 80090ac:	4770      	bx	lr
 80090ae:	2020      	movs	r0, #32
 80090b0:	4770      	bx	lr
	...

080090b4 <__i2b>:
 80090b4:	b510      	push	{r4, lr}
 80090b6:	460c      	mov	r4, r1
 80090b8:	2101      	movs	r1, #1
 80090ba:	f7ff febb 	bl	8008e34 <_Balloc>
 80090be:	4602      	mov	r2, r0
 80090c0:	b928      	cbnz	r0, 80090ce <__i2b+0x1a>
 80090c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80090c6:	4b04      	ldr	r3, [pc, #16]	; (80090d8 <__i2b+0x24>)
 80090c8:	4804      	ldr	r0, [pc, #16]	; (80090dc <__i2b+0x28>)
 80090ca:	f000 fdef 	bl	8009cac <__assert_func>
 80090ce:	2301      	movs	r3, #1
 80090d0:	6144      	str	r4, [r0, #20]
 80090d2:	6103      	str	r3, [r0, #16]
 80090d4:	bd10      	pop	{r4, pc}
 80090d6:	bf00      	nop
 80090d8:	0800aaf0 	.word	0x0800aaf0
 80090dc:	0800ab7c 	.word	0x0800ab7c

080090e0 <__multiply>:
 80090e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e4:	4691      	mov	r9, r2
 80090e6:	690a      	ldr	r2, [r1, #16]
 80090e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80090ec:	460c      	mov	r4, r1
 80090ee:	429a      	cmp	r2, r3
 80090f0:	bfbe      	ittt	lt
 80090f2:	460b      	movlt	r3, r1
 80090f4:	464c      	movlt	r4, r9
 80090f6:	4699      	movlt	r9, r3
 80090f8:	6927      	ldr	r7, [r4, #16]
 80090fa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80090fe:	68a3      	ldr	r3, [r4, #8]
 8009100:	6861      	ldr	r1, [r4, #4]
 8009102:	eb07 060a 	add.w	r6, r7, sl
 8009106:	42b3      	cmp	r3, r6
 8009108:	b085      	sub	sp, #20
 800910a:	bfb8      	it	lt
 800910c:	3101      	addlt	r1, #1
 800910e:	f7ff fe91 	bl	8008e34 <_Balloc>
 8009112:	b930      	cbnz	r0, 8009122 <__multiply+0x42>
 8009114:	4602      	mov	r2, r0
 8009116:	f240 115d 	movw	r1, #349	; 0x15d
 800911a:	4b43      	ldr	r3, [pc, #268]	; (8009228 <__multiply+0x148>)
 800911c:	4843      	ldr	r0, [pc, #268]	; (800922c <__multiply+0x14c>)
 800911e:	f000 fdc5 	bl	8009cac <__assert_func>
 8009122:	f100 0514 	add.w	r5, r0, #20
 8009126:	462b      	mov	r3, r5
 8009128:	2200      	movs	r2, #0
 800912a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800912e:	4543      	cmp	r3, r8
 8009130:	d321      	bcc.n	8009176 <__multiply+0x96>
 8009132:	f104 0314 	add.w	r3, r4, #20
 8009136:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800913a:	f109 0314 	add.w	r3, r9, #20
 800913e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009142:	9202      	str	r2, [sp, #8]
 8009144:	1b3a      	subs	r2, r7, r4
 8009146:	3a15      	subs	r2, #21
 8009148:	f022 0203 	bic.w	r2, r2, #3
 800914c:	3204      	adds	r2, #4
 800914e:	f104 0115 	add.w	r1, r4, #21
 8009152:	428f      	cmp	r7, r1
 8009154:	bf38      	it	cc
 8009156:	2204      	movcc	r2, #4
 8009158:	9201      	str	r2, [sp, #4]
 800915a:	9a02      	ldr	r2, [sp, #8]
 800915c:	9303      	str	r3, [sp, #12]
 800915e:	429a      	cmp	r2, r3
 8009160:	d80c      	bhi.n	800917c <__multiply+0x9c>
 8009162:	2e00      	cmp	r6, #0
 8009164:	dd03      	ble.n	800916e <__multiply+0x8e>
 8009166:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800916a:	2b00      	cmp	r3, #0
 800916c:	d059      	beq.n	8009222 <__multiply+0x142>
 800916e:	6106      	str	r6, [r0, #16]
 8009170:	b005      	add	sp, #20
 8009172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009176:	f843 2b04 	str.w	r2, [r3], #4
 800917a:	e7d8      	b.n	800912e <__multiply+0x4e>
 800917c:	f8b3 a000 	ldrh.w	sl, [r3]
 8009180:	f1ba 0f00 	cmp.w	sl, #0
 8009184:	d023      	beq.n	80091ce <__multiply+0xee>
 8009186:	46a9      	mov	r9, r5
 8009188:	f04f 0c00 	mov.w	ip, #0
 800918c:	f104 0e14 	add.w	lr, r4, #20
 8009190:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009194:	f8d9 1000 	ldr.w	r1, [r9]
 8009198:	fa1f fb82 	uxth.w	fp, r2
 800919c:	b289      	uxth	r1, r1
 800919e:	fb0a 110b 	mla	r1, sl, fp, r1
 80091a2:	4461      	add	r1, ip
 80091a4:	f8d9 c000 	ldr.w	ip, [r9]
 80091a8:	0c12      	lsrs	r2, r2, #16
 80091aa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80091ae:	fb0a c202 	mla	r2, sl, r2, ip
 80091b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80091b6:	b289      	uxth	r1, r1
 80091b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80091bc:	4577      	cmp	r7, lr
 80091be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80091c2:	f849 1b04 	str.w	r1, [r9], #4
 80091c6:	d8e3      	bhi.n	8009190 <__multiply+0xb0>
 80091c8:	9a01      	ldr	r2, [sp, #4]
 80091ca:	f845 c002 	str.w	ip, [r5, r2]
 80091ce:	9a03      	ldr	r2, [sp, #12]
 80091d0:	3304      	adds	r3, #4
 80091d2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80091d6:	f1b9 0f00 	cmp.w	r9, #0
 80091da:	d020      	beq.n	800921e <__multiply+0x13e>
 80091dc:	46ae      	mov	lr, r5
 80091de:	f04f 0a00 	mov.w	sl, #0
 80091e2:	6829      	ldr	r1, [r5, #0]
 80091e4:	f104 0c14 	add.w	ip, r4, #20
 80091e8:	f8bc b000 	ldrh.w	fp, [ip]
 80091ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80091f0:	b289      	uxth	r1, r1
 80091f2:	fb09 220b 	mla	r2, r9, fp, r2
 80091f6:	4492      	add	sl, r2
 80091f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80091fc:	f84e 1b04 	str.w	r1, [lr], #4
 8009200:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009204:	f8be 1000 	ldrh.w	r1, [lr]
 8009208:	0c12      	lsrs	r2, r2, #16
 800920a:	fb09 1102 	mla	r1, r9, r2, r1
 800920e:	4567      	cmp	r7, ip
 8009210:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009214:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009218:	d8e6      	bhi.n	80091e8 <__multiply+0x108>
 800921a:	9a01      	ldr	r2, [sp, #4]
 800921c:	50a9      	str	r1, [r5, r2]
 800921e:	3504      	adds	r5, #4
 8009220:	e79b      	b.n	800915a <__multiply+0x7a>
 8009222:	3e01      	subs	r6, #1
 8009224:	e79d      	b.n	8009162 <__multiply+0x82>
 8009226:	bf00      	nop
 8009228:	0800aaf0 	.word	0x0800aaf0
 800922c:	0800ab7c 	.word	0x0800ab7c

08009230 <__pow5mult>:
 8009230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009234:	4615      	mov	r5, r2
 8009236:	f012 0203 	ands.w	r2, r2, #3
 800923a:	4606      	mov	r6, r0
 800923c:	460f      	mov	r7, r1
 800923e:	d007      	beq.n	8009250 <__pow5mult+0x20>
 8009240:	4c25      	ldr	r4, [pc, #148]	; (80092d8 <__pow5mult+0xa8>)
 8009242:	3a01      	subs	r2, #1
 8009244:	2300      	movs	r3, #0
 8009246:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800924a:	f7ff fe55 	bl	8008ef8 <__multadd>
 800924e:	4607      	mov	r7, r0
 8009250:	10ad      	asrs	r5, r5, #2
 8009252:	d03d      	beq.n	80092d0 <__pow5mult+0xa0>
 8009254:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009256:	b97c      	cbnz	r4, 8009278 <__pow5mult+0x48>
 8009258:	2010      	movs	r0, #16
 800925a:	f7ff fdb5 	bl	8008dc8 <malloc>
 800925e:	4602      	mov	r2, r0
 8009260:	6270      	str	r0, [r6, #36]	; 0x24
 8009262:	b928      	cbnz	r0, 8009270 <__pow5mult+0x40>
 8009264:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009268:	4b1c      	ldr	r3, [pc, #112]	; (80092dc <__pow5mult+0xac>)
 800926a:	481d      	ldr	r0, [pc, #116]	; (80092e0 <__pow5mult+0xb0>)
 800926c:	f000 fd1e 	bl	8009cac <__assert_func>
 8009270:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009274:	6004      	str	r4, [r0, #0]
 8009276:	60c4      	str	r4, [r0, #12]
 8009278:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800927c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009280:	b94c      	cbnz	r4, 8009296 <__pow5mult+0x66>
 8009282:	f240 2171 	movw	r1, #625	; 0x271
 8009286:	4630      	mov	r0, r6
 8009288:	f7ff ff14 	bl	80090b4 <__i2b>
 800928c:	2300      	movs	r3, #0
 800928e:	4604      	mov	r4, r0
 8009290:	f8c8 0008 	str.w	r0, [r8, #8]
 8009294:	6003      	str	r3, [r0, #0]
 8009296:	f04f 0900 	mov.w	r9, #0
 800929a:	07eb      	lsls	r3, r5, #31
 800929c:	d50a      	bpl.n	80092b4 <__pow5mult+0x84>
 800929e:	4639      	mov	r1, r7
 80092a0:	4622      	mov	r2, r4
 80092a2:	4630      	mov	r0, r6
 80092a4:	f7ff ff1c 	bl	80090e0 <__multiply>
 80092a8:	4680      	mov	r8, r0
 80092aa:	4639      	mov	r1, r7
 80092ac:	4630      	mov	r0, r6
 80092ae:	f7ff fe01 	bl	8008eb4 <_Bfree>
 80092b2:	4647      	mov	r7, r8
 80092b4:	106d      	asrs	r5, r5, #1
 80092b6:	d00b      	beq.n	80092d0 <__pow5mult+0xa0>
 80092b8:	6820      	ldr	r0, [r4, #0]
 80092ba:	b938      	cbnz	r0, 80092cc <__pow5mult+0x9c>
 80092bc:	4622      	mov	r2, r4
 80092be:	4621      	mov	r1, r4
 80092c0:	4630      	mov	r0, r6
 80092c2:	f7ff ff0d 	bl	80090e0 <__multiply>
 80092c6:	6020      	str	r0, [r4, #0]
 80092c8:	f8c0 9000 	str.w	r9, [r0]
 80092cc:	4604      	mov	r4, r0
 80092ce:	e7e4      	b.n	800929a <__pow5mult+0x6a>
 80092d0:	4638      	mov	r0, r7
 80092d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092d6:	bf00      	nop
 80092d8:	0800acc8 	.word	0x0800acc8
 80092dc:	0800aa7e 	.word	0x0800aa7e
 80092e0:	0800ab7c 	.word	0x0800ab7c

080092e4 <__lshift>:
 80092e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092e8:	460c      	mov	r4, r1
 80092ea:	4607      	mov	r7, r0
 80092ec:	4691      	mov	r9, r2
 80092ee:	6923      	ldr	r3, [r4, #16]
 80092f0:	6849      	ldr	r1, [r1, #4]
 80092f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80092f6:	68a3      	ldr	r3, [r4, #8]
 80092f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80092fc:	f108 0601 	add.w	r6, r8, #1
 8009300:	42b3      	cmp	r3, r6
 8009302:	db0b      	blt.n	800931c <__lshift+0x38>
 8009304:	4638      	mov	r0, r7
 8009306:	f7ff fd95 	bl	8008e34 <_Balloc>
 800930a:	4605      	mov	r5, r0
 800930c:	b948      	cbnz	r0, 8009322 <__lshift+0x3e>
 800930e:	4602      	mov	r2, r0
 8009310:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009314:	4b29      	ldr	r3, [pc, #164]	; (80093bc <__lshift+0xd8>)
 8009316:	482a      	ldr	r0, [pc, #168]	; (80093c0 <__lshift+0xdc>)
 8009318:	f000 fcc8 	bl	8009cac <__assert_func>
 800931c:	3101      	adds	r1, #1
 800931e:	005b      	lsls	r3, r3, #1
 8009320:	e7ee      	b.n	8009300 <__lshift+0x1c>
 8009322:	2300      	movs	r3, #0
 8009324:	f100 0114 	add.w	r1, r0, #20
 8009328:	f100 0210 	add.w	r2, r0, #16
 800932c:	4618      	mov	r0, r3
 800932e:	4553      	cmp	r3, sl
 8009330:	db37      	blt.n	80093a2 <__lshift+0xbe>
 8009332:	6920      	ldr	r0, [r4, #16]
 8009334:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009338:	f104 0314 	add.w	r3, r4, #20
 800933c:	f019 091f 	ands.w	r9, r9, #31
 8009340:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009344:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009348:	d02f      	beq.n	80093aa <__lshift+0xc6>
 800934a:	468a      	mov	sl, r1
 800934c:	f04f 0c00 	mov.w	ip, #0
 8009350:	f1c9 0e20 	rsb	lr, r9, #32
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	fa02 f209 	lsl.w	r2, r2, r9
 800935a:	ea42 020c 	orr.w	r2, r2, ip
 800935e:	f84a 2b04 	str.w	r2, [sl], #4
 8009362:	f853 2b04 	ldr.w	r2, [r3], #4
 8009366:	4298      	cmp	r0, r3
 8009368:	fa22 fc0e 	lsr.w	ip, r2, lr
 800936c:	d8f2      	bhi.n	8009354 <__lshift+0x70>
 800936e:	1b03      	subs	r3, r0, r4
 8009370:	3b15      	subs	r3, #21
 8009372:	f023 0303 	bic.w	r3, r3, #3
 8009376:	3304      	adds	r3, #4
 8009378:	f104 0215 	add.w	r2, r4, #21
 800937c:	4290      	cmp	r0, r2
 800937e:	bf38      	it	cc
 8009380:	2304      	movcc	r3, #4
 8009382:	f841 c003 	str.w	ip, [r1, r3]
 8009386:	f1bc 0f00 	cmp.w	ip, #0
 800938a:	d001      	beq.n	8009390 <__lshift+0xac>
 800938c:	f108 0602 	add.w	r6, r8, #2
 8009390:	3e01      	subs	r6, #1
 8009392:	4638      	mov	r0, r7
 8009394:	4621      	mov	r1, r4
 8009396:	612e      	str	r6, [r5, #16]
 8009398:	f7ff fd8c 	bl	8008eb4 <_Bfree>
 800939c:	4628      	mov	r0, r5
 800939e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80093a6:	3301      	adds	r3, #1
 80093a8:	e7c1      	b.n	800932e <__lshift+0x4a>
 80093aa:	3904      	subs	r1, #4
 80093ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80093b0:	4298      	cmp	r0, r3
 80093b2:	f841 2f04 	str.w	r2, [r1, #4]!
 80093b6:	d8f9      	bhi.n	80093ac <__lshift+0xc8>
 80093b8:	e7ea      	b.n	8009390 <__lshift+0xac>
 80093ba:	bf00      	nop
 80093bc:	0800aaf0 	.word	0x0800aaf0
 80093c0:	0800ab7c 	.word	0x0800ab7c

080093c4 <__mcmp>:
 80093c4:	4603      	mov	r3, r0
 80093c6:	690a      	ldr	r2, [r1, #16]
 80093c8:	6900      	ldr	r0, [r0, #16]
 80093ca:	b530      	push	{r4, r5, lr}
 80093cc:	1a80      	subs	r0, r0, r2
 80093ce:	d10d      	bne.n	80093ec <__mcmp+0x28>
 80093d0:	3314      	adds	r3, #20
 80093d2:	3114      	adds	r1, #20
 80093d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80093d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80093dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80093e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80093e4:	4295      	cmp	r5, r2
 80093e6:	d002      	beq.n	80093ee <__mcmp+0x2a>
 80093e8:	d304      	bcc.n	80093f4 <__mcmp+0x30>
 80093ea:	2001      	movs	r0, #1
 80093ec:	bd30      	pop	{r4, r5, pc}
 80093ee:	42a3      	cmp	r3, r4
 80093f0:	d3f4      	bcc.n	80093dc <__mcmp+0x18>
 80093f2:	e7fb      	b.n	80093ec <__mcmp+0x28>
 80093f4:	f04f 30ff 	mov.w	r0, #4294967295
 80093f8:	e7f8      	b.n	80093ec <__mcmp+0x28>
	...

080093fc <__mdiff>:
 80093fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009400:	460d      	mov	r5, r1
 8009402:	4607      	mov	r7, r0
 8009404:	4611      	mov	r1, r2
 8009406:	4628      	mov	r0, r5
 8009408:	4614      	mov	r4, r2
 800940a:	f7ff ffdb 	bl	80093c4 <__mcmp>
 800940e:	1e06      	subs	r6, r0, #0
 8009410:	d111      	bne.n	8009436 <__mdiff+0x3a>
 8009412:	4631      	mov	r1, r6
 8009414:	4638      	mov	r0, r7
 8009416:	f7ff fd0d 	bl	8008e34 <_Balloc>
 800941a:	4602      	mov	r2, r0
 800941c:	b928      	cbnz	r0, 800942a <__mdiff+0x2e>
 800941e:	f240 2132 	movw	r1, #562	; 0x232
 8009422:	4b3a      	ldr	r3, [pc, #232]	; (800950c <__mdiff+0x110>)
 8009424:	483a      	ldr	r0, [pc, #232]	; (8009510 <__mdiff+0x114>)
 8009426:	f000 fc41 	bl	8009cac <__assert_func>
 800942a:	2301      	movs	r3, #1
 800942c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009430:	4610      	mov	r0, r2
 8009432:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009436:	bfa4      	itt	ge
 8009438:	4623      	movge	r3, r4
 800943a:	462c      	movge	r4, r5
 800943c:	4638      	mov	r0, r7
 800943e:	6861      	ldr	r1, [r4, #4]
 8009440:	bfa6      	itte	ge
 8009442:	461d      	movge	r5, r3
 8009444:	2600      	movge	r6, #0
 8009446:	2601      	movlt	r6, #1
 8009448:	f7ff fcf4 	bl	8008e34 <_Balloc>
 800944c:	4602      	mov	r2, r0
 800944e:	b918      	cbnz	r0, 8009458 <__mdiff+0x5c>
 8009450:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009454:	4b2d      	ldr	r3, [pc, #180]	; (800950c <__mdiff+0x110>)
 8009456:	e7e5      	b.n	8009424 <__mdiff+0x28>
 8009458:	f102 0814 	add.w	r8, r2, #20
 800945c:	46c2      	mov	sl, r8
 800945e:	f04f 0c00 	mov.w	ip, #0
 8009462:	6927      	ldr	r7, [r4, #16]
 8009464:	60c6      	str	r6, [r0, #12]
 8009466:	692e      	ldr	r6, [r5, #16]
 8009468:	f104 0014 	add.w	r0, r4, #20
 800946c:	f105 0914 	add.w	r9, r5, #20
 8009470:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009474:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009478:	3410      	adds	r4, #16
 800947a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800947e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009482:	fa1f f18b 	uxth.w	r1, fp
 8009486:	448c      	add	ip, r1
 8009488:	b299      	uxth	r1, r3
 800948a:	0c1b      	lsrs	r3, r3, #16
 800948c:	ebac 0101 	sub.w	r1, ip, r1
 8009490:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009494:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009498:	b289      	uxth	r1, r1
 800949a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800949e:	454e      	cmp	r6, r9
 80094a0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80094a4:	f84a 3b04 	str.w	r3, [sl], #4
 80094a8:	d8e7      	bhi.n	800947a <__mdiff+0x7e>
 80094aa:	1b73      	subs	r3, r6, r5
 80094ac:	3b15      	subs	r3, #21
 80094ae:	f023 0303 	bic.w	r3, r3, #3
 80094b2:	3515      	adds	r5, #21
 80094b4:	3304      	adds	r3, #4
 80094b6:	42ae      	cmp	r6, r5
 80094b8:	bf38      	it	cc
 80094ba:	2304      	movcc	r3, #4
 80094bc:	4418      	add	r0, r3
 80094be:	4443      	add	r3, r8
 80094c0:	461e      	mov	r6, r3
 80094c2:	4605      	mov	r5, r0
 80094c4:	4575      	cmp	r5, lr
 80094c6:	d30e      	bcc.n	80094e6 <__mdiff+0xea>
 80094c8:	f10e 0103 	add.w	r1, lr, #3
 80094cc:	1a09      	subs	r1, r1, r0
 80094ce:	f021 0103 	bic.w	r1, r1, #3
 80094d2:	3803      	subs	r0, #3
 80094d4:	4586      	cmp	lr, r0
 80094d6:	bf38      	it	cc
 80094d8:	2100      	movcc	r1, #0
 80094da:	4419      	add	r1, r3
 80094dc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80094e0:	b18b      	cbz	r3, 8009506 <__mdiff+0x10a>
 80094e2:	6117      	str	r7, [r2, #16]
 80094e4:	e7a4      	b.n	8009430 <__mdiff+0x34>
 80094e6:	f855 8b04 	ldr.w	r8, [r5], #4
 80094ea:	fa1f f188 	uxth.w	r1, r8
 80094ee:	4461      	add	r1, ip
 80094f0:	140c      	asrs	r4, r1, #16
 80094f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80094f6:	b289      	uxth	r1, r1
 80094f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80094fc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009500:	f846 1b04 	str.w	r1, [r6], #4
 8009504:	e7de      	b.n	80094c4 <__mdiff+0xc8>
 8009506:	3f01      	subs	r7, #1
 8009508:	e7e8      	b.n	80094dc <__mdiff+0xe0>
 800950a:	bf00      	nop
 800950c:	0800aaf0 	.word	0x0800aaf0
 8009510:	0800ab7c 	.word	0x0800ab7c

08009514 <__ulp>:
 8009514:	4b11      	ldr	r3, [pc, #68]	; (800955c <__ulp+0x48>)
 8009516:	400b      	ands	r3, r1
 8009518:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800951c:	2b00      	cmp	r3, #0
 800951e:	dd02      	ble.n	8009526 <__ulp+0x12>
 8009520:	2000      	movs	r0, #0
 8009522:	4619      	mov	r1, r3
 8009524:	4770      	bx	lr
 8009526:	425b      	negs	r3, r3
 8009528:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800952c:	f04f 0000 	mov.w	r0, #0
 8009530:	f04f 0100 	mov.w	r1, #0
 8009534:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009538:	da04      	bge.n	8009544 <__ulp+0x30>
 800953a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800953e:	fa43 f102 	asr.w	r1, r3, r2
 8009542:	4770      	bx	lr
 8009544:	f1a2 0314 	sub.w	r3, r2, #20
 8009548:	2b1e      	cmp	r3, #30
 800954a:	bfd6      	itet	le
 800954c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009550:	2301      	movgt	r3, #1
 8009552:	fa22 f303 	lsrle.w	r3, r2, r3
 8009556:	4618      	mov	r0, r3
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop
 800955c:	7ff00000 	.word	0x7ff00000

08009560 <__b2d>:
 8009560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009564:	6907      	ldr	r7, [r0, #16]
 8009566:	f100 0914 	add.w	r9, r0, #20
 800956a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800956e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009572:	f1a7 0804 	sub.w	r8, r7, #4
 8009576:	4630      	mov	r0, r6
 8009578:	f7ff fd4e 	bl	8009018 <__hi0bits>
 800957c:	f1c0 0320 	rsb	r3, r0, #32
 8009580:	280a      	cmp	r0, #10
 8009582:	600b      	str	r3, [r1, #0]
 8009584:	491f      	ldr	r1, [pc, #124]	; (8009604 <__b2d+0xa4>)
 8009586:	dc17      	bgt.n	80095b8 <__b2d+0x58>
 8009588:	45c1      	cmp	r9, r8
 800958a:	bf28      	it	cs
 800958c:	2200      	movcs	r2, #0
 800958e:	f1c0 0c0b 	rsb	ip, r0, #11
 8009592:	fa26 f30c 	lsr.w	r3, r6, ip
 8009596:	bf38      	it	cc
 8009598:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800959c:	ea43 0501 	orr.w	r5, r3, r1
 80095a0:	f100 0315 	add.w	r3, r0, #21
 80095a4:	fa06 f303 	lsl.w	r3, r6, r3
 80095a8:	fa22 f20c 	lsr.w	r2, r2, ip
 80095ac:	ea43 0402 	orr.w	r4, r3, r2
 80095b0:	4620      	mov	r0, r4
 80095b2:	4629      	mov	r1, r5
 80095b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095b8:	45c1      	cmp	r9, r8
 80095ba:	bf2e      	itee	cs
 80095bc:	2200      	movcs	r2, #0
 80095be:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80095c2:	f1a7 0808 	subcc.w	r8, r7, #8
 80095c6:	f1b0 030b 	subs.w	r3, r0, #11
 80095ca:	d016      	beq.n	80095fa <__b2d+0x9a>
 80095cc:	f1c3 0720 	rsb	r7, r3, #32
 80095d0:	fa22 f107 	lsr.w	r1, r2, r7
 80095d4:	45c8      	cmp	r8, r9
 80095d6:	fa06 f603 	lsl.w	r6, r6, r3
 80095da:	ea46 0601 	orr.w	r6, r6, r1
 80095de:	bf94      	ite	ls
 80095e0:	2100      	movls	r1, #0
 80095e2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80095e6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80095ea:	fa02 f003 	lsl.w	r0, r2, r3
 80095ee:	40f9      	lsrs	r1, r7
 80095f0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80095f4:	ea40 0401 	orr.w	r4, r0, r1
 80095f8:	e7da      	b.n	80095b0 <__b2d+0x50>
 80095fa:	4614      	mov	r4, r2
 80095fc:	ea46 0501 	orr.w	r5, r6, r1
 8009600:	e7d6      	b.n	80095b0 <__b2d+0x50>
 8009602:	bf00      	nop
 8009604:	3ff00000 	.word	0x3ff00000

08009608 <__d2b>:
 8009608:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800960c:	2101      	movs	r1, #1
 800960e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009612:	4690      	mov	r8, r2
 8009614:	461d      	mov	r5, r3
 8009616:	f7ff fc0d 	bl	8008e34 <_Balloc>
 800961a:	4604      	mov	r4, r0
 800961c:	b930      	cbnz	r0, 800962c <__d2b+0x24>
 800961e:	4602      	mov	r2, r0
 8009620:	f240 310a 	movw	r1, #778	; 0x30a
 8009624:	4b24      	ldr	r3, [pc, #144]	; (80096b8 <__d2b+0xb0>)
 8009626:	4825      	ldr	r0, [pc, #148]	; (80096bc <__d2b+0xb4>)
 8009628:	f000 fb40 	bl	8009cac <__assert_func>
 800962c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009630:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009634:	bb2d      	cbnz	r5, 8009682 <__d2b+0x7a>
 8009636:	9301      	str	r3, [sp, #4]
 8009638:	f1b8 0300 	subs.w	r3, r8, #0
 800963c:	d026      	beq.n	800968c <__d2b+0x84>
 800963e:	4668      	mov	r0, sp
 8009640:	9300      	str	r3, [sp, #0]
 8009642:	f7ff fd09 	bl	8009058 <__lo0bits>
 8009646:	9900      	ldr	r1, [sp, #0]
 8009648:	b1f0      	cbz	r0, 8009688 <__d2b+0x80>
 800964a:	9a01      	ldr	r2, [sp, #4]
 800964c:	f1c0 0320 	rsb	r3, r0, #32
 8009650:	fa02 f303 	lsl.w	r3, r2, r3
 8009654:	430b      	orrs	r3, r1
 8009656:	40c2      	lsrs	r2, r0
 8009658:	6163      	str	r3, [r4, #20]
 800965a:	9201      	str	r2, [sp, #4]
 800965c:	9b01      	ldr	r3, [sp, #4]
 800965e:	2b00      	cmp	r3, #0
 8009660:	bf14      	ite	ne
 8009662:	2102      	movne	r1, #2
 8009664:	2101      	moveq	r1, #1
 8009666:	61a3      	str	r3, [r4, #24]
 8009668:	6121      	str	r1, [r4, #16]
 800966a:	b1c5      	cbz	r5, 800969e <__d2b+0x96>
 800966c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009670:	4405      	add	r5, r0
 8009672:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009676:	603d      	str	r5, [r7, #0]
 8009678:	6030      	str	r0, [r6, #0]
 800967a:	4620      	mov	r0, r4
 800967c:	b002      	add	sp, #8
 800967e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009686:	e7d6      	b.n	8009636 <__d2b+0x2e>
 8009688:	6161      	str	r1, [r4, #20]
 800968a:	e7e7      	b.n	800965c <__d2b+0x54>
 800968c:	a801      	add	r0, sp, #4
 800968e:	f7ff fce3 	bl	8009058 <__lo0bits>
 8009692:	2101      	movs	r1, #1
 8009694:	9b01      	ldr	r3, [sp, #4]
 8009696:	6121      	str	r1, [r4, #16]
 8009698:	6163      	str	r3, [r4, #20]
 800969a:	3020      	adds	r0, #32
 800969c:	e7e5      	b.n	800966a <__d2b+0x62>
 800969e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80096a2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80096a6:	6038      	str	r0, [r7, #0]
 80096a8:	6918      	ldr	r0, [r3, #16]
 80096aa:	f7ff fcb5 	bl	8009018 <__hi0bits>
 80096ae:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80096b2:	6031      	str	r1, [r6, #0]
 80096b4:	e7e1      	b.n	800967a <__d2b+0x72>
 80096b6:	bf00      	nop
 80096b8:	0800aaf0 	.word	0x0800aaf0
 80096bc:	0800ab7c 	.word	0x0800ab7c

080096c0 <__ratio>:
 80096c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c4:	4688      	mov	r8, r1
 80096c6:	4669      	mov	r1, sp
 80096c8:	4681      	mov	r9, r0
 80096ca:	f7ff ff49 	bl	8009560 <__b2d>
 80096ce:	460f      	mov	r7, r1
 80096d0:	4604      	mov	r4, r0
 80096d2:	460d      	mov	r5, r1
 80096d4:	4640      	mov	r0, r8
 80096d6:	a901      	add	r1, sp, #4
 80096d8:	f7ff ff42 	bl	8009560 <__b2d>
 80096dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80096e0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80096e4:	468b      	mov	fp, r1
 80096e6:	eba3 0c02 	sub.w	ip, r3, r2
 80096ea:	e9dd 3200 	ldrd	r3, r2, [sp]
 80096ee:	1a9b      	subs	r3, r3, r2
 80096f0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	bfd5      	itete	le
 80096f8:	460a      	movle	r2, r1
 80096fa:	462a      	movgt	r2, r5
 80096fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009700:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009704:	bfd8      	it	le
 8009706:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800970a:	465b      	mov	r3, fp
 800970c:	4602      	mov	r2, r0
 800970e:	4639      	mov	r1, r7
 8009710:	4620      	mov	r0, r4
 8009712:	f7f7 f80b 	bl	800072c <__aeabi_ddiv>
 8009716:	b003      	add	sp, #12
 8009718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800971c <__copybits>:
 800971c:	3901      	subs	r1, #1
 800971e:	b570      	push	{r4, r5, r6, lr}
 8009720:	1149      	asrs	r1, r1, #5
 8009722:	6914      	ldr	r4, [r2, #16]
 8009724:	3101      	adds	r1, #1
 8009726:	f102 0314 	add.w	r3, r2, #20
 800972a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800972e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009732:	1f05      	subs	r5, r0, #4
 8009734:	42a3      	cmp	r3, r4
 8009736:	d30c      	bcc.n	8009752 <__copybits+0x36>
 8009738:	1aa3      	subs	r3, r4, r2
 800973a:	3b11      	subs	r3, #17
 800973c:	f023 0303 	bic.w	r3, r3, #3
 8009740:	3211      	adds	r2, #17
 8009742:	42a2      	cmp	r2, r4
 8009744:	bf88      	it	hi
 8009746:	2300      	movhi	r3, #0
 8009748:	4418      	add	r0, r3
 800974a:	2300      	movs	r3, #0
 800974c:	4288      	cmp	r0, r1
 800974e:	d305      	bcc.n	800975c <__copybits+0x40>
 8009750:	bd70      	pop	{r4, r5, r6, pc}
 8009752:	f853 6b04 	ldr.w	r6, [r3], #4
 8009756:	f845 6f04 	str.w	r6, [r5, #4]!
 800975a:	e7eb      	b.n	8009734 <__copybits+0x18>
 800975c:	f840 3b04 	str.w	r3, [r0], #4
 8009760:	e7f4      	b.n	800974c <__copybits+0x30>

08009762 <__any_on>:
 8009762:	f100 0214 	add.w	r2, r0, #20
 8009766:	6900      	ldr	r0, [r0, #16]
 8009768:	114b      	asrs	r3, r1, #5
 800976a:	4298      	cmp	r0, r3
 800976c:	b510      	push	{r4, lr}
 800976e:	db11      	blt.n	8009794 <__any_on+0x32>
 8009770:	dd0a      	ble.n	8009788 <__any_on+0x26>
 8009772:	f011 011f 	ands.w	r1, r1, #31
 8009776:	d007      	beq.n	8009788 <__any_on+0x26>
 8009778:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800977c:	fa24 f001 	lsr.w	r0, r4, r1
 8009780:	fa00 f101 	lsl.w	r1, r0, r1
 8009784:	428c      	cmp	r4, r1
 8009786:	d10b      	bne.n	80097a0 <__any_on+0x3e>
 8009788:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800978c:	4293      	cmp	r3, r2
 800978e:	d803      	bhi.n	8009798 <__any_on+0x36>
 8009790:	2000      	movs	r0, #0
 8009792:	bd10      	pop	{r4, pc}
 8009794:	4603      	mov	r3, r0
 8009796:	e7f7      	b.n	8009788 <__any_on+0x26>
 8009798:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800979c:	2900      	cmp	r1, #0
 800979e:	d0f5      	beq.n	800978c <__any_on+0x2a>
 80097a0:	2001      	movs	r0, #1
 80097a2:	e7f6      	b.n	8009792 <__any_on+0x30>

080097a4 <_calloc_r>:
 80097a4:	b570      	push	{r4, r5, r6, lr}
 80097a6:	fba1 5402 	umull	r5, r4, r1, r2
 80097aa:	b934      	cbnz	r4, 80097ba <_calloc_r+0x16>
 80097ac:	4629      	mov	r1, r5
 80097ae:	f000 f875 	bl	800989c <_malloc_r>
 80097b2:	4606      	mov	r6, r0
 80097b4:	b928      	cbnz	r0, 80097c2 <_calloc_r+0x1e>
 80097b6:	4630      	mov	r0, r6
 80097b8:	bd70      	pop	{r4, r5, r6, pc}
 80097ba:	220c      	movs	r2, #12
 80097bc:	2600      	movs	r6, #0
 80097be:	6002      	str	r2, [r0, #0]
 80097c0:	e7f9      	b.n	80097b6 <_calloc_r+0x12>
 80097c2:	462a      	mov	r2, r5
 80097c4:	4621      	mov	r1, r4
 80097c6:	f7fc fdbd 	bl	8006344 <memset>
 80097ca:	e7f4      	b.n	80097b6 <_calloc_r+0x12>

080097cc <_free_r>:
 80097cc:	b538      	push	{r3, r4, r5, lr}
 80097ce:	4605      	mov	r5, r0
 80097d0:	2900      	cmp	r1, #0
 80097d2:	d040      	beq.n	8009856 <_free_r+0x8a>
 80097d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097d8:	1f0c      	subs	r4, r1, #4
 80097da:	2b00      	cmp	r3, #0
 80097dc:	bfb8      	it	lt
 80097de:	18e4      	addlt	r4, r4, r3
 80097e0:	f000 faae 	bl	8009d40 <__malloc_lock>
 80097e4:	4a1c      	ldr	r2, [pc, #112]	; (8009858 <_free_r+0x8c>)
 80097e6:	6813      	ldr	r3, [r2, #0]
 80097e8:	b933      	cbnz	r3, 80097f8 <_free_r+0x2c>
 80097ea:	6063      	str	r3, [r4, #4]
 80097ec:	6014      	str	r4, [r2, #0]
 80097ee:	4628      	mov	r0, r5
 80097f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097f4:	f000 baaa 	b.w	8009d4c <__malloc_unlock>
 80097f8:	42a3      	cmp	r3, r4
 80097fa:	d908      	bls.n	800980e <_free_r+0x42>
 80097fc:	6820      	ldr	r0, [r4, #0]
 80097fe:	1821      	adds	r1, r4, r0
 8009800:	428b      	cmp	r3, r1
 8009802:	bf01      	itttt	eq
 8009804:	6819      	ldreq	r1, [r3, #0]
 8009806:	685b      	ldreq	r3, [r3, #4]
 8009808:	1809      	addeq	r1, r1, r0
 800980a:	6021      	streq	r1, [r4, #0]
 800980c:	e7ed      	b.n	80097ea <_free_r+0x1e>
 800980e:	461a      	mov	r2, r3
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	b10b      	cbz	r3, 8009818 <_free_r+0x4c>
 8009814:	42a3      	cmp	r3, r4
 8009816:	d9fa      	bls.n	800980e <_free_r+0x42>
 8009818:	6811      	ldr	r1, [r2, #0]
 800981a:	1850      	adds	r0, r2, r1
 800981c:	42a0      	cmp	r0, r4
 800981e:	d10b      	bne.n	8009838 <_free_r+0x6c>
 8009820:	6820      	ldr	r0, [r4, #0]
 8009822:	4401      	add	r1, r0
 8009824:	1850      	adds	r0, r2, r1
 8009826:	4283      	cmp	r3, r0
 8009828:	6011      	str	r1, [r2, #0]
 800982a:	d1e0      	bne.n	80097ee <_free_r+0x22>
 800982c:	6818      	ldr	r0, [r3, #0]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	4401      	add	r1, r0
 8009832:	6011      	str	r1, [r2, #0]
 8009834:	6053      	str	r3, [r2, #4]
 8009836:	e7da      	b.n	80097ee <_free_r+0x22>
 8009838:	d902      	bls.n	8009840 <_free_r+0x74>
 800983a:	230c      	movs	r3, #12
 800983c:	602b      	str	r3, [r5, #0]
 800983e:	e7d6      	b.n	80097ee <_free_r+0x22>
 8009840:	6820      	ldr	r0, [r4, #0]
 8009842:	1821      	adds	r1, r4, r0
 8009844:	428b      	cmp	r3, r1
 8009846:	bf01      	itttt	eq
 8009848:	6819      	ldreq	r1, [r3, #0]
 800984a:	685b      	ldreq	r3, [r3, #4]
 800984c:	1809      	addeq	r1, r1, r0
 800984e:	6021      	streq	r1, [r4, #0]
 8009850:	6063      	str	r3, [r4, #4]
 8009852:	6054      	str	r4, [r2, #4]
 8009854:	e7cb      	b.n	80097ee <_free_r+0x22>
 8009856:	bd38      	pop	{r3, r4, r5, pc}
 8009858:	2000044c 	.word	0x2000044c

0800985c <sbrk_aligned>:
 800985c:	b570      	push	{r4, r5, r6, lr}
 800985e:	4e0e      	ldr	r6, [pc, #56]	; (8009898 <sbrk_aligned+0x3c>)
 8009860:	460c      	mov	r4, r1
 8009862:	6831      	ldr	r1, [r6, #0]
 8009864:	4605      	mov	r5, r0
 8009866:	b911      	cbnz	r1, 800986e <sbrk_aligned+0x12>
 8009868:	f000 f9ee 	bl	8009c48 <_sbrk_r>
 800986c:	6030      	str	r0, [r6, #0]
 800986e:	4621      	mov	r1, r4
 8009870:	4628      	mov	r0, r5
 8009872:	f000 f9e9 	bl	8009c48 <_sbrk_r>
 8009876:	1c43      	adds	r3, r0, #1
 8009878:	d00a      	beq.n	8009890 <sbrk_aligned+0x34>
 800987a:	1cc4      	adds	r4, r0, #3
 800987c:	f024 0403 	bic.w	r4, r4, #3
 8009880:	42a0      	cmp	r0, r4
 8009882:	d007      	beq.n	8009894 <sbrk_aligned+0x38>
 8009884:	1a21      	subs	r1, r4, r0
 8009886:	4628      	mov	r0, r5
 8009888:	f000 f9de 	bl	8009c48 <_sbrk_r>
 800988c:	3001      	adds	r0, #1
 800988e:	d101      	bne.n	8009894 <sbrk_aligned+0x38>
 8009890:	f04f 34ff 	mov.w	r4, #4294967295
 8009894:	4620      	mov	r0, r4
 8009896:	bd70      	pop	{r4, r5, r6, pc}
 8009898:	20000450 	.word	0x20000450

0800989c <_malloc_r>:
 800989c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098a0:	1ccd      	adds	r5, r1, #3
 80098a2:	f025 0503 	bic.w	r5, r5, #3
 80098a6:	3508      	adds	r5, #8
 80098a8:	2d0c      	cmp	r5, #12
 80098aa:	bf38      	it	cc
 80098ac:	250c      	movcc	r5, #12
 80098ae:	2d00      	cmp	r5, #0
 80098b0:	4607      	mov	r7, r0
 80098b2:	db01      	blt.n	80098b8 <_malloc_r+0x1c>
 80098b4:	42a9      	cmp	r1, r5
 80098b6:	d905      	bls.n	80098c4 <_malloc_r+0x28>
 80098b8:	230c      	movs	r3, #12
 80098ba:	2600      	movs	r6, #0
 80098bc:	603b      	str	r3, [r7, #0]
 80098be:	4630      	mov	r0, r6
 80098c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098c4:	4e2e      	ldr	r6, [pc, #184]	; (8009980 <_malloc_r+0xe4>)
 80098c6:	f000 fa3b 	bl	8009d40 <__malloc_lock>
 80098ca:	6833      	ldr	r3, [r6, #0]
 80098cc:	461c      	mov	r4, r3
 80098ce:	bb34      	cbnz	r4, 800991e <_malloc_r+0x82>
 80098d0:	4629      	mov	r1, r5
 80098d2:	4638      	mov	r0, r7
 80098d4:	f7ff ffc2 	bl	800985c <sbrk_aligned>
 80098d8:	1c43      	adds	r3, r0, #1
 80098da:	4604      	mov	r4, r0
 80098dc:	d14d      	bne.n	800997a <_malloc_r+0xde>
 80098de:	6834      	ldr	r4, [r6, #0]
 80098e0:	4626      	mov	r6, r4
 80098e2:	2e00      	cmp	r6, #0
 80098e4:	d140      	bne.n	8009968 <_malloc_r+0xcc>
 80098e6:	6823      	ldr	r3, [r4, #0]
 80098e8:	4631      	mov	r1, r6
 80098ea:	4638      	mov	r0, r7
 80098ec:	eb04 0803 	add.w	r8, r4, r3
 80098f0:	f000 f9aa 	bl	8009c48 <_sbrk_r>
 80098f4:	4580      	cmp	r8, r0
 80098f6:	d13a      	bne.n	800996e <_malloc_r+0xd2>
 80098f8:	6821      	ldr	r1, [r4, #0]
 80098fa:	3503      	adds	r5, #3
 80098fc:	1a6d      	subs	r5, r5, r1
 80098fe:	f025 0503 	bic.w	r5, r5, #3
 8009902:	3508      	adds	r5, #8
 8009904:	2d0c      	cmp	r5, #12
 8009906:	bf38      	it	cc
 8009908:	250c      	movcc	r5, #12
 800990a:	4638      	mov	r0, r7
 800990c:	4629      	mov	r1, r5
 800990e:	f7ff ffa5 	bl	800985c <sbrk_aligned>
 8009912:	3001      	adds	r0, #1
 8009914:	d02b      	beq.n	800996e <_malloc_r+0xd2>
 8009916:	6823      	ldr	r3, [r4, #0]
 8009918:	442b      	add	r3, r5
 800991a:	6023      	str	r3, [r4, #0]
 800991c:	e00e      	b.n	800993c <_malloc_r+0xa0>
 800991e:	6822      	ldr	r2, [r4, #0]
 8009920:	1b52      	subs	r2, r2, r5
 8009922:	d41e      	bmi.n	8009962 <_malloc_r+0xc6>
 8009924:	2a0b      	cmp	r2, #11
 8009926:	d916      	bls.n	8009956 <_malloc_r+0xba>
 8009928:	1961      	adds	r1, r4, r5
 800992a:	42a3      	cmp	r3, r4
 800992c:	6025      	str	r5, [r4, #0]
 800992e:	bf18      	it	ne
 8009930:	6059      	strne	r1, [r3, #4]
 8009932:	6863      	ldr	r3, [r4, #4]
 8009934:	bf08      	it	eq
 8009936:	6031      	streq	r1, [r6, #0]
 8009938:	5162      	str	r2, [r4, r5]
 800993a:	604b      	str	r3, [r1, #4]
 800993c:	4638      	mov	r0, r7
 800993e:	f104 060b 	add.w	r6, r4, #11
 8009942:	f000 fa03 	bl	8009d4c <__malloc_unlock>
 8009946:	f026 0607 	bic.w	r6, r6, #7
 800994a:	1d23      	adds	r3, r4, #4
 800994c:	1af2      	subs	r2, r6, r3
 800994e:	d0b6      	beq.n	80098be <_malloc_r+0x22>
 8009950:	1b9b      	subs	r3, r3, r6
 8009952:	50a3      	str	r3, [r4, r2]
 8009954:	e7b3      	b.n	80098be <_malloc_r+0x22>
 8009956:	6862      	ldr	r2, [r4, #4]
 8009958:	42a3      	cmp	r3, r4
 800995a:	bf0c      	ite	eq
 800995c:	6032      	streq	r2, [r6, #0]
 800995e:	605a      	strne	r2, [r3, #4]
 8009960:	e7ec      	b.n	800993c <_malloc_r+0xa0>
 8009962:	4623      	mov	r3, r4
 8009964:	6864      	ldr	r4, [r4, #4]
 8009966:	e7b2      	b.n	80098ce <_malloc_r+0x32>
 8009968:	4634      	mov	r4, r6
 800996a:	6876      	ldr	r6, [r6, #4]
 800996c:	e7b9      	b.n	80098e2 <_malloc_r+0x46>
 800996e:	230c      	movs	r3, #12
 8009970:	4638      	mov	r0, r7
 8009972:	603b      	str	r3, [r7, #0]
 8009974:	f000 f9ea 	bl	8009d4c <__malloc_unlock>
 8009978:	e7a1      	b.n	80098be <_malloc_r+0x22>
 800997a:	6025      	str	r5, [r4, #0]
 800997c:	e7de      	b.n	800993c <_malloc_r+0xa0>
 800997e:	bf00      	nop
 8009980:	2000044c 	.word	0x2000044c

08009984 <__ssputs_r>:
 8009984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009988:	688e      	ldr	r6, [r1, #8]
 800998a:	4682      	mov	sl, r0
 800998c:	429e      	cmp	r6, r3
 800998e:	460c      	mov	r4, r1
 8009990:	4690      	mov	r8, r2
 8009992:	461f      	mov	r7, r3
 8009994:	d838      	bhi.n	8009a08 <__ssputs_r+0x84>
 8009996:	898a      	ldrh	r2, [r1, #12]
 8009998:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800999c:	d032      	beq.n	8009a04 <__ssputs_r+0x80>
 800999e:	6825      	ldr	r5, [r4, #0]
 80099a0:	6909      	ldr	r1, [r1, #16]
 80099a2:	3301      	adds	r3, #1
 80099a4:	eba5 0901 	sub.w	r9, r5, r1
 80099a8:	6965      	ldr	r5, [r4, #20]
 80099aa:	444b      	add	r3, r9
 80099ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099b4:	106d      	asrs	r5, r5, #1
 80099b6:	429d      	cmp	r5, r3
 80099b8:	bf38      	it	cc
 80099ba:	461d      	movcc	r5, r3
 80099bc:	0553      	lsls	r3, r2, #21
 80099be:	d531      	bpl.n	8009a24 <__ssputs_r+0xa0>
 80099c0:	4629      	mov	r1, r5
 80099c2:	f7ff ff6b 	bl	800989c <_malloc_r>
 80099c6:	4606      	mov	r6, r0
 80099c8:	b950      	cbnz	r0, 80099e0 <__ssputs_r+0x5c>
 80099ca:	230c      	movs	r3, #12
 80099cc:	f04f 30ff 	mov.w	r0, #4294967295
 80099d0:	f8ca 3000 	str.w	r3, [sl]
 80099d4:	89a3      	ldrh	r3, [r4, #12]
 80099d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099da:	81a3      	strh	r3, [r4, #12]
 80099dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099e0:	464a      	mov	r2, r9
 80099e2:	6921      	ldr	r1, [r4, #16]
 80099e4:	f7ff fa18 	bl	8008e18 <memcpy>
 80099e8:	89a3      	ldrh	r3, [r4, #12]
 80099ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80099ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099f2:	81a3      	strh	r3, [r4, #12]
 80099f4:	6126      	str	r6, [r4, #16]
 80099f6:	444e      	add	r6, r9
 80099f8:	6026      	str	r6, [r4, #0]
 80099fa:	463e      	mov	r6, r7
 80099fc:	6165      	str	r5, [r4, #20]
 80099fe:	eba5 0509 	sub.w	r5, r5, r9
 8009a02:	60a5      	str	r5, [r4, #8]
 8009a04:	42be      	cmp	r6, r7
 8009a06:	d900      	bls.n	8009a0a <__ssputs_r+0x86>
 8009a08:	463e      	mov	r6, r7
 8009a0a:	4632      	mov	r2, r6
 8009a0c:	4641      	mov	r1, r8
 8009a0e:	6820      	ldr	r0, [r4, #0]
 8009a10:	f000 f97c 	bl	8009d0c <memmove>
 8009a14:	68a3      	ldr	r3, [r4, #8]
 8009a16:	2000      	movs	r0, #0
 8009a18:	1b9b      	subs	r3, r3, r6
 8009a1a:	60a3      	str	r3, [r4, #8]
 8009a1c:	6823      	ldr	r3, [r4, #0]
 8009a1e:	4433      	add	r3, r6
 8009a20:	6023      	str	r3, [r4, #0]
 8009a22:	e7db      	b.n	80099dc <__ssputs_r+0x58>
 8009a24:	462a      	mov	r2, r5
 8009a26:	f000 f997 	bl	8009d58 <_realloc_r>
 8009a2a:	4606      	mov	r6, r0
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	d1e1      	bne.n	80099f4 <__ssputs_r+0x70>
 8009a30:	4650      	mov	r0, sl
 8009a32:	6921      	ldr	r1, [r4, #16]
 8009a34:	f7ff feca 	bl	80097cc <_free_r>
 8009a38:	e7c7      	b.n	80099ca <__ssputs_r+0x46>
	...

08009a3c <_svfiprintf_r>:
 8009a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a40:	4698      	mov	r8, r3
 8009a42:	898b      	ldrh	r3, [r1, #12]
 8009a44:	4607      	mov	r7, r0
 8009a46:	061b      	lsls	r3, r3, #24
 8009a48:	460d      	mov	r5, r1
 8009a4a:	4614      	mov	r4, r2
 8009a4c:	b09d      	sub	sp, #116	; 0x74
 8009a4e:	d50e      	bpl.n	8009a6e <_svfiprintf_r+0x32>
 8009a50:	690b      	ldr	r3, [r1, #16]
 8009a52:	b963      	cbnz	r3, 8009a6e <_svfiprintf_r+0x32>
 8009a54:	2140      	movs	r1, #64	; 0x40
 8009a56:	f7ff ff21 	bl	800989c <_malloc_r>
 8009a5a:	6028      	str	r0, [r5, #0]
 8009a5c:	6128      	str	r0, [r5, #16]
 8009a5e:	b920      	cbnz	r0, 8009a6a <_svfiprintf_r+0x2e>
 8009a60:	230c      	movs	r3, #12
 8009a62:	603b      	str	r3, [r7, #0]
 8009a64:	f04f 30ff 	mov.w	r0, #4294967295
 8009a68:	e0d1      	b.n	8009c0e <_svfiprintf_r+0x1d2>
 8009a6a:	2340      	movs	r3, #64	; 0x40
 8009a6c:	616b      	str	r3, [r5, #20]
 8009a6e:	2300      	movs	r3, #0
 8009a70:	9309      	str	r3, [sp, #36]	; 0x24
 8009a72:	2320      	movs	r3, #32
 8009a74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a78:	2330      	movs	r3, #48	; 0x30
 8009a7a:	f04f 0901 	mov.w	r9, #1
 8009a7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009c28 <_svfiprintf_r+0x1ec>
 8009a86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a8a:	4623      	mov	r3, r4
 8009a8c:	469a      	mov	sl, r3
 8009a8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a92:	b10a      	cbz	r2, 8009a98 <_svfiprintf_r+0x5c>
 8009a94:	2a25      	cmp	r2, #37	; 0x25
 8009a96:	d1f9      	bne.n	8009a8c <_svfiprintf_r+0x50>
 8009a98:	ebba 0b04 	subs.w	fp, sl, r4
 8009a9c:	d00b      	beq.n	8009ab6 <_svfiprintf_r+0x7a>
 8009a9e:	465b      	mov	r3, fp
 8009aa0:	4622      	mov	r2, r4
 8009aa2:	4629      	mov	r1, r5
 8009aa4:	4638      	mov	r0, r7
 8009aa6:	f7ff ff6d 	bl	8009984 <__ssputs_r>
 8009aaa:	3001      	adds	r0, #1
 8009aac:	f000 80aa 	beq.w	8009c04 <_svfiprintf_r+0x1c8>
 8009ab0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ab2:	445a      	add	r2, fp
 8009ab4:	9209      	str	r2, [sp, #36]	; 0x24
 8009ab6:	f89a 3000 	ldrb.w	r3, [sl]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	f000 80a2 	beq.w	8009c04 <_svfiprintf_r+0x1c8>
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009aca:	f10a 0a01 	add.w	sl, sl, #1
 8009ace:	9304      	str	r3, [sp, #16]
 8009ad0:	9307      	str	r3, [sp, #28]
 8009ad2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ad6:	931a      	str	r3, [sp, #104]	; 0x68
 8009ad8:	4654      	mov	r4, sl
 8009ada:	2205      	movs	r2, #5
 8009adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ae0:	4851      	ldr	r0, [pc, #324]	; (8009c28 <_svfiprintf_r+0x1ec>)
 8009ae2:	f7ff f98b 	bl	8008dfc <memchr>
 8009ae6:	9a04      	ldr	r2, [sp, #16]
 8009ae8:	b9d8      	cbnz	r0, 8009b22 <_svfiprintf_r+0xe6>
 8009aea:	06d0      	lsls	r0, r2, #27
 8009aec:	bf44      	itt	mi
 8009aee:	2320      	movmi	r3, #32
 8009af0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009af4:	0711      	lsls	r1, r2, #28
 8009af6:	bf44      	itt	mi
 8009af8:	232b      	movmi	r3, #43	; 0x2b
 8009afa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009afe:	f89a 3000 	ldrb.w	r3, [sl]
 8009b02:	2b2a      	cmp	r3, #42	; 0x2a
 8009b04:	d015      	beq.n	8009b32 <_svfiprintf_r+0xf6>
 8009b06:	4654      	mov	r4, sl
 8009b08:	2000      	movs	r0, #0
 8009b0a:	f04f 0c0a 	mov.w	ip, #10
 8009b0e:	9a07      	ldr	r2, [sp, #28]
 8009b10:	4621      	mov	r1, r4
 8009b12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b16:	3b30      	subs	r3, #48	; 0x30
 8009b18:	2b09      	cmp	r3, #9
 8009b1a:	d94e      	bls.n	8009bba <_svfiprintf_r+0x17e>
 8009b1c:	b1b0      	cbz	r0, 8009b4c <_svfiprintf_r+0x110>
 8009b1e:	9207      	str	r2, [sp, #28]
 8009b20:	e014      	b.n	8009b4c <_svfiprintf_r+0x110>
 8009b22:	eba0 0308 	sub.w	r3, r0, r8
 8009b26:	fa09 f303 	lsl.w	r3, r9, r3
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	46a2      	mov	sl, r4
 8009b2e:	9304      	str	r3, [sp, #16]
 8009b30:	e7d2      	b.n	8009ad8 <_svfiprintf_r+0x9c>
 8009b32:	9b03      	ldr	r3, [sp, #12]
 8009b34:	1d19      	adds	r1, r3, #4
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	9103      	str	r1, [sp, #12]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	bfbb      	ittet	lt
 8009b3e:	425b      	neglt	r3, r3
 8009b40:	f042 0202 	orrlt.w	r2, r2, #2
 8009b44:	9307      	strge	r3, [sp, #28]
 8009b46:	9307      	strlt	r3, [sp, #28]
 8009b48:	bfb8      	it	lt
 8009b4a:	9204      	strlt	r2, [sp, #16]
 8009b4c:	7823      	ldrb	r3, [r4, #0]
 8009b4e:	2b2e      	cmp	r3, #46	; 0x2e
 8009b50:	d10c      	bne.n	8009b6c <_svfiprintf_r+0x130>
 8009b52:	7863      	ldrb	r3, [r4, #1]
 8009b54:	2b2a      	cmp	r3, #42	; 0x2a
 8009b56:	d135      	bne.n	8009bc4 <_svfiprintf_r+0x188>
 8009b58:	9b03      	ldr	r3, [sp, #12]
 8009b5a:	3402      	adds	r4, #2
 8009b5c:	1d1a      	adds	r2, r3, #4
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	9203      	str	r2, [sp, #12]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	bfb8      	it	lt
 8009b66:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b6a:	9305      	str	r3, [sp, #20]
 8009b6c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009c2c <_svfiprintf_r+0x1f0>
 8009b70:	2203      	movs	r2, #3
 8009b72:	4650      	mov	r0, sl
 8009b74:	7821      	ldrb	r1, [r4, #0]
 8009b76:	f7ff f941 	bl	8008dfc <memchr>
 8009b7a:	b140      	cbz	r0, 8009b8e <_svfiprintf_r+0x152>
 8009b7c:	2340      	movs	r3, #64	; 0x40
 8009b7e:	eba0 000a 	sub.w	r0, r0, sl
 8009b82:	fa03 f000 	lsl.w	r0, r3, r0
 8009b86:	9b04      	ldr	r3, [sp, #16]
 8009b88:	3401      	adds	r4, #1
 8009b8a:	4303      	orrs	r3, r0
 8009b8c:	9304      	str	r3, [sp, #16]
 8009b8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b92:	2206      	movs	r2, #6
 8009b94:	4826      	ldr	r0, [pc, #152]	; (8009c30 <_svfiprintf_r+0x1f4>)
 8009b96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b9a:	f7ff f92f 	bl	8008dfc <memchr>
 8009b9e:	2800      	cmp	r0, #0
 8009ba0:	d038      	beq.n	8009c14 <_svfiprintf_r+0x1d8>
 8009ba2:	4b24      	ldr	r3, [pc, #144]	; (8009c34 <_svfiprintf_r+0x1f8>)
 8009ba4:	bb1b      	cbnz	r3, 8009bee <_svfiprintf_r+0x1b2>
 8009ba6:	9b03      	ldr	r3, [sp, #12]
 8009ba8:	3307      	adds	r3, #7
 8009baa:	f023 0307 	bic.w	r3, r3, #7
 8009bae:	3308      	adds	r3, #8
 8009bb0:	9303      	str	r3, [sp, #12]
 8009bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bb4:	4433      	add	r3, r6
 8009bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8009bb8:	e767      	b.n	8009a8a <_svfiprintf_r+0x4e>
 8009bba:	460c      	mov	r4, r1
 8009bbc:	2001      	movs	r0, #1
 8009bbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bc2:	e7a5      	b.n	8009b10 <_svfiprintf_r+0xd4>
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	f04f 0c0a 	mov.w	ip, #10
 8009bca:	4619      	mov	r1, r3
 8009bcc:	3401      	adds	r4, #1
 8009bce:	9305      	str	r3, [sp, #20]
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bd6:	3a30      	subs	r2, #48	; 0x30
 8009bd8:	2a09      	cmp	r2, #9
 8009bda:	d903      	bls.n	8009be4 <_svfiprintf_r+0x1a8>
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d0c5      	beq.n	8009b6c <_svfiprintf_r+0x130>
 8009be0:	9105      	str	r1, [sp, #20]
 8009be2:	e7c3      	b.n	8009b6c <_svfiprintf_r+0x130>
 8009be4:	4604      	mov	r4, r0
 8009be6:	2301      	movs	r3, #1
 8009be8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bec:	e7f0      	b.n	8009bd0 <_svfiprintf_r+0x194>
 8009bee:	ab03      	add	r3, sp, #12
 8009bf0:	9300      	str	r3, [sp, #0]
 8009bf2:	462a      	mov	r2, r5
 8009bf4:	4638      	mov	r0, r7
 8009bf6:	4b10      	ldr	r3, [pc, #64]	; (8009c38 <_svfiprintf_r+0x1fc>)
 8009bf8:	a904      	add	r1, sp, #16
 8009bfa:	f7fc fc49 	bl	8006490 <_printf_float>
 8009bfe:	1c42      	adds	r2, r0, #1
 8009c00:	4606      	mov	r6, r0
 8009c02:	d1d6      	bne.n	8009bb2 <_svfiprintf_r+0x176>
 8009c04:	89ab      	ldrh	r3, [r5, #12]
 8009c06:	065b      	lsls	r3, r3, #25
 8009c08:	f53f af2c 	bmi.w	8009a64 <_svfiprintf_r+0x28>
 8009c0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c0e:	b01d      	add	sp, #116	; 0x74
 8009c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c14:	ab03      	add	r3, sp, #12
 8009c16:	9300      	str	r3, [sp, #0]
 8009c18:	462a      	mov	r2, r5
 8009c1a:	4638      	mov	r0, r7
 8009c1c:	4b06      	ldr	r3, [pc, #24]	; (8009c38 <_svfiprintf_r+0x1fc>)
 8009c1e:	a904      	add	r1, sp, #16
 8009c20:	f7fc fed2 	bl	80069c8 <_printf_i>
 8009c24:	e7eb      	b.n	8009bfe <_svfiprintf_r+0x1c2>
 8009c26:	bf00      	nop
 8009c28:	0800acd4 	.word	0x0800acd4
 8009c2c:	0800acda 	.word	0x0800acda
 8009c30:	0800acde 	.word	0x0800acde
 8009c34:	08006491 	.word	0x08006491
 8009c38:	08009985 	.word	0x08009985

08009c3c <nan>:
 8009c3c:	2000      	movs	r0, #0
 8009c3e:	4901      	ldr	r1, [pc, #4]	; (8009c44 <nan+0x8>)
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	7ff80000 	.word	0x7ff80000

08009c48 <_sbrk_r>:
 8009c48:	b538      	push	{r3, r4, r5, lr}
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	4d05      	ldr	r5, [pc, #20]	; (8009c64 <_sbrk_r+0x1c>)
 8009c4e:	4604      	mov	r4, r0
 8009c50:	4608      	mov	r0, r1
 8009c52:	602b      	str	r3, [r5, #0]
 8009c54:	f7f8 fd60 	bl	8002718 <_sbrk>
 8009c58:	1c43      	adds	r3, r0, #1
 8009c5a:	d102      	bne.n	8009c62 <_sbrk_r+0x1a>
 8009c5c:	682b      	ldr	r3, [r5, #0]
 8009c5e:	b103      	cbz	r3, 8009c62 <_sbrk_r+0x1a>
 8009c60:	6023      	str	r3, [r4, #0]
 8009c62:	bd38      	pop	{r3, r4, r5, pc}
 8009c64:	20000454 	.word	0x20000454

08009c68 <strncmp>:
 8009c68:	4603      	mov	r3, r0
 8009c6a:	b510      	push	{r4, lr}
 8009c6c:	b172      	cbz	r2, 8009c8c <strncmp+0x24>
 8009c6e:	3901      	subs	r1, #1
 8009c70:	1884      	adds	r4, r0, r2
 8009c72:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009c76:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009c7a:	4290      	cmp	r0, r2
 8009c7c:	d101      	bne.n	8009c82 <strncmp+0x1a>
 8009c7e:	42a3      	cmp	r3, r4
 8009c80:	d101      	bne.n	8009c86 <strncmp+0x1e>
 8009c82:	1a80      	subs	r0, r0, r2
 8009c84:	bd10      	pop	{r4, pc}
 8009c86:	2800      	cmp	r0, #0
 8009c88:	d1f3      	bne.n	8009c72 <strncmp+0xa>
 8009c8a:	e7fa      	b.n	8009c82 <strncmp+0x1a>
 8009c8c:	4610      	mov	r0, r2
 8009c8e:	e7f9      	b.n	8009c84 <strncmp+0x1c>

08009c90 <__ascii_wctomb>:
 8009c90:	4603      	mov	r3, r0
 8009c92:	4608      	mov	r0, r1
 8009c94:	b141      	cbz	r1, 8009ca8 <__ascii_wctomb+0x18>
 8009c96:	2aff      	cmp	r2, #255	; 0xff
 8009c98:	d904      	bls.n	8009ca4 <__ascii_wctomb+0x14>
 8009c9a:	228a      	movs	r2, #138	; 0x8a
 8009c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca0:	601a      	str	r2, [r3, #0]
 8009ca2:	4770      	bx	lr
 8009ca4:	2001      	movs	r0, #1
 8009ca6:	700a      	strb	r2, [r1, #0]
 8009ca8:	4770      	bx	lr
	...

08009cac <__assert_func>:
 8009cac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009cae:	4614      	mov	r4, r2
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	4b09      	ldr	r3, [pc, #36]	; (8009cd8 <__assert_func+0x2c>)
 8009cb4:	4605      	mov	r5, r0
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	68d8      	ldr	r0, [r3, #12]
 8009cba:	b14c      	cbz	r4, 8009cd0 <__assert_func+0x24>
 8009cbc:	4b07      	ldr	r3, [pc, #28]	; (8009cdc <__assert_func+0x30>)
 8009cbe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009cc2:	9100      	str	r1, [sp, #0]
 8009cc4:	462b      	mov	r3, r5
 8009cc6:	4906      	ldr	r1, [pc, #24]	; (8009ce0 <__assert_func+0x34>)
 8009cc8:	f000 f80e 	bl	8009ce8 <fiprintf>
 8009ccc:	f000 fa8a 	bl	800a1e4 <abort>
 8009cd0:	4b04      	ldr	r3, [pc, #16]	; (8009ce4 <__assert_func+0x38>)
 8009cd2:	461c      	mov	r4, r3
 8009cd4:	e7f3      	b.n	8009cbe <__assert_func+0x12>
 8009cd6:	bf00      	nop
 8009cd8:	20000040 	.word	0x20000040
 8009cdc:	0800ace5 	.word	0x0800ace5
 8009ce0:	0800acf2 	.word	0x0800acf2
 8009ce4:	0800ad20 	.word	0x0800ad20

08009ce8 <fiprintf>:
 8009ce8:	b40e      	push	{r1, r2, r3}
 8009cea:	b503      	push	{r0, r1, lr}
 8009cec:	4601      	mov	r1, r0
 8009cee:	ab03      	add	r3, sp, #12
 8009cf0:	4805      	ldr	r0, [pc, #20]	; (8009d08 <fiprintf+0x20>)
 8009cf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cf6:	6800      	ldr	r0, [r0, #0]
 8009cf8:	9301      	str	r3, [sp, #4]
 8009cfa:	f000 f883 	bl	8009e04 <_vfiprintf_r>
 8009cfe:	b002      	add	sp, #8
 8009d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d04:	b003      	add	sp, #12
 8009d06:	4770      	bx	lr
 8009d08:	20000040 	.word	0x20000040

08009d0c <memmove>:
 8009d0c:	4288      	cmp	r0, r1
 8009d0e:	b510      	push	{r4, lr}
 8009d10:	eb01 0402 	add.w	r4, r1, r2
 8009d14:	d902      	bls.n	8009d1c <memmove+0x10>
 8009d16:	4284      	cmp	r4, r0
 8009d18:	4623      	mov	r3, r4
 8009d1a:	d807      	bhi.n	8009d2c <memmove+0x20>
 8009d1c:	1e43      	subs	r3, r0, #1
 8009d1e:	42a1      	cmp	r1, r4
 8009d20:	d008      	beq.n	8009d34 <memmove+0x28>
 8009d22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d2a:	e7f8      	b.n	8009d1e <memmove+0x12>
 8009d2c:	4601      	mov	r1, r0
 8009d2e:	4402      	add	r2, r0
 8009d30:	428a      	cmp	r2, r1
 8009d32:	d100      	bne.n	8009d36 <memmove+0x2a>
 8009d34:	bd10      	pop	{r4, pc}
 8009d36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d3e:	e7f7      	b.n	8009d30 <memmove+0x24>

08009d40 <__malloc_lock>:
 8009d40:	4801      	ldr	r0, [pc, #4]	; (8009d48 <__malloc_lock+0x8>)
 8009d42:	f000 bc0b 	b.w	800a55c <__retarget_lock_acquire_recursive>
 8009d46:	bf00      	nop
 8009d48:	20000458 	.word	0x20000458

08009d4c <__malloc_unlock>:
 8009d4c:	4801      	ldr	r0, [pc, #4]	; (8009d54 <__malloc_unlock+0x8>)
 8009d4e:	f000 bc06 	b.w	800a55e <__retarget_lock_release_recursive>
 8009d52:	bf00      	nop
 8009d54:	20000458 	.word	0x20000458

08009d58 <_realloc_r>:
 8009d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d5c:	4680      	mov	r8, r0
 8009d5e:	4614      	mov	r4, r2
 8009d60:	460e      	mov	r6, r1
 8009d62:	b921      	cbnz	r1, 8009d6e <_realloc_r+0x16>
 8009d64:	4611      	mov	r1, r2
 8009d66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d6a:	f7ff bd97 	b.w	800989c <_malloc_r>
 8009d6e:	b92a      	cbnz	r2, 8009d7c <_realloc_r+0x24>
 8009d70:	f7ff fd2c 	bl	80097cc <_free_r>
 8009d74:	4625      	mov	r5, r4
 8009d76:	4628      	mov	r0, r5
 8009d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d7c:	f000 fc56 	bl	800a62c <_malloc_usable_size_r>
 8009d80:	4284      	cmp	r4, r0
 8009d82:	4607      	mov	r7, r0
 8009d84:	d802      	bhi.n	8009d8c <_realloc_r+0x34>
 8009d86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009d8a:	d812      	bhi.n	8009db2 <_realloc_r+0x5a>
 8009d8c:	4621      	mov	r1, r4
 8009d8e:	4640      	mov	r0, r8
 8009d90:	f7ff fd84 	bl	800989c <_malloc_r>
 8009d94:	4605      	mov	r5, r0
 8009d96:	2800      	cmp	r0, #0
 8009d98:	d0ed      	beq.n	8009d76 <_realloc_r+0x1e>
 8009d9a:	42bc      	cmp	r4, r7
 8009d9c:	4622      	mov	r2, r4
 8009d9e:	4631      	mov	r1, r6
 8009da0:	bf28      	it	cs
 8009da2:	463a      	movcs	r2, r7
 8009da4:	f7ff f838 	bl	8008e18 <memcpy>
 8009da8:	4631      	mov	r1, r6
 8009daa:	4640      	mov	r0, r8
 8009dac:	f7ff fd0e 	bl	80097cc <_free_r>
 8009db0:	e7e1      	b.n	8009d76 <_realloc_r+0x1e>
 8009db2:	4635      	mov	r5, r6
 8009db4:	e7df      	b.n	8009d76 <_realloc_r+0x1e>

08009db6 <__sfputc_r>:
 8009db6:	6893      	ldr	r3, [r2, #8]
 8009db8:	b410      	push	{r4}
 8009dba:	3b01      	subs	r3, #1
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	6093      	str	r3, [r2, #8]
 8009dc0:	da07      	bge.n	8009dd2 <__sfputc_r+0x1c>
 8009dc2:	6994      	ldr	r4, [r2, #24]
 8009dc4:	42a3      	cmp	r3, r4
 8009dc6:	db01      	blt.n	8009dcc <__sfputc_r+0x16>
 8009dc8:	290a      	cmp	r1, #10
 8009dca:	d102      	bne.n	8009dd2 <__sfputc_r+0x1c>
 8009dcc:	bc10      	pop	{r4}
 8009dce:	f000 b949 	b.w	800a064 <__swbuf_r>
 8009dd2:	6813      	ldr	r3, [r2, #0]
 8009dd4:	1c58      	adds	r0, r3, #1
 8009dd6:	6010      	str	r0, [r2, #0]
 8009dd8:	7019      	strb	r1, [r3, #0]
 8009dda:	4608      	mov	r0, r1
 8009ddc:	bc10      	pop	{r4}
 8009dde:	4770      	bx	lr

08009de0 <__sfputs_r>:
 8009de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009de2:	4606      	mov	r6, r0
 8009de4:	460f      	mov	r7, r1
 8009de6:	4614      	mov	r4, r2
 8009de8:	18d5      	adds	r5, r2, r3
 8009dea:	42ac      	cmp	r4, r5
 8009dec:	d101      	bne.n	8009df2 <__sfputs_r+0x12>
 8009dee:	2000      	movs	r0, #0
 8009df0:	e007      	b.n	8009e02 <__sfputs_r+0x22>
 8009df2:	463a      	mov	r2, r7
 8009df4:	4630      	mov	r0, r6
 8009df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dfa:	f7ff ffdc 	bl	8009db6 <__sfputc_r>
 8009dfe:	1c43      	adds	r3, r0, #1
 8009e00:	d1f3      	bne.n	8009dea <__sfputs_r+0xa>
 8009e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009e04 <_vfiprintf_r>:
 8009e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e08:	460d      	mov	r5, r1
 8009e0a:	4614      	mov	r4, r2
 8009e0c:	4698      	mov	r8, r3
 8009e0e:	4606      	mov	r6, r0
 8009e10:	b09d      	sub	sp, #116	; 0x74
 8009e12:	b118      	cbz	r0, 8009e1c <_vfiprintf_r+0x18>
 8009e14:	6983      	ldr	r3, [r0, #24]
 8009e16:	b90b      	cbnz	r3, 8009e1c <_vfiprintf_r+0x18>
 8009e18:	f000 fb02 	bl	800a420 <__sinit>
 8009e1c:	4b89      	ldr	r3, [pc, #548]	; (800a044 <_vfiprintf_r+0x240>)
 8009e1e:	429d      	cmp	r5, r3
 8009e20:	d11b      	bne.n	8009e5a <_vfiprintf_r+0x56>
 8009e22:	6875      	ldr	r5, [r6, #4]
 8009e24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e26:	07d9      	lsls	r1, r3, #31
 8009e28:	d405      	bmi.n	8009e36 <_vfiprintf_r+0x32>
 8009e2a:	89ab      	ldrh	r3, [r5, #12]
 8009e2c:	059a      	lsls	r2, r3, #22
 8009e2e:	d402      	bmi.n	8009e36 <_vfiprintf_r+0x32>
 8009e30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e32:	f000 fb93 	bl	800a55c <__retarget_lock_acquire_recursive>
 8009e36:	89ab      	ldrh	r3, [r5, #12]
 8009e38:	071b      	lsls	r3, r3, #28
 8009e3a:	d501      	bpl.n	8009e40 <_vfiprintf_r+0x3c>
 8009e3c:	692b      	ldr	r3, [r5, #16]
 8009e3e:	b9eb      	cbnz	r3, 8009e7c <_vfiprintf_r+0x78>
 8009e40:	4629      	mov	r1, r5
 8009e42:	4630      	mov	r0, r6
 8009e44:	f000 f960 	bl	800a108 <__swsetup_r>
 8009e48:	b1c0      	cbz	r0, 8009e7c <_vfiprintf_r+0x78>
 8009e4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e4c:	07dc      	lsls	r4, r3, #31
 8009e4e:	d50e      	bpl.n	8009e6e <_vfiprintf_r+0x6a>
 8009e50:	f04f 30ff 	mov.w	r0, #4294967295
 8009e54:	b01d      	add	sp, #116	; 0x74
 8009e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e5a:	4b7b      	ldr	r3, [pc, #492]	; (800a048 <_vfiprintf_r+0x244>)
 8009e5c:	429d      	cmp	r5, r3
 8009e5e:	d101      	bne.n	8009e64 <_vfiprintf_r+0x60>
 8009e60:	68b5      	ldr	r5, [r6, #8]
 8009e62:	e7df      	b.n	8009e24 <_vfiprintf_r+0x20>
 8009e64:	4b79      	ldr	r3, [pc, #484]	; (800a04c <_vfiprintf_r+0x248>)
 8009e66:	429d      	cmp	r5, r3
 8009e68:	bf08      	it	eq
 8009e6a:	68f5      	ldreq	r5, [r6, #12]
 8009e6c:	e7da      	b.n	8009e24 <_vfiprintf_r+0x20>
 8009e6e:	89ab      	ldrh	r3, [r5, #12]
 8009e70:	0598      	lsls	r0, r3, #22
 8009e72:	d4ed      	bmi.n	8009e50 <_vfiprintf_r+0x4c>
 8009e74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e76:	f000 fb72 	bl	800a55e <__retarget_lock_release_recursive>
 8009e7a:	e7e9      	b.n	8009e50 <_vfiprintf_r+0x4c>
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e80:	2320      	movs	r3, #32
 8009e82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e86:	2330      	movs	r3, #48	; 0x30
 8009e88:	f04f 0901 	mov.w	r9, #1
 8009e8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e90:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a050 <_vfiprintf_r+0x24c>
 8009e94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e98:	4623      	mov	r3, r4
 8009e9a:	469a      	mov	sl, r3
 8009e9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ea0:	b10a      	cbz	r2, 8009ea6 <_vfiprintf_r+0xa2>
 8009ea2:	2a25      	cmp	r2, #37	; 0x25
 8009ea4:	d1f9      	bne.n	8009e9a <_vfiprintf_r+0x96>
 8009ea6:	ebba 0b04 	subs.w	fp, sl, r4
 8009eaa:	d00b      	beq.n	8009ec4 <_vfiprintf_r+0xc0>
 8009eac:	465b      	mov	r3, fp
 8009eae:	4622      	mov	r2, r4
 8009eb0:	4629      	mov	r1, r5
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	f7ff ff94 	bl	8009de0 <__sfputs_r>
 8009eb8:	3001      	adds	r0, #1
 8009eba:	f000 80aa 	beq.w	800a012 <_vfiprintf_r+0x20e>
 8009ebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ec0:	445a      	add	r2, fp
 8009ec2:	9209      	str	r2, [sp, #36]	; 0x24
 8009ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f000 80a2 	beq.w	800a012 <_vfiprintf_r+0x20e>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ed4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ed8:	f10a 0a01 	add.w	sl, sl, #1
 8009edc:	9304      	str	r3, [sp, #16]
 8009ede:	9307      	str	r3, [sp, #28]
 8009ee0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ee4:	931a      	str	r3, [sp, #104]	; 0x68
 8009ee6:	4654      	mov	r4, sl
 8009ee8:	2205      	movs	r2, #5
 8009eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eee:	4858      	ldr	r0, [pc, #352]	; (800a050 <_vfiprintf_r+0x24c>)
 8009ef0:	f7fe ff84 	bl	8008dfc <memchr>
 8009ef4:	9a04      	ldr	r2, [sp, #16]
 8009ef6:	b9d8      	cbnz	r0, 8009f30 <_vfiprintf_r+0x12c>
 8009ef8:	06d1      	lsls	r1, r2, #27
 8009efa:	bf44      	itt	mi
 8009efc:	2320      	movmi	r3, #32
 8009efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f02:	0713      	lsls	r3, r2, #28
 8009f04:	bf44      	itt	mi
 8009f06:	232b      	movmi	r3, #43	; 0x2b
 8009f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f0c:	f89a 3000 	ldrb.w	r3, [sl]
 8009f10:	2b2a      	cmp	r3, #42	; 0x2a
 8009f12:	d015      	beq.n	8009f40 <_vfiprintf_r+0x13c>
 8009f14:	4654      	mov	r4, sl
 8009f16:	2000      	movs	r0, #0
 8009f18:	f04f 0c0a 	mov.w	ip, #10
 8009f1c:	9a07      	ldr	r2, [sp, #28]
 8009f1e:	4621      	mov	r1, r4
 8009f20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f24:	3b30      	subs	r3, #48	; 0x30
 8009f26:	2b09      	cmp	r3, #9
 8009f28:	d94e      	bls.n	8009fc8 <_vfiprintf_r+0x1c4>
 8009f2a:	b1b0      	cbz	r0, 8009f5a <_vfiprintf_r+0x156>
 8009f2c:	9207      	str	r2, [sp, #28]
 8009f2e:	e014      	b.n	8009f5a <_vfiprintf_r+0x156>
 8009f30:	eba0 0308 	sub.w	r3, r0, r8
 8009f34:	fa09 f303 	lsl.w	r3, r9, r3
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	46a2      	mov	sl, r4
 8009f3c:	9304      	str	r3, [sp, #16]
 8009f3e:	e7d2      	b.n	8009ee6 <_vfiprintf_r+0xe2>
 8009f40:	9b03      	ldr	r3, [sp, #12]
 8009f42:	1d19      	adds	r1, r3, #4
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	9103      	str	r1, [sp, #12]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	bfbb      	ittet	lt
 8009f4c:	425b      	neglt	r3, r3
 8009f4e:	f042 0202 	orrlt.w	r2, r2, #2
 8009f52:	9307      	strge	r3, [sp, #28]
 8009f54:	9307      	strlt	r3, [sp, #28]
 8009f56:	bfb8      	it	lt
 8009f58:	9204      	strlt	r2, [sp, #16]
 8009f5a:	7823      	ldrb	r3, [r4, #0]
 8009f5c:	2b2e      	cmp	r3, #46	; 0x2e
 8009f5e:	d10c      	bne.n	8009f7a <_vfiprintf_r+0x176>
 8009f60:	7863      	ldrb	r3, [r4, #1]
 8009f62:	2b2a      	cmp	r3, #42	; 0x2a
 8009f64:	d135      	bne.n	8009fd2 <_vfiprintf_r+0x1ce>
 8009f66:	9b03      	ldr	r3, [sp, #12]
 8009f68:	3402      	adds	r4, #2
 8009f6a:	1d1a      	adds	r2, r3, #4
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	9203      	str	r2, [sp, #12]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	bfb8      	it	lt
 8009f74:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f78:	9305      	str	r3, [sp, #20]
 8009f7a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a054 <_vfiprintf_r+0x250>
 8009f7e:	2203      	movs	r2, #3
 8009f80:	4650      	mov	r0, sl
 8009f82:	7821      	ldrb	r1, [r4, #0]
 8009f84:	f7fe ff3a 	bl	8008dfc <memchr>
 8009f88:	b140      	cbz	r0, 8009f9c <_vfiprintf_r+0x198>
 8009f8a:	2340      	movs	r3, #64	; 0x40
 8009f8c:	eba0 000a 	sub.w	r0, r0, sl
 8009f90:	fa03 f000 	lsl.w	r0, r3, r0
 8009f94:	9b04      	ldr	r3, [sp, #16]
 8009f96:	3401      	adds	r4, #1
 8009f98:	4303      	orrs	r3, r0
 8009f9a:	9304      	str	r3, [sp, #16]
 8009f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fa0:	2206      	movs	r2, #6
 8009fa2:	482d      	ldr	r0, [pc, #180]	; (800a058 <_vfiprintf_r+0x254>)
 8009fa4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fa8:	f7fe ff28 	bl	8008dfc <memchr>
 8009fac:	2800      	cmp	r0, #0
 8009fae:	d03f      	beq.n	800a030 <_vfiprintf_r+0x22c>
 8009fb0:	4b2a      	ldr	r3, [pc, #168]	; (800a05c <_vfiprintf_r+0x258>)
 8009fb2:	bb1b      	cbnz	r3, 8009ffc <_vfiprintf_r+0x1f8>
 8009fb4:	9b03      	ldr	r3, [sp, #12]
 8009fb6:	3307      	adds	r3, #7
 8009fb8:	f023 0307 	bic.w	r3, r3, #7
 8009fbc:	3308      	adds	r3, #8
 8009fbe:	9303      	str	r3, [sp, #12]
 8009fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fc2:	443b      	add	r3, r7
 8009fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8009fc6:	e767      	b.n	8009e98 <_vfiprintf_r+0x94>
 8009fc8:	460c      	mov	r4, r1
 8009fca:	2001      	movs	r0, #1
 8009fcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fd0:	e7a5      	b.n	8009f1e <_vfiprintf_r+0x11a>
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	f04f 0c0a 	mov.w	ip, #10
 8009fd8:	4619      	mov	r1, r3
 8009fda:	3401      	adds	r4, #1
 8009fdc:	9305      	str	r3, [sp, #20]
 8009fde:	4620      	mov	r0, r4
 8009fe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fe4:	3a30      	subs	r2, #48	; 0x30
 8009fe6:	2a09      	cmp	r2, #9
 8009fe8:	d903      	bls.n	8009ff2 <_vfiprintf_r+0x1ee>
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d0c5      	beq.n	8009f7a <_vfiprintf_r+0x176>
 8009fee:	9105      	str	r1, [sp, #20]
 8009ff0:	e7c3      	b.n	8009f7a <_vfiprintf_r+0x176>
 8009ff2:	4604      	mov	r4, r0
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ffa:	e7f0      	b.n	8009fde <_vfiprintf_r+0x1da>
 8009ffc:	ab03      	add	r3, sp, #12
 8009ffe:	9300      	str	r3, [sp, #0]
 800a000:	462a      	mov	r2, r5
 800a002:	4630      	mov	r0, r6
 800a004:	4b16      	ldr	r3, [pc, #88]	; (800a060 <_vfiprintf_r+0x25c>)
 800a006:	a904      	add	r1, sp, #16
 800a008:	f7fc fa42 	bl	8006490 <_printf_float>
 800a00c:	4607      	mov	r7, r0
 800a00e:	1c78      	adds	r0, r7, #1
 800a010:	d1d6      	bne.n	8009fc0 <_vfiprintf_r+0x1bc>
 800a012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a014:	07d9      	lsls	r1, r3, #31
 800a016:	d405      	bmi.n	800a024 <_vfiprintf_r+0x220>
 800a018:	89ab      	ldrh	r3, [r5, #12]
 800a01a:	059a      	lsls	r2, r3, #22
 800a01c:	d402      	bmi.n	800a024 <_vfiprintf_r+0x220>
 800a01e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a020:	f000 fa9d 	bl	800a55e <__retarget_lock_release_recursive>
 800a024:	89ab      	ldrh	r3, [r5, #12]
 800a026:	065b      	lsls	r3, r3, #25
 800a028:	f53f af12 	bmi.w	8009e50 <_vfiprintf_r+0x4c>
 800a02c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a02e:	e711      	b.n	8009e54 <_vfiprintf_r+0x50>
 800a030:	ab03      	add	r3, sp, #12
 800a032:	9300      	str	r3, [sp, #0]
 800a034:	462a      	mov	r2, r5
 800a036:	4630      	mov	r0, r6
 800a038:	4b09      	ldr	r3, [pc, #36]	; (800a060 <_vfiprintf_r+0x25c>)
 800a03a:	a904      	add	r1, sp, #16
 800a03c:	f7fc fcc4 	bl	80069c8 <_printf_i>
 800a040:	e7e4      	b.n	800a00c <_vfiprintf_r+0x208>
 800a042:	bf00      	nop
 800a044:	0800ad44 	.word	0x0800ad44
 800a048:	0800ad64 	.word	0x0800ad64
 800a04c:	0800ad24 	.word	0x0800ad24
 800a050:	0800acd4 	.word	0x0800acd4
 800a054:	0800acda 	.word	0x0800acda
 800a058:	0800acde 	.word	0x0800acde
 800a05c:	08006491 	.word	0x08006491
 800a060:	08009de1 	.word	0x08009de1

0800a064 <__swbuf_r>:
 800a064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a066:	460e      	mov	r6, r1
 800a068:	4614      	mov	r4, r2
 800a06a:	4605      	mov	r5, r0
 800a06c:	b118      	cbz	r0, 800a076 <__swbuf_r+0x12>
 800a06e:	6983      	ldr	r3, [r0, #24]
 800a070:	b90b      	cbnz	r3, 800a076 <__swbuf_r+0x12>
 800a072:	f000 f9d5 	bl	800a420 <__sinit>
 800a076:	4b21      	ldr	r3, [pc, #132]	; (800a0fc <__swbuf_r+0x98>)
 800a078:	429c      	cmp	r4, r3
 800a07a:	d12b      	bne.n	800a0d4 <__swbuf_r+0x70>
 800a07c:	686c      	ldr	r4, [r5, #4]
 800a07e:	69a3      	ldr	r3, [r4, #24]
 800a080:	60a3      	str	r3, [r4, #8]
 800a082:	89a3      	ldrh	r3, [r4, #12]
 800a084:	071a      	lsls	r2, r3, #28
 800a086:	d52f      	bpl.n	800a0e8 <__swbuf_r+0x84>
 800a088:	6923      	ldr	r3, [r4, #16]
 800a08a:	b36b      	cbz	r3, 800a0e8 <__swbuf_r+0x84>
 800a08c:	6923      	ldr	r3, [r4, #16]
 800a08e:	6820      	ldr	r0, [r4, #0]
 800a090:	b2f6      	uxtb	r6, r6
 800a092:	1ac0      	subs	r0, r0, r3
 800a094:	6963      	ldr	r3, [r4, #20]
 800a096:	4637      	mov	r7, r6
 800a098:	4283      	cmp	r3, r0
 800a09a:	dc04      	bgt.n	800a0a6 <__swbuf_r+0x42>
 800a09c:	4621      	mov	r1, r4
 800a09e:	4628      	mov	r0, r5
 800a0a0:	f000 f92a 	bl	800a2f8 <_fflush_r>
 800a0a4:	bb30      	cbnz	r0, 800a0f4 <__swbuf_r+0x90>
 800a0a6:	68a3      	ldr	r3, [r4, #8]
 800a0a8:	3001      	adds	r0, #1
 800a0aa:	3b01      	subs	r3, #1
 800a0ac:	60a3      	str	r3, [r4, #8]
 800a0ae:	6823      	ldr	r3, [r4, #0]
 800a0b0:	1c5a      	adds	r2, r3, #1
 800a0b2:	6022      	str	r2, [r4, #0]
 800a0b4:	701e      	strb	r6, [r3, #0]
 800a0b6:	6963      	ldr	r3, [r4, #20]
 800a0b8:	4283      	cmp	r3, r0
 800a0ba:	d004      	beq.n	800a0c6 <__swbuf_r+0x62>
 800a0bc:	89a3      	ldrh	r3, [r4, #12]
 800a0be:	07db      	lsls	r3, r3, #31
 800a0c0:	d506      	bpl.n	800a0d0 <__swbuf_r+0x6c>
 800a0c2:	2e0a      	cmp	r6, #10
 800a0c4:	d104      	bne.n	800a0d0 <__swbuf_r+0x6c>
 800a0c6:	4621      	mov	r1, r4
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	f000 f915 	bl	800a2f8 <_fflush_r>
 800a0ce:	b988      	cbnz	r0, 800a0f4 <__swbuf_r+0x90>
 800a0d0:	4638      	mov	r0, r7
 800a0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0d4:	4b0a      	ldr	r3, [pc, #40]	; (800a100 <__swbuf_r+0x9c>)
 800a0d6:	429c      	cmp	r4, r3
 800a0d8:	d101      	bne.n	800a0de <__swbuf_r+0x7a>
 800a0da:	68ac      	ldr	r4, [r5, #8]
 800a0dc:	e7cf      	b.n	800a07e <__swbuf_r+0x1a>
 800a0de:	4b09      	ldr	r3, [pc, #36]	; (800a104 <__swbuf_r+0xa0>)
 800a0e0:	429c      	cmp	r4, r3
 800a0e2:	bf08      	it	eq
 800a0e4:	68ec      	ldreq	r4, [r5, #12]
 800a0e6:	e7ca      	b.n	800a07e <__swbuf_r+0x1a>
 800a0e8:	4621      	mov	r1, r4
 800a0ea:	4628      	mov	r0, r5
 800a0ec:	f000 f80c 	bl	800a108 <__swsetup_r>
 800a0f0:	2800      	cmp	r0, #0
 800a0f2:	d0cb      	beq.n	800a08c <__swbuf_r+0x28>
 800a0f4:	f04f 37ff 	mov.w	r7, #4294967295
 800a0f8:	e7ea      	b.n	800a0d0 <__swbuf_r+0x6c>
 800a0fa:	bf00      	nop
 800a0fc:	0800ad44 	.word	0x0800ad44
 800a100:	0800ad64 	.word	0x0800ad64
 800a104:	0800ad24 	.word	0x0800ad24

0800a108 <__swsetup_r>:
 800a108:	4b32      	ldr	r3, [pc, #200]	; (800a1d4 <__swsetup_r+0xcc>)
 800a10a:	b570      	push	{r4, r5, r6, lr}
 800a10c:	681d      	ldr	r5, [r3, #0]
 800a10e:	4606      	mov	r6, r0
 800a110:	460c      	mov	r4, r1
 800a112:	b125      	cbz	r5, 800a11e <__swsetup_r+0x16>
 800a114:	69ab      	ldr	r3, [r5, #24]
 800a116:	b913      	cbnz	r3, 800a11e <__swsetup_r+0x16>
 800a118:	4628      	mov	r0, r5
 800a11a:	f000 f981 	bl	800a420 <__sinit>
 800a11e:	4b2e      	ldr	r3, [pc, #184]	; (800a1d8 <__swsetup_r+0xd0>)
 800a120:	429c      	cmp	r4, r3
 800a122:	d10f      	bne.n	800a144 <__swsetup_r+0x3c>
 800a124:	686c      	ldr	r4, [r5, #4]
 800a126:	89a3      	ldrh	r3, [r4, #12]
 800a128:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a12c:	0719      	lsls	r1, r3, #28
 800a12e:	d42c      	bmi.n	800a18a <__swsetup_r+0x82>
 800a130:	06dd      	lsls	r5, r3, #27
 800a132:	d411      	bmi.n	800a158 <__swsetup_r+0x50>
 800a134:	2309      	movs	r3, #9
 800a136:	6033      	str	r3, [r6, #0]
 800a138:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a13c:	f04f 30ff 	mov.w	r0, #4294967295
 800a140:	81a3      	strh	r3, [r4, #12]
 800a142:	e03e      	b.n	800a1c2 <__swsetup_r+0xba>
 800a144:	4b25      	ldr	r3, [pc, #148]	; (800a1dc <__swsetup_r+0xd4>)
 800a146:	429c      	cmp	r4, r3
 800a148:	d101      	bne.n	800a14e <__swsetup_r+0x46>
 800a14a:	68ac      	ldr	r4, [r5, #8]
 800a14c:	e7eb      	b.n	800a126 <__swsetup_r+0x1e>
 800a14e:	4b24      	ldr	r3, [pc, #144]	; (800a1e0 <__swsetup_r+0xd8>)
 800a150:	429c      	cmp	r4, r3
 800a152:	bf08      	it	eq
 800a154:	68ec      	ldreq	r4, [r5, #12]
 800a156:	e7e6      	b.n	800a126 <__swsetup_r+0x1e>
 800a158:	0758      	lsls	r0, r3, #29
 800a15a:	d512      	bpl.n	800a182 <__swsetup_r+0x7a>
 800a15c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a15e:	b141      	cbz	r1, 800a172 <__swsetup_r+0x6a>
 800a160:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a164:	4299      	cmp	r1, r3
 800a166:	d002      	beq.n	800a16e <__swsetup_r+0x66>
 800a168:	4630      	mov	r0, r6
 800a16a:	f7ff fb2f 	bl	80097cc <_free_r>
 800a16e:	2300      	movs	r3, #0
 800a170:	6363      	str	r3, [r4, #52]	; 0x34
 800a172:	89a3      	ldrh	r3, [r4, #12]
 800a174:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a178:	81a3      	strh	r3, [r4, #12]
 800a17a:	2300      	movs	r3, #0
 800a17c:	6063      	str	r3, [r4, #4]
 800a17e:	6923      	ldr	r3, [r4, #16]
 800a180:	6023      	str	r3, [r4, #0]
 800a182:	89a3      	ldrh	r3, [r4, #12]
 800a184:	f043 0308 	orr.w	r3, r3, #8
 800a188:	81a3      	strh	r3, [r4, #12]
 800a18a:	6923      	ldr	r3, [r4, #16]
 800a18c:	b94b      	cbnz	r3, 800a1a2 <__swsetup_r+0x9a>
 800a18e:	89a3      	ldrh	r3, [r4, #12]
 800a190:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a198:	d003      	beq.n	800a1a2 <__swsetup_r+0x9a>
 800a19a:	4621      	mov	r1, r4
 800a19c:	4630      	mov	r0, r6
 800a19e:	f000 fa05 	bl	800a5ac <__smakebuf_r>
 800a1a2:	89a0      	ldrh	r0, [r4, #12]
 800a1a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1a8:	f010 0301 	ands.w	r3, r0, #1
 800a1ac:	d00a      	beq.n	800a1c4 <__swsetup_r+0xbc>
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	60a3      	str	r3, [r4, #8]
 800a1b2:	6963      	ldr	r3, [r4, #20]
 800a1b4:	425b      	negs	r3, r3
 800a1b6:	61a3      	str	r3, [r4, #24]
 800a1b8:	6923      	ldr	r3, [r4, #16]
 800a1ba:	b943      	cbnz	r3, 800a1ce <__swsetup_r+0xc6>
 800a1bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a1c0:	d1ba      	bne.n	800a138 <__swsetup_r+0x30>
 800a1c2:	bd70      	pop	{r4, r5, r6, pc}
 800a1c4:	0781      	lsls	r1, r0, #30
 800a1c6:	bf58      	it	pl
 800a1c8:	6963      	ldrpl	r3, [r4, #20]
 800a1ca:	60a3      	str	r3, [r4, #8]
 800a1cc:	e7f4      	b.n	800a1b8 <__swsetup_r+0xb0>
 800a1ce:	2000      	movs	r0, #0
 800a1d0:	e7f7      	b.n	800a1c2 <__swsetup_r+0xba>
 800a1d2:	bf00      	nop
 800a1d4:	20000040 	.word	0x20000040
 800a1d8:	0800ad44 	.word	0x0800ad44
 800a1dc:	0800ad64 	.word	0x0800ad64
 800a1e0:	0800ad24 	.word	0x0800ad24

0800a1e4 <abort>:
 800a1e4:	2006      	movs	r0, #6
 800a1e6:	b508      	push	{r3, lr}
 800a1e8:	f000 fa50 	bl	800a68c <raise>
 800a1ec:	2001      	movs	r0, #1
 800a1ee:	f7f8 fa20 	bl	8002632 <_exit>
	...

0800a1f4 <__sflush_r>:
 800a1f4:	898a      	ldrh	r2, [r1, #12]
 800a1f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1f8:	4605      	mov	r5, r0
 800a1fa:	0710      	lsls	r0, r2, #28
 800a1fc:	460c      	mov	r4, r1
 800a1fe:	d457      	bmi.n	800a2b0 <__sflush_r+0xbc>
 800a200:	684b      	ldr	r3, [r1, #4]
 800a202:	2b00      	cmp	r3, #0
 800a204:	dc04      	bgt.n	800a210 <__sflush_r+0x1c>
 800a206:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a208:	2b00      	cmp	r3, #0
 800a20a:	dc01      	bgt.n	800a210 <__sflush_r+0x1c>
 800a20c:	2000      	movs	r0, #0
 800a20e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a210:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a212:	2e00      	cmp	r6, #0
 800a214:	d0fa      	beq.n	800a20c <__sflush_r+0x18>
 800a216:	2300      	movs	r3, #0
 800a218:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a21c:	682f      	ldr	r7, [r5, #0]
 800a21e:	602b      	str	r3, [r5, #0]
 800a220:	d032      	beq.n	800a288 <__sflush_r+0x94>
 800a222:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a224:	89a3      	ldrh	r3, [r4, #12]
 800a226:	075a      	lsls	r2, r3, #29
 800a228:	d505      	bpl.n	800a236 <__sflush_r+0x42>
 800a22a:	6863      	ldr	r3, [r4, #4]
 800a22c:	1ac0      	subs	r0, r0, r3
 800a22e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a230:	b10b      	cbz	r3, 800a236 <__sflush_r+0x42>
 800a232:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a234:	1ac0      	subs	r0, r0, r3
 800a236:	2300      	movs	r3, #0
 800a238:	4602      	mov	r2, r0
 800a23a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a23c:	4628      	mov	r0, r5
 800a23e:	6a21      	ldr	r1, [r4, #32]
 800a240:	47b0      	blx	r6
 800a242:	1c43      	adds	r3, r0, #1
 800a244:	89a3      	ldrh	r3, [r4, #12]
 800a246:	d106      	bne.n	800a256 <__sflush_r+0x62>
 800a248:	6829      	ldr	r1, [r5, #0]
 800a24a:	291d      	cmp	r1, #29
 800a24c:	d82c      	bhi.n	800a2a8 <__sflush_r+0xb4>
 800a24e:	4a29      	ldr	r2, [pc, #164]	; (800a2f4 <__sflush_r+0x100>)
 800a250:	40ca      	lsrs	r2, r1
 800a252:	07d6      	lsls	r6, r2, #31
 800a254:	d528      	bpl.n	800a2a8 <__sflush_r+0xb4>
 800a256:	2200      	movs	r2, #0
 800a258:	6062      	str	r2, [r4, #4]
 800a25a:	6922      	ldr	r2, [r4, #16]
 800a25c:	04d9      	lsls	r1, r3, #19
 800a25e:	6022      	str	r2, [r4, #0]
 800a260:	d504      	bpl.n	800a26c <__sflush_r+0x78>
 800a262:	1c42      	adds	r2, r0, #1
 800a264:	d101      	bne.n	800a26a <__sflush_r+0x76>
 800a266:	682b      	ldr	r3, [r5, #0]
 800a268:	b903      	cbnz	r3, 800a26c <__sflush_r+0x78>
 800a26a:	6560      	str	r0, [r4, #84]	; 0x54
 800a26c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a26e:	602f      	str	r7, [r5, #0]
 800a270:	2900      	cmp	r1, #0
 800a272:	d0cb      	beq.n	800a20c <__sflush_r+0x18>
 800a274:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a278:	4299      	cmp	r1, r3
 800a27a:	d002      	beq.n	800a282 <__sflush_r+0x8e>
 800a27c:	4628      	mov	r0, r5
 800a27e:	f7ff faa5 	bl	80097cc <_free_r>
 800a282:	2000      	movs	r0, #0
 800a284:	6360      	str	r0, [r4, #52]	; 0x34
 800a286:	e7c2      	b.n	800a20e <__sflush_r+0x1a>
 800a288:	6a21      	ldr	r1, [r4, #32]
 800a28a:	2301      	movs	r3, #1
 800a28c:	4628      	mov	r0, r5
 800a28e:	47b0      	blx	r6
 800a290:	1c41      	adds	r1, r0, #1
 800a292:	d1c7      	bne.n	800a224 <__sflush_r+0x30>
 800a294:	682b      	ldr	r3, [r5, #0]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d0c4      	beq.n	800a224 <__sflush_r+0x30>
 800a29a:	2b1d      	cmp	r3, #29
 800a29c:	d001      	beq.n	800a2a2 <__sflush_r+0xae>
 800a29e:	2b16      	cmp	r3, #22
 800a2a0:	d101      	bne.n	800a2a6 <__sflush_r+0xb2>
 800a2a2:	602f      	str	r7, [r5, #0]
 800a2a4:	e7b2      	b.n	800a20c <__sflush_r+0x18>
 800a2a6:	89a3      	ldrh	r3, [r4, #12]
 800a2a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2ac:	81a3      	strh	r3, [r4, #12]
 800a2ae:	e7ae      	b.n	800a20e <__sflush_r+0x1a>
 800a2b0:	690f      	ldr	r7, [r1, #16]
 800a2b2:	2f00      	cmp	r7, #0
 800a2b4:	d0aa      	beq.n	800a20c <__sflush_r+0x18>
 800a2b6:	0793      	lsls	r3, r2, #30
 800a2b8:	bf18      	it	ne
 800a2ba:	2300      	movne	r3, #0
 800a2bc:	680e      	ldr	r6, [r1, #0]
 800a2be:	bf08      	it	eq
 800a2c0:	694b      	ldreq	r3, [r1, #20]
 800a2c2:	1bf6      	subs	r6, r6, r7
 800a2c4:	600f      	str	r7, [r1, #0]
 800a2c6:	608b      	str	r3, [r1, #8]
 800a2c8:	2e00      	cmp	r6, #0
 800a2ca:	dd9f      	ble.n	800a20c <__sflush_r+0x18>
 800a2cc:	4633      	mov	r3, r6
 800a2ce:	463a      	mov	r2, r7
 800a2d0:	4628      	mov	r0, r5
 800a2d2:	6a21      	ldr	r1, [r4, #32]
 800a2d4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a2d8:	47e0      	blx	ip
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	dc06      	bgt.n	800a2ec <__sflush_r+0xf8>
 800a2de:	89a3      	ldrh	r3, [r4, #12]
 800a2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2e8:	81a3      	strh	r3, [r4, #12]
 800a2ea:	e790      	b.n	800a20e <__sflush_r+0x1a>
 800a2ec:	4407      	add	r7, r0
 800a2ee:	1a36      	subs	r6, r6, r0
 800a2f0:	e7ea      	b.n	800a2c8 <__sflush_r+0xd4>
 800a2f2:	bf00      	nop
 800a2f4:	20400001 	.word	0x20400001

0800a2f8 <_fflush_r>:
 800a2f8:	b538      	push	{r3, r4, r5, lr}
 800a2fa:	690b      	ldr	r3, [r1, #16]
 800a2fc:	4605      	mov	r5, r0
 800a2fe:	460c      	mov	r4, r1
 800a300:	b913      	cbnz	r3, 800a308 <_fflush_r+0x10>
 800a302:	2500      	movs	r5, #0
 800a304:	4628      	mov	r0, r5
 800a306:	bd38      	pop	{r3, r4, r5, pc}
 800a308:	b118      	cbz	r0, 800a312 <_fflush_r+0x1a>
 800a30a:	6983      	ldr	r3, [r0, #24]
 800a30c:	b90b      	cbnz	r3, 800a312 <_fflush_r+0x1a>
 800a30e:	f000 f887 	bl	800a420 <__sinit>
 800a312:	4b14      	ldr	r3, [pc, #80]	; (800a364 <_fflush_r+0x6c>)
 800a314:	429c      	cmp	r4, r3
 800a316:	d11b      	bne.n	800a350 <_fflush_r+0x58>
 800a318:	686c      	ldr	r4, [r5, #4]
 800a31a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d0ef      	beq.n	800a302 <_fflush_r+0xa>
 800a322:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a324:	07d0      	lsls	r0, r2, #31
 800a326:	d404      	bmi.n	800a332 <_fflush_r+0x3a>
 800a328:	0599      	lsls	r1, r3, #22
 800a32a:	d402      	bmi.n	800a332 <_fflush_r+0x3a>
 800a32c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a32e:	f000 f915 	bl	800a55c <__retarget_lock_acquire_recursive>
 800a332:	4628      	mov	r0, r5
 800a334:	4621      	mov	r1, r4
 800a336:	f7ff ff5d 	bl	800a1f4 <__sflush_r>
 800a33a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a33c:	4605      	mov	r5, r0
 800a33e:	07da      	lsls	r2, r3, #31
 800a340:	d4e0      	bmi.n	800a304 <_fflush_r+0xc>
 800a342:	89a3      	ldrh	r3, [r4, #12]
 800a344:	059b      	lsls	r3, r3, #22
 800a346:	d4dd      	bmi.n	800a304 <_fflush_r+0xc>
 800a348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a34a:	f000 f908 	bl	800a55e <__retarget_lock_release_recursive>
 800a34e:	e7d9      	b.n	800a304 <_fflush_r+0xc>
 800a350:	4b05      	ldr	r3, [pc, #20]	; (800a368 <_fflush_r+0x70>)
 800a352:	429c      	cmp	r4, r3
 800a354:	d101      	bne.n	800a35a <_fflush_r+0x62>
 800a356:	68ac      	ldr	r4, [r5, #8]
 800a358:	e7df      	b.n	800a31a <_fflush_r+0x22>
 800a35a:	4b04      	ldr	r3, [pc, #16]	; (800a36c <_fflush_r+0x74>)
 800a35c:	429c      	cmp	r4, r3
 800a35e:	bf08      	it	eq
 800a360:	68ec      	ldreq	r4, [r5, #12]
 800a362:	e7da      	b.n	800a31a <_fflush_r+0x22>
 800a364:	0800ad44 	.word	0x0800ad44
 800a368:	0800ad64 	.word	0x0800ad64
 800a36c:	0800ad24 	.word	0x0800ad24

0800a370 <std>:
 800a370:	2300      	movs	r3, #0
 800a372:	b510      	push	{r4, lr}
 800a374:	4604      	mov	r4, r0
 800a376:	e9c0 3300 	strd	r3, r3, [r0]
 800a37a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a37e:	6083      	str	r3, [r0, #8]
 800a380:	8181      	strh	r1, [r0, #12]
 800a382:	6643      	str	r3, [r0, #100]	; 0x64
 800a384:	81c2      	strh	r2, [r0, #14]
 800a386:	6183      	str	r3, [r0, #24]
 800a388:	4619      	mov	r1, r3
 800a38a:	2208      	movs	r2, #8
 800a38c:	305c      	adds	r0, #92	; 0x5c
 800a38e:	f7fb ffd9 	bl	8006344 <memset>
 800a392:	4b05      	ldr	r3, [pc, #20]	; (800a3a8 <std+0x38>)
 800a394:	6224      	str	r4, [r4, #32]
 800a396:	6263      	str	r3, [r4, #36]	; 0x24
 800a398:	4b04      	ldr	r3, [pc, #16]	; (800a3ac <std+0x3c>)
 800a39a:	62a3      	str	r3, [r4, #40]	; 0x28
 800a39c:	4b04      	ldr	r3, [pc, #16]	; (800a3b0 <std+0x40>)
 800a39e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a3a0:	4b04      	ldr	r3, [pc, #16]	; (800a3b4 <std+0x44>)
 800a3a2:	6323      	str	r3, [r4, #48]	; 0x30
 800a3a4:	bd10      	pop	{r4, pc}
 800a3a6:	bf00      	nop
 800a3a8:	0800a6c5 	.word	0x0800a6c5
 800a3ac:	0800a6e7 	.word	0x0800a6e7
 800a3b0:	0800a71f 	.word	0x0800a71f
 800a3b4:	0800a743 	.word	0x0800a743

0800a3b8 <_cleanup_r>:
 800a3b8:	4901      	ldr	r1, [pc, #4]	; (800a3c0 <_cleanup_r+0x8>)
 800a3ba:	f000 b8af 	b.w	800a51c <_fwalk_reent>
 800a3be:	bf00      	nop
 800a3c0:	0800a2f9 	.word	0x0800a2f9

0800a3c4 <__sfmoreglue>:
 800a3c4:	2268      	movs	r2, #104	; 0x68
 800a3c6:	b570      	push	{r4, r5, r6, lr}
 800a3c8:	1e4d      	subs	r5, r1, #1
 800a3ca:	4355      	muls	r5, r2
 800a3cc:	460e      	mov	r6, r1
 800a3ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a3d2:	f7ff fa63 	bl	800989c <_malloc_r>
 800a3d6:	4604      	mov	r4, r0
 800a3d8:	b140      	cbz	r0, 800a3ec <__sfmoreglue+0x28>
 800a3da:	2100      	movs	r1, #0
 800a3dc:	e9c0 1600 	strd	r1, r6, [r0]
 800a3e0:	300c      	adds	r0, #12
 800a3e2:	60a0      	str	r0, [r4, #8]
 800a3e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a3e8:	f7fb ffac 	bl	8006344 <memset>
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	bd70      	pop	{r4, r5, r6, pc}

0800a3f0 <__sfp_lock_acquire>:
 800a3f0:	4801      	ldr	r0, [pc, #4]	; (800a3f8 <__sfp_lock_acquire+0x8>)
 800a3f2:	f000 b8b3 	b.w	800a55c <__retarget_lock_acquire_recursive>
 800a3f6:	bf00      	nop
 800a3f8:	20000459 	.word	0x20000459

0800a3fc <__sfp_lock_release>:
 800a3fc:	4801      	ldr	r0, [pc, #4]	; (800a404 <__sfp_lock_release+0x8>)
 800a3fe:	f000 b8ae 	b.w	800a55e <__retarget_lock_release_recursive>
 800a402:	bf00      	nop
 800a404:	20000459 	.word	0x20000459

0800a408 <__sinit_lock_acquire>:
 800a408:	4801      	ldr	r0, [pc, #4]	; (800a410 <__sinit_lock_acquire+0x8>)
 800a40a:	f000 b8a7 	b.w	800a55c <__retarget_lock_acquire_recursive>
 800a40e:	bf00      	nop
 800a410:	2000045a 	.word	0x2000045a

0800a414 <__sinit_lock_release>:
 800a414:	4801      	ldr	r0, [pc, #4]	; (800a41c <__sinit_lock_release+0x8>)
 800a416:	f000 b8a2 	b.w	800a55e <__retarget_lock_release_recursive>
 800a41a:	bf00      	nop
 800a41c:	2000045a 	.word	0x2000045a

0800a420 <__sinit>:
 800a420:	b510      	push	{r4, lr}
 800a422:	4604      	mov	r4, r0
 800a424:	f7ff fff0 	bl	800a408 <__sinit_lock_acquire>
 800a428:	69a3      	ldr	r3, [r4, #24]
 800a42a:	b11b      	cbz	r3, 800a434 <__sinit+0x14>
 800a42c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a430:	f7ff bff0 	b.w	800a414 <__sinit_lock_release>
 800a434:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a438:	6523      	str	r3, [r4, #80]	; 0x50
 800a43a:	4b13      	ldr	r3, [pc, #76]	; (800a488 <__sinit+0x68>)
 800a43c:	4a13      	ldr	r2, [pc, #76]	; (800a48c <__sinit+0x6c>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	62a2      	str	r2, [r4, #40]	; 0x28
 800a442:	42a3      	cmp	r3, r4
 800a444:	bf08      	it	eq
 800a446:	2301      	moveq	r3, #1
 800a448:	4620      	mov	r0, r4
 800a44a:	bf08      	it	eq
 800a44c:	61a3      	streq	r3, [r4, #24]
 800a44e:	f000 f81f 	bl	800a490 <__sfp>
 800a452:	6060      	str	r0, [r4, #4]
 800a454:	4620      	mov	r0, r4
 800a456:	f000 f81b 	bl	800a490 <__sfp>
 800a45a:	60a0      	str	r0, [r4, #8]
 800a45c:	4620      	mov	r0, r4
 800a45e:	f000 f817 	bl	800a490 <__sfp>
 800a462:	2200      	movs	r2, #0
 800a464:	2104      	movs	r1, #4
 800a466:	60e0      	str	r0, [r4, #12]
 800a468:	6860      	ldr	r0, [r4, #4]
 800a46a:	f7ff ff81 	bl	800a370 <std>
 800a46e:	2201      	movs	r2, #1
 800a470:	2109      	movs	r1, #9
 800a472:	68a0      	ldr	r0, [r4, #8]
 800a474:	f7ff ff7c 	bl	800a370 <std>
 800a478:	2202      	movs	r2, #2
 800a47a:	2112      	movs	r1, #18
 800a47c:	68e0      	ldr	r0, [r4, #12]
 800a47e:	f7ff ff77 	bl	800a370 <std>
 800a482:	2301      	movs	r3, #1
 800a484:	61a3      	str	r3, [r4, #24]
 800a486:	e7d1      	b.n	800a42c <__sinit+0xc>
 800a488:	0800a8e4 	.word	0x0800a8e4
 800a48c:	0800a3b9 	.word	0x0800a3b9

0800a490 <__sfp>:
 800a490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a492:	4607      	mov	r7, r0
 800a494:	f7ff ffac 	bl	800a3f0 <__sfp_lock_acquire>
 800a498:	4b1e      	ldr	r3, [pc, #120]	; (800a514 <__sfp+0x84>)
 800a49a:	681e      	ldr	r6, [r3, #0]
 800a49c:	69b3      	ldr	r3, [r6, #24]
 800a49e:	b913      	cbnz	r3, 800a4a6 <__sfp+0x16>
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	f7ff ffbd 	bl	800a420 <__sinit>
 800a4a6:	3648      	adds	r6, #72	; 0x48
 800a4a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a4ac:	3b01      	subs	r3, #1
 800a4ae:	d503      	bpl.n	800a4b8 <__sfp+0x28>
 800a4b0:	6833      	ldr	r3, [r6, #0]
 800a4b2:	b30b      	cbz	r3, 800a4f8 <__sfp+0x68>
 800a4b4:	6836      	ldr	r6, [r6, #0]
 800a4b6:	e7f7      	b.n	800a4a8 <__sfp+0x18>
 800a4b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a4bc:	b9d5      	cbnz	r5, 800a4f4 <__sfp+0x64>
 800a4be:	4b16      	ldr	r3, [pc, #88]	; (800a518 <__sfp+0x88>)
 800a4c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a4c4:	60e3      	str	r3, [r4, #12]
 800a4c6:	6665      	str	r5, [r4, #100]	; 0x64
 800a4c8:	f000 f847 	bl	800a55a <__retarget_lock_init_recursive>
 800a4cc:	f7ff ff96 	bl	800a3fc <__sfp_lock_release>
 800a4d0:	2208      	movs	r2, #8
 800a4d2:	4629      	mov	r1, r5
 800a4d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a4d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a4dc:	6025      	str	r5, [r4, #0]
 800a4de:	61a5      	str	r5, [r4, #24]
 800a4e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a4e4:	f7fb ff2e 	bl	8006344 <memset>
 800a4e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a4ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4f4:	3468      	adds	r4, #104	; 0x68
 800a4f6:	e7d9      	b.n	800a4ac <__sfp+0x1c>
 800a4f8:	2104      	movs	r1, #4
 800a4fa:	4638      	mov	r0, r7
 800a4fc:	f7ff ff62 	bl	800a3c4 <__sfmoreglue>
 800a500:	4604      	mov	r4, r0
 800a502:	6030      	str	r0, [r6, #0]
 800a504:	2800      	cmp	r0, #0
 800a506:	d1d5      	bne.n	800a4b4 <__sfp+0x24>
 800a508:	f7ff ff78 	bl	800a3fc <__sfp_lock_release>
 800a50c:	230c      	movs	r3, #12
 800a50e:	603b      	str	r3, [r7, #0]
 800a510:	e7ee      	b.n	800a4f0 <__sfp+0x60>
 800a512:	bf00      	nop
 800a514:	0800a8e4 	.word	0x0800a8e4
 800a518:	ffff0001 	.word	0xffff0001

0800a51c <_fwalk_reent>:
 800a51c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a520:	4606      	mov	r6, r0
 800a522:	4688      	mov	r8, r1
 800a524:	2700      	movs	r7, #0
 800a526:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a52a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a52e:	f1b9 0901 	subs.w	r9, r9, #1
 800a532:	d505      	bpl.n	800a540 <_fwalk_reent+0x24>
 800a534:	6824      	ldr	r4, [r4, #0]
 800a536:	2c00      	cmp	r4, #0
 800a538:	d1f7      	bne.n	800a52a <_fwalk_reent+0xe>
 800a53a:	4638      	mov	r0, r7
 800a53c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a540:	89ab      	ldrh	r3, [r5, #12]
 800a542:	2b01      	cmp	r3, #1
 800a544:	d907      	bls.n	800a556 <_fwalk_reent+0x3a>
 800a546:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a54a:	3301      	adds	r3, #1
 800a54c:	d003      	beq.n	800a556 <_fwalk_reent+0x3a>
 800a54e:	4629      	mov	r1, r5
 800a550:	4630      	mov	r0, r6
 800a552:	47c0      	blx	r8
 800a554:	4307      	orrs	r7, r0
 800a556:	3568      	adds	r5, #104	; 0x68
 800a558:	e7e9      	b.n	800a52e <_fwalk_reent+0x12>

0800a55a <__retarget_lock_init_recursive>:
 800a55a:	4770      	bx	lr

0800a55c <__retarget_lock_acquire_recursive>:
 800a55c:	4770      	bx	lr

0800a55e <__retarget_lock_release_recursive>:
 800a55e:	4770      	bx	lr

0800a560 <__swhatbuf_r>:
 800a560:	b570      	push	{r4, r5, r6, lr}
 800a562:	460e      	mov	r6, r1
 800a564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a568:	4614      	mov	r4, r2
 800a56a:	2900      	cmp	r1, #0
 800a56c:	461d      	mov	r5, r3
 800a56e:	b096      	sub	sp, #88	; 0x58
 800a570:	da08      	bge.n	800a584 <__swhatbuf_r+0x24>
 800a572:	2200      	movs	r2, #0
 800a574:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a578:	602a      	str	r2, [r5, #0]
 800a57a:	061a      	lsls	r2, r3, #24
 800a57c:	d410      	bmi.n	800a5a0 <__swhatbuf_r+0x40>
 800a57e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a582:	e00e      	b.n	800a5a2 <__swhatbuf_r+0x42>
 800a584:	466a      	mov	r2, sp
 800a586:	f000 f903 	bl	800a790 <_fstat_r>
 800a58a:	2800      	cmp	r0, #0
 800a58c:	dbf1      	blt.n	800a572 <__swhatbuf_r+0x12>
 800a58e:	9a01      	ldr	r2, [sp, #4]
 800a590:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a594:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a598:	425a      	negs	r2, r3
 800a59a:	415a      	adcs	r2, r3
 800a59c:	602a      	str	r2, [r5, #0]
 800a59e:	e7ee      	b.n	800a57e <__swhatbuf_r+0x1e>
 800a5a0:	2340      	movs	r3, #64	; 0x40
 800a5a2:	2000      	movs	r0, #0
 800a5a4:	6023      	str	r3, [r4, #0]
 800a5a6:	b016      	add	sp, #88	; 0x58
 800a5a8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a5ac <__smakebuf_r>:
 800a5ac:	898b      	ldrh	r3, [r1, #12]
 800a5ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a5b0:	079d      	lsls	r5, r3, #30
 800a5b2:	4606      	mov	r6, r0
 800a5b4:	460c      	mov	r4, r1
 800a5b6:	d507      	bpl.n	800a5c8 <__smakebuf_r+0x1c>
 800a5b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a5bc:	6023      	str	r3, [r4, #0]
 800a5be:	6123      	str	r3, [r4, #16]
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	6163      	str	r3, [r4, #20]
 800a5c4:	b002      	add	sp, #8
 800a5c6:	bd70      	pop	{r4, r5, r6, pc}
 800a5c8:	466a      	mov	r2, sp
 800a5ca:	ab01      	add	r3, sp, #4
 800a5cc:	f7ff ffc8 	bl	800a560 <__swhatbuf_r>
 800a5d0:	9900      	ldr	r1, [sp, #0]
 800a5d2:	4605      	mov	r5, r0
 800a5d4:	4630      	mov	r0, r6
 800a5d6:	f7ff f961 	bl	800989c <_malloc_r>
 800a5da:	b948      	cbnz	r0, 800a5f0 <__smakebuf_r+0x44>
 800a5dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5e0:	059a      	lsls	r2, r3, #22
 800a5e2:	d4ef      	bmi.n	800a5c4 <__smakebuf_r+0x18>
 800a5e4:	f023 0303 	bic.w	r3, r3, #3
 800a5e8:	f043 0302 	orr.w	r3, r3, #2
 800a5ec:	81a3      	strh	r3, [r4, #12]
 800a5ee:	e7e3      	b.n	800a5b8 <__smakebuf_r+0xc>
 800a5f0:	4b0d      	ldr	r3, [pc, #52]	; (800a628 <__smakebuf_r+0x7c>)
 800a5f2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a5f4:	89a3      	ldrh	r3, [r4, #12]
 800a5f6:	6020      	str	r0, [r4, #0]
 800a5f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5fc:	81a3      	strh	r3, [r4, #12]
 800a5fe:	9b00      	ldr	r3, [sp, #0]
 800a600:	6120      	str	r0, [r4, #16]
 800a602:	6163      	str	r3, [r4, #20]
 800a604:	9b01      	ldr	r3, [sp, #4]
 800a606:	b15b      	cbz	r3, 800a620 <__smakebuf_r+0x74>
 800a608:	4630      	mov	r0, r6
 800a60a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a60e:	f000 f8d1 	bl	800a7b4 <_isatty_r>
 800a612:	b128      	cbz	r0, 800a620 <__smakebuf_r+0x74>
 800a614:	89a3      	ldrh	r3, [r4, #12]
 800a616:	f023 0303 	bic.w	r3, r3, #3
 800a61a:	f043 0301 	orr.w	r3, r3, #1
 800a61e:	81a3      	strh	r3, [r4, #12]
 800a620:	89a0      	ldrh	r0, [r4, #12]
 800a622:	4305      	orrs	r5, r0
 800a624:	81a5      	strh	r5, [r4, #12]
 800a626:	e7cd      	b.n	800a5c4 <__smakebuf_r+0x18>
 800a628:	0800a3b9 	.word	0x0800a3b9

0800a62c <_malloc_usable_size_r>:
 800a62c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a630:	1f18      	subs	r0, r3, #4
 800a632:	2b00      	cmp	r3, #0
 800a634:	bfbc      	itt	lt
 800a636:	580b      	ldrlt	r3, [r1, r0]
 800a638:	18c0      	addlt	r0, r0, r3
 800a63a:	4770      	bx	lr

0800a63c <_raise_r>:
 800a63c:	291f      	cmp	r1, #31
 800a63e:	b538      	push	{r3, r4, r5, lr}
 800a640:	4604      	mov	r4, r0
 800a642:	460d      	mov	r5, r1
 800a644:	d904      	bls.n	800a650 <_raise_r+0x14>
 800a646:	2316      	movs	r3, #22
 800a648:	6003      	str	r3, [r0, #0]
 800a64a:	f04f 30ff 	mov.w	r0, #4294967295
 800a64e:	bd38      	pop	{r3, r4, r5, pc}
 800a650:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a652:	b112      	cbz	r2, 800a65a <_raise_r+0x1e>
 800a654:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a658:	b94b      	cbnz	r3, 800a66e <_raise_r+0x32>
 800a65a:	4620      	mov	r0, r4
 800a65c:	f000 f830 	bl	800a6c0 <_getpid_r>
 800a660:	462a      	mov	r2, r5
 800a662:	4601      	mov	r1, r0
 800a664:	4620      	mov	r0, r4
 800a666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a66a:	f000 b817 	b.w	800a69c <_kill_r>
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d00a      	beq.n	800a688 <_raise_r+0x4c>
 800a672:	1c59      	adds	r1, r3, #1
 800a674:	d103      	bne.n	800a67e <_raise_r+0x42>
 800a676:	2316      	movs	r3, #22
 800a678:	6003      	str	r3, [r0, #0]
 800a67a:	2001      	movs	r0, #1
 800a67c:	e7e7      	b.n	800a64e <_raise_r+0x12>
 800a67e:	2400      	movs	r4, #0
 800a680:	4628      	mov	r0, r5
 800a682:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a686:	4798      	blx	r3
 800a688:	2000      	movs	r0, #0
 800a68a:	e7e0      	b.n	800a64e <_raise_r+0x12>

0800a68c <raise>:
 800a68c:	4b02      	ldr	r3, [pc, #8]	; (800a698 <raise+0xc>)
 800a68e:	4601      	mov	r1, r0
 800a690:	6818      	ldr	r0, [r3, #0]
 800a692:	f7ff bfd3 	b.w	800a63c <_raise_r>
 800a696:	bf00      	nop
 800a698:	20000040 	.word	0x20000040

0800a69c <_kill_r>:
 800a69c:	b538      	push	{r3, r4, r5, lr}
 800a69e:	2300      	movs	r3, #0
 800a6a0:	4d06      	ldr	r5, [pc, #24]	; (800a6bc <_kill_r+0x20>)
 800a6a2:	4604      	mov	r4, r0
 800a6a4:	4608      	mov	r0, r1
 800a6a6:	4611      	mov	r1, r2
 800a6a8:	602b      	str	r3, [r5, #0]
 800a6aa:	f7f7 ffb2 	bl	8002612 <_kill>
 800a6ae:	1c43      	adds	r3, r0, #1
 800a6b0:	d102      	bne.n	800a6b8 <_kill_r+0x1c>
 800a6b2:	682b      	ldr	r3, [r5, #0]
 800a6b4:	b103      	cbz	r3, 800a6b8 <_kill_r+0x1c>
 800a6b6:	6023      	str	r3, [r4, #0]
 800a6b8:	bd38      	pop	{r3, r4, r5, pc}
 800a6ba:	bf00      	nop
 800a6bc:	20000454 	.word	0x20000454

0800a6c0 <_getpid_r>:
 800a6c0:	f7f7 bfa0 	b.w	8002604 <_getpid>

0800a6c4 <__sread>:
 800a6c4:	b510      	push	{r4, lr}
 800a6c6:	460c      	mov	r4, r1
 800a6c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6cc:	f000 f894 	bl	800a7f8 <_read_r>
 800a6d0:	2800      	cmp	r0, #0
 800a6d2:	bfab      	itete	ge
 800a6d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a6d6:	89a3      	ldrhlt	r3, [r4, #12]
 800a6d8:	181b      	addge	r3, r3, r0
 800a6da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a6de:	bfac      	ite	ge
 800a6e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a6e2:	81a3      	strhlt	r3, [r4, #12]
 800a6e4:	bd10      	pop	{r4, pc}

0800a6e6 <__swrite>:
 800a6e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ea:	461f      	mov	r7, r3
 800a6ec:	898b      	ldrh	r3, [r1, #12]
 800a6ee:	4605      	mov	r5, r0
 800a6f0:	05db      	lsls	r3, r3, #23
 800a6f2:	460c      	mov	r4, r1
 800a6f4:	4616      	mov	r6, r2
 800a6f6:	d505      	bpl.n	800a704 <__swrite+0x1e>
 800a6f8:	2302      	movs	r3, #2
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a700:	f000 f868 	bl	800a7d4 <_lseek_r>
 800a704:	89a3      	ldrh	r3, [r4, #12]
 800a706:	4632      	mov	r2, r6
 800a708:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a70c:	81a3      	strh	r3, [r4, #12]
 800a70e:	4628      	mov	r0, r5
 800a710:	463b      	mov	r3, r7
 800a712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a71a:	f000 b817 	b.w	800a74c <_write_r>

0800a71e <__sseek>:
 800a71e:	b510      	push	{r4, lr}
 800a720:	460c      	mov	r4, r1
 800a722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a726:	f000 f855 	bl	800a7d4 <_lseek_r>
 800a72a:	1c43      	adds	r3, r0, #1
 800a72c:	89a3      	ldrh	r3, [r4, #12]
 800a72e:	bf15      	itete	ne
 800a730:	6560      	strne	r0, [r4, #84]	; 0x54
 800a732:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a736:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a73a:	81a3      	strheq	r3, [r4, #12]
 800a73c:	bf18      	it	ne
 800a73e:	81a3      	strhne	r3, [r4, #12]
 800a740:	bd10      	pop	{r4, pc}

0800a742 <__sclose>:
 800a742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a746:	f000 b813 	b.w	800a770 <_close_r>
	...

0800a74c <_write_r>:
 800a74c:	b538      	push	{r3, r4, r5, lr}
 800a74e:	4604      	mov	r4, r0
 800a750:	4608      	mov	r0, r1
 800a752:	4611      	mov	r1, r2
 800a754:	2200      	movs	r2, #0
 800a756:	4d05      	ldr	r5, [pc, #20]	; (800a76c <_write_r+0x20>)
 800a758:	602a      	str	r2, [r5, #0]
 800a75a:	461a      	mov	r2, r3
 800a75c:	f7f7 ff90 	bl	8002680 <_write>
 800a760:	1c43      	adds	r3, r0, #1
 800a762:	d102      	bne.n	800a76a <_write_r+0x1e>
 800a764:	682b      	ldr	r3, [r5, #0]
 800a766:	b103      	cbz	r3, 800a76a <_write_r+0x1e>
 800a768:	6023      	str	r3, [r4, #0]
 800a76a:	bd38      	pop	{r3, r4, r5, pc}
 800a76c:	20000454 	.word	0x20000454

0800a770 <_close_r>:
 800a770:	b538      	push	{r3, r4, r5, lr}
 800a772:	2300      	movs	r3, #0
 800a774:	4d05      	ldr	r5, [pc, #20]	; (800a78c <_close_r+0x1c>)
 800a776:	4604      	mov	r4, r0
 800a778:	4608      	mov	r0, r1
 800a77a:	602b      	str	r3, [r5, #0]
 800a77c:	f7f7 ff9c 	bl	80026b8 <_close>
 800a780:	1c43      	adds	r3, r0, #1
 800a782:	d102      	bne.n	800a78a <_close_r+0x1a>
 800a784:	682b      	ldr	r3, [r5, #0]
 800a786:	b103      	cbz	r3, 800a78a <_close_r+0x1a>
 800a788:	6023      	str	r3, [r4, #0]
 800a78a:	bd38      	pop	{r3, r4, r5, pc}
 800a78c:	20000454 	.word	0x20000454

0800a790 <_fstat_r>:
 800a790:	b538      	push	{r3, r4, r5, lr}
 800a792:	2300      	movs	r3, #0
 800a794:	4d06      	ldr	r5, [pc, #24]	; (800a7b0 <_fstat_r+0x20>)
 800a796:	4604      	mov	r4, r0
 800a798:	4608      	mov	r0, r1
 800a79a:	4611      	mov	r1, r2
 800a79c:	602b      	str	r3, [r5, #0]
 800a79e:	f7f7 ff96 	bl	80026ce <_fstat>
 800a7a2:	1c43      	adds	r3, r0, #1
 800a7a4:	d102      	bne.n	800a7ac <_fstat_r+0x1c>
 800a7a6:	682b      	ldr	r3, [r5, #0]
 800a7a8:	b103      	cbz	r3, 800a7ac <_fstat_r+0x1c>
 800a7aa:	6023      	str	r3, [r4, #0]
 800a7ac:	bd38      	pop	{r3, r4, r5, pc}
 800a7ae:	bf00      	nop
 800a7b0:	20000454 	.word	0x20000454

0800a7b4 <_isatty_r>:
 800a7b4:	b538      	push	{r3, r4, r5, lr}
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	4d05      	ldr	r5, [pc, #20]	; (800a7d0 <_isatty_r+0x1c>)
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	4608      	mov	r0, r1
 800a7be:	602b      	str	r3, [r5, #0]
 800a7c0:	f7f7 ff94 	bl	80026ec <_isatty>
 800a7c4:	1c43      	adds	r3, r0, #1
 800a7c6:	d102      	bne.n	800a7ce <_isatty_r+0x1a>
 800a7c8:	682b      	ldr	r3, [r5, #0]
 800a7ca:	b103      	cbz	r3, 800a7ce <_isatty_r+0x1a>
 800a7cc:	6023      	str	r3, [r4, #0]
 800a7ce:	bd38      	pop	{r3, r4, r5, pc}
 800a7d0:	20000454 	.word	0x20000454

0800a7d4 <_lseek_r>:
 800a7d4:	b538      	push	{r3, r4, r5, lr}
 800a7d6:	4604      	mov	r4, r0
 800a7d8:	4608      	mov	r0, r1
 800a7da:	4611      	mov	r1, r2
 800a7dc:	2200      	movs	r2, #0
 800a7de:	4d05      	ldr	r5, [pc, #20]	; (800a7f4 <_lseek_r+0x20>)
 800a7e0:	602a      	str	r2, [r5, #0]
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	f7f7 ff8c 	bl	8002700 <_lseek>
 800a7e8:	1c43      	adds	r3, r0, #1
 800a7ea:	d102      	bne.n	800a7f2 <_lseek_r+0x1e>
 800a7ec:	682b      	ldr	r3, [r5, #0]
 800a7ee:	b103      	cbz	r3, 800a7f2 <_lseek_r+0x1e>
 800a7f0:	6023      	str	r3, [r4, #0]
 800a7f2:	bd38      	pop	{r3, r4, r5, pc}
 800a7f4:	20000454 	.word	0x20000454

0800a7f8 <_read_r>:
 800a7f8:	b538      	push	{r3, r4, r5, lr}
 800a7fa:	4604      	mov	r4, r0
 800a7fc:	4608      	mov	r0, r1
 800a7fe:	4611      	mov	r1, r2
 800a800:	2200      	movs	r2, #0
 800a802:	4d05      	ldr	r5, [pc, #20]	; (800a818 <_read_r+0x20>)
 800a804:	602a      	str	r2, [r5, #0]
 800a806:	461a      	mov	r2, r3
 800a808:	f7f7 ff1d 	bl	8002646 <_read>
 800a80c:	1c43      	adds	r3, r0, #1
 800a80e:	d102      	bne.n	800a816 <_read_r+0x1e>
 800a810:	682b      	ldr	r3, [r5, #0]
 800a812:	b103      	cbz	r3, 800a816 <_read_r+0x1e>
 800a814:	6023      	str	r3, [r4, #0]
 800a816:	bd38      	pop	{r3, r4, r5, pc}
 800a818:	20000454 	.word	0x20000454

0800a81c <_init>:
 800a81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a81e:	bf00      	nop
 800a820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a822:	bc08      	pop	{r3}
 800a824:	469e      	mov	lr, r3
 800a826:	4770      	bx	lr

0800a828 <_fini>:
 800a828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a82a:	bf00      	nop
 800a82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a82e:	bc08      	pop	{r3}
 800a830:	469e      	mov	lr, r3
 800a832:	4770      	bx	lr
