
GRUZIK2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2e4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  0800b3f8  0800b3f8  0001b3f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba18  0800ba18  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800ba18  0800ba18  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ba18  0800ba18  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba18  0800ba18  0001ba18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba1c  0800ba1c  0001ba1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800ba20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  200001e4  0800bc04  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000538  0800bc04  00020538  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c7e  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c09  00000000  00000000  00030e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  00033a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e50  00000000  00000000  00034a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003723  00000000  00000000  00035880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013216  00000000  00000000  00038fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000913b9  00000000  00000000  0004c1b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd572  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055b0  00000000  00000000  000dd5c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b3dc 	.word	0x0800b3dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800b3dc 	.word	0x0800b3dc

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_f2iz>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800112c:	d30f      	bcc.n	800114e <__aeabi_f2iz+0x2a>
 800112e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001132:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001136:	d90d      	bls.n	8001154 <__aeabi_f2iz+0x30>
 8001138:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800113c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001140:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001144:	fa23 f002 	lsr.w	r0, r3, r2
 8001148:	bf18      	it	ne
 800114a:	4240      	negne	r0, r0
 800114c:	4770      	bx	lr
 800114e:	f04f 0000 	mov.w	r0, #0
 8001152:	4770      	bx	lr
 8001154:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001158:	d101      	bne.n	800115e <__aeabi_f2iz+0x3a>
 800115a:	0242      	lsls	r2, r0, #9
 800115c:	d105      	bne.n	800116a <__aeabi_f2iz+0x46>
 800115e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001162:	bf08      	it	eq
 8001164:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr

08001170 <__aeabi_d2lz>:
 8001170:	b538      	push	{r3, r4, r5, lr}
 8001172:	4605      	mov	r5, r0
 8001174:	460c      	mov	r4, r1
 8001176:	2200      	movs	r2, #0
 8001178:	2300      	movs	r3, #0
 800117a:	4628      	mov	r0, r5
 800117c:	4621      	mov	r1, r4
 800117e:	f7ff fc27 	bl	80009d0 <__aeabi_dcmplt>
 8001182:	b928      	cbnz	r0, 8001190 <__aeabi_d2lz+0x20>
 8001184:	4628      	mov	r0, r5
 8001186:	4621      	mov	r1, r4
 8001188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800118c:	f000 b80a 	b.w	80011a4 <__aeabi_d2ulz>
 8001190:	4628      	mov	r0, r5
 8001192:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001196:	f000 f805 	bl	80011a4 <__aeabi_d2ulz>
 800119a:	4240      	negs	r0, r0
 800119c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011a0:	bd38      	pop	{r3, r4, r5, pc}
 80011a2:	bf00      	nop

080011a4 <__aeabi_d2ulz>:
 80011a4:	b5d0      	push	{r4, r6, r7, lr}
 80011a6:	2200      	movs	r2, #0
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <__aeabi_d2ulz+0x34>)
 80011aa:	4606      	mov	r6, r0
 80011ac:	460f      	mov	r7, r1
 80011ae:	f7ff f99d 	bl	80004ec <__aeabi_dmul>
 80011b2:	f7ff fc73 	bl	8000a9c <__aeabi_d2uiz>
 80011b6:	4604      	mov	r4, r0
 80011b8:	f7ff f91e 	bl	80003f8 <__aeabi_ui2d>
 80011bc:	2200      	movs	r2, #0
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <__aeabi_d2ulz+0x38>)
 80011c0:	f7ff f994 	bl	80004ec <__aeabi_dmul>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4630      	mov	r0, r6
 80011ca:	4639      	mov	r1, r7
 80011cc:	f7fe ffd6 	bl	800017c <__aeabi_dsub>
 80011d0:	f7ff fc64 	bl	8000a9c <__aeabi_d2uiz>
 80011d4:	4621      	mov	r1, r4
 80011d6:	bdd0      	pop	{r4, r6, r7, pc}
 80011d8:	3df00000 	.word	0x3df00000
 80011dc:	41f00000 	.word	0x41f00000

080011e0 <RB_Write>:
 */
#include "main.h"
#include "RingBuffer.h"

RB_Status RB_Write(RingBuffer_t *Buf, uint8_t value)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	70fb      	strb	r3, [r7, #3]
	uint8_t HeadTmp = (Buf->Head + 1) % RING_BUFFER_SIZE;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	3301      	adds	r3, #1
 80011f2:	425a      	negs	r2, r3
 80011f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011f8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80011fc:	bf58      	it	pl
 80011fe:	4253      	negpl	r3, r2
 8001200:	73fb      	strb	r3, [r7, #15]

	if(HeadTmp == Buf->Tail)
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	b29a      	uxth	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	885b      	ldrh	r3, [r3, #2]
 800120a:	429a      	cmp	r2, r3
 800120c:	d101      	bne.n	8001212 <RB_Write+0x32>
	{
		return RB_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e00b      	b.n	800122a <RB_Write+0x4a>
	}

	Buf->Buffer[Buf->Head] = value;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	461a      	mov	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4413      	add	r3, r2
 800121c:	78fa      	ldrb	r2, [r7, #3]
 800121e:	711a      	strb	r2, [r3, #4]

	Buf->Head = HeadTmp;
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	b29a      	uxth	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	801a      	strh	r2, [r3, #0]

	return RB_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr

08001234 <RB_Read>:

RB_Status RB_Read(RingBuffer_t *Buf, uint8_t *value)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
	if(Buf->Head == Buf->Tail)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	881a      	ldrh	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	885b      	ldrh	r3, [r3, #2]
 8001246:	429a      	cmp	r2, r3
 8001248:	d101      	bne.n	800124e <RB_Read+0x1a>
	{
		return RB_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e015      	b.n	800127a <RB_Read+0x46>
	}

	*value = Buf->Buffer[Buf->Tail];
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	885b      	ldrh	r3, [r3, #2]
 8001252:	461a      	mov	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4413      	add	r3, r2
 8001258:	791a      	ldrb	r2, [r3, #4]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	701a      	strb	r2, [r3, #0]

	Buf->Tail = (Buf->Tail + 1) % RING_BUFFER_SIZE;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	885b      	ldrh	r3, [r3, #2]
 8001262:	3301      	adds	r3, #1
 8001264:	425a      	negs	r2, r3
 8001266:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800126a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800126e:	bf58      	it	pl
 8001270:	4253      	negpl	r3, r2
 8001272:	b29a      	uxth	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	805a      	strh	r2, [r3, #2]

	return RB_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <Parser_TakeLine>:
#include "SimpleParser.h"
#include "Line_Follower.h"
char My_Name[32] = "GRUZIK2.0";

void Parser_TakeLine(RingBuffer_t *Buf, uint8_t *ReceivedData)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
	uint8_t Tmp;
	uint8_t i = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	73fb      	strb	r3, [r7, #15]
	do
	{
		RB_Read(Buf, &Tmp);
 8001292:	f107 030e 	add.w	r3, r7, #14
 8001296:	4619      	mov	r1, r3
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff ffcb 	bl	8001234 <RB_Read>

		if(Tmp == ENDLINE)
 800129e:	7bbb      	ldrb	r3, [r7, #14]
 80012a0:	2b0a      	cmp	r3, #10
 80012a2:	d105      	bne.n	80012b0 <Parser_TakeLine+0x2c>
		{
			ReceivedData[i] = 0;
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	4413      	add	r3, r2
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
 80012ae:	e004      	b.n	80012ba <Parser_TakeLine+0x36>

		}

		else
		{
			ReceivedData[i] = Tmp;
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	4413      	add	r3, r2
 80012b6:	7bba      	ldrb	r2, [r7, #14]
 80012b8:	701a      	strb	r2, [r3, #0]
		}
		i++;
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	3301      	adds	r3, #1
 80012be:	73fb      	strb	r3, [r7, #15]

	} while(Tmp != ENDLINE);
 80012c0:	7bbb      	ldrb	r3, [r7, #14]
 80012c2:	2b0a      	cmp	r3, #10
 80012c4:	d1e5      	bne.n	8001292 <Parser_TakeLine+0xe>

}
 80012c6:	bf00      	nop
 80012c8:	bf00      	nop
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <kp_change>:

static void kp_change(LineFollower_t *LF)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 80012d8:	490f      	ldr	r1, [pc, #60]	; (8001318 <kp_change+0x48>)
 80012da:	2000      	movs	r0, #0
 80012dc:	f007 f910 	bl	8008500 <strtok>
 80012e0:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d011      	beq.n	800130e <kp_change+0x3e>
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f7fe ff3a 	bl	8000164 <strlen>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b1f      	cmp	r3, #31
 80012f4:	d80b      	bhi.n	800130e <kp_change+0x3e>
	{
		LF->Kp = atof(ParsePointer);
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f005 fe36 	bl	8006f68 <atof>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4610      	mov	r0, r2
 8001302:	4619      	mov	r1, r3
 8001304:	f7ff fbea 	bl	8000adc <__aeabi_d2f>
 8001308:	4602      	mov	r2, r0
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	601a      	str	r2, [r3, #0]
	}

}
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	0800b3f8 	.word	0x0800b3f8

0800131c <kd_change>:
static void kd_change(LineFollower_t *LF)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001324:	490f      	ldr	r1, [pc, #60]	; (8001364 <kd_change+0x48>)
 8001326:	2000      	movs	r0, #0
 8001328:	f007 f8ea 	bl	8008500 <strtok>
 800132c:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d011      	beq.n	800135a <kd_change+0x3e>
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f7fe ff14 	bl	8000164 <strlen>
 800133c:	4603      	mov	r3, r0
 800133e:	2b1f      	cmp	r3, #31
 8001340:	d80b      	bhi.n	800135a <kd_change+0x3e>
	{
		LF->Kd = atof(ParsePointer);
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f005 fe10 	bl	8006f68 <atof>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	f7ff fbc4 	bl	8000adc <__aeabi_d2f>
 8001354:	4602      	mov	r2, r0
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	605a      	str	r2, [r3, #4]
	}
}
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	0800b3f8 	.word	0x0800b3f8

08001368 <Base_speed_change>:
static void Base_speed_change(LineFollower_t *LF)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001370:	4915      	ldr	r1, [pc, #84]	; (80013c8 <Base_speed_change+0x60>)
 8001372:	2000      	movs	r0, #0
 8001374:	f007 f8c4 	bl	8008500 <strtok>
 8001378:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d01d      	beq.n	80013be <Base_speed_change+0x56>
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f7fe feee 	bl	8000164 <strlen>
 8001388:	4603      	mov	r3, r0
 800138a:	2b1f      	cmp	r3, #31
 800138c:	d817      	bhi.n	80013be <Base_speed_change+0x56>
	{
		LF->Base_speed_R = atof(ParsePointer);
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f005 fdea 	bl	8006f68 <atof>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4610      	mov	r0, r2
 800139a:	4619      	mov	r1, r3
 800139c:	f7ff fb56 	bl	8000a4c <__aeabi_d2iz>
 80013a0:	4602      	mov	r2, r0
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	609a      	str	r2, [r3, #8]
		LF->Base_speed_L = atof(ParsePointer);
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f005 fdde 	bl	8006f68 <atof>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4610      	mov	r0, r2
 80013b2:	4619      	mov	r1, r3
 80013b4:	f7ff fb4a 	bl	8000a4c <__aeabi_d2iz>
 80013b8:	4602      	mov	r2, r0
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	60da      	str	r2, [r3, #12]
	}
}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	0800b3f8 	.word	0x0800b3f8

080013cc <Max_speed_change>:

static void Max_speed_change(LineFollower_t *LF)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 80013d4:	4915      	ldr	r1, [pc, #84]	; (800142c <Max_speed_change+0x60>)
 80013d6:	2000      	movs	r0, #0
 80013d8:	f007 f892 	bl	8008500 <strtok>
 80013dc:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d01d      	beq.n	8001422 <Max_speed_change+0x56>
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f7fe febc 	bl	8000164 <strlen>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b1f      	cmp	r3, #31
 80013f0:	d817      	bhi.n	8001422 <Max_speed_change+0x56>
	{
		LF->Max_speed_R = atof(ParsePointer);
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f005 fdb8 	bl	8006f68 <atof>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	4610      	mov	r0, r2
 80013fe:	4619      	mov	r1, r3
 8001400:	f7ff fb24 	bl	8000a4c <__aeabi_d2iz>
 8001404:	4602      	mov	r2, r0
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	611a      	str	r2, [r3, #16]
		LF->Max_speed_L = atof(ParsePointer);
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f005 fdac 	bl	8006f68 <atof>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4610      	mov	r0, r2
 8001416:	4619      	mov	r1, r3
 8001418:	f7ff fb18 	bl	8000a4c <__aeabi_d2iz>
 800141c:	4602      	mov	r2, r0
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	615a      	str	r2, [r3, #20]
	}
}
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	0800b3f8 	.word	0x0800b3f8

08001430 <Sharp_bend_speed_right_change>:
static void Sharp_bend_speed_right_change(LineFollower_t *LF)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001438:	490f      	ldr	r1, [pc, #60]	; (8001478 <Sharp_bend_speed_right_change+0x48>)
 800143a:	2000      	movs	r0, #0
 800143c:	f007 f860 	bl	8008500 <strtok>
 8001440:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d011      	beq.n	800146e <Sharp_bend_speed_right_change+0x3e>
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f7fe fe8a 	bl	8000164 <strlen>
 8001450:	4603      	mov	r3, r0
 8001452:	2b1f      	cmp	r3, #31
 8001454:	d80b      	bhi.n	800146e <Sharp_bend_speed_right_change+0x3e>
	{
	LF->Sharp_bend_speed_right = atof(ParsePointer);
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f005 fd86 	bl	8006f68 <atof>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff faf2 	bl	8000a4c <__aeabi_d2iz>
 8001468:	4602      	mov	r2, r0
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	619a      	str	r2, [r3, #24]
	}
}
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	0800b3f8 	.word	0x0800b3f8

0800147c <Sharp_bend_speed_left_change>:
static void Sharp_bend_speed_left_change(LineFollower_t *LF)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001484:	490f      	ldr	r1, [pc, #60]	; (80014c4 <Sharp_bend_speed_left_change+0x48>)
 8001486:	2000      	movs	r0, #0
 8001488:	f007 f83a 	bl	8008500 <strtok>
 800148c:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d011      	beq.n	80014ba <Sharp_bend_speed_left_change+0x3e>
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	f7fe fe64 	bl	8000164 <strlen>
 800149c:	4603      	mov	r3, r0
 800149e:	2b1f      	cmp	r3, #31
 80014a0:	d80b      	bhi.n	80014ba <Sharp_bend_speed_left_change+0x3e>
	{
	LF->Sharp_bend_speed_left = atof(ParsePointer);
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f005 fd60 	bl	8006f68 <atof>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	f7ff facc 	bl	8000a4c <__aeabi_d2iz>
 80014b4:	4602      	mov	r2, r0
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	61da      	str	r2, [r3, #28]
	}
}
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	0800b3f8 	.word	0x0800b3f8

080014c8 <Bend_speed_right_change>:
static void Bend_speed_right_change(LineFollower_t *LF)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 80014d0:	490f      	ldr	r1, [pc, #60]	; (8001510 <Bend_speed_right_change+0x48>)
 80014d2:	2000      	movs	r0, #0
 80014d4:	f007 f814 	bl	8008500 <strtok>
 80014d8:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d011      	beq.n	8001506 <Bend_speed_right_change+0x3e>
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f7fe fe3e 	bl	8000164 <strlen>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b1f      	cmp	r3, #31
 80014ec:	d80b      	bhi.n	8001506 <Bend_speed_right_change+0x3e>
	{
	LF->Bend_speed_right = atof(ParsePointer);
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f005 fd3a 	bl	8006f68 <atof>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	f7ff faa6 	bl	8000a4c <__aeabi_d2iz>
 8001500:	4602      	mov	r2, r0
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	621a      	str	r2, [r3, #32]
	}
}
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	0800b3f8 	.word	0x0800b3f8

08001514 <Bend_speed_left_change>:
static void Bend_speed_left_change(LineFollower_t *LF)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 800151c:	490f      	ldr	r1, [pc, #60]	; (800155c <Bend_speed_left_change+0x48>)
 800151e:	2000      	movs	r0, #0
 8001520:	f006 ffee 	bl	8008500 <strtok>
 8001524:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d011      	beq.n	8001552 <Bend_speed_left_change+0x3e>
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f7fe fe18 	bl	8000164 <strlen>
 8001534:	4603      	mov	r3, r0
 8001536:	2b1f      	cmp	r3, #31
 8001538:	d80b      	bhi.n	8001552 <Bend_speed_left_change+0x3e>
	{
	LF->Bend_speed_left = atof(ParsePointer);
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f005 fd14 	bl	8006f68 <atof>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f7ff fa80 	bl	8000a4c <__aeabi_d2iz>
 800154c:	4602      	mov	r2, r0
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	0800b3f8 	.word	0x0800b3f8

08001560 <App_Controll>:
static void App_Controll(char RxData, LineFollower_t *LineFollower)
{
 8001560:	b5b0      	push	{r4, r5, r7, lr}
 8001562:	b092      	sub	sp, #72	; 0x48
 8001564:	af02      	add	r7, sp, #8
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	71fb      	strb	r3, [r7, #7]
	/*Stop robot*/
	if(RxData == 'N')
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	2b4e      	cmp	r3, #78	; 0x4e
 8001570:	d145      	bne.n	80015fe <App_Controll+0x9e>
	{
		uint8_t buffer[48];
		/*Stop GRUZIK2.0 and turn off the LED*/
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001572:	2200      	movs	r2, #0
 8001574:	2140      	movs	r1, #64	; 0x40
 8001576:	4858      	ldr	r0, [pc, #352]	; (80016d8 <App_Controll+0x178>)
 8001578:	f003 f933 	bl	80047e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800157c:	2200      	movs	r2, #0
 800157e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001582:	4856      	ldr	r0, [pc, #344]	; (80016dc <App_Controll+0x17c>)
 8001584:	f003 f92d 	bl	80047e2 <HAL_GPIO_WritePin>

		/*Send battery voltage*/
		LineFollower->battery_voltage = (LineFollower->Adc_Value * 8.3)/3831;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800158c:	4618      	mov	r0, r3
 800158e:	f7fe ff43 	bl	8000418 <__aeabi_i2d>
 8001592:	a349      	add	r3, pc, #292	; (adr r3, 80016b8 <App_Controll+0x158>)
 8001594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001598:	f7fe ffa8 	bl	80004ec <__aeabi_dmul>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4610      	mov	r0, r2
 80015a2:	4619      	mov	r1, r3
 80015a4:	a346      	add	r3, pc, #280	; (adr r3, 80016c0 <App_Controll+0x160>)
 80015a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015aa:	f7ff f8c9 	bl	8000740 <__aeabi_ddiv>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	f7ff fa91 	bl	8000adc <__aeabi_d2f>
 80015ba:	4602      	mov	r2, r0
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	629a      	str	r2, [r3, #40]	; 0x28
		sprintf((char*)buffer, "ADC_Value = %d \r\n Battery_Voltage = %0.2f V \r\n", LineFollower->Adc_Value, LineFollower->battery_voltage);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80015c4:	461c      	mov	r4, r3
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ff36 	bl	800043c <__aeabi_f2d>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	f107 000c 	add.w	r0, r7, #12
 80015d8:	e9cd 2300 	strd	r2, r3, [sp]
 80015dc:	4622      	mov	r2, r4
 80015de:	4940      	ldr	r1, [pc, #256]	; (80016e0 <App_Controll+0x180>)
 80015e0:	f006 f958 	bl	8007894 <siprintf>
		HAL_UART_Transmit(&huart1, buffer, strlen((char*)buffer), 100);
 80015e4:	f107 030c 	add.w	r3, r7, #12
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe fdbb 	bl	8000164 <strlen>
 80015ee:	4603      	mov	r3, r0
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	f107 010c 	add.w	r1, r7, #12
 80015f6:	2364      	movs	r3, #100	; 0x64
 80015f8:	483a      	ldr	r0, [pc, #232]	; (80016e4 <App_Controll+0x184>)
 80015fa:	f004 fe8d 	bl	8006318 <HAL_UART_Transmit>
	}
	/*Start robot*/
	if (RxData == 'Y')
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	2b59      	cmp	r3, #89	; 0x59
 8001602:	f040 8105 	bne.w	8001810 <App_Controll+0x2b0>
		/*Proportional to battery percentage boost for motors
		 * to keep roughly same speed as with full battery*/
		float battery_percentage;
		uint8_t buffer[48];
		//Calculate battery percentage based on battery voltage
		LineFollower->battery_voltage = (LineFollower->Adc_Value * 8.3)/3831;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ff04 	bl	8000418 <__aeabi_i2d>
 8001610:	a329      	add	r3, pc, #164	; (adr r3, 80016b8 <App_Controll+0x158>)
 8001612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001616:	f7fe ff69 	bl	80004ec <__aeabi_dmul>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	a327      	add	r3, pc, #156	; (adr r3, 80016c0 <App_Controll+0x160>)
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	f7ff f88a 	bl	8000740 <__aeabi_ddiv>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f7ff fa52 	bl	8000adc <__aeabi_d2f>
 8001638:	4602      	mov	r2, r0
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	629a      	str	r2, [r3, #40]	; 0x28

		//Full battery voltage in working line follower is about 8.24V
		battery_percentage = (LineFollower->battery_voltage / 8.24) * 100;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe fefa 	bl	800043c <__aeabi_f2d>
 8001648:	a31f      	add	r3, pc, #124	; (adr r3, 80016c8 <App_Controll+0x168>)
 800164a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164e:	f7ff f877 	bl	8000740 <__aeabi_ddiv>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <App_Controll+0x188>)
 8001660:	f7fe ff44 	bl	80004ec <__aeabi_dmul>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4610      	mov	r0, r2
 800166a:	4619      	mov	r1, r3
 800166c:	f7ff fa36 	bl	8000adc <__aeabi_d2f>
 8001670:	4603      	mov	r3, r0
 8001672:	63fb      	str	r3, [r7, #60]	; 0x3c

		/*To don't damage 2s LiPo battery Line follower can't start with battery below 7.2V*/
		if (LineFollower->battery_voltage < 7.2)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe fedf 	bl	800043c <__aeabi_f2d>
 800167e:	a314      	add	r3, pc, #80	; (adr r3, 80016d0 <App_Controll+0x170>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	f7ff f9a4 	bl	80009d0 <__aeabi_dcmplt>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d030      	beq.n	80016f0 <App_Controll+0x190>
		{
			sprintf((char*)buffer, "! Low Battery !\r\n");
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	4916      	ldr	r1, [pc, #88]	; (80016ec <App_Controll+0x18c>)
 8001694:	4618      	mov	r0, r3
 8001696:	f006 f8fd 	bl	8007894 <siprintf>
			HAL_UART_Transmit(&huart1, buffer, strlen((char*)buffer), 100);
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe fd60 	bl	8000164 <strlen>
 80016a4:	4603      	mov	r3, r0
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	f107 010c 	add.w	r1, r7, #12
 80016ac:	2364      	movs	r3, #100	; 0x64
 80016ae:	480d      	ldr	r0, [pc, #52]	; (80016e4 <App_Controll+0x184>)
 80016b0:	f004 fe32 	bl	8006318 <HAL_UART_Transmit>
 80016b4:	e32f      	b.n	8001d16 <App_Controll+0x7b6>
 80016b6:	bf00      	nop
 80016b8:	9999999a 	.word	0x9999999a
 80016bc:	40209999 	.word	0x40209999
 80016c0:	00000000 	.word	0x00000000
 80016c4:	40adee00 	.word	0x40adee00
 80016c8:	47ae147b 	.word	0x47ae147b
 80016cc:	40207ae1 	.word	0x40207ae1
 80016d0:	cccccccd 	.word	0xcccccccd
 80016d4:	401ccccc 	.word	0x401ccccc
 80016d8:	40010c00 	.word	0x40010c00
 80016dc:	40011000 	.word	0x40011000
 80016e0:	0800b3fc 	.word	0x0800b3fc
 80016e4:	20000494 	.word	0x20000494
 80016e8:	40590000 	.word	0x40590000
 80016ec:	0800b42c 	.word	0x0800b42c
			return;
		}
		/*Motor speed*/
		LineFollower->Speed_level = ((100 - battery_percentage + 100) / 100) - LineFollower->Speed_offset;
 80016f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80016f2:	48a5      	ldr	r0, [pc, #660]	; (8001988 <App_Controll+0x428>)
 80016f4:	f7ff fa46 	bl	8000b84 <__aeabi_fsub>
 80016f8:	4603      	mov	r3, r0
 80016fa:	49a3      	ldr	r1, [pc, #652]	; (8001988 <App_Controll+0x428>)
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fa43 	bl	8000b88 <__addsf3>
 8001702:	4603      	mov	r3, r0
 8001704:	49a0      	ldr	r1, [pc, #640]	; (8001988 <App_Controll+0x428>)
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fbfa 	bl	8000f00 <__aeabi_fdiv>
 800170c:	4603      	mov	r3, r0
 800170e:	461a      	mov	r2, r3
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001714:	4619      	mov	r1, r3
 8001716:	4610      	mov	r0, r2
 8001718:	f7ff fa34 	bl	8000b84 <__aeabi_fsub>
 800171c:	4603      	mov	r3, r0
 800171e:	461a      	mov	r2, r3
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	631a      	str	r2, [r3, #48]	; 0x30

		if(LineFollower->Speed_level < 1)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001728:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fcd1 	bl	80010d4 <__aeabi_fcmplt>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <App_Controll+0x1e0>
		{
			LineFollower->Speed_level = 1;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800173e:	631a      	str	r2, [r3, #48]	; 0x30
		}

		/*Send battery data*/
		LineFollower->battery_voltage = (LineFollower->Adc_Value * 8.3)/3831;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe fe67 	bl	8000418 <__aeabi_i2d>
 800174a:	a38b      	add	r3, pc, #556	; (adr r3, 8001978 <App_Controll+0x418>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7fe fecc 	bl	80004ec <__aeabi_dmul>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	a388      	add	r3, pc, #544	; (adr r3, 8001980 <App_Controll+0x420>)
 800175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001762:	f7fe ffed 	bl	8000740 <__aeabi_ddiv>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	f7ff f9b5 	bl	8000adc <__aeabi_d2f>
 8001772:	4602      	mov	r2, r0
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	629a      	str	r2, [r3, #40]	; 0x28
		sprintf((char*)buffer, "ADC_Value = %d \r\n Battery_Voltage = %0.2f V \r\n", LineFollower->Adc_Value, LineFollower->battery_voltage);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800177c:	461c      	mov	r4, r3
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fe5a 	bl	800043c <__aeabi_f2d>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	f107 000c 	add.w	r0, r7, #12
 8001790:	e9cd 2300 	strd	r2, r3, [sp]
 8001794:	4622      	mov	r2, r4
 8001796:	497d      	ldr	r1, [pc, #500]	; (800198c <App_Controll+0x42c>)
 8001798:	f006 f87c 	bl	8007894 <siprintf>
		HAL_UART_Transmit(&huart1, buffer, strlen((char*)buffer), 100);
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fcdf 	bl	8000164 <strlen>
 80017a6:	4603      	mov	r3, r0
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	f107 010c 	add.w	r1, r7, #12
 80017ae:	2364      	movs	r3, #100	; 0x64
 80017b0:	4877      	ldr	r0, [pc, #476]	; (8001990 <App_Controll+0x430>)
 80017b2:	f004 fdb1 	bl	8006318 <HAL_UART_Transmit>


		sprintf((char*)buffer, "Percentage = %0.2f \r\n Speed_level = %0.2f \r\n", battery_percentage, LineFollower->Speed_level);
 80017b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80017b8:	f7fe fe40 	bl	800043c <__aeabi_f2d>
 80017bc:	4604      	mov	r4, r0
 80017be:	460d      	mov	r5, r1
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fe39 	bl	800043c <__aeabi_f2d>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	f107 000c 	add.w	r0, r7, #12
 80017d2:	e9cd 2300 	strd	r2, r3, [sp]
 80017d6:	4622      	mov	r2, r4
 80017d8:	462b      	mov	r3, r5
 80017da:	496e      	ldr	r1, [pc, #440]	; (8001994 <App_Controll+0x434>)
 80017dc:	f006 f85a 	bl	8007894 <siprintf>
		HAL_UART_Transmit(&huart1, buffer, strlen((char*)buffer), 100);
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe fcbd 	bl	8000164 <strlen>
 80017ea:	4603      	mov	r3, r0
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	f107 010c 	add.w	r1, r7, #12
 80017f2:	2364      	movs	r3, #100	; 0x64
 80017f4:	4866      	ldr	r0, [pc, #408]	; (8001990 <App_Controll+0x430>)
 80017f6:	f004 fd8f 	bl	8006318 <HAL_UART_Transmit>

		/*Stop LineFollower and turn on the LED*/
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80017fa:	2201      	movs	r2, #1
 80017fc:	2140      	movs	r1, #64	; 0x40
 80017fe:	4866      	ldr	r0, [pc, #408]	; (8001998 <App_Controll+0x438>)
 8001800:	f002 ffef 	bl	80047e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001804:	2201      	movs	r2, #1
 8001806:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800180a:	4864      	ldr	r0, [pc, #400]	; (800199c <App_Controll+0x43c>)
 800180c:	f002 ffe9 	bl	80047e2 <HAL_GPIO_WritePin>
	}
	/*LOW mode*/
	if(RxData == 'a')
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	2b61      	cmp	r3, #97	; 0x61
 8001814:	d11f      	bne.n	8001856 <App_Controll+0x2f6>
	{
		LineFollower->Base_speed_R = 100;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2264      	movs	r2, #100	; 0x64
 800181a:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 100;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	2264      	movs	r2, #100	; 0x64
 8001820:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 100;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	2264      	movs	r2, #100	; 0x64
 8001826:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 100;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	2264      	movs	r2, #100	; 0x64
 800182c:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right =- 50;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001834:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 50;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	2232      	movs	r2, #50	; 0x32
 800183a:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001842:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 50;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	2232      	movs	r2, #50	; 0x32
 8001848:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	4a54      	ldr	r2, [pc, #336]	; (80019a0 <App_Controll+0x440>)
 800184e:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.1;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	4a54      	ldr	r2, [pc, #336]	; (80019a4 <App_Controll+0x444>)
 8001854:	605a      	str	r2, [r3, #4]
	}
	/*LOW+ mode*/
	if(RxData == 'd')
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	2b64      	cmp	r3, #100	; 0x64
 800185a:	d11f      	bne.n	800189c <App_Controll+0x33c>
	{
		LineFollower->Base_speed_R = 105;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	2269      	movs	r2, #105	; 0x69
 8001860:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 105;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	2269      	movs	r2, #105	; 0x69
 8001866:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 105;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	2269      	movs	r2, #105	; 0x69
 800186c:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 105;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	2269      	movs	r2, #105	; 0x69
 8001872:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -60;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 800187a:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 50;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	2232      	movs	r2, #50	; 0x32
 8001880:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -60;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 8001888:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 50;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	2232      	movs	r2, #50	; 0x32
 800188e:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	4a43      	ldr	r2, [pc, #268]	; (80019a0 <App_Controll+0x440>)
 8001894:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.1;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	4a42      	ldr	r2, [pc, #264]	; (80019a4 <App_Controll+0x444>)
 800189a:	605a      	str	r2, [r3, #4]
	}
	/*Medium mode*/
	if(RxData == 'b')
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	2b62      	cmp	r3, #98	; 0x62
 80018a0:	d120      	bne.n	80018e4 <App_Controll+0x384>
	{
		LineFollower->Base_speed_R = 115;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	2273      	movs	r2, #115	; 0x73
 80018a6:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 115;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	2273      	movs	r2, #115	; 0x73
 80018ac:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 115;
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	2273      	movs	r2, #115	; 0x73
 80018b2:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 115;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	2273      	movs	r2, #115	; 0x73
 80018b8:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -70;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	f06f 0245 	mvn.w	r2, #69	; 0x45
 80018c0:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 85;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	2255      	movs	r2, #85	; 0x55
 80018c6:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	f06f 0231 	mvn.w	r2, #49	; 0x31
 80018ce:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 110;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	226e      	movs	r2, #110	; 0x6e
 80018d4:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	4a31      	ldr	r2, [pc, #196]	; (80019a0 <App_Controll+0x440>)
 80018da:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.25;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80018e2:	605a      	str	r2, [r3, #4]
	}
	/*Medium+ mode*/
	if(RxData == 'e')
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	2b65      	cmp	r3, #101	; 0x65
 80018e8:	d11f      	bne.n	800192a <App_Controll+0x3ca>
	{
		LineFollower->Base_speed_R = 120;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	2278      	movs	r2, #120	; 0x78
 80018ee:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 120;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	2278      	movs	r2, #120	; 0x78
 80018f4:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 120;
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	2278      	movs	r2, #120	; 0x78
 80018fa:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 120;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	2278      	movs	r2, #120	; 0x78
 8001900:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -70;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	f06f 0245 	mvn.w	r2, #69	; 0x45
 8001908:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 92;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	225c      	movs	r2, #92	; 0x5c
 800190e:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001916:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 30;//110
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	221e      	movs	r2, #30
 800191c:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	4a1f      	ldr	r2, [pc, #124]	; (80019a0 <App_Controll+0x440>)
 8001922:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.2;//0.25
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	4a20      	ldr	r2, [pc, #128]	; (80019a8 <App_Controll+0x448>)
 8001928:	605a      	str	r2, [r3, #4]
	}
	/*HIGH mode*/
	if(RxData == 'c')
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	2b63      	cmp	r3, #99	; 0x63
 800192e:	d13f      	bne.n	80019b0 <App_Controll+0x450>
	{
		LineFollower->Base_speed_R = 125;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	227d      	movs	r2, #125	; 0x7d
 8001934:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 125;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	227d      	movs	r2, #125	; 0x7d
 800193a:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 130;//125
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	2282      	movs	r2, #130	; 0x82
 8001940:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 130;//125
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	2282      	movs	r2, #130	; 0x82
 8001946:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -70;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	f06f 0245 	mvn.w	r2, #69	; 0x45
 800194e:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 92; //88
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	225c      	movs	r2, #92	; 0x5c
 8001954:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	f06f 0231 	mvn.w	r2, #49	; 0x31
 800195c:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 30;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	221e      	movs	r2, #30
 8001962:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	4a0e      	ldr	r2, [pc, #56]	; (80019a0 <App_Controll+0x440>)
 8001968:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.175;//0.2
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	4a0f      	ldr	r2, [pc, #60]	; (80019ac <App_Controll+0x44c>)
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	e01e      	b.n	80019b0 <App_Controll+0x450>
 8001972:	bf00      	nop
 8001974:	f3af 8000 	nop.w
 8001978:	9999999a 	.word	0x9999999a
 800197c:	40209999 	.word	0x40209999
 8001980:	00000000 	.word	0x00000000
 8001984:	40adee00 	.word	0x40adee00
 8001988:	42c80000 	.word	0x42c80000
 800198c:	0800b3fc 	.word	0x0800b3fc
 8001990:	20000494 	.word	0x20000494
 8001994:	0800b440 	.word	0x0800b440
 8001998:	40010c00 	.word	0x40010c00
 800199c:	40011000 	.word	0x40011000
 80019a0:	3c75c28f 	.word	0x3c75c28f
 80019a4:	3dcccccd 	.word	0x3dcccccd
 80019a8:	3e4ccccd 	.word	0x3e4ccccd
 80019ac:	3e333333 	.word	0x3e333333
	}
	/*HIGH+ mode*/ /*For now it's just HIGH*/
	if(RxData == 'f')
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	2b66      	cmp	r3, #102	; 0x66
 80019b4:	d11f      	bne.n	80019f6 <App_Controll+0x496>
	{
		LineFollower->Base_speed_R = 130;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	2282      	movs	r2, #130	; 0x82
 80019ba:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 130;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	2282      	movs	r2, #130	; 0x82
 80019c0:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 130;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	2282      	movs	r2, #130	; 0x82
 80019c6:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 130;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	2282      	movs	r2, #130	; 0x82
 80019cc:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -70;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	f06f 0245 	mvn.w	r2, #69	; 0x45
 80019d4:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 92; //88
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	225c      	movs	r2, #92	; 0x5c
 80019da:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	f06f 0231 	mvn.w	r2, #49	; 0x31
 80019e2:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 30;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	221e      	movs	r2, #30
 80019e8:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	4a8e      	ldr	r2, [pc, #568]	; (8001c28 <App_Controll+0x6c8>)
 80019ee:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.175;//0.2
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	4a8e      	ldr	r2, [pc, #568]	; (8001c2c <App_Controll+0x6cc>)
 80019f4:	605a      	str	r2, [r3, #4]
	}
	/*TRUBO mode*/
	if(RxData == 'i')
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	2b69      	cmp	r3, #105	; 0x69
 80019fa:	d11f      	bne.n	8001a3c <App_Controll+0x4dc>
	{
		LineFollower->Base_speed_R = 135;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	2287      	movs	r2, #135	; 0x87
 8001a00:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 135;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	2287      	movs	r2, #135	; 0x87
 8001a06:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 135;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	2287      	movs	r2, #135	; 0x87
 8001a0c:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 135;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2287      	movs	r2, #135	; 0x87
 8001a12:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -60; //-65
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 8001a1a:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 70;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	2246      	movs	r2, #70	; 0x46
 8001a20:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -60;
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 8001a28:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 110;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	226e      	movs	r2, #110	; 0x6e
 8001a2e:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	4a7d      	ldr	r2, [pc, #500]	; (8001c28 <App_Controll+0x6c8>)
 8001a34:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.2;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	4a7d      	ldr	r2, [pc, #500]	; (8001c30 <App_Controll+0x6d0>)
 8001a3a:	605a      	str	r2, [r3, #4]
	}
	/*TRUBO+ mode*/
	if(RxData == 'j')
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	2b6a      	cmp	r3, #106	; 0x6a
 8001a40:	d11f      	bne.n	8001a82 <App_Controll+0x522>
	{
	   LineFollower->Base_speed_R = 140;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	228c      	movs	r2, #140	; 0x8c
 8001a46:	609a      	str	r2, [r3, #8]
	   LineFollower->Base_speed_L = 140;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	228c      	movs	r2, #140	; 0x8c
 8001a4c:	60da      	str	r2, [r3, #12]
	   LineFollower->Max_speed_L = 140;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	228c      	movs	r2, #140	; 0x8c
 8001a52:	615a      	str	r2, [r3, #20]
	   LineFollower->Max_speed_R = 140;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	228c      	movs	r2, #140	; 0x8c
 8001a58:	611a      	str	r2, [r3, #16]
	   LineFollower->Sharp_bend_speed_right = -60;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 8001a60:	619a      	str	r2, [r3, #24]
	   LineFollower->Sharp_bend_speed_left = 70;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	2246      	movs	r2, #70	; 0x46
 8001a66:	61da      	str	r2, [r3, #28]
	   LineFollower->Bend_speed_right = -60;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 8001a6e:	621a      	str	r2, [r3, #32]
	   LineFollower->Bend_speed_left = 110;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	226e      	movs	r2, #110	; 0x6e
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24
	   LineFollower->Kp = 0.015;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	4a6b      	ldr	r2, [pc, #428]	; (8001c28 <App_Controll+0x6c8>)
 8001a7a:	601a      	str	r2, [r3, #0]
	   LineFollower->Kd = 0.2;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	4a6c      	ldr	r2, [pc, #432]	; (8001c30 <App_Controll+0x6d0>)
 8001a80:	605a      	str	r2, [r3, #4]
	}
	/*ULTRA mode*/
	if(RxData == 'k')
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	2b6b      	cmp	r3, #107	; 0x6b
 8001a86:	d11f      	bne.n	8001ac8 <App_Controll+0x568>
	{
		LineFollower->Base_speed_R = 145;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	2291      	movs	r2, #145	; 0x91
 8001a8c:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 145;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	2291      	movs	r2, #145	; 0x91
 8001a92:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 145;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	2291      	movs	r2, #145	; 0x91
 8001a98:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 145;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	2291      	movs	r2, #145	; 0x91
 8001a9e:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -60;//-70
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 8001aa6:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 70;//88
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	2246      	movs	r2, #70	; 0x46
 8001aac:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -60;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 8001ab4:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 110;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	226e      	movs	r2, #110	; 0x6e
 8001aba:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	4a5a      	ldr	r2, [pc, #360]	; (8001c28 <App_Controll+0x6c8>)
 8001ac0:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.2;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	4a5a      	ldr	r2, [pc, #360]	; (8001c30 <App_Controll+0x6d0>)
 8001ac6:	605a      	str	r2, [r3, #4]
	 }
	 /*ULTRA+ mode*/
	 if(RxData == 'l')
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	2b6c      	cmp	r3, #108	; 0x6c
 8001acc:	d11f      	bne.n	8001b0e <App_Controll+0x5ae>
	 {
		LineFollower->Base_speed_R = 150;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	2296      	movs	r2, #150	; 0x96
 8001ad2:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 150;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	2296      	movs	r2, #150	; 0x96
 8001ad8:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 150;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	2296      	movs	r2, #150	; 0x96
 8001ade:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 150;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	2296      	movs	r2, #150	; 0x96
 8001ae4:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -55;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	f06f 0236 	mvn.w	r2, #54	; 0x36
 8001aec:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 75;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	224b      	movs	r2, #75	; 0x4b
 8001af2:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -60;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 8001afa:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 120;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	2278      	movs	r2, #120	; 0x78
 8001b00:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	4a48      	ldr	r2, [pc, #288]	; (8001c28 <App_Controll+0x6c8>)
 8001b06:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.23;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	4a4a      	ldr	r2, [pc, #296]	; (8001c34 <App_Controll+0x6d4>)
 8001b0c:	605a      	str	r2, [r3, #4]
	  }
	  /*EXTREME mode*/
	  if(RxData == 'm')
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	2b6d      	cmp	r3, #109	; 0x6d
 8001b12:	d11f      	bne.n	8001b54 <App_Controll+0x5f4>
	  {
		 LineFollower->Base_speed_R = 155;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	229b      	movs	r2, #155	; 0x9b
 8001b18:	609a      	str	r2, [r3, #8]
		 LineFollower->Base_speed_L = 155;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	229b      	movs	r2, #155	; 0x9b
 8001b1e:	60da      	str	r2, [r3, #12]
		 LineFollower->Max_speed_L = 155;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	229b      	movs	r2, #155	; 0x9b
 8001b24:	615a      	str	r2, [r3, #20]
		 LineFollower->Max_speed_R = 155;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	229b      	movs	r2, #155	; 0x9b
 8001b2a:	611a      	str	r2, [r3, #16]
		 LineFollower->Sharp_bend_speed_right = -70;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	f06f 0245 	mvn.w	r2, #69	; 0x45
 8001b32:	619a      	str	r2, [r3, #24]
		 LineFollower->Sharp_bend_speed_left = 85;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	2255      	movs	r2, #85	; 0x55
 8001b38:	61da      	str	r2, [r3, #28]
		 LineFollower->Bend_speed_right = -50;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001b40:	621a      	str	r2, [r3, #32]
		 LineFollower->Bend_speed_left = 30;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	221e      	movs	r2, #30
 8001b46:	625a      	str	r2, [r3, #36]	; 0x24
		 LineFollower->Kp = 0.015;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	4a37      	ldr	r2, [pc, #220]	; (8001c28 <App_Controll+0x6c8>)
 8001b4c:	601a      	str	r2, [r3, #0]
		 LineFollower->Kd = 0.265;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	4a39      	ldr	r2, [pc, #228]	; (8001c38 <App_Controll+0x6d8>)
 8001b52:	605a      	str	r2, [r3, #4]
	  }

 	  /*EXTREME+ mode*/
 	  if(RxData == 'n')
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	2b6e      	cmp	r3, #110	; 0x6e
 8001b58:	d11f      	bne.n	8001b9a <App_Controll+0x63a>
 	  {
 	    LineFollower->Base_speed_R = 160;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	22a0      	movs	r2, #160	; 0xa0
 8001b5e:	609a      	str	r2, [r3, #8]
 	    LineFollower->Base_speed_L = 160;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	22a0      	movs	r2, #160	; 0xa0
 8001b64:	60da      	str	r2, [r3, #12]
 	    LineFollower->Max_speed_L = 160;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	22a0      	movs	r2, #160	; 0xa0
 8001b6a:	615a      	str	r2, [r3, #20]
 	  	LineFollower->Max_speed_R = 160;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	22a0      	movs	r2, #160	; 0xa0
 8001b70:	611a      	str	r2, [r3, #16]
 	 	LineFollower->Sharp_bend_speed_right = -70;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	f06f 0245 	mvn.w	r2, #69	; 0x45
 8001b78:	619a      	str	r2, [r3, #24]
 		LineFollower->Sharp_bend_speed_left = 85;
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	2255      	movs	r2, #85	; 0x55
 8001b7e:	61da      	str	r2, [r3, #28]
 		LineFollower->Bend_speed_right = -50;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001b86:	621a      	str	r2, [r3, #32]
 		LineFollower->Bend_speed_left = 30;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	221e      	movs	r2, #30
 8001b8c:	625a      	str	r2, [r3, #36]	; 0x24
 		LineFollower->Kp = 0.015;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	4a25      	ldr	r2, [pc, #148]	; (8001c28 <App_Controll+0x6c8>)
 8001b92:	601a      	str	r2, [r3, #0]
 		LineFollower->Kd = 0.265;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	4a28      	ldr	r2, [pc, #160]	; (8001c38 <App_Controll+0x6d8>)
 8001b98:	605a      	str	r2, [r3, #4]
 	  }
 	  /*SPECIAL mode*/
 	  if(RxData == 'h')
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	2b68      	cmp	r3, #104	; 0x68
 8001b9e:	d11f      	bne.n	8001be0 <App_Controll+0x680>
 	  {
 	    LineFollower->Base_speed_R = 135;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	2287      	movs	r2, #135	; 0x87
 8001ba4:	609a      	str	r2, [r3, #8]
 	    LineFollower->Base_speed_L = 135;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	2287      	movs	r2, #135	; 0x87
 8001baa:	60da      	str	r2, [r3, #12]
 	    LineFollower->Max_speed_L = 135;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	2287      	movs	r2, #135	; 0x87
 8001bb0:	615a      	str	r2, [r3, #20]
 	    LineFollower->Max_speed_R = 135;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	2287      	movs	r2, #135	; 0x87
 8001bb6:	611a      	str	r2, [r3, #16]
 	 	LineFollower->Sharp_bend_speed_right = -66;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	f06f 0241 	mvn.w	r2, #65	; 0x41
 8001bbe:	619a      	str	r2, [r3, #24]
 		LineFollower->Sharp_bend_speed_left = 92;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	225c      	movs	r2, #92	; 0x5c
 8001bc4:	61da      	str	r2, [r3, #28]
 		LineFollower->Bend_speed_right = -50;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001bcc:	621a      	str	r2, [r3, #32]
 		LineFollower->Bend_speed_left = 30;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	221e      	movs	r2, #30
 8001bd2:	625a      	str	r2, [r3, #36]	; 0x24
 		LineFollower->Kp = 0.015;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	4a14      	ldr	r2, [pc, #80]	; (8001c28 <App_Controll+0x6c8>)
 8001bd8:	601a      	str	r2, [r3, #0]
 		LineFollower->Kd = 0.2;
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	4a14      	ldr	r2, [pc, #80]	; (8001c30 <App_Controll+0x6d0>)
 8001bde:	605a      	str	r2, [r3, #4]
 	  }
 	  /*RA-1-final-slower*/
 	  if(RxData == 'o')
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	2b6f      	cmp	r3, #111	; 0x6f
 8001be4:	d12e      	bne.n	8001c44 <App_Controll+0x6e4>
 	  {
 	    LineFollower->Base_speed_R = 143;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	228f      	movs	r2, #143	; 0x8f
 8001bea:	609a      	str	r2, [r3, #8]
 	    LineFollower->Base_speed_L = 143;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	228f      	movs	r2, #143	; 0x8f
 8001bf0:	60da      	str	r2, [r3, #12]
 	   	LineFollower->Max_speed_L = 182;
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	22b6      	movs	r2, #182	; 0xb6
 8001bf6:	615a      	str	r2, [r3, #20]
 	  	LineFollower->Max_speed_R = 182;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	22b6      	movs	r2, #182	; 0xb6
 8001bfc:	611a      	str	r2, [r3, #16]
 	  	LineFollower->Sharp_bend_speed_right = -76;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8001c04:	619a      	str	r2, [r3, #24]
 		LineFollower->Sharp_bend_speed_left = 90;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	225a      	movs	r2, #90	; 0x5a
 8001c0a:	61da      	str	r2, [r3, #28]
 		LineFollower->Bend_speed_right = -50;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001c12:	621a      	str	r2, [r3, #32]
 		LineFollower->Bend_speed_left = 100;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	2264      	movs	r2, #100	; 0x64
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24
 		LineFollower->Kp = 0.02;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	4a07      	ldr	r2, [pc, #28]	; (8001c3c <App_Controll+0x6dc>)
 8001c1e:	601a      	str	r2, [r3, #0]
 		LineFollower->Kd = 350;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <App_Controll+0x6e0>)
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	e00d      	b.n	8001c44 <App_Controll+0x6e4>
 8001c28:	3c75c28f 	.word	0x3c75c28f
 8001c2c:	3e333333 	.word	0x3e333333
 8001c30:	3e4ccccd 	.word	0x3e4ccccd
 8001c34:	3e6b851f 	.word	0x3e6b851f
 8001c38:	3e87ae14 	.word	0x3e87ae14
 8001c3c:	3ca3d70a 	.word	0x3ca3d70a
 8001c40:	43af0000 	.word	0x43af0000
 	   }
 	   /*RA-2-eliminations-faster*/
 	   if(RxData == 'u')
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	2b75      	cmp	r3, #117	; 0x75
 8001c48:	d11f      	bne.n	8001c8a <App_Controll+0x72a>
 	   {
 	     LineFollower->Base_speed_R = 153;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	2299      	movs	r2, #153	; 0x99
 8001c4e:	609a      	str	r2, [r3, #8]
 	     LineFollower->Base_speed_L = 153;
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	2299      	movs	r2, #153	; 0x99
 8001c54:	60da      	str	r2, [r3, #12]
 	     LineFollower->Max_speed_L = 187;
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	22bb      	movs	r2, #187	; 0xbb
 8001c5a:	615a      	str	r2, [r3, #20]
 	   	 LineFollower->Max_speed_R = 187;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	22bb      	movs	r2, #187	; 0xbb
 8001c60:	611a      	str	r2, [r3, #16]
 	  	 LineFollower->Sharp_bend_speed_right = -76;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8001c68:	619a      	str	r2, [r3, #24]
 	 	 LineFollower->Sharp_bend_speed_left = 90;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	225a      	movs	r2, #90	; 0x5a
 8001c6e:	61da      	str	r2, [r3, #28]
 	 	 LineFollower->Bend_speed_right = -50;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001c76:	621a      	str	r2, [r3, #32]
 	 	 LineFollower->Bend_speed_left = 100;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	2264      	movs	r2, #100	; 0x64
 8001c7c:	625a      	str	r2, [r3, #36]	; 0x24
 	 	 LineFollower->Kp = 0.02;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	4a26      	ldr	r2, [pc, #152]	; (8001d1c <App_Controll+0x7bc>)
 8001c82:	601a      	str	r2, [r3, #0]
 	 	 LineFollower->Kd = 350;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	4a26      	ldr	r2, [pc, #152]	; (8001d20 <App_Controll+0x7c0>)
 8001c88:	605a      	str	r2, [r3, #4]
 	   }
 	  /*Gruzik2.1 Robo Comp 2024r 1*/
 	  if(RxData == 'p')
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	2b70      	cmp	r3, #112	; 0x70
 8001c8e:	d11f      	bne.n	8001cd0 <App_Controll+0x770>
 	  {
 		 LineFollower->Base_speed_R = 143;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	228f      	movs	r2, #143	; 0x8f
 8001c94:	609a      	str	r2, [r3, #8]
 		 LineFollower->Base_speed_L = 143;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	228f      	movs	r2, #143	; 0x8f
 8001c9a:	60da      	str	r2, [r3, #12]
 		 LineFollower->Max_speed_L = 182;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	22b6      	movs	r2, #182	; 0xb6
 8001ca0:	615a      	str	r2, [r3, #20]
 		 LineFollower->Max_speed_R = 182;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	22b6      	movs	r2, #182	; 0xb6
 8001ca6:	611a      	str	r2, [r3, #16]
 		 LineFollower->Sharp_bend_speed_right = -76;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8001cae:	619a      	str	r2, [r3, #24]
 		 LineFollower->Sharp_bend_speed_left = 90;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	225a      	movs	r2, #90	; 0x5a
 8001cb4:	61da      	str	r2, [r3, #28]
 		 LineFollower->Bend_speed_right = -40;//40
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	f06f 0227 	mvn.w	r2, #39	; 0x27
 8001cbc:	621a      	str	r2, [r3, #32]
 		 LineFollower->Bend_speed_left = 110;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	226e      	movs	r2, #110	; 0x6e
 8001cc2:	625a      	str	r2, [r3, #36]	; 0x24
 		 LineFollower->Kp = 0.02;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	4a15      	ldr	r2, [pc, #84]	; (8001d1c <App_Controll+0x7bc>)
 8001cc8:	601a      	str	r2, [r3, #0]
 		 LineFollower->Kd = 350;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <App_Controll+0x7c0>)
 8001cce:	605a      	str	r2, [r3, #4]
 	  }
 	  /*Gruzik2.1 Robo Comp 2024 2*/
 	  if(RxData == 'r')
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	2b72      	cmp	r3, #114	; 0x72
 8001cd4:	d11f      	bne.n	8001d16 <App_Controll+0x7b6>
 	  {
 		 LineFollower->Base_speed_R = 153;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	2299      	movs	r2, #153	; 0x99
 8001cda:	609a      	str	r2, [r3, #8]
 		 LineFollower->Base_speed_L = 153;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	2299      	movs	r2, #153	; 0x99
 8001ce0:	60da      	str	r2, [r3, #12]
 		 LineFollower->Max_speed_L = 187;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	22bb      	movs	r2, #187	; 0xbb
 8001ce6:	615a      	str	r2, [r3, #20]
 		 LineFollower->Max_speed_R = 187;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	22bb      	movs	r2, #187	; 0xbb
 8001cec:	611a      	str	r2, [r3, #16]
 		 LineFollower->Sharp_bend_speed_right = -76;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8001cf4:	619a      	str	r2, [r3, #24]
 		 LineFollower->Sharp_bend_speed_left = 90;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	225a      	movs	r2, #90	; 0x5a
 8001cfa:	61da      	str	r2, [r3, #28]
 		 LineFollower->Bend_speed_right = -40;//40
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	f06f 0227 	mvn.w	r2, #39	; 0x27
 8001d02:	621a      	str	r2, [r3, #32]
 		 LineFollower->Bend_speed_left = 110;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	226e      	movs	r2, #110	; 0x6e
 8001d08:	625a      	str	r2, [r3, #36]	; 0x24
 		 LineFollower->Kp = 0.02;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	4a03      	ldr	r2, [pc, #12]	; (8001d1c <App_Controll+0x7bc>)
 8001d0e:	601a      	str	r2, [r3, #0]
 		 LineFollower->Kd = 350;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	4a03      	ldr	r2, [pc, #12]	; (8001d20 <App_Controll+0x7c0>)
 8001d14:	605a      	str	r2, [r3, #4]
 	   }
}
 8001d16:	3740      	adds	r7, #64	; 0x40
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d1c:	3ca3d70a 	.word	0x3ca3d70a
 8001d20:	43af0000 	.word	0x43af0000

08001d24 <Mode_change>:

static void Mode_change(LineFollower_t *LF)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001d2c:	490c      	ldr	r1, [pc, #48]	; (8001d60 <Mode_change+0x3c>)
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f006 fbe6 	bl	8008500 <strtok>
 8001d34:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 2)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00b      	beq.n	8001d56 <Mode_change+0x32>
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f7fe fa10 	bl	8000164 <strlen>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d805      	bhi.n	8001d56 <Mode_change+0x32>
	{
		App_Controll(ParsePointer[0], LF);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fc05 	bl	8001560 <App_Controll>
	}
}
 8001d56:	bf00      	nop
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	0800b3f8 	.word	0x0800b3f8

08001d64 <Parser_Parse>:
void Parser_Parse(uint8_t *ReceivedData, LineFollower_t *LineFollower)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
	char *ParsePointer = strtok((char*)ReceivedData, "=");
 8001d6e:	4935      	ldr	r1, [pc, #212]	; (8001e44 <Parser_Parse+0xe0>)
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f006 fbc5 	bl	8008500 <strtok>
 8001d76:	60f8      	str	r0, [r7, #12]

	if(!strcmp("Kp",ParsePointer))
 8001d78:	68f9      	ldr	r1, [r7, #12]
 8001d7a:	4833      	ldr	r0, [pc, #204]	; (8001e48 <Parser_Parse+0xe4>)
 8001d7c:	f7fe f9e8 	bl	8000150 <strcmp>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d103      	bne.n	8001d8e <Parser_Parse+0x2a>
	{
		kp_change(LineFollower);
 8001d86:	6838      	ldr	r0, [r7, #0]
 8001d88:	f7ff faa2 	bl	80012d0 <kp_change>
	}
	else if(!strcmp("Mode",ParsePointer))
	{
		Mode_change(LineFollower);
	}
}
 8001d8c:	e056      	b.n	8001e3c <Parser_Parse+0xd8>
	else if(!strcmp("Kd",ParsePointer))
 8001d8e:	68f9      	ldr	r1, [r7, #12]
 8001d90:	482e      	ldr	r0, [pc, #184]	; (8001e4c <Parser_Parse+0xe8>)
 8001d92:	f7fe f9dd 	bl	8000150 <strcmp>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d103      	bne.n	8001da4 <Parser_Parse+0x40>
		kd_change(LineFollower);
 8001d9c:	6838      	ldr	r0, [r7, #0]
 8001d9e:	f7ff fabd 	bl	800131c <kd_change>
}
 8001da2:	e04b      	b.n	8001e3c <Parser_Parse+0xd8>
	else if(!strcmp("Base_speed",ParsePointer))
 8001da4:	68f9      	ldr	r1, [r7, #12]
 8001da6:	482a      	ldr	r0, [pc, #168]	; (8001e50 <Parser_Parse+0xec>)
 8001da8:	f7fe f9d2 	bl	8000150 <strcmp>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d103      	bne.n	8001dba <Parser_Parse+0x56>
		Base_speed_change(LineFollower);
 8001db2:	6838      	ldr	r0, [r7, #0]
 8001db4:	f7ff fad8 	bl	8001368 <Base_speed_change>
}
 8001db8:	e040      	b.n	8001e3c <Parser_Parse+0xd8>
	else if(!strcmp("Max_speed",ParsePointer))
 8001dba:	68f9      	ldr	r1, [r7, #12]
 8001dbc:	4825      	ldr	r0, [pc, #148]	; (8001e54 <Parser_Parse+0xf0>)
 8001dbe:	f7fe f9c7 	bl	8000150 <strcmp>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d103      	bne.n	8001dd0 <Parser_Parse+0x6c>
		Max_speed_change(LineFollower);
 8001dc8:	6838      	ldr	r0, [r7, #0]
 8001dca:	f7ff faff 	bl	80013cc <Max_speed_change>
}
 8001dce:	e035      	b.n	8001e3c <Parser_Parse+0xd8>
	else if(!strcmp("Sharp_bend_speed_right",ParsePointer))
 8001dd0:	68f9      	ldr	r1, [r7, #12]
 8001dd2:	4821      	ldr	r0, [pc, #132]	; (8001e58 <Parser_Parse+0xf4>)
 8001dd4:	f7fe f9bc 	bl	8000150 <strcmp>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d103      	bne.n	8001de6 <Parser_Parse+0x82>
		Sharp_bend_speed_right_change(LineFollower);
 8001dde:	6838      	ldr	r0, [r7, #0]
 8001de0:	f7ff fb26 	bl	8001430 <Sharp_bend_speed_right_change>
}
 8001de4:	e02a      	b.n	8001e3c <Parser_Parse+0xd8>
	else if(!strcmp("Sharp_bend_speed_left",ParsePointer))
 8001de6:	68f9      	ldr	r1, [r7, #12]
 8001de8:	481c      	ldr	r0, [pc, #112]	; (8001e5c <Parser_Parse+0xf8>)
 8001dea:	f7fe f9b1 	bl	8000150 <strcmp>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d103      	bne.n	8001dfc <Parser_Parse+0x98>
		Sharp_bend_speed_left_change(LineFollower);
 8001df4:	6838      	ldr	r0, [r7, #0]
 8001df6:	f7ff fb41 	bl	800147c <Sharp_bend_speed_left_change>
}
 8001dfa:	e01f      	b.n	8001e3c <Parser_Parse+0xd8>
	else if(!strcmp("Bend_speed_right",ParsePointer))
 8001dfc:	68f9      	ldr	r1, [r7, #12]
 8001dfe:	4818      	ldr	r0, [pc, #96]	; (8001e60 <Parser_Parse+0xfc>)
 8001e00:	f7fe f9a6 	bl	8000150 <strcmp>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d103      	bne.n	8001e12 <Parser_Parse+0xae>
		Bend_speed_right_change(LineFollower);
 8001e0a:	6838      	ldr	r0, [r7, #0]
 8001e0c:	f7ff fb5c 	bl	80014c8 <Bend_speed_right_change>
}
 8001e10:	e014      	b.n	8001e3c <Parser_Parse+0xd8>
	else if(!strcmp("Bend_speed_left",ParsePointer))
 8001e12:	68f9      	ldr	r1, [r7, #12]
 8001e14:	4813      	ldr	r0, [pc, #76]	; (8001e64 <Parser_Parse+0x100>)
 8001e16:	f7fe f99b 	bl	8000150 <strcmp>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d103      	bne.n	8001e28 <Parser_Parse+0xc4>
		Bend_speed_left_change(LineFollower);
 8001e20:	6838      	ldr	r0, [r7, #0]
 8001e22:	f7ff fb77 	bl	8001514 <Bend_speed_left_change>
}
 8001e26:	e009      	b.n	8001e3c <Parser_Parse+0xd8>
	else if(!strcmp("Mode",ParsePointer))
 8001e28:	68f9      	ldr	r1, [r7, #12]
 8001e2a:	480f      	ldr	r0, [pc, #60]	; (8001e68 <Parser_Parse+0x104>)
 8001e2c:	f7fe f990 	bl	8000150 <strcmp>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d102      	bne.n	8001e3c <Parser_Parse+0xd8>
		Mode_change(LineFollower);
 8001e36:	6838      	ldr	r0, [r7, #0]
 8001e38:	f7ff ff74 	bl	8001d24 <Mode_change>
}
 8001e3c:	bf00      	nop
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	0800b470 	.word	0x0800b470
 8001e48:	0800b474 	.word	0x0800b474
 8001e4c:	0800b478 	.word	0x0800b478
 8001e50:	0800b47c 	.word	0x0800b47c
 8001e54:	0800b488 	.word	0x0800b488
 8001e58:	0800b494 	.word	0x0800b494
 8001e5c:	0800b4ac 	.word	0x0800b4ac
 8001e60:	0800b4c4 	.word	0x0800b4c4
 8001e64:	0800b4d8 	.word	0x0800b4d8
 8001e68:	0800b4e8 	.word	0x0800b4e8

08001e6c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e72:	1d3b      	adds	r3, r7, #4
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001e7c:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <MX_ADC1_Init+0x74>)
 8001e7e:	4a19      	ldr	r2, [pc, #100]	; (8001ee4 <MX_ADC1_Init+0x78>)
 8001e80:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e82:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <MX_ADC1_Init+0x74>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001e88:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <MX_ADC1_Init+0x74>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e8e:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <MX_ADC1_Init+0x74>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e94:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <MX_ADC1_Init+0x74>)
 8001e96:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001e9a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e9c:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <MX_ADC1_Init+0x74>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001ea2:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <MX_ADC1_Init+0x74>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ea8:	480d      	ldr	r0, [pc, #52]	; (8001ee0 <MX_ADC1_Init+0x74>)
 8001eaa:	f001 fb83 	bl	80035b4 <HAL_ADC_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001eb4:	f000 fe80 	bl	8002bb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001eb8:	2309      	movs	r3, #9
 8001eba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001ec0:	2307      	movs	r3, #7
 8001ec2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ec4:	1d3b      	adds	r3, r7, #4
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4805      	ldr	r0, [pc, #20]	; (8001ee0 <MX_ADC1_Init+0x74>)
 8001eca:	f001 fd45 	bl	8003958 <HAL_ADC_ConfigChannel>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001ed4:	f000 fe70 	bl	8002bb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ed8:	bf00      	nop
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000200 	.word	0x20000200
 8001ee4:	40012400 	.word	0x40012400

08001ee8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 0310 	add.w	r3, r7, #16
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a28      	ldr	r2, [pc, #160]	; (8001fa4 <HAL_ADC_MspInit+0xbc>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d149      	bne.n	8001f9c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f08:	4b27      	ldr	r3, [pc, #156]	; (8001fa8 <HAL_ADC_MspInit+0xc0>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	4a26      	ldr	r2, [pc, #152]	; (8001fa8 <HAL_ADC_MspInit+0xc0>)
 8001f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f12:	6193      	str	r3, [r2, #24]
 8001f14:	4b24      	ldr	r3, [pc, #144]	; (8001fa8 <HAL_ADC_MspInit+0xc0>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f20:	4b21      	ldr	r3, [pc, #132]	; (8001fa8 <HAL_ADC_MspInit+0xc0>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	4a20      	ldr	r2, [pc, #128]	; (8001fa8 <HAL_ADC_MspInit+0xc0>)
 8001f26:	f043 0308 	orr.w	r3, r3, #8
 8001f2a:	6193      	str	r3, [r2, #24]
 8001f2c:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <HAL_ADC_MspInit+0xc0>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f40:	f107 0310 	add.w	r3, r7, #16
 8001f44:	4619      	mov	r1, r3
 8001f46:	4819      	ldr	r0, [pc, #100]	; (8001fac <HAL_ADC_MspInit+0xc4>)
 8001f48:	f002 fab0 	bl	80044ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <HAL_ADC_MspInit+0xc8>)
 8001f4e:	4a19      	ldr	r2, [pc, #100]	; (8001fb4 <HAL_ADC_MspInit+0xcc>)
 8001f50:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f52:	4b17      	ldr	r3, [pc, #92]	; (8001fb0 <HAL_ADC_MspInit+0xc8>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f58:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <HAL_ADC_MspInit+0xc8>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f5e:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <HAL_ADC_MspInit+0xc8>)
 8001f60:	2280      	movs	r2, #128	; 0x80
 8001f62:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_ADC_MspInit+0xc8>)
 8001f66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f6a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f6c:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <HAL_ADC_MspInit+0xc8>)
 8001f6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f72:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f74:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <HAL_ADC_MspInit+0xc8>)
 8001f76:	2220      	movs	r2, #32
 8001f78:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f7a:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <HAL_ADC_MspInit+0xc8>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f80:	480b      	ldr	r0, [pc, #44]	; (8001fb0 <HAL_ADC_MspInit+0xc8>)
 8001f82:	f001 fff1 	bl	8003f68 <HAL_DMA_Init>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001f8c:	f000 fe14 	bl	8002bb8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a07      	ldr	r2, [pc, #28]	; (8001fb0 <HAL_ADC_MspInit+0xc8>)
 8001f94:	621a      	str	r2, [r3, #32]
 8001f96:	4a06      	ldr	r2, [pc, #24]	; (8001fb0 <HAL_ADC_MspInit+0xc8>)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	3720      	adds	r7, #32
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40012400 	.word	0x40012400
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40010c00 	.word	0x40010c00
 8001fb0:	20000230 	.word	0x20000230
 8001fb4:	40020008 	.word	0x40020008

08001fb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <MX_DMA_Init+0x38>)
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	4a0b      	ldr	r2, [pc, #44]	; (8001ff0 <MX_DMA_Init+0x38>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6153      	str	r3, [r2, #20]
 8001fca:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <MX_DMA_Init+0x38>)
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2100      	movs	r1, #0
 8001fda:	200b      	movs	r0, #11
 8001fdc:	f001 ff8d 	bl	8003efa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001fe0:	200b      	movs	r0, #11
 8001fe2:	f001 ffa6 	bl	8003f32 <HAL_NVIC_EnableIRQ>

}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40021000 	.word	0x40021000

08001ff4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b088      	sub	sp, #32
 8001ff8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffa:	f107 0310 	add.w	r3, r7, #16
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002008:	4b46      	ldr	r3, [pc, #280]	; (8002124 <MX_GPIO_Init+0x130>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	4a45      	ldr	r2, [pc, #276]	; (8002124 <MX_GPIO_Init+0x130>)
 800200e:	f043 0310 	orr.w	r3, r3, #16
 8002012:	6193      	str	r3, [r2, #24]
 8002014:	4b43      	ldr	r3, [pc, #268]	; (8002124 <MX_GPIO_Init+0x130>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002020:	4b40      	ldr	r3, [pc, #256]	; (8002124 <MX_GPIO_Init+0x130>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	4a3f      	ldr	r2, [pc, #252]	; (8002124 <MX_GPIO_Init+0x130>)
 8002026:	f043 0320 	orr.w	r3, r3, #32
 800202a:	6193      	str	r3, [r2, #24]
 800202c:	4b3d      	ldr	r3, [pc, #244]	; (8002124 <MX_GPIO_Init+0x130>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	f003 0320 	and.w	r3, r3, #32
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002038:	4b3a      	ldr	r3, [pc, #232]	; (8002124 <MX_GPIO_Init+0x130>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	4a39      	ldr	r2, [pc, #228]	; (8002124 <MX_GPIO_Init+0x130>)
 800203e:	f043 0304 	orr.w	r3, r3, #4
 8002042:	6193      	str	r3, [r2, #24]
 8002044:	4b37      	ldr	r3, [pc, #220]	; (8002124 <MX_GPIO_Init+0x130>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	607b      	str	r3, [r7, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002050:	4b34      	ldr	r3, [pc, #208]	; (8002124 <MX_GPIO_Init+0x130>)
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	4a33      	ldr	r2, [pc, #204]	; (8002124 <MX_GPIO_Init+0x130>)
 8002056:	f043 0308 	orr.w	r3, r3, #8
 800205a:	6193      	str	r3, [r2, #24]
 800205c:	4b31      	ldr	r3, [pc, #196]	; (8002124 <MX_GPIO_Init+0x130>)
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	603b      	str	r3, [r7, #0]
 8002066:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_GPIO_Port, LD_Pin, GPIO_PIN_SET);
 8002068:	2201      	movs	r2, #1
 800206a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800206e:	482e      	ldr	r0, [pc, #184]	; (8002128 <MX_GPIO_Init+0x134>)
 8002070:	f002 fbb7 	bl	80047e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSOR8_Pin|SENSOR7_Pin|SENSOR6_Pin|SENSOR5_Pin
 8002074:	2200      	movs	r2, #0
 8002076:	21ff      	movs	r1, #255	; 0xff
 8002078:	482c      	ldr	r0, [pc, #176]	; (800212c <MX_GPIO_Init+0x138>)
 800207a:	f002 fbb2 	bl	80047e2 <HAL_GPIO_WritePin>
                          |SENSOR4_Pin|SENSOR3_Pin|SENSOR2_Pin|SENSOR1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDON_Pin|BIN1L_Pin|BIN1R_Pin|AIN2L_Pin
 800207e:	2200      	movs	r2, #0
 8002080:	f24c 0171 	movw	r1, #49265	; 0xc071
 8002084:	482a      	ldr	r0, [pc, #168]	; (8002130 <MX_GPIO_Init+0x13c>)
 8002086:	f002 fbac 	bl	80047e2 <HAL_GPIO_WritePin>
                          |AIN1R_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_Pin;
 800208a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800208e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002090:	2301      	movs	r3, #1
 8002092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002098:	2302      	movs	r3, #2
 800209a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD_GPIO_Port, &GPIO_InitStruct);
 800209c:	f107 0310 	add.w	r3, r7, #16
 80020a0:	4619      	mov	r1, r3
 80020a2:	4821      	ldr	r0, [pc, #132]	; (8002128 <MX_GPIO_Init+0x134>)
 80020a4:	f002 fa02 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR8_Pin|SENSOR7_Pin|SENSOR6_Pin|SENSOR5_Pin
 80020a8:	23bf      	movs	r3, #191	; 0xbf
 80020aa:	613b      	str	r3, [r7, #16]
                          |SENSOR4_Pin|SENSOR3_Pin|SENSOR1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ac:	2301      	movs	r3, #1
 80020ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020b4:	2303      	movs	r3, #3
 80020b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b8:	f107 0310 	add.w	r3, r7, #16
 80020bc:	4619      	mov	r1, r3
 80020be:	481b      	ldr	r0, [pc, #108]	; (800212c <MX_GPIO_Init+0x138>)
 80020c0:	f002 f9f4 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSOR2_Pin;
 80020c4:	2340      	movs	r3, #64	; 0x40
 80020c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c8:	2301      	movs	r3, #1
 80020ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d0:	2302      	movs	r3, #2
 80020d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSOR2_GPIO_Port, &GPIO_InitStruct);
 80020d4:	f107 0310 	add.w	r3, r7, #16
 80020d8:	4619      	mov	r1, r3
 80020da:	4814      	ldr	r0, [pc, #80]	; (800212c <MX_GPIO_Init+0x138>)
 80020dc:	f002 f9e6 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LEDON_Pin|BIN1L_Pin|BIN1R_Pin|AIN2L_Pin
 80020e0:	f24c 0331 	movw	r3, #49201	; 0xc031
 80020e4:	613b      	str	r3, [r7, #16]
                          |AIN1R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e6:	2301      	movs	r3, #1
 80020e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020ee:	2303      	movs	r3, #3
 80020f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f2:	f107 0310 	add.w	r3, r7, #16
 80020f6:	4619      	mov	r1, r3
 80020f8:	480d      	ldr	r0, [pc, #52]	; (8002130 <MX_GPIO_Init+0x13c>)
 80020fa:	f002 f9d7 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020fe:	2340      	movs	r3, #64	; 0x40
 8002100:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002102:	2301      	movs	r3, #1
 8002104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800210a:	2301      	movs	r3, #1
 800210c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800210e:	f107 0310 	add.w	r3, r7, #16
 8002112:	4619      	mov	r1, r3
 8002114:	4806      	ldr	r0, [pc, #24]	; (8002130 <MX_GPIO_Init+0x13c>)
 8002116:	f002 f9c9 	bl	80044ac <HAL_GPIO_Init>

}
 800211a:	bf00      	nop
 800211c:	3720      	adds	r7, #32
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40021000 	.word	0x40021000
 8002128:	40011000 	.word	0x40011000
 800212c:	40010800 	.word	0x40010800
 8002130:	40010c00 	.word	0x40010c00

08002134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002138:	f001 f9da 	bl	80034f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800213c:	f000 f886 	bl	800224c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002140:	f7ff ff58 	bl	8001ff4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002144:	f7ff ff38 	bl	8001fb8 <MX_DMA_Init>
  MX_TIM1_Init();
 8002148:	f000 fe98 	bl	8002e7c <MX_TIM1_Init>
  MX_TIM3_Init();
 800214c:	f000 ff34 	bl	8002fb8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002150:	f000 ff80 	bl	8003054 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8002154:	f001 f8c2 	bl	80032dc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002158:	f001 f8ea 	bl	8003330 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800215c:	f7ff fe86 	bl	8001e6c <MX_ADC1_Init>
  MX_TIM2_Init();
 8002160:	f000 fede 	bl	8002f20 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /*Initial values for PID*/
  /*Start ADC with DMA measurement*/
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&GRUZIK.Adc_Value, 1);
 8002164:	2201      	movs	r2, #1
 8002166:	492b      	ldr	r1, [pc, #172]	; (8002214 <main+0xe0>)
 8002168:	482b      	ldr	r0, [pc, #172]	; (8002218 <main+0xe4>)
 800216a:	f001 fafb 	bl	8003764 <HAL_ADC_Start_DMA>

  	GRUZIK.Kp = 0.02;
 800216e:	4b2b      	ldr	r3, [pc, #172]	; (800221c <main+0xe8>)
 8002170:	4a2b      	ldr	r2, [pc, #172]	; (8002220 <main+0xec>)
 8002172:	601a      	str	r2, [r3, #0]
	GRUZIK.Kd = 0.1;
 8002174:	4b29      	ldr	r3, [pc, #164]	; (800221c <main+0xe8>)
 8002176:	4a2b      	ldr	r2, [pc, #172]	; (8002224 <main+0xf0>)
 8002178:	605a      	str	r2, [r3, #4]
	GRUZIK.Speed_offset = 0.014;
 800217a:	4b28      	ldr	r3, [pc, #160]	; (800221c <main+0xe8>)
 800217c:	4a2a      	ldr	r2, [pc, #168]	; (8002228 <main+0xf4>)
 800217e:	635a      	str	r2, [r3, #52]	; 0x34

	GRUZIK.Base_speed_R = 120;
 8002180:	4b26      	ldr	r3, [pc, #152]	; (800221c <main+0xe8>)
 8002182:	2278      	movs	r2, #120	; 0x78
 8002184:	609a      	str	r2, [r3, #8]
	GRUZIK.Base_speed_L = 120;
 8002186:	4b25      	ldr	r3, [pc, #148]	; (800221c <main+0xe8>)
 8002188:	2278      	movs	r2, #120	; 0x78
 800218a:	60da      	str	r2, [r3, #12]
	GRUZIK.Max_speed_R = 120;
 800218c:	4b23      	ldr	r3, [pc, #140]	; (800221c <main+0xe8>)
 800218e:	2278      	movs	r2, #120	; 0x78
 8002190:	611a      	str	r2, [r3, #16]
	GRUZIK.Max_speed_L = 120;
 8002192:	4b22      	ldr	r3, [pc, #136]	; (800221c <main+0xe8>)
 8002194:	2278      	movs	r2, #120	; 0x78
 8002196:	615a      	str	r2, [r3, #20]

	/*Sharp turn speed*/
	GRUZIK.Sharp_bend_speed_right=-70;
 8002198:	4b20      	ldr	r3, [pc, #128]	; (800221c <main+0xe8>)
 800219a:	f06f 0245 	mvn.w	r2, #69	; 0x45
 800219e:	619a      	str	r2, [r3, #24]
	GRUZIK.Sharp_bend_speed_left=85;
 80021a0:	4b1e      	ldr	r3, [pc, #120]	; (800221c <main+0xe8>)
 80021a2:	2255      	movs	r2, #85	; 0x55
 80021a4:	61da      	str	r2, [r3, #28]
	GRUZIK.Bend_speed_right=-50;
 80021a6:	4b1d      	ldr	r3, [pc, #116]	; (800221c <main+0xe8>)
 80021a8:	f06f 0231 	mvn.w	r2, #49	; 0x31
 80021ac:	621a      	str	r2, [r3, #32]
	GRUZIK.Bend_speed_left=110;
 80021ae:	4b1b      	ldr	r3, [pc, #108]	; (800221c <main+0xe8>)
 80021b0:	226e      	movs	r2, #110	; 0x6e
 80021b2:	625a      	str	r2, [r3, #36]	; 0x24

  /*Start receiving data from Blue tooth*/
   HAL_UART_Receive_IT(&huart1, &RxData, 1);
 80021b4:	2201      	movs	r2, #1
 80021b6:	491d      	ldr	r1, [pc, #116]	; (800222c <main+0xf8>)
 80021b8:	481d      	ldr	r0, [pc, #116]	; (8002230 <main+0xfc>)
 80021ba:	f004 f930 	bl	800641e <HAL_UART_Receive_IT>

   /*Start timers and PWM on channels*/
   HAL_TIM_Base_Start_IT(&htim1);
 80021be:	481d      	ldr	r0, [pc, #116]	; (8002234 <main+0x100>)
 80021c0:	f003 f888 	bl	80052d4 <HAL_TIM_Base_Start_IT>
   HAL_TIM_Base_Start(&htim2);
 80021c4:	481c      	ldr	r0, [pc, #112]	; (8002238 <main+0x104>)
 80021c6:	f003 f83b 	bl	8005240 <HAL_TIM_Base_Start>

   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80021ca:	2100      	movs	r1, #0
 80021cc:	481b      	ldr	r0, [pc, #108]	; (800223c <main+0x108>)
 80021ce:	f003 f983 	bl	80054d8 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80021d2:	2104      	movs	r1, #4
 80021d4:	4819      	ldr	r0, [pc, #100]	; (800223c <main+0x108>)
 80021d6:	f003 f97f 	bl	80054d8 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80021da:	2108      	movs	r1, #8
 80021dc:	4817      	ldr	r0, [pc, #92]	; (800223c <main+0x108>)
 80021de:	f003 f97b 	bl	80054d8 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80021e2:	210c      	movs	r1, #12
 80021e4:	4815      	ldr	r0, [pc, #84]	; (800223c <main+0x108>)
 80021e6:	f003 f977 	bl	80054d8 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  PID_control();
 80021ea:	f000 fc1d 	bl	8002a28 <PID_control>

	  if(ReceivedLines > 0)
 80021ee:	4b14      	ldr	r3, [pc, #80]	; (8002240 <main+0x10c>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f9      	beq.n	80021ea <main+0xb6>
	  {
		  Parser_TakeLine(&ReceiveBuffer, ReceivedData);
 80021f6:	4913      	ldr	r1, [pc, #76]	; (8002244 <main+0x110>)
 80021f8:	4813      	ldr	r0, [pc, #76]	; (8002248 <main+0x114>)
 80021fa:	f7ff f843 	bl	8001284 <Parser_TakeLine>
		  Parser_Parse(ReceivedData,&GRUZIK);
 80021fe:	4907      	ldr	r1, [pc, #28]	; (800221c <main+0xe8>)
 8002200:	4810      	ldr	r0, [pc, #64]	; (8002244 <main+0x110>)
 8002202:	f7ff fdaf 	bl	8001d64 <Parser_Parse>

		  ReceivedLines--;
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <main+0x10c>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	3b01      	subs	r3, #1
 800220c:	b2da      	uxtb	r2, r3
 800220e:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <main+0x10c>)
 8002210:	701a      	strb	r2, [r3, #0]
	  PID_control();
 8002212:	e7ea      	b.n	80021ea <main+0xb6>
 8002214:	200002a0 	.word	0x200002a0
 8002218:	20000200 	.word	0x20000200
 800221c:	20000274 	.word	0x20000274
 8002220:	3ca3d70a 	.word	0x3ca3d70a
 8002224:	3dcccccd 	.word	0x3dcccccd
 8002228:	3c656042 	.word	0x3c656042
 800222c:	20000304 	.word	0x20000304
 8002230:	20000494 	.word	0x20000494
 8002234:	20000374 	.word	0x20000374
 8002238:	200003bc 	.word	0x200003bc
 800223c:	2000044c 	.word	0x2000044c
 8002240:	2000036c 	.word	0x2000036c
 8002244:	2000034c 	.word	0x2000034c
 8002248:	20000308 	.word	0x20000308

0800224c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b094      	sub	sp, #80	; 0x50
 8002250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002252:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002256:	2228      	movs	r2, #40	; 0x28
 8002258:	2100      	movs	r1, #0
 800225a:	4618      	mov	r0, r3
 800225c:	f004 feb2 	bl	8006fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002270:	1d3b      	adds	r3, r7, #4
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800227c:	2301      	movs	r3, #1
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002280:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002284:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002286:	2300      	movs	r3, #0
 8002288:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800228a:	2301      	movs	r3, #1
 800228c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800228e:	2302      	movs	r3, #2
 8002290:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002292:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002296:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002298:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800229c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800229e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022a2:	4618      	mov	r0, r3
 80022a4:	f002 fab6 	bl	8004814 <HAL_RCC_OscConfig>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80022ae:	f000 fc83 	bl	8002bb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022b2:	230f      	movs	r3, #15
 80022b4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022b6:	2302      	movs	r3, #2
 80022b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80022be:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80022c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80022c4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022ca:	f107 0314 	add.w	r3, r7, #20
 80022ce:	2102      	movs	r1, #2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f002 fd21 	bl	8004d18 <HAL_RCC_ClockConfig>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80022dc:	f000 fc6c 	bl	8002bb8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80022e0:	2302      	movs	r3, #2
 80022e2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80022e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022e8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022ea:	1d3b      	adds	r3, r7, #4
 80022ec:	4618      	mov	r0, r3
 80022ee:	f002 fea1 	bl	8005034 <HAL_RCCEx_PeriphCLKConfig>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80022f8:	f000 fc5e 	bl	8002bb8 <Error_Handler>
  }
}
 80022fc:	bf00      	nop
 80022fe:	3750      	adds	r7, #80	; 0x50
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a0f      	ldr	r2, [pc, #60]	; (8002350 <HAL_UART_RxCpltCallback+0x4c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d117      	bne.n	8002346 <HAL_UART_RxCpltCallback+0x42>
	{
		if(RB_Write(&ReceiveBuffer, RxData) == RB_OK)
 8002316:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <HAL_UART_RxCpltCallback+0x50>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	4619      	mov	r1, r3
 800231c:	480e      	ldr	r0, [pc, #56]	; (8002358 <HAL_UART_RxCpltCallback+0x54>)
 800231e:	f7fe ff5f 	bl	80011e0 <RB_Write>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d109      	bne.n	800233c <HAL_UART_RxCpltCallback+0x38>
		{
			if(RxData == ENDLINE)
 8002328:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <HAL_UART_RxCpltCallback+0x50>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b0a      	cmp	r3, #10
 800232e:	d105      	bne.n	800233c <HAL_UART_RxCpltCallback+0x38>
			{
				ReceivedLines++;
 8002330:	4b0a      	ldr	r3, [pc, #40]	; (800235c <HAL_UART_RxCpltCallback+0x58>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	3301      	adds	r3, #1
 8002336:	b2da      	uxtb	r2, r3
 8002338:	4b08      	ldr	r3, [pc, #32]	; (800235c <HAL_UART_RxCpltCallback+0x58>)
 800233a:	701a      	strb	r2, [r3, #0]
			}
		}
    	HAL_UART_Receive_IT(&huart1,&RxData, 1);
 800233c:	2201      	movs	r2, #1
 800233e:	4905      	ldr	r1, [pc, #20]	; (8002354 <HAL_UART_RxCpltCallback+0x50>)
 8002340:	4807      	ldr	r0, [pc, #28]	; (8002360 <HAL_UART_RxCpltCallback+0x5c>)
 8002342:	f004 f86c 	bl	800641e <HAL_UART_Receive_IT>
	}
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40013800 	.word	0x40013800
 8002354:	20000304 	.word	0x20000304
 8002358:	20000308 	.word	0x20000308
 800235c:	2000036c 	.word	0x2000036c
 8002360:	20000494 	.word	0x20000494

08002364 <delay_us>:
void delay_us (uint16_t us) //Blocking function
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <delay_us+0x2c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2200      	movs	r2, #0
 8002374:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 8002376:	bf00      	nop
 8002378:	4b05      	ldr	r3, [pc, #20]	; (8002390 <delay_us+0x2c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800237e:	88fb      	ldrh	r3, [r7, #6]
 8002380:	429a      	cmp	r2, r3
 8002382:	d3f9      	bcc.n	8002378 <delay_us+0x14>
}
 8002384:	bf00      	nop
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr
 8002390:	200003bc 	.word	0x200003bc

08002394 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a0:	f107 0308 	add.w	r3, r7, #8
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80023ae:	887b      	ldrh	r3, [r7, #2]
 80023b0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b2:	2301      	movs	r3, #1
 80023b4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b6:	2302      	movs	r3, #2
 80023b8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80023ba:	f107 0308 	add.w	r3, r7, #8
 80023be:	4619      	mov	r1, r3
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f002 f873 	bl	80044ac <HAL_GPIO_Init>
}
 80023c6:	bf00      	nop
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b086      	sub	sp, #24
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	460b      	mov	r3, r1
 80023d8:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023da:	f107 0308 	add.w	r3, r7, #8
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	605a      	str	r2, [r3, #4]
 80023e4:	609a      	str	r2, [r3, #8]
 80023e6:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80023e8:	887b      	ldrh	r3, [r7, #2]
 80023ea:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023f0:	2301      	movs	r3, #1
 80023f2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80023f4:	f107 0308 	add.w	r3, r7, #8
 80023f8:	4619      	mov	r1, r3
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f002 f856 	bl	80044ac <HAL_GPIO_Init>
}
 8002400:	bf00      	nop
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <motor_control>:


void motor_control (double pos_right, double pos_left)
{
 8002408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800240c:	b085      	sub	sp, #20
 800240e:	af00      	add	r7, sp, #0
 8002410:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002414:	e9c7 2300 	strd	r2, r3, [r7]
	if (pos_left < 0 )
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002424:	f7fe fad4 	bl	80009d0 <__aeabi_dcmplt>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d02f      	beq.n	800248e <motor_control+0x86>
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_2, (uint32_t)((ARR*pos_left*-1) * GRUZIK.Speed_level));
 800242e:	4b64      	ldr	r3, [pc, #400]	; (80025c0 <motor_control+0x1b8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7fd fff0 	bl	8000418 <__aeabi_i2d>
 8002438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800243c:	f7fe f856 	bl	80004ec <__aeabi_dmul>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4690      	mov	r8, r2
 8002446:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800244a:	4b5e      	ldr	r3, [pc, #376]	; (80025c4 <motor_control+0x1bc>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	4618      	mov	r0, r3
 8002450:	f7fd fff4 	bl	800043c <__aeabi_f2d>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4640      	mov	r0, r8
 800245a:	4649      	mov	r1, r9
 800245c:	f7fe f846 	bl	80004ec <__aeabi_dmul>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4958      	ldr	r1, [pc, #352]	; (80025c8 <motor_control+0x1c0>)
 8002466:	680e      	ldr	r6, [r1, #0]
 8002468:	4610      	mov	r0, r2
 800246a:	4619      	mov	r1, r3
 800246c:	f7fe fb16 	bl	8000a9c <__aeabi_d2uiz>
 8002470:	4603      	mov	r3, r0
 8002472:	63b3      	str	r3, [r6, #56]	; 0x38
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8002474:	2201      	movs	r2, #1
 8002476:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800247a:	4854      	ldr	r0, [pc, #336]	; (80025cc <motor_control+0x1c4>)
 800247c:	f002 f9b1 	bl	80047e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8002480:	2200      	movs	r2, #0
 8002482:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002486:	4851      	ldr	r0, [pc, #324]	; (80025cc <motor_control+0x1c4>)
 8002488:	f002 f9ab 	bl	80047e2 <HAL_GPIO_WritePin>
 800248c:	e02d      	b.n	80024ea <motor_control+0xe2>
	}
	else
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_2, (uint32_t)((ARR*pos_left) * GRUZIK.Speed_level));
 800248e:	4b4c      	ldr	r3, [pc, #304]	; (80025c0 <motor_control+0x1b8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f7fd ffc0 	bl	8000418 <__aeabi_i2d>
 8002498:	e9d7 2300 	ldrd	r2, r3, [r7]
 800249c:	f7fe f826 	bl	80004ec <__aeabi_dmul>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	4690      	mov	r8, r2
 80024a6:	4699      	mov	r9, r3
 80024a8:	4b46      	ldr	r3, [pc, #280]	; (80025c4 <motor_control+0x1bc>)
 80024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fd ffc5 	bl	800043c <__aeabi_f2d>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	4640      	mov	r0, r8
 80024b8:	4649      	mov	r1, r9
 80024ba:	f7fe f817 	bl	80004ec <__aeabi_dmul>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4941      	ldr	r1, [pc, #260]	; (80025c8 <motor_control+0x1c0>)
 80024c4:	680e      	ldr	r6, [r1, #0]
 80024c6:	4610      	mov	r0, r2
 80024c8:	4619      	mov	r1, r3
 80024ca:	f7fe fae7 	bl	8000a9c <__aeabi_d2uiz>
 80024ce:	4603      	mov	r3, r0
 80024d0:	63b3      	str	r3, [r6, #56]	; 0x38
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80024d2:	2200      	movs	r2, #0
 80024d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024d8:	483c      	ldr	r0, [pc, #240]	; (80025cc <motor_control+0x1c4>)
 80024da:	f002 f982 	bl	80047e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80024de:	2201      	movs	r2, #1
 80024e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024e4:	4839      	ldr	r0, [pc, #228]	; (80025cc <motor_control+0x1c4>)
 80024e6:	f002 f97c 	bl	80047e2 <HAL_GPIO_WritePin>
	}
	if (pos_right < 0 )
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024f6:	f7fe fa6b 	bl	80009d0 <__aeabi_dcmplt>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d02d      	beq.n	800255c <motor_control+0x154>
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_4, (uint32_t)((ARR*pos_right* -1) * GRUZIK.Speed_level));
 8002500:	4b2f      	ldr	r3, [pc, #188]	; (80025c0 <motor_control+0x1b8>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f7fd ff87 	bl	8000418 <__aeabi_i2d>
 800250a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800250e:	f7fd ffed 	bl	80004ec <__aeabi_dmul>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4614      	mov	r4, r2
 8002518:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800251c:	4b29      	ldr	r3, [pc, #164]	; (80025c4 <motor_control+0x1bc>)
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	4618      	mov	r0, r3
 8002522:	f7fd ff8b 	bl	800043c <__aeabi_f2d>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4620      	mov	r0, r4
 800252c:	4629      	mov	r1, r5
 800252e:	f7fd ffdd 	bl	80004ec <__aeabi_dmul>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4924      	ldr	r1, [pc, #144]	; (80025c8 <motor_control+0x1c0>)
 8002538:	680c      	ldr	r4, [r1, #0]
 800253a:	4610      	mov	r0, r2
 800253c:	4619      	mov	r1, r3
 800253e:	f7fe faad 	bl	8000a9c <__aeabi_d2uiz>
 8002542:	4603      	mov	r3, r0
 8002544:	6423      	str	r3, [r4, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002546:	2201      	movs	r2, #1
 8002548:	2120      	movs	r1, #32
 800254a:	4820      	ldr	r0, [pc, #128]	; (80025cc <motor_control+0x1c4>)
 800254c:	f002 f949 	bl	80047e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002550:	2200      	movs	r2, #0
 8002552:	2110      	movs	r1, #16
 8002554:	481d      	ldr	r0, [pc, #116]	; (80025cc <motor_control+0x1c4>)
 8002556:	f002 f944 	bl	80047e2 <HAL_GPIO_WritePin>
	{
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_4, (uint32_t)((ARR*pos_right) * GRUZIK.Speed_level));
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
	}
}
 800255a:	e02b      	b.n	80025b4 <motor_control+0x1ac>
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_4, (uint32_t)((ARR*pos_right) * GRUZIK.Speed_level));
 800255c:	4b18      	ldr	r3, [pc, #96]	; (80025c0 <motor_control+0x1b8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f7fd ff59 	bl	8000418 <__aeabi_i2d>
 8002566:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800256a:	f7fd ffbf 	bl	80004ec <__aeabi_dmul>
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	4614      	mov	r4, r2
 8002574:	461d      	mov	r5, r3
 8002576:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <motor_control+0x1bc>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	4618      	mov	r0, r3
 800257c:	f7fd ff5e 	bl	800043c <__aeabi_f2d>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4620      	mov	r0, r4
 8002586:	4629      	mov	r1, r5
 8002588:	f7fd ffb0 	bl	80004ec <__aeabi_dmul>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	490d      	ldr	r1, [pc, #52]	; (80025c8 <motor_control+0x1c0>)
 8002592:	680c      	ldr	r4, [r1, #0]
 8002594:	4610      	mov	r0, r2
 8002596:	4619      	mov	r1, r3
 8002598:	f7fe fa80 	bl	8000a9c <__aeabi_d2uiz>
 800259c:	4603      	mov	r3, r0
 800259e:	6423      	str	r3, [r4, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80025a0:	2200      	movs	r2, #0
 80025a2:	2120      	movs	r1, #32
 80025a4:	4809      	ldr	r0, [pc, #36]	; (80025cc <motor_control+0x1c4>)
 80025a6:	f002 f91c 	bl	80047e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80025aa:	2201      	movs	r2, #1
 80025ac:	2110      	movs	r1, #16
 80025ae:	4807      	ldr	r0, [pc, #28]	; (80025cc <motor_control+0x1c4>)
 80025b0:	f002 f917 	bl	80047e2 <HAL_GPIO_WritePin>
}
 80025b4:	bf00      	nop
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025be:	bf00      	nop
 80025c0:	20000000 	.word	0x20000000
 80025c4:	20000274 	.word	0x20000274
 80025c8:	2000044c 	.word	0x2000044c
 80025cc:	40010c00 	.word	0x40010c00

080025d0 <sharp_turn>:


void sharp_turn ()
{
 80025d0:	b5b0      	push	{r4, r5, r7, lr}
 80025d2:	af00      	add	r7, sp, #0

	if (Last_idle < 25)
 80025d4:	4b2c      	ldr	r3, [pc, #176]	; (8002688 <sharp_turn+0xb8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b18      	cmp	r3, #24
 80025da:	dc29      	bgt.n	8002630 <sharp_turn+0x60>
	{
		if (Last_end == 1)
 80025dc:	4b2b      	ldr	r3, [pc, #172]	; (800268c <sharp_turn+0xbc>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d112      	bne.n	800260a <sharp_turn+0x3a>
			motor_control(GRUZIK.Sharp_bend_speed_right, GRUZIK.Sharp_bend_speed_left);
 80025e4:	4b2a      	ldr	r3, [pc, #168]	; (8002690 <sharp_turn+0xc0>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fd ff15 	bl	8000418 <__aeabi_i2d>
 80025ee:	4604      	mov	r4, r0
 80025f0:	460d      	mov	r5, r1
 80025f2:	4b27      	ldr	r3, [pc, #156]	; (8002690 <sharp_turn+0xc0>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fd ff0e 	bl	8000418 <__aeabi_i2d>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4620      	mov	r0, r4
 8002602:	4629      	mov	r1, r5
 8002604:	f7ff ff00 	bl	8002408 <motor_control>
		if (Last_end == 1)
			motor_control(GRUZIK.Bend_speed_right, GRUZIK.Bend_speed_left);
		else
			motor_control(GRUZIK.Bend_speed_left, GRUZIK.Bend_speed_right);
	}
}
 8002608:	e03b      	b.n	8002682 <sharp_turn+0xb2>
			motor_control(GRUZIK.Sharp_bend_speed_left, GRUZIK.Sharp_bend_speed_right);
 800260a:	4b21      	ldr	r3, [pc, #132]	; (8002690 <sharp_turn+0xc0>)
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	4618      	mov	r0, r3
 8002610:	f7fd ff02 	bl	8000418 <__aeabi_i2d>
 8002614:	4604      	mov	r4, r0
 8002616:	460d      	mov	r5, r1
 8002618:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <sharp_turn+0xc0>)
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	4618      	mov	r0, r3
 800261e:	f7fd fefb 	bl	8000418 <__aeabi_i2d>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	4620      	mov	r0, r4
 8002628:	4629      	mov	r1, r5
 800262a:	f7ff feed 	bl	8002408 <motor_control>
}
 800262e:	e028      	b.n	8002682 <sharp_turn+0xb2>
		if (Last_end == 1)
 8002630:	4b16      	ldr	r3, [pc, #88]	; (800268c <sharp_turn+0xbc>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d112      	bne.n	800265e <sharp_turn+0x8e>
			motor_control(GRUZIK.Bend_speed_right, GRUZIK.Bend_speed_left);
 8002638:	4b15      	ldr	r3, [pc, #84]	; (8002690 <sharp_turn+0xc0>)
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	4618      	mov	r0, r3
 800263e:	f7fd feeb 	bl	8000418 <__aeabi_i2d>
 8002642:	4604      	mov	r4, r0
 8002644:	460d      	mov	r5, r1
 8002646:	4b12      	ldr	r3, [pc, #72]	; (8002690 <sharp_turn+0xc0>)
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	4618      	mov	r0, r3
 800264c:	f7fd fee4 	bl	8000418 <__aeabi_i2d>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4620      	mov	r0, r4
 8002656:	4629      	mov	r1, r5
 8002658:	f7ff fed6 	bl	8002408 <motor_control>
}
 800265c:	e011      	b.n	8002682 <sharp_turn+0xb2>
			motor_control(GRUZIK.Bend_speed_left, GRUZIK.Bend_speed_right);
 800265e:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <sharp_turn+0xc0>)
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	4618      	mov	r0, r3
 8002664:	f7fd fed8 	bl	8000418 <__aeabi_i2d>
 8002668:	4604      	mov	r4, r0
 800266a:	460d      	mov	r5, r1
 800266c:	4b08      	ldr	r3, [pc, #32]	; (8002690 <sharp_turn+0xc0>)
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	4618      	mov	r0, r3
 8002672:	f7fd fed1 	bl	8000418 <__aeabi_i2d>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	4620      	mov	r0, r4
 800267c:	4629      	mov	r1, r5
 800267e:	f7ff fec3 	bl	8002408 <motor_control>
}
 8002682:	bf00      	nop
 8002684:	bdb0      	pop	{r4, r5, r7, pc}
 8002686:	bf00      	nop
 8002688:	200002fc 	.word	0x200002fc
 800268c:	200002f8 	.word	0x200002f8
 8002690:	20000274 	.word	0x20000274

08002694 <QTR8_read>:
int QTR8_read ()
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDON_GPIO_Port, LEDON_Pin, 1);
 800269a:	2201      	movs	r2, #1
 800269c:	2101      	movs	r1, #1
 800269e:	48a2      	ldr	r0, [pc, #648]	; (8002928 <QTR8_read+0x294>)
 80026a0:	f002 f89f 	bl	80047e2 <HAL_GPIO_WritePin>

	Set_Pin_Output(SENSOR1_GPIO_Port, SENSOR1_Pin);
 80026a4:	2180      	movs	r1, #128	; 0x80
 80026a6:	48a1      	ldr	r0, [pc, #644]	; (800292c <QTR8_read+0x298>)
 80026a8:	f7ff fe74 	bl	8002394 <Set_Pin_Output>
	Set_Pin_Output(SENSOR2_GPIO_Port, SENSOR2_Pin);
 80026ac:	2140      	movs	r1, #64	; 0x40
 80026ae:	489f      	ldr	r0, [pc, #636]	; (800292c <QTR8_read+0x298>)
 80026b0:	f7ff fe70 	bl	8002394 <Set_Pin_Output>
	Set_Pin_Output(SENSOR3_GPIO_Port, SENSOR3_Pin);
 80026b4:	2120      	movs	r1, #32
 80026b6:	489d      	ldr	r0, [pc, #628]	; (800292c <QTR8_read+0x298>)
 80026b8:	f7ff fe6c 	bl	8002394 <Set_Pin_Output>
	Set_Pin_Output(SENSOR4_GPIO_Port, SENSOR4_Pin);
 80026bc:	2110      	movs	r1, #16
 80026be:	489b      	ldr	r0, [pc, #620]	; (800292c <QTR8_read+0x298>)
 80026c0:	f7ff fe68 	bl	8002394 <Set_Pin_Output>
	Set_Pin_Output(SENSOR5_GPIO_Port, SENSOR5_Pin);
 80026c4:	2108      	movs	r1, #8
 80026c6:	4899      	ldr	r0, [pc, #612]	; (800292c <QTR8_read+0x298>)
 80026c8:	f7ff fe64 	bl	8002394 <Set_Pin_Output>
	Set_Pin_Output(SENSOR6_GPIO_Port, SENSOR6_Pin);
 80026cc:	2104      	movs	r1, #4
 80026ce:	4897      	ldr	r0, [pc, #604]	; (800292c <QTR8_read+0x298>)
 80026d0:	f7ff fe60 	bl	8002394 <Set_Pin_Output>
	Set_Pin_Output(SENSOR7_GPIO_Port, SENSOR7_Pin);
 80026d4:	2102      	movs	r1, #2
 80026d6:	4895      	ldr	r0, [pc, #596]	; (800292c <QTR8_read+0x298>)
 80026d8:	f7ff fe5c 	bl	8002394 <Set_Pin_Output>
	Set_Pin_Output(SENSOR8_GPIO_Port, SENSOR8_Pin);
 80026dc:	2101      	movs	r1, #1
 80026de:	4893      	ldr	r0, [pc, #588]	; (800292c <QTR8_read+0x298>)
 80026e0:	f7ff fe58 	bl	8002394 <Set_Pin_Output>

	HAL_GPIO_WritePin (SENSOR1_GPIO_Port, SENSOR1_Pin, 1);
 80026e4:	2201      	movs	r2, #1
 80026e6:	2180      	movs	r1, #128	; 0x80
 80026e8:	4890      	ldr	r0, [pc, #576]	; (800292c <QTR8_read+0x298>)
 80026ea:	f002 f87a 	bl	80047e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR2_GPIO_Port, SENSOR2_Pin, 1);
 80026ee:	2201      	movs	r2, #1
 80026f0:	2140      	movs	r1, #64	; 0x40
 80026f2:	488e      	ldr	r0, [pc, #568]	; (800292c <QTR8_read+0x298>)
 80026f4:	f002 f875 	bl	80047e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR3_GPIO_Port, SENSOR3_Pin, 1);
 80026f8:	2201      	movs	r2, #1
 80026fa:	2120      	movs	r1, #32
 80026fc:	488b      	ldr	r0, [pc, #556]	; (800292c <QTR8_read+0x298>)
 80026fe:	f002 f870 	bl	80047e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR4_GPIO_Port, SENSOR4_Pin, 1);
 8002702:	2201      	movs	r2, #1
 8002704:	2110      	movs	r1, #16
 8002706:	4889      	ldr	r0, [pc, #548]	; (800292c <QTR8_read+0x298>)
 8002708:	f002 f86b 	bl	80047e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR5_GPIO_Port, SENSOR5_Pin, 1);
 800270c:	2201      	movs	r2, #1
 800270e:	2108      	movs	r1, #8
 8002710:	4886      	ldr	r0, [pc, #536]	; (800292c <QTR8_read+0x298>)
 8002712:	f002 f866 	bl	80047e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR6_GPIO_Port, SENSOR6_Pin, 1);
 8002716:	2201      	movs	r2, #1
 8002718:	2104      	movs	r1, #4
 800271a:	4884      	ldr	r0, [pc, #528]	; (800292c <QTR8_read+0x298>)
 800271c:	f002 f861 	bl	80047e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR7_GPIO_Port, SENSOR7_Pin, 1);
 8002720:	2201      	movs	r2, #1
 8002722:	2102      	movs	r1, #2
 8002724:	4881      	ldr	r0, [pc, #516]	; (800292c <QTR8_read+0x298>)
 8002726:	f002 f85c 	bl	80047e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR8_GPIO_Port, SENSOR8_Pin, 1);
 800272a:	2201      	movs	r2, #1
 800272c:	2101      	movs	r1, #1
 800272e:	487f      	ldr	r0, [pc, #508]	; (800292c <QTR8_read+0x298>)
 8002730:	f002 f857 	bl	80047e2 <HAL_GPIO_WritePin>

	delay_us(10);
 8002734:	200a      	movs	r0, #10
 8002736:	f7ff fe15 	bl	8002364 <delay_us>

	Set_Pin_Input(SENSOR1_GPIO_Port, SENSOR1_Pin);
 800273a:	2180      	movs	r1, #128	; 0x80
 800273c:	487b      	ldr	r0, [pc, #492]	; (800292c <QTR8_read+0x298>)
 800273e:	f7ff fe46 	bl	80023ce <Set_Pin_Input>
	Set_Pin_Input(SENSOR2_GPIO_Port, SENSOR2_Pin);
 8002742:	2140      	movs	r1, #64	; 0x40
 8002744:	4879      	ldr	r0, [pc, #484]	; (800292c <QTR8_read+0x298>)
 8002746:	f7ff fe42 	bl	80023ce <Set_Pin_Input>
	Set_Pin_Input(SENSOR3_GPIO_Port, SENSOR3_Pin);
 800274a:	2120      	movs	r1, #32
 800274c:	4877      	ldr	r0, [pc, #476]	; (800292c <QTR8_read+0x298>)
 800274e:	f7ff fe3e 	bl	80023ce <Set_Pin_Input>
	Set_Pin_Input(SENSOR4_GPIO_Port, SENSOR4_Pin);
 8002752:	2110      	movs	r1, #16
 8002754:	4875      	ldr	r0, [pc, #468]	; (800292c <QTR8_read+0x298>)
 8002756:	f7ff fe3a 	bl	80023ce <Set_Pin_Input>
	Set_Pin_Input(SENSOR5_GPIO_Port, SENSOR5_Pin);
 800275a:	2108      	movs	r1, #8
 800275c:	4873      	ldr	r0, [pc, #460]	; (800292c <QTR8_read+0x298>)
 800275e:	f7ff fe36 	bl	80023ce <Set_Pin_Input>
	Set_Pin_Input(SENSOR6_GPIO_Port, SENSOR6_Pin);
 8002762:	2104      	movs	r1, #4
 8002764:	4871      	ldr	r0, [pc, #452]	; (800292c <QTR8_read+0x298>)
 8002766:	f7ff fe32 	bl	80023ce <Set_Pin_Input>
	Set_Pin_Input(SENSOR7_GPIO_Port, SENSOR7_Pin);
 800276a:	2102      	movs	r1, #2
 800276c:	486f      	ldr	r0, [pc, #444]	; (800292c <QTR8_read+0x298>)
 800276e:	f7ff fe2e 	bl	80023ce <Set_Pin_Input>
	Set_Pin_Input(SENSOR8_GPIO_Port, SENSOR8_Pin);
 8002772:	2101      	movs	r1, #1
 8002774:	486d      	ldr	r0, [pc, #436]	; (800292c <QTR8_read+0x298>)
 8002776:	f7ff fe2a 	bl	80023ce <Set_Pin_Input>

	// Threshold
	 delay_us(4500);
 800277a:	f241 1094 	movw	r0, #4500	; 0x1194
 800277e:	f7ff fdf1 	bl	8002364 <delay_us>
//	 sensory[7] = HAL_GPIO_ReadPin(SENSOR8_GPIO_Port, SENSOR8_Pin);
//	 uint8_t Message[64];
//	 sprintf((char*)Message,"S1: %d S2: %d S3: %d S4: %d S5: %d S6: %d S7: %d S8: %d\n\r", sensory[0],sensory[1],sensory[2],sensory[3],sensory[4],sensory[5],sensory[6],sensory[7]);
//	 HAL_UART_Transmit(&huart3, Message, strlen((char*)Message), 100);

	Sensors_read = 0x00000000;
 8002782:	4b6b      	ldr	r3, [pc, #428]	; (8002930 <QTR8_read+0x29c>)
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
	int pos = 0;
 8002788:	2300      	movs	r3, #0
 800278a:	607b      	str	r3, [r7, #4]
  int active = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	603b      	str	r3, [r7, #0]

	if (HAL_GPIO_ReadPin(SENSOR1_GPIO_Port, SENSOR1_Pin)) {
 8002790:	2180      	movs	r1, #128	; 0x80
 8002792:	4866      	ldr	r0, [pc, #408]	; (800292c <QTR8_read+0x298>)
 8002794:	f002 f80e 	bl	80047b4 <HAL_GPIO_ReadPin>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00f      	beq.n	80027be <QTR8_read+0x12a>
		Sensors_read |= 0x00000001;
 800279e:	4b64      	ldr	r3, [pc, #400]	; (8002930 <QTR8_read+0x29c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	4a62      	ldr	r2, [pc, #392]	; (8002930 <QTR8_read+0x29c>)
 80027a8:	6013      	str	r3, [r2, #0]
		pos += 1000;//1000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80027b0:	607b      	str	r3, [r7, #4]
    active++;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	3301      	adds	r3, #1
 80027b6:	603b      	str	r3, [r7, #0]
		Last_end = 1;
 80027b8:	4b5e      	ldr	r3, [pc, #376]	; (8002934 <QTR8_read+0x2a0>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	601a      	str	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(SENSOR2_GPIO_Port, SENSOR2_Pin)) {
 80027be:	2140      	movs	r1, #64	; 0x40
 80027c0:	485a      	ldr	r0, [pc, #360]	; (800292c <QTR8_read+0x298>)
 80027c2:	f001 fff7 	bl	80047b4 <HAL_GPIO_ReadPin>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00c      	beq.n	80027e6 <QTR8_read+0x152>
		Sensors_read |= 0x00000010;
 80027cc:	4b58      	ldr	r3, [pc, #352]	; (8002930 <QTR8_read+0x29c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f043 0310 	orr.w	r3, r3, #16
 80027d4:	4a56      	ldr	r2, [pc, #344]	; (8002930 <QTR8_read+0x29c>)
 80027d6:	6013      	str	r3, [r2, #0]
		pos += 2000;//2000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80027de:	607b      	str	r3, [r7, #4]
    active++;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	3301      	adds	r3, #1
 80027e4:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR3_GPIO_Port, SENSOR3_Pin)) {
 80027e6:	2120      	movs	r1, #32
 80027e8:	4850      	ldr	r0, [pc, #320]	; (800292c <QTR8_read+0x298>)
 80027ea:	f001 ffe3 	bl	80047b4 <HAL_GPIO_ReadPin>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00c      	beq.n	800280e <QTR8_read+0x17a>
		Sensors_read |= 0x00000100;
 80027f4:	4b4e      	ldr	r3, [pc, #312]	; (8002930 <QTR8_read+0x29c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027fc:	4a4c      	ldr	r2, [pc, #304]	; (8002930 <QTR8_read+0x29c>)
 80027fe:	6013      	str	r3, [r2, #0]
		pos += 3000;//3000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8002806:	607b      	str	r3, [r7, #4]
    active++;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	3301      	adds	r3, #1
 800280c:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR4_GPIO_Port, SENSOR4_Pin)) {
 800280e:	2110      	movs	r1, #16
 8002810:	4846      	ldr	r0, [pc, #280]	; (800292c <QTR8_read+0x298>)
 8002812:	f001 ffcf 	bl	80047b4 <HAL_GPIO_ReadPin>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00c      	beq.n	8002836 <QTR8_read+0x1a2>
		Sensors_read |= 0x00001000;
 800281c:	4b44      	ldr	r3, [pc, #272]	; (8002930 <QTR8_read+0x29c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002824:	4a42      	ldr	r2, [pc, #264]	; (8002930 <QTR8_read+0x29c>)
 8002826:	6013      	str	r3, [r2, #0]
		pos += 4000;//4000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 800282e:	607b      	str	r3, [r7, #4]
    active++;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	3301      	adds	r3, #1
 8002834:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR5_GPIO_Port, SENSOR5_Pin)) {
 8002836:	2108      	movs	r1, #8
 8002838:	483c      	ldr	r0, [pc, #240]	; (800292c <QTR8_read+0x298>)
 800283a:	f001 ffbb 	bl	80047b4 <HAL_GPIO_ReadPin>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00d      	beq.n	8002860 <QTR8_read+0x1cc>
		Sensors_read |= 0x00010000;
 8002844:	4b3a      	ldr	r3, [pc, #232]	; (8002930 <QTR8_read+0x29c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284c:	4a38      	ldr	r2, [pc, #224]	; (8002930 <QTR8_read+0x29c>)
 800284e:	6013      	str	r3, [r2, #0]
		pos += 5000;//5000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8002856:	3308      	adds	r3, #8
 8002858:	607b      	str	r3, [r7, #4]
    active++;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	3301      	adds	r3, #1
 800285e:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR6_GPIO_Port, SENSOR6_Pin)) {
 8002860:	2104      	movs	r1, #4
 8002862:	4832      	ldr	r0, [pc, #200]	; (800292c <QTR8_read+0x298>)
 8002864:	f001 ffa6 	bl	80047b4 <HAL_GPIO_ReadPin>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00d      	beq.n	800288a <QTR8_read+0x1f6>
		Sensors_read |= 0x00100000;
 800286e:	4b30      	ldr	r3, [pc, #192]	; (8002930 <QTR8_read+0x29c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002876:	4a2e      	ldr	r2, [pc, #184]	; (8002930 <QTR8_read+0x29c>)
 8002878:	6013      	str	r3, [r2, #0]
		pos += 6000;//6000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8002880:	3310      	adds	r3, #16
 8002882:	607b      	str	r3, [r7, #4]
    active++;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	3301      	adds	r3, #1
 8002888:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR7_GPIO_Port, SENSOR7_Pin)) {
 800288a:	2102      	movs	r1, #2
 800288c:	4827      	ldr	r0, [pc, #156]	; (800292c <QTR8_read+0x298>)
 800288e:	f001 ff91 	bl	80047b4 <HAL_GPIO_ReadPin>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00d      	beq.n	80028b4 <QTR8_read+0x220>
		Sensors_read |= 0x01000000;
 8002898:	4b25      	ldr	r3, [pc, #148]	; (8002930 <QTR8_read+0x29c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028a0:	4a23      	ldr	r2, [pc, #140]	; (8002930 <QTR8_read+0x29c>)
 80028a2:	6013      	str	r3, [r2, #0]
		pos += 7000;//7000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f503 53da 	add.w	r3, r3, #6976	; 0x1b40
 80028aa:	3318      	adds	r3, #24
 80028ac:	607b      	str	r3, [r7, #4]
    active++;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	3301      	adds	r3, #1
 80028b2:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR8_GPIO_Port, SENSOR8_Pin)) {
 80028b4:	2101      	movs	r1, #1
 80028b6:	481d      	ldr	r0, [pc, #116]	; (800292c <QTR8_read+0x298>)
 80028b8:	f001 ff7c 	bl	80047b4 <HAL_GPIO_ReadPin>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00f      	beq.n	80028e2 <QTR8_read+0x24e>
		Sensors_read |= 0x10000000;
 80028c2:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <QTR8_read+0x29c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ca:	4a19      	ldr	r2, [pc, #100]	; (8002930 <QTR8_read+0x29c>)
 80028cc:	6013      	str	r3, [r2, #0]
		pos += 8000;//8000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 80028d4:	607b      	str	r3, [r7, #4]
    active++;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	3301      	adds	r3, #1
 80028da:	603b      	str	r3, [r7, #0]
		Last_end = 0;
 80028dc:	4b15      	ldr	r3, [pc, #84]	; (8002934 <QTR8_read+0x2a0>)
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
  }

  HAL_GPIO_WritePin(LEDON_GPIO_Port, LEDON_Pin, 0);
 80028e2:	2200      	movs	r2, #0
 80028e4:	2101      	movs	r1, #1
 80028e6:	4810      	ldr	r0, [pc, #64]	; (8002928 <QTR8_read+0x294>)
 80028e8:	f001 ff7b 	bl	80047e2 <HAL_GPIO_WritePin>

  actives = active;
 80028ec:	4a12      	ldr	r2, [pc, #72]	; (8002938 <QTR8_read+0x2a4>)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	6013      	str	r3, [r2, #0]
	Position = pos/active;
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80028fa:	4a10      	ldr	r2, [pc, #64]	; (800293c <QTR8_read+0x2a8>)
 80028fc:	6013      	str	r3, [r2, #0]

	if (actives == 0)
 80028fe:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <QTR8_read+0x2a4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d105      	bne.n	8002912 <QTR8_read+0x27e>
		Last_idle++;
 8002906:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <QTR8_read+0x2ac>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	3301      	adds	r3, #1
 800290c:	4a0c      	ldr	r2, [pc, #48]	; (8002940 <QTR8_read+0x2ac>)
 800290e:	6013      	str	r3, [r2, #0]
 8002910:	e002      	b.n	8002918 <QTR8_read+0x284>
	else
		Last_idle = 0;
 8002912:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <QTR8_read+0x2ac>)
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]

	return pos/active;
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8002920:	4618      	mov	r0, r3
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40010c00 	.word	0x40010c00
 800292c:	40010800 	.word	0x40010800
 8002930:	200002ac 	.word	0x200002ac
 8002934:	200002f8 	.word	0x200002f8
 8002938:	20000300 	.word	0x20000300
 800293c:	200002b0 	.word	0x200002b0
 8002940:	200002fc 	.word	0x200002fc

08002944 <forward_brake>:


void forward_brake(int pos_right, int pos_left)
{
 8002944:	b5b0      	push	{r4, r5, r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
	if (actives == 0)
 800294e:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <forward_brake+0x3c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d102      	bne.n	800295c <forward_brake+0x18>
		sharp_turn();
 8002956:	f7ff fe3b 	bl	80025d0 <sharp_turn>
	else
	  motor_control(pos_right, pos_left);
}
 800295a:	e00d      	b.n	8002978 <forward_brake+0x34>
	  motor_control(pos_right, pos_left);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7fd fd5b 	bl	8000418 <__aeabi_i2d>
 8002962:	4604      	mov	r4, r0
 8002964:	460d      	mov	r5, r1
 8002966:	6838      	ldr	r0, [r7, #0]
 8002968:	f7fd fd56 	bl	8000418 <__aeabi_i2d>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4620      	mov	r0, r4
 8002972:	4629      	mov	r1, r5
 8002974:	f7ff fd48 	bl	8002408 <motor_control>
}
 8002978:	bf00      	nop
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bdb0      	pop	{r4, r5, r7, pc}
 8002980:	20000300 	.word	0x20000300

08002984 <past_errors>:

void past_errors (int error)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  for (int i = 9; i > 0; i--)
 800298c:	2309      	movs	r3, #9
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	e00b      	b.n	80029aa <past_errors+0x26>
      Errors[i] = Errors[i-1];
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	3b01      	subs	r3, #1
 8002996:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <past_errors+0x3c>)
 8002998:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800299c:	4908      	ldr	r1, [pc, #32]	; (80029c0 <past_errors+0x3c>)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int i = 9; i > 0; i--)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	dcf0      	bgt.n	8002992 <past_errors+0xe>
  Errors[0] = error;
 80029b0:	4a03      	ldr	r2, [pc, #12]	; (80029c0 <past_errors+0x3c>)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6013      	str	r3, [r2, #0]
}
 80029b6:	bf00      	nop
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr
 80029c0:	200002d0 	.word	0x200002d0

080029c4 <errors_sum>:

int errors_sum (int index, int abs)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  int sum = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < index; i++)
 80029d2:	2300      	movs	r3, #0
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	e01a      	b.n	8002a0e <errors_sum+0x4a>
  {
    if (abs == 1 && Errors[i] < 0)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d10d      	bne.n	80029fa <errors_sum+0x36>
 80029de:	4a11      	ldr	r2, [pc, #68]	; (8002a24 <errors_sum+0x60>)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	da07      	bge.n	80029fa <errors_sum+0x36>
      sum += -Errors[i];
 80029ea:	4a0e      	ldr	r2, [pc, #56]	; (8002a24 <errors_sum+0x60>)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	e006      	b.n	8002a08 <errors_sum+0x44>
    else
      sum += Errors[i];
 80029fa:	4a0a      	ldr	r2, [pc, #40]	; (8002a24 <errors_sum+0x60>)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4413      	add	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < index; i++)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	dbe0      	blt.n	80029d8 <errors_sum+0x14>
  }
  return sum;
 8002a16:	68fb      	ldr	r3, [r7, #12]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	200002d0 	.word	0x200002d0

08002a28 <PID_control>:

void PID_control()
{
 8002a28:	b590      	push	{r4, r7, lr}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
  uint16_t position = QTR8_read();
 8002a2e:	f7ff fe31 	bl	8002694 <QTR8_read>
 8002a32:	4603      	mov	r3, r0
 8002a34:	81fb      	strh	r3, [r7, #14]
  int error = 4500 - position;
 8002a36:	89fb      	ldrh	r3, [r7, #14]
 8002a38:	f5c3 538c 	rsb	r3, r3, #4480	; 0x1180
 8002a3c:	3314      	adds	r3, #20
 8002a3e:	60bb      	str	r3, [r7, #8]
  past_errors(error);
 8002a40:	68b8      	ldr	r0, [r7, #8]
 8002a42:	f7ff ff9f 	bl	8002984 <past_errors>

  P = error;
 8002a46:	4a54      	ldr	r2, [pc, #336]	; (8002b98 <PID_control+0x170>)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	6013      	str	r3, [r2, #0]
  I = errors_sum(5, 0);
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	2005      	movs	r0, #5
 8002a50:	f7ff ffb8 	bl	80029c4 <errors_sum>
 8002a54:	4603      	mov	r3, r0
 8002a56:	4a51      	ldr	r2, [pc, #324]	; (8002b9c <PID_control+0x174>)
 8002a58:	6013      	str	r3, [r2, #0]
  D = error - Last_error;
 8002a5a:	4b51      	ldr	r3, [pc, #324]	; (8002ba0 <PID_control+0x178>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	4a50      	ldr	r2, [pc, #320]	; (8002ba4 <PID_control+0x17c>)
 8002a64:	6013      	str	r3, [r2, #0]
  R = errors_sum(5, 1);
 8002a66:	2101      	movs	r1, #1
 8002a68:	2005      	movs	r0, #5
 8002a6a:	f7ff ffab 	bl	80029c4 <errors_sum>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4a4d      	ldr	r2, [pc, #308]	; (8002ba8 <PID_control+0x180>)
 8002a72:	6013      	str	r3, [r2, #0]
  Last_error = error;
 8002a74:	4a4a      	ldr	r2, [pc, #296]	; (8002ba0 <PID_control+0x178>)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	6013      	str	r3, [r2, #0]

  int motorspeed = P*GRUZIK.Kp + I*Ki + D*GRUZIK.Kd;
 8002a7a:	4b47      	ldr	r3, [pc, #284]	; (8002b98 <PID_control+0x170>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fe f936 	bl	8000cf0 <__aeabi_i2f>
 8002a84:	4602      	mov	r2, r0
 8002a86:	4b49      	ldr	r3, [pc, #292]	; (8002bac <PID_control+0x184>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	f7fe f983 	bl	8000d98 <__aeabi_fmul>
 8002a92:	4603      	mov	r3, r0
 8002a94:	461c      	mov	r4, r3
 8002a96:	4b41      	ldr	r3, [pc, #260]	; (8002b9c <PID_control+0x174>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fe f928 	bl	8000cf0 <__aeabi_i2f>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	4b43      	ldr	r3, [pc, #268]	; (8002bb0 <PID_control+0x188>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	f7fe f975 	bl	8000d98 <__aeabi_fmul>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	f7fe f868 	bl	8000b88 <__addsf3>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	461c      	mov	r4, r3
 8002abc:	4b39      	ldr	r3, [pc, #228]	; (8002ba4 <PID_control+0x17c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fe f915 	bl	8000cf0 <__aeabi_i2f>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	4b38      	ldr	r3, [pc, #224]	; (8002bac <PID_control+0x184>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	4619      	mov	r1, r3
 8002ace:	4610      	mov	r0, r2
 8002ad0:	f7fe f962 	bl	8000d98 <__aeabi_fmul>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4620      	mov	r0, r4
 8002ada:	f7fe f855 	bl	8000b88 <__addsf3>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fe fb1f 	bl	8001124 <__aeabi_f2iz>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	607b      	str	r3, [r7, #4]

  int motorspeedl = GRUZIK.Base_speed_L + motorspeed - R*Kr;
 8002aea:	4b30      	ldr	r3, [pc, #192]	; (8002bac <PID_control+0x184>)
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4413      	add	r3, r2
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fe f8fc 	bl	8000cf0 <__aeabi_i2f>
 8002af8:	4604      	mov	r4, r0
 8002afa:	4b2b      	ldr	r3, [pc, #172]	; (8002ba8 <PID_control+0x180>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe f8f6 	bl	8000cf0 <__aeabi_i2f>
 8002b04:	4602      	mov	r2, r0
 8002b06:	4b2b      	ldr	r3, [pc, #172]	; (8002bb4 <PID_control+0x18c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	f7fe f943 	bl	8000d98 <__aeabi_fmul>
 8002b12:	4603      	mov	r3, r0
 8002b14:	4619      	mov	r1, r3
 8002b16:	4620      	mov	r0, r4
 8002b18:	f7fe f834 	bl	8000b84 <__aeabi_fsub>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fe fb00 	bl	8001124 <__aeabi_f2iz>
 8002b24:	4603      	mov	r3, r0
 8002b26:	617b      	str	r3, [r7, #20]
  int motorspeedr = GRUZIK.Base_speed_R - motorspeed - R*Kr;
 8002b28:	4b20      	ldr	r3, [pc, #128]	; (8002bac <PID_control+0x184>)
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fe f8dd 	bl	8000cf0 <__aeabi_i2f>
 8002b36:	4604      	mov	r4, r0
 8002b38:	4b1b      	ldr	r3, [pc, #108]	; (8002ba8 <PID_control+0x180>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fe f8d7 	bl	8000cf0 <__aeabi_i2f>
 8002b42:	4602      	mov	r2, r0
 8002b44:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <PID_control+0x18c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	f7fe f924 	bl	8000d98 <__aeabi_fmul>
 8002b50:	4603      	mov	r3, r0
 8002b52:	4619      	mov	r1, r3
 8002b54:	4620      	mov	r0, r4
 8002b56:	f7fe f815 	bl	8000b84 <__aeabi_fsub>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fe fae1 	bl	8001124 <__aeabi_f2iz>
 8002b62:	4603      	mov	r3, r0
 8002b64:	613b      	str	r3, [r7, #16]

  if (motorspeedl > GRUZIK.Max_speed_L)
 8002b66:	4b11      	ldr	r3, [pc, #68]	; (8002bac <PID_control+0x184>)
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	dd02      	ble.n	8002b76 <PID_control+0x14e>
    motorspeedl = GRUZIK.Max_speed_L;
 8002b70:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <PID_control+0x184>)
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	617b      	str	r3, [r7, #20]
  if (motorspeedr > GRUZIK.Max_speed_R)
 8002b76:	4b0d      	ldr	r3, [pc, #52]	; (8002bac <PID_control+0x184>)
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	dd02      	ble.n	8002b86 <PID_control+0x15e>
    motorspeedr = GRUZIK.Max_speed_R;
 8002b80:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <PID_control+0x184>)
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	613b      	str	r3, [r7, #16]

	forward_brake(motorspeedr, motorspeedl);
 8002b86:	6979      	ldr	r1, [r7, #20]
 8002b88:	6938      	ldr	r0, [r7, #16]
 8002b8a:	f7ff fedb 	bl	8002944 <forward_brake>
}
 8002b8e:	bf00      	nop
 8002b90:	371c      	adds	r7, #28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd90      	pop	{r4, r7, pc}
 8002b96:	bf00      	nop
 8002b98:	200002bc 	.word	0x200002bc
 8002b9c:	200002c0 	.word	0x200002c0
 8002ba0:	200002cc 	.word	0x200002cc
 8002ba4:	200002c4 	.word	0x200002c4
 8002ba8:	200002c8 	.word	0x200002c8
 8002bac:	20000274 	.word	0x20000274
 8002bb0:	200002b4 	.word	0x200002b4
 8002bb4:	200002b8 	.word	0x200002b8

08002bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bbc:	b672      	cpsid	i
}
 8002bbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bc0:	e7fe      	b.n	8002bc0 <Error_Handler+0x8>
	...

08002bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002bca:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <HAL_MspInit+0x5c>)
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	4a14      	ldr	r2, [pc, #80]	; (8002c20 <HAL_MspInit+0x5c>)
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	6193      	str	r3, [r2, #24]
 8002bd6:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <HAL_MspInit+0x5c>)
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	60bb      	str	r3, [r7, #8]
 8002be0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002be2:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <HAL_MspInit+0x5c>)
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	4a0e      	ldr	r2, [pc, #56]	; (8002c20 <HAL_MspInit+0x5c>)
 8002be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bec:	61d3      	str	r3, [r2, #28]
 8002bee:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <HAL_MspInit+0x5c>)
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	607b      	str	r3, [r7, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <HAL_MspInit+0x60>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	4a04      	ldr	r2, [pc, #16]	; (8002c24 <HAL_MspInit+0x60>)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c16:	bf00      	nop
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr
 8002c20:	40021000 	.word	0x40021000
 8002c24:	40010000 	.word	0x40010000

08002c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c2c:	e7fe      	b.n	8002c2c <NMI_Handler+0x4>

08002c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c32:	e7fe      	b.n	8002c32 <HardFault_Handler+0x4>

08002c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c38:	e7fe      	b.n	8002c38 <MemManage_Handler+0x4>

08002c3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c3e:	e7fe      	b.n	8002c3e <BusFault_Handler+0x4>

08002c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c44:	e7fe      	b.n	8002c44 <UsageFault_Handler+0x4>

08002c46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c46:	b480      	push	{r7}
 8002c48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr

08002c52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c52:	b480      	push	{r7}
 8002c54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr

08002c5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c62:	bf00      	nop
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr

08002c6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c6e:	f000 fc85 	bl	800357c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c7c:	4802      	ldr	r0, [pc, #8]	; (8002c88 <DMA1_Channel1_IRQHandler+0x10>)
 8002c7e:	f001 fae1 	bl	8004244 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20000230 	.word	0x20000230

08002c8c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c90:	4802      	ldr	r0, [pc, #8]	; (8002c9c <TIM1_BRK_IRQHandler+0x10>)
 8002c92:	f002 fcc3 	bl	800561c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002c96:	bf00      	nop
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000374 	.word	0x20000374

08002ca0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ca4:	4802      	ldr	r0, [pc, #8]	; (8002cb0 <TIM1_UP_IRQHandler+0x10>)
 8002ca6:	f002 fcb9 	bl	800561c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000374 	.word	0x20000374

08002cb4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002cb8:	4802      	ldr	r0, [pc, #8]	; (8002cc4 <TIM1_TRG_COM_IRQHandler+0x10>)
 8002cba:	f002 fcaf 	bl	800561c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20000374 	.word	0x20000374

08002cc8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ccc:	4802      	ldr	r0, [pc, #8]	; (8002cd8 <TIM1_CC_IRQHandler+0x10>)
 8002cce:	f002 fca5 	bl	800561c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20000374 	.word	0x20000374

08002cdc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ce0:	4802      	ldr	r0, [pc, #8]	; (8002cec <USART1_IRQHandler+0x10>)
 8002ce2:	f003 fbc1 	bl	8006468 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20000494 	.word	0x20000494

08002cf0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return 1;
 8002cf4:	2301      	movs	r3, #1
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr

08002cfe <_kill>:

int _kill(int pid, int sig)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
 8002d06:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d08:	f004 f932 	bl	8006f70 <__errno>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2216      	movs	r2, #22
 8002d10:	601a      	str	r2, [r3, #0]
  return -1;
 8002d12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <_exit>:

void _exit (int status)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d26:	f04f 31ff 	mov.w	r1, #4294967295
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7ff ffe7 	bl	8002cfe <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d30:	e7fe      	b.n	8002d30 <_exit+0x12>

08002d32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b086      	sub	sp, #24
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d3e:	2300      	movs	r3, #0
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	e00a      	b.n	8002d5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d44:	f3af 8000 	nop.w
 8002d48:	4601      	mov	r1, r0
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	60ba      	str	r2, [r7, #8]
 8002d50:	b2ca      	uxtb	r2, r1
 8002d52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	3301      	adds	r3, #1
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	dbf0      	blt.n	8002d44 <_read+0x12>
  }

  return len;
 8002d62:	687b      	ldr	r3, [r7, #4]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	e009      	b.n	8002d92 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	60ba      	str	r2, [r7, #8]
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	dbf1      	blt.n	8002d7e <_write+0x12>
  }
  return len;
 8002d9a:	687b      	ldr	r3, [r7, #4]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <_close>:

int _close(int file)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002dac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bc80      	pop	{r7}
 8002db8:	4770      	bx	lr

08002dba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
 8002dc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dca:	605a      	str	r2, [r3, #4]
  return 0;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr

08002dd8 <_isatty>:

int _isatty(int file)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002de0:	2301      	movs	r3, #1
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr

08002e04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e0c:	4a14      	ldr	r2, [pc, #80]	; (8002e60 <_sbrk+0x5c>)
 8002e0e:	4b15      	ldr	r3, [pc, #84]	; (8002e64 <_sbrk+0x60>)
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e18:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <_sbrk+0x64>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d102      	bne.n	8002e26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e20:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <_sbrk+0x64>)
 8002e22:	4a12      	ldr	r2, [pc, #72]	; (8002e6c <_sbrk+0x68>)
 8002e24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e26:	4b10      	ldr	r3, [pc, #64]	; (8002e68 <_sbrk+0x64>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d207      	bcs.n	8002e44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e34:	f004 f89c 	bl	8006f70 <__errno>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	220c      	movs	r2, #12
 8002e3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e42:	e009      	b.n	8002e58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e44:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <_sbrk+0x64>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e4a:	4b07      	ldr	r3, [pc, #28]	; (8002e68 <_sbrk+0x64>)
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4413      	add	r3, r2
 8002e52:	4a05      	ldr	r2, [pc, #20]	; (8002e68 <_sbrk+0x64>)
 8002e54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e56:	68fb      	ldr	r3, [r7, #12]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	20005000 	.word	0x20005000
 8002e64:	00000400 	.word	0x00000400
 8002e68:	20000370 	.word	0x20000370
 8002e6c:	20000538 	.word	0x20000538

08002e70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e74:	bf00      	nop
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr

08002e7c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e82:	f107 0308 	add.w	r3, r7, #8
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	605a      	str	r2, [r3, #4]
 8002e8c:	609a      	str	r2, [r3, #8]
 8002e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e90:	463b      	mov	r3, r7
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002e98:	4b1f      	ldr	r3, [pc, #124]	; (8002f18 <MX_TIM1_Init+0x9c>)
 8002e9a:	4a20      	ldr	r2, [pc, #128]	; (8002f1c <MX_TIM1_Init+0xa0>)
 8002e9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9000;
 8002e9e:	4b1e      	ldr	r3, [pc, #120]	; (8002f18 <MX_TIM1_Init+0x9c>)
 8002ea0:	f242 3228 	movw	r2, #9000	; 0x2328
 8002ea4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002ea6:	4b1c      	ldr	r3, [pc, #112]	; (8002f18 <MX_TIM1_Init+0x9c>)
 8002ea8:	2210      	movs	r2, #16
 8002eaa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002eac:	4b1a      	ldr	r3, [pc, #104]	; (8002f18 <MX_TIM1_Init+0x9c>)
 8002eae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002eb2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eb4:	4b18      	ldr	r3, [pc, #96]	; (8002f18 <MX_TIM1_Init+0x9c>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002eba:	4b17      	ldr	r3, [pc, #92]	; (8002f18 <MX_TIM1_Init+0x9c>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ec0:	4b15      	ldr	r3, [pc, #84]	; (8002f18 <MX_TIM1_Init+0x9c>)
 8002ec2:	2280      	movs	r2, #128	; 0x80
 8002ec4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ec6:	4814      	ldr	r0, [pc, #80]	; (8002f18 <MX_TIM1_Init+0x9c>)
 8002ec8:	f002 f96a 	bl	80051a0 <HAL_TIM_Base_Init>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002ed2:	f7ff fe71 	bl	8002bb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ed6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002edc:	f107 0308 	add.w	r3, r7, #8
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	480d      	ldr	r0, [pc, #52]	; (8002f18 <MX_TIM1_Init+0x9c>)
 8002ee4:	f002 fdc0 	bl	8005a68 <HAL_TIM_ConfigClockSource>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002eee:	f7ff fe63 	bl	8002bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002efa:	463b      	mov	r3, r7
 8002efc:	4619      	mov	r1, r3
 8002efe:	4806      	ldr	r0, [pc, #24]	; (8002f18 <MX_TIM1_Init+0x9c>)
 8002f00:	f003 f94a 	bl	8006198 <HAL_TIMEx_MasterConfigSynchronization>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002f0a:	f7ff fe55 	bl	8002bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002f0e:	bf00      	nop
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20000374 	.word	0x20000374
 8002f1c:	40012c00 	.word	0x40012c00

08002f20 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f26:	f107 0308 	add.w	r3, r7, #8
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	605a      	str	r2, [r3, #4]
 8002f30:	609a      	str	r2, [r3, #8]
 8002f32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f34:	463b      	mov	r3, r7
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f3c:	4b1d      	ldr	r3, [pc, #116]	; (8002fb4 <MX_TIM2_Init+0x94>)
 8002f3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 8002f44:	4b1b      	ldr	r3, [pc, #108]	; (8002fb4 <MX_TIM2_Init+0x94>)
 8002f46:	2209      	movs	r2, #9
 8002f48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f4a:	4b1a      	ldr	r3, [pc, #104]	; (8002fb4 <MX_TIM2_Init+0x94>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002f50:	4b18      	ldr	r3, [pc, #96]	; (8002fb4 <MX_TIM2_Init+0x94>)
 8002f52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f58:	4b16      	ldr	r3, [pc, #88]	; (8002fb4 <MX_TIM2_Init+0x94>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f5e:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <MX_TIM2_Init+0x94>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f64:	4813      	ldr	r0, [pc, #76]	; (8002fb4 <MX_TIM2_Init+0x94>)
 8002f66:	f002 f91b 	bl	80051a0 <HAL_TIM_Base_Init>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002f70:	f7ff fe22 	bl	8002bb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f7a:	f107 0308 	add.w	r3, r7, #8
 8002f7e:	4619      	mov	r1, r3
 8002f80:	480c      	ldr	r0, [pc, #48]	; (8002fb4 <MX_TIM2_Init+0x94>)
 8002f82:	f002 fd71 	bl	8005a68 <HAL_TIM_ConfigClockSource>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002f8c:	f7ff fe14 	bl	8002bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f90:	2300      	movs	r3, #0
 8002f92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f94:	2300      	movs	r3, #0
 8002f96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f98:	463b      	mov	r3, r7
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4805      	ldr	r0, [pc, #20]	; (8002fb4 <MX_TIM2_Init+0x94>)
 8002f9e:	f003 f8fb 	bl	8006198 <HAL_TIMEx_MasterConfigSynchronization>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002fa8:	f7ff fe06 	bl	8002bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002fac:	bf00      	nop
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	200003bc 	.word	0x200003bc

08002fb8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fbe:	f107 0308 	add.w	r3, r7, #8
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	605a      	str	r2, [r3, #4]
 8002fc8:	609a      	str	r2, [r3, #8]
 8002fca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fcc:	463b      	mov	r3, r7
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002fd4:	4b1d      	ldr	r3, [pc, #116]	; (800304c <MX_TIM3_Init+0x94>)
 8002fd6:	4a1e      	ldr	r2, [pc, #120]	; (8003050 <MX_TIM3_Init+0x98>)
 8002fd8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9000;
 8002fda:	4b1c      	ldr	r3, [pc, #112]	; (800304c <MX_TIM3_Init+0x94>)
 8002fdc:	f242 3228 	movw	r2, #9000	; 0x2328
 8002fe0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fe2:	4b1a      	ldr	r3, [pc, #104]	; (800304c <MX_TIM3_Init+0x94>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002fe8:	4b18      	ldr	r3, [pc, #96]	; (800304c <MX_TIM3_Init+0x94>)
 8002fea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ff0:	4b16      	ldr	r3, [pc, #88]	; (800304c <MX_TIM3_Init+0x94>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ff6:	4b15      	ldr	r3, [pc, #84]	; (800304c <MX_TIM3_Init+0x94>)
 8002ff8:	2280      	movs	r2, #128	; 0x80
 8002ffa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ffc:	4813      	ldr	r0, [pc, #76]	; (800304c <MX_TIM3_Init+0x94>)
 8002ffe:	f002 f8cf 	bl	80051a0 <HAL_TIM_Base_Init>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003008:	f7ff fdd6 	bl	8002bb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800300c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003010:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003012:	f107 0308 	add.w	r3, r7, #8
 8003016:	4619      	mov	r1, r3
 8003018:	480c      	ldr	r0, [pc, #48]	; (800304c <MX_TIM3_Init+0x94>)
 800301a:	f002 fd25 	bl	8005a68 <HAL_TIM_ConfigClockSource>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003024:	f7ff fdc8 	bl	8002bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003028:	2300      	movs	r3, #0
 800302a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800302c:	2300      	movs	r3, #0
 800302e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003030:	463b      	mov	r3, r7
 8003032:	4619      	mov	r1, r3
 8003034:	4805      	ldr	r0, [pc, #20]	; (800304c <MX_TIM3_Init+0x94>)
 8003036:	f003 f8af 	bl	8006198 <HAL_TIMEx_MasterConfigSynchronization>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003040:	f7ff fdba 	bl	8002bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003044:	bf00      	nop
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	20000404 	.word	0x20000404
 8003050:	40000400 	.word	0x40000400

08003054 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08e      	sub	sp, #56	; 0x38
 8003058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800305a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	605a      	str	r2, [r3, #4]
 8003064:	609a      	str	r2, [r3, #8]
 8003066:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003068:	f107 0320 	add.w	r3, r7, #32
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003072:	1d3b      	adds	r3, r7, #4
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	605a      	str	r2, [r3, #4]
 800307a:	609a      	str	r2, [r3, #8]
 800307c:	60da      	str	r2, [r3, #12]
 800307e:	611a      	str	r2, [r3, #16]
 8003080:	615a      	str	r2, [r3, #20]
 8003082:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003084:	4b3d      	ldr	r3, [pc, #244]	; (800317c <MX_TIM4_Init+0x128>)
 8003086:	4a3e      	ldr	r2, [pc, #248]	; (8003180 <MX_TIM4_Init+0x12c>)
 8003088:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 800308a:	4b3c      	ldr	r3, [pc, #240]	; (800317c <MX_TIM4_Init+0x128>)
 800308c:	220a      	movs	r2, #10
 800308e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003090:	4b3a      	ldr	r3, [pc, #232]	; (800317c <MX_TIM4_Init+0x128>)
 8003092:	2200      	movs	r2, #0
 8003094:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8003096:	4b39      	ldr	r3, [pc, #228]	; (800317c <MX_TIM4_Init+0x128>)
 8003098:	f240 32e7 	movw	r2, #999	; 0x3e7
 800309c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800309e:	4b37      	ldr	r3, [pc, #220]	; (800317c <MX_TIM4_Init+0x128>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030a4:	4b35      	ldr	r3, [pc, #212]	; (800317c <MX_TIM4_Init+0x128>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80030aa:	4834      	ldr	r0, [pc, #208]	; (800317c <MX_TIM4_Init+0x128>)
 80030ac:	f002 f878 	bl	80051a0 <HAL_TIM_Base_Init>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80030b6:	f7ff fd7f 	bl	8002bb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80030c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030c4:	4619      	mov	r1, r3
 80030c6:	482d      	ldr	r0, [pc, #180]	; (800317c <MX_TIM4_Init+0x128>)
 80030c8:	f002 fcce 	bl	8005a68 <HAL_TIM_ConfigClockSource>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80030d2:	f7ff fd71 	bl	8002bb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80030d6:	4829      	ldr	r0, [pc, #164]	; (800317c <MX_TIM4_Init+0x128>)
 80030d8:	f002 f9a6 	bl	8005428 <HAL_TIM_PWM_Init>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80030e2:	f7ff fd69 	bl	8002bb8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80030e6:	4825      	ldr	r0, [pc, #148]	; (800317c <MX_TIM4_Init+0x128>)
 80030e8:	f002 f946 	bl	8005378 <HAL_TIM_OC_Init>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 80030f2:	f7ff fd61 	bl	8002bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030f6:	2300      	movs	r3, #0
 80030f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030fa:	2300      	movs	r3, #0
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80030fe:	f107 0320 	add.w	r3, r7, #32
 8003102:	4619      	mov	r1, r3
 8003104:	481d      	ldr	r0, [pc, #116]	; (800317c <MX_TIM4_Init+0x128>)
 8003106:	f003 f847 	bl	8006198 <HAL_TIMEx_MasterConfigSynchronization>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8003110:	f7ff fd52 	bl	8002bb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003114:	2360      	movs	r3, #96	; 0x60
 8003116:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003118:	2300      	movs	r3, #0
 800311a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800311c:	2300      	movs	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003124:	1d3b      	adds	r3, r7, #4
 8003126:	2204      	movs	r2, #4
 8003128:	4619      	mov	r1, r3
 800312a:	4814      	ldr	r0, [pc, #80]	; (800317c <MX_TIM4_Init+0x128>)
 800312c:	f002 fbda 	bl	80058e4 <HAL_TIM_PWM_ConfigChannel>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 8003136:	f7ff fd3f 	bl	8002bb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800313a:	2300      	movs	r3, #0
 800313c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800313e:	1d3b      	adds	r3, r7, #4
 8003140:	2208      	movs	r2, #8
 8003142:	4619      	mov	r1, r3
 8003144:	480d      	ldr	r0, [pc, #52]	; (800317c <MX_TIM4_Init+0x128>)
 8003146:	f002 fb71 	bl	800582c <HAL_TIM_OC_ConfigChannel>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 8003150:	f7ff fd32 	bl	8002bb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003154:	2360      	movs	r3, #96	; 0x60
 8003156:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003158:	1d3b      	adds	r3, r7, #4
 800315a:	220c      	movs	r2, #12
 800315c:	4619      	mov	r1, r3
 800315e:	4807      	ldr	r0, [pc, #28]	; (800317c <MX_TIM4_Init+0x128>)
 8003160:	f002 fbc0 	bl	80058e4 <HAL_TIM_PWM_ConfigChannel>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 800316a:	f7ff fd25 	bl	8002bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800316e:	4803      	ldr	r0, [pc, #12]	; (800317c <MX_TIM4_Init+0x128>)
 8003170:	f000 f880 	bl	8003274 <HAL_TIM_MspPostInit>

}
 8003174:	bf00      	nop
 8003176:	3738      	adds	r7, #56	; 0x38
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	2000044c 	.word	0x2000044c
 8003180:	40000800 	.word	0x40000800

08003184 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a34      	ldr	r2, [pc, #208]	; (8003264 <HAL_TIM_Base_MspInit+0xe0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d12c      	bne.n	80031f0 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003196:	4b34      	ldr	r3, [pc, #208]	; (8003268 <HAL_TIM_Base_MspInit+0xe4>)
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	4a33      	ldr	r2, [pc, #204]	; (8003268 <HAL_TIM_Base_MspInit+0xe4>)
 800319c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031a0:	6193      	str	r3, [r2, #24]
 80031a2:	4b31      	ldr	r3, [pc, #196]	; (8003268 <HAL_TIM_Base_MspInit+0xe4>)
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80031ae:	2200      	movs	r2, #0
 80031b0:	2100      	movs	r1, #0
 80031b2:	2018      	movs	r0, #24
 80031b4:	f000 fea1 	bl	8003efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80031b8:	2018      	movs	r0, #24
 80031ba:	f000 feba 	bl	8003f32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80031be:	2200      	movs	r2, #0
 80031c0:	2100      	movs	r1, #0
 80031c2:	2019      	movs	r0, #25
 80031c4:	f000 fe99 	bl	8003efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80031c8:	2019      	movs	r0, #25
 80031ca:	f000 feb2 	bl	8003f32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80031ce:	2200      	movs	r2, #0
 80031d0:	2100      	movs	r1, #0
 80031d2:	201a      	movs	r0, #26
 80031d4:	f000 fe91 	bl	8003efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80031d8:	201a      	movs	r0, #26
 80031da:	f000 feaa 	bl	8003f32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80031de:	2200      	movs	r2, #0
 80031e0:	2100      	movs	r1, #0
 80031e2:	201b      	movs	r0, #27
 80031e4:	f000 fe89 	bl	8003efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80031e8:	201b      	movs	r0, #27
 80031ea:	f000 fea2 	bl	8003f32 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80031ee:	e034      	b.n	800325a <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM2)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f8:	d10c      	bne.n	8003214 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031fa:	4b1b      	ldr	r3, [pc, #108]	; (8003268 <HAL_TIM_Base_MspInit+0xe4>)
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	4a1a      	ldr	r2, [pc, #104]	; (8003268 <HAL_TIM_Base_MspInit+0xe4>)
 8003200:	f043 0301 	orr.w	r3, r3, #1
 8003204:	61d3      	str	r3, [r2, #28]
 8003206:	4b18      	ldr	r3, [pc, #96]	; (8003268 <HAL_TIM_Base_MspInit+0xe4>)
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	693b      	ldr	r3, [r7, #16]
}
 8003212:	e022      	b.n	800325a <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a14      	ldr	r2, [pc, #80]	; (800326c <HAL_TIM_Base_MspInit+0xe8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d10c      	bne.n	8003238 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800321e:	4b12      	ldr	r3, [pc, #72]	; (8003268 <HAL_TIM_Base_MspInit+0xe4>)
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	4a11      	ldr	r2, [pc, #68]	; (8003268 <HAL_TIM_Base_MspInit+0xe4>)
 8003224:	f043 0302 	orr.w	r3, r3, #2
 8003228:	61d3      	str	r3, [r2, #28]
 800322a:	4b0f      	ldr	r3, [pc, #60]	; (8003268 <HAL_TIM_Base_MspInit+0xe4>)
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]
}
 8003236:	e010      	b.n	800325a <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a0c      	ldr	r2, [pc, #48]	; (8003270 <HAL_TIM_Base_MspInit+0xec>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d10b      	bne.n	800325a <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003242:	4b09      	ldr	r3, [pc, #36]	; (8003268 <HAL_TIM_Base_MspInit+0xe4>)
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	4a08      	ldr	r2, [pc, #32]	; (8003268 <HAL_TIM_Base_MspInit+0xe4>)
 8003248:	f043 0304 	orr.w	r3, r3, #4
 800324c:	61d3      	str	r3, [r2, #28]
 800324e:	4b06      	ldr	r3, [pc, #24]	; (8003268 <HAL_TIM_Base_MspInit+0xe4>)
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	60bb      	str	r3, [r7, #8]
 8003258:	68bb      	ldr	r3, [r7, #8]
}
 800325a:	bf00      	nop
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40012c00 	.word	0x40012c00
 8003268:	40021000 	.word	0x40021000
 800326c:	40000400 	.word	0x40000400
 8003270:	40000800 	.word	0x40000800

08003274 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800327c:	f107 0310 	add.w	r3, r7, #16
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	605a      	str	r2, [r3, #4]
 8003286:	609a      	str	r2, [r3, #8]
 8003288:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a10      	ldr	r2, [pc, #64]	; (80032d0 <HAL_TIM_MspPostInit+0x5c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d118      	bne.n	80032c6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003294:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <HAL_TIM_MspPostInit+0x60>)
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	4a0e      	ldr	r2, [pc, #56]	; (80032d4 <HAL_TIM_MspPostInit+0x60>)
 800329a:	f043 0308 	orr.w	r3, r3, #8
 800329e:	6193      	str	r3, [r2, #24]
 80032a0:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <HAL_TIM_MspPostInit+0x60>)
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80032ac:	f44f 7360 	mov.w	r3, #896	; 0x380
 80032b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b2:	2302      	movs	r3, #2
 80032b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b6:	2302      	movs	r3, #2
 80032b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ba:	f107 0310 	add.w	r3, r7, #16
 80032be:	4619      	mov	r1, r3
 80032c0:	4805      	ldr	r0, [pc, #20]	; (80032d8 <HAL_TIM_MspPostInit+0x64>)
 80032c2:	f001 f8f3 	bl	80044ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80032c6:	bf00      	nop
 80032c8:	3720      	adds	r7, #32
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40000800 	.word	0x40000800
 80032d4:	40021000 	.word	0x40021000
 80032d8:	40010c00 	.word	0x40010c00

080032dc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80032e0:	4b11      	ldr	r3, [pc, #68]	; (8003328 <MX_USART1_UART_Init+0x4c>)
 80032e2:	4a12      	ldr	r2, [pc, #72]	; (800332c <MX_USART1_UART_Init+0x50>)
 80032e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80032e6:	4b10      	ldr	r3, [pc, #64]	; (8003328 <MX_USART1_UART_Init+0x4c>)
 80032e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80032ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80032ee:	4b0e      	ldr	r3, [pc, #56]	; (8003328 <MX_USART1_UART_Init+0x4c>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80032f4:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <MX_USART1_UART_Init+0x4c>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80032fa:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <MX_USART1_UART_Init+0x4c>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003300:	4b09      	ldr	r3, [pc, #36]	; (8003328 <MX_USART1_UART_Init+0x4c>)
 8003302:	220c      	movs	r2, #12
 8003304:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003306:	4b08      	ldr	r3, [pc, #32]	; (8003328 <MX_USART1_UART_Init+0x4c>)
 8003308:	2200      	movs	r2, #0
 800330a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800330c:	4b06      	ldr	r3, [pc, #24]	; (8003328 <MX_USART1_UART_Init+0x4c>)
 800330e:	2200      	movs	r2, #0
 8003310:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003312:	4805      	ldr	r0, [pc, #20]	; (8003328 <MX_USART1_UART_Init+0x4c>)
 8003314:	f002 ffb0 	bl	8006278 <HAL_UART_Init>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800331e:	f7ff fc4b 	bl	8002bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003322:	bf00      	nop
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000494 	.word	0x20000494
 800332c:	40013800 	.word	0x40013800

08003330 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003334:	4b11      	ldr	r3, [pc, #68]	; (800337c <MX_USART3_UART_Init+0x4c>)
 8003336:	4a12      	ldr	r2, [pc, #72]	; (8003380 <MX_USART3_UART_Init+0x50>)
 8003338:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800333a:	4b10      	ldr	r3, [pc, #64]	; (800337c <MX_USART3_UART_Init+0x4c>)
 800333c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003340:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003342:	4b0e      	ldr	r3, [pc, #56]	; (800337c <MX_USART3_UART_Init+0x4c>)
 8003344:	2200      	movs	r2, #0
 8003346:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003348:	4b0c      	ldr	r3, [pc, #48]	; (800337c <MX_USART3_UART_Init+0x4c>)
 800334a:	2200      	movs	r2, #0
 800334c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800334e:	4b0b      	ldr	r3, [pc, #44]	; (800337c <MX_USART3_UART_Init+0x4c>)
 8003350:	2200      	movs	r2, #0
 8003352:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003354:	4b09      	ldr	r3, [pc, #36]	; (800337c <MX_USART3_UART_Init+0x4c>)
 8003356:	220c      	movs	r2, #12
 8003358:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800335a:	4b08      	ldr	r3, [pc, #32]	; (800337c <MX_USART3_UART_Init+0x4c>)
 800335c:	2200      	movs	r2, #0
 800335e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003360:	4b06      	ldr	r3, [pc, #24]	; (800337c <MX_USART3_UART_Init+0x4c>)
 8003362:	2200      	movs	r2, #0
 8003364:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003366:	4805      	ldr	r0, [pc, #20]	; (800337c <MX_USART3_UART_Init+0x4c>)
 8003368:	f002 ff86 	bl	8006278 <HAL_UART_Init>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003372:	f7ff fc21 	bl	8002bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003376:	bf00      	nop
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	200004dc 	.word	0x200004dc
 8003380:	40004800 	.word	0x40004800

08003384 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08a      	sub	sp, #40	; 0x28
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800338c:	f107 0318 	add.w	r3, r7, #24
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	605a      	str	r2, [r3, #4]
 8003396:	609a      	str	r2, [r3, #8]
 8003398:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a3c      	ldr	r2, [pc, #240]	; (8003490 <HAL_UART_MspInit+0x10c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d13a      	bne.n	800341a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033a4:	4b3b      	ldr	r3, [pc, #236]	; (8003494 <HAL_UART_MspInit+0x110>)
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	4a3a      	ldr	r2, [pc, #232]	; (8003494 <HAL_UART_MspInit+0x110>)
 80033aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033ae:	6193      	str	r3, [r2, #24]
 80033b0:	4b38      	ldr	r3, [pc, #224]	; (8003494 <HAL_UART_MspInit+0x110>)
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033bc:	4b35      	ldr	r3, [pc, #212]	; (8003494 <HAL_UART_MspInit+0x110>)
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	4a34      	ldr	r2, [pc, #208]	; (8003494 <HAL_UART_MspInit+0x110>)
 80033c2:	f043 0304 	orr.w	r3, r3, #4
 80033c6:	6193      	str	r3, [r2, #24]
 80033c8:	4b32      	ldr	r3, [pc, #200]	; (8003494 <HAL_UART_MspInit+0x110>)
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	613b      	str	r3, [r7, #16]
 80033d2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80033d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033da:	2302      	movs	r3, #2
 80033dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033de:	2303      	movs	r3, #3
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e2:	f107 0318 	add.w	r3, r7, #24
 80033e6:	4619      	mov	r1, r3
 80033e8:	482b      	ldr	r0, [pc, #172]	; (8003498 <HAL_UART_MspInit+0x114>)
 80033ea:	f001 f85f 	bl	80044ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80033ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033f4:	2300      	movs	r3, #0
 80033f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033fc:	f107 0318 	add.w	r3, r7, #24
 8003400:	4619      	mov	r1, r3
 8003402:	4825      	ldr	r0, [pc, #148]	; (8003498 <HAL_UART_MspInit+0x114>)
 8003404:	f001 f852 	bl	80044ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003408:	2200      	movs	r2, #0
 800340a:	2100      	movs	r1, #0
 800340c:	2025      	movs	r0, #37	; 0x25
 800340e:	f000 fd74 	bl	8003efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003412:	2025      	movs	r0, #37	; 0x25
 8003414:	f000 fd8d 	bl	8003f32 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003418:	e036      	b.n	8003488 <HAL_UART_MspInit+0x104>
  else if(uartHandle->Instance==USART3)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a1f      	ldr	r2, [pc, #124]	; (800349c <HAL_UART_MspInit+0x118>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d131      	bne.n	8003488 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003424:	4b1b      	ldr	r3, [pc, #108]	; (8003494 <HAL_UART_MspInit+0x110>)
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	4a1a      	ldr	r2, [pc, #104]	; (8003494 <HAL_UART_MspInit+0x110>)
 800342a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800342e:	61d3      	str	r3, [r2, #28]
 8003430:	4b18      	ldr	r3, [pc, #96]	; (8003494 <HAL_UART_MspInit+0x110>)
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800343c:	4b15      	ldr	r3, [pc, #84]	; (8003494 <HAL_UART_MspInit+0x110>)
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	4a14      	ldr	r2, [pc, #80]	; (8003494 <HAL_UART_MspInit+0x110>)
 8003442:	f043 0308 	orr.w	r3, r3, #8
 8003446:	6193      	str	r3, [r2, #24]
 8003448:	4b12      	ldr	r3, [pc, #72]	; (8003494 <HAL_UART_MspInit+0x110>)
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	f003 0308 	and.w	r3, r3, #8
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345a:	2302      	movs	r3, #2
 800345c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800345e:	2303      	movs	r3, #3
 8003460:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003462:	f107 0318 	add.w	r3, r7, #24
 8003466:	4619      	mov	r1, r3
 8003468:	480d      	ldr	r0, [pc, #52]	; (80034a0 <HAL_UART_MspInit+0x11c>)
 800346a:	f001 f81f 	bl	80044ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800346e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003474:	2300      	movs	r3, #0
 8003476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003478:	2300      	movs	r3, #0
 800347a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800347c:	f107 0318 	add.w	r3, r7, #24
 8003480:	4619      	mov	r1, r3
 8003482:	4807      	ldr	r0, [pc, #28]	; (80034a0 <HAL_UART_MspInit+0x11c>)
 8003484:	f001 f812 	bl	80044ac <HAL_GPIO_Init>
}
 8003488:	bf00      	nop
 800348a:	3728      	adds	r7, #40	; 0x28
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40013800 	.word	0x40013800
 8003494:	40021000 	.word	0x40021000
 8003498:	40010800 	.word	0x40010800
 800349c:	40004800 	.word	0x40004800
 80034a0:	40010c00 	.word	0x40010c00

080034a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80034a4:	f7ff fce4 	bl	8002e70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034a8:	480b      	ldr	r0, [pc, #44]	; (80034d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80034aa:	490c      	ldr	r1, [pc, #48]	; (80034dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80034ac:	4a0c      	ldr	r2, [pc, #48]	; (80034e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80034ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034b0:	e002      	b.n	80034b8 <LoopCopyDataInit>

080034b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034b6:	3304      	adds	r3, #4

080034b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034bc:	d3f9      	bcc.n	80034b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034be:	4a09      	ldr	r2, [pc, #36]	; (80034e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80034c0:	4c09      	ldr	r4, [pc, #36]	; (80034e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80034c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034c4:	e001      	b.n	80034ca <LoopFillZerobss>

080034c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034c8:	3204      	adds	r2, #4

080034ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034cc:	d3fb      	bcc.n	80034c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034ce:	f003 fd55 	bl	8006f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80034d2:	f7fe fe2f 	bl	8002134 <main>
  bx lr
 80034d6:	4770      	bx	lr
  ldr r0, =_sdata
 80034d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034dc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80034e0:	0800ba20 	.word	0x0800ba20
  ldr r2, =_sbss
 80034e4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80034e8:	20000538 	.word	0x20000538

080034ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80034ec:	e7fe      	b.n	80034ec <ADC1_2_IRQHandler>
	...

080034f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034f4:	4b08      	ldr	r3, [pc, #32]	; (8003518 <HAL_Init+0x28>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a07      	ldr	r2, [pc, #28]	; (8003518 <HAL_Init+0x28>)
 80034fa:	f043 0310 	orr.w	r3, r3, #16
 80034fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003500:	2003      	movs	r0, #3
 8003502:	f000 fcef 	bl	8003ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003506:	200f      	movs	r0, #15
 8003508:	f000 f808 	bl	800351c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800350c:	f7ff fb5a 	bl	8002bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40022000 	.word	0x40022000

0800351c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003524:	4b12      	ldr	r3, [pc, #72]	; (8003570 <HAL_InitTick+0x54>)
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	4b12      	ldr	r3, [pc, #72]	; (8003574 <HAL_InitTick+0x58>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	4619      	mov	r1, r3
 800352e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003532:	fbb3 f3f1 	udiv	r3, r3, r1
 8003536:	fbb2 f3f3 	udiv	r3, r2, r3
 800353a:	4618      	mov	r0, r3
 800353c:	f000 fd07 	bl	8003f4e <HAL_SYSTICK_Config>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e00e      	b.n	8003568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b0f      	cmp	r3, #15
 800354e:	d80a      	bhi.n	8003566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003550:	2200      	movs	r2, #0
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	f04f 30ff 	mov.w	r0, #4294967295
 8003558:	f000 fccf 	bl	8003efa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800355c:	4a06      	ldr	r2, [pc, #24]	; (8003578 <HAL_InitTick+0x5c>)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003562:	2300      	movs	r3, #0
 8003564:	e000      	b.n	8003568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
}
 8003568:	4618      	mov	r0, r3
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	20000004 	.word	0x20000004
 8003574:	2000000c 	.word	0x2000000c
 8003578:	20000008 	.word	0x20000008

0800357c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003580:	4b05      	ldr	r3, [pc, #20]	; (8003598 <HAL_IncTick+0x1c>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	461a      	mov	r2, r3
 8003586:	4b05      	ldr	r3, [pc, #20]	; (800359c <HAL_IncTick+0x20>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4413      	add	r3, r2
 800358c:	4a03      	ldr	r2, [pc, #12]	; (800359c <HAL_IncTick+0x20>)
 800358e:	6013      	str	r3, [r2, #0]
}
 8003590:	bf00      	nop
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr
 8003598:	2000000c 	.word	0x2000000c
 800359c:	20000524 	.word	0x20000524

080035a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  return uwTick;
 80035a4:	4b02      	ldr	r3, [pc, #8]	; (80035b0 <HAL_GetTick+0x10>)
 80035a6:	681b      	ldr	r3, [r3, #0]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr
 80035b0:	20000524 	.word	0x20000524

080035b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035bc:	2300      	movs	r3, #0
 80035be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e0be      	b.n	8003754 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d109      	bne.n	80035f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7fe fc78 	bl	8001ee8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 faff 	bl	8003bfc <ADC_ConversionStop_Disable>
 80035fe:	4603      	mov	r3, r0
 8003600:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003606:	f003 0310 	and.w	r3, r3, #16
 800360a:	2b00      	cmp	r3, #0
 800360c:	f040 8099 	bne.w	8003742 <HAL_ADC_Init+0x18e>
 8003610:	7dfb      	ldrb	r3, [r7, #23]
 8003612:	2b00      	cmp	r3, #0
 8003614:	f040 8095 	bne.w	8003742 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003620:	f023 0302 	bic.w	r3, r3, #2
 8003624:	f043 0202 	orr.w	r2, r3, #2
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003634:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	7b1b      	ldrb	r3, [r3, #12]
 800363a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800363c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	4313      	orrs	r3, r2
 8003642:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800364c:	d003      	beq.n	8003656 <HAL_ADC_Init+0xa2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d102      	bne.n	800365c <HAL_ADC_Init+0xa8>
 8003656:	f44f 7380 	mov.w	r3, #256	; 0x100
 800365a:	e000      	b.n	800365e <HAL_ADC_Init+0xaa>
 800365c:	2300      	movs	r3, #0
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	7d1b      	ldrb	r3, [r3, #20]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d119      	bne.n	80036a0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	7b1b      	ldrb	r3, [r3, #12]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d109      	bne.n	8003688 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	3b01      	subs	r3, #1
 800367a:	035a      	lsls	r2, r3, #13
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4313      	orrs	r3, r2
 8003680:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003684:	613b      	str	r3, [r7, #16]
 8003686:	e00b      	b.n	80036a0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368c:	f043 0220 	orr.w	r2, r3, #32
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003698:	f043 0201 	orr.w	r2, r3, #1
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	4b28      	ldr	r3, [pc, #160]	; (800375c <HAL_ADC_Init+0x1a8>)
 80036bc:	4013      	ands	r3, r2
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6812      	ldr	r2, [r2, #0]
 80036c2:	68b9      	ldr	r1, [r7, #8]
 80036c4:	430b      	orrs	r3, r1
 80036c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036d0:	d003      	beq.n	80036da <HAL_ADC_Init+0x126>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d104      	bne.n	80036e4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	3b01      	subs	r3, #1
 80036e0:	051b      	lsls	r3, r3, #20
 80036e2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	4b18      	ldr	r3, [pc, #96]	; (8003760 <HAL_ADC_Init+0x1ac>)
 8003700:	4013      	ands	r3, r2
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	429a      	cmp	r2, r3
 8003706:	d10b      	bne.n	8003720 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003712:	f023 0303 	bic.w	r3, r3, #3
 8003716:	f043 0201 	orr.w	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800371e:	e018      	b.n	8003752 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003724:	f023 0312 	bic.w	r3, r3, #18
 8003728:	f043 0210 	orr.w	r2, r3, #16
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003734:	f043 0201 	orr.w	r2, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003740:	e007      	b.n	8003752 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003746:	f043 0210 	orr.w	r2, r3, #16
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003752:	7dfb      	ldrb	r3, [r7, #23]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3718      	adds	r7, #24
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	ffe1f7fd 	.word	0xffe1f7fd
 8003760:	ff1f0efe 	.word	0xff1f0efe

08003764 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003770:	2300      	movs	r3, #0
 8003772:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a64      	ldr	r2, [pc, #400]	; (800390c <HAL_ADC_Start_DMA+0x1a8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d004      	beq.n	8003788 <HAL_ADC_Start_DMA+0x24>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a63      	ldr	r2, [pc, #396]	; (8003910 <HAL_ADC_Start_DMA+0x1ac>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d106      	bne.n	8003796 <HAL_ADC_Start_DMA+0x32>
 8003788:	4b60      	ldr	r3, [pc, #384]	; (800390c <HAL_ADC_Start_DMA+0x1a8>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003790:	2b00      	cmp	r3, #0
 8003792:	f040 80b3 	bne.w	80038fc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_ADC_Start_DMA+0x40>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e0ae      	b.n	8003902 <HAL_ADC_Start_DMA+0x19e>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 f9cb 	bl	8003b48 <ADC_Enable>
 80037b2:	4603      	mov	r3, r0
 80037b4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80037b6:	7dfb      	ldrb	r3, [r7, #23]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f040 809a 	bne.w	80038f2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037c6:	f023 0301 	bic.w	r3, r3, #1
 80037ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a4e      	ldr	r2, [pc, #312]	; (8003910 <HAL_ADC_Start_DMA+0x1ac>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d105      	bne.n	80037e8 <HAL_ADC_Start_DMA+0x84>
 80037dc:	4b4b      	ldr	r3, [pc, #300]	; (800390c <HAL_ADC_Start_DMA+0x1a8>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d115      	bne.n	8003814 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d026      	beq.n	8003850 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003806:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800380a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003812:	e01d      	b.n	8003850 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003818:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a39      	ldr	r2, [pc, #228]	; (800390c <HAL_ADC_Start_DMA+0x1a8>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d004      	beq.n	8003834 <HAL_ADC_Start_DMA+0xd0>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a38      	ldr	r2, [pc, #224]	; (8003910 <HAL_ADC_Start_DMA+0x1ac>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d10d      	bne.n	8003850 <HAL_ADC_Start_DMA+0xec>
 8003834:	4b35      	ldr	r3, [pc, #212]	; (800390c <HAL_ADC_Start_DMA+0x1a8>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800383c:	2b00      	cmp	r3, #0
 800383e:	d007      	beq.n	8003850 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003844:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003848:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d006      	beq.n	800386a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003860:	f023 0206 	bic.w	r2, r3, #6
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	62da      	str	r2, [r3, #44]	; 0x2c
 8003868:	e002      	b.n	8003870 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	4a25      	ldr	r2, [pc, #148]	; (8003914 <HAL_ADC_Start_DMA+0x1b0>)
 800387e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	4a24      	ldr	r2, [pc, #144]	; (8003918 <HAL_ADC_Start_DMA+0x1b4>)
 8003886:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	4a23      	ldr	r2, [pc, #140]	; (800391c <HAL_ADC_Start_DMA+0x1b8>)
 800388e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f06f 0202 	mvn.w	r2, #2
 8003898:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038a8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a18      	ldr	r0, [r3, #32]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	334c      	adds	r3, #76	; 0x4c
 80038b4:	4619      	mov	r1, r3
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f000 fbaf 	bl	800401c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80038c8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80038cc:	d108      	bne.n	80038e0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80038dc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80038de:	e00f      	b.n	8003900 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689a      	ldr	r2, [r3, #8]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80038ee:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80038f0:	e006      	b.n	8003900 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80038fa:	e001      	b.n	8003900 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003900:	7dfb      	ldrb	r3, [r7, #23]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	40012400 	.word	0x40012400
 8003910:	40012800 	.word	0x40012800
 8003914:	08003c7f 	.word	0x08003c7f
 8003918:	08003cfb 	.word	0x08003cfb
 800391c:	08003d17 	.word	0x08003d17

08003920 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr

08003932 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003932:	b480      	push	{r7}
 8003934:	b083      	sub	sp, #12
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	bc80      	pop	{r7}
 8003942:	4770      	bx	lr

08003944 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	bc80      	pop	{r7}
 8003954:	4770      	bx	lr
	...

08003958 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003966:	2300      	movs	r3, #0
 8003968:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003970:	2b01      	cmp	r3, #1
 8003972:	d101      	bne.n	8003978 <HAL_ADC_ConfigChannel+0x20>
 8003974:	2302      	movs	r3, #2
 8003976:	e0dc      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x1da>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b06      	cmp	r3, #6
 8003986:	d81c      	bhi.n	80039c2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	4613      	mov	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	3b05      	subs	r3, #5
 800399a:	221f      	movs	r2, #31
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	43db      	mvns	r3, r3
 80039a2:	4019      	ands	r1, r3
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	6818      	ldr	r0, [r3, #0]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	3b05      	subs	r3, #5
 80039b4:	fa00 f203 	lsl.w	r2, r0, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	635a      	str	r2, [r3, #52]	; 0x34
 80039c0:	e03c      	b.n	8003a3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b0c      	cmp	r3, #12
 80039c8:	d81c      	bhi.n	8003a04 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	4613      	mov	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	3b23      	subs	r3, #35	; 0x23
 80039dc:	221f      	movs	r2, #31
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	43db      	mvns	r3, r3
 80039e4:	4019      	ands	r1, r3
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	6818      	ldr	r0, [r3, #0]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	4613      	mov	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	3b23      	subs	r3, #35	; 0x23
 80039f6:	fa00 f203 	lsl.w	r2, r0, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	631a      	str	r2, [r3, #48]	; 0x30
 8003a02:	e01b      	b.n	8003a3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	3b41      	subs	r3, #65	; 0x41
 8003a16:	221f      	movs	r2, #31
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	4019      	ands	r1, r3
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	6818      	ldr	r0, [r3, #0]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	3b41      	subs	r3, #65	; 0x41
 8003a30:	fa00 f203 	lsl.w	r2, r0, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b09      	cmp	r3, #9
 8003a42:	d91c      	bls.n	8003a7e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68d9      	ldr	r1, [r3, #12]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	4413      	add	r3, r2
 8003a54:	3b1e      	subs	r3, #30
 8003a56:	2207      	movs	r2, #7
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	4019      	ands	r1, r3
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	6898      	ldr	r0, [r3, #8]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	4413      	add	r3, r2
 8003a6e:	3b1e      	subs	r3, #30
 8003a70:	fa00 f203 	lsl.w	r2, r0, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	60da      	str	r2, [r3, #12]
 8003a7c:	e019      	b.n	8003ab2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6919      	ldr	r1, [r3, #16]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	4413      	add	r3, r2
 8003a8e:	2207      	movs	r2, #7
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	4019      	ands	r1, r3
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	6898      	ldr	r0, [r3, #8]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	4413      	add	r3, r2
 8003aa6:	fa00 f203 	lsl.w	r2, r0, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b10      	cmp	r3, #16
 8003ab8:	d003      	beq.n	8003ac2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003abe:	2b11      	cmp	r3, #17
 8003ac0:	d132      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a1d      	ldr	r2, [pc, #116]	; (8003b3c <HAL_ADC_ConfigChannel+0x1e4>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d125      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d126      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003ae8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b10      	cmp	r3, #16
 8003af0:	d11a      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003af2:	4b13      	ldr	r3, [pc, #76]	; (8003b40 <HAL_ADC_ConfigChannel+0x1e8>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a13      	ldr	r2, [pc, #76]	; (8003b44 <HAL_ADC_ConfigChannel+0x1ec>)
 8003af8:	fba2 2303 	umull	r2, r3, r2, r3
 8003afc:	0c9a      	lsrs	r2, r3, #18
 8003afe:	4613      	mov	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b08:	e002      	b.n	8003b10 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f9      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x1b2>
 8003b16:	e007      	b.n	8003b28 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1c:	f043 0220 	orr.w	r2, r3, #32
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr
 8003b3c:	40012400 	.word	0x40012400
 8003b40:	20000004 	.word	0x20000004
 8003b44:	431bde83 	.word	0x431bde83

08003b48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d040      	beq.n	8003be8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f042 0201 	orr.w	r2, r2, #1
 8003b74:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b76:	4b1f      	ldr	r3, [pc, #124]	; (8003bf4 <ADC_Enable+0xac>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a1f      	ldr	r2, [pc, #124]	; (8003bf8 <ADC_Enable+0xb0>)
 8003b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b80:	0c9b      	lsrs	r3, r3, #18
 8003b82:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003b84:	e002      	b.n	8003b8c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1f9      	bne.n	8003b86 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b92:	f7ff fd05 	bl	80035a0 <HAL_GetTick>
 8003b96:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003b98:	e01f      	b.n	8003bda <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b9a:	f7ff fd01 	bl	80035a0 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d918      	bls.n	8003bda <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d011      	beq.n	8003bda <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bba:	f043 0210 	orr.w	r2, r3, #16
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc6:	f043 0201 	orr.w	r2, r3, #1
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e007      	b.n	8003bea <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d1d8      	bne.n	8003b9a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20000004 	.word	0x20000004
 8003bf8:	431bde83 	.word	0x431bde83

08003bfc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d12e      	bne.n	8003c74 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0201 	bic.w	r2, r2, #1
 8003c24:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c26:	f7ff fcbb 	bl	80035a0 <HAL_GetTick>
 8003c2a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003c2c:	e01b      	b.n	8003c66 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c2e:	f7ff fcb7 	bl	80035a0 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d914      	bls.n	8003c66 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d10d      	bne.n	8003c66 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4e:	f043 0210 	orr.w	r2, r3, #16
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5a:	f043 0201 	orr.w	r2, r3, #1
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e007      	b.n	8003c76 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d0dc      	beq.n	8003c2e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c90:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d127      	bne.n	8003ce8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003cae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003cb2:	d115      	bne.n	8003ce0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d111      	bne.n	8003ce0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ccc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d105      	bne.n	8003ce0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd8:	f043 0201 	orr.w	r2, r3, #1
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f7ff fe1d 	bl	8003920 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003ce6:	e004      	b.n	8003cf2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	4798      	blx	r3
}
 8003cf2:	bf00      	nop
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b084      	sub	sp, #16
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f7ff fe12 	bl	8003932 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d0e:	bf00      	nop
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b084      	sub	sp, #16
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	f043 0204 	orr.w	r2, r3, #4
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f7ff fe01 	bl	8003944 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d42:	bf00      	nop
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
	...

08003d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d5c:	4b0c      	ldr	r3, [pc, #48]	; (8003d90 <__NVIC_SetPriorityGrouping+0x44>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d68:	4013      	ands	r3, r2
 8003d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d7e:	4a04      	ldr	r2, [pc, #16]	; (8003d90 <__NVIC_SetPriorityGrouping+0x44>)
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	60d3      	str	r3, [r2, #12]
}
 8003d84:	bf00      	nop
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bc80      	pop	{r7}
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	e000ed00 	.word	0xe000ed00

08003d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d98:	4b04      	ldr	r3, [pc, #16]	; (8003dac <__NVIC_GetPriorityGrouping+0x18>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	0a1b      	lsrs	r3, r3, #8
 8003d9e:	f003 0307 	and.w	r3, r3, #7
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bc80      	pop	{r7}
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	e000ed00 	.word	0xe000ed00

08003db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	4603      	mov	r3, r0
 8003db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	db0b      	blt.n	8003dda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dc2:	79fb      	ldrb	r3, [r7, #7]
 8003dc4:	f003 021f 	and.w	r2, r3, #31
 8003dc8:	4906      	ldr	r1, [pc, #24]	; (8003de4 <__NVIC_EnableIRQ+0x34>)
 8003dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dce:	095b      	lsrs	r3, r3, #5
 8003dd0:	2001      	movs	r0, #1
 8003dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8003dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr
 8003de4:	e000e100 	.word	0xe000e100

08003de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	4603      	mov	r3, r0
 8003df0:	6039      	str	r1, [r7, #0]
 8003df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	db0a      	blt.n	8003e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	490c      	ldr	r1, [pc, #48]	; (8003e34 <__NVIC_SetPriority+0x4c>)
 8003e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e06:	0112      	lsls	r2, r2, #4
 8003e08:	b2d2      	uxtb	r2, r2
 8003e0a:	440b      	add	r3, r1
 8003e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e10:	e00a      	b.n	8003e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	4908      	ldr	r1, [pc, #32]	; (8003e38 <__NVIC_SetPriority+0x50>)
 8003e18:	79fb      	ldrb	r3, [r7, #7]
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	3b04      	subs	r3, #4
 8003e20:	0112      	lsls	r2, r2, #4
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	440b      	add	r3, r1
 8003e26:	761a      	strb	r2, [r3, #24]
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bc80      	pop	{r7}
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	e000e100 	.word	0xe000e100
 8003e38:	e000ed00 	.word	0xe000ed00

08003e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b089      	sub	sp, #36	; 0x24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f1c3 0307 	rsb	r3, r3, #7
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	bf28      	it	cs
 8003e5a:	2304      	movcs	r3, #4
 8003e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	3304      	adds	r3, #4
 8003e62:	2b06      	cmp	r3, #6
 8003e64:	d902      	bls.n	8003e6c <NVIC_EncodePriority+0x30>
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	3b03      	subs	r3, #3
 8003e6a:	e000      	b.n	8003e6e <NVIC_EncodePriority+0x32>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e70:	f04f 32ff 	mov.w	r2, #4294967295
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	43da      	mvns	r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	401a      	ands	r2, r3
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e84:	f04f 31ff 	mov.w	r1, #4294967295
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e8e:	43d9      	mvns	r1, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e94:	4313      	orrs	r3, r2
         );
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3724      	adds	r7, #36	; 0x24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bc80      	pop	{r7}
 8003e9e:	4770      	bx	lr

08003ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003eb0:	d301      	bcc.n	8003eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e00f      	b.n	8003ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eb6:	4a0a      	ldr	r2, [pc, #40]	; (8003ee0 <SysTick_Config+0x40>)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ebe:	210f      	movs	r1, #15
 8003ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec4:	f7ff ff90 	bl	8003de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ec8:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <SysTick_Config+0x40>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ece:	4b04      	ldr	r3, [pc, #16]	; (8003ee0 <SysTick_Config+0x40>)
 8003ed0:	2207      	movs	r2, #7
 8003ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	e000e010 	.word	0xe000e010

08003ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7ff ff2d 	bl	8003d4c <__NVIC_SetPriorityGrouping>
}
 8003ef2:	bf00      	nop
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b086      	sub	sp, #24
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	4603      	mov	r3, r0
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	607a      	str	r2, [r7, #4]
 8003f06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f0c:	f7ff ff42 	bl	8003d94 <__NVIC_GetPriorityGrouping>
 8003f10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	68b9      	ldr	r1, [r7, #8]
 8003f16:	6978      	ldr	r0, [r7, #20]
 8003f18:	f7ff ff90 	bl	8003e3c <NVIC_EncodePriority>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f22:	4611      	mov	r1, r2
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff ff5f 	bl	8003de8 <__NVIC_SetPriority>
}
 8003f2a:	bf00      	nop
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b082      	sub	sp, #8
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	4603      	mov	r3, r0
 8003f3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff ff35 	bl	8003db0 <__NVIC_EnableIRQ>
}
 8003f46:	bf00      	nop
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b082      	sub	sp, #8
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7ff ffa2 	bl	8003ea0 <SysTick_Config>
 8003f5c:	4603      	mov	r3, r0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
	...

08003f68 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e043      	b.n	8004006 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	4b22      	ldr	r3, [pc, #136]	; (8004010 <HAL_DMA_Init+0xa8>)
 8003f86:	4413      	add	r3, r2
 8003f88:	4a22      	ldr	r2, [pc, #136]	; (8004014 <HAL_DMA_Init+0xac>)
 8003f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8e:	091b      	lsrs	r3, r3, #4
 8003f90:	009a      	lsls	r2, r3, #2
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a1f      	ldr	r2, [pc, #124]	; (8004018 <HAL_DMA_Init+0xb0>)
 8003f9a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003fb2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003fb6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr
 8004010:	bffdfff8 	.word	0xbffdfff8
 8004014:	cccccccd 	.word	0xcccccccd
 8004018:	40020000 	.word	0x40020000

0800401c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
 8004028:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_DMA_Start_IT+0x20>
 8004038:	2302      	movs	r3, #2
 800403a:	e04b      	b.n	80040d4 <HAL_DMA_Start_IT+0xb8>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b01      	cmp	r3, #1
 800404e:	d13a      	bne.n	80040c6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0201 	bic.w	r2, r2, #1
 800406c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	68b9      	ldr	r1, [r7, #8]
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 f9eb 	bl	8004450 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407e:	2b00      	cmp	r3, #0
 8004080:	d008      	beq.n	8004094 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f042 020e 	orr.w	r2, r2, #14
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	e00f      	b.n	80040b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0204 	bic.w	r2, r2, #4
 80040a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 020a 	orr.w	r2, r2, #10
 80040b2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0201 	orr.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	e005      	b.n	80040d2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80040ce:	2302      	movs	r3, #2
 80040d0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80040d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d008      	beq.n	8004106 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2204      	movs	r2, #4
 80040f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e020      	b.n	8004148 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 020e 	bic.w	r2, r2, #14
 8004114:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0201 	bic.w	r2, r2, #1
 8004124:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412e:	2101      	movs	r1, #1
 8004130:	fa01 f202 	lsl.w	r2, r1, r2
 8004134:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004146:	7bfb      	ldrb	r3, [r7, #15]
}
 8004148:	4618      	mov	r0, r3
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	bc80      	pop	{r7}
 8004150:	4770      	bx	lr
	...

08004154 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800415c:	2300      	movs	r3, #0
 800415e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d005      	beq.n	8004178 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2204      	movs	r2, #4
 8004170:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	73fb      	strb	r3, [r7, #15]
 8004176:	e051      	b.n	800421c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 020e 	bic.w	r2, r2, #14
 8004186:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0201 	bic.w	r2, r2, #1
 8004196:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a22      	ldr	r2, [pc, #136]	; (8004228 <HAL_DMA_Abort_IT+0xd4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d029      	beq.n	80041f6 <HAL_DMA_Abort_IT+0xa2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a21      	ldr	r2, [pc, #132]	; (800422c <HAL_DMA_Abort_IT+0xd8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d022      	beq.n	80041f2 <HAL_DMA_Abort_IT+0x9e>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a1f      	ldr	r2, [pc, #124]	; (8004230 <HAL_DMA_Abort_IT+0xdc>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d01a      	beq.n	80041ec <HAL_DMA_Abort_IT+0x98>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a1e      	ldr	r2, [pc, #120]	; (8004234 <HAL_DMA_Abort_IT+0xe0>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d012      	beq.n	80041e6 <HAL_DMA_Abort_IT+0x92>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a1c      	ldr	r2, [pc, #112]	; (8004238 <HAL_DMA_Abort_IT+0xe4>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d00a      	beq.n	80041e0 <HAL_DMA_Abort_IT+0x8c>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a1b      	ldr	r2, [pc, #108]	; (800423c <HAL_DMA_Abort_IT+0xe8>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d102      	bne.n	80041da <HAL_DMA_Abort_IT+0x86>
 80041d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80041d8:	e00e      	b.n	80041f8 <HAL_DMA_Abort_IT+0xa4>
 80041da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041de:	e00b      	b.n	80041f8 <HAL_DMA_Abort_IT+0xa4>
 80041e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041e4:	e008      	b.n	80041f8 <HAL_DMA_Abort_IT+0xa4>
 80041e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041ea:	e005      	b.n	80041f8 <HAL_DMA_Abort_IT+0xa4>
 80041ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041f0:	e002      	b.n	80041f8 <HAL_DMA_Abort_IT+0xa4>
 80041f2:	2310      	movs	r3, #16
 80041f4:	e000      	b.n	80041f8 <HAL_DMA_Abort_IT+0xa4>
 80041f6:	2301      	movs	r3, #1
 80041f8:	4a11      	ldr	r2, [pc, #68]	; (8004240 <HAL_DMA_Abort_IT+0xec>)
 80041fa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	4798      	blx	r3
    } 
  }
  return status;
 800421c:	7bfb      	ldrb	r3, [r7, #15]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40020008 	.word	0x40020008
 800422c:	4002001c 	.word	0x4002001c
 8004230:	40020030 	.word	0x40020030
 8004234:	40020044 	.word	0x40020044
 8004238:	40020058 	.word	0x40020058
 800423c:	4002006c 	.word	0x4002006c
 8004240:	40020000 	.word	0x40020000

08004244 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	2204      	movs	r2, #4
 8004262:	409a      	lsls	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4013      	ands	r3, r2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d04f      	beq.n	800430c <HAL_DMA_IRQHandler+0xc8>
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f003 0304 	and.w	r3, r3, #4
 8004272:	2b00      	cmp	r3, #0
 8004274:	d04a      	beq.n	800430c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0320 	and.w	r3, r3, #32
 8004280:	2b00      	cmp	r3, #0
 8004282:	d107      	bne.n	8004294 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0204 	bic.w	r2, r2, #4
 8004292:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a66      	ldr	r2, [pc, #408]	; (8004434 <HAL_DMA_IRQHandler+0x1f0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d029      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xae>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a65      	ldr	r2, [pc, #404]	; (8004438 <HAL_DMA_IRQHandler+0x1f4>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d022      	beq.n	80042ee <HAL_DMA_IRQHandler+0xaa>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a63      	ldr	r2, [pc, #396]	; (800443c <HAL_DMA_IRQHandler+0x1f8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d01a      	beq.n	80042e8 <HAL_DMA_IRQHandler+0xa4>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a62      	ldr	r2, [pc, #392]	; (8004440 <HAL_DMA_IRQHandler+0x1fc>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d012      	beq.n	80042e2 <HAL_DMA_IRQHandler+0x9e>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a60      	ldr	r2, [pc, #384]	; (8004444 <HAL_DMA_IRQHandler+0x200>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00a      	beq.n	80042dc <HAL_DMA_IRQHandler+0x98>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a5f      	ldr	r2, [pc, #380]	; (8004448 <HAL_DMA_IRQHandler+0x204>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d102      	bne.n	80042d6 <HAL_DMA_IRQHandler+0x92>
 80042d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80042d4:	e00e      	b.n	80042f4 <HAL_DMA_IRQHandler+0xb0>
 80042d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80042da:	e00b      	b.n	80042f4 <HAL_DMA_IRQHandler+0xb0>
 80042dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80042e0:	e008      	b.n	80042f4 <HAL_DMA_IRQHandler+0xb0>
 80042e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80042e6:	e005      	b.n	80042f4 <HAL_DMA_IRQHandler+0xb0>
 80042e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042ec:	e002      	b.n	80042f4 <HAL_DMA_IRQHandler+0xb0>
 80042ee:	2340      	movs	r3, #64	; 0x40
 80042f0:	e000      	b.n	80042f4 <HAL_DMA_IRQHandler+0xb0>
 80042f2:	2304      	movs	r3, #4
 80042f4:	4a55      	ldr	r2, [pc, #340]	; (800444c <HAL_DMA_IRQHandler+0x208>)
 80042f6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 8094 	beq.w	800442a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800430a:	e08e      	b.n	800442a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	2202      	movs	r2, #2
 8004312:	409a      	lsls	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4013      	ands	r3, r2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d056      	beq.n	80043ca <HAL_DMA_IRQHandler+0x186>
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d051      	beq.n	80043ca <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10b      	bne.n	800434c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 020a 	bic.w	r2, r2, #10
 8004342:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a38      	ldr	r2, [pc, #224]	; (8004434 <HAL_DMA_IRQHandler+0x1f0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d029      	beq.n	80043aa <HAL_DMA_IRQHandler+0x166>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a37      	ldr	r2, [pc, #220]	; (8004438 <HAL_DMA_IRQHandler+0x1f4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d022      	beq.n	80043a6 <HAL_DMA_IRQHandler+0x162>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a35      	ldr	r2, [pc, #212]	; (800443c <HAL_DMA_IRQHandler+0x1f8>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d01a      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x15c>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a34      	ldr	r2, [pc, #208]	; (8004440 <HAL_DMA_IRQHandler+0x1fc>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d012      	beq.n	800439a <HAL_DMA_IRQHandler+0x156>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a32      	ldr	r2, [pc, #200]	; (8004444 <HAL_DMA_IRQHandler+0x200>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d00a      	beq.n	8004394 <HAL_DMA_IRQHandler+0x150>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a31      	ldr	r2, [pc, #196]	; (8004448 <HAL_DMA_IRQHandler+0x204>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d102      	bne.n	800438e <HAL_DMA_IRQHandler+0x14a>
 8004388:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800438c:	e00e      	b.n	80043ac <HAL_DMA_IRQHandler+0x168>
 800438e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004392:	e00b      	b.n	80043ac <HAL_DMA_IRQHandler+0x168>
 8004394:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004398:	e008      	b.n	80043ac <HAL_DMA_IRQHandler+0x168>
 800439a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800439e:	e005      	b.n	80043ac <HAL_DMA_IRQHandler+0x168>
 80043a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043a4:	e002      	b.n	80043ac <HAL_DMA_IRQHandler+0x168>
 80043a6:	2320      	movs	r3, #32
 80043a8:	e000      	b.n	80043ac <HAL_DMA_IRQHandler+0x168>
 80043aa:	2302      	movs	r3, #2
 80043ac:	4a27      	ldr	r2, [pc, #156]	; (800444c <HAL_DMA_IRQHandler+0x208>)
 80043ae:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d034      	beq.n	800442a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80043c8:	e02f      	b.n	800442a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	2208      	movs	r2, #8
 80043d0:	409a      	lsls	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	4013      	ands	r3, r2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d028      	beq.n	800442c <HAL_DMA_IRQHandler+0x1e8>
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f003 0308 	and.w	r3, r3, #8
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d023      	beq.n	800442c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 020e 	bic.w	r2, r2, #14
 80043f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fc:	2101      	movs	r1, #1
 80043fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004402:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	2b00      	cmp	r3, #0
 8004420:	d004      	beq.n	800442c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	4798      	blx	r3
    }
  }
  return;
 800442a:	bf00      	nop
 800442c:	bf00      	nop
}
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40020008 	.word	0x40020008
 8004438:	4002001c 	.word	0x4002001c
 800443c:	40020030 	.word	0x40020030
 8004440:	40020044 	.word	0x40020044
 8004444:	40020058 	.word	0x40020058
 8004448:	4002006c 	.word	0x4002006c
 800444c:	40020000 	.word	0x40020000

08004450 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
 800445c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004466:	2101      	movs	r1, #1
 8004468:	fa01 f202 	lsl.w	r2, r1, r2
 800446c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b10      	cmp	r3, #16
 800447c:	d108      	bne.n	8004490 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800448e:	e007      	b.n	80044a0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	60da      	str	r2, [r3, #12]
}
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bc80      	pop	{r7}
 80044a8:	4770      	bx	lr
	...

080044ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b08b      	sub	sp, #44	; 0x2c
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044b6:	2300      	movs	r3, #0
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80044ba:	2300      	movs	r3, #0
 80044bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044be:	e169      	b.n	8004794 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80044c0:	2201      	movs	r2, #1
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69fa      	ldr	r2, [r7, #28]
 80044d0:	4013      	ands	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	429a      	cmp	r2, r3
 80044da:	f040 8158 	bne.w	800478e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	4a9a      	ldr	r2, [pc, #616]	; (800474c <HAL_GPIO_Init+0x2a0>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d05e      	beq.n	80045a6 <HAL_GPIO_Init+0xfa>
 80044e8:	4a98      	ldr	r2, [pc, #608]	; (800474c <HAL_GPIO_Init+0x2a0>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d875      	bhi.n	80045da <HAL_GPIO_Init+0x12e>
 80044ee:	4a98      	ldr	r2, [pc, #608]	; (8004750 <HAL_GPIO_Init+0x2a4>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d058      	beq.n	80045a6 <HAL_GPIO_Init+0xfa>
 80044f4:	4a96      	ldr	r2, [pc, #600]	; (8004750 <HAL_GPIO_Init+0x2a4>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d86f      	bhi.n	80045da <HAL_GPIO_Init+0x12e>
 80044fa:	4a96      	ldr	r2, [pc, #600]	; (8004754 <HAL_GPIO_Init+0x2a8>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d052      	beq.n	80045a6 <HAL_GPIO_Init+0xfa>
 8004500:	4a94      	ldr	r2, [pc, #592]	; (8004754 <HAL_GPIO_Init+0x2a8>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d869      	bhi.n	80045da <HAL_GPIO_Init+0x12e>
 8004506:	4a94      	ldr	r2, [pc, #592]	; (8004758 <HAL_GPIO_Init+0x2ac>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d04c      	beq.n	80045a6 <HAL_GPIO_Init+0xfa>
 800450c:	4a92      	ldr	r2, [pc, #584]	; (8004758 <HAL_GPIO_Init+0x2ac>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d863      	bhi.n	80045da <HAL_GPIO_Init+0x12e>
 8004512:	4a92      	ldr	r2, [pc, #584]	; (800475c <HAL_GPIO_Init+0x2b0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d046      	beq.n	80045a6 <HAL_GPIO_Init+0xfa>
 8004518:	4a90      	ldr	r2, [pc, #576]	; (800475c <HAL_GPIO_Init+0x2b0>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d85d      	bhi.n	80045da <HAL_GPIO_Init+0x12e>
 800451e:	2b12      	cmp	r3, #18
 8004520:	d82a      	bhi.n	8004578 <HAL_GPIO_Init+0xcc>
 8004522:	2b12      	cmp	r3, #18
 8004524:	d859      	bhi.n	80045da <HAL_GPIO_Init+0x12e>
 8004526:	a201      	add	r2, pc, #4	; (adr r2, 800452c <HAL_GPIO_Init+0x80>)
 8004528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452c:	080045a7 	.word	0x080045a7
 8004530:	08004581 	.word	0x08004581
 8004534:	08004593 	.word	0x08004593
 8004538:	080045d5 	.word	0x080045d5
 800453c:	080045db 	.word	0x080045db
 8004540:	080045db 	.word	0x080045db
 8004544:	080045db 	.word	0x080045db
 8004548:	080045db 	.word	0x080045db
 800454c:	080045db 	.word	0x080045db
 8004550:	080045db 	.word	0x080045db
 8004554:	080045db 	.word	0x080045db
 8004558:	080045db 	.word	0x080045db
 800455c:	080045db 	.word	0x080045db
 8004560:	080045db 	.word	0x080045db
 8004564:	080045db 	.word	0x080045db
 8004568:	080045db 	.word	0x080045db
 800456c:	080045db 	.word	0x080045db
 8004570:	08004589 	.word	0x08004589
 8004574:	0800459d 	.word	0x0800459d
 8004578:	4a79      	ldr	r2, [pc, #484]	; (8004760 <HAL_GPIO_Init+0x2b4>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d013      	beq.n	80045a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800457e:	e02c      	b.n	80045da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	623b      	str	r3, [r7, #32]
          break;
 8004586:	e029      	b.n	80045dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	3304      	adds	r3, #4
 800458e:	623b      	str	r3, [r7, #32]
          break;
 8004590:	e024      	b.n	80045dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	3308      	adds	r3, #8
 8004598:	623b      	str	r3, [r7, #32]
          break;
 800459a:	e01f      	b.n	80045dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	330c      	adds	r3, #12
 80045a2:	623b      	str	r3, [r7, #32]
          break;
 80045a4:	e01a      	b.n	80045dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d102      	bne.n	80045b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80045ae:	2304      	movs	r3, #4
 80045b0:	623b      	str	r3, [r7, #32]
          break;
 80045b2:	e013      	b.n	80045dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d105      	bne.n	80045c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045bc:	2308      	movs	r3, #8
 80045be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	69fa      	ldr	r2, [r7, #28]
 80045c4:	611a      	str	r2, [r3, #16]
          break;
 80045c6:	e009      	b.n	80045dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045c8:	2308      	movs	r3, #8
 80045ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	69fa      	ldr	r2, [r7, #28]
 80045d0:	615a      	str	r2, [r3, #20]
          break;
 80045d2:	e003      	b.n	80045dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80045d4:	2300      	movs	r3, #0
 80045d6:	623b      	str	r3, [r7, #32]
          break;
 80045d8:	e000      	b.n	80045dc <HAL_GPIO_Init+0x130>
          break;
 80045da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	2bff      	cmp	r3, #255	; 0xff
 80045e0:	d801      	bhi.n	80045e6 <HAL_GPIO_Init+0x13a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	e001      	b.n	80045ea <HAL_GPIO_Init+0x13e>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	3304      	adds	r3, #4
 80045ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	2bff      	cmp	r3, #255	; 0xff
 80045f0:	d802      	bhi.n	80045f8 <HAL_GPIO_Init+0x14c>
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	e002      	b.n	80045fe <HAL_GPIO_Init+0x152>
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	3b08      	subs	r3, #8
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	210f      	movs	r1, #15
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	fa01 f303 	lsl.w	r3, r1, r3
 800460c:	43db      	mvns	r3, r3
 800460e:	401a      	ands	r2, r3
 8004610:	6a39      	ldr	r1, [r7, #32]
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	fa01 f303 	lsl.w	r3, r1, r3
 8004618:	431a      	orrs	r2, r3
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	f000 80b1 	beq.w	800478e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800462c:	4b4d      	ldr	r3, [pc, #308]	; (8004764 <HAL_GPIO_Init+0x2b8>)
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	4a4c      	ldr	r2, [pc, #304]	; (8004764 <HAL_GPIO_Init+0x2b8>)
 8004632:	f043 0301 	orr.w	r3, r3, #1
 8004636:	6193      	str	r3, [r2, #24]
 8004638:	4b4a      	ldr	r3, [pc, #296]	; (8004764 <HAL_GPIO_Init+0x2b8>)
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	60bb      	str	r3, [r7, #8]
 8004642:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004644:	4a48      	ldr	r2, [pc, #288]	; (8004768 <HAL_GPIO_Init+0x2bc>)
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	089b      	lsrs	r3, r3, #2
 800464a:	3302      	adds	r3, #2
 800464c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004650:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	f003 0303 	and.w	r3, r3, #3
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	220f      	movs	r2, #15
 800465c:	fa02 f303 	lsl.w	r3, r2, r3
 8004660:	43db      	mvns	r3, r3
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	4013      	ands	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a40      	ldr	r2, [pc, #256]	; (800476c <HAL_GPIO_Init+0x2c0>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d013      	beq.n	8004698 <HAL_GPIO_Init+0x1ec>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a3f      	ldr	r2, [pc, #252]	; (8004770 <HAL_GPIO_Init+0x2c4>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d00d      	beq.n	8004694 <HAL_GPIO_Init+0x1e8>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a3e      	ldr	r2, [pc, #248]	; (8004774 <HAL_GPIO_Init+0x2c8>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d007      	beq.n	8004690 <HAL_GPIO_Init+0x1e4>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a3d      	ldr	r2, [pc, #244]	; (8004778 <HAL_GPIO_Init+0x2cc>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d101      	bne.n	800468c <HAL_GPIO_Init+0x1e0>
 8004688:	2303      	movs	r3, #3
 800468a:	e006      	b.n	800469a <HAL_GPIO_Init+0x1ee>
 800468c:	2304      	movs	r3, #4
 800468e:	e004      	b.n	800469a <HAL_GPIO_Init+0x1ee>
 8004690:	2302      	movs	r3, #2
 8004692:	e002      	b.n	800469a <HAL_GPIO_Init+0x1ee>
 8004694:	2301      	movs	r3, #1
 8004696:	e000      	b.n	800469a <HAL_GPIO_Init+0x1ee>
 8004698:	2300      	movs	r3, #0
 800469a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800469c:	f002 0203 	and.w	r2, r2, #3
 80046a0:	0092      	lsls	r2, r2, #2
 80046a2:	4093      	lsls	r3, r2
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80046aa:	492f      	ldr	r1, [pc, #188]	; (8004768 <HAL_GPIO_Init+0x2bc>)
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	089b      	lsrs	r3, r3, #2
 80046b0:	3302      	adds	r3, #2
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d006      	beq.n	80046d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80046c4:	4b2d      	ldr	r3, [pc, #180]	; (800477c <HAL_GPIO_Init+0x2d0>)
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	492c      	ldr	r1, [pc, #176]	; (800477c <HAL_GPIO_Init+0x2d0>)
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	608b      	str	r3, [r1, #8]
 80046d0:	e006      	b.n	80046e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80046d2:	4b2a      	ldr	r3, [pc, #168]	; (800477c <HAL_GPIO_Init+0x2d0>)
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	43db      	mvns	r3, r3
 80046da:	4928      	ldr	r1, [pc, #160]	; (800477c <HAL_GPIO_Init+0x2d0>)
 80046dc:	4013      	ands	r3, r2
 80046de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d006      	beq.n	80046fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80046ec:	4b23      	ldr	r3, [pc, #140]	; (800477c <HAL_GPIO_Init+0x2d0>)
 80046ee:	68da      	ldr	r2, [r3, #12]
 80046f0:	4922      	ldr	r1, [pc, #136]	; (800477c <HAL_GPIO_Init+0x2d0>)
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	60cb      	str	r3, [r1, #12]
 80046f8:	e006      	b.n	8004708 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80046fa:	4b20      	ldr	r3, [pc, #128]	; (800477c <HAL_GPIO_Init+0x2d0>)
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	43db      	mvns	r3, r3
 8004702:	491e      	ldr	r1, [pc, #120]	; (800477c <HAL_GPIO_Init+0x2d0>)
 8004704:	4013      	ands	r3, r2
 8004706:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d006      	beq.n	8004722 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004714:	4b19      	ldr	r3, [pc, #100]	; (800477c <HAL_GPIO_Init+0x2d0>)
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	4918      	ldr	r1, [pc, #96]	; (800477c <HAL_GPIO_Init+0x2d0>)
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	4313      	orrs	r3, r2
 800471e:	604b      	str	r3, [r1, #4]
 8004720:	e006      	b.n	8004730 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004722:	4b16      	ldr	r3, [pc, #88]	; (800477c <HAL_GPIO_Init+0x2d0>)
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	43db      	mvns	r3, r3
 800472a:	4914      	ldr	r1, [pc, #80]	; (800477c <HAL_GPIO_Init+0x2d0>)
 800472c:	4013      	ands	r3, r2
 800472e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d021      	beq.n	8004780 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800473c:	4b0f      	ldr	r3, [pc, #60]	; (800477c <HAL_GPIO_Init+0x2d0>)
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	490e      	ldr	r1, [pc, #56]	; (800477c <HAL_GPIO_Init+0x2d0>)
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	4313      	orrs	r3, r2
 8004746:	600b      	str	r3, [r1, #0]
 8004748:	e021      	b.n	800478e <HAL_GPIO_Init+0x2e2>
 800474a:	bf00      	nop
 800474c:	10320000 	.word	0x10320000
 8004750:	10310000 	.word	0x10310000
 8004754:	10220000 	.word	0x10220000
 8004758:	10210000 	.word	0x10210000
 800475c:	10120000 	.word	0x10120000
 8004760:	10110000 	.word	0x10110000
 8004764:	40021000 	.word	0x40021000
 8004768:	40010000 	.word	0x40010000
 800476c:	40010800 	.word	0x40010800
 8004770:	40010c00 	.word	0x40010c00
 8004774:	40011000 	.word	0x40011000
 8004778:	40011400 	.word	0x40011400
 800477c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004780:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <HAL_GPIO_Init+0x304>)
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	43db      	mvns	r3, r3
 8004788:	4909      	ldr	r1, [pc, #36]	; (80047b0 <HAL_GPIO_Init+0x304>)
 800478a:	4013      	ands	r3, r2
 800478c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	3301      	adds	r3, #1
 8004792:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	fa22 f303 	lsr.w	r3, r2, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f47f ae8e 	bne.w	80044c0 <HAL_GPIO_Init+0x14>
  }
}
 80047a4:	bf00      	nop
 80047a6:	bf00      	nop
 80047a8:	372c      	adds	r7, #44	; 0x2c
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bc80      	pop	{r7}
 80047ae:	4770      	bx	lr
 80047b0:	40010400 	.word	0x40010400

080047b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	460b      	mov	r3, r1
 80047be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689a      	ldr	r2, [r3, #8]
 80047c4:	887b      	ldrh	r3, [r7, #2]
 80047c6:	4013      	ands	r3, r2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047cc:	2301      	movs	r3, #1
 80047ce:	73fb      	strb	r3, [r7, #15]
 80047d0:	e001      	b.n	80047d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047d2:	2300      	movs	r3, #0
 80047d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	bc80      	pop	{r7}
 80047e0:	4770      	bx	lr

080047e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
 80047ea:	460b      	mov	r3, r1
 80047ec:	807b      	strh	r3, [r7, #2]
 80047ee:	4613      	mov	r3, r2
 80047f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047f2:	787b      	ldrb	r3, [r7, #1]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d003      	beq.n	8004800 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047f8:	887a      	ldrh	r2, [r7, #2]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80047fe:	e003      	b.n	8004808 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004800:	887b      	ldrh	r3, [r7, #2]
 8004802:	041a      	lsls	r2, r3, #16
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	611a      	str	r2, [r3, #16]
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	bc80      	pop	{r7}
 8004810:	4770      	bx	lr
	...

08004814 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e272      	b.n	8004d0c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 8087 	beq.w	8004942 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004834:	4b92      	ldr	r3, [pc, #584]	; (8004a80 <HAL_RCC_OscConfig+0x26c>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 030c 	and.w	r3, r3, #12
 800483c:	2b04      	cmp	r3, #4
 800483e:	d00c      	beq.n	800485a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004840:	4b8f      	ldr	r3, [pc, #572]	; (8004a80 <HAL_RCC_OscConfig+0x26c>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f003 030c 	and.w	r3, r3, #12
 8004848:	2b08      	cmp	r3, #8
 800484a:	d112      	bne.n	8004872 <HAL_RCC_OscConfig+0x5e>
 800484c:	4b8c      	ldr	r3, [pc, #560]	; (8004a80 <HAL_RCC_OscConfig+0x26c>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004858:	d10b      	bne.n	8004872 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800485a:	4b89      	ldr	r3, [pc, #548]	; (8004a80 <HAL_RCC_OscConfig+0x26c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d06c      	beq.n	8004940 <HAL_RCC_OscConfig+0x12c>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d168      	bne.n	8004940 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e24c      	b.n	8004d0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800487a:	d106      	bne.n	800488a <HAL_RCC_OscConfig+0x76>
 800487c:	4b80      	ldr	r3, [pc, #512]	; (8004a80 <HAL_RCC_OscConfig+0x26c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a7f      	ldr	r2, [pc, #508]	; (8004a80 <HAL_RCC_OscConfig+0x26c>)
 8004882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004886:	6013      	str	r3, [r2, #0]
 8004888:	e02e      	b.n	80048e8 <HAL_RCC_OscConfig+0xd4>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10c      	bne.n	80048ac <HAL_RCC_OscConfig+0x98>
 8004892:	4b7b      	ldr	r3, [pc, #492]	; (8004a80 <HAL_RCC_OscConfig+0x26c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a7a      	ldr	r2, [pc, #488]	; (8004a80 <HAL_RCC_OscConfig+0x26c>)
 8004898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	4b78      	ldr	r3, [pc, #480]	; (8004a80 <HAL_RCC_OscConfig+0x26c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a77      	ldr	r2, [pc, #476]	; (8004a80 <HAL_RCC_OscConfig+0x26c>)
 80048a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048a8:	6013      	str	r3, [r2, #0]
 80048aa:	e01d      	b.n	80048e8 <HAL_RCC_OscConfig+0xd4>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048b4:	d10c      	bne.n	80048d0 <HAL_RCC_OscConfig+0xbc>
 80048b6:	4b72      	ldr	r3, [pc, #456]	; (8004a80 <HAL_RCC_OscConfig+0x26c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a71      	ldr	r2, [pc, #452]	; (8004a80 <HAL_RCC_OscConfig+0x26c>)
 80048bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	4b6f      	ldr	r3, [pc, #444]	; (8004a80 <HAL_RCC_OscConfig+0x26c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a6e      	ldr	r2, [pc, #440]	; (8004a80 <HAL_RCC_OscConfig+0x26c>)
 80048c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	e00b      	b.n	80048e8 <HAL_RCC_OscConfig+0xd4>
 80048d0:	4b6b      	ldr	r3, [pc, #428]	; (8004a80 <HAL_RCC_OscConfig+0x26c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a6a      	ldr	r2, [pc, #424]	; (8004a80 <HAL_RCC_OscConfig+0x26c>)
 80048d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048da:	6013      	str	r3, [r2, #0]
 80048dc:	4b68      	ldr	r3, [pc, #416]	; (8004a80 <HAL_RCC_OscConfig+0x26c>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a67      	ldr	r2, [pc, #412]	; (8004a80 <HAL_RCC_OscConfig+0x26c>)
 80048e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d013      	beq.n	8004918 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f0:	f7fe fe56 	bl	80035a0 <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048f8:	f7fe fe52 	bl	80035a0 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b64      	cmp	r3, #100	; 0x64
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e200      	b.n	8004d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800490a:	4b5d      	ldr	r3, [pc, #372]	; (8004a80 <HAL_RCC_OscConfig+0x26c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d0f0      	beq.n	80048f8 <HAL_RCC_OscConfig+0xe4>
 8004916:	e014      	b.n	8004942 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004918:	f7fe fe42 	bl	80035a0 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004920:	f7fe fe3e 	bl	80035a0 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b64      	cmp	r3, #100	; 0x64
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e1ec      	b.n	8004d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004932:	4b53      	ldr	r3, [pc, #332]	; (8004a80 <HAL_RCC_OscConfig+0x26c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f0      	bne.n	8004920 <HAL_RCC_OscConfig+0x10c>
 800493e:	e000      	b.n	8004942 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d063      	beq.n	8004a16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800494e:	4b4c      	ldr	r3, [pc, #304]	; (8004a80 <HAL_RCC_OscConfig+0x26c>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f003 030c 	and.w	r3, r3, #12
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00b      	beq.n	8004972 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800495a:	4b49      	ldr	r3, [pc, #292]	; (8004a80 <HAL_RCC_OscConfig+0x26c>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f003 030c 	and.w	r3, r3, #12
 8004962:	2b08      	cmp	r3, #8
 8004964:	d11c      	bne.n	80049a0 <HAL_RCC_OscConfig+0x18c>
 8004966:	4b46      	ldr	r3, [pc, #280]	; (8004a80 <HAL_RCC_OscConfig+0x26c>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d116      	bne.n	80049a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004972:	4b43      	ldr	r3, [pc, #268]	; (8004a80 <HAL_RCC_OscConfig+0x26c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d005      	beq.n	800498a <HAL_RCC_OscConfig+0x176>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d001      	beq.n	800498a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e1c0      	b.n	8004d0c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800498a:	4b3d      	ldr	r3, [pc, #244]	; (8004a80 <HAL_RCC_OscConfig+0x26c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	4939      	ldr	r1, [pc, #228]	; (8004a80 <HAL_RCC_OscConfig+0x26c>)
 800499a:	4313      	orrs	r3, r2
 800499c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800499e:	e03a      	b.n	8004a16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d020      	beq.n	80049ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049a8:	4b36      	ldr	r3, [pc, #216]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 80049aa:	2201      	movs	r2, #1
 80049ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ae:	f7fe fdf7 	bl	80035a0 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049b6:	f7fe fdf3 	bl	80035a0 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e1a1      	b.n	8004d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049c8:	4b2d      	ldr	r3, [pc, #180]	; (8004a80 <HAL_RCC_OscConfig+0x26c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0f0      	beq.n	80049b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049d4:	4b2a      	ldr	r3, [pc, #168]	; (8004a80 <HAL_RCC_OscConfig+0x26c>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	4927      	ldr	r1, [pc, #156]	; (8004a80 <HAL_RCC_OscConfig+0x26c>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	600b      	str	r3, [r1, #0]
 80049e8:	e015      	b.n	8004a16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049ea:	4b26      	ldr	r3, [pc, #152]	; (8004a84 <HAL_RCC_OscConfig+0x270>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f0:	f7fe fdd6 	bl	80035a0 <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049f8:	f7fe fdd2 	bl	80035a0 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e180      	b.n	8004d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a0a:	4b1d      	ldr	r3, [pc, #116]	; (8004a80 <HAL_RCC_OscConfig+0x26c>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1f0      	bne.n	80049f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0308 	and.w	r3, r3, #8
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d03a      	beq.n	8004a98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d019      	beq.n	8004a5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a2a:	4b17      	ldr	r3, [pc, #92]	; (8004a88 <HAL_RCC_OscConfig+0x274>)
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a30:	f7fe fdb6 	bl	80035a0 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a38:	f7fe fdb2 	bl	80035a0 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e160      	b.n	8004d0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a4a:	4b0d      	ldr	r3, [pc, #52]	; (8004a80 <HAL_RCC_OscConfig+0x26c>)
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0f0      	beq.n	8004a38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004a56:	2001      	movs	r0, #1
 8004a58:	f000 face 	bl	8004ff8 <RCC_Delay>
 8004a5c:	e01c      	b.n	8004a98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a5e:	4b0a      	ldr	r3, [pc, #40]	; (8004a88 <HAL_RCC_OscConfig+0x274>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a64:	f7fe fd9c 	bl	80035a0 <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a6a:	e00f      	b.n	8004a8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a6c:	f7fe fd98 	bl	80035a0 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d908      	bls.n	8004a8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e146      	b.n	8004d0c <HAL_RCC_OscConfig+0x4f8>
 8004a7e:	bf00      	nop
 8004a80:	40021000 	.word	0x40021000
 8004a84:	42420000 	.word	0x42420000
 8004a88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a8c:	4b92      	ldr	r3, [pc, #584]	; (8004cd8 <HAL_RCC_OscConfig+0x4c4>)
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1e9      	bne.n	8004a6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 80a6 	beq.w	8004bf2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aaa:	4b8b      	ldr	r3, [pc, #556]	; (8004cd8 <HAL_RCC_OscConfig+0x4c4>)
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10d      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ab6:	4b88      	ldr	r3, [pc, #544]	; (8004cd8 <HAL_RCC_OscConfig+0x4c4>)
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	4a87      	ldr	r2, [pc, #540]	; (8004cd8 <HAL_RCC_OscConfig+0x4c4>)
 8004abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac0:	61d3      	str	r3, [r2, #28]
 8004ac2:	4b85      	ldr	r3, [pc, #532]	; (8004cd8 <HAL_RCC_OscConfig+0x4c4>)
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aca:	60bb      	str	r3, [r7, #8]
 8004acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad2:	4b82      	ldr	r3, [pc, #520]	; (8004cdc <HAL_RCC_OscConfig+0x4c8>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d118      	bne.n	8004b10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ade:	4b7f      	ldr	r3, [pc, #508]	; (8004cdc <HAL_RCC_OscConfig+0x4c8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a7e      	ldr	r2, [pc, #504]	; (8004cdc <HAL_RCC_OscConfig+0x4c8>)
 8004ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aea:	f7fe fd59 	bl	80035a0 <HAL_GetTick>
 8004aee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af0:	e008      	b.n	8004b04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004af2:	f7fe fd55 	bl	80035a0 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b64      	cmp	r3, #100	; 0x64
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e103      	b.n	8004d0c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b04:	4b75      	ldr	r3, [pc, #468]	; (8004cdc <HAL_RCC_OscConfig+0x4c8>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0f0      	beq.n	8004af2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d106      	bne.n	8004b26 <HAL_RCC_OscConfig+0x312>
 8004b18:	4b6f      	ldr	r3, [pc, #444]	; (8004cd8 <HAL_RCC_OscConfig+0x4c4>)
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	4a6e      	ldr	r2, [pc, #440]	; (8004cd8 <HAL_RCC_OscConfig+0x4c4>)
 8004b1e:	f043 0301 	orr.w	r3, r3, #1
 8004b22:	6213      	str	r3, [r2, #32]
 8004b24:	e02d      	b.n	8004b82 <HAL_RCC_OscConfig+0x36e>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10c      	bne.n	8004b48 <HAL_RCC_OscConfig+0x334>
 8004b2e:	4b6a      	ldr	r3, [pc, #424]	; (8004cd8 <HAL_RCC_OscConfig+0x4c4>)
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	4a69      	ldr	r2, [pc, #420]	; (8004cd8 <HAL_RCC_OscConfig+0x4c4>)
 8004b34:	f023 0301 	bic.w	r3, r3, #1
 8004b38:	6213      	str	r3, [r2, #32]
 8004b3a:	4b67      	ldr	r3, [pc, #412]	; (8004cd8 <HAL_RCC_OscConfig+0x4c4>)
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	4a66      	ldr	r2, [pc, #408]	; (8004cd8 <HAL_RCC_OscConfig+0x4c4>)
 8004b40:	f023 0304 	bic.w	r3, r3, #4
 8004b44:	6213      	str	r3, [r2, #32]
 8004b46:	e01c      	b.n	8004b82 <HAL_RCC_OscConfig+0x36e>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	2b05      	cmp	r3, #5
 8004b4e:	d10c      	bne.n	8004b6a <HAL_RCC_OscConfig+0x356>
 8004b50:	4b61      	ldr	r3, [pc, #388]	; (8004cd8 <HAL_RCC_OscConfig+0x4c4>)
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	4a60      	ldr	r2, [pc, #384]	; (8004cd8 <HAL_RCC_OscConfig+0x4c4>)
 8004b56:	f043 0304 	orr.w	r3, r3, #4
 8004b5a:	6213      	str	r3, [r2, #32]
 8004b5c:	4b5e      	ldr	r3, [pc, #376]	; (8004cd8 <HAL_RCC_OscConfig+0x4c4>)
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	4a5d      	ldr	r2, [pc, #372]	; (8004cd8 <HAL_RCC_OscConfig+0x4c4>)
 8004b62:	f043 0301 	orr.w	r3, r3, #1
 8004b66:	6213      	str	r3, [r2, #32]
 8004b68:	e00b      	b.n	8004b82 <HAL_RCC_OscConfig+0x36e>
 8004b6a:	4b5b      	ldr	r3, [pc, #364]	; (8004cd8 <HAL_RCC_OscConfig+0x4c4>)
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	4a5a      	ldr	r2, [pc, #360]	; (8004cd8 <HAL_RCC_OscConfig+0x4c4>)
 8004b70:	f023 0301 	bic.w	r3, r3, #1
 8004b74:	6213      	str	r3, [r2, #32]
 8004b76:	4b58      	ldr	r3, [pc, #352]	; (8004cd8 <HAL_RCC_OscConfig+0x4c4>)
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	4a57      	ldr	r2, [pc, #348]	; (8004cd8 <HAL_RCC_OscConfig+0x4c4>)
 8004b7c:	f023 0304 	bic.w	r3, r3, #4
 8004b80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d015      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b8a:	f7fe fd09 	bl	80035a0 <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b90:	e00a      	b.n	8004ba8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b92:	f7fe fd05 	bl	80035a0 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e0b1      	b.n	8004d0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ba8:	4b4b      	ldr	r3, [pc, #300]	; (8004cd8 <HAL_RCC_OscConfig+0x4c4>)
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d0ee      	beq.n	8004b92 <HAL_RCC_OscConfig+0x37e>
 8004bb4:	e014      	b.n	8004be0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bb6:	f7fe fcf3 	bl	80035a0 <HAL_GetTick>
 8004bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bbc:	e00a      	b.n	8004bd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bbe:	f7fe fcef 	bl	80035a0 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e09b      	b.n	8004d0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bd4:	4b40      	ldr	r3, [pc, #256]	; (8004cd8 <HAL_RCC_OscConfig+0x4c4>)
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1ee      	bne.n	8004bbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004be0:	7dfb      	ldrb	r3, [r7, #23]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d105      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004be6:	4b3c      	ldr	r3, [pc, #240]	; (8004cd8 <HAL_RCC_OscConfig+0x4c4>)
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	4a3b      	ldr	r2, [pc, #236]	; (8004cd8 <HAL_RCC_OscConfig+0x4c4>)
 8004bec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bf0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 8087 	beq.w	8004d0a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bfc:	4b36      	ldr	r3, [pc, #216]	; (8004cd8 <HAL_RCC_OscConfig+0x4c4>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f003 030c 	and.w	r3, r3, #12
 8004c04:	2b08      	cmp	r3, #8
 8004c06:	d061      	beq.n	8004ccc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	69db      	ldr	r3, [r3, #28]
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d146      	bne.n	8004c9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c10:	4b33      	ldr	r3, [pc, #204]	; (8004ce0 <HAL_RCC_OscConfig+0x4cc>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c16:	f7fe fcc3 	bl	80035a0 <HAL_GetTick>
 8004c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c1c:	e008      	b.n	8004c30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c1e:	f7fe fcbf 	bl	80035a0 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e06d      	b.n	8004d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c30:	4b29      	ldr	r3, [pc, #164]	; (8004cd8 <HAL_RCC_OscConfig+0x4c4>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1f0      	bne.n	8004c1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c44:	d108      	bne.n	8004c58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c46:	4b24      	ldr	r3, [pc, #144]	; (8004cd8 <HAL_RCC_OscConfig+0x4c4>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	4921      	ldr	r1, [pc, #132]	; (8004cd8 <HAL_RCC_OscConfig+0x4c4>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c58:	4b1f      	ldr	r3, [pc, #124]	; (8004cd8 <HAL_RCC_OscConfig+0x4c4>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a19      	ldr	r1, [r3, #32]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	430b      	orrs	r3, r1
 8004c6a:	491b      	ldr	r1, [pc, #108]	; (8004cd8 <HAL_RCC_OscConfig+0x4c4>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c70:	4b1b      	ldr	r3, [pc, #108]	; (8004ce0 <HAL_RCC_OscConfig+0x4cc>)
 8004c72:	2201      	movs	r2, #1
 8004c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c76:	f7fe fc93 	bl	80035a0 <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c7e:	f7fe fc8f 	bl	80035a0 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e03d      	b.n	8004d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c90:	4b11      	ldr	r3, [pc, #68]	; (8004cd8 <HAL_RCC_OscConfig+0x4c4>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0f0      	beq.n	8004c7e <HAL_RCC_OscConfig+0x46a>
 8004c9c:	e035      	b.n	8004d0a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c9e:	4b10      	ldr	r3, [pc, #64]	; (8004ce0 <HAL_RCC_OscConfig+0x4cc>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca4:	f7fe fc7c 	bl	80035a0 <HAL_GetTick>
 8004ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cac:	f7fe fc78 	bl	80035a0 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e026      	b.n	8004d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cbe:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <HAL_RCC_OscConfig+0x4c4>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1f0      	bne.n	8004cac <HAL_RCC_OscConfig+0x498>
 8004cca:	e01e      	b.n	8004d0a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	69db      	ldr	r3, [r3, #28]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d107      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e019      	b.n	8004d0c <HAL_RCC_OscConfig+0x4f8>
 8004cd8:	40021000 	.word	0x40021000
 8004cdc:	40007000 	.word	0x40007000
 8004ce0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ce4:	4b0b      	ldr	r3, [pc, #44]	; (8004d14 <HAL_RCC_OscConfig+0x500>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d106      	bne.n	8004d06 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d001      	beq.n	8004d0a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e000      	b.n	8004d0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3718      	adds	r7, #24
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40021000 	.word	0x40021000

08004d18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e0d0      	b.n	8004ece <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d2c:	4b6a      	ldr	r3, [pc, #424]	; (8004ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0307 	and.w	r3, r3, #7
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d910      	bls.n	8004d5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d3a:	4b67      	ldr	r3, [pc, #412]	; (8004ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f023 0207 	bic.w	r2, r3, #7
 8004d42:	4965      	ldr	r1, [pc, #404]	; (8004ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d4a:	4b63      	ldr	r3, [pc, #396]	; (8004ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0307 	and.w	r3, r3, #7
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d001      	beq.n	8004d5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e0b8      	b.n	8004ece <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d020      	beq.n	8004daa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d005      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d74:	4b59      	ldr	r3, [pc, #356]	; (8004edc <HAL_RCC_ClockConfig+0x1c4>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	4a58      	ldr	r2, [pc, #352]	; (8004edc <HAL_RCC_ClockConfig+0x1c4>)
 8004d7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004d7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0308 	and.w	r3, r3, #8
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d005      	beq.n	8004d98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d8c:	4b53      	ldr	r3, [pc, #332]	; (8004edc <HAL_RCC_ClockConfig+0x1c4>)
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	4a52      	ldr	r2, [pc, #328]	; (8004edc <HAL_RCC_ClockConfig+0x1c4>)
 8004d92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004d96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d98:	4b50      	ldr	r3, [pc, #320]	; (8004edc <HAL_RCC_ClockConfig+0x1c4>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	494d      	ldr	r1, [pc, #308]	; (8004edc <HAL_RCC_ClockConfig+0x1c4>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d040      	beq.n	8004e38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d107      	bne.n	8004dce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dbe:	4b47      	ldr	r3, [pc, #284]	; (8004edc <HAL_RCC_ClockConfig+0x1c4>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d115      	bne.n	8004df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e07f      	b.n	8004ece <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d107      	bne.n	8004de6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dd6:	4b41      	ldr	r3, [pc, #260]	; (8004edc <HAL_RCC_ClockConfig+0x1c4>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d109      	bne.n	8004df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e073      	b.n	8004ece <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004de6:	4b3d      	ldr	r3, [pc, #244]	; (8004edc <HAL_RCC_ClockConfig+0x1c4>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e06b      	b.n	8004ece <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004df6:	4b39      	ldr	r3, [pc, #228]	; (8004edc <HAL_RCC_ClockConfig+0x1c4>)
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f023 0203 	bic.w	r2, r3, #3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	4936      	ldr	r1, [pc, #216]	; (8004edc <HAL_RCC_ClockConfig+0x1c4>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e08:	f7fe fbca 	bl	80035a0 <HAL_GetTick>
 8004e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e0e:	e00a      	b.n	8004e26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e10:	f7fe fbc6 	bl	80035a0 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e053      	b.n	8004ece <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e26:	4b2d      	ldr	r3, [pc, #180]	; (8004edc <HAL_RCC_ClockConfig+0x1c4>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f003 020c 	and.w	r2, r3, #12
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d1eb      	bne.n	8004e10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e38:	4b27      	ldr	r3, [pc, #156]	; (8004ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d210      	bcs.n	8004e68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e46:	4b24      	ldr	r3, [pc, #144]	; (8004ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f023 0207 	bic.w	r2, r3, #7
 8004e4e:	4922      	ldr	r1, [pc, #136]	; (8004ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e56:	4b20      	ldr	r3, [pc, #128]	; (8004ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0307 	and.w	r3, r3, #7
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d001      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e032      	b.n	8004ece <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d008      	beq.n	8004e86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e74:	4b19      	ldr	r3, [pc, #100]	; (8004edc <HAL_RCC_ClockConfig+0x1c4>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	4916      	ldr	r1, [pc, #88]	; (8004edc <HAL_RCC_ClockConfig+0x1c4>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d009      	beq.n	8004ea6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e92:	4b12      	ldr	r3, [pc, #72]	; (8004edc <HAL_RCC_ClockConfig+0x1c4>)
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	490e      	ldr	r1, [pc, #56]	; (8004edc <HAL_RCC_ClockConfig+0x1c4>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ea6:	f000 f821 	bl	8004eec <HAL_RCC_GetSysClockFreq>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	4b0b      	ldr	r3, [pc, #44]	; (8004edc <HAL_RCC_ClockConfig+0x1c4>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	091b      	lsrs	r3, r3, #4
 8004eb2:	f003 030f 	and.w	r3, r3, #15
 8004eb6:	490a      	ldr	r1, [pc, #40]	; (8004ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8004eb8:	5ccb      	ldrb	r3, [r1, r3]
 8004eba:	fa22 f303 	lsr.w	r3, r2, r3
 8004ebe:	4a09      	ldr	r2, [pc, #36]	; (8004ee4 <HAL_RCC_ClockConfig+0x1cc>)
 8004ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ec2:	4b09      	ldr	r3, [pc, #36]	; (8004ee8 <HAL_RCC_ClockConfig+0x1d0>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fe fb28 	bl	800351c <HAL_InitTick>

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40022000 	.word	0x40022000
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	0800b4f0 	.word	0x0800b4f0
 8004ee4:	20000004 	.word	0x20000004
 8004ee8:	20000008 	.word	0x20000008

08004eec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60bb      	str	r3, [r7, #8]
 8004efa:	2300      	movs	r3, #0
 8004efc:	617b      	str	r3, [r7, #20]
 8004efe:	2300      	movs	r3, #0
 8004f00:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004f06:	4b1e      	ldr	r3, [pc, #120]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x94>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f003 030c 	and.w	r3, r3, #12
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	d002      	beq.n	8004f1c <HAL_RCC_GetSysClockFreq+0x30>
 8004f16:	2b08      	cmp	r3, #8
 8004f18:	d003      	beq.n	8004f22 <HAL_RCC_GetSysClockFreq+0x36>
 8004f1a:	e027      	b.n	8004f6c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f1c:	4b19      	ldr	r3, [pc, #100]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f1e:	613b      	str	r3, [r7, #16]
      break;
 8004f20:	e027      	b.n	8004f72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	0c9b      	lsrs	r3, r3, #18
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	4a17      	ldr	r2, [pc, #92]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004f2c:	5cd3      	ldrb	r3, [r2, r3]
 8004f2e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d010      	beq.n	8004f5c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f3a:	4b11      	ldr	r3, [pc, #68]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x94>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	0c5b      	lsrs	r3, r3, #17
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	4a11      	ldr	r2, [pc, #68]	; (8004f8c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004f46:	5cd3      	ldrb	r3, [r2, r3]
 8004f48:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a0d      	ldr	r2, [pc, #52]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f4e:	fb03 f202 	mul.w	r2, r3, r2
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f58:	617b      	str	r3, [r7, #20]
 8004f5a:	e004      	b.n	8004f66 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a0c      	ldr	r2, [pc, #48]	; (8004f90 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004f60:	fb02 f303 	mul.w	r3, r2, r3
 8004f64:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	613b      	str	r3, [r7, #16]
      break;
 8004f6a:	e002      	b.n	8004f72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f6c:	4b05      	ldr	r3, [pc, #20]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f6e:	613b      	str	r3, [r7, #16]
      break;
 8004f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f72:	693b      	ldr	r3, [r7, #16]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	371c      	adds	r7, #28
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bc80      	pop	{r7}
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	40021000 	.word	0x40021000
 8004f84:	007a1200 	.word	0x007a1200
 8004f88:	0800b508 	.word	0x0800b508
 8004f8c:	0800b518 	.word	0x0800b518
 8004f90:	003d0900 	.word	0x003d0900

08004f94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f98:	4b02      	ldr	r3, [pc, #8]	; (8004fa4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bc80      	pop	{r7}
 8004fa2:	4770      	bx	lr
 8004fa4:	20000004 	.word	0x20000004

08004fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fac:	f7ff fff2 	bl	8004f94 <HAL_RCC_GetHCLKFreq>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	4b05      	ldr	r3, [pc, #20]	; (8004fc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	0a1b      	lsrs	r3, r3, #8
 8004fb8:	f003 0307 	and.w	r3, r3, #7
 8004fbc:	4903      	ldr	r1, [pc, #12]	; (8004fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fbe:	5ccb      	ldrb	r3, [r1, r3]
 8004fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	40021000 	.word	0x40021000
 8004fcc:	0800b500 	.word	0x0800b500

08004fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004fd4:	f7ff ffde 	bl	8004f94 <HAL_RCC_GetHCLKFreq>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	4b05      	ldr	r3, [pc, #20]	; (8004ff0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	0adb      	lsrs	r3, r3, #11
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	4903      	ldr	r1, [pc, #12]	; (8004ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fe6:	5ccb      	ldrb	r3, [r1, r3]
 8004fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	0800b500 	.word	0x0800b500

08004ff8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005000:	4b0a      	ldr	r3, [pc, #40]	; (800502c <RCC_Delay+0x34>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a0a      	ldr	r2, [pc, #40]	; (8005030 <RCC_Delay+0x38>)
 8005006:	fba2 2303 	umull	r2, r3, r2, r3
 800500a:	0a5b      	lsrs	r3, r3, #9
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	fb02 f303 	mul.w	r3, r2, r3
 8005012:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005014:	bf00      	nop
  }
  while (Delay --);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	1e5a      	subs	r2, r3, #1
 800501a:	60fa      	str	r2, [r7, #12]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1f9      	bne.n	8005014 <RCC_Delay+0x1c>
}
 8005020:	bf00      	nop
 8005022:	bf00      	nop
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	bc80      	pop	{r7}
 800502a:	4770      	bx	lr
 800502c:	20000004 	.word	0x20000004
 8005030:	10624dd3 	.word	0x10624dd3

08005034 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	613b      	str	r3, [r7, #16]
 8005040:	2300      	movs	r3, #0
 8005042:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b00      	cmp	r3, #0
 800504e:	d07d      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005050:	2300      	movs	r3, #0
 8005052:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005054:	4b4f      	ldr	r3, [pc, #316]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005056:	69db      	ldr	r3, [r3, #28]
 8005058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10d      	bne.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005060:	4b4c      	ldr	r3, [pc, #304]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005062:	69db      	ldr	r3, [r3, #28]
 8005064:	4a4b      	ldr	r2, [pc, #300]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800506a:	61d3      	str	r3, [r2, #28]
 800506c:	4b49      	ldr	r3, [pc, #292]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800506e:	69db      	ldr	r3, [r3, #28]
 8005070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005074:	60bb      	str	r3, [r7, #8]
 8005076:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005078:	2301      	movs	r3, #1
 800507a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800507c:	4b46      	ldr	r3, [pc, #280]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005084:	2b00      	cmp	r3, #0
 8005086:	d118      	bne.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005088:	4b43      	ldr	r3, [pc, #268]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a42      	ldr	r2, [pc, #264]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800508e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005092:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005094:	f7fe fa84 	bl	80035a0 <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800509a:	e008      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800509c:	f7fe fa80 	bl	80035a0 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b64      	cmp	r3, #100	; 0x64
 80050a8:	d901      	bls.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e06d      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ae:	4b3a      	ldr	r3, [pc, #232]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0f0      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050ba:	4b36      	ldr	r3, [pc, #216]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d02e      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d027      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050d8:	4b2e      	ldr	r3, [pc, #184]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050e2:	4b2e      	ldr	r3, [pc, #184]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80050e4:	2201      	movs	r2, #1
 80050e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050e8:	4b2c      	ldr	r3, [pc, #176]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80050ee:	4a29      	ldr	r2, [pc, #164]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d014      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050fe:	f7fe fa4f 	bl	80035a0 <HAL_GetTick>
 8005102:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005104:	e00a      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005106:	f7fe fa4b 	bl	80035a0 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	f241 3288 	movw	r2, #5000	; 0x1388
 8005114:	4293      	cmp	r3, r2
 8005116:	d901      	bls.n	800511c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e036      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800511c:	4b1d      	ldr	r3, [pc, #116]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0ee      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005128:	4b1a      	ldr	r3, [pc, #104]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	4917      	ldr	r1, [pc, #92]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005136:	4313      	orrs	r3, r2
 8005138:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800513a:	7dfb      	ldrb	r3, [r7, #23]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d105      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005140:	4b14      	ldr	r3, [pc, #80]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005142:	69db      	ldr	r3, [r3, #28]
 8005144:	4a13      	ldr	r2, [pc, #76]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005146:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800514a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d008      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005158:	4b0e      	ldr	r3, [pc, #56]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	490b      	ldr	r1, [pc, #44]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005166:	4313      	orrs	r3, r2
 8005168:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0310 	and.w	r3, r3, #16
 8005172:	2b00      	cmp	r3, #0
 8005174:	d008      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005176:	4b07      	ldr	r3, [pc, #28]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	4904      	ldr	r1, [pc, #16]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005184:	4313      	orrs	r3, r2
 8005186:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3718      	adds	r7, #24
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	40021000 	.word	0x40021000
 8005198:	40007000 	.word	0x40007000
 800519c:	42420440 	.word	0x42420440

080051a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e041      	b.n	8005236 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d106      	bne.n	80051cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7fd ffdc 	bl	8003184 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3304      	adds	r3, #4
 80051dc:	4619      	mov	r1, r3
 80051de:	4610      	mov	r0, r2
 80051e0:	f000 fd36 	bl	8005c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3708      	adds	r7, #8
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
	...

08005240 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b01      	cmp	r3, #1
 8005252:	d001      	beq.n	8005258 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e032      	b.n	80052be <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a18      	ldr	r2, [pc, #96]	; (80052c8 <HAL_TIM_Base_Start+0x88>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d00e      	beq.n	8005288 <HAL_TIM_Base_Start+0x48>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005272:	d009      	beq.n	8005288 <HAL_TIM_Base_Start+0x48>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a14      	ldr	r2, [pc, #80]	; (80052cc <HAL_TIM_Base_Start+0x8c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d004      	beq.n	8005288 <HAL_TIM_Base_Start+0x48>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a13      	ldr	r2, [pc, #76]	; (80052d0 <HAL_TIM_Base_Start+0x90>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d111      	bne.n	80052ac <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 0307 	and.w	r3, r3, #7
 8005292:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2b06      	cmp	r3, #6
 8005298:	d010      	beq.n	80052bc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f042 0201 	orr.w	r2, r2, #1
 80052a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052aa:	e007      	b.n	80052bc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0201 	orr.w	r2, r2, #1
 80052ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bc80      	pop	{r7}
 80052c6:	4770      	bx	lr
 80052c8:	40012c00 	.word	0x40012c00
 80052cc:	40000400 	.word	0x40000400
 80052d0:	40000800 	.word	0x40000800

080052d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d001      	beq.n	80052ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e03a      	b.n	8005362 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68da      	ldr	r2, [r3, #12]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 0201 	orr.w	r2, r2, #1
 8005302:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a18      	ldr	r2, [pc, #96]	; (800536c <HAL_TIM_Base_Start_IT+0x98>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d00e      	beq.n	800532c <HAL_TIM_Base_Start_IT+0x58>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005316:	d009      	beq.n	800532c <HAL_TIM_Base_Start_IT+0x58>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a14      	ldr	r2, [pc, #80]	; (8005370 <HAL_TIM_Base_Start_IT+0x9c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d004      	beq.n	800532c <HAL_TIM_Base_Start_IT+0x58>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a13      	ldr	r2, [pc, #76]	; (8005374 <HAL_TIM_Base_Start_IT+0xa0>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d111      	bne.n	8005350 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 0307 	and.w	r3, r3, #7
 8005336:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2b06      	cmp	r3, #6
 800533c:	d010      	beq.n	8005360 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f042 0201 	orr.w	r2, r2, #1
 800534c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800534e:	e007      	b.n	8005360 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0201 	orr.w	r2, r2, #1
 800535e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	bc80      	pop	{r7}
 800536a:	4770      	bx	lr
 800536c:	40012c00 	.word	0x40012c00
 8005370:	40000400 	.word	0x40000400
 8005374:	40000800 	.word	0x40000800

08005378 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e041      	b.n	800540e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d106      	bne.n	80053a4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f839 	bl	8005416 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	3304      	adds	r3, #4
 80053b4:	4619      	mov	r1, r3
 80053b6:	4610      	mov	r0, r2
 80053b8:	f000 fc4a 	bl	8005c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005416:	b480      	push	{r7}
 8005418:	b083      	sub	sp, #12
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800541e:	bf00      	nop
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	bc80      	pop	{r7}
 8005426:	4770      	bx	lr

08005428 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e041      	b.n	80054be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d106      	bne.n	8005454 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f839 	bl	80054c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3304      	adds	r3, #4
 8005464:	4619      	mov	r1, r3
 8005466:	4610      	mov	r0, r2
 8005468:	f000 fbf2 	bl	8005c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b083      	sub	sp, #12
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054ce:	bf00      	nop
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bc80      	pop	{r7}
 80054d6:	4770      	bx	lr

080054d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d109      	bne.n	80054fc <HAL_TIM_PWM_Start+0x24>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	bf14      	ite	ne
 80054f4:	2301      	movne	r3, #1
 80054f6:	2300      	moveq	r3, #0
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	e022      	b.n	8005542 <HAL_TIM_PWM_Start+0x6a>
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	2b04      	cmp	r3, #4
 8005500:	d109      	bne.n	8005516 <HAL_TIM_PWM_Start+0x3e>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b01      	cmp	r3, #1
 800550c:	bf14      	ite	ne
 800550e:	2301      	movne	r3, #1
 8005510:	2300      	moveq	r3, #0
 8005512:	b2db      	uxtb	r3, r3
 8005514:	e015      	b.n	8005542 <HAL_TIM_PWM_Start+0x6a>
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b08      	cmp	r3, #8
 800551a:	d109      	bne.n	8005530 <HAL_TIM_PWM_Start+0x58>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b01      	cmp	r3, #1
 8005526:	bf14      	ite	ne
 8005528:	2301      	movne	r3, #1
 800552a:	2300      	moveq	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	e008      	b.n	8005542 <HAL_TIM_PWM_Start+0x6a>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b01      	cmp	r3, #1
 800553a:	bf14      	ite	ne
 800553c:	2301      	movne	r3, #1
 800553e:	2300      	moveq	r3, #0
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e05e      	b.n	8005608 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d104      	bne.n	800555a <HAL_TIM_PWM_Start+0x82>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005558:	e013      	b.n	8005582 <HAL_TIM_PWM_Start+0xaa>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b04      	cmp	r3, #4
 800555e:	d104      	bne.n	800556a <HAL_TIM_PWM_Start+0x92>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005568:	e00b      	b.n	8005582 <HAL_TIM_PWM_Start+0xaa>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b08      	cmp	r3, #8
 800556e:	d104      	bne.n	800557a <HAL_TIM_PWM_Start+0xa2>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005578:	e003      	b.n	8005582 <HAL_TIM_PWM_Start+0xaa>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2202      	movs	r2, #2
 800557e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2201      	movs	r2, #1
 8005588:	6839      	ldr	r1, [r7, #0]
 800558a:	4618      	mov	r0, r3
 800558c:	f000 fde0 	bl	8006150 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a1e      	ldr	r2, [pc, #120]	; (8005610 <HAL_TIM_PWM_Start+0x138>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d107      	bne.n	80055aa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a18      	ldr	r2, [pc, #96]	; (8005610 <HAL_TIM_PWM_Start+0x138>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d00e      	beq.n	80055d2 <HAL_TIM_PWM_Start+0xfa>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055bc:	d009      	beq.n	80055d2 <HAL_TIM_PWM_Start+0xfa>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a14      	ldr	r2, [pc, #80]	; (8005614 <HAL_TIM_PWM_Start+0x13c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d004      	beq.n	80055d2 <HAL_TIM_PWM_Start+0xfa>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a12      	ldr	r2, [pc, #72]	; (8005618 <HAL_TIM_PWM_Start+0x140>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d111      	bne.n	80055f6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b06      	cmp	r3, #6
 80055e2:	d010      	beq.n	8005606 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 0201 	orr.w	r2, r2, #1
 80055f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f4:	e007      	b.n	8005606 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f042 0201 	orr.w	r2, r2, #1
 8005604:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	40012c00 	.word	0x40012c00
 8005614:	40000400 	.word	0x40000400
 8005618:	40000800 	.word	0x40000800

0800561c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b02      	cmp	r3, #2
 8005630:	d122      	bne.n	8005678 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b02      	cmp	r3, #2
 800563e:	d11b      	bne.n	8005678 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f06f 0202 	mvn.w	r2, #2
 8005648:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	f003 0303 	and.w	r3, r3, #3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 fadb 	bl	8005c1a <HAL_TIM_IC_CaptureCallback>
 8005664:	e005      	b.n	8005672 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 face 	bl	8005c08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 fadd 	bl	8005c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f003 0304 	and.w	r3, r3, #4
 8005682:	2b04      	cmp	r3, #4
 8005684:	d122      	bne.n	80056cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b04      	cmp	r3, #4
 8005692:	d11b      	bne.n	80056cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f06f 0204 	mvn.w	r2, #4
 800569c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2202      	movs	r2, #2
 80056a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 fab1 	bl	8005c1a <HAL_TIM_IC_CaptureCallback>
 80056b8:	e005      	b.n	80056c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 faa4 	bl	8005c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 fab3 	bl	8005c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f003 0308 	and.w	r3, r3, #8
 80056d6:	2b08      	cmp	r3, #8
 80056d8:	d122      	bne.n	8005720 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f003 0308 	and.w	r3, r3, #8
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d11b      	bne.n	8005720 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0208 	mvn.w	r2, #8
 80056f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2204      	movs	r2, #4
 80056f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	f003 0303 	and.w	r3, r3, #3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 fa87 	bl	8005c1a <HAL_TIM_IC_CaptureCallback>
 800570c:	e005      	b.n	800571a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 fa7a 	bl	8005c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 fa89 	bl	8005c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f003 0310 	and.w	r3, r3, #16
 800572a:	2b10      	cmp	r3, #16
 800572c:	d122      	bne.n	8005774 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f003 0310 	and.w	r3, r3, #16
 8005738:	2b10      	cmp	r3, #16
 800573a:	d11b      	bne.n	8005774 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f06f 0210 	mvn.w	r2, #16
 8005744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2208      	movs	r2, #8
 800574a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005756:	2b00      	cmp	r3, #0
 8005758:	d003      	beq.n	8005762 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fa5d 	bl	8005c1a <HAL_TIM_IC_CaptureCallback>
 8005760:	e005      	b.n	800576e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fa50 	bl	8005c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 fa5f 	bl	8005c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b01      	cmp	r3, #1
 8005780:	d10e      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b01      	cmp	r3, #1
 800578e:	d107      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f06f 0201 	mvn.w	r2, #1
 8005798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 fa2b 	bl	8005bf6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057aa:	2b80      	cmp	r3, #128	; 0x80
 80057ac:	d10e      	bne.n	80057cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b8:	2b80      	cmp	r3, #128	; 0x80
 80057ba:	d107      	bne.n	80057cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fd4d 	bl	8006266 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d6:	2b40      	cmp	r3, #64	; 0x40
 80057d8:	d10e      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e4:	2b40      	cmp	r3, #64	; 0x40
 80057e6:	d107      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fa23 	bl	8005c3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	f003 0320 	and.w	r3, r3, #32
 8005802:	2b20      	cmp	r3, #32
 8005804:	d10e      	bne.n	8005824 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f003 0320 	and.w	r3, r3, #32
 8005810:	2b20      	cmp	r3, #32
 8005812:	d107      	bne.n	8005824 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f06f 0220 	mvn.w	r2, #32
 800581c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 fd18 	bl	8006254 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005824:	bf00      	nop
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005838:	2300      	movs	r3, #0
 800583a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005842:	2b01      	cmp	r3, #1
 8005844:	d101      	bne.n	800584a <HAL_TIM_OC_ConfigChannel+0x1e>
 8005846:	2302      	movs	r3, #2
 8005848:	e048      	b.n	80058dc <HAL_TIM_OC_ConfigChannel+0xb0>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b0c      	cmp	r3, #12
 8005856:	d839      	bhi.n	80058cc <HAL_TIM_OC_ConfigChannel+0xa0>
 8005858:	a201      	add	r2, pc, #4	; (adr r2, 8005860 <HAL_TIM_OC_ConfigChannel+0x34>)
 800585a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585e:	bf00      	nop
 8005860:	08005895 	.word	0x08005895
 8005864:	080058cd 	.word	0x080058cd
 8005868:	080058cd 	.word	0x080058cd
 800586c:	080058cd 	.word	0x080058cd
 8005870:	080058a3 	.word	0x080058a3
 8005874:	080058cd 	.word	0x080058cd
 8005878:	080058cd 	.word	0x080058cd
 800587c:	080058cd 	.word	0x080058cd
 8005880:	080058b1 	.word	0x080058b1
 8005884:	080058cd 	.word	0x080058cd
 8005888:	080058cd 	.word	0x080058cd
 800588c:	080058cd 	.word	0x080058cd
 8005890:	080058bf 	.word	0x080058bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68b9      	ldr	r1, [r7, #8]
 800589a:	4618      	mov	r0, r3
 800589c:	f000 fa3a 	bl	8005d14 <TIM_OC1_SetConfig>
      break;
 80058a0:	e017      	b.n	80058d2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68b9      	ldr	r1, [r7, #8]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 fa99 	bl	8005de0 <TIM_OC2_SetConfig>
      break;
 80058ae:	e010      	b.n	80058d2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68b9      	ldr	r1, [r7, #8]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 fafc 	bl	8005eb4 <TIM_OC3_SetConfig>
      break;
 80058bc:	e009      	b.n	80058d2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68b9      	ldr	r1, [r7, #8]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f000 fb5f 	bl	8005f88 <TIM_OC4_SetConfig>
      break;
 80058ca:	e002      	b.n	80058d2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	75fb      	strb	r3, [r7, #23]
      break;
 80058d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058da:	7dfb      	ldrb	r3, [r7, #23]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3718      	adds	r7, #24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058f0:	2300      	movs	r3, #0
 80058f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d101      	bne.n	8005902 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058fe:	2302      	movs	r3, #2
 8005900:	e0ae      	b.n	8005a60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b0c      	cmp	r3, #12
 800590e:	f200 809f 	bhi.w	8005a50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005912:	a201      	add	r2, pc, #4	; (adr r2, 8005918 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005918:	0800594d 	.word	0x0800594d
 800591c:	08005a51 	.word	0x08005a51
 8005920:	08005a51 	.word	0x08005a51
 8005924:	08005a51 	.word	0x08005a51
 8005928:	0800598d 	.word	0x0800598d
 800592c:	08005a51 	.word	0x08005a51
 8005930:	08005a51 	.word	0x08005a51
 8005934:	08005a51 	.word	0x08005a51
 8005938:	080059cf 	.word	0x080059cf
 800593c:	08005a51 	.word	0x08005a51
 8005940:	08005a51 	.word	0x08005a51
 8005944:	08005a51 	.word	0x08005a51
 8005948:	08005a0f 	.word	0x08005a0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68b9      	ldr	r1, [r7, #8]
 8005952:	4618      	mov	r0, r3
 8005954:	f000 f9de 	bl	8005d14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	699a      	ldr	r2, [r3, #24]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0208 	orr.w	r2, r2, #8
 8005966:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	699a      	ldr	r2, [r3, #24]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 0204 	bic.w	r2, r2, #4
 8005976:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6999      	ldr	r1, [r3, #24]
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	691a      	ldr	r2, [r3, #16]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	430a      	orrs	r2, r1
 8005988:	619a      	str	r2, [r3, #24]
      break;
 800598a:	e064      	b.n	8005a56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68b9      	ldr	r1, [r7, #8]
 8005992:	4618      	mov	r0, r3
 8005994:	f000 fa24 	bl	8005de0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	699a      	ldr	r2, [r3, #24]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699a      	ldr	r2, [r3, #24]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6999      	ldr	r1, [r3, #24]
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	021a      	lsls	r2, r3, #8
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	430a      	orrs	r2, r1
 80059ca:	619a      	str	r2, [r3, #24]
      break;
 80059cc:	e043      	b.n	8005a56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68b9      	ldr	r1, [r7, #8]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 fa6d 	bl	8005eb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	69da      	ldr	r2, [r3, #28]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f042 0208 	orr.w	r2, r2, #8
 80059e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	69da      	ldr	r2, [r3, #28]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 0204 	bic.w	r2, r2, #4
 80059f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	69d9      	ldr	r1, [r3, #28]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	691a      	ldr	r2, [r3, #16]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	61da      	str	r2, [r3, #28]
      break;
 8005a0c:	e023      	b.n	8005a56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68b9      	ldr	r1, [r7, #8]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 fab7 	bl	8005f88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	69da      	ldr	r2, [r3, #28]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69da      	ldr	r2, [r3, #28]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	69d9      	ldr	r1, [r3, #28]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	021a      	lsls	r2, r3, #8
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	61da      	str	r2, [r3, #28]
      break;
 8005a4e:	e002      	b.n	8005a56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	75fb      	strb	r3, [r7, #23]
      break;
 8005a54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3718      	adds	r7, #24
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a72:	2300      	movs	r3, #0
 8005a74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d101      	bne.n	8005a84 <HAL_TIM_ConfigClockSource+0x1c>
 8005a80:	2302      	movs	r3, #2
 8005a82:	e0b4      	b.n	8005bee <HAL_TIM_ConfigClockSource+0x186>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005aa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005abc:	d03e      	beq.n	8005b3c <HAL_TIM_ConfigClockSource+0xd4>
 8005abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ac2:	f200 8087 	bhi.w	8005bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aca:	f000 8086 	beq.w	8005bda <HAL_TIM_ConfigClockSource+0x172>
 8005ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad2:	d87f      	bhi.n	8005bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ad4:	2b70      	cmp	r3, #112	; 0x70
 8005ad6:	d01a      	beq.n	8005b0e <HAL_TIM_ConfigClockSource+0xa6>
 8005ad8:	2b70      	cmp	r3, #112	; 0x70
 8005ada:	d87b      	bhi.n	8005bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005adc:	2b60      	cmp	r3, #96	; 0x60
 8005ade:	d050      	beq.n	8005b82 <HAL_TIM_ConfigClockSource+0x11a>
 8005ae0:	2b60      	cmp	r3, #96	; 0x60
 8005ae2:	d877      	bhi.n	8005bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae4:	2b50      	cmp	r3, #80	; 0x50
 8005ae6:	d03c      	beq.n	8005b62 <HAL_TIM_ConfigClockSource+0xfa>
 8005ae8:	2b50      	cmp	r3, #80	; 0x50
 8005aea:	d873      	bhi.n	8005bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005aec:	2b40      	cmp	r3, #64	; 0x40
 8005aee:	d058      	beq.n	8005ba2 <HAL_TIM_ConfigClockSource+0x13a>
 8005af0:	2b40      	cmp	r3, #64	; 0x40
 8005af2:	d86f      	bhi.n	8005bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005af4:	2b30      	cmp	r3, #48	; 0x30
 8005af6:	d064      	beq.n	8005bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8005af8:	2b30      	cmp	r3, #48	; 0x30
 8005afa:	d86b      	bhi.n	8005bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005afc:	2b20      	cmp	r3, #32
 8005afe:	d060      	beq.n	8005bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8005b00:	2b20      	cmp	r3, #32
 8005b02:	d867      	bhi.n	8005bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d05c      	beq.n	8005bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8005b08:	2b10      	cmp	r3, #16
 8005b0a:	d05a      	beq.n	8005bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8005b0c:	e062      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6818      	ldr	r0, [r3, #0]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	6899      	ldr	r1, [r3, #8]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	f000 faf8 	bl	8006112 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	609a      	str	r2, [r3, #8]
      break;
 8005b3a:	e04f      	b.n	8005bdc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6818      	ldr	r0, [r3, #0]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	6899      	ldr	r1, [r3, #8]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f000 fae1 	bl	8006112 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	689a      	ldr	r2, [r3, #8]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b5e:	609a      	str	r2, [r3, #8]
      break;
 8005b60:	e03c      	b.n	8005bdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6818      	ldr	r0, [r3, #0]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	6859      	ldr	r1, [r3, #4]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	f000 fa58 	bl	8006024 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2150      	movs	r1, #80	; 0x50
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 faaf 	bl	80060de <TIM_ITRx_SetConfig>
      break;
 8005b80:	e02c      	b.n	8005bdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6818      	ldr	r0, [r3, #0]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	6859      	ldr	r1, [r3, #4]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	f000 fa76 	bl	8006080 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2160      	movs	r1, #96	; 0x60
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 fa9f 	bl	80060de <TIM_ITRx_SetConfig>
      break;
 8005ba0:	e01c      	b.n	8005bdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6818      	ldr	r0, [r3, #0]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	6859      	ldr	r1, [r3, #4]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	461a      	mov	r2, r3
 8005bb0:	f000 fa38 	bl	8006024 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2140      	movs	r1, #64	; 0x40
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f000 fa8f 	bl	80060de <TIM_ITRx_SetConfig>
      break;
 8005bc0:	e00c      	b.n	8005bdc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4619      	mov	r1, r3
 8005bcc:	4610      	mov	r0, r2
 8005bce:	f000 fa86 	bl	80060de <TIM_ITRx_SetConfig>
      break;
 8005bd2:	e003      	b.n	8005bdc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8005bd8:	e000      	b.n	8005bdc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005bda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b083      	sub	sp, #12
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005bfe:	bf00      	nop
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bc80      	pop	{r7}
 8005c06:	4770      	bx	lr

08005c08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bc80      	pop	{r7}
 8005c18:	4770      	bx	lr

08005c1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b083      	sub	sp, #12
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c22:	bf00      	nop
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bc80      	pop	{r7}
 8005c2a:	4770      	bx	lr

08005c2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bc80      	pop	{r7}
 8005c3c:	4770      	bx	lr

08005c3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b083      	sub	sp, #12
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c46:	bf00      	nop
 8005c48:	370c      	adds	r7, #12
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bc80      	pop	{r7}
 8005c4e:	4770      	bx	lr

08005c50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a29      	ldr	r2, [pc, #164]	; (8005d08 <TIM_Base_SetConfig+0xb8>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d00b      	beq.n	8005c80 <TIM_Base_SetConfig+0x30>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c6e:	d007      	beq.n	8005c80 <TIM_Base_SetConfig+0x30>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a26      	ldr	r2, [pc, #152]	; (8005d0c <TIM_Base_SetConfig+0xbc>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d003      	beq.n	8005c80 <TIM_Base_SetConfig+0x30>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a25      	ldr	r2, [pc, #148]	; (8005d10 <TIM_Base_SetConfig+0xc0>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d108      	bne.n	8005c92 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a1c      	ldr	r2, [pc, #112]	; (8005d08 <TIM_Base_SetConfig+0xb8>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d00b      	beq.n	8005cb2 <TIM_Base_SetConfig+0x62>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca0:	d007      	beq.n	8005cb2 <TIM_Base_SetConfig+0x62>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a19      	ldr	r2, [pc, #100]	; (8005d0c <TIM_Base_SetConfig+0xbc>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d003      	beq.n	8005cb2 <TIM_Base_SetConfig+0x62>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a18      	ldr	r2, [pc, #96]	; (8005d10 <TIM_Base_SetConfig+0xc0>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d108      	bne.n	8005cc4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	689a      	ldr	r2, [r3, #8]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a07      	ldr	r2, [pc, #28]	; (8005d08 <TIM_Base_SetConfig+0xb8>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d103      	bne.n	8005cf8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	691a      	ldr	r2, [r3, #16]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	615a      	str	r2, [r3, #20]
}
 8005cfe:	bf00      	nop
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bc80      	pop	{r7}
 8005d06:	4770      	bx	lr
 8005d08:	40012c00 	.word	0x40012c00
 8005d0c:	40000400 	.word	0x40000400
 8005d10:	40000800 	.word	0x40000800

08005d14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	f023 0201 	bic.w	r2, r3, #1
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f023 0303 	bic.w	r3, r3, #3
 8005d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f023 0302 	bic.w	r3, r3, #2
 8005d5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a1c      	ldr	r2, [pc, #112]	; (8005ddc <TIM_OC1_SetConfig+0xc8>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d10c      	bne.n	8005d8a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f023 0308 	bic.w	r3, r3, #8
 8005d76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	f023 0304 	bic.w	r3, r3, #4
 8005d88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a13      	ldr	r2, [pc, #76]	; (8005ddc <TIM_OC1_SetConfig+0xc8>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d111      	bne.n	8005db6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005da0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	621a      	str	r2, [r3, #32]
}
 8005dd0:	bf00      	nop
 8005dd2:	371c      	adds	r7, #28
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bc80      	pop	{r7}
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	40012c00 	.word	0x40012c00

08005de0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	f023 0210 	bic.w	r2, r3, #16
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	021b      	lsls	r3, r3, #8
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f023 0320 	bic.w	r3, r3, #32
 8005e2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	011b      	lsls	r3, r3, #4
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a1d      	ldr	r2, [pc, #116]	; (8005eb0 <TIM_OC2_SetConfig+0xd0>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d10d      	bne.n	8005e5c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	011b      	lsls	r3, r3, #4
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a14      	ldr	r2, [pc, #80]	; (8005eb0 <TIM_OC2_SetConfig+0xd0>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d113      	bne.n	8005e8c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	621a      	str	r2, [r3, #32]
}
 8005ea6:	bf00      	nop
 8005ea8:	371c      	adds	r7, #28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bc80      	pop	{r7}
 8005eae:	4770      	bx	lr
 8005eb0:	40012c00 	.word	0x40012c00

08005eb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f023 0303 	bic.w	r3, r3, #3
 8005eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005efc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	021b      	lsls	r3, r3, #8
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a1d      	ldr	r2, [pc, #116]	; (8005f84 <TIM_OC3_SetConfig+0xd0>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d10d      	bne.n	8005f2e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	021b      	lsls	r3, r3, #8
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a14      	ldr	r2, [pc, #80]	; (8005f84 <TIM_OC3_SetConfig+0xd0>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d113      	bne.n	8005f5e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	011b      	lsls	r3, r3, #4
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	011b      	lsls	r3, r3, #4
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	621a      	str	r2, [r3, #32]
}
 8005f78:	bf00      	nop
 8005f7a:	371c      	adds	r7, #28
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bc80      	pop	{r7}
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	40012c00 	.word	0x40012c00

08005f88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b087      	sub	sp, #28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	021b      	lsls	r3, r3, #8
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	031b      	lsls	r3, r3, #12
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a0f      	ldr	r2, [pc, #60]	; (8006020 <TIM_OC4_SetConfig+0x98>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d109      	bne.n	8005ffc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	019b      	lsls	r3, r3, #6
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	621a      	str	r2, [r3, #32]
}
 8006016:	bf00      	nop
 8006018:	371c      	adds	r7, #28
 800601a:	46bd      	mov	sp, r7
 800601c:	bc80      	pop	{r7}
 800601e:	4770      	bx	lr
 8006020:	40012c00 	.word	0x40012c00

08006024 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006024:	b480      	push	{r7}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	f023 0201 	bic.w	r2, r3, #1
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800604e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	011b      	lsls	r3, r3, #4
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	4313      	orrs	r3, r2
 8006058:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f023 030a 	bic.w	r3, r3, #10
 8006060:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	4313      	orrs	r3, r2
 8006068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	621a      	str	r2, [r3, #32]
}
 8006076:	bf00      	nop
 8006078:	371c      	adds	r7, #28
 800607a:	46bd      	mov	sp, r7
 800607c:	bc80      	pop	{r7}
 800607e:	4770      	bx	lr

08006080 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006080:	b480      	push	{r7}
 8006082:	b087      	sub	sp, #28
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6a1b      	ldr	r3, [r3, #32]
 8006090:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	f023 0210 	bic.w	r2, r3, #16
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	031b      	lsls	r3, r3, #12
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060bc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	011b      	lsls	r3, r3, #4
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	621a      	str	r2, [r3, #32]
}
 80060d4:	bf00      	nop
 80060d6:	371c      	adds	r7, #28
 80060d8:	46bd      	mov	sp, r7
 80060da:	bc80      	pop	{r7}
 80060dc:	4770      	bx	lr

080060de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060de:	b480      	push	{r7}
 80060e0:	b085      	sub	sp, #20
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	f043 0307 	orr.w	r3, r3, #7
 8006100:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	609a      	str	r2, [r3, #8]
}
 8006108:	bf00      	nop
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	bc80      	pop	{r7}
 8006110:	4770      	bx	lr

08006112 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006112:	b480      	push	{r7}
 8006114:	b087      	sub	sp, #28
 8006116:	af00      	add	r7, sp, #0
 8006118:	60f8      	str	r0, [r7, #12]
 800611a:	60b9      	str	r1, [r7, #8]
 800611c:	607a      	str	r2, [r7, #4]
 800611e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800612c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	021a      	lsls	r2, r3, #8
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	431a      	orrs	r2, r3
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	4313      	orrs	r3, r2
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	4313      	orrs	r3, r2
 800613e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	609a      	str	r2, [r3, #8]
}
 8006146:	bf00      	nop
 8006148:	371c      	adds	r7, #28
 800614a:	46bd      	mov	sp, r7
 800614c:	bc80      	pop	{r7}
 800614e:	4770      	bx	lr

08006150 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006150:	b480      	push	{r7}
 8006152:	b087      	sub	sp, #28
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	f003 031f 	and.w	r3, r3, #31
 8006162:	2201      	movs	r2, #1
 8006164:	fa02 f303 	lsl.w	r3, r2, r3
 8006168:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6a1a      	ldr	r2, [r3, #32]
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	43db      	mvns	r3, r3
 8006172:	401a      	ands	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6a1a      	ldr	r2, [r3, #32]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	f003 031f 	and.w	r3, r3, #31
 8006182:	6879      	ldr	r1, [r7, #4]
 8006184:	fa01 f303 	lsl.w	r3, r1, r3
 8006188:	431a      	orrs	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	621a      	str	r2, [r3, #32]
}
 800618e:	bf00      	nop
 8006190:	371c      	adds	r7, #28
 8006192:	46bd      	mov	sp, r7
 8006194:	bc80      	pop	{r7}
 8006196:	4770      	bx	lr

08006198 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d101      	bne.n	80061b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061ac:	2302      	movs	r3, #2
 80061ae:	e046      	b.n	800623e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2202      	movs	r2, #2
 80061bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	4313      	orrs	r3, r2
 80061e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a16      	ldr	r2, [pc, #88]	; (8006248 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d00e      	beq.n	8006212 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061fc:	d009      	beq.n	8006212 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a12      	ldr	r2, [pc, #72]	; (800624c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d004      	beq.n	8006212 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a10      	ldr	r2, [pc, #64]	; (8006250 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d10c      	bne.n	800622c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006218:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	4313      	orrs	r3, r2
 8006222:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3714      	adds	r7, #20
 8006242:	46bd      	mov	sp, r7
 8006244:	bc80      	pop	{r7}
 8006246:	4770      	bx	lr
 8006248:	40012c00 	.word	0x40012c00
 800624c:	40000400 	.word	0x40000400
 8006250:	40000800 	.word	0x40000800

08006254 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	bc80      	pop	{r7}
 8006264:	4770      	bx	lr

08006266 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006266:	b480      	push	{r7}
 8006268:	b083      	sub	sp, #12
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800626e:	bf00      	nop
 8006270:	370c      	adds	r7, #12
 8006272:	46bd      	mov	sp, r7
 8006274:	bc80      	pop	{r7}
 8006276:	4770      	bx	lr

08006278 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e042      	b.n	8006310 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d106      	bne.n	80062a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7fd f870 	bl	8003384 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2224      	movs	r2, #36	; 0x24
 80062a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68da      	ldr	r2, [r3, #12]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 fdc5 	bl	8006e4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	691a      	ldr	r2, [r3, #16]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	695a      	ldr	r2, [r3, #20]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68da      	ldr	r2, [r3, #12]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2220      	movs	r2, #32
 80062fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2220      	movs	r2, #32
 8006304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b08a      	sub	sp, #40	; 0x28
 800631c:	af02      	add	r7, sp, #8
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	603b      	str	r3, [r7, #0]
 8006324:	4613      	mov	r3, r2
 8006326:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006328:	2300      	movs	r3, #0
 800632a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b20      	cmp	r3, #32
 8006336:	d16d      	bne.n	8006414 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d002      	beq.n	8006344 <HAL_UART_Transmit+0x2c>
 800633e:	88fb      	ldrh	r3, [r7, #6]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d101      	bne.n	8006348 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e066      	b.n	8006416 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2221      	movs	r2, #33	; 0x21
 8006352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006356:	f7fd f923 	bl	80035a0 <HAL_GetTick>
 800635a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	88fa      	ldrh	r2, [r7, #6]
 8006360:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	88fa      	ldrh	r2, [r7, #6]
 8006366:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006370:	d108      	bne.n	8006384 <HAL_UART_Transmit+0x6c>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d104      	bne.n	8006384 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800637a:	2300      	movs	r3, #0
 800637c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	61bb      	str	r3, [r7, #24]
 8006382:	e003      	b.n	800638c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006388:	2300      	movs	r3, #0
 800638a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800638c:	e02a      	b.n	80063e4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2200      	movs	r2, #0
 8006396:	2180      	movs	r1, #128	; 0x80
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 fb14 	bl	80069c6 <UART_WaitOnFlagUntilTimeout>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e036      	b.n	8006416 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10b      	bne.n	80063c6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	461a      	mov	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	3302      	adds	r3, #2
 80063c2:	61bb      	str	r3, [r7, #24]
 80063c4:	e007      	b.n	80063d6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	781a      	ldrb	r2, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	3301      	adds	r3, #1
 80063d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063da:	b29b      	uxth	r3, r3
 80063dc:	3b01      	subs	r3, #1
 80063de:	b29a      	uxth	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1cf      	bne.n	800638e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	2200      	movs	r2, #0
 80063f6:	2140      	movs	r1, #64	; 0x40
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 fae4 	bl	80069c6 <UART_WaitOnFlagUntilTimeout>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e006      	b.n	8006416 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2220      	movs	r2, #32
 800640c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006410:	2300      	movs	r3, #0
 8006412:	e000      	b.n	8006416 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006414:	2302      	movs	r3, #2
  }
}
 8006416:	4618      	mov	r0, r3
 8006418:	3720      	adds	r7, #32
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	60f8      	str	r0, [r7, #12]
 8006426:	60b9      	str	r1, [r7, #8]
 8006428:	4613      	mov	r3, r2
 800642a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b20      	cmp	r3, #32
 8006436:	d112      	bne.n	800645e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d002      	beq.n	8006444 <HAL_UART_Receive_IT+0x26>
 800643e:	88fb      	ldrh	r3, [r7, #6]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d101      	bne.n	8006448 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e00b      	b.n	8006460 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800644e:	88fb      	ldrh	r3, [r7, #6]
 8006450:	461a      	mov	r2, r3
 8006452:	68b9      	ldr	r1, [r7, #8]
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f000 fb24 	bl	8006aa2 <UART_Start_Receive_IT>
 800645a:	4603      	mov	r3, r0
 800645c:	e000      	b.n	8006460 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800645e:	2302      	movs	r3, #2
  }
}
 8006460:	4618      	mov	r0, r3
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b0ba      	sub	sp, #232	; 0xe8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800648e:	2300      	movs	r3, #0
 8006490:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006494:	2300      	movs	r3, #0
 8006496:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800649a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800649e:	f003 030f 	and.w	r3, r3, #15
 80064a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80064a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10f      	bne.n	80064ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b2:	f003 0320 	and.w	r3, r3, #32
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d009      	beq.n	80064ce <HAL_UART_IRQHandler+0x66>
 80064ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064be:	f003 0320 	and.w	r3, r3, #32
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 fc01 	bl	8006cce <UART_Receive_IT>
      return;
 80064cc:	e25b      	b.n	8006986 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80064ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 80de 	beq.w	8006694 <HAL_UART_IRQHandler+0x22c>
 80064d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064dc:	f003 0301 	and.w	r3, r3, #1
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d106      	bne.n	80064f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80064e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f000 80d1 	beq.w	8006694 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80064f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00b      	beq.n	8006516 <HAL_UART_IRQHandler+0xae>
 80064fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006506:	2b00      	cmp	r3, #0
 8006508:	d005      	beq.n	8006516 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800650e:	f043 0201 	orr.w	r2, r3, #1
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800651a:	f003 0304 	and.w	r3, r3, #4
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00b      	beq.n	800653a <HAL_UART_IRQHandler+0xd2>
 8006522:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b00      	cmp	r3, #0
 800652c:	d005      	beq.n	800653a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006532:	f043 0202 	orr.w	r2, r3, #2
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800653a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00b      	beq.n	800655e <HAL_UART_IRQHandler+0xf6>
 8006546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b00      	cmp	r3, #0
 8006550:	d005      	beq.n	800655e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006556:	f043 0204 	orr.w	r2, r3, #4
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800655e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006562:	f003 0308 	and.w	r3, r3, #8
 8006566:	2b00      	cmp	r3, #0
 8006568:	d011      	beq.n	800658e <HAL_UART_IRQHandler+0x126>
 800656a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800656e:	f003 0320 	and.w	r3, r3, #32
 8006572:	2b00      	cmp	r3, #0
 8006574:	d105      	bne.n	8006582 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	2b00      	cmp	r3, #0
 8006580:	d005      	beq.n	800658e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006586:	f043 0208 	orr.w	r2, r3, #8
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 81f2 	beq.w	800697c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800659c:	f003 0320 	and.w	r3, r3, #32
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d008      	beq.n	80065b6 <HAL_UART_IRQHandler+0x14e>
 80065a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065a8:	f003 0320 	and.w	r3, r3, #32
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d002      	beq.n	80065b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fb8c 	bl	8006cce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	bf14      	ite	ne
 80065c4:	2301      	movne	r3, #1
 80065c6:	2300      	moveq	r3, #0
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d2:	f003 0308 	and.w	r3, r3, #8
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d103      	bne.n	80065e2 <HAL_UART_IRQHandler+0x17a>
 80065da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d04f      	beq.n	8006682 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 fa96 	bl	8006b14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d041      	beq.n	800667a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3314      	adds	r3, #20
 80065fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006600:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006604:	e853 3f00 	ldrex	r3, [r3]
 8006608:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800660c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006614:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	3314      	adds	r3, #20
 800661e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006622:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006626:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800662e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006632:	e841 2300 	strex	r3, r2, [r1]
 8006636:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800663a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1d9      	bne.n	80065f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006646:	2b00      	cmp	r3, #0
 8006648:	d013      	beq.n	8006672 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664e:	4a7e      	ldr	r2, [pc, #504]	; (8006848 <HAL_UART_IRQHandler+0x3e0>)
 8006650:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006656:	4618      	mov	r0, r3
 8006658:	f7fd fd7c 	bl	8004154 <HAL_DMA_Abort_IT>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d016      	beq.n	8006690 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800666c:	4610      	mov	r0, r2
 800666e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006670:	e00e      	b.n	8006690 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f993 	bl	800699e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006678:	e00a      	b.n	8006690 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f98f 	bl	800699e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006680:	e006      	b.n	8006690 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f98b 	bl	800699e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800668e:	e175      	b.n	800697c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006690:	bf00      	nop
    return;
 8006692:	e173      	b.n	800697c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006698:	2b01      	cmp	r3, #1
 800669a:	f040 814f 	bne.w	800693c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800669e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a2:	f003 0310 	and.w	r3, r3, #16
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f000 8148 	beq.w	800693c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80066ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066b0:	f003 0310 	and.w	r3, r3, #16
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f000 8141 	beq.w	800693c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066ba:	2300      	movs	r3, #0
 80066bc:	60bb      	str	r3, [r7, #8]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	60bb      	str	r3, [r7, #8]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	60bb      	str	r3, [r7, #8]
 80066ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f000 80b6 	beq.w	800684c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80066ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f000 8145 	beq.w	8006980 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066fe:	429a      	cmp	r2, r3
 8006700:	f080 813e 	bcs.w	8006980 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800670a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	2b20      	cmp	r3, #32
 8006714:	f000 8088 	beq.w	8006828 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	330c      	adds	r3, #12
 800671e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006722:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006726:	e853 3f00 	ldrex	r3, [r3]
 800672a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800672e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006732:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006736:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	330c      	adds	r3, #12
 8006740:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006744:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006748:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006750:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006754:	e841 2300 	strex	r3, r2, [r1]
 8006758:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800675c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1d9      	bne.n	8006718 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	3314      	adds	r3, #20
 800676a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800676e:	e853 3f00 	ldrex	r3, [r3]
 8006772:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006774:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006776:	f023 0301 	bic.w	r3, r3, #1
 800677a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	3314      	adds	r3, #20
 8006784:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006788:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800678c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006790:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006794:	e841 2300 	strex	r3, r2, [r1]
 8006798:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800679a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1e1      	bne.n	8006764 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	3314      	adds	r3, #20
 80067a6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067aa:	e853 3f00 	ldrex	r3, [r3]
 80067ae:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80067b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	3314      	adds	r3, #20
 80067c0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80067c4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80067c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80067ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80067cc:	e841 2300 	strex	r3, r2, [r1]
 80067d0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80067d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1e3      	bne.n	80067a0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2220      	movs	r2, #32
 80067dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	330c      	adds	r3, #12
 80067ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067f0:	e853 3f00 	ldrex	r3, [r3]
 80067f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80067f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067f8:	f023 0310 	bic.w	r3, r3, #16
 80067fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	330c      	adds	r3, #12
 8006806:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800680a:	65ba      	str	r2, [r7, #88]	; 0x58
 800680c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006810:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006812:	e841 2300 	strex	r3, r2, [r1]
 8006816:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1e3      	bne.n	80067e6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006822:	4618      	mov	r0, r3
 8006824:	f7fd fc5a 	bl	80040dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2202      	movs	r2, #2
 800682c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006836:	b29b      	uxth	r3, r3
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	b29b      	uxth	r3, r3
 800683c:	4619      	mov	r1, r3
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 f8b6 	bl	80069b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006844:	e09c      	b.n	8006980 <HAL_UART_IRQHandler+0x518>
 8006846:	bf00      	nop
 8006848:	08006bd9 	.word	0x08006bd9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006854:	b29b      	uxth	r3, r3
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006860:	b29b      	uxth	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 808e 	beq.w	8006984 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006868:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 8089 	beq.w	8006984 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	330c      	adds	r3, #12
 8006878:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687c:	e853 3f00 	ldrex	r3, [r3]
 8006880:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006884:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006888:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	330c      	adds	r3, #12
 8006892:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006896:	647a      	str	r2, [r7, #68]	; 0x44
 8006898:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800689c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800689e:	e841 2300 	strex	r3, r2, [r1]
 80068a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1e3      	bne.n	8006872 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	3314      	adds	r3, #20
 80068b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b4:	e853 3f00 	ldrex	r3, [r3]
 80068b8:	623b      	str	r3, [r7, #32]
   return(result);
 80068ba:	6a3b      	ldr	r3, [r7, #32]
 80068bc:	f023 0301 	bic.w	r3, r3, #1
 80068c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3314      	adds	r3, #20
 80068ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80068ce:	633a      	str	r2, [r7, #48]	; 0x30
 80068d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068d6:	e841 2300 	strex	r3, r2, [r1]
 80068da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1e3      	bne.n	80068aa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2220      	movs	r2, #32
 80068e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	330c      	adds	r3, #12
 80068f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	e853 3f00 	ldrex	r3, [r3]
 80068fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f023 0310 	bic.w	r3, r3, #16
 8006906:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	330c      	adds	r3, #12
 8006910:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006914:	61fa      	str	r2, [r7, #28]
 8006916:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006918:	69b9      	ldr	r1, [r7, #24]
 800691a:	69fa      	ldr	r2, [r7, #28]
 800691c:	e841 2300 	strex	r3, r2, [r1]
 8006920:	617b      	str	r3, [r7, #20]
   return(result);
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1e3      	bne.n	80068f0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2202      	movs	r2, #2
 800692c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800692e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006932:	4619      	mov	r1, r3
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 f83b 	bl	80069b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800693a:	e023      	b.n	8006984 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800693c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006944:	2b00      	cmp	r3, #0
 8006946:	d009      	beq.n	800695c <HAL_UART_IRQHandler+0x4f4>
 8006948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800694c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006950:	2b00      	cmp	r3, #0
 8006952:	d003      	beq.n	800695c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 f953 	bl	8006c00 <UART_Transmit_IT>
    return;
 800695a:	e014      	b.n	8006986 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800695c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00e      	beq.n	8006986 <HAL_UART_IRQHandler+0x51e>
 8006968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800696c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006970:	2b00      	cmp	r3, #0
 8006972:	d008      	beq.n	8006986 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f992 	bl	8006c9e <UART_EndTransmit_IT>
    return;
 800697a:	e004      	b.n	8006986 <HAL_UART_IRQHandler+0x51e>
    return;
 800697c:	bf00      	nop
 800697e:	e002      	b.n	8006986 <HAL_UART_IRQHandler+0x51e>
      return;
 8006980:	bf00      	nop
 8006982:	e000      	b.n	8006986 <HAL_UART_IRQHandler+0x51e>
      return;
 8006984:	bf00      	nop
  }
}
 8006986:	37e8      	adds	r7, #232	; 0xe8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006994:	bf00      	nop
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	bc80      	pop	{r7}
 800699c:	4770      	bx	lr

0800699e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800699e:	b480      	push	{r7}
 80069a0:	b083      	sub	sp, #12
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80069a6:	bf00      	nop
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bc80      	pop	{r7}
 80069ae:	4770      	bx	lr

080069b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	460b      	mov	r3, r1
 80069ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069bc:	bf00      	nop
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bc80      	pop	{r7}
 80069c4:	4770      	bx	lr

080069c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b090      	sub	sp, #64	; 0x40
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	60f8      	str	r0, [r7, #12]
 80069ce:	60b9      	str	r1, [r7, #8]
 80069d0:	603b      	str	r3, [r7, #0]
 80069d2:	4613      	mov	r3, r2
 80069d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069d6:	e050      	b.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069de:	d04c      	beq.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80069e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d007      	beq.n	80069f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80069e6:	f7fc fddb 	bl	80035a0 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d241      	bcs.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	330c      	adds	r3, #12
 80069fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a00:	e853 3f00 	ldrex	r3, [r3]
 8006a04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	330c      	adds	r3, #12
 8006a14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a16:	637a      	str	r2, [r7, #52]	; 0x34
 8006a18:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a1e:	e841 2300 	strex	r3, r2, [r1]
 8006a22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1e5      	bne.n	80069f6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	3314      	adds	r3, #20
 8006a30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	e853 3f00 	ldrex	r3, [r3]
 8006a38:	613b      	str	r3, [r7, #16]
   return(result);
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	f023 0301 	bic.w	r3, r3, #1
 8006a40:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3314      	adds	r3, #20
 8006a48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a4a:	623a      	str	r2, [r7, #32]
 8006a4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4e:	69f9      	ldr	r1, [r7, #28]
 8006a50:	6a3a      	ldr	r2, [r7, #32]
 8006a52:	e841 2300 	strex	r3, r2, [r1]
 8006a56:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1e5      	bne.n	8006a2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2220      	movs	r2, #32
 8006a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2220      	movs	r2, #32
 8006a6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e00f      	b.n	8006a9a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	4013      	ands	r3, r2
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	bf0c      	ite	eq
 8006a8a:	2301      	moveq	r3, #1
 8006a8c:	2300      	movne	r3, #0
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	461a      	mov	r2, r3
 8006a92:	79fb      	ldrb	r3, [r7, #7]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d09f      	beq.n	80069d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3740      	adds	r7, #64	; 0x40
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b085      	sub	sp, #20
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	60f8      	str	r0, [r7, #12]
 8006aaa:	60b9      	str	r1, [r7, #8]
 8006aac:	4613      	mov	r3, r2
 8006aae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	88fa      	ldrh	r2, [r7, #6]
 8006aba:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	88fa      	ldrh	r2, [r7, #6]
 8006ac0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2222      	movs	r2, #34	; 0x22
 8006acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d007      	beq.n	8006ae8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68da      	ldr	r2, [r3, #12]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ae6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	695a      	ldr	r2, [r3, #20]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f042 0201 	orr.w	r2, r2, #1
 8006af6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68da      	ldr	r2, [r3, #12]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f042 0220 	orr.w	r2, r2, #32
 8006b06:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bc80      	pop	{r7}
 8006b12:	4770      	bx	lr

08006b14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b095      	sub	sp, #84	; 0x54
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	330c      	adds	r3, #12
 8006b22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b26:	e853 3f00 	ldrex	r3, [r3]
 8006b2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	330c      	adds	r3, #12
 8006b3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b3c:	643a      	str	r2, [r7, #64]	; 0x40
 8006b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b44:	e841 2300 	strex	r3, r2, [r1]
 8006b48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1e5      	bne.n	8006b1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3314      	adds	r3, #20
 8006b56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b58:	6a3b      	ldr	r3, [r7, #32]
 8006b5a:	e853 3f00 	ldrex	r3, [r3]
 8006b5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	f023 0301 	bic.w	r3, r3, #1
 8006b66:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	3314      	adds	r3, #20
 8006b6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b78:	e841 2300 	strex	r3, r2, [r1]
 8006b7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1e5      	bne.n	8006b50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d119      	bne.n	8006bc0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	330c      	adds	r3, #12
 8006b92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	e853 3f00 	ldrex	r3, [r3]
 8006b9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	f023 0310 	bic.w	r3, r3, #16
 8006ba2:	647b      	str	r3, [r7, #68]	; 0x44
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	330c      	adds	r3, #12
 8006baa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bac:	61ba      	str	r2, [r7, #24]
 8006bae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb0:	6979      	ldr	r1, [r7, #20]
 8006bb2:	69ba      	ldr	r2, [r7, #24]
 8006bb4:	e841 2300 	strex	r3, r2, [r1]
 8006bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1e5      	bne.n	8006b8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006bce:	bf00      	nop
 8006bd0:	3754      	adds	r7, #84	; 0x54
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bc80      	pop	{r7}
 8006bd6:	4770      	bx	lr

08006bd8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f7ff fed3 	bl	800699e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bf8:	bf00      	nop
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	2b21      	cmp	r3, #33	; 0x21
 8006c12:	d13e      	bne.n	8006c92 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c1c:	d114      	bne.n	8006c48 <UART_Transmit_IT+0x48>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d110      	bne.n	8006c48 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	461a      	mov	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c3a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a1b      	ldr	r3, [r3, #32]
 8006c40:	1c9a      	adds	r2, r3, #2
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	621a      	str	r2, [r3, #32]
 8006c46:	e008      	b.n	8006c5a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	1c59      	adds	r1, r3, #1
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	6211      	str	r1, [r2, #32]
 8006c52:	781a      	ldrb	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	3b01      	subs	r3, #1
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	4619      	mov	r1, r3
 8006c68:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10f      	bne.n	8006c8e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68da      	ldr	r2, [r3, #12]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c7c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68da      	ldr	r2, [r3, #12]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c8c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	e000      	b.n	8006c94 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006c92:	2302      	movs	r3, #2
  }
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bc80      	pop	{r7}
 8006c9c:	4770      	bx	lr

08006c9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b082      	sub	sp, #8
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68da      	ldr	r2, [r3, #12]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cb4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2220      	movs	r2, #32
 8006cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7ff fe64 	bl	800698c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b08c      	sub	sp, #48	; 0x30
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b22      	cmp	r3, #34	; 0x22
 8006ce0:	f040 80ae 	bne.w	8006e40 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cec:	d117      	bne.n	8006d1e <UART_Receive_IT+0x50>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d113      	bne.n	8006d1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d16:	1c9a      	adds	r2, r3, #2
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	629a      	str	r2, [r3, #40]	; 0x28
 8006d1c:	e026      	b.n	8006d6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d22:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006d24:	2300      	movs	r3, #0
 8006d26:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d30:	d007      	beq.n	8006d42 <UART_Receive_IT+0x74>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10a      	bne.n	8006d50 <UART_Receive_IT+0x82>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d106      	bne.n	8006d50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4c:	701a      	strb	r2, [r3, #0]
 8006d4e:	e008      	b.n	8006d62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d5c:	b2da      	uxtb	r2, r3
 8006d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d66:	1c5a      	adds	r2, r3, #1
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	3b01      	subs	r3, #1
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	4619      	mov	r1, r3
 8006d7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d15d      	bne.n	8006e3c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68da      	ldr	r2, [r3, #12]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f022 0220 	bic.w	r2, r2, #32
 8006d8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68da      	ldr	r2, [r3, #12]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	695a      	ldr	r2, [r3, #20]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f022 0201 	bic.w	r2, r2, #1
 8006dae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2220      	movs	r2, #32
 8006db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d135      	bne.n	8006e32 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	330c      	adds	r3, #12
 8006dd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	e853 3f00 	ldrex	r3, [r3]
 8006dda:	613b      	str	r3, [r7, #16]
   return(result);
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	f023 0310 	bic.w	r3, r3, #16
 8006de2:	627b      	str	r3, [r7, #36]	; 0x24
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	330c      	adds	r3, #12
 8006dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dec:	623a      	str	r2, [r7, #32]
 8006dee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df0:	69f9      	ldr	r1, [r7, #28]
 8006df2:	6a3a      	ldr	r2, [r7, #32]
 8006df4:	e841 2300 	strex	r3, r2, [r1]
 8006df8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1e5      	bne.n	8006dcc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0310 	and.w	r3, r3, #16
 8006e0a:	2b10      	cmp	r3, #16
 8006e0c:	d10a      	bne.n	8006e24 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e0e:	2300      	movs	r3, #0
 8006e10:	60fb      	str	r3, [r7, #12]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	60fb      	str	r3, [r7, #12]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	60fb      	str	r3, [r7, #12]
 8006e22:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e28:	4619      	mov	r1, r3
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7ff fdc0 	bl	80069b0 <HAL_UARTEx_RxEventCallback>
 8006e30:	e002      	b.n	8006e38 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7fb fa66 	bl	8002304 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	e002      	b.n	8006e42 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	e000      	b.n	8006e42 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006e40:	2302      	movs	r3, #2
  }
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3730      	adds	r7, #48	; 0x30
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
	...

08006e4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68da      	ldr	r2, [r3, #12]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	430a      	orrs	r2, r1
 8006e68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	689a      	ldr	r2, [r3, #8]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	431a      	orrs	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	695b      	ldr	r3, [r3, #20]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006e86:	f023 030c 	bic.w	r3, r3, #12
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	6812      	ldr	r2, [r2, #0]
 8006e8e:	68b9      	ldr	r1, [r7, #8]
 8006e90:	430b      	orrs	r3, r1
 8006e92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	699a      	ldr	r2, [r3, #24]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a2c      	ldr	r2, [pc, #176]	; (8006f60 <UART_SetConfig+0x114>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d103      	bne.n	8006ebc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006eb4:	f7fe f88c 	bl	8004fd0 <HAL_RCC_GetPCLK2Freq>
 8006eb8:	60f8      	str	r0, [r7, #12]
 8006eba:	e002      	b.n	8006ec2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006ebc:	f7fe f874 	bl	8004fa8 <HAL_RCC_GetPCLK1Freq>
 8006ec0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4413      	add	r3, r2
 8006eca:	009a      	lsls	r2, r3, #2
 8006ecc:	441a      	add	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ed8:	4a22      	ldr	r2, [pc, #136]	; (8006f64 <UART_SetConfig+0x118>)
 8006eda:	fba2 2303 	umull	r2, r3, r2, r3
 8006ede:	095b      	lsrs	r3, r3, #5
 8006ee0:	0119      	lsls	r1, r3, #4
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4413      	add	r3, r2
 8006eea:	009a      	lsls	r2, r3, #2
 8006eec:	441a      	add	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ef8:	4b1a      	ldr	r3, [pc, #104]	; (8006f64 <UART_SetConfig+0x118>)
 8006efa:	fba3 0302 	umull	r0, r3, r3, r2
 8006efe:	095b      	lsrs	r3, r3, #5
 8006f00:	2064      	movs	r0, #100	; 0x64
 8006f02:	fb00 f303 	mul.w	r3, r0, r3
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	011b      	lsls	r3, r3, #4
 8006f0a:	3332      	adds	r3, #50	; 0x32
 8006f0c:	4a15      	ldr	r2, [pc, #84]	; (8006f64 <UART_SetConfig+0x118>)
 8006f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f12:	095b      	lsrs	r3, r3, #5
 8006f14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f18:	4419      	add	r1, r3
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4413      	add	r3, r2
 8006f22:	009a      	lsls	r2, r3, #2
 8006f24:	441a      	add	r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f30:	4b0c      	ldr	r3, [pc, #48]	; (8006f64 <UART_SetConfig+0x118>)
 8006f32:	fba3 0302 	umull	r0, r3, r3, r2
 8006f36:	095b      	lsrs	r3, r3, #5
 8006f38:	2064      	movs	r0, #100	; 0x64
 8006f3a:	fb00 f303 	mul.w	r3, r0, r3
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	011b      	lsls	r3, r3, #4
 8006f42:	3332      	adds	r3, #50	; 0x32
 8006f44:	4a07      	ldr	r2, [pc, #28]	; (8006f64 <UART_SetConfig+0x118>)
 8006f46:	fba2 2303 	umull	r2, r3, r2, r3
 8006f4a:	095b      	lsrs	r3, r3, #5
 8006f4c:	f003 020f 	and.w	r2, r3, #15
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	440a      	add	r2, r1
 8006f56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006f58:	bf00      	nop
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	40013800 	.word	0x40013800
 8006f64:	51eb851f 	.word	0x51eb851f

08006f68 <atof>:
 8006f68:	2100      	movs	r1, #0
 8006f6a:	f001 babd 	b.w	80084e8 <strtod>
	...

08006f70 <__errno>:
 8006f70:	4b01      	ldr	r3, [pc, #4]	; (8006f78 <__errno+0x8>)
 8006f72:	6818      	ldr	r0, [r3, #0]
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	20000010 	.word	0x20000010

08006f7c <__libc_init_array>:
 8006f7c:	b570      	push	{r4, r5, r6, lr}
 8006f7e:	2600      	movs	r6, #0
 8006f80:	4d0c      	ldr	r5, [pc, #48]	; (8006fb4 <__libc_init_array+0x38>)
 8006f82:	4c0d      	ldr	r4, [pc, #52]	; (8006fb8 <__libc_init_array+0x3c>)
 8006f84:	1b64      	subs	r4, r4, r5
 8006f86:	10a4      	asrs	r4, r4, #2
 8006f88:	42a6      	cmp	r6, r4
 8006f8a:	d109      	bne.n	8006fa0 <__libc_init_array+0x24>
 8006f8c:	f004 fa26 	bl	800b3dc <_init>
 8006f90:	2600      	movs	r6, #0
 8006f92:	4d0a      	ldr	r5, [pc, #40]	; (8006fbc <__libc_init_array+0x40>)
 8006f94:	4c0a      	ldr	r4, [pc, #40]	; (8006fc0 <__libc_init_array+0x44>)
 8006f96:	1b64      	subs	r4, r4, r5
 8006f98:	10a4      	asrs	r4, r4, #2
 8006f9a:	42a6      	cmp	r6, r4
 8006f9c:	d105      	bne.n	8006faa <__libc_init_array+0x2e>
 8006f9e:	bd70      	pop	{r4, r5, r6, pc}
 8006fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fa4:	4798      	blx	r3
 8006fa6:	3601      	adds	r6, #1
 8006fa8:	e7ee      	b.n	8006f88 <__libc_init_array+0xc>
 8006faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fae:	4798      	blx	r3
 8006fb0:	3601      	adds	r6, #1
 8006fb2:	e7f2      	b.n	8006f9a <__libc_init_array+0x1e>
 8006fb4:	0800ba18 	.word	0x0800ba18
 8006fb8:	0800ba18 	.word	0x0800ba18
 8006fbc:	0800ba18 	.word	0x0800ba18
 8006fc0:	0800ba1c 	.word	0x0800ba1c

08006fc4 <memset>:
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	4402      	add	r2, r0
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d100      	bne.n	8006fce <memset+0xa>
 8006fcc:	4770      	bx	lr
 8006fce:	f803 1b01 	strb.w	r1, [r3], #1
 8006fd2:	e7f9      	b.n	8006fc8 <memset+0x4>

08006fd4 <__cvt>:
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fda:	461f      	mov	r7, r3
 8006fdc:	bfbb      	ittet	lt
 8006fde:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006fe2:	461f      	movlt	r7, r3
 8006fe4:	2300      	movge	r3, #0
 8006fe6:	232d      	movlt	r3, #45	; 0x2d
 8006fe8:	b088      	sub	sp, #32
 8006fea:	4614      	mov	r4, r2
 8006fec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006fee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006ff0:	7013      	strb	r3, [r2, #0]
 8006ff2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ff4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006ff8:	f023 0820 	bic.w	r8, r3, #32
 8006ffc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007000:	d005      	beq.n	800700e <__cvt+0x3a>
 8007002:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007006:	d100      	bne.n	800700a <__cvt+0x36>
 8007008:	3501      	adds	r5, #1
 800700a:	2302      	movs	r3, #2
 800700c:	e000      	b.n	8007010 <__cvt+0x3c>
 800700e:	2303      	movs	r3, #3
 8007010:	aa07      	add	r2, sp, #28
 8007012:	9204      	str	r2, [sp, #16]
 8007014:	aa06      	add	r2, sp, #24
 8007016:	e9cd a202 	strd	sl, r2, [sp, #8]
 800701a:	e9cd 3500 	strd	r3, r5, [sp]
 800701e:	4622      	mov	r2, r4
 8007020:	463b      	mov	r3, r7
 8007022:	f001 fb75 	bl	8008710 <_dtoa_r>
 8007026:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800702a:	4606      	mov	r6, r0
 800702c:	d102      	bne.n	8007034 <__cvt+0x60>
 800702e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007030:	07db      	lsls	r3, r3, #31
 8007032:	d522      	bpl.n	800707a <__cvt+0xa6>
 8007034:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007038:	eb06 0905 	add.w	r9, r6, r5
 800703c:	d110      	bne.n	8007060 <__cvt+0x8c>
 800703e:	7833      	ldrb	r3, [r6, #0]
 8007040:	2b30      	cmp	r3, #48	; 0x30
 8007042:	d10a      	bne.n	800705a <__cvt+0x86>
 8007044:	2200      	movs	r2, #0
 8007046:	2300      	movs	r3, #0
 8007048:	4620      	mov	r0, r4
 800704a:	4639      	mov	r1, r7
 800704c:	f7f9 fcb6 	bl	80009bc <__aeabi_dcmpeq>
 8007050:	b918      	cbnz	r0, 800705a <__cvt+0x86>
 8007052:	f1c5 0501 	rsb	r5, r5, #1
 8007056:	f8ca 5000 	str.w	r5, [sl]
 800705a:	f8da 3000 	ldr.w	r3, [sl]
 800705e:	4499      	add	r9, r3
 8007060:	2200      	movs	r2, #0
 8007062:	2300      	movs	r3, #0
 8007064:	4620      	mov	r0, r4
 8007066:	4639      	mov	r1, r7
 8007068:	f7f9 fca8 	bl	80009bc <__aeabi_dcmpeq>
 800706c:	b108      	cbz	r0, 8007072 <__cvt+0x9e>
 800706e:	f8cd 901c 	str.w	r9, [sp, #28]
 8007072:	2230      	movs	r2, #48	; 0x30
 8007074:	9b07      	ldr	r3, [sp, #28]
 8007076:	454b      	cmp	r3, r9
 8007078:	d307      	bcc.n	800708a <__cvt+0xb6>
 800707a:	4630      	mov	r0, r6
 800707c:	9b07      	ldr	r3, [sp, #28]
 800707e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007080:	1b9b      	subs	r3, r3, r6
 8007082:	6013      	str	r3, [r2, #0]
 8007084:	b008      	add	sp, #32
 8007086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800708a:	1c59      	adds	r1, r3, #1
 800708c:	9107      	str	r1, [sp, #28]
 800708e:	701a      	strb	r2, [r3, #0]
 8007090:	e7f0      	b.n	8007074 <__cvt+0xa0>

08007092 <__exponent>:
 8007092:	4603      	mov	r3, r0
 8007094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007096:	2900      	cmp	r1, #0
 8007098:	f803 2b02 	strb.w	r2, [r3], #2
 800709c:	bfb6      	itet	lt
 800709e:	222d      	movlt	r2, #45	; 0x2d
 80070a0:	222b      	movge	r2, #43	; 0x2b
 80070a2:	4249      	neglt	r1, r1
 80070a4:	2909      	cmp	r1, #9
 80070a6:	7042      	strb	r2, [r0, #1]
 80070a8:	dd2b      	ble.n	8007102 <__exponent+0x70>
 80070aa:	f10d 0407 	add.w	r4, sp, #7
 80070ae:	46a4      	mov	ip, r4
 80070b0:	270a      	movs	r7, #10
 80070b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80070b6:	460a      	mov	r2, r1
 80070b8:	46a6      	mov	lr, r4
 80070ba:	fb07 1516 	mls	r5, r7, r6, r1
 80070be:	2a63      	cmp	r2, #99	; 0x63
 80070c0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80070c4:	4631      	mov	r1, r6
 80070c6:	f104 34ff 	add.w	r4, r4, #4294967295
 80070ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80070ce:	dcf0      	bgt.n	80070b2 <__exponent+0x20>
 80070d0:	3130      	adds	r1, #48	; 0x30
 80070d2:	f1ae 0502 	sub.w	r5, lr, #2
 80070d6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80070da:	4629      	mov	r1, r5
 80070dc:	1c44      	adds	r4, r0, #1
 80070de:	4561      	cmp	r1, ip
 80070e0:	d30a      	bcc.n	80070f8 <__exponent+0x66>
 80070e2:	f10d 0209 	add.w	r2, sp, #9
 80070e6:	eba2 020e 	sub.w	r2, r2, lr
 80070ea:	4565      	cmp	r5, ip
 80070ec:	bf88      	it	hi
 80070ee:	2200      	movhi	r2, #0
 80070f0:	4413      	add	r3, r2
 80070f2:	1a18      	subs	r0, r3, r0
 80070f4:	b003      	add	sp, #12
 80070f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070fc:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007100:	e7ed      	b.n	80070de <__exponent+0x4c>
 8007102:	2330      	movs	r3, #48	; 0x30
 8007104:	3130      	adds	r1, #48	; 0x30
 8007106:	7083      	strb	r3, [r0, #2]
 8007108:	70c1      	strb	r1, [r0, #3]
 800710a:	1d03      	adds	r3, r0, #4
 800710c:	e7f1      	b.n	80070f2 <__exponent+0x60>
	...

08007110 <_printf_float>:
 8007110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007114:	b091      	sub	sp, #68	; 0x44
 8007116:	460c      	mov	r4, r1
 8007118:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800711c:	4616      	mov	r6, r2
 800711e:	461f      	mov	r7, r3
 8007120:	4605      	mov	r5, r0
 8007122:	f002 fc5b 	bl	80099dc <_localeconv_r>
 8007126:	6803      	ldr	r3, [r0, #0]
 8007128:	4618      	mov	r0, r3
 800712a:	9309      	str	r3, [sp, #36]	; 0x24
 800712c:	f7f9 f81a 	bl	8000164 <strlen>
 8007130:	2300      	movs	r3, #0
 8007132:	930e      	str	r3, [sp, #56]	; 0x38
 8007134:	f8d8 3000 	ldr.w	r3, [r8]
 8007138:	900a      	str	r0, [sp, #40]	; 0x28
 800713a:	3307      	adds	r3, #7
 800713c:	f023 0307 	bic.w	r3, r3, #7
 8007140:	f103 0208 	add.w	r2, r3, #8
 8007144:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007148:	f8d4 b000 	ldr.w	fp, [r4]
 800714c:	f8c8 2000 	str.w	r2, [r8]
 8007150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007154:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007158:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800715c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007160:	930b      	str	r3, [sp, #44]	; 0x2c
 8007162:	f04f 32ff 	mov.w	r2, #4294967295
 8007166:	4640      	mov	r0, r8
 8007168:	4b9c      	ldr	r3, [pc, #624]	; (80073dc <_printf_float+0x2cc>)
 800716a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800716c:	f7f9 fc58 	bl	8000a20 <__aeabi_dcmpun>
 8007170:	bb70      	cbnz	r0, 80071d0 <_printf_float+0xc0>
 8007172:	f04f 32ff 	mov.w	r2, #4294967295
 8007176:	4640      	mov	r0, r8
 8007178:	4b98      	ldr	r3, [pc, #608]	; (80073dc <_printf_float+0x2cc>)
 800717a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800717c:	f7f9 fc32 	bl	80009e4 <__aeabi_dcmple>
 8007180:	bb30      	cbnz	r0, 80071d0 <_printf_float+0xc0>
 8007182:	2200      	movs	r2, #0
 8007184:	2300      	movs	r3, #0
 8007186:	4640      	mov	r0, r8
 8007188:	4651      	mov	r1, sl
 800718a:	f7f9 fc21 	bl	80009d0 <__aeabi_dcmplt>
 800718e:	b110      	cbz	r0, 8007196 <_printf_float+0x86>
 8007190:	232d      	movs	r3, #45	; 0x2d
 8007192:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007196:	4b92      	ldr	r3, [pc, #584]	; (80073e0 <_printf_float+0x2d0>)
 8007198:	4892      	ldr	r0, [pc, #584]	; (80073e4 <_printf_float+0x2d4>)
 800719a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800719e:	bf94      	ite	ls
 80071a0:	4698      	movls	r8, r3
 80071a2:	4680      	movhi	r8, r0
 80071a4:	2303      	movs	r3, #3
 80071a6:	f04f 0a00 	mov.w	sl, #0
 80071aa:	6123      	str	r3, [r4, #16]
 80071ac:	f02b 0304 	bic.w	r3, fp, #4
 80071b0:	6023      	str	r3, [r4, #0]
 80071b2:	4633      	mov	r3, r6
 80071b4:	4621      	mov	r1, r4
 80071b6:	4628      	mov	r0, r5
 80071b8:	9700      	str	r7, [sp, #0]
 80071ba:	aa0f      	add	r2, sp, #60	; 0x3c
 80071bc:	f000 f9d4 	bl	8007568 <_printf_common>
 80071c0:	3001      	adds	r0, #1
 80071c2:	f040 8090 	bne.w	80072e6 <_printf_float+0x1d6>
 80071c6:	f04f 30ff 	mov.w	r0, #4294967295
 80071ca:	b011      	add	sp, #68	; 0x44
 80071cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d0:	4642      	mov	r2, r8
 80071d2:	4653      	mov	r3, sl
 80071d4:	4640      	mov	r0, r8
 80071d6:	4651      	mov	r1, sl
 80071d8:	f7f9 fc22 	bl	8000a20 <__aeabi_dcmpun>
 80071dc:	b148      	cbz	r0, 80071f2 <_printf_float+0xe2>
 80071de:	f1ba 0f00 	cmp.w	sl, #0
 80071e2:	bfb8      	it	lt
 80071e4:	232d      	movlt	r3, #45	; 0x2d
 80071e6:	4880      	ldr	r0, [pc, #512]	; (80073e8 <_printf_float+0x2d8>)
 80071e8:	bfb8      	it	lt
 80071ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80071ee:	4b7f      	ldr	r3, [pc, #508]	; (80073ec <_printf_float+0x2dc>)
 80071f0:	e7d3      	b.n	800719a <_printf_float+0x8a>
 80071f2:	6863      	ldr	r3, [r4, #4]
 80071f4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80071f8:	1c5a      	adds	r2, r3, #1
 80071fa:	d142      	bne.n	8007282 <_printf_float+0x172>
 80071fc:	2306      	movs	r3, #6
 80071fe:	6063      	str	r3, [r4, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	9206      	str	r2, [sp, #24]
 8007204:	aa0e      	add	r2, sp, #56	; 0x38
 8007206:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800720a:	aa0d      	add	r2, sp, #52	; 0x34
 800720c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007210:	9203      	str	r2, [sp, #12]
 8007212:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007216:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800721a:	6023      	str	r3, [r4, #0]
 800721c:	6863      	ldr	r3, [r4, #4]
 800721e:	4642      	mov	r2, r8
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	4628      	mov	r0, r5
 8007224:	4653      	mov	r3, sl
 8007226:	910b      	str	r1, [sp, #44]	; 0x2c
 8007228:	f7ff fed4 	bl	8006fd4 <__cvt>
 800722c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800722e:	4680      	mov	r8, r0
 8007230:	2947      	cmp	r1, #71	; 0x47
 8007232:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007234:	d108      	bne.n	8007248 <_printf_float+0x138>
 8007236:	1cc8      	adds	r0, r1, #3
 8007238:	db02      	blt.n	8007240 <_printf_float+0x130>
 800723a:	6863      	ldr	r3, [r4, #4]
 800723c:	4299      	cmp	r1, r3
 800723e:	dd40      	ble.n	80072c2 <_printf_float+0x1b2>
 8007240:	f1a9 0902 	sub.w	r9, r9, #2
 8007244:	fa5f f989 	uxtb.w	r9, r9
 8007248:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800724c:	d81f      	bhi.n	800728e <_printf_float+0x17e>
 800724e:	464a      	mov	r2, r9
 8007250:	3901      	subs	r1, #1
 8007252:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007256:	910d      	str	r1, [sp, #52]	; 0x34
 8007258:	f7ff ff1b 	bl	8007092 <__exponent>
 800725c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800725e:	4682      	mov	sl, r0
 8007260:	1813      	adds	r3, r2, r0
 8007262:	2a01      	cmp	r2, #1
 8007264:	6123      	str	r3, [r4, #16]
 8007266:	dc02      	bgt.n	800726e <_printf_float+0x15e>
 8007268:	6822      	ldr	r2, [r4, #0]
 800726a:	07d2      	lsls	r2, r2, #31
 800726c:	d501      	bpl.n	8007272 <_printf_float+0x162>
 800726e:	3301      	adds	r3, #1
 8007270:	6123      	str	r3, [r4, #16]
 8007272:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007276:	2b00      	cmp	r3, #0
 8007278:	d09b      	beq.n	80071b2 <_printf_float+0xa2>
 800727a:	232d      	movs	r3, #45	; 0x2d
 800727c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007280:	e797      	b.n	80071b2 <_printf_float+0xa2>
 8007282:	2947      	cmp	r1, #71	; 0x47
 8007284:	d1bc      	bne.n	8007200 <_printf_float+0xf0>
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1ba      	bne.n	8007200 <_printf_float+0xf0>
 800728a:	2301      	movs	r3, #1
 800728c:	e7b7      	b.n	80071fe <_printf_float+0xee>
 800728e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007292:	d118      	bne.n	80072c6 <_printf_float+0x1b6>
 8007294:	2900      	cmp	r1, #0
 8007296:	6863      	ldr	r3, [r4, #4]
 8007298:	dd0b      	ble.n	80072b2 <_printf_float+0x1a2>
 800729a:	6121      	str	r1, [r4, #16]
 800729c:	b913      	cbnz	r3, 80072a4 <_printf_float+0x194>
 800729e:	6822      	ldr	r2, [r4, #0]
 80072a0:	07d0      	lsls	r0, r2, #31
 80072a2:	d502      	bpl.n	80072aa <_printf_float+0x19a>
 80072a4:	3301      	adds	r3, #1
 80072a6:	440b      	add	r3, r1
 80072a8:	6123      	str	r3, [r4, #16]
 80072aa:	f04f 0a00 	mov.w	sl, #0
 80072ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80072b0:	e7df      	b.n	8007272 <_printf_float+0x162>
 80072b2:	b913      	cbnz	r3, 80072ba <_printf_float+0x1aa>
 80072b4:	6822      	ldr	r2, [r4, #0]
 80072b6:	07d2      	lsls	r2, r2, #31
 80072b8:	d501      	bpl.n	80072be <_printf_float+0x1ae>
 80072ba:	3302      	adds	r3, #2
 80072bc:	e7f4      	b.n	80072a8 <_printf_float+0x198>
 80072be:	2301      	movs	r3, #1
 80072c0:	e7f2      	b.n	80072a8 <_printf_float+0x198>
 80072c2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80072c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072c8:	4299      	cmp	r1, r3
 80072ca:	db05      	blt.n	80072d8 <_printf_float+0x1c8>
 80072cc:	6823      	ldr	r3, [r4, #0]
 80072ce:	6121      	str	r1, [r4, #16]
 80072d0:	07d8      	lsls	r0, r3, #31
 80072d2:	d5ea      	bpl.n	80072aa <_printf_float+0x19a>
 80072d4:	1c4b      	adds	r3, r1, #1
 80072d6:	e7e7      	b.n	80072a8 <_printf_float+0x198>
 80072d8:	2900      	cmp	r1, #0
 80072da:	bfcc      	ite	gt
 80072dc:	2201      	movgt	r2, #1
 80072de:	f1c1 0202 	rsble	r2, r1, #2
 80072e2:	4413      	add	r3, r2
 80072e4:	e7e0      	b.n	80072a8 <_printf_float+0x198>
 80072e6:	6823      	ldr	r3, [r4, #0]
 80072e8:	055a      	lsls	r2, r3, #21
 80072ea:	d407      	bmi.n	80072fc <_printf_float+0x1ec>
 80072ec:	6923      	ldr	r3, [r4, #16]
 80072ee:	4642      	mov	r2, r8
 80072f0:	4631      	mov	r1, r6
 80072f2:	4628      	mov	r0, r5
 80072f4:	47b8      	blx	r7
 80072f6:	3001      	adds	r0, #1
 80072f8:	d12b      	bne.n	8007352 <_printf_float+0x242>
 80072fa:	e764      	b.n	80071c6 <_printf_float+0xb6>
 80072fc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007300:	f240 80dd 	bls.w	80074be <_printf_float+0x3ae>
 8007304:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007308:	2200      	movs	r2, #0
 800730a:	2300      	movs	r3, #0
 800730c:	f7f9 fb56 	bl	80009bc <__aeabi_dcmpeq>
 8007310:	2800      	cmp	r0, #0
 8007312:	d033      	beq.n	800737c <_printf_float+0x26c>
 8007314:	2301      	movs	r3, #1
 8007316:	4631      	mov	r1, r6
 8007318:	4628      	mov	r0, r5
 800731a:	4a35      	ldr	r2, [pc, #212]	; (80073f0 <_printf_float+0x2e0>)
 800731c:	47b8      	blx	r7
 800731e:	3001      	adds	r0, #1
 8007320:	f43f af51 	beq.w	80071c6 <_printf_float+0xb6>
 8007324:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007328:	429a      	cmp	r2, r3
 800732a:	db02      	blt.n	8007332 <_printf_float+0x222>
 800732c:	6823      	ldr	r3, [r4, #0]
 800732e:	07d8      	lsls	r0, r3, #31
 8007330:	d50f      	bpl.n	8007352 <_printf_float+0x242>
 8007332:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007336:	4631      	mov	r1, r6
 8007338:	4628      	mov	r0, r5
 800733a:	47b8      	blx	r7
 800733c:	3001      	adds	r0, #1
 800733e:	f43f af42 	beq.w	80071c6 <_printf_float+0xb6>
 8007342:	f04f 0800 	mov.w	r8, #0
 8007346:	f104 091a 	add.w	r9, r4, #26
 800734a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800734c:	3b01      	subs	r3, #1
 800734e:	4543      	cmp	r3, r8
 8007350:	dc09      	bgt.n	8007366 <_printf_float+0x256>
 8007352:	6823      	ldr	r3, [r4, #0]
 8007354:	079b      	lsls	r3, r3, #30
 8007356:	f100 8102 	bmi.w	800755e <_printf_float+0x44e>
 800735a:	68e0      	ldr	r0, [r4, #12]
 800735c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800735e:	4298      	cmp	r0, r3
 8007360:	bfb8      	it	lt
 8007362:	4618      	movlt	r0, r3
 8007364:	e731      	b.n	80071ca <_printf_float+0xba>
 8007366:	2301      	movs	r3, #1
 8007368:	464a      	mov	r2, r9
 800736a:	4631      	mov	r1, r6
 800736c:	4628      	mov	r0, r5
 800736e:	47b8      	blx	r7
 8007370:	3001      	adds	r0, #1
 8007372:	f43f af28 	beq.w	80071c6 <_printf_float+0xb6>
 8007376:	f108 0801 	add.w	r8, r8, #1
 800737a:	e7e6      	b.n	800734a <_printf_float+0x23a>
 800737c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800737e:	2b00      	cmp	r3, #0
 8007380:	dc38      	bgt.n	80073f4 <_printf_float+0x2e4>
 8007382:	2301      	movs	r3, #1
 8007384:	4631      	mov	r1, r6
 8007386:	4628      	mov	r0, r5
 8007388:	4a19      	ldr	r2, [pc, #100]	; (80073f0 <_printf_float+0x2e0>)
 800738a:	47b8      	blx	r7
 800738c:	3001      	adds	r0, #1
 800738e:	f43f af1a 	beq.w	80071c6 <_printf_float+0xb6>
 8007392:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007396:	4313      	orrs	r3, r2
 8007398:	d102      	bne.n	80073a0 <_printf_float+0x290>
 800739a:	6823      	ldr	r3, [r4, #0]
 800739c:	07d9      	lsls	r1, r3, #31
 800739e:	d5d8      	bpl.n	8007352 <_printf_float+0x242>
 80073a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073a4:	4631      	mov	r1, r6
 80073a6:	4628      	mov	r0, r5
 80073a8:	47b8      	blx	r7
 80073aa:	3001      	adds	r0, #1
 80073ac:	f43f af0b 	beq.w	80071c6 <_printf_float+0xb6>
 80073b0:	f04f 0900 	mov.w	r9, #0
 80073b4:	f104 0a1a 	add.w	sl, r4, #26
 80073b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073ba:	425b      	negs	r3, r3
 80073bc:	454b      	cmp	r3, r9
 80073be:	dc01      	bgt.n	80073c4 <_printf_float+0x2b4>
 80073c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073c2:	e794      	b.n	80072ee <_printf_float+0x1de>
 80073c4:	2301      	movs	r3, #1
 80073c6:	4652      	mov	r2, sl
 80073c8:	4631      	mov	r1, r6
 80073ca:	4628      	mov	r0, r5
 80073cc:	47b8      	blx	r7
 80073ce:	3001      	adds	r0, #1
 80073d0:	f43f aef9 	beq.w	80071c6 <_printf_float+0xb6>
 80073d4:	f109 0901 	add.w	r9, r9, #1
 80073d8:	e7ee      	b.n	80073b8 <_printf_float+0x2a8>
 80073da:	bf00      	nop
 80073dc:	7fefffff 	.word	0x7fefffff
 80073e0:	0800b520 	.word	0x0800b520
 80073e4:	0800b524 	.word	0x0800b524
 80073e8:	0800b52c 	.word	0x0800b52c
 80073ec:	0800b528 	.word	0x0800b528
 80073f0:	0800b530 	.word	0x0800b530
 80073f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073f8:	429a      	cmp	r2, r3
 80073fa:	bfa8      	it	ge
 80073fc:	461a      	movge	r2, r3
 80073fe:	2a00      	cmp	r2, #0
 8007400:	4691      	mov	r9, r2
 8007402:	dc37      	bgt.n	8007474 <_printf_float+0x364>
 8007404:	f04f 0b00 	mov.w	fp, #0
 8007408:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800740c:	f104 021a 	add.w	r2, r4, #26
 8007410:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007414:	ebaa 0309 	sub.w	r3, sl, r9
 8007418:	455b      	cmp	r3, fp
 800741a:	dc33      	bgt.n	8007484 <_printf_float+0x374>
 800741c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007420:	429a      	cmp	r2, r3
 8007422:	db3b      	blt.n	800749c <_printf_float+0x38c>
 8007424:	6823      	ldr	r3, [r4, #0]
 8007426:	07da      	lsls	r2, r3, #31
 8007428:	d438      	bmi.n	800749c <_printf_float+0x38c>
 800742a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800742c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800742e:	eba3 020a 	sub.w	r2, r3, sl
 8007432:	eba3 0901 	sub.w	r9, r3, r1
 8007436:	4591      	cmp	r9, r2
 8007438:	bfa8      	it	ge
 800743a:	4691      	movge	r9, r2
 800743c:	f1b9 0f00 	cmp.w	r9, #0
 8007440:	dc34      	bgt.n	80074ac <_printf_float+0x39c>
 8007442:	f04f 0800 	mov.w	r8, #0
 8007446:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800744a:	f104 0a1a 	add.w	sl, r4, #26
 800744e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007452:	1a9b      	subs	r3, r3, r2
 8007454:	eba3 0309 	sub.w	r3, r3, r9
 8007458:	4543      	cmp	r3, r8
 800745a:	f77f af7a 	ble.w	8007352 <_printf_float+0x242>
 800745e:	2301      	movs	r3, #1
 8007460:	4652      	mov	r2, sl
 8007462:	4631      	mov	r1, r6
 8007464:	4628      	mov	r0, r5
 8007466:	47b8      	blx	r7
 8007468:	3001      	adds	r0, #1
 800746a:	f43f aeac 	beq.w	80071c6 <_printf_float+0xb6>
 800746e:	f108 0801 	add.w	r8, r8, #1
 8007472:	e7ec      	b.n	800744e <_printf_float+0x33e>
 8007474:	4613      	mov	r3, r2
 8007476:	4631      	mov	r1, r6
 8007478:	4642      	mov	r2, r8
 800747a:	4628      	mov	r0, r5
 800747c:	47b8      	blx	r7
 800747e:	3001      	adds	r0, #1
 8007480:	d1c0      	bne.n	8007404 <_printf_float+0x2f4>
 8007482:	e6a0      	b.n	80071c6 <_printf_float+0xb6>
 8007484:	2301      	movs	r3, #1
 8007486:	4631      	mov	r1, r6
 8007488:	4628      	mov	r0, r5
 800748a:	920b      	str	r2, [sp, #44]	; 0x2c
 800748c:	47b8      	blx	r7
 800748e:	3001      	adds	r0, #1
 8007490:	f43f ae99 	beq.w	80071c6 <_printf_float+0xb6>
 8007494:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007496:	f10b 0b01 	add.w	fp, fp, #1
 800749a:	e7b9      	b.n	8007410 <_printf_float+0x300>
 800749c:	4631      	mov	r1, r6
 800749e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074a2:	4628      	mov	r0, r5
 80074a4:	47b8      	blx	r7
 80074a6:	3001      	adds	r0, #1
 80074a8:	d1bf      	bne.n	800742a <_printf_float+0x31a>
 80074aa:	e68c      	b.n	80071c6 <_printf_float+0xb6>
 80074ac:	464b      	mov	r3, r9
 80074ae:	4631      	mov	r1, r6
 80074b0:	4628      	mov	r0, r5
 80074b2:	eb08 020a 	add.w	r2, r8, sl
 80074b6:	47b8      	blx	r7
 80074b8:	3001      	adds	r0, #1
 80074ba:	d1c2      	bne.n	8007442 <_printf_float+0x332>
 80074bc:	e683      	b.n	80071c6 <_printf_float+0xb6>
 80074be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074c0:	2a01      	cmp	r2, #1
 80074c2:	dc01      	bgt.n	80074c8 <_printf_float+0x3b8>
 80074c4:	07db      	lsls	r3, r3, #31
 80074c6:	d537      	bpl.n	8007538 <_printf_float+0x428>
 80074c8:	2301      	movs	r3, #1
 80074ca:	4642      	mov	r2, r8
 80074cc:	4631      	mov	r1, r6
 80074ce:	4628      	mov	r0, r5
 80074d0:	47b8      	blx	r7
 80074d2:	3001      	adds	r0, #1
 80074d4:	f43f ae77 	beq.w	80071c6 <_printf_float+0xb6>
 80074d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074dc:	4631      	mov	r1, r6
 80074de:	4628      	mov	r0, r5
 80074e0:	47b8      	blx	r7
 80074e2:	3001      	adds	r0, #1
 80074e4:	f43f ae6f 	beq.w	80071c6 <_printf_float+0xb6>
 80074e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80074ec:	2200      	movs	r2, #0
 80074ee:	2300      	movs	r3, #0
 80074f0:	f7f9 fa64 	bl	80009bc <__aeabi_dcmpeq>
 80074f4:	b9d8      	cbnz	r0, 800752e <_printf_float+0x41e>
 80074f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074f8:	f108 0201 	add.w	r2, r8, #1
 80074fc:	3b01      	subs	r3, #1
 80074fe:	4631      	mov	r1, r6
 8007500:	4628      	mov	r0, r5
 8007502:	47b8      	blx	r7
 8007504:	3001      	adds	r0, #1
 8007506:	d10e      	bne.n	8007526 <_printf_float+0x416>
 8007508:	e65d      	b.n	80071c6 <_printf_float+0xb6>
 800750a:	2301      	movs	r3, #1
 800750c:	464a      	mov	r2, r9
 800750e:	4631      	mov	r1, r6
 8007510:	4628      	mov	r0, r5
 8007512:	47b8      	blx	r7
 8007514:	3001      	adds	r0, #1
 8007516:	f43f ae56 	beq.w	80071c6 <_printf_float+0xb6>
 800751a:	f108 0801 	add.w	r8, r8, #1
 800751e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007520:	3b01      	subs	r3, #1
 8007522:	4543      	cmp	r3, r8
 8007524:	dcf1      	bgt.n	800750a <_printf_float+0x3fa>
 8007526:	4653      	mov	r3, sl
 8007528:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800752c:	e6e0      	b.n	80072f0 <_printf_float+0x1e0>
 800752e:	f04f 0800 	mov.w	r8, #0
 8007532:	f104 091a 	add.w	r9, r4, #26
 8007536:	e7f2      	b.n	800751e <_printf_float+0x40e>
 8007538:	2301      	movs	r3, #1
 800753a:	4642      	mov	r2, r8
 800753c:	e7df      	b.n	80074fe <_printf_float+0x3ee>
 800753e:	2301      	movs	r3, #1
 8007540:	464a      	mov	r2, r9
 8007542:	4631      	mov	r1, r6
 8007544:	4628      	mov	r0, r5
 8007546:	47b8      	blx	r7
 8007548:	3001      	adds	r0, #1
 800754a:	f43f ae3c 	beq.w	80071c6 <_printf_float+0xb6>
 800754e:	f108 0801 	add.w	r8, r8, #1
 8007552:	68e3      	ldr	r3, [r4, #12]
 8007554:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007556:	1a5b      	subs	r3, r3, r1
 8007558:	4543      	cmp	r3, r8
 800755a:	dcf0      	bgt.n	800753e <_printf_float+0x42e>
 800755c:	e6fd      	b.n	800735a <_printf_float+0x24a>
 800755e:	f04f 0800 	mov.w	r8, #0
 8007562:	f104 0919 	add.w	r9, r4, #25
 8007566:	e7f4      	b.n	8007552 <_printf_float+0x442>

08007568 <_printf_common>:
 8007568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800756c:	4616      	mov	r6, r2
 800756e:	4699      	mov	r9, r3
 8007570:	688a      	ldr	r2, [r1, #8]
 8007572:	690b      	ldr	r3, [r1, #16]
 8007574:	4607      	mov	r7, r0
 8007576:	4293      	cmp	r3, r2
 8007578:	bfb8      	it	lt
 800757a:	4613      	movlt	r3, r2
 800757c:	6033      	str	r3, [r6, #0]
 800757e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007582:	460c      	mov	r4, r1
 8007584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007588:	b10a      	cbz	r2, 800758e <_printf_common+0x26>
 800758a:	3301      	adds	r3, #1
 800758c:	6033      	str	r3, [r6, #0]
 800758e:	6823      	ldr	r3, [r4, #0]
 8007590:	0699      	lsls	r1, r3, #26
 8007592:	bf42      	ittt	mi
 8007594:	6833      	ldrmi	r3, [r6, #0]
 8007596:	3302      	addmi	r3, #2
 8007598:	6033      	strmi	r3, [r6, #0]
 800759a:	6825      	ldr	r5, [r4, #0]
 800759c:	f015 0506 	ands.w	r5, r5, #6
 80075a0:	d106      	bne.n	80075b0 <_printf_common+0x48>
 80075a2:	f104 0a19 	add.w	sl, r4, #25
 80075a6:	68e3      	ldr	r3, [r4, #12]
 80075a8:	6832      	ldr	r2, [r6, #0]
 80075aa:	1a9b      	subs	r3, r3, r2
 80075ac:	42ab      	cmp	r3, r5
 80075ae:	dc28      	bgt.n	8007602 <_printf_common+0x9a>
 80075b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80075b4:	1e13      	subs	r3, r2, #0
 80075b6:	6822      	ldr	r2, [r4, #0]
 80075b8:	bf18      	it	ne
 80075ba:	2301      	movne	r3, #1
 80075bc:	0692      	lsls	r2, r2, #26
 80075be:	d42d      	bmi.n	800761c <_printf_common+0xb4>
 80075c0:	4649      	mov	r1, r9
 80075c2:	4638      	mov	r0, r7
 80075c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075c8:	47c0      	blx	r8
 80075ca:	3001      	adds	r0, #1
 80075cc:	d020      	beq.n	8007610 <_printf_common+0xa8>
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	68e5      	ldr	r5, [r4, #12]
 80075d2:	f003 0306 	and.w	r3, r3, #6
 80075d6:	2b04      	cmp	r3, #4
 80075d8:	bf18      	it	ne
 80075da:	2500      	movne	r5, #0
 80075dc:	6832      	ldr	r2, [r6, #0]
 80075de:	f04f 0600 	mov.w	r6, #0
 80075e2:	68a3      	ldr	r3, [r4, #8]
 80075e4:	bf08      	it	eq
 80075e6:	1aad      	subeq	r5, r5, r2
 80075e8:	6922      	ldr	r2, [r4, #16]
 80075ea:	bf08      	it	eq
 80075ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075f0:	4293      	cmp	r3, r2
 80075f2:	bfc4      	itt	gt
 80075f4:	1a9b      	subgt	r3, r3, r2
 80075f6:	18ed      	addgt	r5, r5, r3
 80075f8:	341a      	adds	r4, #26
 80075fa:	42b5      	cmp	r5, r6
 80075fc:	d11a      	bne.n	8007634 <_printf_common+0xcc>
 80075fe:	2000      	movs	r0, #0
 8007600:	e008      	b.n	8007614 <_printf_common+0xac>
 8007602:	2301      	movs	r3, #1
 8007604:	4652      	mov	r2, sl
 8007606:	4649      	mov	r1, r9
 8007608:	4638      	mov	r0, r7
 800760a:	47c0      	blx	r8
 800760c:	3001      	adds	r0, #1
 800760e:	d103      	bne.n	8007618 <_printf_common+0xb0>
 8007610:	f04f 30ff 	mov.w	r0, #4294967295
 8007614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007618:	3501      	adds	r5, #1
 800761a:	e7c4      	b.n	80075a6 <_printf_common+0x3e>
 800761c:	2030      	movs	r0, #48	; 0x30
 800761e:	18e1      	adds	r1, r4, r3
 8007620:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007624:	1c5a      	adds	r2, r3, #1
 8007626:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800762a:	4422      	add	r2, r4
 800762c:	3302      	adds	r3, #2
 800762e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007632:	e7c5      	b.n	80075c0 <_printf_common+0x58>
 8007634:	2301      	movs	r3, #1
 8007636:	4622      	mov	r2, r4
 8007638:	4649      	mov	r1, r9
 800763a:	4638      	mov	r0, r7
 800763c:	47c0      	blx	r8
 800763e:	3001      	adds	r0, #1
 8007640:	d0e6      	beq.n	8007610 <_printf_common+0xa8>
 8007642:	3601      	adds	r6, #1
 8007644:	e7d9      	b.n	80075fa <_printf_common+0x92>
	...

08007648 <_printf_i>:
 8007648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800764c:	7e0f      	ldrb	r7, [r1, #24]
 800764e:	4691      	mov	r9, r2
 8007650:	2f78      	cmp	r7, #120	; 0x78
 8007652:	4680      	mov	r8, r0
 8007654:	460c      	mov	r4, r1
 8007656:	469a      	mov	sl, r3
 8007658:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800765a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800765e:	d807      	bhi.n	8007670 <_printf_i+0x28>
 8007660:	2f62      	cmp	r7, #98	; 0x62
 8007662:	d80a      	bhi.n	800767a <_printf_i+0x32>
 8007664:	2f00      	cmp	r7, #0
 8007666:	f000 80d9 	beq.w	800781c <_printf_i+0x1d4>
 800766a:	2f58      	cmp	r7, #88	; 0x58
 800766c:	f000 80a4 	beq.w	80077b8 <_printf_i+0x170>
 8007670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007674:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007678:	e03a      	b.n	80076f0 <_printf_i+0xa8>
 800767a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800767e:	2b15      	cmp	r3, #21
 8007680:	d8f6      	bhi.n	8007670 <_printf_i+0x28>
 8007682:	a101      	add	r1, pc, #4	; (adr r1, 8007688 <_printf_i+0x40>)
 8007684:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007688:	080076e1 	.word	0x080076e1
 800768c:	080076f5 	.word	0x080076f5
 8007690:	08007671 	.word	0x08007671
 8007694:	08007671 	.word	0x08007671
 8007698:	08007671 	.word	0x08007671
 800769c:	08007671 	.word	0x08007671
 80076a0:	080076f5 	.word	0x080076f5
 80076a4:	08007671 	.word	0x08007671
 80076a8:	08007671 	.word	0x08007671
 80076ac:	08007671 	.word	0x08007671
 80076b0:	08007671 	.word	0x08007671
 80076b4:	08007803 	.word	0x08007803
 80076b8:	08007725 	.word	0x08007725
 80076bc:	080077e5 	.word	0x080077e5
 80076c0:	08007671 	.word	0x08007671
 80076c4:	08007671 	.word	0x08007671
 80076c8:	08007825 	.word	0x08007825
 80076cc:	08007671 	.word	0x08007671
 80076d0:	08007725 	.word	0x08007725
 80076d4:	08007671 	.word	0x08007671
 80076d8:	08007671 	.word	0x08007671
 80076dc:	080077ed 	.word	0x080077ed
 80076e0:	682b      	ldr	r3, [r5, #0]
 80076e2:	1d1a      	adds	r2, r3, #4
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	602a      	str	r2, [r5, #0]
 80076e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076f0:	2301      	movs	r3, #1
 80076f2:	e0a4      	b.n	800783e <_printf_i+0x1f6>
 80076f4:	6820      	ldr	r0, [r4, #0]
 80076f6:	6829      	ldr	r1, [r5, #0]
 80076f8:	0606      	lsls	r6, r0, #24
 80076fa:	f101 0304 	add.w	r3, r1, #4
 80076fe:	d50a      	bpl.n	8007716 <_printf_i+0xce>
 8007700:	680e      	ldr	r6, [r1, #0]
 8007702:	602b      	str	r3, [r5, #0]
 8007704:	2e00      	cmp	r6, #0
 8007706:	da03      	bge.n	8007710 <_printf_i+0xc8>
 8007708:	232d      	movs	r3, #45	; 0x2d
 800770a:	4276      	negs	r6, r6
 800770c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007710:	230a      	movs	r3, #10
 8007712:	485e      	ldr	r0, [pc, #376]	; (800788c <_printf_i+0x244>)
 8007714:	e019      	b.n	800774a <_printf_i+0x102>
 8007716:	680e      	ldr	r6, [r1, #0]
 8007718:	f010 0f40 	tst.w	r0, #64	; 0x40
 800771c:	602b      	str	r3, [r5, #0]
 800771e:	bf18      	it	ne
 8007720:	b236      	sxthne	r6, r6
 8007722:	e7ef      	b.n	8007704 <_printf_i+0xbc>
 8007724:	682b      	ldr	r3, [r5, #0]
 8007726:	6820      	ldr	r0, [r4, #0]
 8007728:	1d19      	adds	r1, r3, #4
 800772a:	6029      	str	r1, [r5, #0]
 800772c:	0601      	lsls	r1, r0, #24
 800772e:	d501      	bpl.n	8007734 <_printf_i+0xec>
 8007730:	681e      	ldr	r6, [r3, #0]
 8007732:	e002      	b.n	800773a <_printf_i+0xf2>
 8007734:	0646      	lsls	r6, r0, #25
 8007736:	d5fb      	bpl.n	8007730 <_printf_i+0xe8>
 8007738:	881e      	ldrh	r6, [r3, #0]
 800773a:	2f6f      	cmp	r7, #111	; 0x6f
 800773c:	bf0c      	ite	eq
 800773e:	2308      	moveq	r3, #8
 8007740:	230a      	movne	r3, #10
 8007742:	4852      	ldr	r0, [pc, #328]	; (800788c <_printf_i+0x244>)
 8007744:	2100      	movs	r1, #0
 8007746:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800774a:	6865      	ldr	r5, [r4, #4]
 800774c:	2d00      	cmp	r5, #0
 800774e:	bfa8      	it	ge
 8007750:	6821      	ldrge	r1, [r4, #0]
 8007752:	60a5      	str	r5, [r4, #8]
 8007754:	bfa4      	itt	ge
 8007756:	f021 0104 	bicge.w	r1, r1, #4
 800775a:	6021      	strge	r1, [r4, #0]
 800775c:	b90e      	cbnz	r6, 8007762 <_printf_i+0x11a>
 800775e:	2d00      	cmp	r5, #0
 8007760:	d04d      	beq.n	80077fe <_printf_i+0x1b6>
 8007762:	4615      	mov	r5, r2
 8007764:	fbb6 f1f3 	udiv	r1, r6, r3
 8007768:	fb03 6711 	mls	r7, r3, r1, r6
 800776c:	5dc7      	ldrb	r7, [r0, r7]
 800776e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007772:	4637      	mov	r7, r6
 8007774:	42bb      	cmp	r3, r7
 8007776:	460e      	mov	r6, r1
 8007778:	d9f4      	bls.n	8007764 <_printf_i+0x11c>
 800777a:	2b08      	cmp	r3, #8
 800777c:	d10b      	bne.n	8007796 <_printf_i+0x14e>
 800777e:	6823      	ldr	r3, [r4, #0]
 8007780:	07de      	lsls	r6, r3, #31
 8007782:	d508      	bpl.n	8007796 <_printf_i+0x14e>
 8007784:	6923      	ldr	r3, [r4, #16]
 8007786:	6861      	ldr	r1, [r4, #4]
 8007788:	4299      	cmp	r1, r3
 800778a:	bfde      	ittt	le
 800778c:	2330      	movle	r3, #48	; 0x30
 800778e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007792:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007796:	1b52      	subs	r2, r2, r5
 8007798:	6122      	str	r2, [r4, #16]
 800779a:	464b      	mov	r3, r9
 800779c:	4621      	mov	r1, r4
 800779e:	4640      	mov	r0, r8
 80077a0:	f8cd a000 	str.w	sl, [sp]
 80077a4:	aa03      	add	r2, sp, #12
 80077a6:	f7ff fedf 	bl	8007568 <_printf_common>
 80077aa:	3001      	adds	r0, #1
 80077ac:	d14c      	bne.n	8007848 <_printf_i+0x200>
 80077ae:	f04f 30ff 	mov.w	r0, #4294967295
 80077b2:	b004      	add	sp, #16
 80077b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077b8:	4834      	ldr	r0, [pc, #208]	; (800788c <_printf_i+0x244>)
 80077ba:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80077be:	6829      	ldr	r1, [r5, #0]
 80077c0:	6823      	ldr	r3, [r4, #0]
 80077c2:	f851 6b04 	ldr.w	r6, [r1], #4
 80077c6:	6029      	str	r1, [r5, #0]
 80077c8:	061d      	lsls	r5, r3, #24
 80077ca:	d514      	bpl.n	80077f6 <_printf_i+0x1ae>
 80077cc:	07df      	lsls	r7, r3, #31
 80077ce:	bf44      	itt	mi
 80077d0:	f043 0320 	orrmi.w	r3, r3, #32
 80077d4:	6023      	strmi	r3, [r4, #0]
 80077d6:	b91e      	cbnz	r6, 80077e0 <_printf_i+0x198>
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	f023 0320 	bic.w	r3, r3, #32
 80077de:	6023      	str	r3, [r4, #0]
 80077e0:	2310      	movs	r3, #16
 80077e2:	e7af      	b.n	8007744 <_printf_i+0xfc>
 80077e4:	6823      	ldr	r3, [r4, #0]
 80077e6:	f043 0320 	orr.w	r3, r3, #32
 80077ea:	6023      	str	r3, [r4, #0]
 80077ec:	2378      	movs	r3, #120	; 0x78
 80077ee:	4828      	ldr	r0, [pc, #160]	; (8007890 <_printf_i+0x248>)
 80077f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80077f4:	e7e3      	b.n	80077be <_printf_i+0x176>
 80077f6:	0659      	lsls	r1, r3, #25
 80077f8:	bf48      	it	mi
 80077fa:	b2b6      	uxthmi	r6, r6
 80077fc:	e7e6      	b.n	80077cc <_printf_i+0x184>
 80077fe:	4615      	mov	r5, r2
 8007800:	e7bb      	b.n	800777a <_printf_i+0x132>
 8007802:	682b      	ldr	r3, [r5, #0]
 8007804:	6826      	ldr	r6, [r4, #0]
 8007806:	1d18      	adds	r0, r3, #4
 8007808:	6961      	ldr	r1, [r4, #20]
 800780a:	6028      	str	r0, [r5, #0]
 800780c:	0635      	lsls	r5, r6, #24
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	d501      	bpl.n	8007816 <_printf_i+0x1ce>
 8007812:	6019      	str	r1, [r3, #0]
 8007814:	e002      	b.n	800781c <_printf_i+0x1d4>
 8007816:	0670      	lsls	r0, r6, #25
 8007818:	d5fb      	bpl.n	8007812 <_printf_i+0x1ca>
 800781a:	8019      	strh	r1, [r3, #0]
 800781c:	2300      	movs	r3, #0
 800781e:	4615      	mov	r5, r2
 8007820:	6123      	str	r3, [r4, #16]
 8007822:	e7ba      	b.n	800779a <_printf_i+0x152>
 8007824:	682b      	ldr	r3, [r5, #0]
 8007826:	2100      	movs	r1, #0
 8007828:	1d1a      	adds	r2, r3, #4
 800782a:	602a      	str	r2, [r5, #0]
 800782c:	681d      	ldr	r5, [r3, #0]
 800782e:	6862      	ldr	r2, [r4, #4]
 8007830:	4628      	mov	r0, r5
 8007832:	f002 f8f1 	bl	8009a18 <memchr>
 8007836:	b108      	cbz	r0, 800783c <_printf_i+0x1f4>
 8007838:	1b40      	subs	r0, r0, r5
 800783a:	6060      	str	r0, [r4, #4]
 800783c:	6863      	ldr	r3, [r4, #4]
 800783e:	6123      	str	r3, [r4, #16]
 8007840:	2300      	movs	r3, #0
 8007842:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007846:	e7a8      	b.n	800779a <_printf_i+0x152>
 8007848:	462a      	mov	r2, r5
 800784a:	4649      	mov	r1, r9
 800784c:	4640      	mov	r0, r8
 800784e:	6923      	ldr	r3, [r4, #16]
 8007850:	47d0      	blx	sl
 8007852:	3001      	adds	r0, #1
 8007854:	d0ab      	beq.n	80077ae <_printf_i+0x166>
 8007856:	6823      	ldr	r3, [r4, #0]
 8007858:	079b      	lsls	r3, r3, #30
 800785a:	d413      	bmi.n	8007884 <_printf_i+0x23c>
 800785c:	68e0      	ldr	r0, [r4, #12]
 800785e:	9b03      	ldr	r3, [sp, #12]
 8007860:	4298      	cmp	r0, r3
 8007862:	bfb8      	it	lt
 8007864:	4618      	movlt	r0, r3
 8007866:	e7a4      	b.n	80077b2 <_printf_i+0x16a>
 8007868:	2301      	movs	r3, #1
 800786a:	4632      	mov	r2, r6
 800786c:	4649      	mov	r1, r9
 800786e:	4640      	mov	r0, r8
 8007870:	47d0      	blx	sl
 8007872:	3001      	adds	r0, #1
 8007874:	d09b      	beq.n	80077ae <_printf_i+0x166>
 8007876:	3501      	adds	r5, #1
 8007878:	68e3      	ldr	r3, [r4, #12]
 800787a:	9903      	ldr	r1, [sp, #12]
 800787c:	1a5b      	subs	r3, r3, r1
 800787e:	42ab      	cmp	r3, r5
 8007880:	dcf2      	bgt.n	8007868 <_printf_i+0x220>
 8007882:	e7eb      	b.n	800785c <_printf_i+0x214>
 8007884:	2500      	movs	r5, #0
 8007886:	f104 0619 	add.w	r6, r4, #25
 800788a:	e7f5      	b.n	8007878 <_printf_i+0x230>
 800788c:	0800b532 	.word	0x0800b532
 8007890:	0800b543 	.word	0x0800b543

08007894 <siprintf>:
 8007894:	b40e      	push	{r1, r2, r3}
 8007896:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800789a:	b500      	push	{lr}
 800789c:	b09c      	sub	sp, #112	; 0x70
 800789e:	ab1d      	add	r3, sp, #116	; 0x74
 80078a0:	9002      	str	r0, [sp, #8]
 80078a2:	9006      	str	r0, [sp, #24]
 80078a4:	9107      	str	r1, [sp, #28]
 80078a6:	9104      	str	r1, [sp, #16]
 80078a8:	4808      	ldr	r0, [pc, #32]	; (80078cc <siprintf+0x38>)
 80078aa:	4909      	ldr	r1, [pc, #36]	; (80078d0 <siprintf+0x3c>)
 80078ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80078b0:	9105      	str	r1, [sp, #20]
 80078b2:	6800      	ldr	r0, [r0, #0]
 80078b4:	a902      	add	r1, sp, #8
 80078b6:	9301      	str	r3, [sp, #4]
 80078b8:	f002 fece 	bl	800a658 <_svfiprintf_r>
 80078bc:	2200      	movs	r2, #0
 80078be:	9b02      	ldr	r3, [sp, #8]
 80078c0:	701a      	strb	r2, [r3, #0]
 80078c2:	b01c      	add	sp, #112	; 0x70
 80078c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80078c8:	b003      	add	sp, #12
 80078ca:	4770      	bx	lr
 80078cc:	20000010 	.word	0x20000010
 80078d0:	ffff0208 	.word	0xffff0208

080078d4 <sulp>:
 80078d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078d8:	460f      	mov	r7, r1
 80078da:	4690      	mov	r8, r2
 80078dc:	f002 fc28 	bl	800a130 <__ulp>
 80078e0:	4604      	mov	r4, r0
 80078e2:	460d      	mov	r5, r1
 80078e4:	f1b8 0f00 	cmp.w	r8, #0
 80078e8:	d011      	beq.n	800790e <sulp+0x3a>
 80078ea:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80078ee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	dd0b      	ble.n	800790e <sulp+0x3a>
 80078f6:	2400      	movs	r4, #0
 80078f8:	051b      	lsls	r3, r3, #20
 80078fa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80078fe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007902:	4622      	mov	r2, r4
 8007904:	462b      	mov	r3, r5
 8007906:	f7f8 fdf1 	bl	80004ec <__aeabi_dmul>
 800790a:	4604      	mov	r4, r0
 800790c:	460d      	mov	r5, r1
 800790e:	4620      	mov	r0, r4
 8007910:	4629      	mov	r1, r5
 8007912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007918 <_strtod_l>:
 8007918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800791c:	469b      	mov	fp, r3
 800791e:	2300      	movs	r3, #0
 8007920:	b09f      	sub	sp, #124	; 0x7c
 8007922:	931a      	str	r3, [sp, #104]	; 0x68
 8007924:	4b9e      	ldr	r3, [pc, #632]	; (8007ba0 <_strtod_l+0x288>)
 8007926:	4682      	mov	sl, r0
 8007928:	681f      	ldr	r7, [r3, #0]
 800792a:	460e      	mov	r6, r1
 800792c:	4638      	mov	r0, r7
 800792e:	9215      	str	r2, [sp, #84]	; 0x54
 8007930:	f7f8 fc18 	bl	8000164 <strlen>
 8007934:	f04f 0800 	mov.w	r8, #0
 8007938:	4604      	mov	r4, r0
 800793a:	f04f 0900 	mov.w	r9, #0
 800793e:	9619      	str	r6, [sp, #100]	; 0x64
 8007940:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007942:	781a      	ldrb	r2, [r3, #0]
 8007944:	2a2b      	cmp	r2, #43	; 0x2b
 8007946:	d04c      	beq.n	80079e2 <_strtod_l+0xca>
 8007948:	d83a      	bhi.n	80079c0 <_strtod_l+0xa8>
 800794a:	2a0d      	cmp	r2, #13
 800794c:	d833      	bhi.n	80079b6 <_strtod_l+0x9e>
 800794e:	2a08      	cmp	r2, #8
 8007950:	d833      	bhi.n	80079ba <_strtod_l+0xa2>
 8007952:	2a00      	cmp	r2, #0
 8007954:	d03d      	beq.n	80079d2 <_strtod_l+0xba>
 8007956:	2300      	movs	r3, #0
 8007958:	930a      	str	r3, [sp, #40]	; 0x28
 800795a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800795c:	782b      	ldrb	r3, [r5, #0]
 800795e:	2b30      	cmp	r3, #48	; 0x30
 8007960:	f040 80aa 	bne.w	8007ab8 <_strtod_l+0x1a0>
 8007964:	786b      	ldrb	r3, [r5, #1]
 8007966:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800796a:	2b58      	cmp	r3, #88	; 0x58
 800796c:	d166      	bne.n	8007a3c <_strtod_l+0x124>
 800796e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007970:	4650      	mov	r0, sl
 8007972:	9301      	str	r3, [sp, #4]
 8007974:	ab1a      	add	r3, sp, #104	; 0x68
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	4a8a      	ldr	r2, [pc, #552]	; (8007ba4 <_strtod_l+0x28c>)
 800797a:	f8cd b008 	str.w	fp, [sp, #8]
 800797e:	ab1b      	add	r3, sp, #108	; 0x6c
 8007980:	a919      	add	r1, sp, #100	; 0x64
 8007982:	f001 fd2d 	bl	80093e0 <__gethex>
 8007986:	f010 0607 	ands.w	r6, r0, #7
 800798a:	4604      	mov	r4, r0
 800798c:	d005      	beq.n	800799a <_strtod_l+0x82>
 800798e:	2e06      	cmp	r6, #6
 8007990:	d129      	bne.n	80079e6 <_strtod_l+0xce>
 8007992:	2300      	movs	r3, #0
 8007994:	3501      	adds	r5, #1
 8007996:	9519      	str	r5, [sp, #100]	; 0x64
 8007998:	930a      	str	r3, [sp, #40]	; 0x28
 800799a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800799c:	2b00      	cmp	r3, #0
 800799e:	f040 858a 	bne.w	80084b6 <_strtod_l+0xb9e>
 80079a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079a4:	b1d3      	cbz	r3, 80079dc <_strtod_l+0xc4>
 80079a6:	4642      	mov	r2, r8
 80079a8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80079ac:	4610      	mov	r0, r2
 80079ae:	4619      	mov	r1, r3
 80079b0:	b01f      	add	sp, #124	; 0x7c
 80079b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079b6:	2a20      	cmp	r2, #32
 80079b8:	d1cd      	bne.n	8007956 <_strtod_l+0x3e>
 80079ba:	3301      	adds	r3, #1
 80079bc:	9319      	str	r3, [sp, #100]	; 0x64
 80079be:	e7bf      	b.n	8007940 <_strtod_l+0x28>
 80079c0:	2a2d      	cmp	r2, #45	; 0x2d
 80079c2:	d1c8      	bne.n	8007956 <_strtod_l+0x3e>
 80079c4:	2201      	movs	r2, #1
 80079c6:	920a      	str	r2, [sp, #40]	; 0x28
 80079c8:	1c5a      	adds	r2, r3, #1
 80079ca:	9219      	str	r2, [sp, #100]	; 0x64
 80079cc:	785b      	ldrb	r3, [r3, #1]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1c3      	bne.n	800795a <_strtod_l+0x42>
 80079d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079d4:	9619      	str	r6, [sp, #100]	; 0x64
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f040 856b 	bne.w	80084b2 <_strtod_l+0xb9a>
 80079dc:	4642      	mov	r2, r8
 80079de:	464b      	mov	r3, r9
 80079e0:	e7e4      	b.n	80079ac <_strtod_l+0x94>
 80079e2:	2200      	movs	r2, #0
 80079e4:	e7ef      	b.n	80079c6 <_strtod_l+0xae>
 80079e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80079e8:	b13a      	cbz	r2, 80079fa <_strtod_l+0xe2>
 80079ea:	2135      	movs	r1, #53	; 0x35
 80079ec:	a81c      	add	r0, sp, #112	; 0x70
 80079ee:	f002 fca3 	bl	800a338 <__copybits>
 80079f2:	4650      	mov	r0, sl
 80079f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80079f6:	f002 f86b 	bl	8009ad0 <_Bfree>
 80079fa:	3e01      	subs	r6, #1
 80079fc:	2e04      	cmp	r6, #4
 80079fe:	d806      	bhi.n	8007a0e <_strtod_l+0xf6>
 8007a00:	e8df f006 	tbb	[pc, r6]
 8007a04:	1714030a 	.word	0x1714030a
 8007a08:	0a          	.byte	0x0a
 8007a09:	00          	.byte	0x00
 8007a0a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007a0e:	0721      	lsls	r1, r4, #28
 8007a10:	d5c3      	bpl.n	800799a <_strtod_l+0x82>
 8007a12:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007a16:	e7c0      	b.n	800799a <_strtod_l+0x82>
 8007a18:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007a1a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007a1e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007a22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007a26:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007a2a:	e7f0      	b.n	8007a0e <_strtod_l+0xf6>
 8007a2c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007ba8 <_strtod_l+0x290>
 8007a30:	e7ed      	b.n	8007a0e <_strtod_l+0xf6>
 8007a32:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007a36:	f04f 38ff 	mov.w	r8, #4294967295
 8007a3a:	e7e8      	b.n	8007a0e <_strtod_l+0xf6>
 8007a3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a3e:	1c5a      	adds	r2, r3, #1
 8007a40:	9219      	str	r2, [sp, #100]	; 0x64
 8007a42:	785b      	ldrb	r3, [r3, #1]
 8007a44:	2b30      	cmp	r3, #48	; 0x30
 8007a46:	d0f9      	beq.n	8007a3c <_strtod_l+0x124>
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d0a6      	beq.n	800799a <_strtod_l+0x82>
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	9307      	str	r3, [sp, #28]
 8007a50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a52:	220a      	movs	r2, #10
 8007a54:	9308      	str	r3, [sp, #32]
 8007a56:	2300      	movs	r3, #0
 8007a58:	469b      	mov	fp, r3
 8007a5a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007a5e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007a60:	7805      	ldrb	r5, [r0, #0]
 8007a62:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8007a66:	b2d9      	uxtb	r1, r3
 8007a68:	2909      	cmp	r1, #9
 8007a6a:	d927      	bls.n	8007abc <_strtod_l+0x1a4>
 8007a6c:	4622      	mov	r2, r4
 8007a6e:	4639      	mov	r1, r7
 8007a70:	f003 f860 	bl	800ab34 <strncmp>
 8007a74:	2800      	cmp	r0, #0
 8007a76:	d033      	beq.n	8007ae0 <_strtod_l+0x1c8>
 8007a78:	2000      	movs	r0, #0
 8007a7a:	462a      	mov	r2, r5
 8007a7c:	465c      	mov	r4, fp
 8007a7e:	4603      	mov	r3, r0
 8007a80:	9004      	str	r0, [sp, #16]
 8007a82:	2a65      	cmp	r2, #101	; 0x65
 8007a84:	d001      	beq.n	8007a8a <_strtod_l+0x172>
 8007a86:	2a45      	cmp	r2, #69	; 0x45
 8007a88:	d114      	bne.n	8007ab4 <_strtod_l+0x19c>
 8007a8a:	b91c      	cbnz	r4, 8007a94 <_strtod_l+0x17c>
 8007a8c:	9a07      	ldr	r2, [sp, #28]
 8007a8e:	4302      	orrs	r2, r0
 8007a90:	d09f      	beq.n	80079d2 <_strtod_l+0xba>
 8007a92:	2400      	movs	r4, #0
 8007a94:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007a96:	1c72      	adds	r2, r6, #1
 8007a98:	9219      	str	r2, [sp, #100]	; 0x64
 8007a9a:	7872      	ldrb	r2, [r6, #1]
 8007a9c:	2a2b      	cmp	r2, #43	; 0x2b
 8007a9e:	d079      	beq.n	8007b94 <_strtod_l+0x27c>
 8007aa0:	2a2d      	cmp	r2, #45	; 0x2d
 8007aa2:	f000 8083 	beq.w	8007bac <_strtod_l+0x294>
 8007aa6:	2700      	movs	r7, #0
 8007aa8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007aac:	2909      	cmp	r1, #9
 8007aae:	f240 8083 	bls.w	8007bb8 <_strtod_l+0x2a0>
 8007ab2:	9619      	str	r6, [sp, #100]	; 0x64
 8007ab4:	2500      	movs	r5, #0
 8007ab6:	e09f      	b.n	8007bf8 <_strtod_l+0x2e0>
 8007ab8:	2300      	movs	r3, #0
 8007aba:	e7c8      	b.n	8007a4e <_strtod_l+0x136>
 8007abc:	f1bb 0f08 	cmp.w	fp, #8
 8007ac0:	bfd5      	itete	le
 8007ac2:	9906      	ldrle	r1, [sp, #24]
 8007ac4:	9905      	ldrgt	r1, [sp, #20]
 8007ac6:	fb02 3301 	mlale	r3, r2, r1, r3
 8007aca:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007ace:	f100 0001 	add.w	r0, r0, #1
 8007ad2:	bfd4      	ite	le
 8007ad4:	9306      	strle	r3, [sp, #24]
 8007ad6:	9305      	strgt	r3, [sp, #20]
 8007ad8:	f10b 0b01 	add.w	fp, fp, #1
 8007adc:	9019      	str	r0, [sp, #100]	; 0x64
 8007ade:	e7be      	b.n	8007a5e <_strtod_l+0x146>
 8007ae0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ae2:	191a      	adds	r2, r3, r4
 8007ae4:	9219      	str	r2, [sp, #100]	; 0x64
 8007ae6:	5d1a      	ldrb	r2, [r3, r4]
 8007ae8:	f1bb 0f00 	cmp.w	fp, #0
 8007aec:	d036      	beq.n	8007b5c <_strtod_l+0x244>
 8007aee:	465c      	mov	r4, fp
 8007af0:	9004      	str	r0, [sp, #16]
 8007af2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007af6:	2b09      	cmp	r3, #9
 8007af8:	d912      	bls.n	8007b20 <_strtod_l+0x208>
 8007afa:	2301      	movs	r3, #1
 8007afc:	e7c1      	b.n	8007a82 <_strtod_l+0x16a>
 8007afe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b00:	3001      	adds	r0, #1
 8007b02:	1c5a      	adds	r2, r3, #1
 8007b04:	9219      	str	r2, [sp, #100]	; 0x64
 8007b06:	785a      	ldrb	r2, [r3, #1]
 8007b08:	2a30      	cmp	r2, #48	; 0x30
 8007b0a:	d0f8      	beq.n	8007afe <_strtod_l+0x1e6>
 8007b0c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007b10:	2b08      	cmp	r3, #8
 8007b12:	f200 84d5 	bhi.w	80084c0 <_strtod_l+0xba8>
 8007b16:	9004      	str	r0, [sp, #16]
 8007b18:	2000      	movs	r0, #0
 8007b1a:	4604      	mov	r4, r0
 8007b1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b1e:	9308      	str	r3, [sp, #32]
 8007b20:	3a30      	subs	r2, #48	; 0x30
 8007b22:	f100 0301 	add.w	r3, r0, #1
 8007b26:	d013      	beq.n	8007b50 <_strtod_l+0x238>
 8007b28:	9904      	ldr	r1, [sp, #16]
 8007b2a:	1905      	adds	r5, r0, r4
 8007b2c:	4419      	add	r1, r3
 8007b2e:	9104      	str	r1, [sp, #16]
 8007b30:	4623      	mov	r3, r4
 8007b32:	210a      	movs	r1, #10
 8007b34:	42ab      	cmp	r3, r5
 8007b36:	d113      	bne.n	8007b60 <_strtod_l+0x248>
 8007b38:	1823      	adds	r3, r4, r0
 8007b3a:	2b08      	cmp	r3, #8
 8007b3c:	f104 0401 	add.w	r4, r4, #1
 8007b40:	4404      	add	r4, r0
 8007b42:	dc1b      	bgt.n	8007b7c <_strtod_l+0x264>
 8007b44:	230a      	movs	r3, #10
 8007b46:	9906      	ldr	r1, [sp, #24]
 8007b48:	fb03 2301 	mla	r3, r3, r1, r2
 8007b4c:	9306      	str	r3, [sp, #24]
 8007b4e:	2300      	movs	r3, #0
 8007b50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b52:	4618      	mov	r0, r3
 8007b54:	1c51      	adds	r1, r2, #1
 8007b56:	9119      	str	r1, [sp, #100]	; 0x64
 8007b58:	7852      	ldrb	r2, [r2, #1]
 8007b5a:	e7ca      	b.n	8007af2 <_strtod_l+0x1da>
 8007b5c:	4658      	mov	r0, fp
 8007b5e:	e7d3      	b.n	8007b08 <_strtod_l+0x1f0>
 8007b60:	2b08      	cmp	r3, #8
 8007b62:	dc04      	bgt.n	8007b6e <_strtod_l+0x256>
 8007b64:	9f06      	ldr	r7, [sp, #24]
 8007b66:	434f      	muls	r7, r1
 8007b68:	9706      	str	r7, [sp, #24]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	e7e2      	b.n	8007b34 <_strtod_l+0x21c>
 8007b6e:	1c5f      	adds	r7, r3, #1
 8007b70:	2f10      	cmp	r7, #16
 8007b72:	bfde      	ittt	le
 8007b74:	9f05      	ldrle	r7, [sp, #20]
 8007b76:	434f      	mulle	r7, r1
 8007b78:	9705      	strle	r7, [sp, #20]
 8007b7a:	e7f6      	b.n	8007b6a <_strtod_l+0x252>
 8007b7c:	2c10      	cmp	r4, #16
 8007b7e:	bfdf      	itttt	le
 8007b80:	230a      	movle	r3, #10
 8007b82:	9905      	ldrle	r1, [sp, #20]
 8007b84:	fb03 2301 	mlale	r3, r3, r1, r2
 8007b88:	9305      	strle	r3, [sp, #20]
 8007b8a:	e7e0      	b.n	8007b4e <_strtod_l+0x236>
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	9304      	str	r3, [sp, #16]
 8007b90:	2301      	movs	r3, #1
 8007b92:	e77b      	b.n	8007a8c <_strtod_l+0x174>
 8007b94:	2700      	movs	r7, #0
 8007b96:	1cb2      	adds	r2, r6, #2
 8007b98:	9219      	str	r2, [sp, #100]	; 0x64
 8007b9a:	78b2      	ldrb	r2, [r6, #2]
 8007b9c:	e784      	b.n	8007aa8 <_strtod_l+0x190>
 8007b9e:	bf00      	nop
 8007ba0:	0800b738 	.word	0x0800b738
 8007ba4:	0800b554 	.word	0x0800b554
 8007ba8:	7ff00000 	.word	0x7ff00000
 8007bac:	2701      	movs	r7, #1
 8007bae:	e7f2      	b.n	8007b96 <_strtod_l+0x27e>
 8007bb0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007bb2:	1c51      	adds	r1, r2, #1
 8007bb4:	9119      	str	r1, [sp, #100]	; 0x64
 8007bb6:	7852      	ldrb	r2, [r2, #1]
 8007bb8:	2a30      	cmp	r2, #48	; 0x30
 8007bba:	d0f9      	beq.n	8007bb0 <_strtod_l+0x298>
 8007bbc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007bc0:	2908      	cmp	r1, #8
 8007bc2:	f63f af77 	bhi.w	8007ab4 <_strtod_l+0x19c>
 8007bc6:	f04f 0e0a 	mov.w	lr, #10
 8007bca:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8007bce:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007bd0:	9209      	str	r2, [sp, #36]	; 0x24
 8007bd2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007bd4:	1c51      	adds	r1, r2, #1
 8007bd6:	9119      	str	r1, [sp, #100]	; 0x64
 8007bd8:	7852      	ldrb	r2, [r2, #1]
 8007bda:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8007bde:	2d09      	cmp	r5, #9
 8007be0:	d935      	bls.n	8007c4e <_strtod_l+0x336>
 8007be2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007be4:	1b49      	subs	r1, r1, r5
 8007be6:	2908      	cmp	r1, #8
 8007be8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007bec:	dc02      	bgt.n	8007bf4 <_strtod_l+0x2dc>
 8007bee:	4565      	cmp	r5, ip
 8007bf0:	bfa8      	it	ge
 8007bf2:	4665      	movge	r5, ip
 8007bf4:	b107      	cbz	r7, 8007bf8 <_strtod_l+0x2e0>
 8007bf6:	426d      	negs	r5, r5
 8007bf8:	2c00      	cmp	r4, #0
 8007bfa:	d14c      	bne.n	8007c96 <_strtod_l+0x37e>
 8007bfc:	9907      	ldr	r1, [sp, #28]
 8007bfe:	4301      	orrs	r1, r0
 8007c00:	f47f aecb 	bne.w	800799a <_strtod_l+0x82>
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f47f aee4 	bne.w	80079d2 <_strtod_l+0xba>
 8007c0a:	2a69      	cmp	r2, #105	; 0x69
 8007c0c:	d026      	beq.n	8007c5c <_strtod_l+0x344>
 8007c0e:	dc23      	bgt.n	8007c58 <_strtod_l+0x340>
 8007c10:	2a49      	cmp	r2, #73	; 0x49
 8007c12:	d023      	beq.n	8007c5c <_strtod_l+0x344>
 8007c14:	2a4e      	cmp	r2, #78	; 0x4e
 8007c16:	f47f aedc 	bne.w	80079d2 <_strtod_l+0xba>
 8007c1a:	499d      	ldr	r1, [pc, #628]	; (8007e90 <_strtod_l+0x578>)
 8007c1c:	a819      	add	r0, sp, #100	; 0x64
 8007c1e:	f001 fe2d 	bl	800987c <__match>
 8007c22:	2800      	cmp	r0, #0
 8007c24:	f43f aed5 	beq.w	80079d2 <_strtod_l+0xba>
 8007c28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	2b28      	cmp	r3, #40	; 0x28
 8007c2e:	d12c      	bne.n	8007c8a <_strtod_l+0x372>
 8007c30:	4998      	ldr	r1, [pc, #608]	; (8007e94 <_strtod_l+0x57c>)
 8007c32:	aa1c      	add	r2, sp, #112	; 0x70
 8007c34:	a819      	add	r0, sp, #100	; 0x64
 8007c36:	f001 fe35 	bl	80098a4 <__hexnan>
 8007c3a:	2805      	cmp	r0, #5
 8007c3c:	d125      	bne.n	8007c8a <_strtod_l+0x372>
 8007c3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c40:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007c44:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007c48:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007c4c:	e6a5      	b.n	800799a <_strtod_l+0x82>
 8007c4e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8007c52:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007c56:	e7bc      	b.n	8007bd2 <_strtod_l+0x2ba>
 8007c58:	2a6e      	cmp	r2, #110	; 0x6e
 8007c5a:	e7dc      	b.n	8007c16 <_strtod_l+0x2fe>
 8007c5c:	498e      	ldr	r1, [pc, #568]	; (8007e98 <_strtod_l+0x580>)
 8007c5e:	a819      	add	r0, sp, #100	; 0x64
 8007c60:	f001 fe0c 	bl	800987c <__match>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	f43f aeb4 	beq.w	80079d2 <_strtod_l+0xba>
 8007c6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c6c:	498b      	ldr	r1, [pc, #556]	; (8007e9c <_strtod_l+0x584>)
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	a819      	add	r0, sp, #100	; 0x64
 8007c72:	9319      	str	r3, [sp, #100]	; 0x64
 8007c74:	f001 fe02 	bl	800987c <__match>
 8007c78:	b910      	cbnz	r0, 8007c80 <_strtod_l+0x368>
 8007c7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	9319      	str	r3, [sp, #100]	; 0x64
 8007c80:	f04f 0800 	mov.w	r8, #0
 8007c84:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8007ea0 <_strtod_l+0x588>
 8007c88:	e687      	b.n	800799a <_strtod_l+0x82>
 8007c8a:	4886      	ldr	r0, [pc, #536]	; (8007ea4 <_strtod_l+0x58c>)
 8007c8c:	f002 ff3c 	bl	800ab08 <nan>
 8007c90:	4680      	mov	r8, r0
 8007c92:	4689      	mov	r9, r1
 8007c94:	e681      	b.n	800799a <_strtod_l+0x82>
 8007c96:	9b04      	ldr	r3, [sp, #16]
 8007c98:	f1bb 0f00 	cmp.w	fp, #0
 8007c9c:	bf08      	it	eq
 8007c9e:	46a3      	moveq	fp, r4
 8007ca0:	1aeb      	subs	r3, r5, r3
 8007ca2:	2c10      	cmp	r4, #16
 8007ca4:	9806      	ldr	r0, [sp, #24]
 8007ca6:	4626      	mov	r6, r4
 8007ca8:	9307      	str	r3, [sp, #28]
 8007caa:	bfa8      	it	ge
 8007cac:	2610      	movge	r6, #16
 8007cae:	f7f8 fba3 	bl	80003f8 <__aeabi_ui2d>
 8007cb2:	2c09      	cmp	r4, #9
 8007cb4:	4680      	mov	r8, r0
 8007cb6:	4689      	mov	r9, r1
 8007cb8:	dd13      	ble.n	8007ce2 <_strtod_l+0x3ca>
 8007cba:	4b7b      	ldr	r3, [pc, #492]	; (8007ea8 <_strtod_l+0x590>)
 8007cbc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007cc0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007cc4:	f7f8 fc12 	bl	80004ec <__aeabi_dmul>
 8007cc8:	4680      	mov	r8, r0
 8007cca:	9805      	ldr	r0, [sp, #20]
 8007ccc:	4689      	mov	r9, r1
 8007cce:	f7f8 fb93 	bl	80003f8 <__aeabi_ui2d>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	4640      	mov	r0, r8
 8007cd8:	4649      	mov	r1, r9
 8007cda:	f7f8 fa51 	bl	8000180 <__adddf3>
 8007cde:	4680      	mov	r8, r0
 8007ce0:	4689      	mov	r9, r1
 8007ce2:	2c0f      	cmp	r4, #15
 8007ce4:	dc36      	bgt.n	8007d54 <_strtod_l+0x43c>
 8007ce6:	9b07      	ldr	r3, [sp, #28]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f43f ae56 	beq.w	800799a <_strtod_l+0x82>
 8007cee:	dd22      	ble.n	8007d36 <_strtod_l+0x41e>
 8007cf0:	2b16      	cmp	r3, #22
 8007cf2:	dc09      	bgt.n	8007d08 <_strtod_l+0x3f0>
 8007cf4:	496c      	ldr	r1, [pc, #432]	; (8007ea8 <_strtod_l+0x590>)
 8007cf6:	4642      	mov	r2, r8
 8007cf8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007cfc:	464b      	mov	r3, r9
 8007cfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d02:	f7f8 fbf3 	bl	80004ec <__aeabi_dmul>
 8007d06:	e7c3      	b.n	8007c90 <_strtod_l+0x378>
 8007d08:	9a07      	ldr	r2, [sp, #28]
 8007d0a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	db20      	blt.n	8007d54 <_strtod_l+0x43c>
 8007d12:	4d65      	ldr	r5, [pc, #404]	; (8007ea8 <_strtod_l+0x590>)
 8007d14:	f1c4 040f 	rsb	r4, r4, #15
 8007d18:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007d1c:	4642      	mov	r2, r8
 8007d1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d22:	464b      	mov	r3, r9
 8007d24:	f7f8 fbe2 	bl	80004ec <__aeabi_dmul>
 8007d28:	9b07      	ldr	r3, [sp, #28]
 8007d2a:	1b1c      	subs	r4, r3, r4
 8007d2c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007d30:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d34:	e7e5      	b.n	8007d02 <_strtod_l+0x3ea>
 8007d36:	9b07      	ldr	r3, [sp, #28]
 8007d38:	3316      	adds	r3, #22
 8007d3a:	db0b      	blt.n	8007d54 <_strtod_l+0x43c>
 8007d3c:	9b04      	ldr	r3, [sp, #16]
 8007d3e:	4640      	mov	r0, r8
 8007d40:	1b5d      	subs	r5, r3, r5
 8007d42:	4b59      	ldr	r3, [pc, #356]	; (8007ea8 <_strtod_l+0x590>)
 8007d44:	4649      	mov	r1, r9
 8007d46:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007d4a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d4e:	f7f8 fcf7 	bl	8000740 <__aeabi_ddiv>
 8007d52:	e79d      	b.n	8007c90 <_strtod_l+0x378>
 8007d54:	9b07      	ldr	r3, [sp, #28]
 8007d56:	1ba6      	subs	r6, r4, r6
 8007d58:	441e      	add	r6, r3
 8007d5a:	2e00      	cmp	r6, #0
 8007d5c:	dd74      	ble.n	8007e48 <_strtod_l+0x530>
 8007d5e:	f016 030f 	ands.w	r3, r6, #15
 8007d62:	d00a      	beq.n	8007d7a <_strtod_l+0x462>
 8007d64:	4950      	ldr	r1, [pc, #320]	; (8007ea8 <_strtod_l+0x590>)
 8007d66:	4642      	mov	r2, r8
 8007d68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007d6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d70:	464b      	mov	r3, r9
 8007d72:	f7f8 fbbb 	bl	80004ec <__aeabi_dmul>
 8007d76:	4680      	mov	r8, r0
 8007d78:	4689      	mov	r9, r1
 8007d7a:	f036 060f 	bics.w	r6, r6, #15
 8007d7e:	d052      	beq.n	8007e26 <_strtod_l+0x50e>
 8007d80:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8007d84:	dd27      	ble.n	8007dd6 <_strtod_l+0x4be>
 8007d86:	f04f 0b00 	mov.w	fp, #0
 8007d8a:	f8cd b010 	str.w	fp, [sp, #16]
 8007d8e:	f8cd b020 	str.w	fp, [sp, #32]
 8007d92:	f8cd b018 	str.w	fp, [sp, #24]
 8007d96:	2322      	movs	r3, #34	; 0x22
 8007d98:	f04f 0800 	mov.w	r8, #0
 8007d9c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007ea0 <_strtod_l+0x588>
 8007da0:	f8ca 3000 	str.w	r3, [sl]
 8007da4:	9b08      	ldr	r3, [sp, #32]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	f43f adf7 	beq.w	800799a <_strtod_l+0x82>
 8007dac:	4650      	mov	r0, sl
 8007dae:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007db0:	f001 fe8e 	bl	8009ad0 <_Bfree>
 8007db4:	4650      	mov	r0, sl
 8007db6:	9906      	ldr	r1, [sp, #24]
 8007db8:	f001 fe8a 	bl	8009ad0 <_Bfree>
 8007dbc:	4650      	mov	r0, sl
 8007dbe:	9904      	ldr	r1, [sp, #16]
 8007dc0:	f001 fe86 	bl	8009ad0 <_Bfree>
 8007dc4:	4650      	mov	r0, sl
 8007dc6:	9908      	ldr	r1, [sp, #32]
 8007dc8:	f001 fe82 	bl	8009ad0 <_Bfree>
 8007dcc:	4659      	mov	r1, fp
 8007dce:	4650      	mov	r0, sl
 8007dd0:	f001 fe7e 	bl	8009ad0 <_Bfree>
 8007dd4:	e5e1      	b.n	800799a <_strtod_l+0x82>
 8007dd6:	4b35      	ldr	r3, [pc, #212]	; (8007eac <_strtod_l+0x594>)
 8007dd8:	4640      	mov	r0, r8
 8007dda:	9305      	str	r3, [sp, #20]
 8007ddc:	2300      	movs	r3, #0
 8007dde:	4649      	mov	r1, r9
 8007de0:	461f      	mov	r7, r3
 8007de2:	1136      	asrs	r6, r6, #4
 8007de4:	2e01      	cmp	r6, #1
 8007de6:	dc21      	bgt.n	8007e2c <_strtod_l+0x514>
 8007de8:	b10b      	cbz	r3, 8007dee <_strtod_l+0x4d6>
 8007dea:	4680      	mov	r8, r0
 8007dec:	4689      	mov	r9, r1
 8007dee:	4b2f      	ldr	r3, [pc, #188]	; (8007eac <_strtod_l+0x594>)
 8007df0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007df4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007df8:	4642      	mov	r2, r8
 8007dfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dfe:	464b      	mov	r3, r9
 8007e00:	f7f8 fb74 	bl	80004ec <__aeabi_dmul>
 8007e04:	4b26      	ldr	r3, [pc, #152]	; (8007ea0 <_strtod_l+0x588>)
 8007e06:	460a      	mov	r2, r1
 8007e08:	400b      	ands	r3, r1
 8007e0a:	4929      	ldr	r1, [pc, #164]	; (8007eb0 <_strtod_l+0x598>)
 8007e0c:	4680      	mov	r8, r0
 8007e0e:	428b      	cmp	r3, r1
 8007e10:	d8b9      	bhi.n	8007d86 <_strtod_l+0x46e>
 8007e12:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007e16:	428b      	cmp	r3, r1
 8007e18:	bf86      	itte	hi
 8007e1a:	f04f 38ff 	movhi.w	r8, #4294967295
 8007e1e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007eb4 <_strtod_l+0x59c>
 8007e22:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007e26:	2300      	movs	r3, #0
 8007e28:	9305      	str	r3, [sp, #20]
 8007e2a:	e07f      	b.n	8007f2c <_strtod_l+0x614>
 8007e2c:	07f2      	lsls	r2, r6, #31
 8007e2e:	d505      	bpl.n	8007e3c <_strtod_l+0x524>
 8007e30:	9b05      	ldr	r3, [sp, #20]
 8007e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e36:	f7f8 fb59 	bl	80004ec <__aeabi_dmul>
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	9a05      	ldr	r2, [sp, #20]
 8007e3e:	3701      	adds	r7, #1
 8007e40:	3208      	adds	r2, #8
 8007e42:	1076      	asrs	r6, r6, #1
 8007e44:	9205      	str	r2, [sp, #20]
 8007e46:	e7cd      	b.n	8007de4 <_strtod_l+0x4cc>
 8007e48:	d0ed      	beq.n	8007e26 <_strtod_l+0x50e>
 8007e4a:	4276      	negs	r6, r6
 8007e4c:	f016 020f 	ands.w	r2, r6, #15
 8007e50:	d00a      	beq.n	8007e68 <_strtod_l+0x550>
 8007e52:	4b15      	ldr	r3, [pc, #84]	; (8007ea8 <_strtod_l+0x590>)
 8007e54:	4640      	mov	r0, r8
 8007e56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e5a:	4649      	mov	r1, r9
 8007e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e60:	f7f8 fc6e 	bl	8000740 <__aeabi_ddiv>
 8007e64:	4680      	mov	r8, r0
 8007e66:	4689      	mov	r9, r1
 8007e68:	1136      	asrs	r6, r6, #4
 8007e6a:	d0dc      	beq.n	8007e26 <_strtod_l+0x50e>
 8007e6c:	2e1f      	cmp	r6, #31
 8007e6e:	dd23      	ble.n	8007eb8 <_strtod_l+0x5a0>
 8007e70:	f04f 0b00 	mov.w	fp, #0
 8007e74:	f8cd b010 	str.w	fp, [sp, #16]
 8007e78:	f8cd b020 	str.w	fp, [sp, #32]
 8007e7c:	f8cd b018 	str.w	fp, [sp, #24]
 8007e80:	2322      	movs	r3, #34	; 0x22
 8007e82:	f04f 0800 	mov.w	r8, #0
 8007e86:	f04f 0900 	mov.w	r9, #0
 8007e8a:	f8ca 3000 	str.w	r3, [sl]
 8007e8e:	e789      	b.n	8007da4 <_strtod_l+0x48c>
 8007e90:	0800b52d 	.word	0x0800b52d
 8007e94:	0800b568 	.word	0x0800b568
 8007e98:	0800b525 	.word	0x0800b525
 8007e9c:	0800b65b 	.word	0x0800b65b
 8007ea0:	7ff00000 	.word	0x7ff00000
 8007ea4:	0800b657 	.word	0x0800b657
 8007ea8:	0800b7d0 	.word	0x0800b7d0
 8007eac:	0800b7a8 	.word	0x0800b7a8
 8007eb0:	7ca00000 	.word	0x7ca00000
 8007eb4:	7fefffff 	.word	0x7fefffff
 8007eb8:	f016 0310 	ands.w	r3, r6, #16
 8007ebc:	bf18      	it	ne
 8007ebe:	236a      	movne	r3, #106	; 0x6a
 8007ec0:	4640      	mov	r0, r8
 8007ec2:	9305      	str	r3, [sp, #20]
 8007ec4:	4649      	mov	r1, r9
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	4fb0      	ldr	r7, [pc, #704]	; (800818c <_strtod_l+0x874>)
 8007eca:	07f2      	lsls	r2, r6, #31
 8007ecc:	d504      	bpl.n	8007ed8 <_strtod_l+0x5c0>
 8007ece:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ed2:	f7f8 fb0b 	bl	80004ec <__aeabi_dmul>
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	1076      	asrs	r6, r6, #1
 8007eda:	f107 0708 	add.w	r7, r7, #8
 8007ede:	d1f4      	bne.n	8007eca <_strtod_l+0x5b2>
 8007ee0:	b10b      	cbz	r3, 8007ee6 <_strtod_l+0x5ce>
 8007ee2:	4680      	mov	r8, r0
 8007ee4:	4689      	mov	r9, r1
 8007ee6:	9b05      	ldr	r3, [sp, #20]
 8007ee8:	b1c3      	cbz	r3, 8007f1c <_strtod_l+0x604>
 8007eea:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007eee:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	4649      	mov	r1, r9
 8007ef6:	dd11      	ble.n	8007f1c <_strtod_l+0x604>
 8007ef8:	2b1f      	cmp	r3, #31
 8007efa:	f340 8127 	ble.w	800814c <_strtod_l+0x834>
 8007efe:	2b34      	cmp	r3, #52	; 0x34
 8007f00:	bfd8      	it	le
 8007f02:	f04f 33ff 	movle.w	r3, #4294967295
 8007f06:	f04f 0800 	mov.w	r8, #0
 8007f0a:	bfcf      	iteee	gt
 8007f0c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007f10:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007f14:	fa03 f202 	lslle.w	r2, r3, r2
 8007f18:	ea02 0901 	andle.w	r9, r2, r1
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	2300      	movs	r3, #0
 8007f20:	4640      	mov	r0, r8
 8007f22:	4649      	mov	r1, r9
 8007f24:	f7f8 fd4a 	bl	80009bc <__aeabi_dcmpeq>
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	d1a1      	bne.n	8007e70 <_strtod_l+0x558>
 8007f2c:	9b06      	ldr	r3, [sp, #24]
 8007f2e:	465a      	mov	r2, fp
 8007f30:	9300      	str	r3, [sp, #0]
 8007f32:	4650      	mov	r0, sl
 8007f34:	4623      	mov	r3, r4
 8007f36:	9908      	ldr	r1, [sp, #32]
 8007f38:	f001 fe32 	bl	8009ba0 <__s2b>
 8007f3c:	9008      	str	r0, [sp, #32]
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	f43f af21 	beq.w	8007d86 <_strtod_l+0x46e>
 8007f44:	9b04      	ldr	r3, [sp, #16]
 8007f46:	f04f 0b00 	mov.w	fp, #0
 8007f4a:	1b5d      	subs	r5, r3, r5
 8007f4c:	9b07      	ldr	r3, [sp, #28]
 8007f4e:	f8cd b010 	str.w	fp, [sp, #16]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	bfb4      	ite	lt
 8007f56:	462b      	movlt	r3, r5
 8007f58:	2300      	movge	r3, #0
 8007f5a:	930e      	str	r3, [sp, #56]	; 0x38
 8007f5c:	9b07      	ldr	r3, [sp, #28]
 8007f5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007f62:	9314      	str	r3, [sp, #80]	; 0x50
 8007f64:	9b08      	ldr	r3, [sp, #32]
 8007f66:	4650      	mov	r0, sl
 8007f68:	6859      	ldr	r1, [r3, #4]
 8007f6a:	f001 fd71 	bl	8009a50 <_Balloc>
 8007f6e:	9006      	str	r0, [sp, #24]
 8007f70:	2800      	cmp	r0, #0
 8007f72:	f43f af10 	beq.w	8007d96 <_strtod_l+0x47e>
 8007f76:	9b08      	ldr	r3, [sp, #32]
 8007f78:	300c      	adds	r0, #12
 8007f7a:	691a      	ldr	r2, [r3, #16]
 8007f7c:	f103 010c 	add.w	r1, r3, #12
 8007f80:	3202      	adds	r2, #2
 8007f82:	0092      	lsls	r2, r2, #2
 8007f84:	f001 fd56 	bl	8009a34 <memcpy>
 8007f88:	ab1c      	add	r3, sp, #112	; 0x70
 8007f8a:	9301      	str	r3, [sp, #4]
 8007f8c:	ab1b      	add	r3, sp, #108	; 0x6c
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	4642      	mov	r2, r8
 8007f92:	464b      	mov	r3, r9
 8007f94:	4650      	mov	r0, sl
 8007f96:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8007f9a:	f002 f943 	bl	800a224 <__d2b>
 8007f9e:	901a      	str	r0, [sp, #104]	; 0x68
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	f43f aef8 	beq.w	8007d96 <_strtod_l+0x47e>
 8007fa6:	2101      	movs	r1, #1
 8007fa8:	4650      	mov	r0, sl
 8007faa:	f001 fe91 	bl	8009cd0 <__i2b>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	9004      	str	r0, [sp, #16]
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	f43f aeef 	beq.w	8007d96 <_strtod_l+0x47e>
 8007fb8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007fba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007fbc:	2d00      	cmp	r5, #0
 8007fbe:	bfab      	itete	ge
 8007fc0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007fc2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8007fc4:	18ee      	addge	r6, r5, r3
 8007fc6:	1b5c      	sublt	r4, r3, r5
 8007fc8:	9b05      	ldr	r3, [sp, #20]
 8007fca:	bfa8      	it	ge
 8007fcc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8007fce:	eba5 0503 	sub.w	r5, r5, r3
 8007fd2:	4415      	add	r5, r2
 8007fd4:	4b6e      	ldr	r3, [pc, #440]	; (8008190 <_strtod_l+0x878>)
 8007fd6:	f105 35ff 	add.w	r5, r5, #4294967295
 8007fda:	bfb8      	it	lt
 8007fdc:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007fde:	429d      	cmp	r5, r3
 8007fe0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007fe4:	f280 80c4 	bge.w	8008170 <_strtod_l+0x858>
 8007fe8:	1b5b      	subs	r3, r3, r5
 8007fea:	2b1f      	cmp	r3, #31
 8007fec:	f04f 0701 	mov.w	r7, #1
 8007ff0:	eba2 0203 	sub.w	r2, r2, r3
 8007ff4:	f300 80b1 	bgt.w	800815a <_strtod_l+0x842>
 8007ff8:	2500      	movs	r5, #0
 8007ffa:	fa07 f303 	lsl.w	r3, r7, r3
 8007ffe:	930f      	str	r3, [sp, #60]	; 0x3c
 8008000:	18b7      	adds	r7, r6, r2
 8008002:	9b05      	ldr	r3, [sp, #20]
 8008004:	42be      	cmp	r6, r7
 8008006:	4414      	add	r4, r2
 8008008:	441c      	add	r4, r3
 800800a:	4633      	mov	r3, r6
 800800c:	bfa8      	it	ge
 800800e:	463b      	movge	r3, r7
 8008010:	42a3      	cmp	r3, r4
 8008012:	bfa8      	it	ge
 8008014:	4623      	movge	r3, r4
 8008016:	2b00      	cmp	r3, #0
 8008018:	bfc2      	ittt	gt
 800801a:	1aff      	subgt	r7, r7, r3
 800801c:	1ae4      	subgt	r4, r4, r3
 800801e:	1af6      	subgt	r6, r6, r3
 8008020:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008022:	2b00      	cmp	r3, #0
 8008024:	dd17      	ble.n	8008056 <_strtod_l+0x73e>
 8008026:	461a      	mov	r2, r3
 8008028:	4650      	mov	r0, sl
 800802a:	9904      	ldr	r1, [sp, #16]
 800802c:	f001 ff0e 	bl	8009e4c <__pow5mult>
 8008030:	9004      	str	r0, [sp, #16]
 8008032:	2800      	cmp	r0, #0
 8008034:	f43f aeaf 	beq.w	8007d96 <_strtod_l+0x47e>
 8008038:	4601      	mov	r1, r0
 800803a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800803c:	4650      	mov	r0, sl
 800803e:	f001 fe5d 	bl	8009cfc <__multiply>
 8008042:	9009      	str	r0, [sp, #36]	; 0x24
 8008044:	2800      	cmp	r0, #0
 8008046:	f43f aea6 	beq.w	8007d96 <_strtod_l+0x47e>
 800804a:	4650      	mov	r0, sl
 800804c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800804e:	f001 fd3f 	bl	8009ad0 <_Bfree>
 8008052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008054:	931a      	str	r3, [sp, #104]	; 0x68
 8008056:	2f00      	cmp	r7, #0
 8008058:	f300 808e 	bgt.w	8008178 <_strtod_l+0x860>
 800805c:	9b07      	ldr	r3, [sp, #28]
 800805e:	2b00      	cmp	r3, #0
 8008060:	dd08      	ble.n	8008074 <_strtod_l+0x75c>
 8008062:	4650      	mov	r0, sl
 8008064:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008066:	9906      	ldr	r1, [sp, #24]
 8008068:	f001 fef0 	bl	8009e4c <__pow5mult>
 800806c:	9006      	str	r0, [sp, #24]
 800806e:	2800      	cmp	r0, #0
 8008070:	f43f ae91 	beq.w	8007d96 <_strtod_l+0x47e>
 8008074:	2c00      	cmp	r4, #0
 8008076:	dd08      	ble.n	800808a <_strtod_l+0x772>
 8008078:	4622      	mov	r2, r4
 800807a:	4650      	mov	r0, sl
 800807c:	9906      	ldr	r1, [sp, #24]
 800807e:	f001 ff3f 	bl	8009f00 <__lshift>
 8008082:	9006      	str	r0, [sp, #24]
 8008084:	2800      	cmp	r0, #0
 8008086:	f43f ae86 	beq.w	8007d96 <_strtod_l+0x47e>
 800808a:	2e00      	cmp	r6, #0
 800808c:	dd08      	ble.n	80080a0 <_strtod_l+0x788>
 800808e:	4632      	mov	r2, r6
 8008090:	4650      	mov	r0, sl
 8008092:	9904      	ldr	r1, [sp, #16]
 8008094:	f001 ff34 	bl	8009f00 <__lshift>
 8008098:	9004      	str	r0, [sp, #16]
 800809a:	2800      	cmp	r0, #0
 800809c:	f43f ae7b 	beq.w	8007d96 <_strtod_l+0x47e>
 80080a0:	4650      	mov	r0, sl
 80080a2:	9a06      	ldr	r2, [sp, #24]
 80080a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80080a6:	f001 ffb7 	bl	800a018 <__mdiff>
 80080aa:	4683      	mov	fp, r0
 80080ac:	2800      	cmp	r0, #0
 80080ae:	f43f ae72 	beq.w	8007d96 <_strtod_l+0x47e>
 80080b2:	2400      	movs	r4, #0
 80080b4:	68c3      	ldr	r3, [r0, #12]
 80080b6:	9904      	ldr	r1, [sp, #16]
 80080b8:	60c4      	str	r4, [r0, #12]
 80080ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80080bc:	f001 ff90 	bl	8009fe0 <__mcmp>
 80080c0:	42a0      	cmp	r0, r4
 80080c2:	da6b      	bge.n	800819c <_strtod_l+0x884>
 80080c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080c6:	ea53 0308 	orrs.w	r3, r3, r8
 80080ca:	f040 8091 	bne.w	80081f0 <_strtod_l+0x8d8>
 80080ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	f040 808c 	bne.w	80081f0 <_strtod_l+0x8d8>
 80080d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80080dc:	0d1b      	lsrs	r3, r3, #20
 80080de:	051b      	lsls	r3, r3, #20
 80080e0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80080e4:	f240 8084 	bls.w	80081f0 <_strtod_l+0x8d8>
 80080e8:	f8db 3014 	ldr.w	r3, [fp, #20]
 80080ec:	b91b      	cbnz	r3, 80080f6 <_strtod_l+0x7de>
 80080ee:	f8db 3010 	ldr.w	r3, [fp, #16]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	dd7c      	ble.n	80081f0 <_strtod_l+0x8d8>
 80080f6:	4659      	mov	r1, fp
 80080f8:	2201      	movs	r2, #1
 80080fa:	4650      	mov	r0, sl
 80080fc:	f001 ff00 	bl	8009f00 <__lshift>
 8008100:	9904      	ldr	r1, [sp, #16]
 8008102:	4683      	mov	fp, r0
 8008104:	f001 ff6c 	bl	8009fe0 <__mcmp>
 8008108:	2800      	cmp	r0, #0
 800810a:	dd71      	ble.n	80081f0 <_strtod_l+0x8d8>
 800810c:	9905      	ldr	r1, [sp, #20]
 800810e:	464b      	mov	r3, r9
 8008110:	4a20      	ldr	r2, [pc, #128]	; (8008194 <_strtod_l+0x87c>)
 8008112:	2900      	cmp	r1, #0
 8008114:	f000 808c 	beq.w	8008230 <_strtod_l+0x918>
 8008118:	ea02 0109 	and.w	r1, r2, r9
 800811c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008120:	f300 8086 	bgt.w	8008230 <_strtod_l+0x918>
 8008124:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008128:	f77f aeaa 	ble.w	8007e80 <_strtod_l+0x568>
 800812c:	4640      	mov	r0, r8
 800812e:	4649      	mov	r1, r9
 8008130:	4b19      	ldr	r3, [pc, #100]	; (8008198 <_strtod_l+0x880>)
 8008132:	2200      	movs	r2, #0
 8008134:	f7f8 f9da 	bl	80004ec <__aeabi_dmul>
 8008138:	460b      	mov	r3, r1
 800813a:	4303      	orrs	r3, r0
 800813c:	bf08      	it	eq
 800813e:	2322      	moveq	r3, #34	; 0x22
 8008140:	4680      	mov	r8, r0
 8008142:	4689      	mov	r9, r1
 8008144:	bf08      	it	eq
 8008146:	f8ca 3000 	streq.w	r3, [sl]
 800814a:	e62f      	b.n	8007dac <_strtod_l+0x494>
 800814c:	f04f 32ff 	mov.w	r2, #4294967295
 8008150:	fa02 f303 	lsl.w	r3, r2, r3
 8008154:	ea03 0808 	and.w	r8, r3, r8
 8008158:	e6e0      	b.n	8007f1c <_strtod_l+0x604>
 800815a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800815e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8008162:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8008166:	35e2      	adds	r5, #226	; 0xe2
 8008168:	fa07 f505 	lsl.w	r5, r7, r5
 800816c:	970f      	str	r7, [sp, #60]	; 0x3c
 800816e:	e747      	b.n	8008000 <_strtod_l+0x6e8>
 8008170:	2301      	movs	r3, #1
 8008172:	2500      	movs	r5, #0
 8008174:	930f      	str	r3, [sp, #60]	; 0x3c
 8008176:	e743      	b.n	8008000 <_strtod_l+0x6e8>
 8008178:	463a      	mov	r2, r7
 800817a:	4650      	mov	r0, sl
 800817c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800817e:	f001 febf 	bl	8009f00 <__lshift>
 8008182:	901a      	str	r0, [sp, #104]	; 0x68
 8008184:	2800      	cmp	r0, #0
 8008186:	f47f af69 	bne.w	800805c <_strtod_l+0x744>
 800818a:	e604      	b.n	8007d96 <_strtod_l+0x47e>
 800818c:	0800b580 	.word	0x0800b580
 8008190:	fffffc02 	.word	0xfffffc02
 8008194:	7ff00000 	.word	0x7ff00000
 8008198:	39500000 	.word	0x39500000
 800819c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80081a0:	d165      	bne.n	800826e <_strtod_l+0x956>
 80081a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80081a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081a8:	b35a      	cbz	r2, 8008202 <_strtod_l+0x8ea>
 80081aa:	4a99      	ldr	r2, [pc, #612]	; (8008410 <_strtod_l+0xaf8>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d12b      	bne.n	8008208 <_strtod_l+0x8f0>
 80081b0:	9b05      	ldr	r3, [sp, #20]
 80081b2:	4641      	mov	r1, r8
 80081b4:	b303      	cbz	r3, 80081f8 <_strtod_l+0x8e0>
 80081b6:	464a      	mov	r2, r9
 80081b8:	4b96      	ldr	r3, [pc, #600]	; (8008414 <_strtod_l+0xafc>)
 80081ba:	4013      	ands	r3, r2
 80081bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80081c0:	f04f 32ff 	mov.w	r2, #4294967295
 80081c4:	d81b      	bhi.n	80081fe <_strtod_l+0x8e6>
 80081c6:	0d1b      	lsrs	r3, r3, #20
 80081c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80081cc:	fa02 f303 	lsl.w	r3, r2, r3
 80081d0:	4299      	cmp	r1, r3
 80081d2:	d119      	bne.n	8008208 <_strtod_l+0x8f0>
 80081d4:	4b90      	ldr	r3, [pc, #576]	; (8008418 <_strtod_l+0xb00>)
 80081d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081d8:	429a      	cmp	r2, r3
 80081da:	d102      	bne.n	80081e2 <_strtod_l+0x8ca>
 80081dc:	3101      	adds	r1, #1
 80081de:	f43f adda 	beq.w	8007d96 <_strtod_l+0x47e>
 80081e2:	f04f 0800 	mov.w	r8, #0
 80081e6:	4b8b      	ldr	r3, [pc, #556]	; (8008414 <_strtod_l+0xafc>)
 80081e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081ea:	401a      	ands	r2, r3
 80081ec:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80081f0:	9b05      	ldr	r3, [sp, #20]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d19a      	bne.n	800812c <_strtod_l+0x814>
 80081f6:	e5d9      	b.n	8007dac <_strtod_l+0x494>
 80081f8:	f04f 33ff 	mov.w	r3, #4294967295
 80081fc:	e7e8      	b.n	80081d0 <_strtod_l+0x8b8>
 80081fe:	4613      	mov	r3, r2
 8008200:	e7e6      	b.n	80081d0 <_strtod_l+0x8b8>
 8008202:	ea53 0308 	orrs.w	r3, r3, r8
 8008206:	d081      	beq.n	800810c <_strtod_l+0x7f4>
 8008208:	b1e5      	cbz	r5, 8008244 <_strtod_l+0x92c>
 800820a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800820c:	421d      	tst	r5, r3
 800820e:	d0ef      	beq.n	80081f0 <_strtod_l+0x8d8>
 8008210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008212:	4640      	mov	r0, r8
 8008214:	4649      	mov	r1, r9
 8008216:	9a05      	ldr	r2, [sp, #20]
 8008218:	b1c3      	cbz	r3, 800824c <_strtod_l+0x934>
 800821a:	f7ff fb5b 	bl	80078d4 <sulp>
 800821e:	4602      	mov	r2, r0
 8008220:	460b      	mov	r3, r1
 8008222:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008226:	f7f7 ffab 	bl	8000180 <__adddf3>
 800822a:	4680      	mov	r8, r0
 800822c:	4689      	mov	r9, r1
 800822e:	e7df      	b.n	80081f0 <_strtod_l+0x8d8>
 8008230:	4013      	ands	r3, r2
 8008232:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008236:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800823a:	f04f 38ff 	mov.w	r8, #4294967295
 800823e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008242:	e7d5      	b.n	80081f0 <_strtod_l+0x8d8>
 8008244:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008246:	ea13 0f08 	tst.w	r3, r8
 800824a:	e7e0      	b.n	800820e <_strtod_l+0x8f6>
 800824c:	f7ff fb42 	bl	80078d4 <sulp>
 8008250:	4602      	mov	r2, r0
 8008252:	460b      	mov	r3, r1
 8008254:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008258:	f7f7 ff90 	bl	800017c <__aeabi_dsub>
 800825c:	2200      	movs	r2, #0
 800825e:	2300      	movs	r3, #0
 8008260:	4680      	mov	r8, r0
 8008262:	4689      	mov	r9, r1
 8008264:	f7f8 fbaa 	bl	80009bc <__aeabi_dcmpeq>
 8008268:	2800      	cmp	r0, #0
 800826a:	d0c1      	beq.n	80081f0 <_strtod_l+0x8d8>
 800826c:	e608      	b.n	8007e80 <_strtod_l+0x568>
 800826e:	4658      	mov	r0, fp
 8008270:	9904      	ldr	r1, [sp, #16]
 8008272:	f002 f833 	bl	800a2dc <__ratio>
 8008276:	2200      	movs	r2, #0
 8008278:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800827c:	4606      	mov	r6, r0
 800827e:	460f      	mov	r7, r1
 8008280:	f7f8 fbb0 	bl	80009e4 <__aeabi_dcmple>
 8008284:	2800      	cmp	r0, #0
 8008286:	d070      	beq.n	800836a <_strtod_l+0xa52>
 8008288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800828a:	2b00      	cmp	r3, #0
 800828c:	d042      	beq.n	8008314 <_strtod_l+0x9fc>
 800828e:	2600      	movs	r6, #0
 8008290:	4f62      	ldr	r7, [pc, #392]	; (800841c <_strtod_l+0xb04>)
 8008292:	4d62      	ldr	r5, [pc, #392]	; (800841c <_strtod_l+0xb04>)
 8008294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008296:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800829a:	0d1b      	lsrs	r3, r3, #20
 800829c:	051b      	lsls	r3, r3, #20
 800829e:	930f      	str	r3, [sp, #60]	; 0x3c
 80082a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80082a2:	4b5f      	ldr	r3, [pc, #380]	; (8008420 <_strtod_l+0xb08>)
 80082a4:	429a      	cmp	r2, r3
 80082a6:	f040 80c3 	bne.w	8008430 <_strtod_l+0xb18>
 80082aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ac:	4640      	mov	r0, r8
 80082ae:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80082b2:	4649      	mov	r1, r9
 80082b4:	f001 ff3c 	bl	800a130 <__ulp>
 80082b8:	4602      	mov	r2, r0
 80082ba:	460b      	mov	r3, r1
 80082bc:	4630      	mov	r0, r6
 80082be:	4639      	mov	r1, r7
 80082c0:	f7f8 f914 	bl	80004ec <__aeabi_dmul>
 80082c4:	4642      	mov	r2, r8
 80082c6:	464b      	mov	r3, r9
 80082c8:	f7f7 ff5a 	bl	8000180 <__adddf3>
 80082cc:	460b      	mov	r3, r1
 80082ce:	4951      	ldr	r1, [pc, #324]	; (8008414 <_strtod_l+0xafc>)
 80082d0:	4a54      	ldr	r2, [pc, #336]	; (8008424 <_strtod_l+0xb0c>)
 80082d2:	4019      	ands	r1, r3
 80082d4:	4291      	cmp	r1, r2
 80082d6:	4680      	mov	r8, r0
 80082d8:	d95d      	bls.n	8008396 <_strtod_l+0xa7e>
 80082da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082dc:	4b4e      	ldr	r3, [pc, #312]	; (8008418 <_strtod_l+0xb00>)
 80082de:	429a      	cmp	r2, r3
 80082e0:	d103      	bne.n	80082ea <_strtod_l+0x9d2>
 80082e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082e4:	3301      	adds	r3, #1
 80082e6:	f43f ad56 	beq.w	8007d96 <_strtod_l+0x47e>
 80082ea:	f04f 38ff 	mov.w	r8, #4294967295
 80082ee:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8008418 <_strtod_l+0xb00>
 80082f2:	4650      	mov	r0, sl
 80082f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80082f6:	f001 fbeb 	bl	8009ad0 <_Bfree>
 80082fa:	4650      	mov	r0, sl
 80082fc:	9906      	ldr	r1, [sp, #24]
 80082fe:	f001 fbe7 	bl	8009ad0 <_Bfree>
 8008302:	4650      	mov	r0, sl
 8008304:	9904      	ldr	r1, [sp, #16]
 8008306:	f001 fbe3 	bl	8009ad0 <_Bfree>
 800830a:	4659      	mov	r1, fp
 800830c:	4650      	mov	r0, sl
 800830e:	f001 fbdf 	bl	8009ad0 <_Bfree>
 8008312:	e627      	b.n	8007f64 <_strtod_l+0x64c>
 8008314:	f1b8 0f00 	cmp.w	r8, #0
 8008318:	d119      	bne.n	800834e <_strtod_l+0xa36>
 800831a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800831c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008320:	b9e3      	cbnz	r3, 800835c <_strtod_l+0xa44>
 8008322:	2200      	movs	r2, #0
 8008324:	4630      	mov	r0, r6
 8008326:	4639      	mov	r1, r7
 8008328:	4b3c      	ldr	r3, [pc, #240]	; (800841c <_strtod_l+0xb04>)
 800832a:	f7f8 fb51 	bl	80009d0 <__aeabi_dcmplt>
 800832e:	b9c8      	cbnz	r0, 8008364 <_strtod_l+0xa4c>
 8008330:	2200      	movs	r2, #0
 8008332:	4630      	mov	r0, r6
 8008334:	4639      	mov	r1, r7
 8008336:	4b3c      	ldr	r3, [pc, #240]	; (8008428 <_strtod_l+0xb10>)
 8008338:	f7f8 f8d8 	bl	80004ec <__aeabi_dmul>
 800833c:	4604      	mov	r4, r0
 800833e:	460d      	mov	r5, r1
 8008340:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008344:	9416      	str	r4, [sp, #88]	; 0x58
 8008346:	9317      	str	r3, [sp, #92]	; 0x5c
 8008348:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800834c:	e7a2      	b.n	8008294 <_strtod_l+0x97c>
 800834e:	f1b8 0f01 	cmp.w	r8, #1
 8008352:	d103      	bne.n	800835c <_strtod_l+0xa44>
 8008354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008356:	2b00      	cmp	r3, #0
 8008358:	f43f ad92 	beq.w	8007e80 <_strtod_l+0x568>
 800835c:	2600      	movs	r6, #0
 800835e:	2400      	movs	r4, #0
 8008360:	4f32      	ldr	r7, [pc, #200]	; (800842c <_strtod_l+0xb14>)
 8008362:	e796      	b.n	8008292 <_strtod_l+0x97a>
 8008364:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008366:	4d30      	ldr	r5, [pc, #192]	; (8008428 <_strtod_l+0xb10>)
 8008368:	e7ea      	b.n	8008340 <_strtod_l+0xa28>
 800836a:	4b2f      	ldr	r3, [pc, #188]	; (8008428 <_strtod_l+0xb10>)
 800836c:	2200      	movs	r2, #0
 800836e:	4630      	mov	r0, r6
 8008370:	4639      	mov	r1, r7
 8008372:	f7f8 f8bb 	bl	80004ec <__aeabi_dmul>
 8008376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008378:	4604      	mov	r4, r0
 800837a:	460d      	mov	r5, r1
 800837c:	b933      	cbnz	r3, 800838c <_strtod_l+0xa74>
 800837e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008382:	9010      	str	r0, [sp, #64]	; 0x40
 8008384:	9311      	str	r3, [sp, #68]	; 0x44
 8008386:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800838a:	e783      	b.n	8008294 <_strtod_l+0x97c>
 800838c:	4602      	mov	r2, r0
 800838e:	460b      	mov	r3, r1
 8008390:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008394:	e7f7      	b.n	8008386 <_strtod_l+0xa6e>
 8008396:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800839a:	9b05      	ldr	r3, [sp, #20]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1a8      	bne.n	80082f2 <_strtod_l+0x9da>
 80083a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80083a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80083a6:	0d1b      	lsrs	r3, r3, #20
 80083a8:	051b      	lsls	r3, r3, #20
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d1a1      	bne.n	80082f2 <_strtod_l+0x9da>
 80083ae:	4620      	mov	r0, r4
 80083b0:	4629      	mov	r1, r5
 80083b2:	f7f8 fedd 	bl	8001170 <__aeabi_d2lz>
 80083b6:	f7f8 f86b 	bl	8000490 <__aeabi_l2d>
 80083ba:	4602      	mov	r2, r0
 80083bc:	460b      	mov	r3, r1
 80083be:	4620      	mov	r0, r4
 80083c0:	4629      	mov	r1, r5
 80083c2:	f7f7 fedb 	bl	800017c <__aeabi_dsub>
 80083c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80083c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083cc:	ea43 0308 	orr.w	r3, r3, r8
 80083d0:	4313      	orrs	r3, r2
 80083d2:	4604      	mov	r4, r0
 80083d4:	460d      	mov	r5, r1
 80083d6:	d066      	beq.n	80084a6 <_strtod_l+0xb8e>
 80083d8:	a309      	add	r3, pc, #36	; (adr r3, 8008400 <_strtod_l+0xae8>)
 80083da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083de:	f7f8 faf7 	bl	80009d0 <__aeabi_dcmplt>
 80083e2:	2800      	cmp	r0, #0
 80083e4:	f47f ace2 	bne.w	8007dac <_strtod_l+0x494>
 80083e8:	a307      	add	r3, pc, #28	; (adr r3, 8008408 <_strtod_l+0xaf0>)
 80083ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ee:	4620      	mov	r0, r4
 80083f0:	4629      	mov	r1, r5
 80083f2:	f7f8 fb0b 	bl	8000a0c <__aeabi_dcmpgt>
 80083f6:	2800      	cmp	r0, #0
 80083f8:	f43f af7b 	beq.w	80082f2 <_strtod_l+0x9da>
 80083fc:	e4d6      	b.n	8007dac <_strtod_l+0x494>
 80083fe:	bf00      	nop
 8008400:	94a03595 	.word	0x94a03595
 8008404:	3fdfffff 	.word	0x3fdfffff
 8008408:	35afe535 	.word	0x35afe535
 800840c:	3fe00000 	.word	0x3fe00000
 8008410:	000fffff 	.word	0x000fffff
 8008414:	7ff00000 	.word	0x7ff00000
 8008418:	7fefffff 	.word	0x7fefffff
 800841c:	3ff00000 	.word	0x3ff00000
 8008420:	7fe00000 	.word	0x7fe00000
 8008424:	7c9fffff 	.word	0x7c9fffff
 8008428:	3fe00000 	.word	0x3fe00000
 800842c:	bff00000 	.word	0xbff00000
 8008430:	9b05      	ldr	r3, [sp, #20]
 8008432:	b313      	cbz	r3, 800847a <_strtod_l+0xb62>
 8008434:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008436:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800843a:	d81e      	bhi.n	800847a <_strtod_l+0xb62>
 800843c:	a326      	add	r3, pc, #152	; (adr r3, 80084d8 <_strtod_l+0xbc0>)
 800843e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008442:	4620      	mov	r0, r4
 8008444:	4629      	mov	r1, r5
 8008446:	f7f8 facd 	bl	80009e4 <__aeabi_dcmple>
 800844a:	b190      	cbz	r0, 8008472 <_strtod_l+0xb5a>
 800844c:	4629      	mov	r1, r5
 800844e:	4620      	mov	r0, r4
 8008450:	f7f8 fb24 	bl	8000a9c <__aeabi_d2uiz>
 8008454:	2801      	cmp	r0, #1
 8008456:	bf38      	it	cc
 8008458:	2001      	movcc	r0, #1
 800845a:	f7f7 ffcd 	bl	80003f8 <__aeabi_ui2d>
 800845e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008460:	4604      	mov	r4, r0
 8008462:	460d      	mov	r5, r1
 8008464:	b9d3      	cbnz	r3, 800849c <_strtod_l+0xb84>
 8008466:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800846a:	9012      	str	r0, [sp, #72]	; 0x48
 800846c:	9313      	str	r3, [sp, #76]	; 0x4c
 800846e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8008472:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008474:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008478:	1a9f      	subs	r7, r3, r2
 800847a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800847e:	f001 fe57 	bl	800a130 <__ulp>
 8008482:	4602      	mov	r2, r0
 8008484:	460b      	mov	r3, r1
 8008486:	4630      	mov	r0, r6
 8008488:	4639      	mov	r1, r7
 800848a:	f7f8 f82f 	bl	80004ec <__aeabi_dmul>
 800848e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008492:	f7f7 fe75 	bl	8000180 <__adddf3>
 8008496:	4680      	mov	r8, r0
 8008498:	4689      	mov	r9, r1
 800849a:	e77e      	b.n	800839a <_strtod_l+0xa82>
 800849c:	4602      	mov	r2, r0
 800849e:	460b      	mov	r3, r1
 80084a0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80084a4:	e7e3      	b.n	800846e <_strtod_l+0xb56>
 80084a6:	a30e      	add	r3, pc, #56	; (adr r3, 80084e0 <_strtod_l+0xbc8>)
 80084a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ac:	f7f8 fa90 	bl	80009d0 <__aeabi_dcmplt>
 80084b0:	e7a1      	b.n	80083f6 <_strtod_l+0xade>
 80084b2:	2300      	movs	r3, #0
 80084b4:	930a      	str	r3, [sp, #40]	; 0x28
 80084b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80084b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80084ba:	6013      	str	r3, [r2, #0]
 80084bc:	f7ff ba71 	b.w	80079a2 <_strtod_l+0x8a>
 80084c0:	2a65      	cmp	r2, #101	; 0x65
 80084c2:	f43f ab63 	beq.w	8007b8c <_strtod_l+0x274>
 80084c6:	2a45      	cmp	r2, #69	; 0x45
 80084c8:	f43f ab60 	beq.w	8007b8c <_strtod_l+0x274>
 80084cc:	2301      	movs	r3, #1
 80084ce:	f7ff bb95 	b.w	8007bfc <_strtod_l+0x2e4>
 80084d2:	bf00      	nop
 80084d4:	f3af 8000 	nop.w
 80084d8:	ffc00000 	.word	0xffc00000
 80084dc:	41dfffff 	.word	0x41dfffff
 80084e0:	94a03595 	.word	0x94a03595
 80084e4:	3fcfffff 	.word	0x3fcfffff

080084e8 <strtod>:
 80084e8:	460a      	mov	r2, r1
 80084ea:	4601      	mov	r1, r0
 80084ec:	4802      	ldr	r0, [pc, #8]	; (80084f8 <strtod+0x10>)
 80084ee:	4b03      	ldr	r3, [pc, #12]	; (80084fc <strtod+0x14>)
 80084f0:	6800      	ldr	r0, [r0, #0]
 80084f2:	f7ff ba11 	b.w	8007918 <_strtod_l>
 80084f6:	bf00      	nop
 80084f8:	20000010 	.word	0x20000010
 80084fc:	20000078 	.word	0x20000078

08008500 <strtok>:
 8008500:	4b16      	ldr	r3, [pc, #88]	; (800855c <strtok+0x5c>)
 8008502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008506:	681f      	ldr	r7, [r3, #0]
 8008508:	4605      	mov	r5, r0
 800850a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800850c:	460e      	mov	r6, r1
 800850e:	b9ec      	cbnz	r4, 800854c <strtok+0x4c>
 8008510:	2050      	movs	r0, #80	; 0x50
 8008512:	f001 fa67 	bl	80099e4 <malloc>
 8008516:	4602      	mov	r2, r0
 8008518:	65b8      	str	r0, [r7, #88]	; 0x58
 800851a:	b920      	cbnz	r0, 8008526 <strtok+0x26>
 800851c:	2157      	movs	r1, #87	; 0x57
 800851e:	4b10      	ldr	r3, [pc, #64]	; (8008560 <strtok+0x60>)
 8008520:	4810      	ldr	r0, [pc, #64]	; (8008564 <strtok+0x64>)
 8008522:	f000 f849 	bl	80085b8 <__assert_func>
 8008526:	e9c0 4400 	strd	r4, r4, [r0]
 800852a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800852e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008532:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008536:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800853a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800853e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008542:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008546:	6184      	str	r4, [r0, #24]
 8008548:	7704      	strb	r4, [r0, #28]
 800854a:	6244      	str	r4, [r0, #36]	; 0x24
 800854c:	4631      	mov	r1, r6
 800854e:	4628      	mov	r0, r5
 8008550:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008552:	2301      	movs	r3, #1
 8008554:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008558:	f000 b806 	b.w	8008568 <__strtok_r>
 800855c:	20000010 	.word	0x20000010
 8008560:	0800b5a8 	.word	0x0800b5a8
 8008564:	0800b5bf 	.word	0x0800b5bf

08008568 <__strtok_r>:
 8008568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800856a:	b908      	cbnz	r0, 8008570 <__strtok_r+0x8>
 800856c:	6810      	ldr	r0, [r2, #0]
 800856e:	b188      	cbz	r0, 8008594 <__strtok_r+0x2c>
 8008570:	4604      	mov	r4, r0
 8008572:	460f      	mov	r7, r1
 8008574:	4620      	mov	r0, r4
 8008576:	f814 5b01 	ldrb.w	r5, [r4], #1
 800857a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800857e:	b91e      	cbnz	r6, 8008588 <__strtok_r+0x20>
 8008580:	b965      	cbnz	r5, 800859c <__strtok_r+0x34>
 8008582:	4628      	mov	r0, r5
 8008584:	6015      	str	r5, [r2, #0]
 8008586:	e005      	b.n	8008594 <__strtok_r+0x2c>
 8008588:	42b5      	cmp	r5, r6
 800858a:	d1f6      	bne.n	800857a <__strtok_r+0x12>
 800858c:	2b00      	cmp	r3, #0
 800858e:	d1f0      	bne.n	8008572 <__strtok_r+0xa>
 8008590:	6014      	str	r4, [r2, #0]
 8008592:	7003      	strb	r3, [r0, #0]
 8008594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008596:	461c      	mov	r4, r3
 8008598:	e00c      	b.n	80085b4 <__strtok_r+0x4c>
 800859a:	b915      	cbnz	r5, 80085a2 <__strtok_r+0x3a>
 800859c:	460e      	mov	r6, r1
 800859e:	f814 3b01 	ldrb.w	r3, [r4], #1
 80085a2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80085a6:	42ab      	cmp	r3, r5
 80085a8:	d1f7      	bne.n	800859a <__strtok_r+0x32>
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d0f3      	beq.n	8008596 <__strtok_r+0x2e>
 80085ae:	2300      	movs	r3, #0
 80085b0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80085b4:	6014      	str	r4, [r2, #0]
 80085b6:	e7ed      	b.n	8008594 <__strtok_r+0x2c>

080085b8 <__assert_func>:
 80085b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80085ba:	4614      	mov	r4, r2
 80085bc:	461a      	mov	r2, r3
 80085be:	4b09      	ldr	r3, [pc, #36]	; (80085e4 <__assert_func+0x2c>)
 80085c0:	4605      	mov	r5, r0
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	68d8      	ldr	r0, [r3, #12]
 80085c6:	b14c      	cbz	r4, 80085dc <__assert_func+0x24>
 80085c8:	4b07      	ldr	r3, [pc, #28]	; (80085e8 <__assert_func+0x30>)
 80085ca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80085ce:	9100      	str	r1, [sp, #0]
 80085d0:	462b      	mov	r3, r5
 80085d2:	4906      	ldr	r1, [pc, #24]	; (80085ec <__assert_func+0x34>)
 80085d4:	f000 fe8a 	bl	80092ec <fiprintf>
 80085d8:	f002 fb8e 	bl	800acf8 <abort>
 80085dc:	4b04      	ldr	r3, [pc, #16]	; (80085f0 <__assert_func+0x38>)
 80085de:	461c      	mov	r4, r3
 80085e0:	e7f3      	b.n	80085ca <__assert_func+0x12>
 80085e2:	bf00      	nop
 80085e4:	20000010 	.word	0x20000010
 80085e8:	0800b61c 	.word	0x0800b61c
 80085ec:	0800b629 	.word	0x0800b629
 80085f0:	0800b657 	.word	0x0800b657

080085f4 <quorem>:
 80085f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f8:	6903      	ldr	r3, [r0, #16]
 80085fa:	690c      	ldr	r4, [r1, #16]
 80085fc:	4607      	mov	r7, r0
 80085fe:	42a3      	cmp	r3, r4
 8008600:	f2c0 8082 	blt.w	8008708 <quorem+0x114>
 8008604:	3c01      	subs	r4, #1
 8008606:	f100 0514 	add.w	r5, r0, #20
 800860a:	f101 0814 	add.w	r8, r1, #20
 800860e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008612:	9301      	str	r3, [sp, #4]
 8008614:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008618:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800861c:	3301      	adds	r3, #1
 800861e:	429a      	cmp	r2, r3
 8008620:	fbb2 f6f3 	udiv	r6, r2, r3
 8008624:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008628:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800862c:	d331      	bcc.n	8008692 <quorem+0x9e>
 800862e:	f04f 0e00 	mov.w	lr, #0
 8008632:	4640      	mov	r0, r8
 8008634:	46ac      	mov	ip, r5
 8008636:	46f2      	mov	sl, lr
 8008638:	f850 2b04 	ldr.w	r2, [r0], #4
 800863c:	b293      	uxth	r3, r2
 800863e:	fb06 e303 	mla	r3, r6, r3, lr
 8008642:	0c12      	lsrs	r2, r2, #16
 8008644:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008648:	b29b      	uxth	r3, r3
 800864a:	fb06 e202 	mla	r2, r6, r2, lr
 800864e:	ebaa 0303 	sub.w	r3, sl, r3
 8008652:	f8dc a000 	ldr.w	sl, [ip]
 8008656:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800865a:	fa1f fa8a 	uxth.w	sl, sl
 800865e:	4453      	add	r3, sl
 8008660:	f8dc a000 	ldr.w	sl, [ip]
 8008664:	b292      	uxth	r2, r2
 8008666:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800866a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800866e:	b29b      	uxth	r3, r3
 8008670:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008674:	4581      	cmp	r9, r0
 8008676:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800867a:	f84c 3b04 	str.w	r3, [ip], #4
 800867e:	d2db      	bcs.n	8008638 <quorem+0x44>
 8008680:	f855 300b 	ldr.w	r3, [r5, fp]
 8008684:	b92b      	cbnz	r3, 8008692 <quorem+0x9e>
 8008686:	9b01      	ldr	r3, [sp, #4]
 8008688:	3b04      	subs	r3, #4
 800868a:	429d      	cmp	r5, r3
 800868c:	461a      	mov	r2, r3
 800868e:	d32f      	bcc.n	80086f0 <quorem+0xfc>
 8008690:	613c      	str	r4, [r7, #16]
 8008692:	4638      	mov	r0, r7
 8008694:	f001 fca4 	bl	8009fe0 <__mcmp>
 8008698:	2800      	cmp	r0, #0
 800869a:	db25      	blt.n	80086e8 <quorem+0xf4>
 800869c:	4628      	mov	r0, r5
 800869e:	f04f 0c00 	mov.w	ip, #0
 80086a2:	3601      	adds	r6, #1
 80086a4:	f858 1b04 	ldr.w	r1, [r8], #4
 80086a8:	f8d0 e000 	ldr.w	lr, [r0]
 80086ac:	b28b      	uxth	r3, r1
 80086ae:	ebac 0303 	sub.w	r3, ip, r3
 80086b2:	fa1f f28e 	uxth.w	r2, lr
 80086b6:	4413      	add	r3, r2
 80086b8:	0c0a      	lsrs	r2, r1, #16
 80086ba:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80086be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086c8:	45c1      	cmp	r9, r8
 80086ca:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80086ce:	f840 3b04 	str.w	r3, [r0], #4
 80086d2:	d2e7      	bcs.n	80086a4 <quorem+0xb0>
 80086d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80086d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80086dc:	b922      	cbnz	r2, 80086e8 <quorem+0xf4>
 80086de:	3b04      	subs	r3, #4
 80086e0:	429d      	cmp	r5, r3
 80086e2:	461a      	mov	r2, r3
 80086e4:	d30a      	bcc.n	80086fc <quorem+0x108>
 80086e6:	613c      	str	r4, [r7, #16]
 80086e8:	4630      	mov	r0, r6
 80086ea:	b003      	add	sp, #12
 80086ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086f0:	6812      	ldr	r2, [r2, #0]
 80086f2:	3b04      	subs	r3, #4
 80086f4:	2a00      	cmp	r2, #0
 80086f6:	d1cb      	bne.n	8008690 <quorem+0x9c>
 80086f8:	3c01      	subs	r4, #1
 80086fa:	e7c6      	b.n	800868a <quorem+0x96>
 80086fc:	6812      	ldr	r2, [r2, #0]
 80086fe:	3b04      	subs	r3, #4
 8008700:	2a00      	cmp	r2, #0
 8008702:	d1f0      	bne.n	80086e6 <quorem+0xf2>
 8008704:	3c01      	subs	r4, #1
 8008706:	e7eb      	b.n	80086e0 <quorem+0xec>
 8008708:	2000      	movs	r0, #0
 800870a:	e7ee      	b.n	80086ea <quorem+0xf6>
 800870c:	0000      	movs	r0, r0
	...

08008710 <_dtoa_r>:
 8008710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008714:	4616      	mov	r6, r2
 8008716:	461f      	mov	r7, r3
 8008718:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800871a:	b099      	sub	sp, #100	; 0x64
 800871c:	4605      	mov	r5, r0
 800871e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008722:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008726:	b974      	cbnz	r4, 8008746 <_dtoa_r+0x36>
 8008728:	2010      	movs	r0, #16
 800872a:	f001 f95b 	bl	80099e4 <malloc>
 800872e:	4602      	mov	r2, r0
 8008730:	6268      	str	r0, [r5, #36]	; 0x24
 8008732:	b920      	cbnz	r0, 800873e <_dtoa_r+0x2e>
 8008734:	21ea      	movs	r1, #234	; 0xea
 8008736:	4ba8      	ldr	r3, [pc, #672]	; (80089d8 <_dtoa_r+0x2c8>)
 8008738:	48a8      	ldr	r0, [pc, #672]	; (80089dc <_dtoa_r+0x2cc>)
 800873a:	f7ff ff3d 	bl	80085b8 <__assert_func>
 800873e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008742:	6004      	str	r4, [r0, #0]
 8008744:	60c4      	str	r4, [r0, #12]
 8008746:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008748:	6819      	ldr	r1, [r3, #0]
 800874a:	b151      	cbz	r1, 8008762 <_dtoa_r+0x52>
 800874c:	685a      	ldr	r2, [r3, #4]
 800874e:	2301      	movs	r3, #1
 8008750:	4093      	lsls	r3, r2
 8008752:	604a      	str	r2, [r1, #4]
 8008754:	608b      	str	r3, [r1, #8]
 8008756:	4628      	mov	r0, r5
 8008758:	f001 f9ba 	bl	8009ad0 <_Bfree>
 800875c:	2200      	movs	r2, #0
 800875e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008760:	601a      	str	r2, [r3, #0]
 8008762:	1e3b      	subs	r3, r7, #0
 8008764:	bfaf      	iteee	ge
 8008766:	2300      	movge	r3, #0
 8008768:	2201      	movlt	r2, #1
 800876a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800876e:	9305      	strlt	r3, [sp, #20]
 8008770:	bfa8      	it	ge
 8008772:	f8c8 3000 	strge.w	r3, [r8]
 8008776:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800877a:	4b99      	ldr	r3, [pc, #612]	; (80089e0 <_dtoa_r+0x2d0>)
 800877c:	bfb8      	it	lt
 800877e:	f8c8 2000 	strlt.w	r2, [r8]
 8008782:	ea33 0309 	bics.w	r3, r3, r9
 8008786:	d119      	bne.n	80087bc <_dtoa_r+0xac>
 8008788:	f242 730f 	movw	r3, #9999	; 0x270f
 800878c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800878e:	6013      	str	r3, [r2, #0]
 8008790:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008794:	4333      	orrs	r3, r6
 8008796:	f000 857f 	beq.w	8009298 <_dtoa_r+0xb88>
 800879a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800879c:	b953      	cbnz	r3, 80087b4 <_dtoa_r+0xa4>
 800879e:	4b91      	ldr	r3, [pc, #580]	; (80089e4 <_dtoa_r+0x2d4>)
 80087a0:	e022      	b.n	80087e8 <_dtoa_r+0xd8>
 80087a2:	4b91      	ldr	r3, [pc, #580]	; (80089e8 <_dtoa_r+0x2d8>)
 80087a4:	9303      	str	r3, [sp, #12]
 80087a6:	3308      	adds	r3, #8
 80087a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80087aa:	6013      	str	r3, [r2, #0]
 80087ac:	9803      	ldr	r0, [sp, #12]
 80087ae:	b019      	add	sp, #100	; 0x64
 80087b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b4:	4b8b      	ldr	r3, [pc, #556]	; (80089e4 <_dtoa_r+0x2d4>)
 80087b6:	9303      	str	r3, [sp, #12]
 80087b8:	3303      	adds	r3, #3
 80087ba:	e7f5      	b.n	80087a8 <_dtoa_r+0x98>
 80087bc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80087c0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80087c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80087c8:	2200      	movs	r2, #0
 80087ca:	2300      	movs	r3, #0
 80087cc:	f7f8 f8f6 	bl	80009bc <__aeabi_dcmpeq>
 80087d0:	4680      	mov	r8, r0
 80087d2:	b158      	cbz	r0, 80087ec <_dtoa_r+0xdc>
 80087d4:	2301      	movs	r3, #1
 80087d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80087d8:	6013      	str	r3, [r2, #0]
 80087da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f000 8558 	beq.w	8009292 <_dtoa_r+0xb82>
 80087e2:	4882      	ldr	r0, [pc, #520]	; (80089ec <_dtoa_r+0x2dc>)
 80087e4:	6018      	str	r0, [r3, #0]
 80087e6:	1e43      	subs	r3, r0, #1
 80087e8:	9303      	str	r3, [sp, #12]
 80087ea:	e7df      	b.n	80087ac <_dtoa_r+0x9c>
 80087ec:	ab16      	add	r3, sp, #88	; 0x58
 80087ee:	9301      	str	r3, [sp, #4]
 80087f0:	ab17      	add	r3, sp, #92	; 0x5c
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	4628      	mov	r0, r5
 80087f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80087fa:	f001 fd13 	bl	800a224 <__d2b>
 80087fe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008802:	4683      	mov	fp, r0
 8008804:	2c00      	cmp	r4, #0
 8008806:	d07f      	beq.n	8008908 <_dtoa_r+0x1f8>
 8008808:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800880c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800880e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008812:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008816:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800881a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800881e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008822:	2200      	movs	r2, #0
 8008824:	4b72      	ldr	r3, [pc, #456]	; (80089f0 <_dtoa_r+0x2e0>)
 8008826:	f7f7 fca9 	bl	800017c <__aeabi_dsub>
 800882a:	a365      	add	r3, pc, #404	; (adr r3, 80089c0 <_dtoa_r+0x2b0>)
 800882c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008830:	f7f7 fe5c 	bl	80004ec <__aeabi_dmul>
 8008834:	a364      	add	r3, pc, #400	; (adr r3, 80089c8 <_dtoa_r+0x2b8>)
 8008836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883a:	f7f7 fca1 	bl	8000180 <__adddf3>
 800883e:	4606      	mov	r6, r0
 8008840:	4620      	mov	r0, r4
 8008842:	460f      	mov	r7, r1
 8008844:	f7f7 fde8 	bl	8000418 <__aeabi_i2d>
 8008848:	a361      	add	r3, pc, #388	; (adr r3, 80089d0 <_dtoa_r+0x2c0>)
 800884a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884e:	f7f7 fe4d 	bl	80004ec <__aeabi_dmul>
 8008852:	4602      	mov	r2, r0
 8008854:	460b      	mov	r3, r1
 8008856:	4630      	mov	r0, r6
 8008858:	4639      	mov	r1, r7
 800885a:	f7f7 fc91 	bl	8000180 <__adddf3>
 800885e:	4606      	mov	r6, r0
 8008860:	460f      	mov	r7, r1
 8008862:	f7f8 f8f3 	bl	8000a4c <__aeabi_d2iz>
 8008866:	2200      	movs	r2, #0
 8008868:	4682      	mov	sl, r0
 800886a:	2300      	movs	r3, #0
 800886c:	4630      	mov	r0, r6
 800886e:	4639      	mov	r1, r7
 8008870:	f7f8 f8ae 	bl	80009d0 <__aeabi_dcmplt>
 8008874:	b148      	cbz	r0, 800888a <_dtoa_r+0x17a>
 8008876:	4650      	mov	r0, sl
 8008878:	f7f7 fdce 	bl	8000418 <__aeabi_i2d>
 800887c:	4632      	mov	r2, r6
 800887e:	463b      	mov	r3, r7
 8008880:	f7f8 f89c 	bl	80009bc <__aeabi_dcmpeq>
 8008884:	b908      	cbnz	r0, 800888a <_dtoa_r+0x17a>
 8008886:	f10a 3aff 	add.w	sl, sl, #4294967295
 800888a:	f1ba 0f16 	cmp.w	sl, #22
 800888e:	d858      	bhi.n	8008942 <_dtoa_r+0x232>
 8008890:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008894:	4b57      	ldr	r3, [pc, #348]	; (80089f4 <_dtoa_r+0x2e4>)
 8008896:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800889a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889e:	f7f8 f897 	bl	80009d0 <__aeabi_dcmplt>
 80088a2:	2800      	cmp	r0, #0
 80088a4:	d04f      	beq.n	8008946 <_dtoa_r+0x236>
 80088a6:	2300      	movs	r3, #0
 80088a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80088ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80088b0:	1b1c      	subs	r4, r3, r4
 80088b2:	1e63      	subs	r3, r4, #1
 80088b4:	9309      	str	r3, [sp, #36]	; 0x24
 80088b6:	bf49      	itett	mi
 80088b8:	f1c4 0301 	rsbmi	r3, r4, #1
 80088bc:	2300      	movpl	r3, #0
 80088be:	9306      	strmi	r3, [sp, #24]
 80088c0:	2300      	movmi	r3, #0
 80088c2:	bf54      	ite	pl
 80088c4:	9306      	strpl	r3, [sp, #24]
 80088c6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80088c8:	f1ba 0f00 	cmp.w	sl, #0
 80088cc:	db3d      	blt.n	800894a <_dtoa_r+0x23a>
 80088ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088d0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80088d4:	4453      	add	r3, sl
 80088d6:	9309      	str	r3, [sp, #36]	; 0x24
 80088d8:	2300      	movs	r3, #0
 80088da:	930a      	str	r3, [sp, #40]	; 0x28
 80088dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088de:	2b09      	cmp	r3, #9
 80088e0:	f200 808c 	bhi.w	80089fc <_dtoa_r+0x2ec>
 80088e4:	2b05      	cmp	r3, #5
 80088e6:	bfc4      	itt	gt
 80088e8:	3b04      	subgt	r3, #4
 80088ea:	9322      	strgt	r3, [sp, #136]	; 0x88
 80088ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088ee:	bfc8      	it	gt
 80088f0:	2400      	movgt	r4, #0
 80088f2:	f1a3 0302 	sub.w	r3, r3, #2
 80088f6:	bfd8      	it	le
 80088f8:	2401      	movle	r4, #1
 80088fa:	2b03      	cmp	r3, #3
 80088fc:	f200 808a 	bhi.w	8008a14 <_dtoa_r+0x304>
 8008900:	e8df f003 	tbb	[pc, r3]
 8008904:	5b4d4f2d 	.word	0x5b4d4f2d
 8008908:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800890c:	441c      	add	r4, r3
 800890e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008912:	2b20      	cmp	r3, #32
 8008914:	bfc3      	ittte	gt
 8008916:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800891a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800891e:	fa09 f303 	lslgt.w	r3, r9, r3
 8008922:	f1c3 0320 	rsble	r3, r3, #32
 8008926:	bfc6      	itte	gt
 8008928:	fa26 f000 	lsrgt.w	r0, r6, r0
 800892c:	4318      	orrgt	r0, r3
 800892e:	fa06 f003 	lslle.w	r0, r6, r3
 8008932:	f7f7 fd61 	bl	80003f8 <__aeabi_ui2d>
 8008936:	2301      	movs	r3, #1
 8008938:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800893c:	3c01      	subs	r4, #1
 800893e:	9313      	str	r3, [sp, #76]	; 0x4c
 8008940:	e76f      	b.n	8008822 <_dtoa_r+0x112>
 8008942:	2301      	movs	r3, #1
 8008944:	e7b2      	b.n	80088ac <_dtoa_r+0x19c>
 8008946:	900f      	str	r0, [sp, #60]	; 0x3c
 8008948:	e7b1      	b.n	80088ae <_dtoa_r+0x19e>
 800894a:	9b06      	ldr	r3, [sp, #24]
 800894c:	eba3 030a 	sub.w	r3, r3, sl
 8008950:	9306      	str	r3, [sp, #24]
 8008952:	f1ca 0300 	rsb	r3, sl, #0
 8008956:	930a      	str	r3, [sp, #40]	; 0x28
 8008958:	2300      	movs	r3, #0
 800895a:	930e      	str	r3, [sp, #56]	; 0x38
 800895c:	e7be      	b.n	80088dc <_dtoa_r+0x1cc>
 800895e:	2300      	movs	r3, #0
 8008960:	930b      	str	r3, [sp, #44]	; 0x2c
 8008962:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008964:	2b00      	cmp	r3, #0
 8008966:	dc58      	bgt.n	8008a1a <_dtoa_r+0x30a>
 8008968:	f04f 0901 	mov.w	r9, #1
 800896c:	464b      	mov	r3, r9
 800896e:	f8cd 9020 	str.w	r9, [sp, #32]
 8008972:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8008976:	2200      	movs	r2, #0
 8008978:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800897a:	6042      	str	r2, [r0, #4]
 800897c:	2204      	movs	r2, #4
 800897e:	f102 0614 	add.w	r6, r2, #20
 8008982:	429e      	cmp	r6, r3
 8008984:	6841      	ldr	r1, [r0, #4]
 8008986:	d94e      	bls.n	8008a26 <_dtoa_r+0x316>
 8008988:	4628      	mov	r0, r5
 800898a:	f001 f861 	bl	8009a50 <_Balloc>
 800898e:	9003      	str	r0, [sp, #12]
 8008990:	2800      	cmp	r0, #0
 8008992:	d14c      	bne.n	8008a2e <_dtoa_r+0x31e>
 8008994:	4602      	mov	r2, r0
 8008996:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800899a:	4b17      	ldr	r3, [pc, #92]	; (80089f8 <_dtoa_r+0x2e8>)
 800899c:	e6cc      	b.n	8008738 <_dtoa_r+0x28>
 800899e:	2301      	movs	r3, #1
 80089a0:	e7de      	b.n	8008960 <_dtoa_r+0x250>
 80089a2:	2300      	movs	r3, #0
 80089a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80089a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80089a8:	eb0a 0903 	add.w	r9, sl, r3
 80089ac:	f109 0301 	add.w	r3, r9, #1
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	9308      	str	r3, [sp, #32]
 80089b4:	bfb8      	it	lt
 80089b6:	2301      	movlt	r3, #1
 80089b8:	e7dd      	b.n	8008976 <_dtoa_r+0x266>
 80089ba:	2301      	movs	r3, #1
 80089bc:	e7f2      	b.n	80089a4 <_dtoa_r+0x294>
 80089be:	bf00      	nop
 80089c0:	636f4361 	.word	0x636f4361
 80089c4:	3fd287a7 	.word	0x3fd287a7
 80089c8:	8b60c8b3 	.word	0x8b60c8b3
 80089cc:	3fc68a28 	.word	0x3fc68a28
 80089d0:	509f79fb 	.word	0x509f79fb
 80089d4:	3fd34413 	.word	0x3fd34413
 80089d8:	0800b5a8 	.word	0x0800b5a8
 80089dc:	0800b665 	.word	0x0800b665
 80089e0:	7ff00000 	.word	0x7ff00000
 80089e4:	0800b661 	.word	0x0800b661
 80089e8:	0800b658 	.word	0x0800b658
 80089ec:	0800b531 	.word	0x0800b531
 80089f0:	3ff80000 	.word	0x3ff80000
 80089f4:	0800b7d0 	.word	0x0800b7d0
 80089f8:	0800b6c0 	.word	0x0800b6c0
 80089fc:	2401      	movs	r4, #1
 80089fe:	2300      	movs	r3, #0
 8008a00:	940b      	str	r4, [sp, #44]	; 0x2c
 8008a02:	9322      	str	r3, [sp, #136]	; 0x88
 8008a04:	f04f 39ff 	mov.w	r9, #4294967295
 8008a08:	2200      	movs	r2, #0
 8008a0a:	2312      	movs	r3, #18
 8008a0c:	f8cd 9020 	str.w	r9, [sp, #32]
 8008a10:	9223      	str	r2, [sp, #140]	; 0x8c
 8008a12:	e7b0      	b.n	8008976 <_dtoa_r+0x266>
 8008a14:	2301      	movs	r3, #1
 8008a16:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a18:	e7f4      	b.n	8008a04 <_dtoa_r+0x2f4>
 8008a1a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8008a1e:	464b      	mov	r3, r9
 8008a20:	f8cd 9020 	str.w	r9, [sp, #32]
 8008a24:	e7a7      	b.n	8008976 <_dtoa_r+0x266>
 8008a26:	3101      	adds	r1, #1
 8008a28:	6041      	str	r1, [r0, #4]
 8008a2a:	0052      	lsls	r2, r2, #1
 8008a2c:	e7a7      	b.n	800897e <_dtoa_r+0x26e>
 8008a2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008a30:	9a03      	ldr	r2, [sp, #12]
 8008a32:	601a      	str	r2, [r3, #0]
 8008a34:	9b08      	ldr	r3, [sp, #32]
 8008a36:	2b0e      	cmp	r3, #14
 8008a38:	f200 80a8 	bhi.w	8008b8c <_dtoa_r+0x47c>
 8008a3c:	2c00      	cmp	r4, #0
 8008a3e:	f000 80a5 	beq.w	8008b8c <_dtoa_r+0x47c>
 8008a42:	f1ba 0f00 	cmp.w	sl, #0
 8008a46:	dd34      	ble.n	8008ab2 <_dtoa_r+0x3a2>
 8008a48:	4a9a      	ldr	r2, [pc, #616]	; (8008cb4 <_dtoa_r+0x5a4>)
 8008a4a:	f00a 030f 	and.w	r3, sl, #15
 8008a4e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008a52:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008a56:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008a5a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008a5e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008a62:	d016      	beq.n	8008a92 <_dtoa_r+0x382>
 8008a64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a68:	4b93      	ldr	r3, [pc, #588]	; (8008cb8 <_dtoa_r+0x5a8>)
 8008a6a:	2703      	movs	r7, #3
 8008a6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a70:	f7f7 fe66 	bl	8000740 <__aeabi_ddiv>
 8008a74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a78:	f004 040f 	and.w	r4, r4, #15
 8008a7c:	4e8e      	ldr	r6, [pc, #568]	; (8008cb8 <_dtoa_r+0x5a8>)
 8008a7e:	b954      	cbnz	r4, 8008a96 <_dtoa_r+0x386>
 8008a80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008a84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a88:	f7f7 fe5a 	bl	8000740 <__aeabi_ddiv>
 8008a8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a90:	e029      	b.n	8008ae6 <_dtoa_r+0x3d6>
 8008a92:	2702      	movs	r7, #2
 8008a94:	e7f2      	b.n	8008a7c <_dtoa_r+0x36c>
 8008a96:	07e1      	lsls	r1, r4, #31
 8008a98:	d508      	bpl.n	8008aac <_dtoa_r+0x39c>
 8008a9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008a9e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008aa2:	f7f7 fd23 	bl	80004ec <__aeabi_dmul>
 8008aa6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008aaa:	3701      	adds	r7, #1
 8008aac:	1064      	asrs	r4, r4, #1
 8008aae:	3608      	adds	r6, #8
 8008ab0:	e7e5      	b.n	8008a7e <_dtoa_r+0x36e>
 8008ab2:	f000 80a5 	beq.w	8008c00 <_dtoa_r+0x4f0>
 8008ab6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008aba:	f1ca 0400 	rsb	r4, sl, #0
 8008abe:	4b7d      	ldr	r3, [pc, #500]	; (8008cb4 <_dtoa_r+0x5a4>)
 8008ac0:	f004 020f 	and.w	r2, r4, #15
 8008ac4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008acc:	f7f7 fd0e 	bl	80004ec <__aeabi_dmul>
 8008ad0:	2702      	movs	r7, #2
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ad8:	4e77      	ldr	r6, [pc, #476]	; (8008cb8 <_dtoa_r+0x5a8>)
 8008ada:	1124      	asrs	r4, r4, #4
 8008adc:	2c00      	cmp	r4, #0
 8008ade:	f040 8084 	bne.w	8008bea <_dtoa_r+0x4da>
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1d2      	bne.n	8008a8c <_dtoa_r+0x37c>
 8008ae6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	f000 808b 	beq.w	8008c04 <_dtoa_r+0x4f4>
 8008aee:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008af2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008af6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008afa:	2200      	movs	r2, #0
 8008afc:	4b6f      	ldr	r3, [pc, #444]	; (8008cbc <_dtoa_r+0x5ac>)
 8008afe:	f7f7 ff67 	bl	80009d0 <__aeabi_dcmplt>
 8008b02:	2800      	cmp	r0, #0
 8008b04:	d07e      	beq.n	8008c04 <_dtoa_r+0x4f4>
 8008b06:	9b08      	ldr	r3, [sp, #32]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d07b      	beq.n	8008c04 <_dtoa_r+0x4f4>
 8008b0c:	f1b9 0f00 	cmp.w	r9, #0
 8008b10:	dd38      	ble.n	8008b84 <_dtoa_r+0x474>
 8008b12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b16:	2200      	movs	r2, #0
 8008b18:	4b69      	ldr	r3, [pc, #420]	; (8008cc0 <_dtoa_r+0x5b0>)
 8008b1a:	f7f7 fce7 	bl	80004ec <__aeabi_dmul>
 8008b1e:	464c      	mov	r4, r9
 8008b20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b24:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008b28:	3701      	adds	r7, #1
 8008b2a:	4638      	mov	r0, r7
 8008b2c:	f7f7 fc74 	bl	8000418 <__aeabi_i2d>
 8008b30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b34:	f7f7 fcda 	bl	80004ec <__aeabi_dmul>
 8008b38:	2200      	movs	r2, #0
 8008b3a:	4b62      	ldr	r3, [pc, #392]	; (8008cc4 <_dtoa_r+0x5b4>)
 8008b3c:	f7f7 fb20 	bl	8000180 <__adddf3>
 8008b40:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008b44:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008b48:	9611      	str	r6, [sp, #68]	; 0x44
 8008b4a:	2c00      	cmp	r4, #0
 8008b4c:	d15d      	bne.n	8008c0a <_dtoa_r+0x4fa>
 8008b4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b52:	2200      	movs	r2, #0
 8008b54:	4b5c      	ldr	r3, [pc, #368]	; (8008cc8 <_dtoa_r+0x5b8>)
 8008b56:	f7f7 fb11 	bl	800017c <__aeabi_dsub>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b62:	4633      	mov	r3, r6
 8008b64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008b66:	f7f7 ff51 	bl	8000a0c <__aeabi_dcmpgt>
 8008b6a:	2800      	cmp	r0, #0
 8008b6c:	f040 829c 	bne.w	80090a8 <_dtoa_r+0x998>
 8008b70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008b76:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008b7a:	f7f7 ff29 	bl	80009d0 <__aeabi_dcmplt>
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	f040 8290 	bne.w	80090a4 <_dtoa_r+0x994>
 8008b84:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008b88:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008b8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	f2c0 8152 	blt.w	8008e38 <_dtoa_r+0x728>
 8008b94:	f1ba 0f0e 	cmp.w	sl, #14
 8008b98:	f300 814e 	bgt.w	8008e38 <_dtoa_r+0x728>
 8008b9c:	4b45      	ldr	r3, [pc, #276]	; (8008cb4 <_dtoa_r+0x5a4>)
 8008b9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008ba2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ba6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008baa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	f280 80db 	bge.w	8008d68 <_dtoa_r+0x658>
 8008bb2:	9b08      	ldr	r3, [sp, #32]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	f300 80d7 	bgt.w	8008d68 <_dtoa_r+0x658>
 8008bba:	f040 8272 	bne.w	80090a2 <_dtoa_r+0x992>
 8008bbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	4b40      	ldr	r3, [pc, #256]	; (8008cc8 <_dtoa_r+0x5b8>)
 8008bc6:	f7f7 fc91 	bl	80004ec <__aeabi_dmul>
 8008bca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bce:	f7f7 ff13 	bl	80009f8 <__aeabi_dcmpge>
 8008bd2:	9c08      	ldr	r4, [sp, #32]
 8008bd4:	4626      	mov	r6, r4
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	f040 8248 	bne.w	800906c <_dtoa_r+0x95c>
 8008bdc:	2331      	movs	r3, #49	; 0x31
 8008bde:	9f03      	ldr	r7, [sp, #12]
 8008be0:	f10a 0a01 	add.w	sl, sl, #1
 8008be4:	f807 3b01 	strb.w	r3, [r7], #1
 8008be8:	e244      	b.n	8009074 <_dtoa_r+0x964>
 8008bea:	07e2      	lsls	r2, r4, #31
 8008bec:	d505      	bpl.n	8008bfa <_dtoa_r+0x4ea>
 8008bee:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008bf2:	f7f7 fc7b 	bl	80004ec <__aeabi_dmul>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	3701      	adds	r7, #1
 8008bfa:	1064      	asrs	r4, r4, #1
 8008bfc:	3608      	adds	r6, #8
 8008bfe:	e76d      	b.n	8008adc <_dtoa_r+0x3cc>
 8008c00:	2702      	movs	r7, #2
 8008c02:	e770      	b.n	8008ae6 <_dtoa_r+0x3d6>
 8008c04:	46d0      	mov	r8, sl
 8008c06:	9c08      	ldr	r4, [sp, #32]
 8008c08:	e78f      	b.n	8008b2a <_dtoa_r+0x41a>
 8008c0a:	9903      	ldr	r1, [sp, #12]
 8008c0c:	4b29      	ldr	r3, [pc, #164]	; (8008cb4 <_dtoa_r+0x5a4>)
 8008c0e:	4421      	add	r1, r4
 8008c10:	9112      	str	r1, [sp, #72]	; 0x48
 8008c12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c18:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008c1c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008c20:	2900      	cmp	r1, #0
 8008c22:	d055      	beq.n	8008cd0 <_dtoa_r+0x5c0>
 8008c24:	2000      	movs	r0, #0
 8008c26:	4929      	ldr	r1, [pc, #164]	; (8008ccc <_dtoa_r+0x5bc>)
 8008c28:	f7f7 fd8a 	bl	8000740 <__aeabi_ddiv>
 8008c2c:	463b      	mov	r3, r7
 8008c2e:	4632      	mov	r2, r6
 8008c30:	f7f7 faa4 	bl	800017c <__aeabi_dsub>
 8008c34:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008c38:	9f03      	ldr	r7, [sp, #12]
 8008c3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c3e:	f7f7 ff05 	bl	8000a4c <__aeabi_d2iz>
 8008c42:	4604      	mov	r4, r0
 8008c44:	f7f7 fbe8 	bl	8000418 <__aeabi_i2d>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c50:	f7f7 fa94 	bl	800017c <__aeabi_dsub>
 8008c54:	4602      	mov	r2, r0
 8008c56:	460b      	mov	r3, r1
 8008c58:	3430      	adds	r4, #48	; 0x30
 8008c5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008c5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008c62:	f807 4b01 	strb.w	r4, [r7], #1
 8008c66:	f7f7 feb3 	bl	80009d0 <__aeabi_dcmplt>
 8008c6a:	2800      	cmp	r0, #0
 8008c6c:	d174      	bne.n	8008d58 <_dtoa_r+0x648>
 8008c6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c72:	2000      	movs	r0, #0
 8008c74:	4911      	ldr	r1, [pc, #68]	; (8008cbc <_dtoa_r+0x5ac>)
 8008c76:	f7f7 fa81 	bl	800017c <__aeabi_dsub>
 8008c7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008c7e:	f7f7 fea7 	bl	80009d0 <__aeabi_dcmplt>
 8008c82:	2800      	cmp	r0, #0
 8008c84:	f040 80b7 	bne.w	8008df6 <_dtoa_r+0x6e6>
 8008c88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c8a:	429f      	cmp	r7, r3
 8008c8c:	f43f af7a 	beq.w	8008b84 <_dtoa_r+0x474>
 8008c90:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008c94:	2200      	movs	r2, #0
 8008c96:	4b0a      	ldr	r3, [pc, #40]	; (8008cc0 <_dtoa_r+0x5b0>)
 8008c98:	f7f7 fc28 	bl	80004ec <__aeabi_dmul>
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008ca2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ca6:	4b06      	ldr	r3, [pc, #24]	; (8008cc0 <_dtoa_r+0x5b0>)
 8008ca8:	f7f7 fc20 	bl	80004ec <__aeabi_dmul>
 8008cac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cb0:	e7c3      	b.n	8008c3a <_dtoa_r+0x52a>
 8008cb2:	bf00      	nop
 8008cb4:	0800b7d0 	.word	0x0800b7d0
 8008cb8:	0800b7a8 	.word	0x0800b7a8
 8008cbc:	3ff00000 	.word	0x3ff00000
 8008cc0:	40240000 	.word	0x40240000
 8008cc4:	401c0000 	.word	0x401c0000
 8008cc8:	40140000 	.word	0x40140000
 8008ccc:	3fe00000 	.word	0x3fe00000
 8008cd0:	4630      	mov	r0, r6
 8008cd2:	4639      	mov	r1, r7
 8008cd4:	f7f7 fc0a 	bl	80004ec <__aeabi_dmul>
 8008cd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008cda:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008cde:	9c03      	ldr	r4, [sp, #12]
 8008ce0:	9314      	str	r3, [sp, #80]	; 0x50
 8008ce2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ce6:	f7f7 feb1 	bl	8000a4c <__aeabi_d2iz>
 8008cea:	9015      	str	r0, [sp, #84]	; 0x54
 8008cec:	f7f7 fb94 	bl	8000418 <__aeabi_i2d>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008cf8:	f7f7 fa40 	bl	800017c <__aeabi_dsub>
 8008cfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cfe:	4606      	mov	r6, r0
 8008d00:	3330      	adds	r3, #48	; 0x30
 8008d02:	f804 3b01 	strb.w	r3, [r4], #1
 8008d06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d08:	460f      	mov	r7, r1
 8008d0a:	429c      	cmp	r4, r3
 8008d0c:	f04f 0200 	mov.w	r2, #0
 8008d10:	d124      	bne.n	8008d5c <_dtoa_r+0x64c>
 8008d12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d16:	4bb0      	ldr	r3, [pc, #704]	; (8008fd8 <_dtoa_r+0x8c8>)
 8008d18:	f7f7 fa32 	bl	8000180 <__adddf3>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	460b      	mov	r3, r1
 8008d20:	4630      	mov	r0, r6
 8008d22:	4639      	mov	r1, r7
 8008d24:	f7f7 fe72 	bl	8000a0c <__aeabi_dcmpgt>
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	d163      	bne.n	8008df4 <_dtoa_r+0x6e4>
 8008d2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008d30:	2000      	movs	r0, #0
 8008d32:	49a9      	ldr	r1, [pc, #676]	; (8008fd8 <_dtoa_r+0x8c8>)
 8008d34:	f7f7 fa22 	bl	800017c <__aeabi_dsub>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	4630      	mov	r0, r6
 8008d3e:	4639      	mov	r1, r7
 8008d40:	f7f7 fe46 	bl	80009d0 <__aeabi_dcmplt>
 8008d44:	2800      	cmp	r0, #0
 8008d46:	f43f af1d 	beq.w	8008b84 <_dtoa_r+0x474>
 8008d4a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008d4c:	1e7b      	subs	r3, r7, #1
 8008d4e:	9314      	str	r3, [sp, #80]	; 0x50
 8008d50:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008d54:	2b30      	cmp	r3, #48	; 0x30
 8008d56:	d0f8      	beq.n	8008d4a <_dtoa_r+0x63a>
 8008d58:	46c2      	mov	sl, r8
 8008d5a:	e03b      	b.n	8008dd4 <_dtoa_r+0x6c4>
 8008d5c:	4b9f      	ldr	r3, [pc, #636]	; (8008fdc <_dtoa_r+0x8cc>)
 8008d5e:	f7f7 fbc5 	bl	80004ec <__aeabi_dmul>
 8008d62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d66:	e7bc      	b.n	8008ce2 <_dtoa_r+0x5d2>
 8008d68:	9f03      	ldr	r7, [sp, #12]
 8008d6a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008d6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d72:	4640      	mov	r0, r8
 8008d74:	4649      	mov	r1, r9
 8008d76:	f7f7 fce3 	bl	8000740 <__aeabi_ddiv>
 8008d7a:	f7f7 fe67 	bl	8000a4c <__aeabi_d2iz>
 8008d7e:	4604      	mov	r4, r0
 8008d80:	f7f7 fb4a 	bl	8000418 <__aeabi_i2d>
 8008d84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d88:	f7f7 fbb0 	bl	80004ec <__aeabi_dmul>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	460b      	mov	r3, r1
 8008d90:	4640      	mov	r0, r8
 8008d92:	4649      	mov	r1, r9
 8008d94:	f7f7 f9f2 	bl	800017c <__aeabi_dsub>
 8008d98:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008d9c:	f807 6b01 	strb.w	r6, [r7], #1
 8008da0:	9e03      	ldr	r6, [sp, #12]
 8008da2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008da6:	1bbe      	subs	r6, r7, r6
 8008da8:	45b4      	cmp	ip, r6
 8008daa:	4602      	mov	r2, r0
 8008dac:	460b      	mov	r3, r1
 8008dae:	d136      	bne.n	8008e1e <_dtoa_r+0x70e>
 8008db0:	f7f7 f9e6 	bl	8000180 <__adddf3>
 8008db4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008db8:	4680      	mov	r8, r0
 8008dba:	4689      	mov	r9, r1
 8008dbc:	f7f7 fe26 	bl	8000a0c <__aeabi_dcmpgt>
 8008dc0:	bb58      	cbnz	r0, 8008e1a <_dtoa_r+0x70a>
 8008dc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008dc6:	4640      	mov	r0, r8
 8008dc8:	4649      	mov	r1, r9
 8008dca:	f7f7 fdf7 	bl	80009bc <__aeabi_dcmpeq>
 8008dce:	b108      	cbz	r0, 8008dd4 <_dtoa_r+0x6c4>
 8008dd0:	07e1      	lsls	r1, r4, #31
 8008dd2:	d422      	bmi.n	8008e1a <_dtoa_r+0x70a>
 8008dd4:	4628      	mov	r0, r5
 8008dd6:	4659      	mov	r1, fp
 8008dd8:	f000 fe7a 	bl	8009ad0 <_Bfree>
 8008ddc:	2300      	movs	r3, #0
 8008dde:	703b      	strb	r3, [r7, #0]
 8008de0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008de2:	f10a 0001 	add.w	r0, sl, #1
 8008de6:	6018      	str	r0, [r3, #0]
 8008de8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	f43f acde 	beq.w	80087ac <_dtoa_r+0x9c>
 8008df0:	601f      	str	r7, [r3, #0]
 8008df2:	e4db      	b.n	80087ac <_dtoa_r+0x9c>
 8008df4:	4627      	mov	r7, r4
 8008df6:	463b      	mov	r3, r7
 8008df8:	461f      	mov	r7, r3
 8008dfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008dfe:	2a39      	cmp	r2, #57	; 0x39
 8008e00:	d107      	bne.n	8008e12 <_dtoa_r+0x702>
 8008e02:	9a03      	ldr	r2, [sp, #12]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d1f7      	bne.n	8008df8 <_dtoa_r+0x6e8>
 8008e08:	2230      	movs	r2, #48	; 0x30
 8008e0a:	9903      	ldr	r1, [sp, #12]
 8008e0c:	f108 0801 	add.w	r8, r8, #1
 8008e10:	700a      	strb	r2, [r1, #0]
 8008e12:	781a      	ldrb	r2, [r3, #0]
 8008e14:	3201      	adds	r2, #1
 8008e16:	701a      	strb	r2, [r3, #0]
 8008e18:	e79e      	b.n	8008d58 <_dtoa_r+0x648>
 8008e1a:	46d0      	mov	r8, sl
 8008e1c:	e7eb      	b.n	8008df6 <_dtoa_r+0x6e6>
 8008e1e:	2200      	movs	r2, #0
 8008e20:	4b6e      	ldr	r3, [pc, #440]	; (8008fdc <_dtoa_r+0x8cc>)
 8008e22:	f7f7 fb63 	bl	80004ec <__aeabi_dmul>
 8008e26:	2200      	movs	r2, #0
 8008e28:	2300      	movs	r3, #0
 8008e2a:	4680      	mov	r8, r0
 8008e2c:	4689      	mov	r9, r1
 8008e2e:	f7f7 fdc5 	bl	80009bc <__aeabi_dcmpeq>
 8008e32:	2800      	cmp	r0, #0
 8008e34:	d09b      	beq.n	8008d6e <_dtoa_r+0x65e>
 8008e36:	e7cd      	b.n	8008dd4 <_dtoa_r+0x6c4>
 8008e38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e3a:	2a00      	cmp	r2, #0
 8008e3c:	f000 80d0 	beq.w	8008fe0 <_dtoa_r+0x8d0>
 8008e40:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008e42:	2a01      	cmp	r2, #1
 8008e44:	f300 80ae 	bgt.w	8008fa4 <_dtoa_r+0x894>
 8008e48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008e4a:	2a00      	cmp	r2, #0
 8008e4c:	f000 80a6 	beq.w	8008f9c <_dtoa_r+0x88c>
 8008e50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008e54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008e56:	9f06      	ldr	r7, [sp, #24]
 8008e58:	9a06      	ldr	r2, [sp, #24]
 8008e5a:	2101      	movs	r1, #1
 8008e5c:	441a      	add	r2, r3
 8008e5e:	9206      	str	r2, [sp, #24]
 8008e60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e62:	4628      	mov	r0, r5
 8008e64:	441a      	add	r2, r3
 8008e66:	9209      	str	r2, [sp, #36]	; 0x24
 8008e68:	f000 ff32 	bl	8009cd0 <__i2b>
 8008e6c:	4606      	mov	r6, r0
 8008e6e:	2f00      	cmp	r7, #0
 8008e70:	dd0c      	ble.n	8008e8c <_dtoa_r+0x77c>
 8008e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	dd09      	ble.n	8008e8c <_dtoa_r+0x77c>
 8008e78:	42bb      	cmp	r3, r7
 8008e7a:	bfa8      	it	ge
 8008e7c:	463b      	movge	r3, r7
 8008e7e:	9a06      	ldr	r2, [sp, #24]
 8008e80:	1aff      	subs	r7, r7, r3
 8008e82:	1ad2      	subs	r2, r2, r3
 8008e84:	9206      	str	r2, [sp, #24]
 8008e86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8008e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e8e:	b1f3      	cbz	r3, 8008ece <_dtoa_r+0x7be>
 8008e90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	f000 80a8 	beq.w	8008fe8 <_dtoa_r+0x8d8>
 8008e98:	2c00      	cmp	r4, #0
 8008e9a:	dd10      	ble.n	8008ebe <_dtoa_r+0x7ae>
 8008e9c:	4631      	mov	r1, r6
 8008e9e:	4622      	mov	r2, r4
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	f000 ffd3 	bl	8009e4c <__pow5mult>
 8008ea6:	465a      	mov	r2, fp
 8008ea8:	4601      	mov	r1, r0
 8008eaa:	4606      	mov	r6, r0
 8008eac:	4628      	mov	r0, r5
 8008eae:	f000 ff25 	bl	8009cfc <__multiply>
 8008eb2:	4680      	mov	r8, r0
 8008eb4:	4659      	mov	r1, fp
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	f000 fe0a 	bl	8009ad0 <_Bfree>
 8008ebc:	46c3      	mov	fp, r8
 8008ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ec0:	1b1a      	subs	r2, r3, r4
 8008ec2:	d004      	beq.n	8008ece <_dtoa_r+0x7be>
 8008ec4:	4659      	mov	r1, fp
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	f000 ffc0 	bl	8009e4c <__pow5mult>
 8008ecc:	4683      	mov	fp, r0
 8008ece:	2101      	movs	r1, #1
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	f000 fefd 	bl	8009cd0 <__i2b>
 8008ed6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ed8:	4604      	mov	r4, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	f340 8086 	ble.w	8008fec <_dtoa_r+0x8dc>
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	4601      	mov	r1, r0
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	f000 ffb1 	bl	8009e4c <__pow5mult>
 8008eea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008eec:	4604      	mov	r4, r0
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	dd7f      	ble.n	8008ff2 <_dtoa_r+0x8e2>
 8008ef2:	f04f 0800 	mov.w	r8, #0
 8008ef6:	6923      	ldr	r3, [r4, #16]
 8008ef8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008efc:	6918      	ldr	r0, [r3, #16]
 8008efe:	f000 fe99 	bl	8009c34 <__hi0bits>
 8008f02:	f1c0 0020 	rsb	r0, r0, #32
 8008f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f08:	4418      	add	r0, r3
 8008f0a:	f010 001f 	ands.w	r0, r0, #31
 8008f0e:	f000 8092 	beq.w	8009036 <_dtoa_r+0x926>
 8008f12:	f1c0 0320 	rsb	r3, r0, #32
 8008f16:	2b04      	cmp	r3, #4
 8008f18:	f340 808a 	ble.w	8009030 <_dtoa_r+0x920>
 8008f1c:	f1c0 001c 	rsb	r0, r0, #28
 8008f20:	9b06      	ldr	r3, [sp, #24]
 8008f22:	4407      	add	r7, r0
 8008f24:	4403      	add	r3, r0
 8008f26:	9306      	str	r3, [sp, #24]
 8008f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f2a:	4403      	add	r3, r0
 8008f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f2e:	9b06      	ldr	r3, [sp, #24]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	dd05      	ble.n	8008f40 <_dtoa_r+0x830>
 8008f34:	4659      	mov	r1, fp
 8008f36:	461a      	mov	r2, r3
 8008f38:	4628      	mov	r0, r5
 8008f3a:	f000 ffe1 	bl	8009f00 <__lshift>
 8008f3e:	4683      	mov	fp, r0
 8008f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	dd05      	ble.n	8008f52 <_dtoa_r+0x842>
 8008f46:	4621      	mov	r1, r4
 8008f48:	461a      	mov	r2, r3
 8008f4a:	4628      	mov	r0, r5
 8008f4c:	f000 ffd8 	bl	8009f00 <__lshift>
 8008f50:	4604      	mov	r4, r0
 8008f52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d070      	beq.n	800903a <_dtoa_r+0x92a>
 8008f58:	4621      	mov	r1, r4
 8008f5a:	4658      	mov	r0, fp
 8008f5c:	f001 f840 	bl	8009fe0 <__mcmp>
 8008f60:	2800      	cmp	r0, #0
 8008f62:	da6a      	bge.n	800903a <_dtoa_r+0x92a>
 8008f64:	2300      	movs	r3, #0
 8008f66:	4659      	mov	r1, fp
 8008f68:	220a      	movs	r2, #10
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	f000 fdd2 	bl	8009b14 <__multadd>
 8008f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f72:	4683      	mov	fp, r0
 8008f74:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f000 8194 	beq.w	80092a6 <_dtoa_r+0xb96>
 8008f7e:	4631      	mov	r1, r6
 8008f80:	2300      	movs	r3, #0
 8008f82:	220a      	movs	r2, #10
 8008f84:	4628      	mov	r0, r5
 8008f86:	f000 fdc5 	bl	8009b14 <__multadd>
 8008f8a:	f1b9 0f00 	cmp.w	r9, #0
 8008f8e:	4606      	mov	r6, r0
 8008f90:	f300 8093 	bgt.w	80090ba <_dtoa_r+0x9aa>
 8008f94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	dc57      	bgt.n	800904a <_dtoa_r+0x93a>
 8008f9a:	e08e      	b.n	80090ba <_dtoa_r+0x9aa>
 8008f9c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008f9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008fa2:	e757      	b.n	8008e54 <_dtoa_r+0x744>
 8008fa4:	9b08      	ldr	r3, [sp, #32]
 8008fa6:	1e5c      	subs	r4, r3, #1
 8008fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008faa:	42a3      	cmp	r3, r4
 8008fac:	bfb7      	itett	lt
 8008fae:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008fb0:	1b1c      	subge	r4, r3, r4
 8008fb2:	1ae2      	sublt	r2, r4, r3
 8008fb4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008fb6:	bfbe      	ittt	lt
 8008fb8:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008fba:	189b      	addlt	r3, r3, r2
 8008fbc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008fbe:	9b08      	ldr	r3, [sp, #32]
 8008fc0:	bfb8      	it	lt
 8008fc2:	2400      	movlt	r4, #0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	bfbb      	ittet	lt
 8008fc8:	9b06      	ldrlt	r3, [sp, #24]
 8008fca:	9a08      	ldrlt	r2, [sp, #32]
 8008fcc:	9f06      	ldrge	r7, [sp, #24]
 8008fce:	1a9f      	sublt	r7, r3, r2
 8008fd0:	bfac      	ite	ge
 8008fd2:	9b08      	ldrge	r3, [sp, #32]
 8008fd4:	2300      	movlt	r3, #0
 8008fd6:	e73f      	b.n	8008e58 <_dtoa_r+0x748>
 8008fd8:	3fe00000 	.word	0x3fe00000
 8008fdc:	40240000 	.word	0x40240000
 8008fe0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008fe2:	9f06      	ldr	r7, [sp, #24]
 8008fe4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008fe6:	e742      	b.n	8008e6e <_dtoa_r+0x75e>
 8008fe8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fea:	e76b      	b.n	8008ec4 <_dtoa_r+0x7b4>
 8008fec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	dc19      	bgt.n	8009026 <_dtoa_r+0x916>
 8008ff2:	9b04      	ldr	r3, [sp, #16]
 8008ff4:	b9bb      	cbnz	r3, 8009026 <_dtoa_r+0x916>
 8008ff6:	9b05      	ldr	r3, [sp, #20]
 8008ff8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ffc:	b99b      	cbnz	r3, 8009026 <_dtoa_r+0x916>
 8008ffe:	9b05      	ldr	r3, [sp, #20]
 8009000:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009004:	0d1b      	lsrs	r3, r3, #20
 8009006:	051b      	lsls	r3, r3, #20
 8009008:	b183      	cbz	r3, 800902c <_dtoa_r+0x91c>
 800900a:	f04f 0801 	mov.w	r8, #1
 800900e:	9b06      	ldr	r3, [sp, #24]
 8009010:	3301      	adds	r3, #1
 8009012:	9306      	str	r3, [sp, #24]
 8009014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009016:	3301      	adds	r3, #1
 8009018:	9309      	str	r3, [sp, #36]	; 0x24
 800901a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800901c:	2b00      	cmp	r3, #0
 800901e:	f47f af6a 	bne.w	8008ef6 <_dtoa_r+0x7e6>
 8009022:	2001      	movs	r0, #1
 8009024:	e76f      	b.n	8008f06 <_dtoa_r+0x7f6>
 8009026:	f04f 0800 	mov.w	r8, #0
 800902a:	e7f6      	b.n	800901a <_dtoa_r+0x90a>
 800902c:	4698      	mov	r8, r3
 800902e:	e7f4      	b.n	800901a <_dtoa_r+0x90a>
 8009030:	f43f af7d 	beq.w	8008f2e <_dtoa_r+0x81e>
 8009034:	4618      	mov	r0, r3
 8009036:	301c      	adds	r0, #28
 8009038:	e772      	b.n	8008f20 <_dtoa_r+0x810>
 800903a:	9b08      	ldr	r3, [sp, #32]
 800903c:	2b00      	cmp	r3, #0
 800903e:	dc36      	bgt.n	80090ae <_dtoa_r+0x99e>
 8009040:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009042:	2b02      	cmp	r3, #2
 8009044:	dd33      	ble.n	80090ae <_dtoa_r+0x99e>
 8009046:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800904a:	f1b9 0f00 	cmp.w	r9, #0
 800904e:	d10d      	bne.n	800906c <_dtoa_r+0x95c>
 8009050:	4621      	mov	r1, r4
 8009052:	464b      	mov	r3, r9
 8009054:	2205      	movs	r2, #5
 8009056:	4628      	mov	r0, r5
 8009058:	f000 fd5c 	bl	8009b14 <__multadd>
 800905c:	4601      	mov	r1, r0
 800905e:	4604      	mov	r4, r0
 8009060:	4658      	mov	r0, fp
 8009062:	f000 ffbd 	bl	8009fe0 <__mcmp>
 8009066:	2800      	cmp	r0, #0
 8009068:	f73f adb8 	bgt.w	8008bdc <_dtoa_r+0x4cc>
 800906c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800906e:	9f03      	ldr	r7, [sp, #12]
 8009070:	ea6f 0a03 	mvn.w	sl, r3
 8009074:	f04f 0800 	mov.w	r8, #0
 8009078:	4621      	mov	r1, r4
 800907a:	4628      	mov	r0, r5
 800907c:	f000 fd28 	bl	8009ad0 <_Bfree>
 8009080:	2e00      	cmp	r6, #0
 8009082:	f43f aea7 	beq.w	8008dd4 <_dtoa_r+0x6c4>
 8009086:	f1b8 0f00 	cmp.w	r8, #0
 800908a:	d005      	beq.n	8009098 <_dtoa_r+0x988>
 800908c:	45b0      	cmp	r8, r6
 800908e:	d003      	beq.n	8009098 <_dtoa_r+0x988>
 8009090:	4641      	mov	r1, r8
 8009092:	4628      	mov	r0, r5
 8009094:	f000 fd1c 	bl	8009ad0 <_Bfree>
 8009098:	4631      	mov	r1, r6
 800909a:	4628      	mov	r0, r5
 800909c:	f000 fd18 	bl	8009ad0 <_Bfree>
 80090a0:	e698      	b.n	8008dd4 <_dtoa_r+0x6c4>
 80090a2:	2400      	movs	r4, #0
 80090a4:	4626      	mov	r6, r4
 80090a6:	e7e1      	b.n	800906c <_dtoa_r+0x95c>
 80090a8:	46c2      	mov	sl, r8
 80090aa:	4626      	mov	r6, r4
 80090ac:	e596      	b.n	8008bdc <_dtoa_r+0x4cc>
 80090ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f000 80fd 	beq.w	80092b4 <_dtoa_r+0xba4>
 80090ba:	2f00      	cmp	r7, #0
 80090bc:	dd05      	ble.n	80090ca <_dtoa_r+0x9ba>
 80090be:	4631      	mov	r1, r6
 80090c0:	463a      	mov	r2, r7
 80090c2:	4628      	mov	r0, r5
 80090c4:	f000 ff1c 	bl	8009f00 <__lshift>
 80090c8:	4606      	mov	r6, r0
 80090ca:	f1b8 0f00 	cmp.w	r8, #0
 80090ce:	d05c      	beq.n	800918a <_dtoa_r+0xa7a>
 80090d0:	4628      	mov	r0, r5
 80090d2:	6871      	ldr	r1, [r6, #4]
 80090d4:	f000 fcbc 	bl	8009a50 <_Balloc>
 80090d8:	4607      	mov	r7, r0
 80090da:	b928      	cbnz	r0, 80090e8 <_dtoa_r+0x9d8>
 80090dc:	4602      	mov	r2, r0
 80090de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80090e2:	4b7f      	ldr	r3, [pc, #508]	; (80092e0 <_dtoa_r+0xbd0>)
 80090e4:	f7ff bb28 	b.w	8008738 <_dtoa_r+0x28>
 80090e8:	6932      	ldr	r2, [r6, #16]
 80090ea:	f106 010c 	add.w	r1, r6, #12
 80090ee:	3202      	adds	r2, #2
 80090f0:	0092      	lsls	r2, r2, #2
 80090f2:	300c      	adds	r0, #12
 80090f4:	f000 fc9e 	bl	8009a34 <memcpy>
 80090f8:	2201      	movs	r2, #1
 80090fa:	4639      	mov	r1, r7
 80090fc:	4628      	mov	r0, r5
 80090fe:	f000 feff 	bl	8009f00 <__lshift>
 8009102:	46b0      	mov	r8, r6
 8009104:	4606      	mov	r6, r0
 8009106:	9b03      	ldr	r3, [sp, #12]
 8009108:	3301      	adds	r3, #1
 800910a:	9308      	str	r3, [sp, #32]
 800910c:	9b03      	ldr	r3, [sp, #12]
 800910e:	444b      	add	r3, r9
 8009110:	930a      	str	r3, [sp, #40]	; 0x28
 8009112:	9b04      	ldr	r3, [sp, #16]
 8009114:	f003 0301 	and.w	r3, r3, #1
 8009118:	9309      	str	r3, [sp, #36]	; 0x24
 800911a:	9b08      	ldr	r3, [sp, #32]
 800911c:	4621      	mov	r1, r4
 800911e:	3b01      	subs	r3, #1
 8009120:	4658      	mov	r0, fp
 8009122:	9304      	str	r3, [sp, #16]
 8009124:	f7ff fa66 	bl	80085f4 <quorem>
 8009128:	4603      	mov	r3, r0
 800912a:	4641      	mov	r1, r8
 800912c:	3330      	adds	r3, #48	; 0x30
 800912e:	9006      	str	r0, [sp, #24]
 8009130:	4658      	mov	r0, fp
 8009132:	930b      	str	r3, [sp, #44]	; 0x2c
 8009134:	f000 ff54 	bl	8009fe0 <__mcmp>
 8009138:	4632      	mov	r2, r6
 800913a:	4681      	mov	r9, r0
 800913c:	4621      	mov	r1, r4
 800913e:	4628      	mov	r0, r5
 8009140:	f000 ff6a 	bl	800a018 <__mdiff>
 8009144:	68c2      	ldr	r2, [r0, #12]
 8009146:	4607      	mov	r7, r0
 8009148:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800914a:	bb02      	cbnz	r2, 800918e <_dtoa_r+0xa7e>
 800914c:	4601      	mov	r1, r0
 800914e:	4658      	mov	r0, fp
 8009150:	f000 ff46 	bl	8009fe0 <__mcmp>
 8009154:	4602      	mov	r2, r0
 8009156:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009158:	4639      	mov	r1, r7
 800915a:	4628      	mov	r0, r5
 800915c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8009160:	f000 fcb6 	bl	8009ad0 <_Bfree>
 8009164:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009166:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009168:	9f08      	ldr	r7, [sp, #32]
 800916a:	ea43 0102 	orr.w	r1, r3, r2
 800916e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009170:	430b      	orrs	r3, r1
 8009172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009174:	d10d      	bne.n	8009192 <_dtoa_r+0xa82>
 8009176:	2b39      	cmp	r3, #57	; 0x39
 8009178:	d029      	beq.n	80091ce <_dtoa_r+0xabe>
 800917a:	f1b9 0f00 	cmp.w	r9, #0
 800917e:	dd01      	ble.n	8009184 <_dtoa_r+0xa74>
 8009180:	9b06      	ldr	r3, [sp, #24]
 8009182:	3331      	adds	r3, #49	; 0x31
 8009184:	9a04      	ldr	r2, [sp, #16]
 8009186:	7013      	strb	r3, [r2, #0]
 8009188:	e776      	b.n	8009078 <_dtoa_r+0x968>
 800918a:	4630      	mov	r0, r6
 800918c:	e7b9      	b.n	8009102 <_dtoa_r+0x9f2>
 800918e:	2201      	movs	r2, #1
 8009190:	e7e2      	b.n	8009158 <_dtoa_r+0xa48>
 8009192:	f1b9 0f00 	cmp.w	r9, #0
 8009196:	db06      	blt.n	80091a6 <_dtoa_r+0xa96>
 8009198:	9922      	ldr	r1, [sp, #136]	; 0x88
 800919a:	ea41 0909 	orr.w	r9, r1, r9
 800919e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091a0:	ea59 0101 	orrs.w	r1, r9, r1
 80091a4:	d120      	bne.n	80091e8 <_dtoa_r+0xad8>
 80091a6:	2a00      	cmp	r2, #0
 80091a8:	ddec      	ble.n	8009184 <_dtoa_r+0xa74>
 80091aa:	4659      	mov	r1, fp
 80091ac:	2201      	movs	r2, #1
 80091ae:	4628      	mov	r0, r5
 80091b0:	9308      	str	r3, [sp, #32]
 80091b2:	f000 fea5 	bl	8009f00 <__lshift>
 80091b6:	4621      	mov	r1, r4
 80091b8:	4683      	mov	fp, r0
 80091ba:	f000 ff11 	bl	8009fe0 <__mcmp>
 80091be:	2800      	cmp	r0, #0
 80091c0:	9b08      	ldr	r3, [sp, #32]
 80091c2:	dc02      	bgt.n	80091ca <_dtoa_r+0xaba>
 80091c4:	d1de      	bne.n	8009184 <_dtoa_r+0xa74>
 80091c6:	07da      	lsls	r2, r3, #31
 80091c8:	d5dc      	bpl.n	8009184 <_dtoa_r+0xa74>
 80091ca:	2b39      	cmp	r3, #57	; 0x39
 80091cc:	d1d8      	bne.n	8009180 <_dtoa_r+0xa70>
 80091ce:	2339      	movs	r3, #57	; 0x39
 80091d0:	9a04      	ldr	r2, [sp, #16]
 80091d2:	7013      	strb	r3, [r2, #0]
 80091d4:	463b      	mov	r3, r7
 80091d6:	461f      	mov	r7, r3
 80091d8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80091dc:	3b01      	subs	r3, #1
 80091de:	2a39      	cmp	r2, #57	; 0x39
 80091e0:	d050      	beq.n	8009284 <_dtoa_r+0xb74>
 80091e2:	3201      	adds	r2, #1
 80091e4:	701a      	strb	r2, [r3, #0]
 80091e6:	e747      	b.n	8009078 <_dtoa_r+0x968>
 80091e8:	2a00      	cmp	r2, #0
 80091ea:	dd03      	ble.n	80091f4 <_dtoa_r+0xae4>
 80091ec:	2b39      	cmp	r3, #57	; 0x39
 80091ee:	d0ee      	beq.n	80091ce <_dtoa_r+0xabe>
 80091f0:	3301      	adds	r3, #1
 80091f2:	e7c7      	b.n	8009184 <_dtoa_r+0xa74>
 80091f4:	9a08      	ldr	r2, [sp, #32]
 80091f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80091f8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80091fc:	428a      	cmp	r2, r1
 80091fe:	d02a      	beq.n	8009256 <_dtoa_r+0xb46>
 8009200:	4659      	mov	r1, fp
 8009202:	2300      	movs	r3, #0
 8009204:	220a      	movs	r2, #10
 8009206:	4628      	mov	r0, r5
 8009208:	f000 fc84 	bl	8009b14 <__multadd>
 800920c:	45b0      	cmp	r8, r6
 800920e:	4683      	mov	fp, r0
 8009210:	f04f 0300 	mov.w	r3, #0
 8009214:	f04f 020a 	mov.w	r2, #10
 8009218:	4641      	mov	r1, r8
 800921a:	4628      	mov	r0, r5
 800921c:	d107      	bne.n	800922e <_dtoa_r+0xb1e>
 800921e:	f000 fc79 	bl	8009b14 <__multadd>
 8009222:	4680      	mov	r8, r0
 8009224:	4606      	mov	r6, r0
 8009226:	9b08      	ldr	r3, [sp, #32]
 8009228:	3301      	adds	r3, #1
 800922a:	9308      	str	r3, [sp, #32]
 800922c:	e775      	b.n	800911a <_dtoa_r+0xa0a>
 800922e:	f000 fc71 	bl	8009b14 <__multadd>
 8009232:	4631      	mov	r1, r6
 8009234:	4680      	mov	r8, r0
 8009236:	2300      	movs	r3, #0
 8009238:	220a      	movs	r2, #10
 800923a:	4628      	mov	r0, r5
 800923c:	f000 fc6a 	bl	8009b14 <__multadd>
 8009240:	4606      	mov	r6, r0
 8009242:	e7f0      	b.n	8009226 <_dtoa_r+0xb16>
 8009244:	f1b9 0f00 	cmp.w	r9, #0
 8009248:	bfcc      	ite	gt
 800924a:	464f      	movgt	r7, r9
 800924c:	2701      	movle	r7, #1
 800924e:	f04f 0800 	mov.w	r8, #0
 8009252:	9a03      	ldr	r2, [sp, #12]
 8009254:	4417      	add	r7, r2
 8009256:	4659      	mov	r1, fp
 8009258:	2201      	movs	r2, #1
 800925a:	4628      	mov	r0, r5
 800925c:	9308      	str	r3, [sp, #32]
 800925e:	f000 fe4f 	bl	8009f00 <__lshift>
 8009262:	4621      	mov	r1, r4
 8009264:	4683      	mov	fp, r0
 8009266:	f000 febb 	bl	8009fe0 <__mcmp>
 800926a:	2800      	cmp	r0, #0
 800926c:	dcb2      	bgt.n	80091d4 <_dtoa_r+0xac4>
 800926e:	d102      	bne.n	8009276 <_dtoa_r+0xb66>
 8009270:	9b08      	ldr	r3, [sp, #32]
 8009272:	07db      	lsls	r3, r3, #31
 8009274:	d4ae      	bmi.n	80091d4 <_dtoa_r+0xac4>
 8009276:	463b      	mov	r3, r7
 8009278:	461f      	mov	r7, r3
 800927a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800927e:	2a30      	cmp	r2, #48	; 0x30
 8009280:	d0fa      	beq.n	8009278 <_dtoa_r+0xb68>
 8009282:	e6f9      	b.n	8009078 <_dtoa_r+0x968>
 8009284:	9a03      	ldr	r2, [sp, #12]
 8009286:	429a      	cmp	r2, r3
 8009288:	d1a5      	bne.n	80091d6 <_dtoa_r+0xac6>
 800928a:	2331      	movs	r3, #49	; 0x31
 800928c:	f10a 0a01 	add.w	sl, sl, #1
 8009290:	e779      	b.n	8009186 <_dtoa_r+0xa76>
 8009292:	4b14      	ldr	r3, [pc, #80]	; (80092e4 <_dtoa_r+0xbd4>)
 8009294:	f7ff baa8 	b.w	80087e8 <_dtoa_r+0xd8>
 8009298:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800929a:	2b00      	cmp	r3, #0
 800929c:	f47f aa81 	bne.w	80087a2 <_dtoa_r+0x92>
 80092a0:	4b11      	ldr	r3, [pc, #68]	; (80092e8 <_dtoa_r+0xbd8>)
 80092a2:	f7ff baa1 	b.w	80087e8 <_dtoa_r+0xd8>
 80092a6:	f1b9 0f00 	cmp.w	r9, #0
 80092aa:	dc03      	bgt.n	80092b4 <_dtoa_r+0xba4>
 80092ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092ae:	2b02      	cmp	r3, #2
 80092b0:	f73f aecb 	bgt.w	800904a <_dtoa_r+0x93a>
 80092b4:	9f03      	ldr	r7, [sp, #12]
 80092b6:	4621      	mov	r1, r4
 80092b8:	4658      	mov	r0, fp
 80092ba:	f7ff f99b 	bl	80085f4 <quorem>
 80092be:	9a03      	ldr	r2, [sp, #12]
 80092c0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80092c4:	f807 3b01 	strb.w	r3, [r7], #1
 80092c8:	1aba      	subs	r2, r7, r2
 80092ca:	4591      	cmp	r9, r2
 80092cc:	ddba      	ble.n	8009244 <_dtoa_r+0xb34>
 80092ce:	4659      	mov	r1, fp
 80092d0:	2300      	movs	r3, #0
 80092d2:	220a      	movs	r2, #10
 80092d4:	4628      	mov	r0, r5
 80092d6:	f000 fc1d 	bl	8009b14 <__multadd>
 80092da:	4683      	mov	fp, r0
 80092dc:	e7eb      	b.n	80092b6 <_dtoa_r+0xba6>
 80092de:	bf00      	nop
 80092e0:	0800b6c0 	.word	0x0800b6c0
 80092e4:	0800b530 	.word	0x0800b530
 80092e8:	0800b658 	.word	0x0800b658

080092ec <fiprintf>:
 80092ec:	b40e      	push	{r1, r2, r3}
 80092ee:	b503      	push	{r0, r1, lr}
 80092f0:	4601      	mov	r1, r0
 80092f2:	ab03      	add	r3, sp, #12
 80092f4:	4805      	ldr	r0, [pc, #20]	; (800930c <fiprintf+0x20>)
 80092f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80092fa:	6800      	ldr	r0, [r0, #0]
 80092fc:	9301      	str	r3, [sp, #4]
 80092fe:	f001 fad3 	bl	800a8a8 <_vfiprintf_r>
 8009302:	b002      	add	sp, #8
 8009304:	f85d eb04 	ldr.w	lr, [sp], #4
 8009308:	b003      	add	sp, #12
 800930a:	4770      	bx	lr
 800930c:	20000010 	.word	0x20000010

08009310 <rshift>:
 8009310:	6903      	ldr	r3, [r0, #16]
 8009312:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009316:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800931a:	f100 0414 	add.w	r4, r0, #20
 800931e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009322:	dd46      	ble.n	80093b2 <rshift+0xa2>
 8009324:	f011 011f 	ands.w	r1, r1, #31
 8009328:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800932c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009330:	d10c      	bne.n	800934c <rshift+0x3c>
 8009332:	4629      	mov	r1, r5
 8009334:	f100 0710 	add.w	r7, r0, #16
 8009338:	42b1      	cmp	r1, r6
 800933a:	d335      	bcc.n	80093a8 <rshift+0x98>
 800933c:	1a9b      	subs	r3, r3, r2
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	1eea      	subs	r2, r5, #3
 8009342:	4296      	cmp	r6, r2
 8009344:	bf38      	it	cc
 8009346:	2300      	movcc	r3, #0
 8009348:	4423      	add	r3, r4
 800934a:	e015      	b.n	8009378 <rshift+0x68>
 800934c:	46a1      	mov	r9, r4
 800934e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009352:	f1c1 0820 	rsb	r8, r1, #32
 8009356:	40cf      	lsrs	r7, r1
 8009358:	f105 0e04 	add.w	lr, r5, #4
 800935c:	4576      	cmp	r6, lr
 800935e:	46f4      	mov	ip, lr
 8009360:	d816      	bhi.n	8009390 <rshift+0x80>
 8009362:	1a9a      	subs	r2, r3, r2
 8009364:	0092      	lsls	r2, r2, #2
 8009366:	3a04      	subs	r2, #4
 8009368:	3501      	adds	r5, #1
 800936a:	42ae      	cmp	r6, r5
 800936c:	bf38      	it	cc
 800936e:	2200      	movcc	r2, #0
 8009370:	18a3      	adds	r3, r4, r2
 8009372:	50a7      	str	r7, [r4, r2]
 8009374:	b107      	cbz	r7, 8009378 <rshift+0x68>
 8009376:	3304      	adds	r3, #4
 8009378:	42a3      	cmp	r3, r4
 800937a:	eba3 0204 	sub.w	r2, r3, r4
 800937e:	bf08      	it	eq
 8009380:	2300      	moveq	r3, #0
 8009382:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009386:	6102      	str	r2, [r0, #16]
 8009388:	bf08      	it	eq
 800938a:	6143      	streq	r3, [r0, #20]
 800938c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009390:	f8dc c000 	ldr.w	ip, [ip]
 8009394:	fa0c fc08 	lsl.w	ip, ip, r8
 8009398:	ea4c 0707 	orr.w	r7, ip, r7
 800939c:	f849 7b04 	str.w	r7, [r9], #4
 80093a0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80093a4:	40cf      	lsrs	r7, r1
 80093a6:	e7d9      	b.n	800935c <rshift+0x4c>
 80093a8:	f851 cb04 	ldr.w	ip, [r1], #4
 80093ac:	f847 cf04 	str.w	ip, [r7, #4]!
 80093b0:	e7c2      	b.n	8009338 <rshift+0x28>
 80093b2:	4623      	mov	r3, r4
 80093b4:	e7e0      	b.n	8009378 <rshift+0x68>

080093b6 <__hexdig_fun>:
 80093b6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80093ba:	2b09      	cmp	r3, #9
 80093bc:	d802      	bhi.n	80093c4 <__hexdig_fun+0xe>
 80093be:	3820      	subs	r0, #32
 80093c0:	b2c0      	uxtb	r0, r0
 80093c2:	4770      	bx	lr
 80093c4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80093c8:	2b05      	cmp	r3, #5
 80093ca:	d801      	bhi.n	80093d0 <__hexdig_fun+0x1a>
 80093cc:	3847      	subs	r0, #71	; 0x47
 80093ce:	e7f7      	b.n	80093c0 <__hexdig_fun+0xa>
 80093d0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80093d4:	2b05      	cmp	r3, #5
 80093d6:	d801      	bhi.n	80093dc <__hexdig_fun+0x26>
 80093d8:	3827      	subs	r0, #39	; 0x27
 80093da:	e7f1      	b.n	80093c0 <__hexdig_fun+0xa>
 80093dc:	2000      	movs	r0, #0
 80093de:	4770      	bx	lr

080093e0 <__gethex>:
 80093e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e4:	b08b      	sub	sp, #44	; 0x2c
 80093e6:	9305      	str	r3, [sp, #20]
 80093e8:	4bb2      	ldr	r3, [pc, #712]	; (80096b4 <__gethex+0x2d4>)
 80093ea:	9002      	str	r0, [sp, #8]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	468b      	mov	fp, r1
 80093f0:	4618      	mov	r0, r3
 80093f2:	4690      	mov	r8, r2
 80093f4:	9303      	str	r3, [sp, #12]
 80093f6:	f7f6 feb5 	bl	8000164 <strlen>
 80093fa:	4682      	mov	sl, r0
 80093fc:	9b03      	ldr	r3, [sp, #12]
 80093fe:	f8db 2000 	ldr.w	r2, [fp]
 8009402:	4403      	add	r3, r0
 8009404:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009408:	9306      	str	r3, [sp, #24]
 800940a:	1c93      	adds	r3, r2, #2
 800940c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009410:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009414:	32fe      	adds	r2, #254	; 0xfe
 8009416:	18d1      	adds	r1, r2, r3
 8009418:	461f      	mov	r7, r3
 800941a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800941e:	9101      	str	r1, [sp, #4]
 8009420:	2830      	cmp	r0, #48	; 0x30
 8009422:	d0f8      	beq.n	8009416 <__gethex+0x36>
 8009424:	f7ff ffc7 	bl	80093b6 <__hexdig_fun>
 8009428:	4604      	mov	r4, r0
 800942a:	2800      	cmp	r0, #0
 800942c:	d13a      	bne.n	80094a4 <__gethex+0xc4>
 800942e:	4652      	mov	r2, sl
 8009430:	4638      	mov	r0, r7
 8009432:	9903      	ldr	r1, [sp, #12]
 8009434:	f001 fb7e 	bl	800ab34 <strncmp>
 8009438:	4605      	mov	r5, r0
 800943a:	2800      	cmp	r0, #0
 800943c:	d166      	bne.n	800950c <__gethex+0x12c>
 800943e:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009442:	eb07 060a 	add.w	r6, r7, sl
 8009446:	f7ff ffb6 	bl	80093b6 <__hexdig_fun>
 800944a:	2800      	cmp	r0, #0
 800944c:	d060      	beq.n	8009510 <__gethex+0x130>
 800944e:	4633      	mov	r3, r6
 8009450:	7818      	ldrb	r0, [r3, #0]
 8009452:	461f      	mov	r7, r3
 8009454:	2830      	cmp	r0, #48	; 0x30
 8009456:	f103 0301 	add.w	r3, r3, #1
 800945a:	d0f9      	beq.n	8009450 <__gethex+0x70>
 800945c:	f7ff ffab 	bl	80093b6 <__hexdig_fun>
 8009460:	2301      	movs	r3, #1
 8009462:	fab0 f480 	clz	r4, r0
 8009466:	4635      	mov	r5, r6
 8009468:	0964      	lsrs	r4, r4, #5
 800946a:	9301      	str	r3, [sp, #4]
 800946c:	463a      	mov	r2, r7
 800946e:	4616      	mov	r6, r2
 8009470:	7830      	ldrb	r0, [r6, #0]
 8009472:	3201      	adds	r2, #1
 8009474:	f7ff ff9f 	bl	80093b6 <__hexdig_fun>
 8009478:	2800      	cmp	r0, #0
 800947a:	d1f8      	bne.n	800946e <__gethex+0x8e>
 800947c:	4652      	mov	r2, sl
 800947e:	4630      	mov	r0, r6
 8009480:	9903      	ldr	r1, [sp, #12]
 8009482:	f001 fb57 	bl	800ab34 <strncmp>
 8009486:	b980      	cbnz	r0, 80094aa <__gethex+0xca>
 8009488:	b94d      	cbnz	r5, 800949e <__gethex+0xbe>
 800948a:	eb06 050a 	add.w	r5, r6, sl
 800948e:	462a      	mov	r2, r5
 8009490:	4616      	mov	r6, r2
 8009492:	7830      	ldrb	r0, [r6, #0]
 8009494:	3201      	adds	r2, #1
 8009496:	f7ff ff8e 	bl	80093b6 <__hexdig_fun>
 800949a:	2800      	cmp	r0, #0
 800949c:	d1f8      	bne.n	8009490 <__gethex+0xb0>
 800949e:	1bad      	subs	r5, r5, r6
 80094a0:	00ad      	lsls	r5, r5, #2
 80094a2:	e004      	b.n	80094ae <__gethex+0xce>
 80094a4:	2400      	movs	r4, #0
 80094a6:	4625      	mov	r5, r4
 80094a8:	e7e0      	b.n	800946c <__gethex+0x8c>
 80094aa:	2d00      	cmp	r5, #0
 80094ac:	d1f7      	bne.n	800949e <__gethex+0xbe>
 80094ae:	7833      	ldrb	r3, [r6, #0]
 80094b0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80094b4:	2b50      	cmp	r3, #80	; 0x50
 80094b6:	d139      	bne.n	800952c <__gethex+0x14c>
 80094b8:	7873      	ldrb	r3, [r6, #1]
 80094ba:	2b2b      	cmp	r3, #43	; 0x2b
 80094bc:	d02a      	beq.n	8009514 <__gethex+0x134>
 80094be:	2b2d      	cmp	r3, #45	; 0x2d
 80094c0:	d02c      	beq.n	800951c <__gethex+0x13c>
 80094c2:	f04f 0900 	mov.w	r9, #0
 80094c6:	1c71      	adds	r1, r6, #1
 80094c8:	7808      	ldrb	r0, [r1, #0]
 80094ca:	f7ff ff74 	bl	80093b6 <__hexdig_fun>
 80094ce:	1e43      	subs	r3, r0, #1
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	2b18      	cmp	r3, #24
 80094d4:	d82a      	bhi.n	800952c <__gethex+0x14c>
 80094d6:	f1a0 0210 	sub.w	r2, r0, #16
 80094da:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80094de:	f7ff ff6a 	bl	80093b6 <__hexdig_fun>
 80094e2:	1e43      	subs	r3, r0, #1
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	2b18      	cmp	r3, #24
 80094e8:	d91b      	bls.n	8009522 <__gethex+0x142>
 80094ea:	f1b9 0f00 	cmp.w	r9, #0
 80094ee:	d000      	beq.n	80094f2 <__gethex+0x112>
 80094f0:	4252      	negs	r2, r2
 80094f2:	4415      	add	r5, r2
 80094f4:	f8cb 1000 	str.w	r1, [fp]
 80094f8:	b1d4      	cbz	r4, 8009530 <__gethex+0x150>
 80094fa:	9b01      	ldr	r3, [sp, #4]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	bf14      	ite	ne
 8009500:	2700      	movne	r7, #0
 8009502:	2706      	moveq	r7, #6
 8009504:	4638      	mov	r0, r7
 8009506:	b00b      	add	sp, #44	; 0x2c
 8009508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800950c:	463e      	mov	r6, r7
 800950e:	4625      	mov	r5, r4
 8009510:	2401      	movs	r4, #1
 8009512:	e7cc      	b.n	80094ae <__gethex+0xce>
 8009514:	f04f 0900 	mov.w	r9, #0
 8009518:	1cb1      	adds	r1, r6, #2
 800951a:	e7d5      	b.n	80094c8 <__gethex+0xe8>
 800951c:	f04f 0901 	mov.w	r9, #1
 8009520:	e7fa      	b.n	8009518 <__gethex+0x138>
 8009522:	230a      	movs	r3, #10
 8009524:	fb03 0202 	mla	r2, r3, r2, r0
 8009528:	3a10      	subs	r2, #16
 800952a:	e7d6      	b.n	80094da <__gethex+0xfa>
 800952c:	4631      	mov	r1, r6
 800952e:	e7e1      	b.n	80094f4 <__gethex+0x114>
 8009530:	4621      	mov	r1, r4
 8009532:	1bf3      	subs	r3, r6, r7
 8009534:	3b01      	subs	r3, #1
 8009536:	2b07      	cmp	r3, #7
 8009538:	dc0a      	bgt.n	8009550 <__gethex+0x170>
 800953a:	9802      	ldr	r0, [sp, #8]
 800953c:	f000 fa88 	bl	8009a50 <_Balloc>
 8009540:	4604      	mov	r4, r0
 8009542:	b940      	cbnz	r0, 8009556 <__gethex+0x176>
 8009544:	4602      	mov	r2, r0
 8009546:	21de      	movs	r1, #222	; 0xde
 8009548:	4b5b      	ldr	r3, [pc, #364]	; (80096b8 <__gethex+0x2d8>)
 800954a:	485c      	ldr	r0, [pc, #368]	; (80096bc <__gethex+0x2dc>)
 800954c:	f7ff f834 	bl	80085b8 <__assert_func>
 8009550:	3101      	adds	r1, #1
 8009552:	105b      	asrs	r3, r3, #1
 8009554:	e7ef      	b.n	8009536 <__gethex+0x156>
 8009556:	f04f 0b00 	mov.w	fp, #0
 800955a:	f100 0914 	add.w	r9, r0, #20
 800955e:	f1ca 0301 	rsb	r3, sl, #1
 8009562:	f8cd 9010 	str.w	r9, [sp, #16]
 8009566:	f8cd b004 	str.w	fp, [sp, #4]
 800956a:	9308      	str	r3, [sp, #32]
 800956c:	42b7      	cmp	r7, r6
 800956e:	d33f      	bcc.n	80095f0 <__gethex+0x210>
 8009570:	9f04      	ldr	r7, [sp, #16]
 8009572:	9b01      	ldr	r3, [sp, #4]
 8009574:	f847 3b04 	str.w	r3, [r7], #4
 8009578:	eba7 0709 	sub.w	r7, r7, r9
 800957c:	10bf      	asrs	r7, r7, #2
 800957e:	6127      	str	r7, [r4, #16]
 8009580:	4618      	mov	r0, r3
 8009582:	f000 fb57 	bl	8009c34 <__hi0bits>
 8009586:	017f      	lsls	r7, r7, #5
 8009588:	f8d8 6000 	ldr.w	r6, [r8]
 800958c:	1a3f      	subs	r7, r7, r0
 800958e:	42b7      	cmp	r7, r6
 8009590:	dd62      	ble.n	8009658 <__gethex+0x278>
 8009592:	1bbf      	subs	r7, r7, r6
 8009594:	4639      	mov	r1, r7
 8009596:	4620      	mov	r0, r4
 8009598:	f000 fef1 	bl	800a37e <__any_on>
 800959c:	4682      	mov	sl, r0
 800959e:	b1a8      	cbz	r0, 80095cc <__gethex+0x1ec>
 80095a0:	f04f 0a01 	mov.w	sl, #1
 80095a4:	1e7b      	subs	r3, r7, #1
 80095a6:	1159      	asrs	r1, r3, #5
 80095a8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80095ac:	f003 021f 	and.w	r2, r3, #31
 80095b0:	fa0a f202 	lsl.w	r2, sl, r2
 80095b4:	420a      	tst	r2, r1
 80095b6:	d009      	beq.n	80095cc <__gethex+0x1ec>
 80095b8:	4553      	cmp	r3, sl
 80095ba:	dd05      	ble.n	80095c8 <__gethex+0x1e8>
 80095bc:	4620      	mov	r0, r4
 80095be:	1eb9      	subs	r1, r7, #2
 80095c0:	f000 fedd 	bl	800a37e <__any_on>
 80095c4:	2800      	cmp	r0, #0
 80095c6:	d144      	bne.n	8009652 <__gethex+0x272>
 80095c8:	f04f 0a02 	mov.w	sl, #2
 80095cc:	4639      	mov	r1, r7
 80095ce:	4620      	mov	r0, r4
 80095d0:	f7ff fe9e 	bl	8009310 <rshift>
 80095d4:	443d      	add	r5, r7
 80095d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80095da:	42ab      	cmp	r3, r5
 80095dc:	da4a      	bge.n	8009674 <__gethex+0x294>
 80095de:	4621      	mov	r1, r4
 80095e0:	9802      	ldr	r0, [sp, #8]
 80095e2:	f000 fa75 	bl	8009ad0 <_Bfree>
 80095e6:	2300      	movs	r3, #0
 80095e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80095ea:	27a3      	movs	r7, #163	; 0xa3
 80095ec:	6013      	str	r3, [r2, #0]
 80095ee:	e789      	b.n	8009504 <__gethex+0x124>
 80095f0:	1e73      	subs	r3, r6, #1
 80095f2:	9a06      	ldr	r2, [sp, #24]
 80095f4:	9307      	str	r3, [sp, #28]
 80095f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d019      	beq.n	8009632 <__gethex+0x252>
 80095fe:	f1bb 0f20 	cmp.w	fp, #32
 8009602:	d107      	bne.n	8009614 <__gethex+0x234>
 8009604:	9b04      	ldr	r3, [sp, #16]
 8009606:	9a01      	ldr	r2, [sp, #4]
 8009608:	f843 2b04 	str.w	r2, [r3], #4
 800960c:	9304      	str	r3, [sp, #16]
 800960e:	2300      	movs	r3, #0
 8009610:	469b      	mov	fp, r3
 8009612:	9301      	str	r3, [sp, #4]
 8009614:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009618:	f7ff fecd 	bl	80093b6 <__hexdig_fun>
 800961c:	9b01      	ldr	r3, [sp, #4]
 800961e:	f000 000f 	and.w	r0, r0, #15
 8009622:	fa00 f00b 	lsl.w	r0, r0, fp
 8009626:	4303      	orrs	r3, r0
 8009628:	9301      	str	r3, [sp, #4]
 800962a:	f10b 0b04 	add.w	fp, fp, #4
 800962e:	9b07      	ldr	r3, [sp, #28]
 8009630:	e00d      	b.n	800964e <__gethex+0x26e>
 8009632:	9a08      	ldr	r2, [sp, #32]
 8009634:	1e73      	subs	r3, r6, #1
 8009636:	4413      	add	r3, r2
 8009638:	42bb      	cmp	r3, r7
 800963a:	d3e0      	bcc.n	80095fe <__gethex+0x21e>
 800963c:	4618      	mov	r0, r3
 800963e:	4652      	mov	r2, sl
 8009640:	9903      	ldr	r1, [sp, #12]
 8009642:	9309      	str	r3, [sp, #36]	; 0x24
 8009644:	f001 fa76 	bl	800ab34 <strncmp>
 8009648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800964a:	2800      	cmp	r0, #0
 800964c:	d1d7      	bne.n	80095fe <__gethex+0x21e>
 800964e:	461e      	mov	r6, r3
 8009650:	e78c      	b.n	800956c <__gethex+0x18c>
 8009652:	f04f 0a03 	mov.w	sl, #3
 8009656:	e7b9      	b.n	80095cc <__gethex+0x1ec>
 8009658:	da09      	bge.n	800966e <__gethex+0x28e>
 800965a:	1bf7      	subs	r7, r6, r7
 800965c:	4621      	mov	r1, r4
 800965e:	463a      	mov	r2, r7
 8009660:	9802      	ldr	r0, [sp, #8]
 8009662:	f000 fc4d 	bl	8009f00 <__lshift>
 8009666:	4604      	mov	r4, r0
 8009668:	1bed      	subs	r5, r5, r7
 800966a:	f100 0914 	add.w	r9, r0, #20
 800966e:	f04f 0a00 	mov.w	sl, #0
 8009672:	e7b0      	b.n	80095d6 <__gethex+0x1f6>
 8009674:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009678:	42a8      	cmp	r0, r5
 800967a:	dd72      	ble.n	8009762 <__gethex+0x382>
 800967c:	1b45      	subs	r5, r0, r5
 800967e:	42ae      	cmp	r6, r5
 8009680:	dc35      	bgt.n	80096ee <__gethex+0x30e>
 8009682:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009686:	2b02      	cmp	r3, #2
 8009688:	d029      	beq.n	80096de <__gethex+0x2fe>
 800968a:	2b03      	cmp	r3, #3
 800968c:	d02b      	beq.n	80096e6 <__gethex+0x306>
 800968e:	2b01      	cmp	r3, #1
 8009690:	d11c      	bne.n	80096cc <__gethex+0x2ec>
 8009692:	42ae      	cmp	r6, r5
 8009694:	d11a      	bne.n	80096cc <__gethex+0x2ec>
 8009696:	2e01      	cmp	r6, #1
 8009698:	d112      	bne.n	80096c0 <__gethex+0x2e0>
 800969a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800969e:	9a05      	ldr	r2, [sp, #20]
 80096a0:	2762      	movs	r7, #98	; 0x62
 80096a2:	6013      	str	r3, [r2, #0]
 80096a4:	2301      	movs	r3, #1
 80096a6:	6123      	str	r3, [r4, #16]
 80096a8:	f8c9 3000 	str.w	r3, [r9]
 80096ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80096ae:	601c      	str	r4, [r3, #0]
 80096b0:	e728      	b.n	8009504 <__gethex+0x124>
 80096b2:	bf00      	nop
 80096b4:	0800b738 	.word	0x0800b738
 80096b8:	0800b6c0 	.word	0x0800b6c0
 80096bc:	0800b6d1 	.word	0x0800b6d1
 80096c0:	4620      	mov	r0, r4
 80096c2:	1e71      	subs	r1, r6, #1
 80096c4:	f000 fe5b 	bl	800a37e <__any_on>
 80096c8:	2800      	cmp	r0, #0
 80096ca:	d1e6      	bne.n	800969a <__gethex+0x2ba>
 80096cc:	4621      	mov	r1, r4
 80096ce:	9802      	ldr	r0, [sp, #8]
 80096d0:	f000 f9fe 	bl	8009ad0 <_Bfree>
 80096d4:	2300      	movs	r3, #0
 80096d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80096d8:	2750      	movs	r7, #80	; 0x50
 80096da:	6013      	str	r3, [r2, #0]
 80096dc:	e712      	b.n	8009504 <__gethex+0x124>
 80096de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d1f3      	bne.n	80096cc <__gethex+0x2ec>
 80096e4:	e7d9      	b.n	800969a <__gethex+0x2ba>
 80096e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d1d6      	bne.n	800969a <__gethex+0x2ba>
 80096ec:	e7ee      	b.n	80096cc <__gethex+0x2ec>
 80096ee:	1e6f      	subs	r7, r5, #1
 80096f0:	f1ba 0f00 	cmp.w	sl, #0
 80096f4:	d132      	bne.n	800975c <__gethex+0x37c>
 80096f6:	b127      	cbz	r7, 8009702 <__gethex+0x322>
 80096f8:	4639      	mov	r1, r7
 80096fa:	4620      	mov	r0, r4
 80096fc:	f000 fe3f 	bl	800a37e <__any_on>
 8009700:	4682      	mov	sl, r0
 8009702:	2101      	movs	r1, #1
 8009704:	117b      	asrs	r3, r7, #5
 8009706:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800970a:	f007 071f 	and.w	r7, r7, #31
 800970e:	fa01 f707 	lsl.w	r7, r1, r7
 8009712:	421f      	tst	r7, r3
 8009714:	f04f 0702 	mov.w	r7, #2
 8009718:	4629      	mov	r1, r5
 800971a:	4620      	mov	r0, r4
 800971c:	bf18      	it	ne
 800971e:	f04a 0a02 	orrne.w	sl, sl, #2
 8009722:	1b76      	subs	r6, r6, r5
 8009724:	f7ff fdf4 	bl	8009310 <rshift>
 8009728:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800972c:	f1ba 0f00 	cmp.w	sl, #0
 8009730:	d048      	beq.n	80097c4 <__gethex+0x3e4>
 8009732:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009736:	2b02      	cmp	r3, #2
 8009738:	d015      	beq.n	8009766 <__gethex+0x386>
 800973a:	2b03      	cmp	r3, #3
 800973c:	d017      	beq.n	800976e <__gethex+0x38e>
 800973e:	2b01      	cmp	r3, #1
 8009740:	d109      	bne.n	8009756 <__gethex+0x376>
 8009742:	f01a 0f02 	tst.w	sl, #2
 8009746:	d006      	beq.n	8009756 <__gethex+0x376>
 8009748:	f8d9 0000 	ldr.w	r0, [r9]
 800974c:	ea4a 0a00 	orr.w	sl, sl, r0
 8009750:	f01a 0f01 	tst.w	sl, #1
 8009754:	d10e      	bne.n	8009774 <__gethex+0x394>
 8009756:	f047 0710 	orr.w	r7, r7, #16
 800975a:	e033      	b.n	80097c4 <__gethex+0x3e4>
 800975c:	f04f 0a01 	mov.w	sl, #1
 8009760:	e7cf      	b.n	8009702 <__gethex+0x322>
 8009762:	2701      	movs	r7, #1
 8009764:	e7e2      	b.n	800972c <__gethex+0x34c>
 8009766:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009768:	f1c3 0301 	rsb	r3, r3, #1
 800976c:	9315      	str	r3, [sp, #84]	; 0x54
 800976e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009770:	2b00      	cmp	r3, #0
 8009772:	d0f0      	beq.n	8009756 <__gethex+0x376>
 8009774:	f04f 0c00 	mov.w	ip, #0
 8009778:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800977c:	f104 0314 	add.w	r3, r4, #20
 8009780:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009784:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009788:	4618      	mov	r0, r3
 800978a:	f853 2b04 	ldr.w	r2, [r3], #4
 800978e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009792:	d01c      	beq.n	80097ce <__gethex+0x3ee>
 8009794:	3201      	adds	r2, #1
 8009796:	6002      	str	r2, [r0, #0]
 8009798:	2f02      	cmp	r7, #2
 800979a:	f104 0314 	add.w	r3, r4, #20
 800979e:	d13d      	bne.n	800981c <__gethex+0x43c>
 80097a0:	f8d8 2000 	ldr.w	r2, [r8]
 80097a4:	3a01      	subs	r2, #1
 80097a6:	42b2      	cmp	r2, r6
 80097a8:	d10a      	bne.n	80097c0 <__gethex+0x3e0>
 80097aa:	2201      	movs	r2, #1
 80097ac:	1171      	asrs	r1, r6, #5
 80097ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80097b2:	f006 061f 	and.w	r6, r6, #31
 80097b6:	fa02 f606 	lsl.w	r6, r2, r6
 80097ba:	421e      	tst	r6, r3
 80097bc:	bf18      	it	ne
 80097be:	4617      	movne	r7, r2
 80097c0:	f047 0720 	orr.w	r7, r7, #32
 80097c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80097c6:	601c      	str	r4, [r3, #0]
 80097c8:	9b05      	ldr	r3, [sp, #20]
 80097ca:	601d      	str	r5, [r3, #0]
 80097cc:	e69a      	b.n	8009504 <__gethex+0x124>
 80097ce:	4299      	cmp	r1, r3
 80097d0:	f843 cc04 	str.w	ip, [r3, #-4]
 80097d4:	d8d8      	bhi.n	8009788 <__gethex+0x3a8>
 80097d6:	68a3      	ldr	r3, [r4, #8]
 80097d8:	459b      	cmp	fp, r3
 80097da:	db17      	blt.n	800980c <__gethex+0x42c>
 80097dc:	6861      	ldr	r1, [r4, #4]
 80097de:	9802      	ldr	r0, [sp, #8]
 80097e0:	3101      	adds	r1, #1
 80097e2:	f000 f935 	bl	8009a50 <_Balloc>
 80097e6:	4681      	mov	r9, r0
 80097e8:	b918      	cbnz	r0, 80097f2 <__gethex+0x412>
 80097ea:	4602      	mov	r2, r0
 80097ec:	2184      	movs	r1, #132	; 0x84
 80097ee:	4b19      	ldr	r3, [pc, #100]	; (8009854 <__gethex+0x474>)
 80097f0:	e6ab      	b.n	800954a <__gethex+0x16a>
 80097f2:	6922      	ldr	r2, [r4, #16]
 80097f4:	f104 010c 	add.w	r1, r4, #12
 80097f8:	3202      	adds	r2, #2
 80097fa:	0092      	lsls	r2, r2, #2
 80097fc:	300c      	adds	r0, #12
 80097fe:	f000 f919 	bl	8009a34 <memcpy>
 8009802:	4621      	mov	r1, r4
 8009804:	9802      	ldr	r0, [sp, #8]
 8009806:	f000 f963 	bl	8009ad0 <_Bfree>
 800980a:	464c      	mov	r4, r9
 800980c:	6923      	ldr	r3, [r4, #16]
 800980e:	1c5a      	adds	r2, r3, #1
 8009810:	6122      	str	r2, [r4, #16]
 8009812:	2201      	movs	r2, #1
 8009814:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009818:	615a      	str	r2, [r3, #20]
 800981a:	e7bd      	b.n	8009798 <__gethex+0x3b8>
 800981c:	6922      	ldr	r2, [r4, #16]
 800981e:	455a      	cmp	r2, fp
 8009820:	dd0b      	ble.n	800983a <__gethex+0x45a>
 8009822:	2101      	movs	r1, #1
 8009824:	4620      	mov	r0, r4
 8009826:	f7ff fd73 	bl	8009310 <rshift>
 800982a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800982e:	3501      	adds	r5, #1
 8009830:	42ab      	cmp	r3, r5
 8009832:	f6ff aed4 	blt.w	80095de <__gethex+0x1fe>
 8009836:	2701      	movs	r7, #1
 8009838:	e7c2      	b.n	80097c0 <__gethex+0x3e0>
 800983a:	f016 061f 	ands.w	r6, r6, #31
 800983e:	d0fa      	beq.n	8009836 <__gethex+0x456>
 8009840:	4453      	add	r3, sl
 8009842:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009846:	f000 f9f5 	bl	8009c34 <__hi0bits>
 800984a:	f1c6 0620 	rsb	r6, r6, #32
 800984e:	42b0      	cmp	r0, r6
 8009850:	dbe7      	blt.n	8009822 <__gethex+0x442>
 8009852:	e7f0      	b.n	8009836 <__gethex+0x456>
 8009854:	0800b6c0 	.word	0x0800b6c0

08009858 <L_shift>:
 8009858:	f1c2 0208 	rsb	r2, r2, #8
 800985c:	0092      	lsls	r2, r2, #2
 800985e:	b570      	push	{r4, r5, r6, lr}
 8009860:	f1c2 0620 	rsb	r6, r2, #32
 8009864:	6843      	ldr	r3, [r0, #4]
 8009866:	6804      	ldr	r4, [r0, #0]
 8009868:	fa03 f506 	lsl.w	r5, r3, r6
 800986c:	432c      	orrs	r4, r5
 800986e:	40d3      	lsrs	r3, r2
 8009870:	6004      	str	r4, [r0, #0]
 8009872:	f840 3f04 	str.w	r3, [r0, #4]!
 8009876:	4288      	cmp	r0, r1
 8009878:	d3f4      	bcc.n	8009864 <L_shift+0xc>
 800987a:	bd70      	pop	{r4, r5, r6, pc}

0800987c <__match>:
 800987c:	b530      	push	{r4, r5, lr}
 800987e:	6803      	ldr	r3, [r0, #0]
 8009880:	3301      	adds	r3, #1
 8009882:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009886:	b914      	cbnz	r4, 800988e <__match+0x12>
 8009888:	6003      	str	r3, [r0, #0]
 800988a:	2001      	movs	r0, #1
 800988c:	bd30      	pop	{r4, r5, pc}
 800988e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009892:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009896:	2d19      	cmp	r5, #25
 8009898:	bf98      	it	ls
 800989a:	3220      	addls	r2, #32
 800989c:	42a2      	cmp	r2, r4
 800989e:	d0f0      	beq.n	8009882 <__match+0x6>
 80098a0:	2000      	movs	r0, #0
 80098a2:	e7f3      	b.n	800988c <__match+0x10>

080098a4 <__hexnan>:
 80098a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a8:	2500      	movs	r5, #0
 80098aa:	680b      	ldr	r3, [r1, #0]
 80098ac:	4682      	mov	sl, r0
 80098ae:	115e      	asrs	r6, r3, #5
 80098b0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80098b4:	f013 031f 	ands.w	r3, r3, #31
 80098b8:	bf18      	it	ne
 80098ba:	3604      	addne	r6, #4
 80098bc:	1f37      	subs	r7, r6, #4
 80098be:	46b9      	mov	r9, r7
 80098c0:	463c      	mov	r4, r7
 80098c2:	46ab      	mov	fp, r5
 80098c4:	b087      	sub	sp, #28
 80098c6:	4690      	mov	r8, r2
 80098c8:	6802      	ldr	r2, [r0, #0]
 80098ca:	9301      	str	r3, [sp, #4]
 80098cc:	f846 5c04 	str.w	r5, [r6, #-4]
 80098d0:	9502      	str	r5, [sp, #8]
 80098d2:	7851      	ldrb	r1, [r2, #1]
 80098d4:	1c53      	adds	r3, r2, #1
 80098d6:	9303      	str	r3, [sp, #12]
 80098d8:	b341      	cbz	r1, 800992c <__hexnan+0x88>
 80098da:	4608      	mov	r0, r1
 80098dc:	9205      	str	r2, [sp, #20]
 80098de:	9104      	str	r1, [sp, #16]
 80098e0:	f7ff fd69 	bl	80093b6 <__hexdig_fun>
 80098e4:	2800      	cmp	r0, #0
 80098e6:	d14f      	bne.n	8009988 <__hexnan+0xe4>
 80098e8:	9904      	ldr	r1, [sp, #16]
 80098ea:	9a05      	ldr	r2, [sp, #20]
 80098ec:	2920      	cmp	r1, #32
 80098ee:	d818      	bhi.n	8009922 <__hexnan+0x7e>
 80098f0:	9b02      	ldr	r3, [sp, #8]
 80098f2:	459b      	cmp	fp, r3
 80098f4:	dd13      	ble.n	800991e <__hexnan+0x7a>
 80098f6:	454c      	cmp	r4, r9
 80098f8:	d206      	bcs.n	8009908 <__hexnan+0x64>
 80098fa:	2d07      	cmp	r5, #7
 80098fc:	dc04      	bgt.n	8009908 <__hexnan+0x64>
 80098fe:	462a      	mov	r2, r5
 8009900:	4649      	mov	r1, r9
 8009902:	4620      	mov	r0, r4
 8009904:	f7ff ffa8 	bl	8009858 <L_shift>
 8009908:	4544      	cmp	r4, r8
 800990a:	d950      	bls.n	80099ae <__hexnan+0x10a>
 800990c:	2300      	movs	r3, #0
 800990e:	f1a4 0904 	sub.w	r9, r4, #4
 8009912:	f844 3c04 	str.w	r3, [r4, #-4]
 8009916:	461d      	mov	r5, r3
 8009918:	464c      	mov	r4, r9
 800991a:	f8cd b008 	str.w	fp, [sp, #8]
 800991e:	9a03      	ldr	r2, [sp, #12]
 8009920:	e7d7      	b.n	80098d2 <__hexnan+0x2e>
 8009922:	2929      	cmp	r1, #41	; 0x29
 8009924:	d156      	bne.n	80099d4 <__hexnan+0x130>
 8009926:	3202      	adds	r2, #2
 8009928:	f8ca 2000 	str.w	r2, [sl]
 800992c:	f1bb 0f00 	cmp.w	fp, #0
 8009930:	d050      	beq.n	80099d4 <__hexnan+0x130>
 8009932:	454c      	cmp	r4, r9
 8009934:	d206      	bcs.n	8009944 <__hexnan+0xa0>
 8009936:	2d07      	cmp	r5, #7
 8009938:	dc04      	bgt.n	8009944 <__hexnan+0xa0>
 800993a:	462a      	mov	r2, r5
 800993c:	4649      	mov	r1, r9
 800993e:	4620      	mov	r0, r4
 8009940:	f7ff ff8a 	bl	8009858 <L_shift>
 8009944:	4544      	cmp	r4, r8
 8009946:	d934      	bls.n	80099b2 <__hexnan+0x10e>
 8009948:	4623      	mov	r3, r4
 800994a:	f1a8 0204 	sub.w	r2, r8, #4
 800994e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009952:	429f      	cmp	r7, r3
 8009954:	f842 1f04 	str.w	r1, [r2, #4]!
 8009958:	d2f9      	bcs.n	800994e <__hexnan+0xaa>
 800995a:	1b3b      	subs	r3, r7, r4
 800995c:	f023 0303 	bic.w	r3, r3, #3
 8009960:	3304      	adds	r3, #4
 8009962:	3401      	adds	r4, #1
 8009964:	3e03      	subs	r6, #3
 8009966:	42b4      	cmp	r4, r6
 8009968:	bf88      	it	hi
 800996a:	2304      	movhi	r3, #4
 800996c:	2200      	movs	r2, #0
 800996e:	4443      	add	r3, r8
 8009970:	f843 2b04 	str.w	r2, [r3], #4
 8009974:	429f      	cmp	r7, r3
 8009976:	d2fb      	bcs.n	8009970 <__hexnan+0xcc>
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	b91b      	cbnz	r3, 8009984 <__hexnan+0xe0>
 800997c:	4547      	cmp	r7, r8
 800997e:	d127      	bne.n	80099d0 <__hexnan+0x12c>
 8009980:	2301      	movs	r3, #1
 8009982:	603b      	str	r3, [r7, #0]
 8009984:	2005      	movs	r0, #5
 8009986:	e026      	b.n	80099d6 <__hexnan+0x132>
 8009988:	3501      	adds	r5, #1
 800998a:	2d08      	cmp	r5, #8
 800998c:	f10b 0b01 	add.w	fp, fp, #1
 8009990:	dd06      	ble.n	80099a0 <__hexnan+0xfc>
 8009992:	4544      	cmp	r4, r8
 8009994:	d9c3      	bls.n	800991e <__hexnan+0x7a>
 8009996:	2300      	movs	r3, #0
 8009998:	2501      	movs	r5, #1
 800999a:	f844 3c04 	str.w	r3, [r4, #-4]
 800999e:	3c04      	subs	r4, #4
 80099a0:	6822      	ldr	r2, [r4, #0]
 80099a2:	f000 000f 	and.w	r0, r0, #15
 80099a6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80099aa:	6022      	str	r2, [r4, #0]
 80099ac:	e7b7      	b.n	800991e <__hexnan+0x7a>
 80099ae:	2508      	movs	r5, #8
 80099b0:	e7b5      	b.n	800991e <__hexnan+0x7a>
 80099b2:	9b01      	ldr	r3, [sp, #4]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d0df      	beq.n	8009978 <__hexnan+0xd4>
 80099b8:	f04f 32ff 	mov.w	r2, #4294967295
 80099bc:	f1c3 0320 	rsb	r3, r3, #32
 80099c0:	fa22 f303 	lsr.w	r3, r2, r3
 80099c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80099c8:	401a      	ands	r2, r3
 80099ca:	f846 2c04 	str.w	r2, [r6, #-4]
 80099ce:	e7d3      	b.n	8009978 <__hexnan+0xd4>
 80099d0:	3f04      	subs	r7, #4
 80099d2:	e7d1      	b.n	8009978 <__hexnan+0xd4>
 80099d4:	2004      	movs	r0, #4
 80099d6:	b007      	add	sp, #28
 80099d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080099dc <_localeconv_r>:
 80099dc:	4800      	ldr	r0, [pc, #0]	; (80099e0 <_localeconv_r+0x4>)
 80099de:	4770      	bx	lr
 80099e0:	20000168 	.word	0x20000168

080099e4 <malloc>:
 80099e4:	4b02      	ldr	r3, [pc, #8]	; (80099f0 <malloc+0xc>)
 80099e6:	4601      	mov	r1, r0
 80099e8:	6818      	ldr	r0, [r3, #0]
 80099ea:	f000 bd65 	b.w	800a4b8 <_malloc_r>
 80099ee:	bf00      	nop
 80099f0:	20000010 	.word	0x20000010

080099f4 <__ascii_mbtowc>:
 80099f4:	b082      	sub	sp, #8
 80099f6:	b901      	cbnz	r1, 80099fa <__ascii_mbtowc+0x6>
 80099f8:	a901      	add	r1, sp, #4
 80099fa:	b142      	cbz	r2, 8009a0e <__ascii_mbtowc+0x1a>
 80099fc:	b14b      	cbz	r3, 8009a12 <__ascii_mbtowc+0x1e>
 80099fe:	7813      	ldrb	r3, [r2, #0]
 8009a00:	600b      	str	r3, [r1, #0]
 8009a02:	7812      	ldrb	r2, [r2, #0]
 8009a04:	1e10      	subs	r0, r2, #0
 8009a06:	bf18      	it	ne
 8009a08:	2001      	movne	r0, #1
 8009a0a:	b002      	add	sp, #8
 8009a0c:	4770      	bx	lr
 8009a0e:	4610      	mov	r0, r2
 8009a10:	e7fb      	b.n	8009a0a <__ascii_mbtowc+0x16>
 8009a12:	f06f 0001 	mvn.w	r0, #1
 8009a16:	e7f8      	b.n	8009a0a <__ascii_mbtowc+0x16>

08009a18 <memchr>:
 8009a18:	4603      	mov	r3, r0
 8009a1a:	b510      	push	{r4, lr}
 8009a1c:	b2c9      	uxtb	r1, r1
 8009a1e:	4402      	add	r2, r0
 8009a20:	4293      	cmp	r3, r2
 8009a22:	4618      	mov	r0, r3
 8009a24:	d101      	bne.n	8009a2a <memchr+0x12>
 8009a26:	2000      	movs	r0, #0
 8009a28:	e003      	b.n	8009a32 <memchr+0x1a>
 8009a2a:	7804      	ldrb	r4, [r0, #0]
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	428c      	cmp	r4, r1
 8009a30:	d1f6      	bne.n	8009a20 <memchr+0x8>
 8009a32:	bd10      	pop	{r4, pc}

08009a34 <memcpy>:
 8009a34:	440a      	add	r2, r1
 8009a36:	4291      	cmp	r1, r2
 8009a38:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a3c:	d100      	bne.n	8009a40 <memcpy+0xc>
 8009a3e:	4770      	bx	lr
 8009a40:	b510      	push	{r4, lr}
 8009a42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a46:	4291      	cmp	r1, r2
 8009a48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a4c:	d1f9      	bne.n	8009a42 <memcpy+0xe>
 8009a4e:	bd10      	pop	{r4, pc}

08009a50 <_Balloc>:
 8009a50:	b570      	push	{r4, r5, r6, lr}
 8009a52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a54:	4604      	mov	r4, r0
 8009a56:	460d      	mov	r5, r1
 8009a58:	b976      	cbnz	r6, 8009a78 <_Balloc+0x28>
 8009a5a:	2010      	movs	r0, #16
 8009a5c:	f7ff ffc2 	bl	80099e4 <malloc>
 8009a60:	4602      	mov	r2, r0
 8009a62:	6260      	str	r0, [r4, #36]	; 0x24
 8009a64:	b920      	cbnz	r0, 8009a70 <_Balloc+0x20>
 8009a66:	2166      	movs	r1, #102	; 0x66
 8009a68:	4b17      	ldr	r3, [pc, #92]	; (8009ac8 <_Balloc+0x78>)
 8009a6a:	4818      	ldr	r0, [pc, #96]	; (8009acc <_Balloc+0x7c>)
 8009a6c:	f7fe fda4 	bl	80085b8 <__assert_func>
 8009a70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a74:	6006      	str	r6, [r0, #0]
 8009a76:	60c6      	str	r6, [r0, #12]
 8009a78:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009a7a:	68f3      	ldr	r3, [r6, #12]
 8009a7c:	b183      	cbz	r3, 8009aa0 <_Balloc+0x50>
 8009a7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a86:	b9b8      	cbnz	r0, 8009ab8 <_Balloc+0x68>
 8009a88:	2101      	movs	r1, #1
 8009a8a:	fa01 f605 	lsl.w	r6, r1, r5
 8009a8e:	1d72      	adds	r2, r6, #5
 8009a90:	4620      	mov	r0, r4
 8009a92:	0092      	lsls	r2, r2, #2
 8009a94:	f000 fc94 	bl	800a3c0 <_calloc_r>
 8009a98:	b160      	cbz	r0, 8009ab4 <_Balloc+0x64>
 8009a9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a9e:	e00e      	b.n	8009abe <_Balloc+0x6e>
 8009aa0:	2221      	movs	r2, #33	; 0x21
 8009aa2:	2104      	movs	r1, #4
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	f000 fc8b 	bl	800a3c0 <_calloc_r>
 8009aaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009aac:	60f0      	str	r0, [r6, #12]
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d1e4      	bne.n	8009a7e <_Balloc+0x2e>
 8009ab4:	2000      	movs	r0, #0
 8009ab6:	bd70      	pop	{r4, r5, r6, pc}
 8009ab8:	6802      	ldr	r2, [r0, #0]
 8009aba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009abe:	2300      	movs	r3, #0
 8009ac0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ac4:	e7f7      	b.n	8009ab6 <_Balloc+0x66>
 8009ac6:	bf00      	nop
 8009ac8:	0800b5a8 	.word	0x0800b5a8
 8009acc:	0800b74c 	.word	0x0800b74c

08009ad0 <_Bfree>:
 8009ad0:	b570      	push	{r4, r5, r6, lr}
 8009ad2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ad4:	4605      	mov	r5, r0
 8009ad6:	460c      	mov	r4, r1
 8009ad8:	b976      	cbnz	r6, 8009af8 <_Bfree+0x28>
 8009ada:	2010      	movs	r0, #16
 8009adc:	f7ff ff82 	bl	80099e4 <malloc>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	6268      	str	r0, [r5, #36]	; 0x24
 8009ae4:	b920      	cbnz	r0, 8009af0 <_Bfree+0x20>
 8009ae6:	218a      	movs	r1, #138	; 0x8a
 8009ae8:	4b08      	ldr	r3, [pc, #32]	; (8009b0c <_Bfree+0x3c>)
 8009aea:	4809      	ldr	r0, [pc, #36]	; (8009b10 <_Bfree+0x40>)
 8009aec:	f7fe fd64 	bl	80085b8 <__assert_func>
 8009af0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009af4:	6006      	str	r6, [r0, #0]
 8009af6:	60c6      	str	r6, [r0, #12]
 8009af8:	b13c      	cbz	r4, 8009b0a <_Bfree+0x3a>
 8009afa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009afc:	6862      	ldr	r2, [r4, #4]
 8009afe:	68db      	ldr	r3, [r3, #12]
 8009b00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b04:	6021      	str	r1, [r4, #0]
 8009b06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b0a:	bd70      	pop	{r4, r5, r6, pc}
 8009b0c:	0800b5a8 	.word	0x0800b5a8
 8009b10:	0800b74c 	.word	0x0800b74c

08009b14 <__multadd>:
 8009b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b18:	4607      	mov	r7, r0
 8009b1a:	460c      	mov	r4, r1
 8009b1c:	461e      	mov	r6, r3
 8009b1e:	2000      	movs	r0, #0
 8009b20:	690d      	ldr	r5, [r1, #16]
 8009b22:	f101 0c14 	add.w	ip, r1, #20
 8009b26:	f8dc 3000 	ldr.w	r3, [ip]
 8009b2a:	3001      	adds	r0, #1
 8009b2c:	b299      	uxth	r1, r3
 8009b2e:	fb02 6101 	mla	r1, r2, r1, r6
 8009b32:	0c1e      	lsrs	r6, r3, #16
 8009b34:	0c0b      	lsrs	r3, r1, #16
 8009b36:	fb02 3306 	mla	r3, r2, r6, r3
 8009b3a:	b289      	uxth	r1, r1
 8009b3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b40:	4285      	cmp	r5, r0
 8009b42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b46:	f84c 1b04 	str.w	r1, [ip], #4
 8009b4a:	dcec      	bgt.n	8009b26 <__multadd+0x12>
 8009b4c:	b30e      	cbz	r6, 8009b92 <__multadd+0x7e>
 8009b4e:	68a3      	ldr	r3, [r4, #8]
 8009b50:	42ab      	cmp	r3, r5
 8009b52:	dc19      	bgt.n	8009b88 <__multadd+0x74>
 8009b54:	6861      	ldr	r1, [r4, #4]
 8009b56:	4638      	mov	r0, r7
 8009b58:	3101      	adds	r1, #1
 8009b5a:	f7ff ff79 	bl	8009a50 <_Balloc>
 8009b5e:	4680      	mov	r8, r0
 8009b60:	b928      	cbnz	r0, 8009b6e <__multadd+0x5a>
 8009b62:	4602      	mov	r2, r0
 8009b64:	21b5      	movs	r1, #181	; 0xb5
 8009b66:	4b0c      	ldr	r3, [pc, #48]	; (8009b98 <__multadd+0x84>)
 8009b68:	480c      	ldr	r0, [pc, #48]	; (8009b9c <__multadd+0x88>)
 8009b6a:	f7fe fd25 	bl	80085b8 <__assert_func>
 8009b6e:	6922      	ldr	r2, [r4, #16]
 8009b70:	f104 010c 	add.w	r1, r4, #12
 8009b74:	3202      	adds	r2, #2
 8009b76:	0092      	lsls	r2, r2, #2
 8009b78:	300c      	adds	r0, #12
 8009b7a:	f7ff ff5b 	bl	8009a34 <memcpy>
 8009b7e:	4621      	mov	r1, r4
 8009b80:	4638      	mov	r0, r7
 8009b82:	f7ff ffa5 	bl	8009ad0 <_Bfree>
 8009b86:	4644      	mov	r4, r8
 8009b88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b8c:	3501      	adds	r5, #1
 8009b8e:	615e      	str	r6, [r3, #20]
 8009b90:	6125      	str	r5, [r4, #16]
 8009b92:	4620      	mov	r0, r4
 8009b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b98:	0800b6c0 	.word	0x0800b6c0
 8009b9c:	0800b74c 	.word	0x0800b74c

08009ba0 <__s2b>:
 8009ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ba4:	4615      	mov	r5, r2
 8009ba6:	2209      	movs	r2, #9
 8009ba8:	461f      	mov	r7, r3
 8009baa:	3308      	adds	r3, #8
 8009bac:	460c      	mov	r4, r1
 8009bae:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bb2:	4606      	mov	r6, r0
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	2100      	movs	r1, #0
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	db09      	blt.n	8009bd0 <__s2b+0x30>
 8009bbc:	4630      	mov	r0, r6
 8009bbe:	f7ff ff47 	bl	8009a50 <_Balloc>
 8009bc2:	b940      	cbnz	r0, 8009bd6 <__s2b+0x36>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	21ce      	movs	r1, #206	; 0xce
 8009bc8:	4b18      	ldr	r3, [pc, #96]	; (8009c2c <__s2b+0x8c>)
 8009bca:	4819      	ldr	r0, [pc, #100]	; (8009c30 <__s2b+0x90>)
 8009bcc:	f7fe fcf4 	bl	80085b8 <__assert_func>
 8009bd0:	0052      	lsls	r2, r2, #1
 8009bd2:	3101      	adds	r1, #1
 8009bd4:	e7f0      	b.n	8009bb8 <__s2b+0x18>
 8009bd6:	9b08      	ldr	r3, [sp, #32]
 8009bd8:	2d09      	cmp	r5, #9
 8009bda:	6143      	str	r3, [r0, #20]
 8009bdc:	f04f 0301 	mov.w	r3, #1
 8009be0:	6103      	str	r3, [r0, #16]
 8009be2:	dd16      	ble.n	8009c12 <__s2b+0x72>
 8009be4:	f104 0909 	add.w	r9, r4, #9
 8009be8:	46c8      	mov	r8, r9
 8009bea:	442c      	add	r4, r5
 8009bec:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009bf0:	4601      	mov	r1, r0
 8009bf2:	220a      	movs	r2, #10
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	3b30      	subs	r3, #48	; 0x30
 8009bf8:	f7ff ff8c 	bl	8009b14 <__multadd>
 8009bfc:	45a0      	cmp	r8, r4
 8009bfe:	d1f5      	bne.n	8009bec <__s2b+0x4c>
 8009c00:	f1a5 0408 	sub.w	r4, r5, #8
 8009c04:	444c      	add	r4, r9
 8009c06:	1b2d      	subs	r5, r5, r4
 8009c08:	1963      	adds	r3, r4, r5
 8009c0a:	42bb      	cmp	r3, r7
 8009c0c:	db04      	blt.n	8009c18 <__s2b+0x78>
 8009c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c12:	2509      	movs	r5, #9
 8009c14:	340a      	adds	r4, #10
 8009c16:	e7f6      	b.n	8009c06 <__s2b+0x66>
 8009c18:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009c1c:	4601      	mov	r1, r0
 8009c1e:	220a      	movs	r2, #10
 8009c20:	4630      	mov	r0, r6
 8009c22:	3b30      	subs	r3, #48	; 0x30
 8009c24:	f7ff ff76 	bl	8009b14 <__multadd>
 8009c28:	e7ee      	b.n	8009c08 <__s2b+0x68>
 8009c2a:	bf00      	nop
 8009c2c:	0800b6c0 	.word	0x0800b6c0
 8009c30:	0800b74c 	.word	0x0800b74c

08009c34 <__hi0bits>:
 8009c34:	0c02      	lsrs	r2, r0, #16
 8009c36:	0412      	lsls	r2, r2, #16
 8009c38:	4603      	mov	r3, r0
 8009c3a:	b9ca      	cbnz	r2, 8009c70 <__hi0bits+0x3c>
 8009c3c:	0403      	lsls	r3, r0, #16
 8009c3e:	2010      	movs	r0, #16
 8009c40:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009c44:	bf04      	itt	eq
 8009c46:	021b      	lsleq	r3, r3, #8
 8009c48:	3008      	addeq	r0, #8
 8009c4a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009c4e:	bf04      	itt	eq
 8009c50:	011b      	lsleq	r3, r3, #4
 8009c52:	3004      	addeq	r0, #4
 8009c54:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009c58:	bf04      	itt	eq
 8009c5a:	009b      	lsleq	r3, r3, #2
 8009c5c:	3002      	addeq	r0, #2
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	db05      	blt.n	8009c6e <__hi0bits+0x3a>
 8009c62:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009c66:	f100 0001 	add.w	r0, r0, #1
 8009c6a:	bf08      	it	eq
 8009c6c:	2020      	moveq	r0, #32
 8009c6e:	4770      	bx	lr
 8009c70:	2000      	movs	r0, #0
 8009c72:	e7e5      	b.n	8009c40 <__hi0bits+0xc>

08009c74 <__lo0bits>:
 8009c74:	6803      	ldr	r3, [r0, #0]
 8009c76:	4602      	mov	r2, r0
 8009c78:	f013 0007 	ands.w	r0, r3, #7
 8009c7c:	d00b      	beq.n	8009c96 <__lo0bits+0x22>
 8009c7e:	07d9      	lsls	r1, r3, #31
 8009c80:	d421      	bmi.n	8009cc6 <__lo0bits+0x52>
 8009c82:	0798      	lsls	r0, r3, #30
 8009c84:	bf49      	itett	mi
 8009c86:	085b      	lsrmi	r3, r3, #1
 8009c88:	089b      	lsrpl	r3, r3, #2
 8009c8a:	2001      	movmi	r0, #1
 8009c8c:	6013      	strmi	r3, [r2, #0]
 8009c8e:	bf5c      	itt	pl
 8009c90:	2002      	movpl	r0, #2
 8009c92:	6013      	strpl	r3, [r2, #0]
 8009c94:	4770      	bx	lr
 8009c96:	b299      	uxth	r1, r3
 8009c98:	b909      	cbnz	r1, 8009c9e <__lo0bits+0x2a>
 8009c9a:	2010      	movs	r0, #16
 8009c9c:	0c1b      	lsrs	r3, r3, #16
 8009c9e:	b2d9      	uxtb	r1, r3
 8009ca0:	b909      	cbnz	r1, 8009ca6 <__lo0bits+0x32>
 8009ca2:	3008      	adds	r0, #8
 8009ca4:	0a1b      	lsrs	r3, r3, #8
 8009ca6:	0719      	lsls	r1, r3, #28
 8009ca8:	bf04      	itt	eq
 8009caa:	091b      	lsreq	r3, r3, #4
 8009cac:	3004      	addeq	r0, #4
 8009cae:	0799      	lsls	r1, r3, #30
 8009cb0:	bf04      	itt	eq
 8009cb2:	089b      	lsreq	r3, r3, #2
 8009cb4:	3002      	addeq	r0, #2
 8009cb6:	07d9      	lsls	r1, r3, #31
 8009cb8:	d403      	bmi.n	8009cc2 <__lo0bits+0x4e>
 8009cba:	085b      	lsrs	r3, r3, #1
 8009cbc:	f100 0001 	add.w	r0, r0, #1
 8009cc0:	d003      	beq.n	8009cca <__lo0bits+0x56>
 8009cc2:	6013      	str	r3, [r2, #0]
 8009cc4:	4770      	bx	lr
 8009cc6:	2000      	movs	r0, #0
 8009cc8:	4770      	bx	lr
 8009cca:	2020      	movs	r0, #32
 8009ccc:	4770      	bx	lr
	...

08009cd0 <__i2b>:
 8009cd0:	b510      	push	{r4, lr}
 8009cd2:	460c      	mov	r4, r1
 8009cd4:	2101      	movs	r1, #1
 8009cd6:	f7ff febb 	bl	8009a50 <_Balloc>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	b928      	cbnz	r0, 8009cea <__i2b+0x1a>
 8009cde:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009ce2:	4b04      	ldr	r3, [pc, #16]	; (8009cf4 <__i2b+0x24>)
 8009ce4:	4804      	ldr	r0, [pc, #16]	; (8009cf8 <__i2b+0x28>)
 8009ce6:	f7fe fc67 	bl	80085b8 <__assert_func>
 8009cea:	2301      	movs	r3, #1
 8009cec:	6144      	str	r4, [r0, #20]
 8009cee:	6103      	str	r3, [r0, #16]
 8009cf0:	bd10      	pop	{r4, pc}
 8009cf2:	bf00      	nop
 8009cf4:	0800b6c0 	.word	0x0800b6c0
 8009cf8:	0800b74c 	.word	0x0800b74c

08009cfc <__multiply>:
 8009cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d00:	4691      	mov	r9, r2
 8009d02:	690a      	ldr	r2, [r1, #16]
 8009d04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d08:	460c      	mov	r4, r1
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	bfbe      	ittt	lt
 8009d0e:	460b      	movlt	r3, r1
 8009d10:	464c      	movlt	r4, r9
 8009d12:	4699      	movlt	r9, r3
 8009d14:	6927      	ldr	r7, [r4, #16]
 8009d16:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009d1a:	68a3      	ldr	r3, [r4, #8]
 8009d1c:	6861      	ldr	r1, [r4, #4]
 8009d1e:	eb07 060a 	add.w	r6, r7, sl
 8009d22:	42b3      	cmp	r3, r6
 8009d24:	b085      	sub	sp, #20
 8009d26:	bfb8      	it	lt
 8009d28:	3101      	addlt	r1, #1
 8009d2a:	f7ff fe91 	bl	8009a50 <_Balloc>
 8009d2e:	b930      	cbnz	r0, 8009d3e <__multiply+0x42>
 8009d30:	4602      	mov	r2, r0
 8009d32:	f240 115d 	movw	r1, #349	; 0x15d
 8009d36:	4b43      	ldr	r3, [pc, #268]	; (8009e44 <__multiply+0x148>)
 8009d38:	4843      	ldr	r0, [pc, #268]	; (8009e48 <__multiply+0x14c>)
 8009d3a:	f7fe fc3d 	bl	80085b8 <__assert_func>
 8009d3e:	f100 0514 	add.w	r5, r0, #20
 8009d42:	462b      	mov	r3, r5
 8009d44:	2200      	movs	r2, #0
 8009d46:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d4a:	4543      	cmp	r3, r8
 8009d4c:	d321      	bcc.n	8009d92 <__multiply+0x96>
 8009d4e:	f104 0314 	add.w	r3, r4, #20
 8009d52:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009d56:	f109 0314 	add.w	r3, r9, #20
 8009d5a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009d5e:	9202      	str	r2, [sp, #8]
 8009d60:	1b3a      	subs	r2, r7, r4
 8009d62:	3a15      	subs	r2, #21
 8009d64:	f022 0203 	bic.w	r2, r2, #3
 8009d68:	3204      	adds	r2, #4
 8009d6a:	f104 0115 	add.w	r1, r4, #21
 8009d6e:	428f      	cmp	r7, r1
 8009d70:	bf38      	it	cc
 8009d72:	2204      	movcc	r2, #4
 8009d74:	9201      	str	r2, [sp, #4]
 8009d76:	9a02      	ldr	r2, [sp, #8]
 8009d78:	9303      	str	r3, [sp, #12]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d80c      	bhi.n	8009d98 <__multiply+0x9c>
 8009d7e:	2e00      	cmp	r6, #0
 8009d80:	dd03      	ble.n	8009d8a <__multiply+0x8e>
 8009d82:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d059      	beq.n	8009e3e <__multiply+0x142>
 8009d8a:	6106      	str	r6, [r0, #16]
 8009d8c:	b005      	add	sp, #20
 8009d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d92:	f843 2b04 	str.w	r2, [r3], #4
 8009d96:	e7d8      	b.n	8009d4a <__multiply+0x4e>
 8009d98:	f8b3 a000 	ldrh.w	sl, [r3]
 8009d9c:	f1ba 0f00 	cmp.w	sl, #0
 8009da0:	d023      	beq.n	8009dea <__multiply+0xee>
 8009da2:	46a9      	mov	r9, r5
 8009da4:	f04f 0c00 	mov.w	ip, #0
 8009da8:	f104 0e14 	add.w	lr, r4, #20
 8009dac:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009db0:	f8d9 1000 	ldr.w	r1, [r9]
 8009db4:	fa1f fb82 	uxth.w	fp, r2
 8009db8:	b289      	uxth	r1, r1
 8009dba:	fb0a 110b 	mla	r1, sl, fp, r1
 8009dbe:	4461      	add	r1, ip
 8009dc0:	f8d9 c000 	ldr.w	ip, [r9]
 8009dc4:	0c12      	lsrs	r2, r2, #16
 8009dc6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009dca:	fb0a c202 	mla	r2, sl, r2, ip
 8009dce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009dd2:	b289      	uxth	r1, r1
 8009dd4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009dd8:	4577      	cmp	r7, lr
 8009dda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009dde:	f849 1b04 	str.w	r1, [r9], #4
 8009de2:	d8e3      	bhi.n	8009dac <__multiply+0xb0>
 8009de4:	9a01      	ldr	r2, [sp, #4]
 8009de6:	f845 c002 	str.w	ip, [r5, r2]
 8009dea:	9a03      	ldr	r2, [sp, #12]
 8009dec:	3304      	adds	r3, #4
 8009dee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009df2:	f1b9 0f00 	cmp.w	r9, #0
 8009df6:	d020      	beq.n	8009e3a <__multiply+0x13e>
 8009df8:	46ae      	mov	lr, r5
 8009dfa:	f04f 0a00 	mov.w	sl, #0
 8009dfe:	6829      	ldr	r1, [r5, #0]
 8009e00:	f104 0c14 	add.w	ip, r4, #20
 8009e04:	f8bc b000 	ldrh.w	fp, [ip]
 8009e08:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009e0c:	b289      	uxth	r1, r1
 8009e0e:	fb09 220b 	mla	r2, r9, fp, r2
 8009e12:	4492      	add	sl, r2
 8009e14:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009e18:	f84e 1b04 	str.w	r1, [lr], #4
 8009e1c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009e20:	f8be 1000 	ldrh.w	r1, [lr]
 8009e24:	0c12      	lsrs	r2, r2, #16
 8009e26:	fb09 1102 	mla	r1, r9, r2, r1
 8009e2a:	4567      	cmp	r7, ip
 8009e2c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009e30:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009e34:	d8e6      	bhi.n	8009e04 <__multiply+0x108>
 8009e36:	9a01      	ldr	r2, [sp, #4]
 8009e38:	50a9      	str	r1, [r5, r2]
 8009e3a:	3504      	adds	r5, #4
 8009e3c:	e79b      	b.n	8009d76 <__multiply+0x7a>
 8009e3e:	3e01      	subs	r6, #1
 8009e40:	e79d      	b.n	8009d7e <__multiply+0x82>
 8009e42:	bf00      	nop
 8009e44:	0800b6c0 	.word	0x0800b6c0
 8009e48:	0800b74c 	.word	0x0800b74c

08009e4c <__pow5mult>:
 8009e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e50:	4615      	mov	r5, r2
 8009e52:	f012 0203 	ands.w	r2, r2, #3
 8009e56:	4606      	mov	r6, r0
 8009e58:	460f      	mov	r7, r1
 8009e5a:	d007      	beq.n	8009e6c <__pow5mult+0x20>
 8009e5c:	4c25      	ldr	r4, [pc, #148]	; (8009ef4 <__pow5mult+0xa8>)
 8009e5e:	3a01      	subs	r2, #1
 8009e60:	2300      	movs	r3, #0
 8009e62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e66:	f7ff fe55 	bl	8009b14 <__multadd>
 8009e6a:	4607      	mov	r7, r0
 8009e6c:	10ad      	asrs	r5, r5, #2
 8009e6e:	d03d      	beq.n	8009eec <__pow5mult+0xa0>
 8009e70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009e72:	b97c      	cbnz	r4, 8009e94 <__pow5mult+0x48>
 8009e74:	2010      	movs	r0, #16
 8009e76:	f7ff fdb5 	bl	80099e4 <malloc>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	6270      	str	r0, [r6, #36]	; 0x24
 8009e7e:	b928      	cbnz	r0, 8009e8c <__pow5mult+0x40>
 8009e80:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009e84:	4b1c      	ldr	r3, [pc, #112]	; (8009ef8 <__pow5mult+0xac>)
 8009e86:	481d      	ldr	r0, [pc, #116]	; (8009efc <__pow5mult+0xb0>)
 8009e88:	f7fe fb96 	bl	80085b8 <__assert_func>
 8009e8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e90:	6004      	str	r4, [r0, #0]
 8009e92:	60c4      	str	r4, [r0, #12]
 8009e94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009e98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e9c:	b94c      	cbnz	r4, 8009eb2 <__pow5mult+0x66>
 8009e9e:	f240 2171 	movw	r1, #625	; 0x271
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	f7ff ff14 	bl	8009cd0 <__i2b>
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	4604      	mov	r4, r0
 8009eac:	f8c8 0008 	str.w	r0, [r8, #8]
 8009eb0:	6003      	str	r3, [r0, #0]
 8009eb2:	f04f 0900 	mov.w	r9, #0
 8009eb6:	07eb      	lsls	r3, r5, #31
 8009eb8:	d50a      	bpl.n	8009ed0 <__pow5mult+0x84>
 8009eba:	4639      	mov	r1, r7
 8009ebc:	4622      	mov	r2, r4
 8009ebe:	4630      	mov	r0, r6
 8009ec0:	f7ff ff1c 	bl	8009cfc <__multiply>
 8009ec4:	4680      	mov	r8, r0
 8009ec6:	4639      	mov	r1, r7
 8009ec8:	4630      	mov	r0, r6
 8009eca:	f7ff fe01 	bl	8009ad0 <_Bfree>
 8009ece:	4647      	mov	r7, r8
 8009ed0:	106d      	asrs	r5, r5, #1
 8009ed2:	d00b      	beq.n	8009eec <__pow5mult+0xa0>
 8009ed4:	6820      	ldr	r0, [r4, #0]
 8009ed6:	b938      	cbnz	r0, 8009ee8 <__pow5mult+0x9c>
 8009ed8:	4622      	mov	r2, r4
 8009eda:	4621      	mov	r1, r4
 8009edc:	4630      	mov	r0, r6
 8009ede:	f7ff ff0d 	bl	8009cfc <__multiply>
 8009ee2:	6020      	str	r0, [r4, #0]
 8009ee4:	f8c0 9000 	str.w	r9, [r0]
 8009ee8:	4604      	mov	r4, r0
 8009eea:	e7e4      	b.n	8009eb6 <__pow5mult+0x6a>
 8009eec:	4638      	mov	r0, r7
 8009eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ef2:	bf00      	nop
 8009ef4:	0800b898 	.word	0x0800b898
 8009ef8:	0800b5a8 	.word	0x0800b5a8
 8009efc:	0800b74c 	.word	0x0800b74c

08009f00 <__lshift>:
 8009f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f04:	460c      	mov	r4, r1
 8009f06:	4607      	mov	r7, r0
 8009f08:	4691      	mov	r9, r2
 8009f0a:	6923      	ldr	r3, [r4, #16]
 8009f0c:	6849      	ldr	r1, [r1, #4]
 8009f0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f12:	68a3      	ldr	r3, [r4, #8]
 8009f14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f18:	f108 0601 	add.w	r6, r8, #1
 8009f1c:	42b3      	cmp	r3, r6
 8009f1e:	db0b      	blt.n	8009f38 <__lshift+0x38>
 8009f20:	4638      	mov	r0, r7
 8009f22:	f7ff fd95 	bl	8009a50 <_Balloc>
 8009f26:	4605      	mov	r5, r0
 8009f28:	b948      	cbnz	r0, 8009f3e <__lshift+0x3e>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009f30:	4b29      	ldr	r3, [pc, #164]	; (8009fd8 <__lshift+0xd8>)
 8009f32:	482a      	ldr	r0, [pc, #168]	; (8009fdc <__lshift+0xdc>)
 8009f34:	f7fe fb40 	bl	80085b8 <__assert_func>
 8009f38:	3101      	adds	r1, #1
 8009f3a:	005b      	lsls	r3, r3, #1
 8009f3c:	e7ee      	b.n	8009f1c <__lshift+0x1c>
 8009f3e:	2300      	movs	r3, #0
 8009f40:	f100 0114 	add.w	r1, r0, #20
 8009f44:	f100 0210 	add.w	r2, r0, #16
 8009f48:	4618      	mov	r0, r3
 8009f4a:	4553      	cmp	r3, sl
 8009f4c:	db37      	blt.n	8009fbe <__lshift+0xbe>
 8009f4e:	6920      	ldr	r0, [r4, #16]
 8009f50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f54:	f104 0314 	add.w	r3, r4, #20
 8009f58:	f019 091f 	ands.w	r9, r9, #31
 8009f5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009f64:	d02f      	beq.n	8009fc6 <__lshift+0xc6>
 8009f66:	468a      	mov	sl, r1
 8009f68:	f04f 0c00 	mov.w	ip, #0
 8009f6c:	f1c9 0e20 	rsb	lr, r9, #32
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	fa02 f209 	lsl.w	r2, r2, r9
 8009f76:	ea42 020c 	orr.w	r2, r2, ip
 8009f7a:	f84a 2b04 	str.w	r2, [sl], #4
 8009f7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f82:	4298      	cmp	r0, r3
 8009f84:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009f88:	d8f2      	bhi.n	8009f70 <__lshift+0x70>
 8009f8a:	1b03      	subs	r3, r0, r4
 8009f8c:	3b15      	subs	r3, #21
 8009f8e:	f023 0303 	bic.w	r3, r3, #3
 8009f92:	3304      	adds	r3, #4
 8009f94:	f104 0215 	add.w	r2, r4, #21
 8009f98:	4290      	cmp	r0, r2
 8009f9a:	bf38      	it	cc
 8009f9c:	2304      	movcc	r3, #4
 8009f9e:	f841 c003 	str.w	ip, [r1, r3]
 8009fa2:	f1bc 0f00 	cmp.w	ip, #0
 8009fa6:	d001      	beq.n	8009fac <__lshift+0xac>
 8009fa8:	f108 0602 	add.w	r6, r8, #2
 8009fac:	3e01      	subs	r6, #1
 8009fae:	4638      	mov	r0, r7
 8009fb0:	4621      	mov	r1, r4
 8009fb2:	612e      	str	r6, [r5, #16]
 8009fb4:	f7ff fd8c 	bl	8009ad0 <_Bfree>
 8009fb8:	4628      	mov	r0, r5
 8009fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fbe:	f842 0f04 	str.w	r0, [r2, #4]!
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	e7c1      	b.n	8009f4a <__lshift+0x4a>
 8009fc6:	3904      	subs	r1, #4
 8009fc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fcc:	4298      	cmp	r0, r3
 8009fce:	f841 2f04 	str.w	r2, [r1, #4]!
 8009fd2:	d8f9      	bhi.n	8009fc8 <__lshift+0xc8>
 8009fd4:	e7ea      	b.n	8009fac <__lshift+0xac>
 8009fd6:	bf00      	nop
 8009fd8:	0800b6c0 	.word	0x0800b6c0
 8009fdc:	0800b74c 	.word	0x0800b74c

08009fe0 <__mcmp>:
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	690a      	ldr	r2, [r1, #16]
 8009fe4:	6900      	ldr	r0, [r0, #16]
 8009fe6:	b530      	push	{r4, r5, lr}
 8009fe8:	1a80      	subs	r0, r0, r2
 8009fea:	d10d      	bne.n	800a008 <__mcmp+0x28>
 8009fec:	3314      	adds	r3, #20
 8009fee:	3114      	adds	r1, #20
 8009ff0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009ff4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009ff8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009ffc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a000:	4295      	cmp	r5, r2
 800a002:	d002      	beq.n	800a00a <__mcmp+0x2a>
 800a004:	d304      	bcc.n	800a010 <__mcmp+0x30>
 800a006:	2001      	movs	r0, #1
 800a008:	bd30      	pop	{r4, r5, pc}
 800a00a:	42a3      	cmp	r3, r4
 800a00c:	d3f4      	bcc.n	8009ff8 <__mcmp+0x18>
 800a00e:	e7fb      	b.n	800a008 <__mcmp+0x28>
 800a010:	f04f 30ff 	mov.w	r0, #4294967295
 800a014:	e7f8      	b.n	800a008 <__mcmp+0x28>
	...

0800a018 <__mdiff>:
 800a018:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a01c:	460d      	mov	r5, r1
 800a01e:	4607      	mov	r7, r0
 800a020:	4611      	mov	r1, r2
 800a022:	4628      	mov	r0, r5
 800a024:	4614      	mov	r4, r2
 800a026:	f7ff ffdb 	bl	8009fe0 <__mcmp>
 800a02a:	1e06      	subs	r6, r0, #0
 800a02c:	d111      	bne.n	800a052 <__mdiff+0x3a>
 800a02e:	4631      	mov	r1, r6
 800a030:	4638      	mov	r0, r7
 800a032:	f7ff fd0d 	bl	8009a50 <_Balloc>
 800a036:	4602      	mov	r2, r0
 800a038:	b928      	cbnz	r0, 800a046 <__mdiff+0x2e>
 800a03a:	f240 2132 	movw	r1, #562	; 0x232
 800a03e:	4b3a      	ldr	r3, [pc, #232]	; (800a128 <__mdiff+0x110>)
 800a040:	483a      	ldr	r0, [pc, #232]	; (800a12c <__mdiff+0x114>)
 800a042:	f7fe fab9 	bl	80085b8 <__assert_func>
 800a046:	2301      	movs	r3, #1
 800a048:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a04c:	4610      	mov	r0, r2
 800a04e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a052:	bfa4      	itt	ge
 800a054:	4623      	movge	r3, r4
 800a056:	462c      	movge	r4, r5
 800a058:	4638      	mov	r0, r7
 800a05a:	6861      	ldr	r1, [r4, #4]
 800a05c:	bfa6      	itte	ge
 800a05e:	461d      	movge	r5, r3
 800a060:	2600      	movge	r6, #0
 800a062:	2601      	movlt	r6, #1
 800a064:	f7ff fcf4 	bl	8009a50 <_Balloc>
 800a068:	4602      	mov	r2, r0
 800a06a:	b918      	cbnz	r0, 800a074 <__mdiff+0x5c>
 800a06c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a070:	4b2d      	ldr	r3, [pc, #180]	; (800a128 <__mdiff+0x110>)
 800a072:	e7e5      	b.n	800a040 <__mdiff+0x28>
 800a074:	f102 0814 	add.w	r8, r2, #20
 800a078:	46c2      	mov	sl, r8
 800a07a:	f04f 0c00 	mov.w	ip, #0
 800a07e:	6927      	ldr	r7, [r4, #16]
 800a080:	60c6      	str	r6, [r0, #12]
 800a082:	692e      	ldr	r6, [r5, #16]
 800a084:	f104 0014 	add.w	r0, r4, #20
 800a088:	f105 0914 	add.w	r9, r5, #20
 800a08c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a090:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a094:	3410      	adds	r4, #16
 800a096:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a09a:	f859 3b04 	ldr.w	r3, [r9], #4
 800a09e:	fa1f f18b 	uxth.w	r1, fp
 800a0a2:	448c      	add	ip, r1
 800a0a4:	b299      	uxth	r1, r3
 800a0a6:	0c1b      	lsrs	r3, r3, #16
 800a0a8:	ebac 0101 	sub.w	r1, ip, r1
 800a0ac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a0b0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a0b4:	b289      	uxth	r1, r1
 800a0b6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a0ba:	454e      	cmp	r6, r9
 800a0bc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a0c0:	f84a 3b04 	str.w	r3, [sl], #4
 800a0c4:	d8e7      	bhi.n	800a096 <__mdiff+0x7e>
 800a0c6:	1b73      	subs	r3, r6, r5
 800a0c8:	3b15      	subs	r3, #21
 800a0ca:	f023 0303 	bic.w	r3, r3, #3
 800a0ce:	3515      	adds	r5, #21
 800a0d0:	3304      	adds	r3, #4
 800a0d2:	42ae      	cmp	r6, r5
 800a0d4:	bf38      	it	cc
 800a0d6:	2304      	movcc	r3, #4
 800a0d8:	4418      	add	r0, r3
 800a0da:	4443      	add	r3, r8
 800a0dc:	461e      	mov	r6, r3
 800a0de:	4605      	mov	r5, r0
 800a0e0:	4575      	cmp	r5, lr
 800a0e2:	d30e      	bcc.n	800a102 <__mdiff+0xea>
 800a0e4:	f10e 0103 	add.w	r1, lr, #3
 800a0e8:	1a09      	subs	r1, r1, r0
 800a0ea:	f021 0103 	bic.w	r1, r1, #3
 800a0ee:	3803      	subs	r0, #3
 800a0f0:	4586      	cmp	lr, r0
 800a0f2:	bf38      	it	cc
 800a0f4:	2100      	movcc	r1, #0
 800a0f6:	4419      	add	r1, r3
 800a0f8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a0fc:	b18b      	cbz	r3, 800a122 <__mdiff+0x10a>
 800a0fe:	6117      	str	r7, [r2, #16]
 800a100:	e7a4      	b.n	800a04c <__mdiff+0x34>
 800a102:	f855 8b04 	ldr.w	r8, [r5], #4
 800a106:	fa1f f188 	uxth.w	r1, r8
 800a10a:	4461      	add	r1, ip
 800a10c:	140c      	asrs	r4, r1, #16
 800a10e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a112:	b289      	uxth	r1, r1
 800a114:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a118:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a11c:	f846 1b04 	str.w	r1, [r6], #4
 800a120:	e7de      	b.n	800a0e0 <__mdiff+0xc8>
 800a122:	3f01      	subs	r7, #1
 800a124:	e7e8      	b.n	800a0f8 <__mdiff+0xe0>
 800a126:	bf00      	nop
 800a128:	0800b6c0 	.word	0x0800b6c0
 800a12c:	0800b74c 	.word	0x0800b74c

0800a130 <__ulp>:
 800a130:	4b11      	ldr	r3, [pc, #68]	; (800a178 <__ulp+0x48>)
 800a132:	400b      	ands	r3, r1
 800a134:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a138:	2b00      	cmp	r3, #0
 800a13a:	dd02      	ble.n	800a142 <__ulp+0x12>
 800a13c:	2000      	movs	r0, #0
 800a13e:	4619      	mov	r1, r3
 800a140:	4770      	bx	lr
 800a142:	425b      	negs	r3, r3
 800a144:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a148:	f04f 0000 	mov.w	r0, #0
 800a14c:	f04f 0100 	mov.w	r1, #0
 800a150:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a154:	da04      	bge.n	800a160 <__ulp+0x30>
 800a156:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a15a:	fa43 f102 	asr.w	r1, r3, r2
 800a15e:	4770      	bx	lr
 800a160:	f1a2 0314 	sub.w	r3, r2, #20
 800a164:	2b1e      	cmp	r3, #30
 800a166:	bfd6      	itet	le
 800a168:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a16c:	2301      	movgt	r3, #1
 800a16e:	fa22 f303 	lsrle.w	r3, r2, r3
 800a172:	4618      	mov	r0, r3
 800a174:	4770      	bx	lr
 800a176:	bf00      	nop
 800a178:	7ff00000 	.word	0x7ff00000

0800a17c <__b2d>:
 800a17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a180:	6907      	ldr	r7, [r0, #16]
 800a182:	f100 0914 	add.w	r9, r0, #20
 800a186:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800a18a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800a18e:	f1a7 0804 	sub.w	r8, r7, #4
 800a192:	4630      	mov	r0, r6
 800a194:	f7ff fd4e 	bl	8009c34 <__hi0bits>
 800a198:	f1c0 0320 	rsb	r3, r0, #32
 800a19c:	280a      	cmp	r0, #10
 800a19e:	600b      	str	r3, [r1, #0]
 800a1a0:	491f      	ldr	r1, [pc, #124]	; (800a220 <__b2d+0xa4>)
 800a1a2:	dc17      	bgt.n	800a1d4 <__b2d+0x58>
 800a1a4:	45c1      	cmp	r9, r8
 800a1a6:	bf28      	it	cs
 800a1a8:	2200      	movcs	r2, #0
 800a1aa:	f1c0 0c0b 	rsb	ip, r0, #11
 800a1ae:	fa26 f30c 	lsr.w	r3, r6, ip
 800a1b2:	bf38      	it	cc
 800a1b4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a1b8:	ea43 0501 	orr.w	r5, r3, r1
 800a1bc:	f100 0315 	add.w	r3, r0, #21
 800a1c0:	fa06 f303 	lsl.w	r3, r6, r3
 800a1c4:	fa22 f20c 	lsr.w	r2, r2, ip
 800a1c8:	ea43 0402 	orr.w	r4, r3, r2
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	4629      	mov	r1, r5
 800a1d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1d4:	45c1      	cmp	r9, r8
 800a1d6:	bf2e      	itee	cs
 800a1d8:	2200      	movcs	r2, #0
 800a1da:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a1de:	f1a7 0808 	subcc.w	r8, r7, #8
 800a1e2:	f1b0 030b 	subs.w	r3, r0, #11
 800a1e6:	d016      	beq.n	800a216 <__b2d+0x9a>
 800a1e8:	f1c3 0720 	rsb	r7, r3, #32
 800a1ec:	fa22 f107 	lsr.w	r1, r2, r7
 800a1f0:	45c8      	cmp	r8, r9
 800a1f2:	fa06 f603 	lsl.w	r6, r6, r3
 800a1f6:	ea46 0601 	orr.w	r6, r6, r1
 800a1fa:	bf94      	ite	ls
 800a1fc:	2100      	movls	r1, #0
 800a1fe:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800a202:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800a206:	fa02 f003 	lsl.w	r0, r2, r3
 800a20a:	40f9      	lsrs	r1, r7
 800a20c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a210:	ea40 0401 	orr.w	r4, r0, r1
 800a214:	e7da      	b.n	800a1cc <__b2d+0x50>
 800a216:	4614      	mov	r4, r2
 800a218:	ea46 0501 	orr.w	r5, r6, r1
 800a21c:	e7d6      	b.n	800a1cc <__b2d+0x50>
 800a21e:	bf00      	nop
 800a220:	3ff00000 	.word	0x3ff00000

0800a224 <__d2b>:
 800a224:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a228:	2101      	movs	r1, #1
 800a22a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800a22e:	4690      	mov	r8, r2
 800a230:	461d      	mov	r5, r3
 800a232:	f7ff fc0d 	bl	8009a50 <_Balloc>
 800a236:	4604      	mov	r4, r0
 800a238:	b930      	cbnz	r0, 800a248 <__d2b+0x24>
 800a23a:	4602      	mov	r2, r0
 800a23c:	f240 310a 	movw	r1, #778	; 0x30a
 800a240:	4b24      	ldr	r3, [pc, #144]	; (800a2d4 <__d2b+0xb0>)
 800a242:	4825      	ldr	r0, [pc, #148]	; (800a2d8 <__d2b+0xb4>)
 800a244:	f7fe f9b8 	bl	80085b8 <__assert_func>
 800a248:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a24c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800a250:	bb2d      	cbnz	r5, 800a29e <__d2b+0x7a>
 800a252:	9301      	str	r3, [sp, #4]
 800a254:	f1b8 0300 	subs.w	r3, r8, #0
 800a258:	d026      	beq.n	800a2a8 <__d2b+0x84>
 800a25a:	4668      	mov	r0, sp
 800a25c:	9300      	str	r3, [sp, #0]
 800a25e:	f7ff fd09 	bl	8009c74 <__lo0bits>
 800a262:	9900      	ldr	r1, [sp, #0]
 800a264:	b1f0      	cbz	r0, 800a2a4 <__d2b+0x80>
 800a266:	9a01      	ldr	r2, [sp, #4]
 800a268:	f1c0 0320 	rsb	r3, r0, #32
 800a26c:	fa02 f303 	lsl.w	r3, r2, r3
 800a270:	430b      	orrs	r3, r1
 800a272:	40c2      	lsrs	r2, r0
 800a274:	6163      	str	r3, [r4, #20]
 800a276:	9201      	str	r2, [sp, #4]
 800a278:	9b01      	ldr	r3, [sp, #4]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	bf14      	ite	ne
 800a27e:	2102      	movne	r1, #2
 800a280:	2101      	moveq	r1, #1
 800a282:	61a3      	str	r3, [r4, #24]
 800a284:	6121      	str	r1, [r4, #16]
 800a286:	b1c5      	cbz	r5, 800a2ba <__d2b+0x96>
 800a288:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a28c:	4405      	add	r5, r0
 800a28e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a292:	603d      	str	r5, [r7, #0]
 800a294:	6030      	str	r0, [r6, #0]
 800a296:	4620      	mov	r0, r4
 800a298:	b002      	add	sp, #8
 800a29a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a29e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a2a2:	e7d6      	b.n	800a252 <__d2b+0x2e>
 800a2a4:	6161      	str	r1, [r4, #20]
 800a2a6:	e7e7      	b.n	800a278 <__d2b+0x54>
 800a2a8:	a801      	add	r0, sp, #4
 800a2aa:	f7ff fce3 	bl	8009c74 <__lo0bits>
 800a2ae:	2101      	movs	r1, #1
 800a2b0:	9b01      	ldr	r3, [sp, #4]
 800a2b2:	6121      	str	r1, [r4, #16]
 800a2b4:	6163      	str	r3, [r4, #20]
 800a2b6:	3020      	adds	r0, #32
 800a2b8:	e7e5      	b.n	800a286 <__d2b+0x62>
 800a2ba:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a2be:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a2c2:	6038      	str	r0, [r7, #0]
 800a2c4:	6918      	ldr	r0, [r3, #16]
 800a2c6:	f7ff fcb5 	bl	8009c34 <__hi0bits>
 800a2ca:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a2ce:	6031      	str	r1, [r6, #0]
 800a2d0:	e7e1      	b.n	800a296 <__d2b+0x72>
 800a2d2:	bf00      	nop
 800a2d4:	0800b6c0 	.word	0x0800b6c0
 800a2d8:	0800b74c 	.word	0x0800b74c

0800a2dc <__ratio>:
 800a2dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2e0:	4688      	mov	r8, r1
 800a2e2:	4669      	mov	r1, sp
 800a2e4:	4681      	mov	r9, r0
 800a2e6:	f7ff ff49 	bl	800a17c <__b2d>
 800a2ea:	460f      	mov	r7, r1
 800a2ec:	4604      	mov	r4, r0
 800a2ee:	460d      	mov	r5, r1
 800a2f0:	4640      	mov	r0, r8
 800a2f2:	a901      	add	r1, sp, #4
 800a2f4:	f7ff ff42 	bl	800a17c <__b2d>
 800a2f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a2fc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a300:	468b      	mov	fp, r1
 800a302:	eba3 0c02 	sub.w	ip, r3, r2
 800a306:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a30a:	1a9b      	subs	r3, r3, r2
 800a30c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a310:	2b00      	cmp	r3, #0
 800a312:	bfd5      	itete	le
 800a314:	460a      	movle	r2, r1
 800a316:	462a      	movgt	r2, r5
 800a318:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a31c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a320:	bfd8      	it	le
 800a322:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a326:	465b      	mov	r3, fp
 800a328:	4602      	mov	r2, r0
 800a32a:	4639      	mov	r1, r7
 800a32c:	4620      	mov	r0, r4
 800a32e:	f7f6 fa07 	bl	8000740 <__aeabi_ddiv>
 800a332:	b003      	add	sp, #12
 800a334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a338 <__copybits>:
 800a338:	3901      	subs	r1, #1
 800a33a:	b570      	push	{r4, r5, r6, lr}
 800a33c:	1149      	asrs	r1, r1, #5
 800a33e:	6914      	ldr	r4, [r2, #16]
 800a340:	3101      	adds	r1, #1
 800a342:	f102 0314 	add.w	r3, r2, #20
 800a346:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a34a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a34e:	1f05      	subs	r5, r0, #4
 800a350:	42a3      	cmp	r3, r4
 800a352:	d30c      	bcc.n	800a36e <__copybits+0x36>
 800a354:	1aa3      	subs	r3, r4, r2
 800a356:	3b11      	subs	r3, #17
 800a358:	f023 0303 	bic.w	r3, r3, #3
 800a35c:	3211      	adds	r2, #17
 800a35e:	42a2      	cmp	r2, r4
 800a360:	bf88      	it	hi
 800a362:	2300      	movhi	r3, #0
 800a364:	4418      	add	r0, r3
 800a366:	2300      	movs	r3, #0
 800a368:	4288      	cmp	r0, r1
 800a36a:	d305      	bcc.n	800a378 <__copybits+0x40>
 800a36c:	bd70      	pop	{r4, r5, r6, pc}
 800a36e:	f853 6b04 	ldr.w	r6, [r3], #4
 800a372:	f845 6f04 	str.w	r6, [r5, #4]!
 800a376:	e7eb      	b.n	800a350 <__copybits+0x18>
 800a378:	f840 3b04 	str.w	r3, [r0], #4
 800a37c:	e7f4      	b.n	800a368 <__copybits+0x30>

0800a37e <__any_on>:
 800a37e:	f100 0214 	add.w	r2, r0, #20
 800a382:	6900      	ldr	r0, [r0, #16]
 800a384:	114b      	asrs	r3, r1, #5
 800a386:	4298      	cmp	r0, r3
 800a388:	b510      	push	{r4, lr}
 800a38a:	db11      	blt.n	800a3b0 <__any_on+0x32>
 800a38c:	dd0a      	ble.n	800a3a4 <__any_on+0x26>
 800a38e:	f011 011f 	ands.w	r1, r1, #31
 800a392:	d007      	beq.n	800a3a4 <__any_on+0x26>
 800a394:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a398:	fa24 f001 	lsr.w	r0, r4, r1
 800a39c:	fa00 f101 	lsl.w	r1, r0, r1
 800a3a0:	428c      	cmp	r4, r1
 800a3a2:	d10b      	bne.n	800a3bc <__any_on+0x3e>
 800a3a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d803      	bhi.n	800a3b4 <__any_on+0x36>
 800a3ac:	2000      	movs	r0, #0
 800a3ae:	bd10      	pop	{r4, pc}
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	e7f7      	b.n	800a3a4 <__any_on+0x26>
 800a3b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a3b8:	2900      	cmp	r1, #0
 800a3ba:	d0f5      	beq.n	800a3a8 <__any_on+0x2a>
 800a3bc:	2001      	movs	r0, #1
 800a3be:	e7f6      	b.n	800a3ae <__any_on+0x30>

0800a3c0 <_calloc_r>:
 800a3c0:	b570      	push	{r4, r5, r6, lr}
 800a3c2:	fba1 5402 	umull	r5, r4, r1, r2
 800a3c6:	b934      	cbnz	r4, 800a3d6 <_calloc_r+0x16>
 800a3c8:	4629      	mov	r1, r5
 800a3ca:	f000 f875 	bl	800a4b8 <_malloc_r>
 800a3ce:	4606      	mov	r6, r0
 800a3d0:	b928      	cbnz	r0, 800a3de <_calloc_r+0x1e>
 800a3d2:	4630      	mov	r0, r6
 800a3d4:	bd70      	pop	{r4, r5, r6, pc}
 800a3d6:	220c      	movs	r2, #12
 800a3d8:	2600      	movs	r6, #0
 800a3da:	6002      	str	r2, [r0, #0]
 800a3dc:	e7f9      	b.n	800a3d2 <_calloc_r+0x12>
 800a3de:	462a      	mov	r2, r5
 800a3e0:	4621      	mov	r1, r4
 800a3e2:	f7fc fdef 	bl	8006fc4 <memset>
 800a3e6:	e7f4      	b.n	800a3d2 <_calloc_r+0x12>

0800a3e8 <_free_r>:
 800a3e8:	b538      	push	{r3, r4, r5, lr}
 800a3ea:	4605      	mov	r5, r0
 800a3ec:	2900      	cmp	r1, #0
 800a3ee:	d040      	beq.n	800a472 <_free_r+0x8a>
 800a3f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3f4:	1f0c      	subs	r4, r1, #4
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	bfb8      	it	lt
 800a3fa:	18e4      	addlt	r4, r4, r3
 800a3fc:	f000 feba 	bl	800b174 <__malloc_lock>
 800a400:	4a1c      	ldr	r2, [pc, #112]	; (800a474 <_free_r+0x8c>)
 800a402:	6813      	ldr	r3, [r2, #0]
 800a404:	b933      	cbnz	r3, 800a414 <_free_r+0x2c>
 800a406:	6063      	str	r3, [r4, #4]
 800a408:	6014      	str	r4, [r2, #0]
 800a40a:	4628      	mov	r0, r5
 800a40c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a410:	f000 beb6 	b.w	800b180 <__malloc_unlock>
 800a414:	42a3      	cmp	r3, r4
 800a416:	d908      	bls.n	800a42a <_free_r+0x42>
 800a418:	6820      	ldr	r0, [r4, #0]
 800a41a:	1821      	adds	r1, r4, r0
 800a41c:	428b      	cmp	r3, r1
 800a41e:	bf01      	itttt	eq
 800a420:	6819      	ldreq	r1, [r3, #0]
 800a422:	685b      	ldreq	r3, [r3, #4]
 800a424:	1809      	addeq	r1, r1, r0
 800a426:	6021      	streq	r1, [r4, #0]
 800a428:	e7ed      	b.n	800a406 <_free_r+0x1e>
 800a42a:	461a      	mov	r2, r3
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	b10b      	cbz	r3, 800a434 <_free_r+0x4c>
 800a430:	42a3      	cmp	r3, r4
 800a432:	d9fa      	bls.n	800a42a <_free_r+0x42>
 800a434:	6811      	ldr	r1, [r2, #0]
 800a436:	1850      	adds	r0, r2, r1
 800a438:	42a0      	cmp	r0, r4
 800a43a:	d10b      	bne.n	800a454 <_free_r+0x6c>
 800a43c:	6820      	ldr	r0, [r4, #0]
 800a43e:	4401      	add	r1, r0
 800a440:	1850      	adds	r0, r2, r1
 800a442:	4283      	cmp	r3, r0
 800a444:	6011      	str	r1, [r2, #0]
 800a446:	d1e0      	bne.n	800a40a <_free_r+0x22>
 800a448:	6818      	ldr	r0, [r3, #0]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	4401      	add	r1, r0
 800a44e:	6011      	str	r1, [r2, #0]
 800a450:	6053      	str	r3, [r2, #4]
 800a452:	e7da      	b.n	800a40a <_free_r+0x22>
 800a454:	d902      	bls.n	800a45c <_free_r+0x74>
 800a456:	230c      	movs	r3, #12
 800a458:	602b      	str	r3, [r5, #0]
 800a45a:	e7d6      	b.n	800a40a <_free_r+0x22>
 800a45c:	6820      	ldr	r0, [r4, #0]
 800a45e:	1821      	adds	r1, r4, r0
 800a460:	428b      	cmp	r3, r1
 800a462:	bf01      	itttt	eq
 800a464:	6819      	ldreq	r1, [r3, #0]
 800a466:	685b      	ldreq	r3, [r3, #4]
 800a468:	1809      	addeq	r1, r1, r0
 800a46a:	6021      	streq	r1, [r4, #0]
 800a46c:	6063      	str	r3, [r4, #4]
 800a46e:	6054      	str	r4, [r2, #4]
 800a470:	e7cb      	b.n	800a40a <_free_r+0x22>
 800a472:	bd38      	pop	{r3, r4, r5, pc}
 800a474:	20000528 	.word	0x20000528

0800a478 <sbrk_aligned>:
 800a478:	b570      	push	{r4, r5, r6, lr}
 800a47a:	4e0e      	ldr	r6, [pc, #56]	; (800a4b4 <sbrk_aligned+0x3c>)
 800a47c:	460c      	mov	r4, r1
 800a47e:	6831      	ldr	r1, [r6, #0]
 800a480:	4605      	mov	r5, r0
 800a482:	b911      	cbnz	r1, 800a48a <sbrk_aligned+0x12>
 800a484:	f000 fb46 	bl	800ab14 <_sbrk_r>
 800a488:	6030      	str	r0, [r6, #0]
 800a48a:	4621      	mov	r1, r4
 800a48c:	4628      	mov	r0, r5
 800a48e:	f000 fb41 	bl	800ab14 <_sbrk_r>
 800a492:	1c43      	adds	r3, r0, #1
 800a494:	d00a      	beq.n	800a4ac <sbrk_aligned+0x34>
 800a496:	1cc4      	adds	r4, r0, #3
 800a498:	f024 0403 	bic.w	r4, r4, #3
 800a49c:	42a0      	cmp	r0, r4
 800a49e:	d007      	beq.n	800a4b0 <sbrk_aligned+0x38>
 800a4a0:	1a21      	subs	r1, r4, r0
 800a4a2:	4628      	mov	r0, r5
 800a4a4:	f000 fb36 	bl	800ab14 <_sbrk_r>
 800a4a8:	3001      	adds	r0, #1
 800a4aa:	d101      	bne.n	800a4b0 <sbrk_aligned+0x38>
 800a4ac:	f04f 34ff 	mov.w	r4, #4294967295
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	bd70      	pop	{r4, r5, r6, pc}
 800a4b4:	2000052c 	.word	0x2000052c

0800a4b8 <_malloc_r>:
 800a4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4bc:	1ccd      	adds	r5, r1, #3
 800a4be:	f025 0503 	bic.w	r5, r5, #3
 800a4c2:	3508      	adds	r5, #8
 800a4c4:	2d0c      	cmp	r5, #12
 800a4c6:	bf38      	it	cc
 800a4c8:	250c      	movcc	r5, #12
 800a4ca:	2d00      	cmp	r5, #0
 800a4cc:	4607      	mov	r7, r0
 800a4ce:	db01      	blt.n	800a4d4 <_malloc_r+0x1c>
 800a4d0:	42a9      	cmp	r1, r5
 800a4d2:	d905      	bls.n	800a4e0 <_malloc_r+0x28>
 800a4d4:	230c      	movs	r3, #12
 800a4d6:	2600      	movs	r6, #0
 800a4d8:	603b      	str	r3, [r7, #0]
 800a4da:	4630      	mov	r0, r6
 800a4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4e0:	4e2e      	ldr	r6, [pc, #184]	; (800a59c <_malloc_r+0xe4>)
 800a4e2:	f000 fe47 	bl	800b174 <__malloc_lock>
 800a4e6:	6833      	ldr	r3, [r6, #0]
 800a4e8:	461c      	mov	r4, r3
 800a4ea:	bb34      	cbnz	r4, 800a53a <_malloc_r+0x82>
 800a4ec:	4629      	mov	r1, r5
 800a4ee:	4638      	mov	r0, r7
 800a4f0:	f7ff ffc2 	bl	800a478 <sbrk_aligned>
 800a4f4:	1c43      	adds	r3, r0, #1
 800a4f6:	4604      	mov	r4, r0
 800a4f8:	d14d      	bne.n	800a596 <_malloc_r+0xde>
 800a4fa:	6834      	ldr	r4, [r6, #0]
 800a4fc:	4626      	mov	r6, r4
 800a4fe:	2e00      	cmp	r6, #0
 800a500:	d140      	bne.n	800a584 <_malloc_r+0xcc>
 800a502:	6823      	ldr	r3, [r4, #0]
 800a504:	4631      	mov	r1, r6
 800a506:	4638      	mov	r0, r7
 800a508:	eb04 0803 	add.w	r8, r4, r3
 800a50c:	f000 fb02 	bl	800ab14 <_sbrk_r>
 800a510:	4580      	cmp	r8, r0
 800a512:	d13a      	bne.n	800a58a <_malloc_r+0xd2>
 800a514:	6821      	ldr	r1, [r4, #0]
 800a516:	3503      	adds	r5, #3
 800a518:	1a6d      	subs	r5, r5, r1
 800a51a:	f025 0503 	bic.w	r5, r5, #3
 800a51e:	3508      	adds	r5, #8
 800a520:	2d0c      	cmp	r5, #12
 800a522:	bf38      	it	cc
 800a524:	250c      	movcc	r5, #12
 800a526:	4638      	mov	r0, r7
 800a528:	4629      	mov	r1, r5
 800a52a:	f7ff ffa5 	bl	800a478 <sbrk_aligned>
 800a52e:	3001      	adds	r0, #1
 800a530:	d02b      	beq.n	800a58a <_malloc_r+0xd2>
 800a532:	6823      	ldr	r3, [r4, #0]
 800a534:	442b      	add	r3, r5
 800a536:	6023      	str	r3, [r4, #0]
 800a538:	e00e      	b.n	800a558 <_malloc_r+0xa0>
 800a53a:	6822      	ldr	r2, [r4, #0]
 800a53c:	1b52      	subs	r2, r2, r5
 800a53e:	d41e      	bmi.n	800a57e <_malloc_r+0xc6>
 800a540:	2a0b      	cmp	r2, #11
 800a542:	d916      	bls.n	800a572 <_malloc_r+0xba>
 800a544:	1961      	adds	r1, r4, r5
 800a546:	42a3      	cmp	r3, r4
 800a548:	6025      	str	r5, [r4, #0]
 800a54a:	bf18      	it	ne
 800a54c:	6059      	strne	r1, [r3, #4]
 800a54e:	6863      	ldr	r3, [r4, #4]
 800a550:	bf08      	it	eq
 800a552:	6031      	streq	r1, [r6, #0]
 800a554:	5162      	str	r2, [r4, r5]
 800a556:	604b      	str	r3, [r1, #4]
 800a558:	4638      	mov	r0, r7
 800a55a:	f104 060b 	add.w	r6, r4, #11
 800a55e:	f000 fe0f 	bl	800b180 <__malloc_unlock>
 800a562:	f026 0607 	bic.w	r6, r6, #7
 800a566:	1d23      	adds	r3, r4, #4
 800a568:	1af2      	subs	r2, r6, r3
 800a56a:	d0b6      	beq.n	800a4da <_malloc_r+0x22>
 800a56c:	1b9b      	subs	r3, r3, r6
 800a56e:	50a3      	str	r3, [r4, r2]
 800a570:	e7b3      	b.n	800a4da <_malloc_r+0x22>
 800a572:	6862      	ldr	r2, [r4, #4]
 800a574:	42a3      	cmp	r3, r4
 800a576:	bf0c      	ite	eq
 800a578:	6032      	streq	r2, [r6, #0]
 800a57a:	605a      	strne	r2, [r3, #4]
 800a57c:	e7ec      	b.n	800a558 <_malloc_r+0xa0>
 800a57e:	4623      	mov	r3, r4
 800a580:	6864      	ldr	r4, [r4, #4]
 800a582:	e7b2      	b.n	800a4ea <_malloc_r+0x32>
 800a584:	4634      	mov	r4, r6
 800a586:	6876      	ldr	r6, [r6, #4]
 800a588:	e7b9      	b.n	800a4fe <_malloc_r+0x46>
 800a58a:	230c      	movs	r3, #12
 800a58c:	4638      	mov	r0, r7
 800a58e:	603b      	str	r3, [r7, #0]
 800a590:	f000 fdf6 	bl	800b180 <__malloc_unlock>
 800a594:	e7a1      	b.n	800a4da <_malloc_r+0x22>
 800a596:	6025      	str	r5, [r4, #0]
 800a598:	e7de      	b.n	800a558 <_malloc_r+0xa0>
 800a59a:	bf00      	nop
 800a59c:	20000528 	.word	0x20000528

0800a5a0 <__ssputs_r>:
 800a5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5a4:	688e      	ldr	r6, [r1, #8]
 800a5a6:	4682      	mov	sl, r0
 800a5a8:	429e      	cmp	r6, r3
 800a5aa:	460c      	mov	r4, r1
 800a5ac:	4690      	mov	r8, r2
 800a5ae:	461f      	mov	r7, r3
 800a5b0:	d838      	bhi.n	800a624 <__ssputs_r+0x84>
 800a5b2:	898a      	ldrh	r2, [r1, #12]
 800a5b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a5b8:	d032      	beq.n	800a620 <__ssputs_r+0x80>
 800a5ba:	6825      	ldr	r5, [r4, #0]
 800a5bc:	6909      	ldr	r1, [r1, #16]
 800a5be:	3301      	adds	r3, #1
 800a5c0:	eba5 0901 	sub.w	r9, r5, r1
 800a5c4:	6965      	ldr	r5, [r4, #20]
 800a5c6:	444b      	add	r3, r9
 800a5c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a5d0:	106d      	asrs	r5, r5, #1
 800a5d2:	429d      	cmp	r5, r3
 800a5d4:	bf38      	it	cc
 800a5d6:	461d      	movcc	r5, r3
 800a5d8:	0553      	lsls	r3, r2, #21
 800a5da:	d531      	bpl.n	800a640 <__ssputs_r+0xa0>
 800a5dc:	4629      	mov	r1, r5
 800a5de:	f7ff ff6b 	bl	800a4b8 <_malloc_r>
 800a5e2:	4606      	mov	r6, r0
 800a5e4:	b950      	cbnz	r0, 800a5fc <__ssputs_r+0x5c>
 800a5e6:	230c      	movs	r3, #12
 800a5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ec:	f8ca 3000 	str.w	r3, [sl]
 800a5f0:	89a3      	ldrh	r3, [r4, #12]
 800a5f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5f6:	81a3      	strh	r3, [r4, #12]
 800a5f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5fc:	464a      	mov	r2, r9
 800a5fe:	6921      	ldr	r1, [r4, #16]
 800a600:	f7ff fa18 	bl	8009a34 <memcpy>
 800a604:	89a3      	ldrh	r3, [r4, #12]
 800a606:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a60a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a60e:	81a3      	strh	r3, [r4, #12]
 800a610:	6126      	str	r6, [r4, #16]
 800a612:	444e      	add	r6, r9
 800a614:	6026      	str	r6, [r4, #0]
 800a616:	463e      	mov	r6, r7
 800a618:	6165      	str	r5, [r4, #20]
 800a61a:	eba5 0509 	sub.w	r5, r5, r9
 800a61e:	60a5      	str	r5, [r4, #8]
 800a620:	42be      	cmp	r6, r7
 800a622:	d900      	bls.n	800a626 <__ssputs_r+0x86>
 800a624:	463e      	mov	r6, r7
 800a626:	4632      	mov	r2, r6
 800a628:	4641      	mov	r1, r8
 800a62a:	6820      	ldr	r0, [r4, #0]
 800a62c:	f000 fd88 	bl	800b140 <memmove>
 800a630:	68a3      	ldr	r3, [r4, #8]
 800a632:	2000      	movs	r0, #0
 800a634:	1b9b      	subs	r3, r3, r6
 800a636:	60a3      	str	r3, [r4, #8]
 800a638:	6823      	ldr	r3, [r4, #0]
 800a63a:	4433      	add	r3, r6
 800a63c:	6023      	str	r3, [r4, #0]
 800a63e:	e7db      	b.n	800a5f8 <__ssputs_r+0x58>
 800a640:	462a      	mov	r2, r5
 800a642:	f000 fda3 	bl	800b18c <_realloc_r>
 800a646:	4606      	mov	r6, r0
 800a648:	2800      	cmp	r0, #0
 800a64a:	d1e1      	bne.n	800a610 <__ssputs_r+0x70>
 800a64c:	4650      	mov	r0, sl
 800a64e:	6921      	ldr	r1, [r4, #16]
 800a650:	f7ff feca 	bl	800a3e8 <_free_r>
 800a654:	e7c7      	b.n	800a5e6 <__ssputs_r+0x46>
	...

0800a658 <_svfiprintf_r>:
 800a658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a65c:	4698      	mov	r8, r3
 800a65e:	898b      	ldrh	r3, [r1, #12]
 800a660:	4607      	mov	r7, r0
 800a662:	061b      	lsls	r3, r3, #24
 800a664:	460d      	mov	r5, r1
 800a666:	4614      	mov	r4, r2
 800a668:	b09d      	sub	sp, #116	; 0x74
 800a66a:	d50e      	bpl.n	800a68a <_svfiprintf_r+0x32>
 800a66c:	690b      	ldr	r3, [r1, #16]
 800a66e:	b963      	cbnz	r3, 800a68a <_svfiprintf_r+0x32>
 800a670:	2140      	movs	r1, #64	; 0x40
 800a672:	f7ff ff21 	bl	800a4b8 <_malloc_r>
 800a676:	6028      	str	r0, [r5, #0]
 800a678:	6128      	str	r0, [r5, #16]
 800a67a:	b920      	cbnz	r0, 800a686 <_svfiprintf_r+0x2e>
 800a67c:	230c      	movs	r3, #12
 800a67e:	603b      	str	r3, [r7, #0]
 800a680:	f04f 30ff 	mov.w	r0, #4294967295
 800a684:	e0d1      	b.n	800a82a <_svfiprintf_r+0x1d2>
 800a686:	2340      	movs	r3, #64	; 0x40
 800a688:	616b      	str	r3, [r5, #20]
 800a68a:	2300      	movs	r3, #0
 800a68c:	9309      	str	r3, [sp, #36]	; 0x24
 800a68e:	2320      	movs	r3, #32
 800a690:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a694:	2330      	movs	r3, #48	; 0x30
 800a696:	f04f 0901 	mov.w	r9, #1
 800a69a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a69e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a844 <_svfiprintf_r+0x1ec>
 800a6a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6a6:	4623      	mov	r3, r4
 800a6a8:	469a      	mov	sl, r3
 800a6aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6ae:	b10a      	cbz	r2, 800a6b4 <_svfiprintf_r+0x5c>
 800a6b0:	2a25      	cmp	r2, #37	; 0x25
 800a6b2:	d1f9      	bne.n	800a6a8 <_svfiprintf_r+0x50>
 800a6b4:	ebba 0b04 	subs.w	fp, sl, r4
 800a6b8:	d00b      	beq.n	800a6d2 <_svfiprintf_r+0x7a>
 800a6ba:	465b      	mov	r3, fp
 800a6bc:	4622      	mov	r2, r4
 800a6be:	4629      	mov	r1, r5
 800a6c0:	4638      	mov	r0, r7
 800a6c2:	f7ff ff6d 	bl	800a5a0 <__ssputs_r>
 800a6c6:	3001      	adds	r0, #1
 800a6c8:	f000 80aa 	beq.w	800a820 <_svfiprintf_r+0x1c8>
 800a6cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6ce:	445a      	add	r2, fp
 800a6d0:	9209      	str	r2, [sp, #36]	; 0x24
 800a6d2:	f89a 3000 	ldrb.w	r3, [sl]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	f000 80a2 	beq.w	800a820 <_svfiprintf_r+0x1c8>
 800a6dc:	2300      	movs	r3, #0
 800a6de:	f04f 32ff 	mov.w	r2, #4294967295
 800a6e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6e6:	f10a 0a01 	add.w	sl, sl, #1
 800a6ea:	9304      	str	r3, [sp, #16]
 800a6ec:	9307      	str	r3, [sp, #28]
 800a6ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6f2:	931a      	str	r3, [sp, #104]	; 0x68
 800a6f4:	4654      	mov	r4, sl
 800a6f6:	2205      	movs	r2, #5
 800a6f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6fc:	4851      	ldr	r0, [pc, #324]	; (800a844 <_svfiprintf_r+0x1ec>)
 800a6fe:	f7ff f98b 	bl	8009a18 <memchr>
 800a702:	9a04      	ldr	r2, [sp, #16]
 800a704:	b9d8      	cbnz	r0, 800a73e <_svfiprintf_r+0xe6>
 800a706:	06d0      	lsls	r0, r2, #27
 800a708:	bf44      	itt	mi
 800a70a:	2320      	movmi	r3, #32
 800a70c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a710:	0711      	lsls	r1, r2, #28
 800a712:	bf44      	itt	mi
 800a714:	232b      	movmi	r3, #43	; 0x2b
 800a716:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a71a:	f89a 3000 	ldrb.w	r3, [sl]
 800a71e:	2b2a      	cmp	r3, #42	; 0x2a
 800a720:	d015      	beq.n	800a74e <_svfiprintf_r+0xf6>
 800a722:	4654      	mov	r4, sl
 800a724:	2000      	movs	r0, #0
 800a726:	f04f 0c0a 	mov.w	ip, #10
 800a72a:	9a07      	ldr	r2, [sp, #28]
 800a72c:	4621      	mov	r1, r4
 800a72e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a732:	3b30      	subs	r3, #48	; 0x30
 800a734:	2b09      	cmp	r3, #9
 800a736:	d94e      	bls.n	800a7d6 <_svfiprintf_r+0x17e>
 800a738:	b1b0      	cbz	r0, 800a768 <_svfiprintf_r+0x110>
 800a73a:	9207      	str	r2, [sp, #28]
 800a73c:	e014      	b.n	800a768 <_svfiprintf_r+0x110>
 800a73e:	eba0 0308 	sub.w	r3, r0, r8
 800a742:	fa09 f303 	lsl.w	r3, r9, r3
 800a746:	4313      	orrs	r3, r2
 800a748:	46a2      	mov	sl, r4
 800a74a:	9304      	str	r3, [sp, #16]
 800a74c:	e7d2      	b.n	800a6f4 <_svfiprintf_r+0x9c>
 800a74e:	9b03      	ldr	r3, [sp, #12]
 800a750:	1d19      	adds	r1, r3, #4
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	9103      	str	r1, [sp, #12]
 800a756:	2b00      	cmp	r3, #0
 800a758:	bfbb      	ittet	lt
 800a75a:	425b      	neglt	r3, r3
 800a75c:	f042 0202 	orrlt.w	r2, r2, #2
 800a760:	9307      	strge	r3, [sp, #28]
 800a762:	9307      	strlt	r3, [sp, #28]
 800a764:	bfb8      	it	lt
 800a766:	9204      	strlt	r2, [sp, #16]
 800a768:	7823      	ldrb	r3, [r4, #0]
 800a76a:	2b2e      	cmp	r3, #46	; 0x2e
 800a76c:	d10c      	bne.n	800a788 <_svfiprintf_r+0x130>
 800a76e:	7863      	ldrb	r3, [r4, #1]
 800a770:	2b2a      	cmp	r3, #42	; 0x2a
 800a772:	d135      	bne.n	800a7e0 <_svfiprintf_r+0x188>
 800a774:	9b03      	ldr	r3, [sp, #12]
 800a776:	3402      	adds	r4, #2
 800a778:	1d1a      	adds	r2, r3, #4
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	9203      	str	r2, [sp, #12]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	bfb8      	it	lt
 800a782:	f04f 33ff 	movlt.w	r3, #4294967295
 800a786:	9305      	str	r3, [sp, #20]
 800a788:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a848 <_svfiprintf_r+0x1f0>
 800a78c:	2203      	movs	r2, #3
 800a78e:	4650      	mov	r0, sl
 800a790:	7821      	ldrb	r1, [r4, #0]
 800a792:	f7ff f941 	bl	8009a18 <memchr>
 800a796:	b140      	cbz	r0, 800a7aa <_svfiprintf_r+0x152>
 800a798:	2340      	movs	r3, #64	; 0x40
 800a79a:	eba0 000a 	sub.w	r0, r0, sl
 800a79e:	fa03 f000 	lsl.w	r0, r3, r0
 800a7a2:	9b04      	ldr	r3, [sp, #16]
 800a7a4:	3401      	adds	r4, #1
 800a7a6:	4303      	orrs	r3, r0
 800a7a8:	9304      	str	r3, [sp, #16]
 800a7aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7ae:	2206      	movs	r2, #6
 800a7b0:	4826      	ldr	r0, [pc, #152]	; (800a84c <_svfiprintf_r+0x1f4>)
 800a7b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7b6:	f7ff f92f 	bl	8009a18 <memchr>
 800a7ba:	2800      	cmp	r0, #0
 800a7bc:	d038      	beq.n	800a830 <_svfiprintf_r+0x1d8>
 800a7be:	4b24      	ldr	r3, [pc, #144]	; (800a850 <_svfiprintf_r+0x1f8>)
 800a7c0:	bb1b      	cbnz	r3, 800a80a <_svfiprintf_r+0x1b2>
 800a7c2:	9b03      	ldr	r3, [sp, #12]
 800a7c4:	3307      	adds	r3, #7
 800a7c6:	f023 0307 	bic.w	r3, r3, #7
 800a7ca:	3308      	adds	r3, #8
 800a7cc:	9303      	str	r3, [sp, #12]
 800a7ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7d0:	4433      	add	r3, r6
 800a7d2:	9309      	str	r3, [sp, #36]	; 0x24
 800a7d4:	e767      	b.n	800a6a6 <_svfiprintf_r+0x4e>
 800a7d6:	460c      	mov	r4, r1
 800a7d8:	2001      	movs	r0, #1
 800a7da:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7de:	e7a5      	b.n	800a72c <_svfiprintf_r+0xd4>
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	f04f 0c0a 	mov.w	ip, #10
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	3401      	adds	r4, #1
 800a7ea:	9305      	str	r3, [sp, #20]
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7f2:	3a30      	subs	r2, #48	; 0x30
 800a7f4:	2a09      	cmp	r2, #9
 800a7f6:	d903      	bls.n	800a800 <_svfiprintf_r+0x1a8>
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d0c5      	beq.n	800a788 <_svfiprintf_r+0x130>
 800a7fc:	9105      	str	r1, [sp, #20]
 800a7fe:	e7c3      	b.n	800a788 <_svfiprintf_r+0x130>
 800a800:	4604      	mov	r4, r0
 800a802:	2301      	movs	r3, #1
 800a804:	fb0c 2101 	mla	r1, ip, r1, r2
 800a808:	e7f0      	b.n	800a7ec <_svfiprintf_r+0x194>
 800a80a:	ab03      	add	r3, sp, #12
 800a80c:	9300      	str	r3, [sp, #0]
 800a80e:	462a      	mov	r2, r5
 800a810:	4638      	mov	r0, r7
 800a812:	4b10      	ldr	r3, [pc, #64]	; (800a854 <_svfiprintf_r+0x1fc>)
 800a814:	a904      	add	r1, sp, #16
 800a816:	f7fc fc7b 	bl	8007110 <_printf_float>
 800a81a:	1c42      	adds	r2, r0, #1
 800a81c:	4606      	mov	r6, r0
 800a81e:	d1d6      	bne.n	800a7ce <_svfiprintf_r+0x176>
 800a820:	89ab      	ldrh	r3, [r5, #12]
 800a822:	065b      	lsls	r3, r3, #25
 800a824:	f53f af2c 	bmi.w	800a680 <_svfiprintf_r+0x28>
 800a828:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a82a:	b01d      	add	sp, #116	; 0x74
 800a82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a830:	ab03      	add	r3, sp, #12
 800a832:	9300      	str	r3, [sp, #0]
 800a834:	462a      	mov	r2, r5
 800a836:	4638      	mov	r0, r7
 800a838:	4b06      	ldr	r3, [pc, #24]	; (800a854 <_svfiprintf_r+0x1fc>)
 800a83a:	a904      	add	r1, sp, #16
 800a83c:	f7fc ff04 	bl	8007648 <_printf_i>
 800a840:	e7eb      	b.n	800a81a <_svfiprintf_r+0x1c2>
 800a842:	bf00      	nop
 800a844:	0800b8a4 	.word	0x0800b8a4
 800a848:	0800b8aa 	.word	0x0800b8aa
 800a84c:	0800b8ae 	.word	0x0800b8ae
 800a850:	08007111 	.word	0x08007111
 800a854:	0800a5a1 	.word	0x0800a5a1

0800a858 <__sfputc_r>:
 800a858:	6893      	ldr	r3, [r2, #8]
 800a85a:	b410      	push	{r4}
 800a85c:	3b01      	subs	r3, #1
 800a85e:	2b00      	cmp	r3, #0
 800a860:	6093      	str	r3, [r2, #8]
 800a862:	da07      	bge.n	800a874 <__sfputc_r+0x1c>
 800a864:	6994      	ldr	r4, [r2, #24]
 800a866:	42a3      	cmp	r3, r4
 800a868:	db01      	blt.n	800a86e <__sfputc_r+0x16>
 800a86a:	290a      	cmp	r1, #10
 800a86c:	d102      	bne.n	800a874 <__sfputc_r+0x1c>
 800a86e:	bc10      	pop	{r4}
 800a870:	f000 b974 	b.w	800ab5c <__swbuf_r>
 800a874:	6813      	ldr	r3, [r2, #0]
 800a876:	1c58      	adds	r0, r3, #1
 800a878:	6010      	str	r0, [r2, #0]
 800a87a:	7019      	strb	r1, [r3, #0]
 800a87c:	4608      	mov	r0, r1
 800a87e:	bc10      	pop	{r4}
 800a880:	4770      	bx	lr

0800a882 <__sfputs_r>:
 800a882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a884:	4606      	mov	r6, r0
 800a886:	460f      	mov	r7, r1
 800a888:	4614      	mov	r4, r2
 800a88a:	18d5      	adds	r5, r2, r3
 800a88c:	42ac      	cmp	r4, r5
 800a88e:	d101      	bne.n	800a894 <__sfputs_r+0x12>
 800a890:	2000      	movs	r0, #0
 800a892:	e007      	b.n	800a8a4 <__sfputs_r+0x22>
 800a894:	463a      	mov	r2, r7
 800a896:	4630      	mov	r0, r6
 800a898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a89c:	f7ff ffdc 	bl	800a858 <__sfputc_r>
 800a8a0:	1c43      	adds	r3, r0, #1
 800a8a2:	d1f3      	bne.n	800a88c <__sfputs_r+0xa>
 800a8a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a8a8 <_vfiprintf_r>:
 800a8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ac:	460d      	mov	r5, r1
 800a8ae:	4614      	mov	r4, r2
 800a8b0:	4698      	mov	r8, r3
 800a8b2:	4606      	mov	r6, r0
 800a8b4:	b09d      	sub	sp, #116	; 0x74
 800a8b6:	b118      	cbz	r0, 800a8c0 <_vfiprintf_r+0x18>
 800a8b8:	6983      	ldr	r3, [r0, #24]
 800a8ba:	b90b      	cbnz	r3, 800a8c0 <_vfiprintf_r+0x18>
 800a8bc:	f000 fb3a 	bl	800af34 <__sinit>
 800a8c0:	4b89      	ldr	r3, [pc, #548]	; (800aae8 <_vfiprintf_r+0x240>)
 800a8c2:	429d      	cmp	r5, r3
 800a8c4:	d11b      	bne.n	800a8fe <_vfiprintf_r+0x56>
 800a8c6:	6875      	ldr	r5, [r6, #4]
 800a8c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8ca:	07d9      	lsls	r1, r3, #31
 800a8cc:	d405      	bmi.n	800a8da <_vfiprintf_r+0x32>
 800a8ce:	89ab      	ldrh	r3, [r5, #12]
 800a8d0:	059a      	lsls	r2, r3, #22
 800a8d2:	d402      	bmi.n	800a8da <_vfiprintf_r+0x32>
 800a8d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8d6:	f000 fbcb 	bl	800b070 <__retarget_lock_acquire_recursive>
 800a8da:	89ab      	ldrh	r3, [r5, #12]
 800a8dc:	071b      	lsls	r3, r3, #28
 800a8de:	d501      	bpl.n	800a8e4 <_vfiprintf_r+0x3c>
 800a8e0:	692b      	ldr	r3, [r5, #16]
 800a8e2:	b9eb      	cbnz	r3, 800a920 <_vfiprintf_r+0x78>
 800a8e4:	4629      	mov	r1, r5
 800a8e6:	4630      	mov	r0, r6
 800a8e8:	f000 f998 	bl	800ac1c <__swsetup_r>
 800a8ec:	b1c0      	cbz	r0, 800a920 <_vfiprintf_r+0x78>
 800a8ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8f0:	07dc      	lsls	r4, r3, #31
 800a8f2:	d50e      	bpl.n	800a912 <_vfiprintf_r+0x6a>
 800a8f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f8:	b01d      	add	sp, #116	; 0x74
 800a8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8fe:	4b7b      	ldr	r3, [pc, #492]	; (800aaec <_vfiprintf_r+0x244>)
 800a900:	429d      	cmp	r5, r3
 800a902:	d101      	bne.n	800a908 <_vfiprintf_r+0x60>
 800a904:	68b5      	ldr	r5, [r6, #8]
 800a906:	e7df      	b.n	800a8c8 <_vfiprintf_r+0x20>
 800a908:	4b79      	ldr	r3, [pc, #484]	; (800aaf0 <_vfiprintf_r+0x248>)
 800a90a:	429d      	cmp	r5, r3
 800a90c:	bf08      	it	eq
 800a90e:	68f5      	ldreq	r5, [r6, #12]
 800a910:	e7da      	b.n	800a8c8 <_vfiprintf_r+0x20>
 800a912:	89ab      	ldrh	r3, [r5, #12]
 800a914:	0598      	lsls	r0, r3, #22
 800a916:	d4ed      	bmi.n	800a8f4 <_vfiprintf_r+0x4c>
 800a918:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a91a:	f000 fbaa 	bl	800b072 <__retarget_lock_release_recursive>
 800a91e:	e7e9      	b.n	800a8f4 <_vfiprintf_r+0x4c>
 800a920:	2300      	movs	r3, #0
 800a922:	9309      	str	r3, [sp, #36]	; 0x24
 800a924:	2320      	movs	r3, #32
 800a926:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a92a:	2330      	movs	r3, #48	; 0x30
 800a92c:	f04f 0901 	mov.w	r9, #1
 800a930:	f8cd 800c 	str.w	r8, [sp, #12]
 800a934:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800aaf4 <_vfiprintf_r+0x24c>
 800a938:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a93c:	4623      	mov	r3, r4
 800a93e:	469a      	mov	sl, r3
 800a940:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a944:	b10a      	cbz	r2, 800a94a <_vfiprintf_r+0xa2>
 800a946:	2a25      	cmp	r2, #37	; 0x25
 800a948:	d1f9      	bne.n	800a93e <_vfiprintf_r+0x96>
 800a94a:	ebba 0b04 	subs.w	fp, sl, r4
 800a94e:	d00b      	beq.n	800a968 <_vfiprintf_r+0xc0>
 800a950:	465b      	mov	r3, fp
 800a952:	4622      	mov	r2, r4
 800a954:	4629      	mov	r1, r5
 800a956:	4630      	mov	r0, r6
 800a958:	f7ff ff93 	bl	800a882 <__sfputs_r>
 800a95c:	3001      	adds	r0, #1
 800a95e:	f000 80aa 	beq.w	800aab6 <_vfiprintf_r+0x20e>
 800a962:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a964:	445a      	add	r2, fp
 800a966:	9209      	str	r2, [sp, #36]	; 0x24
 800a968:	f89a 3000 	ldrb.w	r3, [sl]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	f000 80a2 	beq.w	800aab6 <_vfiprintf_r+0x20e>
 800a972:	2300      	movs	r3, #0
 800a974:	f04f 32ff 	mov.w	r2, #4294967295
 800a978:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a97c:	f10a 0a01 	add.w	sl, sl, #1
 800a980:	9304      	str	r3, [sp, #16]
 800a982:	9307      	str	r3, [sp, #28]
 800a984:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a988:	931a      	str	r3, [sp, #104]	; 0x68
 800a98a:	4654      	mov	r4, sl
 800a98c:	2205      	movs	r2, #5
 800a98e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a992:	4858      	ldr	r0, [pc, #352]	; (800aaf4 <_vfiprintf_r+0x24c>)
 800a994:	f7ff f840 	bl	8009a18 <memchr>
 800a998:	9a04      	ldr	r2, [sp, #16]
 800a99a:	b9d8      	cbnz	r0, 800a9d4 <_vfiprintf_r+0x12c>
 800a99c:	06d1      	lsls	r1, r2, #27
 800a99e:	bf44      	itt	mi
 800a9a0:	2320      	movmi	r3, #32
 800a9a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9a6:	0713      	lsls	r3, r2, #28
 800a9a8:	bf44      	itt	mi
 800a9aa:	232b      	movmi	r3, #43	; 0x2b
 800a9ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9b0:	f89a 3000 	ldrb.w	r3, [sl]
 800a9b4:	2b2a      	cmp	r3, #42	; 0x2a
 800a9b6:	d015      	beq.n	800a9e4 <_vfiprintf_r+0x13c>
 800a9b8:	4654      	mov	r4, sl
 800a9ba:	2000      	movs	r0, #0
 800a9bc:	f04f 0c0a 	mov.w	ip, #10
 800a9c0:	9a07      	ldr	r2, [sp, #28]
 800a9c2:	4621      	mov	r1, r4
 800a9c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9c8:	3b30      	subs	r3, #48	; 0x30
 800a9ca:	2b09      	cmp	r3, #9
 800a9cc:	d94e      	bls.n	800aa6c <_vfiprintf_r+0x1c4>
 800a9ce:	b1b0      	cbz	r0, 800a9fe <_vfiprintf_r+0x156>
 800a9d0:	9207      	str	r2, [sp, #28]
 800a9d2:	e014      	b.n	800a9fe <_vfiprintf_r+0x156>
 800a9d4:	eba0 0308 	sub.w	r3, r0, r8
 800a9d8:	fa09 f303 	lsl.w	r3, r9, r3
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	46a2      	mov	sl, r4
 800a9e0:	9304      	str	r3, [sp, #16]
 800a9e2:	e7d2      	b.n	800a98a <_vfiprintf_r+0xe2>
 800a9e4:	9b03      	ldr	r3, [sp, #12]
 800a9e6:	1d19      	adds	r1, r3, #4
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	9103      	str	r1, [sp, #12]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	bfbb      	ittet	lt
 800a9f0:	425b      	neglt	r3, r3
 800a9f2:	f042 0202 	orrlt.w	r2, r2, #2
 800a9f6:	9307      	strge	r3, [sp, #28]
 800a9f8:	9307      	strlt	r3, [sp, #28]
 800a9fa:	bfb8      	it	lt
 800a9fc:	9204      	strlt	r2, [sp, #16]
 800a9fe:	7823      	ldrb	r3, [r4, #0]
 800aa00:	2b2e      	cmp	r3, #46	; 0x2e
 800aa02:	d10c      	bne.n	800aa1e <_vfiprintf_r+0x176>
 800aa04:	7863      	ldrb	r3, [r4, #1]
 800aa06:	2b2a      	cmp	r3, #42	; 0x2a
 800aa08:	d135      	bne.n	800aa76 <_vfiprintf_r+0x1ce>
 800aa0a:	9b03      	ldr	r3, [sp, #12]
 800aa0c:	3402      	adds	r4, #2
 800aa0e:	1d1a      	adds	r2, r3, #4
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	9203      	str	r2, [sp, #12]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	bfb8      	it	lt
 800aa18:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa1c:	9305      	str	r3, [sp, #20]
 800aa1e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800aaf8 <_vfiprintf_r+0x250>
 800aa22:	2203      	movs	r2, #3
 800aa24:	4650      	mov	r0, sl
 800aa26:	7821      	ldrb	r1, [r4, #0]
 800aa28:	f7fe fff6 	bl	8009a18 <memchr>
 800aa2c:	b140      	cbz	r0, 800aa40 <_vfiprintf_r+0x198>
 800aa2e:	2340      	movs	r3, #64	; 0x40
 800aa30:	eba0 000a 	sub.w	r0, r0, sl
 800aa34:	fa03 f000 	lsl.w	r0, r3, r0
 800aa38:	9b04      	ldr	r3, [sp, #16]
 800aa3a:	3401      	adds	r4, #1
 800aa3c:	4303      	orrs	r3, r0
 800aa3e:	9304      	str	r3, [sp, #16]
 800aa40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa44:	2206      	movs	r2, #6
 800aa46:	482d      	ldr	r0, [pc, #180]	; (800aafc <_vfiprintf_r+0x254>)
 800aa48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa4c:	f7fe ffe4 	bl	8009a18 <memchr>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	d03f      	beq.n	800aad4 <_vfiprintf_r+0x22c>
 800aa54:	4b2a      	ldr	r3, [pc, #168]	; (800ab00 <_vfiprintf_r+0x258>)
 800aa56:	bb1b      	cbnz	r3, 800aaa0 <_vfiprintf_r+0x1f8>
 800aa58:	9b03      	ldr	r3, [sp, #12]
 800aa5a:	3307      	adds	r3, #7
 800aa5c:	f023 0307 	bic.w	r3, r3, #7
 800aa60:	3308      	adds	r3, #8
 800aa62:	9303      	str	r3, [sp, #12]
 800aa64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa66:	443b      	add	r3, r7
 800aa68:	9309      	str	r3, [sp, #36]	; 0x24
 800aa6a:	e767      	b.n	800a93c <_vfiprintf_r+0x94>
 800aa6c:	460c      	mov	r4, r1
 800aa6e:	2001      	movs	r0, #1
 800aa70:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa74:	e7a5      	b.n	800a9c2 <_vfiprintf_r+0x11a>
 800aa76:	2300      	movs	r3, #0
 800aa78:	f04f 0c0a 	mov.w	ip, #10
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	3401      	adds	r4, #1
 800aa80:	9305      	str	r3, [sp, #20]
 800aa82:	4620      	mov	r0, r4
 800aa84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa88:	3a30      	subs	r2, #48	; 0x30
 800aa8a:	2a09      	cmp	r2, #9
 800aa8c:	d903      	bls.n	800aa96 <_vfiprintf_r+0x1ee>
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d0c5      	beq.n	800aa1e <_vfiprintf_r+0x176>
 800aa92:	9105      	str	r1, [sp, #20]
 800aa94:	e7c3      	b.n	800aa1e <_vfiprintf_r+0x176>
 800aa96:	4604      	mov	r4, r0
 800aa98:	2301      	movs	r3, #1
 800aa9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa9e:	e7f0      	b.n	800aa82 <_vfiprintf_r+0x1da>
 800aaa0:	ab03      	add	r3, sp, #12
 800aaa2:	9300      	str	r3, [sp, #0]
 800aaa4:	462a      	mov	r2, r5
 800aaa6:	4630      	mov	r0, r6
 800aaa8:	4b16      	ldr	r3, [pc, #88]	; (800ab04 <_vfiprintf_r+0x25c>)
 800aaaa:	a904      	add	r1, sp, #16
 800aaac:	f7fc fb30 	bl	8007110 <_printf_float>
 800aab0:	4607      	mov	r7, r0
 800aab2:	1c78      	adds	r0, r7, #1
 800aab4:	d1d6      	bne.n	800aa64 <_vfiprintf_r+0x1bc>
 800aab6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aab8:	07d9      	lsls	r1, r3, #31
 800aaba:	d405      	bmi.n	800aac8 <_vfiprintf_r+0x220>
 800aabc:	89ab      	ldrh	r3, [r5, #12]
 800aabe:	059a      	lsls	r2, r3, #22
 800aac0:	d402      	bmi.n	800aac8 <_vfiprintf_r+0x220>
 800aac2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aac4:	f000 fad5 	bl	800b072 <__retarget_lock_release_recursive>
 800aac8:	89ab      	ldrh	r3, [r5, #12]
 800aaca:	065b      	lsls	r3, r3, #25
 800aacc:	f53f af12 	bmi.w	800a8f4 <_vfiprintf_r+0x4c>
 800aad0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aad2:	e711      	b.n	800a8f8 <_vfiprintf_r+0x50>
 800aad4:	ab03      	add	r3, sp, #12
 800aad6:	9300      	str	r3, [sp, #0]
 800aad8:	462a      	mov	r2, r5
 800aada:	4630      	mov	r0, r6
 800aadc:	4b09      	ldr	r3, [pc, #36]	; (800ab04 <_vfiprintf_r+0x25c>)
 800aade:	a904      	add	r1, sp, #16
 800aae0:	f7fc fdb2 	bl	8007648 <_printf_i>
 800aae4:	e7e4      	b.n	800aab0 <_vfiprintf_r+0x208>
 800aae6:	bf00      	nop
 800aae8:	0800b9d8 	.word	0x0800b9d8
 800aaec:	0800b9f8 	.word	0x0800b9f8
 800aaf0:	0800b9b8 	.word	0x0800b9b8
 800aaf4:	0800b8a4 	.word	0x0800b8a4
 800aaf8:	0800b8aa 	.word	0x0800b8aa
 800aafc:	0800b8ae 	.word	0x0800b8ae
 800ab00:	08007111 	.word	0x08007111
 800ab04:	0800a883 	.word	0x0800a883

0800ab08 <nan>:
 800ab08:	2000      	movs	r0, #0
 800ab0a:	4901      	ldr	r1, [pc, #4]	; (800ab10 <nan+0x8>)
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop
 800ab10:	7ff80000 	.word	0x7ff80000

0800ab14 <_sbrk_r>:
 800ab14:	b538      	push	{r3, r4, r5, lr}
 800ab16:	2300      	movs	r3, #0
 800ab18:	4d05      	ldr	r5, [pc, #20]	; (800ab30 <_sbrk_r+0x1c>)
 800ab1a:	4604      	mov	r4, r0
 800ab1c:	4608      	mov	r0, r1
 800ab1e:	602b      	str	r3, [r5, #0]
 800ab20:	f7f8 f970 	bl	8002e04 <_sbrk>
 800ab24:	1c43      	adds	r3, r0, #1
 800ab26:	d102      	bne.n	800ab2e <_sbrk_r+0x1a>
 800ab28:	682b      	ldr	r3, [r5, #0]
 800ab2a:	b103      	cbz	r3, 800ab2e <_sbrk_r+0x1a>
 800ab2c:	6023      	str	r3, [r4, #0]
 800ab2e:	bd38      	pop	{r3, r4, r5, pc}
 800ab30:	20000534 	.word	0x20000534

0800ab34 <strncmp>:
 800ab34:	4603      	mov	r3, r0
 800ab36:	b510      	push	{r4, lr}
 800ab38:	b172      	cbz	r2, 800ab58 <strncmp+0x24>
 800ab3a:	3901      	subs	r1, #1
 800ab3c:	1884      	adds	r4, r0, r2
 800ab3e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ab42:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ab46:	4290      	cmp	r0, r2
 800ab48:	d101      	bne.n	800ab4e <strncmp+0x1a>
 800ab4a:	42a3      	cmp	r3, r4
 800ab4c:	d101      	bne.n	800ab52 <strncmp+0x1e>
 800ab4e:	1a80      	subs	r0, r0, r2
 800ab50:	bd10      	pop	{r4, pc}
 800ab52:	2800      	cmp	r0, #0
 800ab54:	d1f3      	bne.n	800ab3e <strncmp+0xa>
 800ab56:	e7fa      	b.n	800ab4e <strncmp+0x1a>
 800ab58:	4610      	mov	r0, r2
 800ab5a:	e7f9      	b.n	800ab50 <strncmp+0x1c>

0800ab5c <__swbuf_r>:
 800ab5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab5e:	460e      	mov	r6, r1
 800ab60:	4614      	mov	r4, r2
 800ab62:	4605      	mov	r5, r0
 800ab64:	b118      	cbz	r0, 800ab6e <__swbuf_r+0x12>
 800ab66:	6983      	ldr	r3, [r0, #24]
 800ab68:	b90b      	cbnz	r3, 800ab6e <__swbuf_r+0x12>
 800ab6a:	f000 f9e3 	bl	800af34 <__sinit>
 800ab6e:	4b21      	ldr	r3, [pc, #132]	; (800abf4 <__swbuf_r+0x98>)
 800ab70:	429c      	cmp	r4, r3
 800ab72:	d12b      	bne.n	800abcc <__swbuf_r+0x70>
 800ab74:	686c      	ldr	r4, [r5, #4]
 800ab76:	69a3      	ldr	r3, [r4, #24]
 800ab78:	60a3      	str	r3, [r4, #8]
 800ab7a:	89a3      	ldrh	r3, [r4, #12]
 800ab7c:	071a      	lsls	r2, r3, #28
 800ab7e:	d52f      	bpl.n	800abe0 <__swbuf_r+0x84>
 800ab80:	6923      	ldr	r3, [r4, #16]
 800ab82:	b36b      	cbz	r3, 800abe0 <__swbuf_r+0x84>
 800ab84:	6923      	ldr	r3, [r4, #16]
 800ab86:	6820      	ldr	r0, [r4, #0]
 800ab88:	b2f6      	uxtb	r6, r6
 800ab8a:	1ac0      	subs	r0, r0, r3
 800ab8c:	6963      	ldr	r3, [r4, #20]
 800ab8e:	4637      	mov	r7, r6
 800ab90:	4283      	cmp	r3, r0
 800ab92:	dc04      	bgt.n	800ab9e <__swbuf_r+0x42>
 800ab94:	4621      	mov	r1, r4
 800ab96:	4628      	mov	r0, r5
 800ab98:	f000 f938 	bl	800ae0c <_fflush_r>
 800ab9c:	bb30      	cbnz	r0, 800abec <__swbuf_r+0x90>
 800ab9e:	68a3      	ldr	r3, [r4, #8]
 800aba0:	3001      	adds	r0, #1
 800aba2:	3b01      	subs	r3, #1
 800aba4:	60a3      	str	r3, [r4, #8]
 800aba6:	6823      	ldr	r3, [r4, #0]
 800aba8:	1c5a      	adds	r2, r3, #1
 800abaa:	6022      	str	r2, [r4, #0]
 800abac:	701e      	strb	r6, [r3, #0]
 800abae:	6963      	ldr	r3, [r4, #20]
 800abb0:	4283      	cmp	r3, r0
 800abb2:	d004      	beq.n	800abbe <__swbuf_r+0x62>
 800abb4:	89a3      	ldrh	r3, [r4, #12]
 800abb6:	07db      	lsls	r3, r3, #31
 800abb8:	d506      	bpl.n	800abc8 <__swbuf_r+0x6c>
 800abba:	2e0a      	cmp	r6, #10
 800abbc:	d104      	bne.n	800abc8 <__swbuf_r+0x6c>
 800abbe:	4621      	mov	r1, r4
 800abc0:	4628      	mov	r0, r5
 800abc2:	f000 f923 	bl	800ae0c <_fflush_r>
 800abc6:	b988      	cbnz	r0, 800abec <__swbuf_r+0x90>
 800abc8:	4638      	mov	r0, r7
 800abca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abcc:	4b0a      	ldr	r3, [pc, #40]	; (800abf8 <__swbuf_r+0x9c>)
 800abce:	429c      	cmp	r4, r3
 800abd0:	d101      	bne.n	800abd6 <__swbuf_r+0x7a>
 800abd2:	68ac      	ldr	r4, [r5, #8]
 800abd4:	e7cf      	b.n	800ab76 <__swbuf_r+0x1a>
 800abd6:	4b09      	ldr	r3, [pc, #36]	; (800abfc <__swbuf_r+0xa0>)
 800abd8:	429c      	cmp	r4, r3
 800abda:	bf08      	it	eq
 800abdc:	68ec      	ldreq	r4, [r5, #12]
 800abde:	e7ca      	b.n	800ab76 <__swbuf_r+0x1a>
 800abe0:	4621      	mov	r1, r4
 800abe2:	4628      	mov	r0, r5
 800abe4:	f000 f81a 	bl	800ac1c <__swsetup_r>
 800abe8:	2800      	cmp	r0, #0
 800abea:	d0cb      	beq.n	800ab84 <__swbuf_r+0x28>
 800abec:	f04f 37ff 	mov.w	r7, #4294967295
 800abf0:	e7ea      	b.n	800abc8 <__swbuf_r+0x6c>
 800abf2:	bf00      	nop
 800abf4:	0800b9d8 	.word	0x0800b9d8
 800abf8:	0800b9f8 	.word	0x0800b9f8
 800abfc:	0800b9b8 	.word	0x0800b9b8

0800ac00 <__ascii_wctomb>:
 800ac00:	4603      	mov	r3, r0
 800ac02:	4608      	mov	r0, r1
 800ac04:	b141      	cbz	r1, 800ac18 <__ascii_wctomb+0x18>
 800ac06:	2aff      	cmp	r2, #255	; 0xff
 800ac08:	d904      	bls.n	800ac14 <__ascii_wctomb+0x14>
 800ac0a:	228a      	movs	r2, #138	; 0x8a
 800ac0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac10:	601a      	str	r2, [r3, #0]
 800ac12:	4770      	bx	lr
 800ac14:	2001      	movs	r0, #1
 800ac16:	700a      	strb	r2, [r1, #0]
 800ac18:	4770      	bx	lr
	...

0800ac1c <__swsetup_r>:
 800ac1c:	4b32      	ldr	r3, [pc, #200]	; (800ace8 <__swsetup_r+0xcc>)
 800ac1e:	b570      	push	{r4, r5, r6, lr}
 800ac20:	681d      	ldr	r5, [r3, #0]
 800ac22:	4606      	mov	r6, r0
 800ac24:	460c      	mov	r4, r1
 800ac26:	b125      	cbz	r5, 800ac32 <__swsetup_r+0x16>
 800ac28:	69ab      	ldr	r3, [r5, #24]
 800ac2a:	b913      	cbnz	r3, 800ac32 <__swsetup_r+0x16>
 800ac2c:	4628      	mov	r0, r5
 800ac2e:	f000 f981 	bl	800af34 <__sinit>
 800ac32:	4b2e      	ldr	r3, [pc, #184]	; (800acec <__swsetup_r+0xd0>)
 800ac34:	429c      	cmp	r4, r3
 800ac36:	d10f      	bne.n	800ac58 <__swsetup_r+0x3c>
 800ac38:	686c      	ldr	r4, [r5, #4]
 800ac3a:	89a3      	ldrh	r3, [r4, #12]
 800ac3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac40:	0719      	lsls	r1, r3, #28
 800ac42:	d42c      	bmi.n	800ac9e <__swsetup_r+0x82>
 800ac44:	06dd      	lsls	r5, r3, #27
 800ac46:	d411      	bmi.n	800ac6c <__swsetup_r+0x50>
 800ac48:	2309      	movs	r3, #9
 800ac4a:	6033      	str	r3, [r6, #0]
 800ac4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac50:	f04f 30ff 	mov.w	r0, #4294967295
 800ac54:	81a3      	strh	r3, [r4, #12]
 800ac56:	e03e      	b.n	800acd6 <__swsetup_r+0xba>
 800ac58:	4b25      	ldr	r3, [pc, #148]	; (800acf0 <__swsetup_r+0xd4>)
 800ac5a:	429c      	cmp	r4, r3
 800ac5c:	d101      	bne.n	800ac62 <__swsetup_r+0x46>
 800ac5e:	68ac      	ldr	r4, [r5, #8]
 800ac60:	e7eb      	b.n	800ac3a <__swsetup_r+0x1e>
 800ac62:	4b24      	ldr	r3, [pc, #144]	; (800acf4 <__swsetup_r+0xd8>)
 800ac64:	429c      	cmp	r4, r3
 800ac66:	bf08      	it	eq
 800ac68:	68ec      	ldreq	r4, [r5, #12]
 800ac6a:	e7e6      	b.n	800ac3a <__swsetup_r+0x1e>
 800ac6c:	0758      	lsls	r0, r3, #29
 800ac6e:	d512      	bpl.n	800ac96 <__swsetup_r+0x7a>
 800ac70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac72:	b141      	cbz	r1, 800ac86 <__swsetup_r+0x6a>
 800ac74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac78:	4299      	cmp	r1, r3
 800ac7a:	d002      	beq.n	800ac82 <__swsetup_r+0x66>
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	f7ff fbb3 	bl	800a3e8 <_free_r>
 800ac82:	2300      	movs	r3, #0
 800ac84:	6363      	str	r3, [r4, #52]	; 0x34
 800ac86:	89a3      	ldrh	r3, [r4, #12]
 800ac88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac8c:	81a3      	strh	r3, [r4, #12]
 800ac8e:	2300      	movs	r3, #0
 800ac90:	6063      	str	r3, [r4, #4]
 800ac92:	6923      	ldr	r3, [r4, #16]
 800ac94:	6023      	str	r3, [r4, #0]
 800ac96:	89a3      	ldrh	r3, [r4, #12]
 800ac98:	f043 0308 	orr.w	r3, r3, #8
 800ac9c:	81a3      	strh	r3, [r4, #12]
 800ac9e:	6923      	ldr	r3, [r4, #16]
 800aca0:	b94b      	cbnz	r3, 800acb6 <__swsetup_r+0x9a>
 800aca2:	89a3      	ldrh	r3, [r4, #12]
 800aca4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acac:	d003      	beq.n	800acb6 <__swsetup_r+0x9a>
 800acae:	4621      	mov	r1, r4
 800acb0:	4630      	mov	r0, r6
 800acb2:	f000 fa05 	bl	800b0c0 <__smakebuf_r>
 800acb6:	89a0      	ldrh	r0, [r4, #12]
 800acb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800acbc:	f010 0301 	ands.w	r3, r0, #1
 800acc0:	d00a      	beq.n	800acd8 <__swsetup_r+0xbc>
 800acc2:	2300      	movs	r3, #0
 800acc4:	60a3      	str	r3, [r4, #8]
 800acc6:	6963      	ldr	r3, [r4, #20]
 800acc8:	425b      	negs	r3, r3
 800acca:	61a3      	str	r3, [r4, #24]
 800accc:	6923      	ldr	r3, [r4, #16]
 800acce:	b943      	cbnz	r3, 800ace2 <__swsetup_r+0xc6>
 800acd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800acd4:	d1ba      	bne.n	800ac4c <__swsetup_r+0x30>
 800acd6:	bd70      	pop	{r4, r5, r6, pc}
 800acd8:	0781      	lsls	r1, r0, #30
 800acda:	bf58      	it	pl
 800acdc:	6963      	ldrpl	r3, [r4, #20]
 800acde:	60a3      	str	r3, [r4, #8]
 800ace0:	e7f4      	b.n	800accc <__swsetup_r+0xb0>
 800ace2:	2000      	movs	r0, #0
 800ace4:	e7f7      	b.n	800acd6 <__swsetup_r+0xba>
 800ace6:	bf00      	nop
 800ace8:	20000010 	.word	0x20000010
 800acec:	0800b9d8 	.word	0x0800b9d8
 800acf0:	0800b9f8 	.word	0x0800b9f8
 800acf4:	0800b9b8 	.word	0x0800b9b8

0800acf8 <abort>:
 800acf8:	2006      	movs	r0, #6
 800acfa:	b508      	push	{r3, lr}
 800acfc:	f000 fa9e 	bl	800b23c <raise>
 800ad00:	2001      	movs	r0, #1
 800ad02:	f7f8 f80c 	bl	8002d1e <_exit>
	...

0800ad08 <__sflush_r>:
 800ad08:	898a      	ldrh	r2, [r1, #12]
 800ad0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad0c:	4605      	mov	r5, r0
 800ad0e:	0710      	lsls	r0, r2, #28
 800ad10:	460c      	mov	r4, r1
 800ad12:	d457      	bmi.n	800adc4 <__sflush_r+0xbc>
 800ad14:	684b      	ldr	r3, [r1, #4]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	dc04      	bgt.n	800ad24 <__sflush_r+0x1c>
 800ad1a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	dc01      	bgt.n	800ad24 <__sflush_r+0x1c>
 800ad20:	2000      	movs	r0, #0
 800ad22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad26:	2e00      	cmp	r6, #0
 800ad28:	d0fa      	beq.n	800ad20 <__sflush_r+0x18>
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad30:	682f      	ldr	r7, [r5, #0]
 800ad32:	602b      	str	r3, [r5, #0]
 800ad34:	d032      	beq.n	800ad9c <__sflush_r+0x94>
 800ad36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad38:	89a3      	ldrh	r3, [r4, #12]
 800ad3a:	075a      	lsls	r2, r3, #29
 800ad3c:	d505      	bpl.n	800ad4a <__sflush_r+0x42>
 800ad3e:	6863      	ldr	r3, [r4, #4]
 800ad40:	1ac0      	subs	r0, r0, r3
 800ad42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad44:	b10b      	cbz	r3, 800ad4a <__sflush_r+0x42>
 800ad46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad48:	1ac0      	subs	r0, r0, r3
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad50:	4628      	mov	r0, r5
 800ad52:	6a21      	ldr	r1, [r4, #32]
 800ad54:	47b0      	blx	r6
 800ad56:	1c43      	adds	r3, r0, #1
 800ad58:	89a3      	ldrh	r3, [r4, #12]
 800ad5a:	d106      	bne.n	800ad6a <__sflush_r+0x62>
 800ad5c:	6829      	ldr	r1, [r5, #0]
 800ad5e:	291d      	cmp	r1, #29
 800ad60:	d82c      	bhi.n	800adbc <__sflush_r+0xb4>
 800ad62:	4a29      	ldr	r2, [pc, #164]	; (800ae08 <__sflush_r+0x100>)
 800ad64:	40ca      	lsrs	r2, r1
 800ad66:	07d6      	lsls	r6, r2, #31
 800ad68:	d528      	bpl.n	800adbc <__sflush_r+0xb4>
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	6062      	str	r2, [r4, #4]
 800ad6e:	6922      	ldr	r2, [r4, #16]
 800ad70:	04d9      	lsls	r1, r3, #19
 800ad72:	6022      	str	r2, [r4, #0]
 800ad74:	d504      	bpl.n	800ad80 <__sflush_r+0x78>
 800ad76:	1c42      	adds	r2, r0, #1
 800ad78:	d101      	bne.n	800ad7e <__sflush_r+0x76>
 800ad7a:	682b      	ldr	r3, [r5, #0]
 800ad7c:	b903      	cbnz	r3, 800ad80 <__sflush_r+0x78>
 800ad7e:	6560      	str	r0, [r4, #84]	; 0x54
 800ad80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad82:	602f      	str	r7, [r5, #0]
 800ad84:	2900      	cmp	r1, #0
 800ad86:	d0cb      	beq.n	800ad20 <__sflush_r+0x18>
 800ad88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad8c:	4299      	cmp	r1, r3
 800ad8e:	d002      	beq.n	800ad96 <__sflush_r+0x8e>
 800ad90:	4628      	mov	r0, r5
 800ad92:	f7ff fb29 	bl	800a3e8 <_free_r>
 800ad96:	2000      	movs	r0, #0
 800ad98:	6360      	str	r0, [r4, #52]	; 0x34
 800ad9a:	e7c2      	b.n	800ad22 <__sflush_r+0x1a>
 800ad9c:	6a21      	ldr	r1, [r4, #32]
 800ad9e:	2301      	movs	r3, #1
 800ada0:	4628      	mov	r0, r5
 800ada2:	47b0      	blx	r6
 800ada4:	1c41      	adds	r1, r0, #1
 800ada6:	d1c7      	bne.n	800ad38 <__sflush_r+0x30>
 800ada8:	682b      	ldr	r3, [r5, #0]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d0c4      	beq.n	800ad38 <__sflush_r+0x30>
 800adae:	2b1d      	cmp	r3, #29
 800adb0:	d001      	beq.n	800adb6 <__sflush_r+0xae>
 800adb2:	2b16      	cmp	r3, #22
 800adb4:	d101      	bne.n	800adba <__sflush_r+0xb2>
 800adb6:	602f      	str	r7, [r5, #0]
 800adb8:	e7b2      	b.n	800ad20 <__sflush_r+0x18>
 800adba:	89a3      	ldrh	r3, [r4, #12]
 800adbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adc0:	81a3      	strh	r3, [r4, #12]
 800adc2:	e7ae      	b.n	800ad22 <__sflush_r+0x1a>
 800adc4:	690f      	ldr	r7, [r1, #16]
 800adc6:	2f00      	cmp	r7, #0
 800adc8:	d0aa      	beq.n	800ad20 <__sflush_r+0x18>
 800adca:	0793      	lsls	r3, r2, #30
 800adcc:	bf18      	it	ne
 800adce:	2300      	movne	r3, #0
 800add0:	680e      	ldr	r6, [r1, #0]
 800add2:	bf08      	it	eq
 800add4:	694b      	ldreq	r3, [r1, #20]
 800add6:	1bf6      	subs	r6, r6, r7
 800add8:	600f      	str	r7, [r1, #0]
 800adda:	608b      	str	r3, [r1, #8]
 800addc:	2e00      	cmp	r6, #0
 800adde:	dd9f      	ble.n	800ad20 <__sflush_r+0x18>
 800ade0:	4633      	mov	r3, r6
 800ade2:	463a      	mov	r2, r7
 800ade4:	4628      	mov	r0, r5
 800ade6:	6a21      	ldr	r1, [r4, #32]
 800ade8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800adec:	47e0      	blx	ip
 800adee:	2800      	cmp	r0, #0
 800adf0:	dc06      	bgt.n	800ae00 <__sflush_r+0xf8>
 800adf2:	89a3      	ldrh	r3, [r4, #12]
 800adf4:	f04f 30ff 	mov.w	r0, #4294967295
 800adf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adfc:	81a3      	strh	r3, [r4, #12]
 800adfe:	e790      	b.n	800ad22 <__sflush_r+0x1a>
 800ae00:	4407      	add	r7, r0
 800ae02:	1a36      	subs	r6, r6, r0
 800ae04:	e7ea      	b.n	800addc <__sflush_r+0xd4>
 800ae06:	bf00      	nop
 800ae08:	20400001 	.word	0x20400001

0800ae0c <_fflush_r>:
 800ae0c:	b538      	push	{r3, r4, r5, lr}
 800ae0e:	690b      	ldr	r3, [r1, #16]
 800ae10:	4605      	mov	r5, r0
 800ae12:	460c      	mov	r4, r1
 800ae14:	b913      	cbnz	r3, 800ae1c <_fflush_r+0x10>
 800ae16:	2500      	movs	r5, #0
 800ae18:	4628      	mov	r0, r5
 800ae1a:	bd38      	pop	{r3, r4, r5, pc}
 800ae1c:	b118      	cbz	r0, 800ae26 <_fflush_r+0x1a>
 800ae1e:	6983      	ldr	r3, [r0, #24]
 800ae20:	b90b      	cbnz	r3, 800ae26 <_fflush_r+0x1a>
 800ae22:	f000 f887 	bl	800af34 <__sinit>
 800ae26:	4b14      	ldr	r3, [pc, #80]	; (800ae78 <_fflush_r+0x6c>)
 800ae28:	429c      	cmp	r4, r3
 800ae2a:	d11b      	bne.n	800ae64 <_fflush_r+0x58>
 800ae2c:	686c      	ldr	r4, [r5, #4]
 800ae2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d0ef      	beq.n	800ae16 <_fflush_r+0xa>
 800ae36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae38:	07d0      	lsls	r0, r2, #31
 800ae3a:	d404      	bmi.n	800ae46 <_fflush_r+0x3a>
 800ae3c:	0599      	lsls	r1, r3, #22
 800ae3e:	d402      	bmi.n	800ae46 <_fflush_r+0x3a>
 800ae40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae42:	f000 f915 	bl	800b070 <__retarget_lock_acquire_recursive>
 800ae46:	4628      	mov	r0, r5
 800ae48:	4621      	mov	r1, r4
 800ae4a:	f7ff ff5d 	bl	800ad08 <__sflush_r>
 800ae4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae50:	4605      	mov	r5, r0
 800ae52:	07da      	lsls	r2, r3, #31
 800ae54:	d4e0      	bmi.n	800ae18 <_fflush_r+0xc>
 800ae56:	89a3      	ldrh	r3, [r4, #12]
 800ae58:	059b      	lsls	r3, r3, #22
 800ae5a:	d4dd      	bmi.n	800ae18 <_fflush_r+0xc>
 800ae5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae5e:	f000 f908 	bl	800b072 <__retarget_lock_release_recursive>
 800ae62:	e7d9      	b.n	800ae18 <_fflush_r+0xc>
 800ae64:	4b05      	ldr	r3, [pc, #20]	; (800ae7c <_fflush_r+0x70>)
 800ae66:	429c      	cmp	r4, r3
 800ae68:	d101      	bne.n	800ae6e <_fflush_r+0x62>
 800ae6a:	68ac      	ldr	r4, [r5, #8]
 800ae6c:	e7df      	b.n	800ae2e <_fflush_r+0x22>
 800ae6e:	4b04      	ldr	r3, [pc, #16]	; (800ae80 <_fflush_r+0x74>)
 800ae70:	429c      	cmp	r4, r3
 800ae72:	bf08      	it	eq
 800ae74:	68ec      	ldreq	r4, [r5, #12]
 800ae76:	e7da      	b.n	800ae2e <_fflush_r+0x22>
 800ae78:	0800b9d8 	.word	0x0800b9d8
 800ae7c:	0800b9f8 	.word	0x0800b9f8
 800ae80:	0800b9b8 	.word	0x0800b9b8

0800ae84 <std>:
 800ae84:	2300      	movs	r3, #0
 800ae86:	b510      	push	{r4, lr}
 800ae88:	4604      	mov	r4, r0
 800ae8a:	e9c0 3300 	strd	r3, r3, [r0]
 800ae8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae92:	6083      	str	r3, [r0, #8]
 800ae94:	8181      	strh	r1, [r0, #12]
 800ae96:	6643      	str	r3, [r0, #100]	; 0x64
 800ae98:	81c2      	strh	r2, [r0, #14]
 800ae9a:	6183      	str	r3, [r0, #24]
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	2208      	movs	r2, #8
 800aea0:	305c      	adds	r0, #92	; 0x5c
 800aea2:	f7fc f88f 	bl	8006fc4 <memset>
 800aea6:	4b05      	ldr	r3, [pc, #20]	; (800aebc <std+0x38>)
 800aea8:	6224      	str	r4, [r4, #32]
 800aeaa:	6263      	str	r3, [r4, #36]	; 0x24
 800aeac:	4b04      	ldr	r3, [pc, #16]	; (800aec0 <std+0x3c>)
 800aeae:	62a3      	str	r3, [r4, #40]	; 0x28
 800aeb0:	4b04      	ldr	r3, [pc, #16]	; (800aec4 <std+0x40>)
 800aeb2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aeb4:	4b04      	ldr	r3, [pc, #16]	; (800aec8 <std+0x44>)
 800aeb6:	6323      	str	r3, [r4, #48]	; 0x30
 800aeb8:	bd10      	pop	{r4, pc}
 800aeba:	bf00      	nop
 800aebc:	0800b275 	.word	0x0800b275
 800aec0:	0800b297 	.word	0x0800b297
 800aec4:	0800b2cf 	.word	0x0800b2cf
 800aec8:	0800b2f3 	.word	0x0800b2f3

0800aecc <_cleanup_r>:
 800aecc:	4901      	ldr	r1, [pc, #4]	; (800aed4 <_cleanup_r+0x8>)
 800aece:	f000 b8af 	b.w	800b030 <_fwalk_reent>
 800aed2:	bf00      	nop
 800aed4:	0800ae0d 	.word	0x0800ae0d

0800aed8 <__sfmoreglue>:
 800aed8:	2268      	movs	r2, #104	; 0x68
 800aeda:	b570      	push	{r4, r5, r6, lr}
 800aedc:	1e4d      	subs	r5, r1, #1
 800aede:	4355      	muls	r5, r2
 800aee0:	460e      	mov	r6, r1
 800aee2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aee6:	f7ff fae7 	bl	800a4b8 <_malloc_r>
 800aeea:	4604      	mov	r4, r0
 800aeec:	b140      	cbz	r0, 800af00 <__sfmoreglue+0x28>
 800aeee:	2100      	movs	r1, #0
 800aef0:	e9c0 1600 	strd	r1, r6, [r0]
 800aef4:	300c      	adds	r0, #12
 800aef6:	60a0      	str	r0, [r4, #8]
 800aef8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aefc:	f7fc f862 	bl	8006fc4 <memset>
 800af00:	4620      	mov	r0, r4
 800af02:	bd70      	pop	{r4, r5, r6, pc}

0800af04 <__sfp_lock_acquire>:
 800af04:	4801      	ldr	r0, [pc, #4]	; (800af0c <__sfp_lock_acquire+0x8>)
 800af06:	f000 b8b3 	b.w	800b070 <__retarget_lock_acquire_recursive>
 800af0a:	bf00      	nop
 800af0c:	20000531 	.word	0x20000531

0800af10 <__sfp_lock_release>:
 800af10:	4801      	ldr	r0, [pc, #4]	; (800af18 <__sfp_lock_release+0x8>)
 800af12:	f000 b8ae 	b.w	800b072 <__retarget_lock_release_recursive>
 800af16:	bf00      	nop
 800af18:	20000531 	.word	0x20000531

0800af1c <__sinit_lock_acquire>:
 800af1c:	4801      	ldr	r0, [pc, #4]	; (800af24 <__sinit_lock_acquire+0x8>)
 800af1e:	f000 b8a7 	b.w	800b070 <__retarget_lock_acquire_recursive>
 800af22:	bf00      	nop
 800af24:	20000532 	.word	0x20000532

0800af28 <__sinit_lock_release>:
 800af28:	4801      	ldr	r0, [pc, #4]	; (800af30 <__sinit_lock_release+0x8>)
 800af2a:	f000 b8a2 	b.w	800b072 <__retarget_lock_release_recursive>
 800af2e:	bf00      	nop
 800af30:	20000532 	.word	0x20000532

0800af34 <__sinit>:
 800af34:	b510      	push	{r4, lr}
 800af36:	4604      	mov	r4, r0
 800af38:	f7ff fff0 	bl	800af1c <__sinit_lock_acquire>
 800af3c:	69a3      	ldr	r3, [r4, #24]
 800af3e:	b11b      	cbz	r3, 800af48 <__sinit+0x14>
 800af40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af44:	f7ff bff0 	b.w	800af28 <__sinit_lock_release>
 800af48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800af4c:	6523      	str	r3, [r4, #80]	; 0x50
 800af4e:	4b13      	ldr	r3, [pc, #76]	; (800af9c <__sinit+0x68>)
 800af50:	4a13      	ldr	r2, [pc, #76]	; (800afa0 <__sinit+0x6c>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	62a2      	str	r2, [r4, #40]	; 0x28
 800af56:	42a3      	cmp	r3, r4
 800af58:	bf08      	it	eq
 800af5a:	2301      	moveq	r3, #1
 800af5c:	4620      	mov	r0, r4
 800af5e:	bf08      	it	eq
 800af60:	61a3      	streq	r3, [r4, #24]
 800af62:	f000 f81f 	bl	800afa4 <__sfp>
 800af66:	6060      	str	r0, [r4, #4]
 800af68:	4620      	mov	r0, r4
 800af6a:	f000 f81b 	bl	800afa4 <__sfp>
 800af6e:	60a0      	str	r0, [r4, #8]
 800af70:	4620      	mov	r0, r4
 800af72:	f000 f817 	bl	800afa4 <__sfp>
 800af76:	2200      	movs	r2, #0
 800af78:	2104      	movs	r1, #4
 800af7a:	60e0      	str	r0, [r4, #12]
 800af7c:	6860      	ldr	r0, [r4, #4]
 800af7e:	f7ff ff81 	bl	800ae84 <std>
 800af82:	2201      	movs	r2, #1
 800af84:	2109      	movs	r1, #9
 800af86:	68a0      	ldr	r0, [r4, #8]
 800af88:	f7ff ff7c 	bl	800ae84 <std>
 800af8c:	2202      	movs	r2, #2
 800af8e:	2112      	movs	r1, #18
 800af90:	68e0      	ldr	r0, [r4, #12]
 800af92:	f7ff ff77 	bl	800ae84 <std>
 800af96:	2301      	movs	r3, #1
 800af98:	61a3      	str	r3, [r4, #24]
 800af9a:	e7d1      	b.n	800af40 <__sinit+0xc>
 800af9c:	0800b51c 	.word	0x0800b51c
 800afa0:	0800aecd 	.word	0x0800aecd

0800afa4 <__sfp>:
 800afa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa6:	4607      	mov	r7, r0
 800afa8:	f7ff ffac 	bl	800af04 <__sfp_lock_acquire>
 800afac:	4b1e      	ldr	r3, [pc, #120]	; (800b028 <__sfp+0x84>)
 800afae:	681e      	ldr	r6, [r3, #0]
 800afb0:	69b3      	ldr	r3, [r6, #24]
 800afb2:	b913      	cbnz	r3, 800afba <__sfp+0x16>
 800afb4:	4630      	mov	r0, r6
 800afb6:	f7ff ffbd 	bl	800af34 <__sinit>
 800afba:	3648      	adds	r6, #72	; 0x48
 800afbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800afc0:	3b01      	subs	r3, #1
 800afc2:	d503      	bpl.n	800afcc <__sfp+0x28>
 800afc4:	6833      	ldr	r3, [r6, #0]
 800afc6:	b30b      	cbz	r3, 800b00c <__sfp+0x68>
 800afc8:	6836      	ldr	r6, [r6, #0]
 800afca:	e7f7      	b.n	800afbc <__sfp+0x18>
 800afcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800afd0:	b9d5      	cbnz	r5, 800b008 <__sfp+0x64>
 800afd2:	4b16      	ldr	r3, [pc, #88]	; (800b02c <__sfp+0x88>)
 800afd4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800afd8:	60e3      	str	r3, [r4, #12]
 800afda:	6665      	str	r5, [r4, #100]	; 0x64
 800afdc:	f000 f847 	bl	800b06e <__retarget_lock_init_recursive>
 800afe0:	f7ff ff96 	bl	800af10 <__sfp_lock_release>
 800afe4:	2208      	movs	r2, #8
 800afe6:	4629      	mov	r1, r5
 800afe8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800afec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aff0:	6025      	str	r5, [r4, #0]
 800aff2:	61a5      	str	r5, [r4, #24]
 800aff4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aff8:	f7fb ffe4 	bl	8006fc4 <memset>
 800affc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b000:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b004:	4620      	mov	r0, r4
 800b006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b008:	3468      	adds	r4, #104	; 0x68
 800b00a:	e7d9      	b.n	800afc0 <__sfp+0x1c>
 800b00c:	2104      	movs	r1, #4
 800b00e:	4638      	mov	r0, r7
 800b010:	f7ff ff62 	bl	800aed8 <__sfmoreglue>
 800b014:	4604      	mov	r4, r0
 800b016:	6030      	str	r0, [r6, #0]
 800b018:	2800      	cmp	r0, #0
 800b01a:	d1d5      	bne.n	800afc8 <__sfp+0x24>
 800b01c:	f7ff ff78 	bl	800af10 <__sfp_lock_release>
 800b020:	230c      	movs	r3, #12
 800b022:	603b      	str	r3, [r7, #0]
 800b024:	e7ee      	b.n	800b004 <__sfp+0x60>
 800b026:	bf00      	nop
 800b028:	0800b51c 	.word	0x0800b51c
 800b02c:	ffff0001 	.word	0xffff0001

0800b030 <_fwalk_reent>:
 800b030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b034:	4606      	mov	r6, r0
 800b036:	4688      	mov	r8, r1
 800b038:	2700      	movs	r7, #0
 800b03a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b03e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b042:	f1b9 0901 	subs.w	r9, r9, #1
 800b046:	d505      	bpl.n	800b054 <_fwalk_reent+0x24>
 800b048:	6824      	ldr	r4, [r4, #0]
 800b04a:	2c00      	cmp	r4, #0
 800b04c:	d1f7      	bne.n	800b03e <_fwalk_reent+0xe>
 800b04e:	4638      	mov	r0, r7
 800b050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b054:	89ab      	ldrh	r3, [r5, #12]
 800b056:	2b01      	cmp	r3, #1
 800b058:	d907      	bls.n	800b06a <_fwalk_reent+0x3a>
 800b05a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b05e:	3301      	adds	r3, #1
 800b060:	d003      	beq.n	800b06a <_fwalk_reent+0x3a>
 800b062:	4629      	mov	r1, r5
 800b064:	4630      	mov	r0, r6
 800b066:	47c0      	blx	r8
 800b068:	4307      	orrs	r7, r0
 800b06a:	3568      	adds	r5, #104	; 0x68
 800b06c:	e7e9      	b.n	800b042 <_fwalk_reent+0x12>

0800b06e <__retarget_lock_init_recursive>:
 800b06e:	4770      	bx	lr

0800b070 <__retarget_lock_acquire_recursive>:
 800b070:	4770      	bx	lr

0800b072 <__retarget_lock_release_recursive>:
 800b072:	4770      	bx	lr

0800b074 <__swhatbuf_r>:
 800b074:	b570      	push	{r4, r5, r6, lr}
 800b076:	460e      	mov	r6, r1
 800b078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b07c:	4614      	mov	r4, r2
 800b07e:	2900      	cmp	r1, #0
 800b080:	461d      	mov	r5, r3
 800b082:	b096      	sub	sp, #88	; 0x58
 800b084:	da08      	bge.n	800b098 <__swhatbuf_r+0x24>
 800b086:	2200      	movs	r2, #0
 800b088:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b08c:	602a      	str	r2, [r5, #0]
 800b08e:	061a      	lsls	r2, r3, #24
 800b090:	d410      	bmi.n	800b0b4 <__swhatbuf_r+0x40>
 800b092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b096:	e00e      	b.n	800b0b6 <__swhatbuf_r+0x42>
 800b098:	466a      	mov	r2, sp
 800b09a:	f000 f951 	bl	800b340 <_fstat_r>
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	dbf1      	blt.n	800b086 <__swhatbuf_r+0x12>
 800b0a2:	9a01      	ldr	r2, [sp, #4]
 800b0a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b0a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b0ac:	425a      	negs	r2, r3
 800b0ae:	415a      	adcs	r2, r3
 800b0b0:	602a      	str	r2, [r5, #0]
 800b0b2:	e7ee      	b.n	800b092 <__swhatbuf_r+0x1e>
 800b0b4:	2340      	movs	r3, #64	; 0x40
 800b0b6:	2000      	movs	r0, #0
 800b0b8:	6023      	str	r3, [r4, #0]
 800b0ba:	b016      	add	sp, #88	; 0x58
 800b0bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b0c0 <__smakebuf_r>:
 800b0c0:	898b      	ldrh	r3, [r1, #12]
 800b0c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b0c4:	079d      	lsls	r5, r3, #30
 800b0c6:	4606      	mov	r6, r0
 800b0c8:	460c      	mov	r4, r1
 800b0ca:	d507      	bpl.n	800b0dc <__smakebuf_r+0x1c>
 800b0cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b0d0:	6023      	str	r3, [r4, #0]
 800b0d2:	6123      	str	r3, [r4, #16]
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	6163      	str	r3, [r4, #20]
 800b0d8:	b002      	add	sp, #8
 800b0da:	bd70      	pop	{r4, r5, r6, pc}
 800b0dc:	466a      	mov	r2, sp
 800b0de:	ab01      	add	r3, sp, #4
 800b0e0:	f7ff ffc8 	bl	800b074 <__swhatbuf_r>
 800b0e4:	9900      	ldr	r1, [sp, #0]
 800b0e6:	4605      	mov	r5, r0
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	f7ff f9e5 	bl	800a4b8 <_malloc_r>
 800b0ee:	b948      	cbnz	r0, 800b104 <__smakebuf_r+0x44>
 800b0f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0f4:	059a      	lsls	r2, r3, #22
 800b0f6:	d4ef      	bmi.n	800b0d8 <__smakebuf_r+0x18>
 800b0f8:	f023 0303 	bic.w	r3, r3, #3
 800b0fc:	f043 0302 	orr.w	r3, r3, #2
 800b100:	81a3      	strh	r3, [r4, #12]
 800b102:	e7e3      	b.n	800b0cc <__smakebuf_r+0xc>
 800b104:	4b0d      	ldr	r3, [pc, #52]	; (800b13c <__smakebuf_r+0x7c>)
 800b106:	62b3      	str	r3, [r6, #40]	; 0x28
 800b108:	89a3      	ldrh	r3, [r4, #12]
 800b10a:	6020      	str	r0, [r4, #0]
 800b10c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b110:	81a3      	strh	r3, [r4, #12]
 800b112:	9b00      	ldr	r3, [sp, #0]
 800b114:	6120      	str	r0, [r4, #16]
 800b116:	6163      	str	r3, [r4, #20]
 800b118:	9b01      	ldr	r3, [sp, #4]
 800b11a:	b15b      	cbz	r3, 800b134 <__smakebuf_r+0x74>
 800b11c:	4630      	mov	r0, r6
 800b11e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b122:	f000 f91f 	bl	800b364 <_isatty_r>
 800b126:	b128      	cbz	r0, 800b134 <__smakebuf_r+0x74>
 800b128:	89a3      	ldrh	r3, [r4, #12]
 800b12a:	f023 0303 	bic.w	r3, r3, #3
 800b12e:	f043 0301 	orr.w	r3, r3, #1
 800b132:	81a3      	strh	r3, [r4, #12]
 800b134:	89a0      	ldrh	r0, [r4, #12]
 800b136:	4305      	orrs	r5, r0
 800b138:	81a5      	strh	r5, [r4, #12]
 800b13a:	e7cd      	b.n	800b0d8 <__smakebuf_r+0x18>
 800b13c:	0800aecd 	.word	0x0800aecd

0800b140 <memmove>:
 800b140:	4288      	cmp	r0, r1
 800b142:	b510      	push	{r4, lr}
 800b144:	eb01 0402 	add.w	r4, r1, r2
 800b148:	d902      	bls.n	800b150 <memmove+0x10>
 800b14a:	4284      	cmp	r4, r0
 800b14c:	4623      	mov	r3, r4
 800b14e:	d807      	bhi.n	800b160 <memmove+0x20>
 800b150:	1e43      	subs	r3, r0, #1
 800b152:	42a1      	cmp	r1, r4
 800b154:	d008      	beq.n	800b168 <memmove+0x28>
 800b156:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b15a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b15e:	e7f8      	b.n	800b152 <memmove+0x12>
 800b160:	4601      	mov	r1, r0
 800b162:	4402      	add	r2, r0
 800b164:	428a      	cmp	r2, r1
 800b166:	d100      	bne.n	800b16a <memmove+0x2a>
 800b168:	bd10      	pop	{r4, pc}
 800b16a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b16e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b172:	e7f7      	b.n	800b164 <memmove+0x24>

0800b174 <__malloc_lock>:
 800b174:	4801      	ldr	r0, [pc, #4]	; (800b17c <__malloc_lock+0x8>)
 800b176:	f7ff bf7b 	b.w	800b070 <__retarget_lock_acquire_recursive>
 800b17a:	bf00      	nop
 800b17c:	20000530 	.word	0x20000530

0800b180 <__malloc_unlock>:
 800b180:	4801      	ldr	r0, [pc, #4]	; (800b188 <__malloc_unlock+0x8>)
 800b182:	f7ff bf76 	b.w	800b072 <__retarget_lock_release_recursive>
 800b186:	bf00      	nop
 800b188:	20000530 	.word	0x20000530

0800b18c <_realloc_r>:
 800b18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b190:	4680      	mov	r8, r0
 800b192:	4614      	mov	r4, r2
 800b194:	460e      	mov	r6, r1
 800b196:	b921      	cbnz	r1, 800b1a2 <_realloc_r+0x16>
 800b198:	4611      	mov	r1, r2
 800b19a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b19e:	f7ff b98b 	b.w	800a4b8 <_malloc_r>
 800b1a2:	b92a      	cbnz	r2, 800b1b0 <_realloc_r+0x24>
 800b1a4:	f7ff f920 	bl	800a3e8 <_free_r>
 800b1a8:	4625      	mov	r5, r4
 800b1aa:	4628      	mov	r0, r5
 800b1ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1b0:	f000 f8fa 	bl	800b3a8 <_malloc_usable_size_r>
 800b1b4:	4284      	cmp	r4, r0
 800b1b6:	4607      	mov	r7, r0
 800b1b8:	d802      	bhi.n	800b1c0 <_realloc_r+0x34>
 800b1ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b1be:	d812      	bhi.n	800b1e6 <_realloc_r+0x5a>
 800b1c0:	4621      	mov	r1, r4
 800b1c2:	4640      	mov	r0, r8
 800b1c4:	f7ff f978 	bl	800a4b8 <_malloc_r>
 800b1c8:	4605      	mov	r5, r0
 800b1ca:	2800      	cmp	r0, #0
 800b1cc:	d0ed      	beq.n	800b1aa <_realloc_r+0x1e>
 800b1ce:	42bc      	cmp	r4, r7
 800b1d0:	4622      	mov	r2, r4
 800b1d2:	4631      	mov	r1, r6
 800b1d4:	bf28      	it	cs
 800b1d6:	463a      	movcs	r2, r7
 800b1d8:	f7fe fc2c 	bl	8009a34 <memcpy>
 800b1dc:	4631      	mov	r1, r6
 800b1de:	4640      	mov	r0, r8
 800b1e0:	f7ff f902 	bl	800a3e8 <_free_r>
 800b1e4:	e7e1      	b.n	800b1aa <_realloc_r+0x1e>
 800b1e6:	4635      	mov	r5, r6
 800b1e8:	e7df      	b.n	800b1aa <_realloc_r+0x1e>

0800b1ea <_raise_r>:
 800b1ea:	291f      	cmp	r1, #31
 800b1ec:	b538      	push	{r3, r4, r5, lr}
 800b1ee:	4604      	mov	r4, r0
 800b1f0:	460d      	mov	r5, r1
 800b1f2:	d904      	bls.n	800b1fe <_raise_r+0x14>
 800b1f4:	2316      	movs	r3, #22
 800b1f6:	6003      	str	r3, [r0, #0]
 800b1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1fc:	bd38      	pop	{r3, r4, r5, pc}
 800b1fe:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b200:	b112      	cbz	r2, 800b208 <_raise_r+0x1e>
 800b202:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b206:	b94b      	cbnz	r3, 800b21c <_raise_r+0x32>
 800b208:	4620      	mov	r0, r4
 800b20a:	f000 f831 	bl	800b270 <_getpid_r>
 800b20e:	462a      	mov	r2, r5
 800b210:	4601      	mov	r1, r0
 800b212:	4620      	mov	r0, r4
 800b214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b218:	f000 b818 	b.w	800b24c <_kill_r>
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d00a      	beq.n	800b236 <_raise_r+0x4c>
 800b220:	1c59      	adds	r1, r3, #1
 800b222:	d103      	bne.n	800b22c <_raise_r+0x42>
 800b224:	2316      	movs	r3, #22
 800b226:	6003      	str	r3, [r0, #0]
 800b228:	2001      	movs	r0, #1
 800b22a:	e7e7      	b.n	800b1fc <_raise_r+0x12>
 800b22c:	2400      	movs	r4, #0
 800b22e:	4628      	mov	r0, r5
 800b230:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b234:	4798      	blx	r3
 800b236:	2000      	movs	r0, #0
 800b238:	e7e0      	b.n	800b1fc <_raise_r+0x12>
	...

0800b23c <raise>:
 800b23c:	4b02      	ldr	r3, [pc, #8]	; (800b248 <raise+0xc>)
 800b23e:	4601      	mov	r1, r0
 800b240:	6818      	ldr	r0, [r3, #0]
 800b242:	f7ff bfd2 	b.w	800b1ea <_raise_r>
 800b246:	bf00      	nop
 800b248:	20000010 	.word	0x20000010

0800b24c <_kill_r>:
 800b24c:	b538      	push	{r3, r4, r5, lr}
 800b24e:	2300      	movs	r3, #0
 800b250:	4d06      	ldr	r5, [pc, #24]	; (800b26c <_kill_r+0x20>)
 800b252:	4604      	mov	r4, r0
 800b254:	4608      	mov	r0, r1
 800b256:	4611      	mov	r1, r2
 800b258:	602b      	str	r3, [r5, #0]
 800b25a:	f7f7 fd50 	bl	8002cfe <_kill>
 800b25e:	1c43      	adds	r3, r0, #1
 800b260:	d102      	bne.n	800b268 <_kill_r+0x1c>
 800b262:	682b      	ldr	r3, [r5, #0]
 800b264:	b103      	cbz	r3, 800b268 <_kill_r+0x1c>
 800b266:	6023      	str	r3, [r4, #0]
 800b268:	bd38      	pop	{r3, r4, r5, pc}
 800b26a:	bf00      	nop
 800b26c:	20000534 	.word	0x20000534

0800b270 <_getpid_r>:
 800b270:	f7f7 bd3e 	b.w	8002cf0 <_getpid>

0800b274 <__sread>:
 800b274:	b510      	push	{r4, lr}
 800b276:	460c      	mov	r4, r1
 800b278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b27c:	f000 f89c 	bl	800b3b8 <_read_r>
 800b280:	2800      	cmp	r0, #0
 800b282:	bfab      	itete	ge
 800b284:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b286:	89a3      	ldrhlt	r3, [r4, #12]
 800b288:	181b      	addge	r3, r3, r0
 800b28a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b28e:	bfac      	ite	ge
 800b290:	6563      	strge	r3, [r4, #84]	; 0x54
 800b292:	81a3      	strhlt	r3, [r4, #12]
 800b294:	bd10      	pop	{r4, pc}

0800b296 <__swrite>:
 800b296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b29a:	461f      	mov	r7, r3
 800b29c:	898b      	ldrh	r3, [r1, #12]
 800b29e:	4605      	mov	r5, r0
 800b2a0:	05db      	lsls	r3, r3, #23
 800b2a2:	460c      	mov	r4, r1
 800b2a4:	4616      	mov	r6, r2
 800b2a6:	d505      	bpl.n	800b2b4 <__swrite+0x1e>
 800b2a8:	2302      	movs	r3, #2
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2b0:	f000 f868 	bl	800b384 <_lseek_r>
 800b2b4:	89a3      	ldrh	r3, [r4, #12]
 800b2b6:	4632      	mov	r2, r6
 800b2b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2bc:	81a3      	strh	r3, [r4, #12]
 800b2be:	4628      	mov	r0, r5
 800b2c0:	463b      	mov	r3, r7
 800b2c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2ca:	f000 b817 	b.w	800b2fc <_write_r>

0800b2ce <__sseek>:
 800b2ce:	b510      	push	{r4, lr}
 800b2d0:	460c      	mov	r4, r1
 800b2d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2d6:	f000 f855 	bl	800b384 <_lseek_r>
 800b2da:	1c43      	adds	r3, r0, #1
 800b2dc:	89a3      	ldrh	r3, [r4, #12]
 800b2de:	bf15      	itete	ne
 800b2e0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b2e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b2e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b2ea:	81a3      	strheq	r3, [r4, #12]
 800b2ec:	bf18      	it	ne
 800b2ee:	81a3      	strhne	r3, [r4, #12]
 800b2f0:	bd10      	pop	{r4, pc}

0800b2f2 <__sclose>:
 800b2f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2f6:	f000 b813 	b.w	800b320 <_close_r>
	...

0800b2fc <_write_r>:
 800b2fc:	b538      	push	{r3, r4, r5, lr}
 800b2fe:	4604      	mov	r4, r0
 800b300:	4608      	mov	r0, r1
 800b302:	4611      	mov	r1, r2
 800b304:	2200      	movs	r2, #0
 800b306:	4d05      	ldr	r5, [pc, #20]	; (800b31c <_write_r+0x20>)
 800b308:	602a      	str	r2, [r5, #0]
 800b30a:	461a      	mov	r2, r3
 800b30c:	f7f7 fd2e 	bl	8002d6c <_write>
 800b310:	1c43      	adds	r3, r0, #1
 800b312:	d102      	bne.n	800b31a <_write_r+0x1e>
 800b314:	682b      	ldr	r3, [r5, #0]
 800b316:	b103      	cbz	r3, 800b31a <_write_r+0x1e>
 800b318:	6023      	str	r3, [r4, #0]
 800b31a:	bd38      	pop	{r3, r4, r5, pc}
 800b31c:	20000534 	.word	0x20000534

0800b320 <_close_r>:
 800b320:	b538      	push	{r3, r4, r5, lr}
 800b322:	2300      	movs	r3, #0
 800b324:	4d05      	ldr	r5, [pc, #20]	; (800b33c <_close_r+0x1c>)
 800b326:	4604      	mov	r4, r0
 800b328:	4608      	mov	r0, r1
 800b32a:	602b      	str	r3, [r5, #0]
 800b32c:	f7f7 fd3a 	bl	8002da4 <_close>
 800b330:	1c43      	adds	r3, r0, #1
 800b332:	d102      	bne.n	800b33a <_close_r+0x1a>
 800b334:	682b      	ldr	r3, [r5, #0]
 800b336:	b103      	cbz	r3, 800b33a <_close_r+0x1a>
 800b338:	6023      	str	r3, [r4, #0]
 800b33a:	bd38      	pop	{r3, r4, r5, pc}
 800b33c:	20000534 	.word	0x20000534

0800b340 <_fstat_r>:
 800b340:	b538      	push	{r3, r4, r5, lr}
 800b342:	2300      	movs	r3, #0
 800b344:	4d06      	ldr	r5, [pc, #24]	; (800b360 <_fstat_r+0x20>)
 800b346:	4604      	mov	r4, r0
 800b348:	4608      	mov	r0, r1
 800b34a:	4611      	mov	r1, r2
 800b34c:	602b      	str	r3, [r5, #0]
 800b34e:	f7f7 fd34 	bl	8002dba <_fstat>
 800b352:	1c43      	adds	r3, r0, #1
 800b354:	d102      	bne.n	800b35c <_fstat_r+0x1c>
 800b356:	682b      	ldr	r3, [r5, #0]
 800b358:	b103      	cbz	r3, 800b35c <_fstat_r+0x1c>
 800b35a:	6023      	str	r3, [r4, #0]
 800b35c:	bd38      	pop	{r3, r4, r5, pc}
 800b35e:	bf00      	nop
 800b360:	20000534 	.word	0x20000534

0800b364 <_isatty_r>:
 800b364:	b538      	push	{r3, r4, r5, lr}
 800b366:	2300      	movs	r3, #0
 800b368:	4d05      	ldr	r5, [pc, #20]	; (800b380 <_isatty_r+0x1c>)
 800b36a:	4604      	mov	r4, r0
 800b36c:	4608      	mov	r0, r1
 800b36e:	602b      	str	r3, [r5, #0]
 800b370:	f7f7 fd32 	bl	8002dd8 <_isatty>
 800b374:	1c43      	adds	r3, r0, #1
 800b376:	d102      	bne.n	800b37e <_isatty_r+0x1a>
 800b378:	682b      	ldr	r3, [r5, #0]
 800b37a:	b103      	cbz	r3, 800b37e <_isatty_r+0x1a>
 800b37c:	6023      	str	r3, [r4, #0]
 800b37e:	bd38      	pop	{r3, r4, r5, pc}
 800b380:	20000534 	.word	0x20000534

0800b384 <_lseek_r>:
 800b384:	b538      	push	{r3, r4, r5, lr}
 800b386:	4604      	mov	r4, r0
 800b388:	4608      	mov	r0, r1
 800b38a:	4611      	mov	r1, r2
 800b38c:	2200      	movs	r2, #0
 800b38e:	4d05      	ldr	r5, [pc, #20]	; (800b3a4 <_lseek_r+0x20>)
 800b390:	602a      	str	r2, [r5, #0]
 800b392:	461a      	mov	r2, r3
 800b394:	f7f7 fd2a 	bl	8002dec <_lseek>
 800b398:	1c43      	adds	r3, r0, #1
 800b39a:	d102      	bne.n	800b3a2 <_lseek_r+0x1e>
 800b39c:	682b      	ldr	r3, [r5, #0]
 800b39e:	b103      	cbz	r3, 800b3a2 <_lseek_r+0x1e>
 800b3a0:	6023      	str	r3, [r4, #0]
 800b3a2:	bd38      	pop	{r3, r4, r5, pc}
 800b3a4:	20000534 	.word	0x20000534

0800b3a8 <_malloc_usable_size_r>:
 800b3a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3ac:	1f18      	subs	r0, r3, #4
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	bfbc      	itt	lt
 800b3b2:	580b      	ldrlt	r3, [r1, r0]
 800b3b4:	18c0      	addlt	r0, r0, r3
 800b3b6:	4770      	bx	lr

0800b3b8 <_read_r>:
 800b3b8:	b538      	push	{r3, r4, r5, lr}
 800b3ba:	4604      	mov	r4, r0
 800b3bc:	4608      	mov	r0, r1
 800b3be:	4611      	mov	r1, r2
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	4d05      	ldr	r5, [pc, #20]	; (800b3d8 <_read_r+0x20>)
 800b3c4:	602a      	str	r2, [r5, #0]
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	f7f7 fcb3 	bl	8002d32 <_read>
 800b3cc:	1c43      	adds	r3, r0, #1
 800b3ce:	d102      	bne.n	800b3d6 <_read_r+0x1e>
 800b3d0:	682b      	ldr	r3, [r5, #0]
 800b3d2:	b103      	cbz	r3, 800b3d6 <_read_r+0x1e>
 800b3d4:	6023      	str	r3, [r4, #0]
 800b3d6:	bd38      	pop	{r3, r4, r5, pc}
 800b3d8:	20000534 	.word	0x20000534

0800b3dc <_init>:
 800b3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3de:	bf00      	nop
 800b3e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3e2:	bc08      	pop	{r3}
 800b3e4:	469e      	mov	lr, r3
 800b3e6:	4770      	bx	lr

0800b3e8 <_fini>:
 800b3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ea:	bf00      	nop
 800b3ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ee:	bc08      	pop	{r3}
 800b3f0:	469e      	mov	lr, r3
 800b3f2:	4770      	bx	lr
