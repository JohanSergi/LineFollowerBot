/*
 * SimpleParser.c
 *
 *  Created on: Aug 28, 2024
 *      Author: Szymon
 */


#include "main.h"
#include "usart.h"
#include "string.h"
#include "stdio.h"
#include "RingBuffer.h"
#include "stdlib.h"
#include "SimpleParser.h"
#include "Line_Follower.h"
char My_Name[32] = "GRUZIK2.0";

void Parser_TakeLine(RingBuffer_t *Buf, uint8_t *ReceivedData)
{
	uint8_t Tmp;
	uint8_t i = 0;
	do
	{
		RB_Read(Buf, &Tmp);

		if(Tmp == ENDLINE)
		{
			ReceivedData[i] = 0;

		}

		else
		{
			ReceivedData[i] = Tmp;
		}
		i++;

	} while(Tmp != ENDLINE);

}

static void kp_change(LineFollower_t *LF)
{
	char *ParsePointer = strtok(NULL, ",");

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
	{
		LF->Kp = atof(ParsePointer);
	}

}
static void kd_change(LineFollower_t *LF)
{
	char *ParsePointer = strtok(NULL, ",");

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
	{
		LF->Kd = atof(ParsePointer);
	}
}
static void Base_speed_change(LineFollower_t *LF)
{
	char *ParsePointer = strtok(NULL, ",");

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
	{
		LF->Base_speed_R = atof(ParsePointer);
		LF->Base_speed_L = atof(ParsePointer);
	}
}

static void Max_speed_change(LineFollower_t *LF)
{
	char *ParsePointer = strtok(NULL, ",");

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
	{
		LF->Max_speed_R = atof(ParsePointer);
		LF->Max_speed_L = atof(ParsePointer);
	}
}
static void Sharp_bend_speed_right_change(LineFollower_t *LF)
{
	char *ParsePointer = strtok(NULL, ",");

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
	{
	LF->Sharp_bend_speed_right = atof(ParsePointer);
	}
}
static void Sharp_bend_speed_left_change(LineFollower_t *LF)
{
	char *ParsePointer = strtok(NULL, ",");

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
	{
	LF->Sharp_bend_speed_left = atof(ParsePointer);
	}
}
static void Bend_speed_right_change(LineFollower_t *LF)
{
	char *ParsePointer = strtok(NULL, ",");

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
	{
	LF->Bend_speed_right = atof(ParsePointer);
	}
}
static void Bend_speed_left_change(LineFollower_t *LF)
{
	char *ParsePointer = strtok(NULL, ",");

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
	{
	LF->Bend_speed_left = atof(ParsePointer);
	}
}
static void App_Controll(char RxData, LineFollower_t *LineFollower)
{
	/*Stop robot*/
	if(RxData == 'N')
	{
		uint8_t buffer[48];
		/*Stop GRUZIK2.0 and turn off the LED*/
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

		/*Send battery voltage*/
		LineFollower->battery_voltage = (LineFollower->Adc_Value * 8.3)/3831;
		sprintf((char*)buffer, "ADC_Value = %d & %0.2f V \r \n", (int)LineFollower->Adc_Value, LineFollower->battery_voltage);
		HAL_UART_Transmit(&huart1, buffer, strlen((char*)buffer), 100);
	}
	/*Start robot*/
	if (RxData == 'Y')
	{
		/*Proportional to battery percentage boost for motors
		 * to keep roughly same speed as with full battery*/
		int max_battery = 3831; // Max value read on 8,3V battery
		float battery_percentage = 100;
		if(LineFollower->Adc_Value != 0)
		{
			if(LineFollower->Adc_Value > max_battery)
			{
				LineFollower->Adc_Value = max_battery;
			}
			battery_percentage = (LineFollower->Adc_Value * 100) / max_battery;
		}
		else
		{
			return; //Line follower shouldn't be started if it doesn't have a battery
		}
		/*Motor speed*/
		LineFollower->Speed_level = ((100 - battery_percentage + 100) / 100);

		if(LineFollower->Speed_level < 1)
		{
			LineFollower->Speed_level = 1;
		}

		/*Stop LineFollower and turn on the LED*/
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
	}
	/*LOW mode*/
	if(RxData == 'a')
	{
		LineFollower->Base_speed_R = 100;
		LineFollower->Base_speed_L = 100;
		LineFollower->Max_speed_L = 100;
		LineFollower->Max_speed_R = 100;
		LineFollower->Sharp_bend_speed_right =- 50;
		LineFollower->Sharp_bend_speed_left = 50;
		LineFollower->Bend_speed_right = -50;
		LineFollower->Bend_speed_left = 50;
		LineFollower->Kp = 0.015;
		LineFollower->Kd = 0.1;
	}
	/*LOW+ mode*/
	if(RxData == 'd')
	{
		LineFollower->Base_speed_R = 110;
		LineFollower->Base_speed_L = 110;
		LineFollower->Max_speed_L = 110;
		LineFollower->Max_speed_R = 110;
		LineFollower->Sharp_bend_speed_right = -60;
		LineFollower->Sharp_bend_speed_left = 50;
		LineFollower->Bend_speed_right = -60;
		LineFollower->Bend_speed_left = 50;
		LineFollower->Kp = 0.015;
		LineFollower->Kd = 0.1;
	}
	/*Medium mode*/
	if(RxData == 'b')
	{
		LineFollower->Base_speed_R = 120;
		LineFollower->Base_speed_L = 120;
		LineFollower->Max_speed_L = 120;
		LineFollower->Max_speed_R = 120;
		LineFollower->Sharp_bend_speed_right = -70;
		LineFollower->Sharp_bend_speed_left = 85;
		LineFollower->Bend_speed_right = -50;
		LineFollower->Bend_speed_left = 110;
		LineFollower->Kp = 0.015;
		LineFollower->Kd = 0.25;
	}
	/*Medium+ mode*/
	if(RxData == 'e')
	{
		LineFollower->Base_speed_R = 125;
		LineFollower->Base_speed_L = 125;
		LineFollower->Max_speed_L = 125;
		LineFollower->Max_speed_R = 125;
		LineFollower->Sharp_bend_speed_right = -70;
		LineFollower->Sharp_bend_speed_left = 85;
		LineFollower->Bend_speed_right = -50;
		LineFollower->Bend_speed_left = 110;
		LineFollower->Kp = 0.015;
		LineFollower->Kd = 0.25;
	}
	/*HIGH mode*/
	if(RxData == 'c')
	{
		LineFollower->Base_speed_R = 130;
		LineFollower->Base_speed_L = 130;
		LineFollower->Max_speed_L = 130;
		LineFollower->Max_speed_R = 130;
		LineFollower->Sharp_bend_speed_right = -70;
		LineFollower->Sharp_bend_speed_left = 85;
		LineFollower->Bend_speed_right = -50;
		LineFollower->Bend_speed_left = 110;
		LineFollower->Kp = 0.015;
		LineFollower->Kd = 0.4;
	}
	/*HIGH+ mode*/
	if(RxData == 'f')
	{
		LineFollower->Base_speed_R = 135;
		LineFollower->Base_speed_L = 135;
		LineFollower->Max_speed_L = 135;
		LineFollower->Max_speed_R = 135;
		LineFollower->Sharp_bend_speed_right = -70;
		LineFollower->Sharp_bend_speed_left = 85;
		LineFollower->Bend_speed_right = -50;
		LineFollower->Bend_speed_left = 110;
		LineFollower->Kp = 0.015;
		LineFollower->Kd = 0.4;
	}
	/*TRUBO mode*/
	if(RxData == 'i')
	{
		LineFollower->Base_speed_R = 270;
		LineFollower->Base_speed_L = 270;
		LineFollower->Max_speed_L = 150;
		LineFollower->Max_speed_R = 150;
		LineFollower->Sharp_bend_speed_right = -65;
		LineFollower->Sharp_bend_speed_left = 70;
		LineFollower->Bend_speed_right = -76;
		LineFollower->Bend_speed_left = 130;
		LineFollower->Kp = 0.045;
		LineFollower->Kd = 75;
	}
	/*TRUBO+ mode*/
	if(RxData == 'j')
	{
	   LineFollower->Base_speed_R = 295;
	   LineFollower->Base_speed_L = 295;
	   LineFollower->Max_speed_L = 165;
	   LineFollower->Max_speed_R = 165;
	   LineFollower->Sharp_bend_speed_right = -70;
	   LineFollower->Sharp_bend_speed_left = 73;
	   LineFollower->Bend_speed_right = -76;
	   LineFollower->Bend_speed_left = 130;
	   LineFollower->Kp = 0.05;
	   LineFollower->Kd = 80;
	}
	/*ULTRA mode*/
	if(RxData == 'k')
	{
		LineFollower->Base_speed_R = 315;
		LineFollower->Base_speed_L = 315;
		LineFollower->Max_speed_L = 168;
		LineFollower->Max_speed_R = 168;
		LineFollower->Sharp_bend_speed_right = -70;
		LineFollower->Sharp_bend_speed_left = 73;
		LineFollower->Bend_speed_right = -76;
		LineFollower->Bend_speed_left = 128;
		LineFollower->Kp = 0.067;
		LineFollower->Kd = 95;
	 }
	 /*ULTRA+ mode*/
	 if(RxData == 'l')
	 {
		LineFollower->Base_speed_R = 102;
		LineFollower->Base_speed_L = 102;
		LineFollower->Max_speed_L = 155;
		LineFollower->Max_speed_R = 155;
		LineFollower->Sharp_bend_speed_right = -90;
		LineFollower->Sharp_bend_speed_left = 185;
		LineFollower->Bend_speed_right = -50;
		LineFollower->Bend_speed_left = 100;
		LineFollower->Kp = 0.02;
		LineFollower->Kd = 350;
	  }
	  /*EXTREME mode*/
	  if(RxData == 'm')
	  {
		 LineFollower->Base_speed_R = 107;
		 LineFollower->Base_speed_L = 107;
		 LineFollower->Max_speed_L = 159;
		 LineFollower->Max_speed_R = 159;
		 LineFollower->Sharp_bend_speed_right = -90;
		 LineFollower->Sharp_bend_speed_left = 185;
		 LineFollower->Bend_speed_right = -50;
		 LineFollower->Bend_speed_left = 100;
		 LineFollower->Kp = 0.02;
		 LineFollower->Kd = 350;
	  }

 	  /*EXTREME+ mode*/
 	  if(RxData == 'n')
 	  {
 	    LineFollower->Base_speed_R = 116;
 	    LineFollower->Base_speed_L = 116;
 	    LineFollower->Max_speed_L = 167;
 	  	LineFollower->Max_speed_R = 167;
 	 	LineFollower->Sharp_bend_speed_right = -96;
 		LineFollower->Sharp_bend_speed_left = 185;
 		LineFollower->Bend_speed_right = -50;
 		LineFollower->Bend_speed_left = 100;
 		LineFollower->Kp = 0.02;
 		LineFollower->Kd = 350;
 	  }
 	  /*SPECIAL mode*/
 	  if(RxData == 'h')
 	  {
 	    LineFollower->Base_speed_R = 123;
 	    LineFollower->Base_speed_L = 123;
 	    LineFollower->Max_speed_L = 172;
 	    LineFollower->Max_speed_R = 172;
 	 	LineFollower->Sharp_bend_speed_right = -90;
 		LineFollower->Sharp_bend_speed_left = 185;
 		LineFollower->Bend_speed_right = -50;
 		LineFollower->Bend_speed_left = 100;
 		LineFollower->Kp = 0.02;
 		LineFollower->Kd = 350;
 	  }
 	  /*RA-1-final-slower*/
 	  if(RxData == 'o')
 	  {
 	    LineFollower->Base_speed_R = 143;
 	    LineFollower->Base_speed_L = 143;
 	   	LineFollower->Max_speed_L = 182;
 	  	LineFollower->Max_speed_R = 182;
 	  	LineFollower->Sharp_bend_speed_right = -76;
 		LineFollower->Sharp_bend_speed_left = 90;
 		LineFollower->Bend_speed_right = -50;
 		LineFollower->Bend_speed_left = 100;
 		LineFollower->Kp = 0.02;
 		LineFollower->Kd = 350;
 	   }
 	   /*RA-2-eliminations-faster*/
 	   if(RxData == 'u')
 	   {
 	     LineFollower->Base_speed_R = 153;
 	     LineFollower->Base_speed_L = 153;
 	     LineFollower->Max_speed_L = 187;
 	   	 LineFollower->Max_speed_R = 187;
 	  	 LineFollower->Sharp_bend_speed_right = -76;
 	 	 LineFollower->Sharp_bend_speed_left = 90;
 	 	 LineFollower->Bend_speed_right = -50;
 	 	 LineFollower->Bend_speed_left = 100;
 	 	 LineFollower->Kp = 0.02;
 	 	 LineFollower->Kd = 350;
 	   }
 	  /*Gruzik2.1 Robo Comp 2024r 1*/
 	  if(RxData == 'p')
 	  {
 		 LineFollower->Base_speed_R = 143;
 		 LineFollower->Base_speed_L = 143;
 		 LineFollower->Max_speed_L = 182;
 		 LineFollower->Max_speed_R = 182;
 		 LineFollower->Sharp_bend_speed_right = -76;
 		 LineFollower->Sharp_bend_speed_left = 90;
 		 LineFollower->Bend_speed_right = -40;//40
 		 LineFollower->Bend_speed_left = 110;
 		 LineFollower->Kp = 0.02;
 		 LineFollower->Kd = 350;
 	  }
 	  /*Gruzik2.1 Robo Comp 2024 2*/
 	  if(RxData == 'r')
 	  {
 		 LineFollower->Base_speed_R = 153;
 		 LineFollower->Base_speed_L = 153;
 		 LineFollower->Max_speed_L = 187;
 		 LineFollower->Max_speed_R = 187;
 		 LineFollower->Sharp_bend_speed_right = -76;
 		 LineFollower->Sharp_bend_speed_left = 90;
 		 LineFollower->Bend_speed_right = -40;//40
 		 LineFollower->Bend_speed_left = 110;
 		 LineFollower->Kp = 0.02;
 		 LineFollower->Kd = 350;
 	   }
}

static void Mode_change(LineFollower_t *LF)
{
	char *ParsePointer = strtok(NULL, ",");

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 2)
	{
		App_Controll(ParsePointer[0], LF);
	}
}
void Parser_Parse(uint8_t *ReceivedData, LineFollower_t *LineFollower)
{
	char *ParsePointer = strtok((char*)ReceivedData, "=");

	if(!strcmp("Kp",ParsePointer))
	{
		kp_change(LineFollower);
	}
	else if(!strcmp("Kd",ParsePointer))
	{
		kd_change(LineFollower);
	}
	else if(!strcmp("Base_speed",ParsePointer))
	{
		Base_speed_change(LineFollower);
	}
	else if(!strcmp("Max_speed",ParsePointer))
	{
		Max_speed_change(LineFollower);
	}
	else if(!strcmp("Sharp_bend_speed_right",ParsePointer))
	{
		Sharp_bend_speed_right_change(LineFollower);
	}
	else if(!strcmp("Sharp_bend_speed_left",ParsePointer))
	{
		Sharp_bend_speed_left_change(LineFollower);
	}
	else if(!strcmp("Bend_speed_right",ParsePointer))
	{
		Bend_speed_right_change(LineFollower);
	}
	else if(!strcmp("Bend_speed_left",ParsePointer))
	{
		Bend_speed_left_change(LineFollower);
	}
	else if(!strcmp("Mode",ParsePointer))
	{
		Mode_change(LineFollower);
	}
}
